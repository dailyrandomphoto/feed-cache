<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>August 13th, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 13 Aug 2021 02:42:27 +0000</pubDate>
      <link>https://dev.to/nickytonline/august-13th-2021-what-did-you-learn-this-week-24ln</link>
      <guid>https://dev.to/nickytonline/august-13th-2021-what-did-you-learn-this-week-24ln</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/yDYAHbqe5DfyM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/yDYAHbqe5DfyM/giphy.gif" alt="Yoda wooping someone's butt"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>15 Beginner JavaScript Projects to Improve Your Front-End Skills!</title>
      <author>Miguel Nunez</author>
      <pubDate>Fri, 13 Aug 2021 02:29:02 +0000</pubDate>
      <link>https://dev.to/codefoxx/15-beginner-javascript-projects-to-improve-your-front-end-skills-5bcj</link>
      <guid>https://dev.to/codefoxx/15-beginner-javascript-projects-to-improve-your-front-end-skills-5bcj</guid>
      <description>&lt;p&gt;The fastest way for you to become a good web developer is to practice. This means completing as many beginner projects as you can. That’s because each project presents a unique problem and solution. Hence, the more projects you complete, the more knowledge you will gain. Think of each completed project as a medal you earned.&lt;/p&gt;

&lt;p&gt;In this list of JavaScript challenges, I’ve included some of my favorite projects for beginners. In fact, these are the same projects that I built when I was first learning JavaScript. Hopefully you can learn from them like I did. If you get stuck, don’t worry, I included a video tutorial next to each project that shows you how to solve it step by step.&lt;/p&gt;

&lt;p&gt;Before watching the solutions, I encourage you to attempt them on your own first. This is key to becoming a good developer. In programming there isn’t any shortcuts so if you don’t put in the work, you will not see improvement no matter how many tutorials you watch. If your feeling overwhelmed, take a break and relax it happens to the best of us. Remember that it takes even the brightest developer a lot of time and practice to begin to master this stuff.&lt;/p&gt;

&lt;p&gt;Finally, I left a “try it before you build it” section next to each project. Each project is hosted for free with GitHub Pages so after you complete your first project, learn how to host it the same way by reading &lt;a href="https://medium.com/@iamcodefoxx/host-your-website-for-free-with-github-pages-in-4-easy-steps-1f468ad0135b"&gt;this&lt;/a&gt; super easy to follow guide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Hex Colors&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4nCH8EA55js"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Make the web a little prettier with this simple hex colors application. This app changes the background color and displays that color’s hexadecimal code on the screen all on the click of a button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Hex-Colors-Gradient/"&gt;Hex Colors Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Data structures&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
Building this project taught me how to use onclick, which is used to attach a function to a button. In this case that function was generating a random hex color and making it the color of the background. Learning this was very useful since nearly every modern web application uses buttons. I have a feeling this is a technique I will use over and over.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Random Quotes&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LdzcRuMnlvs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
If your in need of a little motivation, I got you covered. In this project, we will build a random quote generator equipped with plenty of motivational quotes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Random-Quote-Generator/"&gt;Random Quotes Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
This application can be created in various ways but it was interesting to see it being solved using an object, an often under-utilized data structure. I also learned a simple algorithm that’s responsible for generating a random quote each time the user clicks on the button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Image Carousel&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-5yNF2J0Coc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Need an application to display all your cool pictures in? Awesome, in project number three we’ll create an application that allows us to navigate pictures on the click of a button. In programming, we call these photo carousels or image sliders.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/ImageCarousel/"&gt;Image Carousel Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
It was interesting to learn how this sort of project was implemented. At first, we used CSS to block all of the images from the screen. Then we used JavaScript to manipulate the CSS style into revealing one image at a time. Before completing this project I was unsure if it was possible to change the CSS styles directly with JavaScript, it turns out that it is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Digital Clock&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QxfQJlEBdNI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Thinking of purchasing a digital clock? Not anymore, in this project you’ll learn how to build your own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/DigitalClock/"&gt;Digital Clock Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Data structures&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
In building this project, I learned that with JavaScript we can create a built in object and retrieve the time from it using built in functions. This is great because it eliminates having to include an additional library, like we do in Python or C++. I also learned about a built in function called setTimeout, which is used to call another function over and over. For this project it was necessary to use setTimeout to ensure that our time was being updated properly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Calculator&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kaq9w0MUInc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
A calculator. No JavaScript beginner project list would be complete without it and we aren’t making any exceptions here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Calculator/"&gt;Calculator Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
It was almost unbelievable to see how simple this was to build. Before building this I thought each expression needed to be solved manually with some sort of complex function. It turns out there’s a built in JavaScript function named eval that takes care of this for us. I really enjoyed building this app and even changed the style of it to give it my own flavor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Grocery List&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8I5UCTlMa34"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Hungry? Let’s go to the grocery store with this grocery list app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Grocery-List/"&gt;Grocery List Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
This is a really cool looking app and it’s the first project on the list where we made use of event listeners. Indeed, we used an event listener to add a new item to the grocery list whenever the user clicked on the “enter” key and another to scratch an item off the list when they clicked on that particular item. It was useful to learn how the function that’s responsible for deleting all the elements within a div was written. In this case, this function deleted all of the items in our grocery list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Tip Calculator&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/I4tNOpNIU5Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
No more looking around the table to see who’s taking care of the tip with this tip calculator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/TipCalculator/"&gt;Tip Calculator Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
Developing the function that determines the amount each person will tip was rather easy. Perhaps the greatest challenge here was using CSS to mimic the design of the app. It looks like a rather simple design but it’s actually a little challenging to do without watching the tutorial first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. To-do List&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/H5tuwAO-_Kg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Let’s make the most of our day with this awesome to-do list app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/To-do-list/"&gt;To-do List Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Data structures&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
The solution to this one was very similar to the grocery list application. I found myself looking back at the code for that one to help me solve this one. One thing that was different, however, was the function to change the background color of each item on the list. I thought that was a very nice addition to the project, as it makes it look a lot nicer. Overall, I would say this was more of a review project but it was still great practice nonetheless.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Flashcards&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wtqbOFYivxw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
This is an application that allows you to create flashcards so put away those paper flashcards because there’s a new boss in town.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Flashcards/"&gt;Flashcards Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
First off what a great looking application. It can help students study and keep them from spending money on paper flashcards. This is the first project on the list where we used flexbox so it was little challenging at first. Once I got the hang of it, however, it was actually very easy to use and it made the project a lot more dynamic. In particular, I really enjoyed the align-item, flex-wrap, and justify-content options because they made the flashcards responsive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Sticky Notes&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_B-54mvPup4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Lets build a sticky notes application. Yes, you may throw all of those paper sticky notes away now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Sticky-Notes/"&gt;Sticky Notes Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Data structures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
The code for building this project was very similar to the flashcards project but that’s no problem because the practice was needed. Indeed, if I didn’t have the code for that project to fall back on, I would of had to watch the flashcards tutorial video again to check if I was doing this one correctly. Of course, this project does have some unique features so it was challenging figuring out how to code those parts. Overall, I learned a great deal from this project since its built using a combination of everything we have learned so far.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. Timer&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_bvutuhUxHY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Let’s build a timer. Ready, set, go!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Timer/"&gt;Timer Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
It turns out that building a simple timer is harder than it seems. One would think that using the same setInterval function from the digital clock project would be sufficient to display the correct time. It turns out that technique simply doesn’t work for this. For this project, we create variables to hold different information about the time, for example, when the time was started, when the time was stopped, and how long the time was stopped. Without these variables and the calculations we perform with them, our digital clock would simply be unable to correctly display the time elapsed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. Math 4 Kids&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Uw9wc5wm_mw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
A cool application that teaches kids basic arithmetic operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Math4Kids/"&gt;Math 4 kids Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Data structures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
In this project, I learned how to switch from one web page to another and how to play a sound file. It turns out both of these tasks are rather simple to do. The hardest part was figuring out how to randomly place the answers in different boxes so the correct answer isn’t always in the same location. I tried my best to figure it out on my own but ended up watching the tutorial for the solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. Unsplash API ( Image Generator )&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7QQkl0NLxBQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Need some images for your new website? Let’s build an image generator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/UnsplashAPI/"&gt;Image Generator Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Fetch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
Completing this project taught me how to use JavaScript’s built in fetch to make API requests. Before building this project, I was completely unaware that the Unsplash API existed. It was interesting to learn that many established companies integrate this API into their website. It’s also cool to have an image generator for whenever I need a new wallpaper on my desktop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14. Quotes API ( Typewriter )&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3rDEQYg8UWU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
An application that fetches a random quote from an API and displays it on the screen with a typewriter effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Typewriter/"&gt;Typewriter Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Fetch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
Learning how to write the typewriter script was awesome. I’ve actually seen this effect implemented in video games. Now I can use it when I build my own games. As far as the code is concerned, it was interesting to learn that we don’t always need CSS to make cool animations. In this project we used the built in JavaScript substring function to make the typewriter effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;15. Square Cards ( Template )&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MvgiPlVF0Tg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
A stylish way to display data or simply a square card.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/SquareCards/"&gt;Square Cards Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
In this project I learned how to open up YouTube videos and webpage articles directly from JavaScript. This was a great addition to the arsenal of tools I now possess ( thanks to 15 beginner projects! ) as a web developer.&lt;/p&gt;

&lt;p&gt;Need more JavaScript beginner project ideas? Check out my &lt;a href="https://jsprospect.com/"&gt;jsprospect&lt;/a&gt; website.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>projects</category>
      <category>coding</category>
    </item>
    <item>
      <title>Who can hire me</title>
      <author>Kato joshua</author>
      <pubDate>Fri, 13 Aug 2021 01:07:12 +0000</pubDate>
      <link>https://dev.to/joshuakato/who-can-hire-me-487m</link>
      <guid>https://dev.to/joshuakato/who-can-hire-me-487m</guid>
      <description>&lt;p&gt;Am a full stack web developer. Experienced with laravel, vue and react. I need a job. Anyone interested in hiring me am available and you can reach me out. My contacts, tel +256752567534,&lt;a href="mailto:katoj65@gmail.com"&gt;katoj65@gmail.com&lt;/a&gt;. Am open to learning opportunities as well. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Electron Adventures: Episode 19: Sending Data To Frontend</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Fri, 13 Aug 2021 00:57:11 +0000</pubDate>
      <link>https://dev.to/taw/electron-adventures-episode-19-sending-data-to-frontend-3kcc</link>
      <guid>https://dev.to/taw/electron-adventures-episode-19-sending-data-to-frontend-3kcc</guid>
      <description>&lt;p&gt;In previous episode, we called some backend functions from the frontend through IPC channels. Now let's try it the other way.&lt;/p&gt;

&lt;p&gt;It's similar, but not identical. Mostly because while there's one backend/main process, there could be a bunch of frontend/renderer processes, each with their window, so we can't just "send to frontend" like &lt;code&gt;ipcMain.invoke&lt;/code&gt; without being a bit more specific.&lt;/p&gt;

&lt;p&gt;So can we do &lt;code&gt;someWindow.webContents.invoke&lt;/code&gt;? &lt;a href="https://github.com/electron/electron/issues/25667"&gt;Well, also no&lt;/a&gt;. For complicated technical reasons Electron decided to not include this, and if you really need it, &lt;a href="https://www.npmjs.com/package/electron-promise-ipc"&gt;you need to use a third party library that emulates it with a bunch of calls&lt;/a&gt;. I think they should just include it in Electron.&lt;/p&gt;

&lt;p&gt;For sending one way messages we can do &lt;code&gt;someWindow.webContents.send&lt;/code&gt; and that's all we'll do today.&lt;/p&gt;

&lt;p&gt;But let's take it step by step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#start-a-new-application"&gt;
  &lt;/a&gt;
  Start a new application
&lt;/h3&gt;

&lt;p&gt;We start the usual way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; electron
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-indexhtml-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;index.html&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Nothing new here, just some styling, and placeholder for messages we'll receive from the backend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Messages from the backend:&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"messages"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-indexjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;index.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;We need to start a frontend as usual, except this time we also want to save the window object, so we can send messages to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;win&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;webPreferences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;nodeIntegration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;contextIsolation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;window-all-closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's do the second step - let's read whatever is being typed on the terminal, and send it over!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;readline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;readline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createInterface&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;rl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;line&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webContents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;line&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-appjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;app.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Once we receive a message, just append it to the &lt;code&gt;#messages&lt;/code&gt; div.&lt;/p&gt;

&lt;p&gt;As explained above, we can't really reply to this message, we'd need to do something a bit more complicated if we wanted responses as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ipcRenderer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#messages&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;ipcRenderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;line&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;
  &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-to-do-with-all-this"&gt;
  &lt;/a&gt;
  What to do with all this?
&lt;/h3&gt;

&lt;p&gt;In a real application, you'd want to declare the interface between frontend and backend, and put it all in &lt;code&gt;preload.js&lt;/code&gt;, so rest of your frontend can run without any special privileges.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;And here's the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X7RwbgdZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gcbn3kyuhl4n9tgf1oj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X7RwbgdZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gcbn3kyuhl4n9tgf1oj.png" alt="Episode 19 screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As usual, &lt;a href="https://github.com/taw/electron-adventures/tree/master/episode-19-sending-data-to-frontend"&gt;all the code for the episode is here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>electron</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Django Infinite scrolling with javascript fetch api and function based view.</title>
      <author>tochimclaren</author>
      <pubDate>Thu, 12 Aug 2021 23:35:43 +0000</pubDate>
      <link>https://dev.to/tochimclaren/django-infinite-scrolling-with-javascript-fetch-api-and-function-based-view-47fo</link>
      <guid>https://dev.to/tochimclaren/django-infinite-scrolling-with-javascript-fetch-api-and-function-based-view-47fo</guid>
      <description>&lt;p&gt;Hello, I will take you straight through the process of adding inifinte pagination in your django application like it's abc complete code is down below&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: this is for absolute beginner&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tochimclaren/django-infinite-scroll.git"&gt;django-infinite-scroll&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First thing first, we create our django project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir django-infinite-scroll
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd django-infinite-scroll
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pipenv shell #this initializes with Pipfile and creates the environment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We install our django application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pipenv install django
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a new django project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;django-admin startproject core .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create our app blog and add it to &lt;code&gt;INSTALLED_APPS&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py startapp blog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # our blog app
    'blog.apps.BlogConfig',
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the development server and make sure everything is working properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Migrate the database and createsuperuser in my case the credentials were username: &lt;code&gt;admin&lt;/code&gt; password: &lt;code&gt;admin&lt;/code&gt; run the server and let the fun begin!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating a simple model for a blog to hold&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# models.py
from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=255)
    content = models.TextField()
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
    published = models.BooleanField(default=False)

    def __str__(self):
        return self.title
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# views.py
from django.core.paginator import Paginator
from django.http import JsonResponse
from django.shortcuts import render
from .models import Post


def posts(request):
    # it's not a bug if it's intentional ;)
    post_list = Post.objects.filter(published=False)
    # we get page 1 returns 10 post objects
    paginator = Paginator(post_list, 10)

    # page_number is initialized to `1` see main.js
    page_number = request.GET.get('page')

    # we are applying page number which defaults to `1`
    page_obj = paginator.get_page(page_number)

    if page_number:
        # We are checking if `page_number` &amp;lt; or == 
        paginator.num_pages total amount of pages returned by the `Paginator` this only runs if the above conditions are met
        if int(page_number) &amp;lt;= paginator.num_pages:

            obj_list = paginator.get_page(page_number)

            obj_list = obj_list.object_list.values()

            return JsonResponse(list(obj_list), status=200, safe=False)

    ctx = {'page_obj': page_obj}
    return render(request, 'post/posts.html', ctx)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add your app url to project url config&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#core/urls.py

from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('blog.urls'))
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Define your app urls.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# blog/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.posts, name="posts")
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a simple example template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# template
# 'blog/templates/post/posts.html'
{% load static %}
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        #content{
            margin: 0 auto;
            width: 40vw;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div id="content"&amp;gt;
        {% for post in page_obj %}
            &amp;lt;div&amp;gt;
                &amp;lt;h1&amp;gt;{{post.title}}&amp;lt;/h1&amp;gt;
                &amp;lt;p&amp;gt;{{post.content}}&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        {% endfor %}
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script type="text/javascript" src="{% static 'blog/js/main.js' %}"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the js side of things, we are listening to scroll event, when we scroll to the bottom of the page, we trigger a function that calls our view which in turn returns a Json objects that we can inject to our template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# main.js
# 'blog/static/blog/js/main.js'

content = document.querySelector("#content");
let page = 1

window.onscroll = function() {
    url = `/?page=${page}`
    if (window.innerHeight + window.pageYOffset &amp;gt;= document.body.offsetHeight) {
        fetch(url).then(res =&amp;gt; {
            if (res.ok) {
                return res.json();
            }
        }).then(data =&amp;gt; {
            console.dir(data)
            page += 1
            content.innerHTML += data.map(
                obj=&amp;gt;`&amp;lt;div&amp;gt;
                &amp;lt;h1&amp;gt;${obj.title}&amp;lt;/h1&amp;gt; 
                &amp;lt;p&amp;gt;${obj.content}&amp;lt;/p&amp;gt; 
                &amp;lt;/div&amp;gt;`
                ).join("\n")
        }).catch(err =&amp;gt; {

        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope this helps shed some weight on your web application, because things like these are not worth intsalling an external library (waypointjs i'm looking at you), please help your app shed some weight! Happy coding!&lt;/p&gt;

</description>
      <category>django</category>
      <category>ajax</category>
      <category>fetch</category>
      <category>pagination</category>
    </item>
    <item>
      <title>🐳 Docker para desarrolladores</title>
      <author>Fernando Cutire</author>
      <pubDate>Thu, 12 Aug 2021 23:05:11 +0000</pubDate>
      <link>https://dev.to/fernandocutire/docker-para-desarrolladores-bk6</link>
      <guid>https://dev.to/fernandocutire/docker-para-desarrolladores-bk6</guid>
      <description>&lt;p&gt;Docker es una herramienta maravillosa para desarrolladores y el concepto de empaquetar tus dependencias en un solo lugar que corre en cualquier lugar suena casi utóṕico.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#en-este-art%C3%ADculo-aprender%C3%A1s"&gt;
  &lt;/a&gt;
  En este artículo aprenderás
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Cómo leer un Dockerfile&lt;/li&gt;
&lt;li&gt;Problemas comunes al correr tu Dockerfile&lt;/li&gt;
&lt;li&gt;Analizar Dockerfile de una SPA&lt;/li&gt;
&lt;li&gt;Cómo construir tus propios dockerfile&lt;/li&gt;
&lt;li&gt;Keywords básicas sobre los Dockerfile&lt;/li&gt;
&lt;li&gt;Qué es alpine y porqué es usado&lt;/li&gt;
&lt;li&gt;Donde buscar imágenes para tus contenedores&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Usaré un ejemplo para que podamos entender mejor el funcionamiento de un Dockerfile, un ejemplo para una aplicación de react&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:current-alpine3.14&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8086&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["npm", "start"]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si empleamos la similitud entre un contenedor de esos que los barcos transportan y los docker lo podemos entender de una manera mucho más sencilla y práctica.&lt;/p&gt;

&lt;p&gt;Es verdad que dentro de un contenedor puedes meter una cantidad exacta de mercancía, pero de diferentes tipos y estos poseen un tamaño específico para que sean fáciles de identificar y de llevar por los barcos.&lt;/p&gt;

&lt;p&gt;En docker funciona de forma similar, solo que nuestra mercancía es nuestra aplicación y las reglas son las siguientes.&lt;/p&gt;

&lt;p&gt;De manera práctica nos encontraremos con &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from"&gt;
  &lt;/a&gt;
  FROM
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:current-alpine3.14&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esto significa que se genera un contenedor a partir de una &lt;strong&gt;imagen&lt;/strong&gt;, podemos pensar en ella como un molde que es la primera capa de nuestro contenedor. Ella tendrá configuraciones específicas que servirán para correr los comandos consecuentes, puedes ver que uso node:current-alpine3.14&lt;/p&gt;

&lt;p&gt;Esta imagen la encuentro en la página de &lt;a href="https://hub.docker.com/_/node"&gt;docker hub&lt;/a&gt;, que podemos pensar en ella como un repositorio de imágenes, comúnmente buscarás &lt;strong&gt;imágenes oficiales&lt;/strong&gt; (estas tienen un símbolo de imagen oficial a lado del nombre). &lt;/p&gt;

&lt;p&gt;En docker funciona de forma similar, solo que nuestra mercancía es nuestra aplicación y las reglas son las siguientes.&lt;/p&gt;

&lt;p&gt;Ahora conocemos que esto de node:current-alpine3.14 es el nombre completo de la imagen que usamos como base, pero ¿Qué es alpine? Alpine es el sistema operativo (basado en linux) de nuestra imagen. Este nombre es famoso porque representa una imagen con un peso mínimo de mega bytes , y esto se busca para que tu contenedor final no pese mucho, ya que no conviene mucho tener tu aplicación de 50mb y que tu imagen base pese 250 mb.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workdir"&gt;
  &lt;/a&gt;
  Workdir
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El WORKDIR indica el directorio de trabajo, nos referimos a el como un directorio que se crea dentro del contenedor que se usará como base para correr los comandos consecuentes.&lt;/p&gt;

&lt;p&gt;Entonces conocemos que el workdir se refiere más a nuestro contenedor que a tu aplicación por eso verás que en muchos lugares se le conoce como /app, si tu aplicación usa sus archivos en src/, nada de preocupaciones, recuerda que se habla del contenedor y no tanto de tu aplicación, esto vendrá en los próximos comandos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#copy"&gt;
  &lt;/a&gt;
  COPY
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Los comandos COPY, hacen honor a su nombre de copiar los archivos de tu aplicación a la del contenedor /app.&lt;/p&gt;

&lt;p&gt;Primero copiamos el package.json porque de allí correremos comandos npm.&lt;/p&gt;

&lt;p&gt;Luego empleamos el COPY . . &lt;/p&gt;

&lt;p&gt;Admito que esto no es muy explicativo pero básicamente es copiar lo de tu directorio al directorio de trabajo (WORKDIR) el que ya habíamos específicado anteriormente. &lt;/p&gt;

&lt;p&gt;Podríamos traducir a COPY . /app&lt;/p&gt;

&lt;p&gt;El WORKDIR indica el directorio de trabajo, nos referimos a el como un directorio que se crea dentro del contenedor que se usará como base para correr los comandos consecuentes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run"&gt;
  &lt;/a&gt;
  RUN
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Este puede aparecer bastante en el desarrollo de una aplicación, y hace lo que su nombre, corre en tu contenedor lo que le pongas a su izquierda así de simple.&lt;/p&gt;

&lt;p&gt;Usualmente cuando agarras una aplicación , lo primero que haces es instalar las dependencias porque sino la aplicación no corre, esto es un clásico. Bueno en docker sucede similar, corre el npm install que harías normalmente. Sobre el set progress=false es para que no meustre la barra de progreso al instalar dependencias , el &amp;amp;&amp;amp; une comandos por lo que le coloco npm install.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#expose"&gt;
  &lt;/a&gt;
  EXPOSE
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8086&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;EXPOSE sirve para decir que el puerto que tu contenedor usará. &lt;/p&gt;

&lt;p&gt;Aquí está el dilema y es que colocarlo no hará efecto a la hora de correr el contenedor, entonces esto sirve más de documentación. Lee sobre como correr un contenedor&lt;/p&gt;

&lt;p&gt;En mi opinión está bien colocarlo porque la documentación es muy importante pero es bueno tener en cuenta que su utilidad es esa y a la hora de correrlo no esperar que abra en ese puerto por defecto.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cmd"&gt;
  &lt;/a&gt;
  CMD
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["npm", "start"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CMD es la consola que corre el comando que coloques entre sus corchetes, esto sucederá cuando se termine de correr el contenedor.&lt;/p&gt;

&lt;p&gt;Quizá al final de la construcción de la imagen no se ejecute pero su función se realizará al final de correr el contenedor y no la construcción.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recapitulando"&gt;
  &lt;/a&gt;
  Recapitulando
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;
&lt;span class="c"&gt;# Usar una imagen  &lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:current-alpine3.14&lt;/span&gt;

&lt;span class="c"&gt;# Establecer el directorio de trabajo de nuestro contenedor&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;

&lt;span class="c"&gt;# Copiar el package.json a la carpeta /app de nuestro contenedor&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json /app&lt;/span&gt;

&lt;span class="c"&gt;# Copiará otros archivos de la aplicación&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="c"&gt;# Ejecutar el comando npm set progress=false &amp;amp;&amp;amp; npm install&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="c"&gt;# Exponer el puerto 8086 de el contenedor docker, fin de documentación&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8086&lt;/span&gt;

&lt;span class="c"&gt;# Correrá este comando al final cuando se esté corriendo el contenedor&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["npm", "start"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finalizando"&gt;
  &lt;/a&gt;
  Finalizando
&lt;/h2&gt;

&lt;p&gt;Al final de todo esto recuerda que puedes ejecutar el comando &lt;code&gt;docker build -t aplicacion-docker .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; significa que colocarás un tag que vendría a ser un nombre, aquí no puedes usar letras mayúsculas así que separo con un guión.&lt;/p&gt;

&lt;p&gt;El &lt;code&gt;.&lt;/code&gt; al final significa que buscará dentro de la carpeta un Dockerfile y lo leerá para crear una imagen a partir de las instrucciones, si abres la terminal desde otra carpeta y quieres correr el comando debes sustituir ese punto con la ubicación de el Dockerfile, lo mismo sucede si tienes más de un Dockerfile en tu aplicación pero esto es algo que no suele suceder.&lt;/p&gt;

&lt;p&gt;También quiero destacar que tu archivo se debe llamar Dockerfile, si le llamas DockerFile, u otro nombre te mandará error, este es un error frecuente también, recuerda Dockerfile.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>frontend</category>
    </item>
    <item>
      <title>11 Websites To Practice You Coding And Your Problem Solving Skills</title>
      <author>Aya Bouchiha</author>
      <pubDate>Thu, 12 Aug 2021 23:00:46 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/11-websites-to-practice-you-coding-and-your-problem-solving-skills-51k9</link>
      <guid>https://dev.to/ayabouchiha/11-websites-to-practice-you-coding-and-your-problem-solving-skills-51k9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#11-websites-to-practice-your-coding-and-problemsolving-skills"&gt;
  &lt;/a&gt;
  11 websites to practice your coding and problem-solving skills
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://coderbyte.com/"&gt;coderbyte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.topcoder.com/"&gt;topcoder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codewars.com/"&gt;codewars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/"&gt;Leetcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackerrank.com/"&gt;hackerrank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://exercism.io/"&gt;exercism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codechef.com/"&gt;codechef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coderbyte.com/"&gt;coderbyte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codefights.com/"&gt;coderfights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.spoj.com/"&gt;SPOJ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codeforces.com/"&gt;codeforces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested Posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/youtube-courses-projects-to-master-javascript-3lhc"&gt;Youtube Courses, Projects To Learn Javascript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/you-complete-guide-to-set-object-in-javascript-12gc"&gt;You Complete Guide To Set Object In Javascript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/all-js-string-methods-in-one-post-4h23"&gt;All JS String Methods In One Post!&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To Contact Me:&lt;/p&gt;

&lt;p&gt;email:&lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>"No usable version of the libssl was found" SOLVED</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Thu, 12 Aug 2021 22:44:52 +0000</pubDate>
      <link>https://dev.to/n3wt0n/no-usable-version-of-the-libssl-was-found-solved-2ffa</link>
      <guid>https://dev.to/n3wt0n/no-usable-version-of-the-libssl-was-found-solved-2ffa</guid>
      <description>&lt;p&gt;Have you ever encountered this error when trying to build a dotnet core application in GitHub Actions and Azure Pipelines, or when trying to use .NET Core on Linux?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fXAoEFHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhc0ujgsdom3z0gcf137.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fXAoEFHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhc0ujgsdom3z0gcf137.png" alt="Error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today I'm gonna tell you why the "&lt;code&gt;No usable version of the libssl was found&lt;/code&gt;" error happens and show you how to solve it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/EbEzgxLi8YY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/EbEzgxLi8YY"&gt;Link to the video: https://youtu.be/EbEzgxLi8YY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-the-error-happens"&gt;
  &lt;/a&gt;
  Why The Error Happens
&lt;/h3&gt;

&lt;p&gt;So first think first, let me tell you why this happens.&lt;/p&gt;

&lt;p&gt;.NET Core, among the other things, relies on some &lt;strong&gt;OpenSSL libraries&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lYfvcDG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8muob51x4cdhjj4aiv5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lYfvcDG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8muob51x4cdhjj4aiv5.png" alt="OpenSSL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OpenSSL is one of the &lt;strong&gt;most common&lt;/strong&gt; cryptographic libraries used on Linux, and it has multiple versions. Version 1.0 is kind of old, but still heavily used, while 1.1 is the &lt;strong&gt;newer version&lt;/strong&gt; that was &lt;em&gt;relatively recently released&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;The problem is that &lt;strong&gt;versions 1.0 and 1.1 are not compatible&lt;/strong&gt;. An application that expects 1.0 &lt;strong&gt;cannot&lt;/strong&gt; build against 1.1, nor run against it.&lt;/p&gt;

&lt;p&gt;Many Linux distributions are starting to make &lt;strong&gt;OpenSSL 1.1 the new default&lt;/strong&gt; instead of the version 1.0&lt;/p&gt;

&lt;p&gt;And here is the problem: &lt;strong&gt;&lt;em&gt;.NET Core 2.1, and all earlier versions, only support OpenSSL 1.0&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-solve-it"&gt;
  &lt;/a&gt;
  How to Solve it
&lt;/h3&gt;

&lt;p&gt;So, how can we fix this? &lt;strong&gt;We have 2 ways&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#upgrade-net-core-version"&gt;
  &lt;/a&gt;
  Upgrade .NET Core version
&lt;/h4&gt;

&lt;p&gt;The simplest one would be to upgrade to a &lt;strong&gt;most recent version&lt;/strong&gt; of .NET Core.&lt;/p&gt;

&lt;p&gt;And I'm not talking about major upgrades, you don't need to go all the way to .NET 5.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJJjqAlB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o15wewlth5f3trj2gg3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJJjqAlB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o15wewlth5f3trj2gg3n.png" alt="OpenSSL .NET Core 2.1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Luckily for us, the .NET team has &lt;strong&gt;updated .NET Core 2.1 to support the version 1.1&lt;/strong&gt; of OpenSSL.&lt;/p&gt;

&lt;p&gt;All you need to do is make sure that you are using the &lt;strong&gt;latest minor build of .NET Core 2.1&lt;/strong&gt;, which at the time of writing is the &lt;em&gt;2.1.28&lt;/em&gt; which has an SDK version of &lt;em&gt;2.1.816&lt;/em&gt;. And of course&lt;/p&gt;

&lt;p&gt;And doing this in Actions or Pipelines is very simple. Just &lt;strong&gt;change the version of .NET Core in the Setup task&lt;/strong&gt; and you are done.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#install-the-older-version"&gt;
  &lt;/a&gt;
  Install the Older Version
&lt;/h4&gt;

&lt;p&gt;If for any reason it is not possible for you to use the newer version of .NET Core, there is still one more thing you can do.&lt;/p&gt;

&lt;p&gt;Even tho as I've said before Many Linux distributions are starting to make OpenSSL 1.1 the new default, most of them &lt;strong&gt;still have a package for 1.0&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;So you just need to &lt;strong&gt;find and install that&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;On CentOS and Fedora for example it's called &lt;code&gt;compact-openssl10&lt;/code&gt;. For openSUSE, instead, it's &lt;code&gt;libopenssl1_0_0&lt;/code&gt;. Finally, for Ubuntu and Debian we have the &lt;code&gt;libssl-dev&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After installing the older version of the library, &lt;strong&gt;.NET Core will find it&lt;/strong&gt;, pick it up and use it automatically.&lt;/p&gt;

&lt;p&gt;And this of course can be done locally on your machine, but also on the CI agents in Azure Pipelines and GitHub Actions, &lt;strong&gt;simply using a &lt;code&gt;script&lt;/code&gt; task or action&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Let me know in the comment section below if you have any more questions about fixing this problem.&lt;/p&gt;

&lt;p&gt;Also, check out &lt;a href="https://youtu.be/g8tdrB3kbDU"&gt;this video&lt;/a&gt; in which I show how to use GitHub Actions with the .NET Framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/EbEzgxLi8YY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>core</category>
      <category>codenewbie</category>
      <category>linux</category>
    </item>
    <item>
      <title>Build End-to-End Encryption in 51 lines of Rust</title>
      <author>Mrinal Wadhwa</author>
      <pubDate>Thu, 12 Aug 2021 22:19:41 +0000</pubDate>
      <link>https://dev.to/mrinal/build-end-to-end-encryption-in-51-lines-of-rust-340p</link>
      <guid>https://dev.to/mrinal/build-end-to-end-encryption-in-51-lines-of-rust-340p</guid>
      <description>&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ockam-network"&gt;
        ockam-network
      &lt;/a&gt; / &lt;a href="https://github.com/ockam-network/ockam"&gt;
        ockam
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      End-to-end encryption and mutual authentication for distributed applications.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Ockam is a &lt;a href="https://github.com/ockam-network/ockam"&gt;rust library&lt;/a&gt; that makes it simple for distributed applications to guarantee end-to-end integrity, authenticity, and confidentiality of data.&lt;/p&gt;

&lt;p&gt;In this post, we'll create two small Rust programs called Alice and Bob. Alice and Bob will send each other messages, over the network, via a cloud service. They will mutually authenticate each other and will have a cryptographic guarantee that en-route messages were not tampered or forged.&lt;/p&gt;

&lt;p&gt;The intermediary cloud service and attackers on the network will not be able to see or change the contents of en-route messages. In &lt;a href="https://github.com/ockam-network/ockam/tree/develop/documentation/guides/rust#readme"&gt;later examples&lt;/a&gt; we'll also see how we can have this end-to-end protection even when the communication path between Alice and Bob is more complex - with multiple transport connections, a variety of transport protocols and many intermediaries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3IgHbSE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iet0jafct83uggj57ygp.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3IgHbSE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iet0jafct83uggj57ygp.jpeg" alt="Alice and Bob have an end-to-end protected secure channel between them that passes through a cloud service"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#rust-example"&gt;Show me the code&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remove-implicit-trust-in-porous-network-boundaries"&gt;
  &lt;/a&gt;
  Remove implicit trust in porous network boundaries
&lt;/h3&gt;

&lt;p&gt;Modern distributed applications operate in highly dynamic environments. Infrastructure automation, microservices in multiple clouds or data centers, a mobile workforce, the Internet of Things, and Edge computing mean that machines and applications are continuously leaving and entering network boundaries. Application architects have learnt that they must lower the amount of trust they place in network boundaries and infrastructure.&lt;/p&gt;

&lt;p&gt;The vulnerability surface of our application cannot include &lt;em&gt;all code&lt;/em&gt; that may be running within the same porous network boundary. That surface is too big, too dynamic and usually outside the control of an application developer. Applications must instead take control of the security and reliability of their own data. To do this, all messages that are received over the network must prove who sent them and show that they weren't tampered with or forged.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lower-trust-in-intermediaries"&gt;
  &lt;/a&gt;
  Lower trust in intermediaries
&lt;/h3&gt;

&lt;p&gt;Another aspect of modern applications that can take away Alice's and Bob's ability to rely on the integrity and authenticity of incoming messages are intermediary services, such as the cloud service in our example below.&lt;/p&gt;

&lt;p&gt;Data, within distributed applications, are rarely exchanged over a single point-to-point transport connection. Application messages routinely flow over complex, multi-hop, multi-protocol routes — &lt;em&gt;across data centers, through queues and caches, via gateways and brokers&lt;/em&gt; — before reaching their end destination.&lt;/p&gt;

&lt;p&gt;Typically, when information or commands are exchanged through an intermediary service, the intermediary is able to &lt;code&gt;READ&lt;/code&gt; the messages that are being exchanged, &lt;code&gt;UPDATE&lt;/code&gt; en-route messages, &lt;code&gt;CREATE&lt;/code&gt; messages that were never sent, and &lt;code&gt;DELETE&lt;/code&gt; (never deliver) messages that were actually sent. Alice and Bob are entirely dependent on the security of such intermediaries. If the defenses of an intermediary are compromised, our application is also compromised.&lt;/p&gt;

&lt;p&gt;Transport layer security protocols are unable to protect application messages because their protection is constrained by the length and duration of the underlying transport connection. If there is an intermediary between Alice and Bob, the transport connection between Alice and the intermediary is completely different from the transport connection between Bob and the intermediary.&lt;/p&gt;

&lt;p&gt;This is why the intermediary has full &lt;code&gt;CRUD&lt;/code&gt; permissions on the messages in motion.&lt;/p&gt;

&lt;p&gt;In environments like &lt;em&gt;Microservices, Internet-of-Things, and Edge Computing&lt;/em&gt; there are usually many such intermediaries. Our application’s vulnerability surface quickly grows and becomes unmanageable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mutually-authenticated-endtoend-encrypted-secure-channels-with-ockam"&gt;
  &lt;/a&gt;
  Mutually Authenticated, End-to-End Encrypted Secure Channels with Ockam
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/ockam-network/ockam"&gt;Ockam&lt;/a&gt; crate makes it simple for applications to create any number of lightweight, mutually-authenticated, end-to-end encrypted secure channels. These channels use cryptography to guarantee end-to-end integrity, authenticity, and confidentiality of messages.&lt;/p&gt;

&lt;p&gt;An application can use Ockam Secure Channels to enforce &lt;strong&gt;least-privileged access&lt;/strong&gt; to commands, data, configuration, machine-learning models, and software updates that are flowing, as messages, between its distributed parts. Intermediary services and compromised software (that may be running within the same network boundary) no longer have implicit CRUD permissions on our application's messages. Instead, we have granular control over access permissions – tampering or forgery of &lt;em&gt;data-in-motion&lt;/em&gt; is immediately detected.&lt;/p&gt;

&lt;p&gt;With end-to-end secure channels, we can make the vulnerability surface of our application strikingly small.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rust-example"&gt;
  &lt;/a&gt;
  Rust Example
&lt;/h2&gt;

&lt;p&gt;Let's build end-to-end protected communication between Alice and Bob, through a cloud service.&lt;/p&gt;

&lt;p&gt;We'll create two small Rust programs called Alice and Bob. We want Bob to create a secure channel listener and ask Alice to initiate a secure handshake (authenticated key exchange) with this listener. We'll imagine that Bob and Alice are running on two separate computers and this handshake must happen over the Internet.&lt;/p&gt;

&lt;p&gt;We'll also imagine that Bob is running within a private network and cannot open a public port exposed to the Internet. Instead, Bob registers a forwarding address on an Ockam Node, running as a cloud service in Ockam Hub.&lt;/p&gt;

&lt;p&gt;This node is at TCP address &lt;code&gt;1.node.ockam.network:4000&lt;/code&gt; and offers two general purpose Ockam services: &lt;em&gt;routing and forwarding.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;If you don't have it, please &lt;a href="https://www.rust-lang.org/tools/install"&gt;install&lt;/a&gt; the latest version of Rust.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, create a new cargo project to get started:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cargo new --lib hello_ockam &amp;amp;&amp;amp; cd hello_ockam &amp;amp;&amp;amp; mkdir examples &amp;amp;&amp;amp;
  echo 'ockam = "*"' &amp;gt;&amp;gt; Cargo.toml &amp;amp;&amp;amp; cargo build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If the above instructions don't work on your machine please &lt;a href="https://github.com/ockam-network/ockam/discussions/1642"&gt;post a question&lt;/a&gt;, we would love to help.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bob"&gt;
  &lt;/a&gt;
  Bob
&lt;/h3&gt;

&lt;p&gt;Create a file at &lt;code&gt;examples/bob.rs&lt;/code&gt; and copy the below code snippet to it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// examples/bob.rs&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ockam&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SecureChannels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TrustEveryonePolicy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Vault&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ockam&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;RemoteForwarder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Routed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TcpTransport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TCP&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Echoer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;// Define an Echoer worker that prints any message it receives and&lt;/span&gt;
&lt;span class="c"&gt;// echoes it back on its return route.&lt;/span&gt;
&lt;span class="nd"&gt;#[ockam::worker]&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Worker&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Echoer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;handle_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Routed&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;[✓] Address: {}, Received: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="nf"&gt;.address&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c"&gt;// Echo the message body back on its return_route.&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="nf"&gt;.return_route&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="nf"&gt;.body&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[ockam::node]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Initialize the TCP Transport.&lt;/span&gt;
    &lt;span class="nn"&gt;TcpTransport&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// Create a Vault to safely store secret keys for Bob.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;vault&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Vault&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// Create an Entity to represent Bob.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;bob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vault&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// Create a secure channel listener for Bob that will wait for requests to&lt;/span&gt;
    &lt;span class="c"&gt;// initiate an Authenticated Key Exchange.&lt;/span&gt;
    &lt;span class="n"&gt;bob&lt;/span&gt;&lt;span class="nf"&gt;.create_secure_channel_listener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"listener"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TrustEveryonePolicy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// The computer that is running this program is likely within a private network and&lt;/span&gt;
    &lt;span class="c"&gt;// not accessible over the internet.&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="c"&gt;// To allow Alice and others to initiate an end-to-end secure channel with this program&lt;/span&gt;
    &lt;span class="c"&gt;// we connect with 1.node.ockam.network:4000 as a TCP client and ask the forwarding&lt;/span&gt;
    &lt;span class="c"&gt;// service on that node to create a forwarder for us.&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="c"&gt;// All messages that arrive at that forwarding address will be sent to this program&lt;/span&gt;
    &lt;span class="c"&gt;// using the TCP connection we created as a client.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;node_in_hub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"1.node.ockam.network:4000"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;forwarder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;RemoteForwarder&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node_in_hub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"listener"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;[✓] RemoteForwarder was created on the node at: 1.node.ockam.network:4000"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Forwarding address for Bob is:"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forwarder&lt;/span&gt;&lt;span class="nf"&gt;.remote_address&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="c"&gt;// Start a worker, of type Echoer, at address "echoer".&lt;/span&gt;
    &lt;span class="c"&gt;// This worker will echo back every message it receives, along its return route.&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="nf"&gt;.start_worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"echoer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Echoer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// We won't call ctx.stop() here, this program will run until you stop it with Ctrl-C&lt;/span&gt;
    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#alice"&gt;
  &lt;/a&gt;
  Alice
&lt;/h3&gt;

&lt;p&gt;Create a file at &lt;code&gt;examples/alice.rs&lt;/code&gt; and copy the below code snippet to it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// examples/alice.rs&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ockam&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SecureChannels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TrustEveryonePolicy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Vault&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ockam&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;TcpTransport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TCP&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[ockam::node]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Initialize the TCP Transport.&lt;/span&gt;
    &lt;span class="nn"&gt;TcpTransport&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// Create a Vault to safely store secret keys for Alice.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;vault&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Vault&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// Create an Entity to represent Alice.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;alice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vault&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// This program expects that Bob has setup a forwarding address,&lt;/span&gt;
    &lt;span class="c"&gt;// for his secure channel listener, on the Ockam node at 1.node.ockam.network:4000.&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="c"&gt;// From standard input, read this forwarding address for Bob's secure channel listener.&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Enter the forwarding address for Bob: "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.read_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error reading from stdin."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;forwarding_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="nf"&gt;.trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c"&gt;// Combine the tcp address of the node and the forwarding_address to get a route&lt;/span&gt;
    &lt;span class="c"&gt;// to Bob's secure channel listener.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;route_to_bob_listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;route!&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;TCP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"1.node.ockam.network:4000"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;forwarding_address&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c"&gt;// As Alice, connect to Bob's secure channel listener, and perform an&lt;/span&gt;
    &lt;span class="c"&gt;// Authenticated Key Exchange to establish an encrypted secure channel with Bob.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alice&lt;/span&gt;&lt;span class="nf"&gt;.create_secure_channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route_to_bob_listener&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TrustEveryonePolicy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;[✓] End-to-end encrypted secure channel was established.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Read a message from standard input.&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Type a message for Bob's echoer:"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.read_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error reading from stdin."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="nf"&gt;.trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c"&gt;// Send the provided message, through the channel, to Bob's echoer.&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;route!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"echoer"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c"&gt;// Wait to receive an echo and print it.&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="py"&gt;.receive&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Alice received an echo: {}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;// should print "Hello Ockam!"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// This program will keep running until you stop it with Ctrl-C&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#run-the-example"&gt;
  &lt;/a&gt;
  Run the example
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Run Bob’s program:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cargo run --example bob
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The Bob program creates a Secure Channel Listener to accept requests to begin an Authenticated Key Exchange. It also connects, over TCP, to the cloud node at &lt;code&gt;1.node.ockam.network:4000&lt;/code&gt; and creates a Forwarder on that cloud node. All messages that arrive at that forwarding address will be forwarded to Bob using the TCP connection that Bob created as a client.&lt;/p&gt;

&lt;p&gt;Bob also starts an Echoer worker that prints any message it receives and echoes it back on its return route.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Bob program will print a hex value which is the forwarding address for Bob on the cloud node, copy it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a separate terminal window, in the same directory path, run the Alice program:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cargo run --example alice
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It will stop to ask for Bob's forwarding address that was printed in step 2. Give it that address.&lt;/p&gt;

&lt;p&gt;This will tell Alice that the route to reach Bob is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[(TCP, "1.node.ockam.network:4000"), forwarding_address]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When Alice sends a message along this route, the Ockam routing layer will look at the first address in the route and hand the message to the TCP transport. The TCP transport will connect with the cloud node over TCP and hand the message to it.&lt;/p&gt;

&lt;p&gt;The routing layer on the cloud node will then take the message to the forwarding address for Bob. The forwarder at that address will send the message to Bob over the TCP connection Bob had earlier created with the cloud node.&lt;/p&gt;

&lt;p&gt;Replies, from Bob, take the same path back and the entire secure channel handshake is completed is this way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;End-to-end Secure Channel is established. Send messages to Bob and get their echoes back.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the secure channel is established, the Alice program will stop and ask you to enter a message for Bob. Any message that you enter, is delivered to Bob using the secure channel, via the cloud node. The echoer on Bob will echo the messages back on the same path and Alice will print it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations on creating your first end-to-end encrypted application 🥳.&lt;/p&gt;

&lt;p&gt;We discussed that, in order to have a small and manageable vulnerability surface, distributed applications must use mutually authenticated, end-to-end encrypted channels. Implementing an end-to-end secure channel protocol, from scratch, is complex, error prone, and will take more time than application teams can typically dedicate to this problem.&lt;/p&gt;

&lt;p&gt;In the above example, we created a mutually authenticated, end-to-end encrypted channel in &lt;strong&gt;51 lines of code&lt;/strong&gt; (excluding comments).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ockam-network/ockam"&gt;Ockam&lt;/a&gt; combines proven cryptographic building blocks into a set of reusable protocols for distributed applications to communicate security and privately. The above example only scratched the surface of what is possible with the tools that our included in the &lt;code&gt;ockam&lt;/code&gt; Rust crate.&lt;/p&gt;

&lt;p&gt;To learn more, please see our use-case guide on &lt;a href="https://github.com/ockam-network/ockam/tree/develop/documentation/use-cases/end-to-end-encryption-through-kafka#readme"&gt;End-to-End Encryption through Kafka&lt;/a&gt; 🦀 and our &lt;a href="https://github.com/ockam-network/ockam/tree/develop/documentation/guides/rust#step-by-step"&gt;Step-by-Step Deep Dive&lt;/a&gt; 🦀 into the various building blocks that makeup &lt;a href="https://github.com/ockam-network/ockam"&gt;Ockam&lt;/a&gt;. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ockam-network"&gt;
        ockam-network
      &lt;/a&gt; / &lt;a href="https://github.com/ockam-network/ockam"&gt;
        ockam
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      End-to-end encryption and mutual authentication for distributed applications.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>rust</category>
      <category>security</category>
      <category>showdev</category>
      <category>technology</category>
    </item>
    <item>
      <title>Styling issues with response Templates Buttons</title>
      <author>Thomas Bnt</author>
      <pubDate>Thu, 12 Aug 2021 21:49:14 +0000</pubDate>
      <link>https://dev.to/thomasbnt/styling-issues-with-response-templates-buttons-20jf</link>
      <guid>https://dev.to/thomasbnt/styling-issues-with-response-templates-buttons-20jf</guid>
      <description>&lt;p&gt;Hello here! I'm Thomas and 22 years old. I really in love of DEV.to(gether) and sometimes I contribute to the code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-source-background"&gt;
  &lt;/a&gt;
  Open Source Background
&lt;/h3&gt;

&lt;p&gt;I started a few years ago to contribute to Open Source projects, basically I love helping people. &lt;/p&gt;

&lt;p&gt;This merger allowed me to better understand some aspects of web developers, to say that you are never alone with a problem, that you can always be helped. You just have to ask!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-this-bug"&gt;
  &lt;/a&gt;
  About This Bug
&lt;/h3&gt;

&lt;p&gt;I have already seen this possibility issue, but never created a new issue on the repository. it's absolutely nothing but seeing buttons with a default style, it stings my eyes 😵 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PNZ8_ySg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.thomasbnt.dev/i/y4i7o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PNZ8_ySg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.thomasbnt.dev/i/y4i7o.png" alt="Preview of the default buttons"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13747"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Styling Issues With Response Templates Buttons
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13747&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/michael-tharrington"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s----ubsuNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/16007075%3Fv%3D4" alt="michael-tharrington avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/michael-tharrington"&gt;michael-tharrington&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13747"&gt;&lt;time&gt;May 12, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The moderator templates button under response templates is not styled.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The buttons should be styled so that you can see when you click on one!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/16007075/117997048-a68c6700-b310-11eb-8148-dd425b3b01f9.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PfA5EAoh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/16007075/117997048-a68c6700-b310-11eb-8148-dd425b3b01f9.png" alt="Image 2021-05-12 at 9 28 42 AM"&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13747"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#how-i-smashed-it"&gt;
  &lt;/a&gt;
  How I Smashed It
&lt;/h3&gt;

&lt;p&gt;I modified the style of the two buttons while adding a black color to the &lt;code&gt;active&lt;/code&gt; class. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OGIXc-3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.thomasbnt.dev/i/156452615641516_devto.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OGIXc-3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.thomasbnt.dev/i/156452615641516_devto.gif" alt="Preview of buttons stylised"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Others themes work, good! &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kuXg3Y_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.thomasbnt.dev/i/yp43g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kuXg3Y_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.thomasbnt.dev/i/yp43g.png" alt="Others themes colors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh and edited &lt;strong&gt;submit buttons&lt;/strong&gt; like 'Send as Mod' and 'Insert'. More margin 😎&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--djdbGtwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/14293805/129024997-5c0ac9c7-c1f8-4827-bf01-a46bca22b691.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djdbGtwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/14293805/129024997-5c0ac9c7-c1f8-4827-bf01-a46bca22b691.png" alt="Two buttons with style"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/pull/14468"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Edit buttons styles for Templates responses (Mod)
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#14468&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/thomasbnt"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDzcgoCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/14293805%3Fv%3D4" alt="thomasbnt avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/thomasbnt"&gt;thomasbnt&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/pull/14468"&gt;&lt;time&gt;Aug 10, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;h2&gt;
&lt;a id="user-content-what-type-of-pr-is-this-check-all-applicable" class="anchor" href="#what-type-of-pr-is-this-check-all-applicable"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What type of PR is this? (check all applicable)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] Refactor&lt;/li&gt;
&lt;li&gt;[ ] Feature&lt;/li&gt;
&lt;li&gt;[ ] Bug Fix&lt;/li&gt;
&lt;li&gt;[ ] Optimization&lt;/li&gt;
&lt;li&gt;[ ] Documentation Update&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-description" class="anchor" href="#description"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Description&lt;/h2&gt;
&lt;p&gt;Make styles for buttons "Personal" and "Moderator" for &lt;strong&gt;Templates responses&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-related-tickets--documents" class="anchor" href="#related-tickets--documents"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Related Tickets &amp;amp; Documents&lt;/h2&gt;
&lt;p&gt;From &lt;a href="https://github.com/forem/forem/issues/13747"&gt;https://github.com/forem/forem/issues/13747&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-qa-instructions-screenshots-recordings" class="anchor" href="#qa-instructions-screenshots-recordings"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;QA Instructions, Screenshots, Recordings&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/14293805/128946040-412c7195-ad9b-4c2b-8186-2dcba84a992f.mp4" rel="nofollow"&gt;https://user-images.githubusercontent.com/14293805/128946040-412c7195-ad9b-4c2b-8186-2dcba84a992f.mp4&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-addedupdated-tests" class="anchor" href="#addedupdated-tests"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Added/updated tests?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] Yes&lt;/li&gt;
&lt;li&gt;[ ] No, and this is why: &lt;em&gt;please replace this line with details on why tests
have not been included&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;[ ] I need help with writing tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-forem-core-team-only-how-will-this-change-be-communicated" class="anchor" href="#forem-core-team-only-how-will-this-change-be-communicated"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;[Forem core team only] How will this change be communicated?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Will this PR introduce a change that impacts Forem members or creators, the
development process, or any of our internal teams? If so, please note how you
will share this change with the people who need to know about it.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] I've updated the &lt;a href="https://docs.forem.com" rel="nofollow"&gt;Developer Docs&lt;/a&gt; and/or
&lt;a href="https://admin.forem.com/" rel="nofollow"&gt;Admin Guide&lt;/a&gt;, or
&lt;a href="https://storybook.forem.com/" rel="nofollow"&gt;Storybook&lt;/a&gt; (for Crayons components)&lt;/li&gt;
&lt;li&gt;[ ] I've updated the README or added inline documentation&lt;/li&gt;
&lt;li&gt;[ ] I've added an entry to
&lt;a href="https://github.com/forem/forem/tree/main/CHANGELOG.md"&gt;&lt;code&gt;CHANGELOG.md&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] I will share this change in a &lt;a href="https://forem.dev/t/changelog" rel="nofollow"&gt;Changelog&lt;/a&gt;
or in a &lt;a href="http://forem.dev" rel="nofollow"&gt;forem.dev&lt;/a&gt; post&lt;/li&gt;
&lt;li&gt;[ ] I will share this change internally with the appropriate teams&lt;/li&gt;
&lt;li&gt;[ ] I'm not sure how best to communicate this change and need help&lt;/li&gt;
&lt;li&gt;[ ] This change does not need to be communicated, and this is why not: &lt;em&gt;please
replace this line with details on why this change doesn't need to be
shared&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-optional-what-gif-best-describes-this-pr-or-how-it-makes-you-feel" class="anchor" href="#optional-what-gif-best-describes-this-pr-or-how-it-makes-you-feel"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;[optional] What gif best describes this PR or how it makes you feel?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/27598177e106725893e571e8ebfca4933b4da2ecd64ccaca6a1c85f7c31f5ded/68747470733a2f2f632e74656e6f722e636f6d2f734f77357662443961346b41414141432f6e65772d6769726c2d6669737462756d702e676966" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/27598177e106725893e571e8ebfca4933b4da2ecd64ccaca6a1c85f7c31f5ded/68747470733a2f2f632e74656e6f722e636f6d2f734f77357662443961346b41414141432f6e65772d6769726c2d6669737462756d702e676966" alt="New Girl Fistbump GIF"&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/pull/14468"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#reflection"&gt;
  &lt;/a&gt;
  Reflection
&lt;/h3&gt;

&lt;p&gt;I learned how used &lt;code&gt;@extend&lt;/code&gt; with &lt;strong&gt;SCSS&lt;/strong&gt;. Pretty nice tool, yeah! 💪🏼&lt;br&gt;
Maybe smash others bugs like that for Forem 😎&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suggestions-for-dev-community-bug-smash"&gt;
  &lt;/a&gt;
  Suggestions for DEV Community Bug Smash
&lt;/h3&gt;

&lt;p&gt;Noope ! Just thanks &lt;em&gt;again&lt;/em&gt; to &lt;a class="mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;
 &lt;a class="mentioned-user" href="https://dev.to/rhymes"&gt;@rhymes&lt;/a&gt;
 &lt;a class="mentioned-user" href="https://dev.to/citizen428"&gt;@citizen428&lt;/a&gt;
 &lt;a class="mentioned-user" href="https://dev.to/s_aitchison"&gt;@s_aitchison&lt;/a&gt;
 and &lt;a class="mentioned-user" href="https://dev.to/coffeecraftcode"&gt;@coffeecraftcode&lt;/a&gt;
 for helping me ! &lt;/p&gt;

</description>
      <category>devbugsmash</category>
    </item>
    <item>
      <title>tty only</title>
      <author>borislav nikolov</author>
      <pubDate>Thu, 12 Aug 2021 21:35:45 +0000</pubDate>
      <link>https://dev.to/jackdoe/tty-only-1ijn</link>
      <guid>https://dev.to/jackdoe/tty-only-1ijn</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6fow3zG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u304wn2e1cbnd25lezi1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6fow3zG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u304wn2e1cbnd25lezi1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used only the tty (no X installed) for 5 nights. It was relaxing, and now I go back to it every time I am overwhelmed. &lt;/p&gt;

&lt;p&gt;I have to seriously re-think the way I spend time on my&lt;br&gt;
computer. Working only on a tty is completely calming experience, there are no ads, no hundreds of tabs open, no pressure, only code and text. I also noticed I read way way way less news, hacker or not.&lt;/p&gt;

&lt;p&gt;BTW, browsing was actually way better than I thought, between eww, w3m, lynx, links2 and links2 -g, and sometimes just reading the html dump, I was able to navigate the modern web with reasonable success.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#laptop"&gt;
  &lt;/a&gt;
  Laptop
&lt;/h1&gt;

&lt;p&gt;I bought used t440p laptop, they go from 100 to 300E. Super sturdy machine, like the opposite of my xps. Very easy to open, and very hackable.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h1&gt;

&lt;p&gt;Install debian and do some basic fixes to make the tty usable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rate (whoa slow keyboard rate pisses me off)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;add 'kbdrate -r 30 -d 0' to /etc/rc.local&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ctrl+/ etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;super annoying that &lt;code&gt;ctrl+/&lt;/code&gt; sends Delete and I want to bind it to &lt;code&gt;undo&lt;/code&gt;, to do that you have to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ showkeys

press ctrl + /

check out the keycode, (in my case it is 53)

$ dumpkeys &amp;gt; keymap

change
    control keycode  53 = Delete
    shift   control keycode  53 = Delete

to
    control keycode  53 = Control_underscore
    shift   control keycode  53 = Meta_underscore

and 51 and 52 to
    shift   control keycode  51 = Control_asciicircum
    shift   control keycode  52 = Meta_asciicircum
    (I use S-C-. and S-C-, for cursor)

add 'loadkeys path/to/keymap' in /etc/rc.local

then the bindings:

(define-key global-map (kbd "C-_") 'undo)
(define-key global-map (kbd "M-_") 'undo)
(define-key global-map (kbd "M-^") 'mc/mark-next-like-this)
(define-key global-map (kbd "C-^") 'mc/mark-previous-like-this)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;mouse&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;install consolation or gpm&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cursor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;instead of block cursor this will show the tty setup cursor (blinking underscore)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(setq visible-cursor nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;otherwise emacs has blinking (HZ/5 ~200ms) block cursor which is horrible, so replace it with blinking underscore to take less attention from your eyes. I tried all kinds of ways to stop the blinking but none worked.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;brightness
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;max=$(cat /sys/class/backlight/intel_backlight/max_brightness)
echo -n $max | sudo tee /sys/class/backlight/intel_backlight/brightness
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;font&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;install terminus and then add the setfont command to your bash/zshrc&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setfont Uni3-Terminus20x10 # 12x6 14 16 22x11 24x12 28x14 32x16
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;emacs
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;init.el:

(package-initialize)
(require 'go-mode)
(require 'multiple-cursors)
(require 'tramp)
(load-library "view")
(require 'cc-mode)
(require 'ido)
(require 'compile)

(setq tramp-default-method "ssh")
(setq undo-limit 20000000)
(setq undo-strong-limit 40000000)

(defun delete-word (arg)
  "Delete characters backward until encountering the beginning of a word.
With argument ARG, do this that many times."
  (interactive "p")
  (delete-region (point) (progn (backward-word arg) (point))))

(define-key global-map (kbd "C-h") 'delete-backward-char)
(define-key global-map (kbd "M-C-h") 'backward-kill-word)
(define-key global-map (kbd "C-_") 'undo)
(define-key global-map (kbd "M-_") 'redo)

(define-key global-map (kbd "&amp;lt;M-backspace&amp;gt;") 'delete-word)
(define-key global-map (kbd "C-M-h") 'delete-word)


(define-key global-map (kbd "&amp;lt;f2&amp;gt;") 'compile)
(define-key global-map (kbd "&amp;lt;f1&amp;gt;") 'next-error)
(define-key global-map [C-tab] 'indent-region)
(define-key global-map (kbd "M-^") 'mc/mark-next-like-this)
(define-key global-map (kbd "C-^") 'mc/mark-previous-like-this)

(global-unset-key (kbd "C-t"))

(ido-mode 1)

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(setq inhibit-startup-message t)

(global-linum-mode 0)
(display-time-mode 1)
(global-font-lock-mode -1)
(gpm-mouse-mode -1)
(setq backward-delete-char-untabify nil)

(display-battery-mode 1)
(setq make-backup-files nil)
(setq auto-save-deault nil)

(show-paren-mode 1)
(setq show-paren-delay 0.0)
(setq show-paren-style 'parenthesis)
(transient-mark-mode t)
(fset 'yes-or-no-p 'y-or-n-p)

(defun custom-go-mode-hook ()
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "go generate &amp;amp;&amp;amp; go build -v &amp;amp;&amp;amp; go test -v &amp;amp;&amp;amp; go vet &amp;amp;&amp;amp;  golangci-lint run"))
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "go build -v &amp;amp;&amp;amp; go test -v &amp;amp;&amp;amp; go vet"))
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-,") 'pop-tag-mark)
)

(add-hook 'go-mode-hook 'custom-go-mode-hook)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.bashrc:

export VISUAL='emacsclient -ct'
export EDITOR='emacsclient -ct'
alias e='emacsclient -ct'
alias emacs=e
alias vi=e
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;also start emacs daemon:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/.config/systemd/user/emacs.service

[Unit]
Description=Emacs text editor
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=forking
ExecStart=/usr/bin/emacs --daemon
ExecStop=/usr/bin/emacsclient --eval "(kill-emacs)"
Environment=SSH_AUTH_SOCK=%t/keyring/ssh
Restart=on-failure


[Install]
WantedBy=default.target
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;fzf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;setup zsh with shared history and fzf&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lock&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;vlock -all on pm suspend&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;email (personal)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I use &lt;code&gt;forgotten&lt;/code&gt; (github.com/jackdoe/forgotten) to manage encrypted list of passwords, so just use it with mutt:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.muttrc

source "/usr/bin/forgotten -key gmail -mutt |"
set from = "xyz@example.com"
set realname = "aa bb"
set use_from = yes
set envelope_from = yes
set smtp_url = "smtp://xyz@example.com@smtp.gmail.com:587"
set smtp_pass =$my_pass
set imap_user = "xyz@example.com"
set imap_pass =$my_pass
set folder = "imaps://imap.gmail.com:993"
set spoolfile = "+INBOX"
set ssl_force_tls = yes
bind index G imap-fetch-mail
set editor = "emacsclient -ct"
set charset = "utf-8"
set record = ''
set header_cache = "~/.mutt/cache/headers"
set message_cachedir = "~/.mutt/cache/bodies"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#day-1"&gt;
  &lt;/a&gt;
  Day 1:
&lt;/h1&gt;

&lt;p&gt;After installing and doing the basic setup it was pretty late, so I didnt do much more.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;links2 works nice, but too graphical, its ok to see images though&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;non ips display is total shit for console; bought new one from amazon, we will see this saturday&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;replace gpm with consolation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#day-2"&gt;
  &lt;/a&gt;
  Day 2
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;patched consolation to support right touchpad click because myh middle button is not very good&lt;/li&gt;
&lt;li&gt;fixed the ips display; it is a total gamechanger. the black is so much more black than before; amazing for tty&lt;/li&gt;
&lt;li&gt;fix alsa default card
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat &amp;gt; /etc/asound.conf &amp;lt;&amp;lt;EOF
defaults.pcm.card 1
defaults.ctl.card 1
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;download some royalty free music and played it with mplayer&lt;/li&gt;
&lt;li&gt;battery lasts quite a lot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wish eww worked better, I hate going out of emacs&lt;br&gt;
I am so happy with the new display.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;setup tlp; cap max freq at 1000mhz, I should've gotten i5 instead of i7, this i7 is just hot for no reason. Will disable hyper threading, maybe it will feel better. Or maybe I should open the laptop and clean it. Even with 1 core and no hyperthreading and cap on 1ghz it still gets hot, I guess its cleaning time; will actually check on amazon for i5, shouldnt be very expensive. Though despite the temperature, battery lasts for 6 hours (possibly more)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;went back to gpm; having mouse in links2 -g seems better&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#day-3"&gt;
  &lt;/a&gt;
  Day 3
&lt;/h1&gt;

&lt;p&gt;The new screen arrived, took exactly 5 minutes to replace, I love working on machines that are easy to repair.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wow that is a good screen haha, I forgot how much nicer it is&lt;/li&gt;
&lt;li&gt;i5 cpus are super expensive; no way I am buying one&lt;/li&gt;
&lt;li&gt;removed thermald and started using thinkfan with lower threshold (had to add options thinkpad_acpi experimental=1 fan_control=1 in modprobe.d/thinkfan.conf), so using fan level 1 at 40C is much better because when it gets to 50C it is just hot on my palm&lt;/li&gt;
&lt;li&gt;still thinking of what to write&lt;/li&gt;
&lt;li&gt;it is incredibly calming having no windows&lt;/li&gt;
&lt;li&gt;I did open and clean up the turbine a bit, but wasnt much to clean it is however really nice to have a laptop that is meant to be open&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#day-4"&gt;
  &lt;/a&gt;
  Day 4
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;made copy paste http service on top of unix socket, so I can copy between emacs and zsh without using ansi-term (&lt;a href="https://github.com/jackdoe/pasta"&gt;https://github.com/jackdoe/pasta&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is no way to programatically get the current selection from the linux kernel, so I made a patch to add new ioctl to be able to get the selection, so i can use it with M-w and C-y.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# build custom kernel on debian:

cd /usr/src &amp;amp;&amp;amp; \
git clone --depth=1 \
git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git

# change what you want, and then
# copy your config from linux-config-5.xx into the trunk and then:

make -j8 bindep-pkg LOCALVERSION=-xyz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;working without X for the whole day, was pretty fun.&lt;/p&gt;

&lt;p&gt;This is the getsel ioctl patch&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;commit 5cf882d8b74747bbc08463d83cf80509c920edca
Author: borislav nikolov &amp;lt;jack@sofialondonmoskva.com&amp;gt;
Date:   Sat Mar 21 23:42:22 2020 +0100

    patch for GETSEL
    add copy_selection_to_user

diff --git a/drivers/tty/vt/selection.c b/drivers/tty/vt/selection.c
index d54a549c5892..9b26dec762dd 100644
--- a/drivers/tty/vt/selection.c
+++ b/drivers/tty/vt/selection.c
@@ -6,6 +6,7 @@
  *                struct tty_struct *)'
  *     'int set_selection_kernel(struct tiocl_selection *, struct tty_struct *)'
  *     'void clear_selection(void)'
+ *     'int copy_selection_to_user(char __user *)'
  *     'int paste_selection(struct tty_struct *)'
  *     'int sel_loadlut(char __user *)'
  *
@@ -71,6 +72,45 @@ sel_pos(int n, bool unicode)
    return inverse_translate(vc_sel.cons, screen_glyph(vc_sel.cons, n), 0);
 }

+/**
+ * copy_selection_to_user      -   get current selection
+ *
+ * Get a copy of current selection, console lock does not have to
+ * be held
+ */
+int copy_selection_to_user(char __user *arg)
+{
+   int get_sel_user_size;
+   int ret;
+
+   if (copy_from_user(&amp;amp;get_sel_user_size,
+              arg,
+              sizeof(vc_sel.buf_len)))
+       return -EFAULT;
+
+   mutex_lock(&amp;amp;vc_sel.lock);
+
+   if (get_sel_user_size &amp;lt; vc_sel.buf_len) {
+
+       mutex_unlock(&amp;amp;vc_sel.lock);
+
+       return -EFAULT;
+   }
+
+   ret = copy_to_user(arg,
+              &amp;amp;vc_sel.buf_len,
+              sizeof(vc_sel.buf_len));
+   if (ret == 0)
+       ret = copy_to_user(arg+sizeof(vc_sel.buf_len),
+                  vc_sel.buffer,
+                  vc_sel.buf_len);
+
+   mutex_unlock(&amp;amp;vc_sel.lock);
+
+   return ret;
+}
+EXPORT_SYMBOL_GPL(copy_selection_to_user);
+
 /**
  * clear_selection     -   remove current selection
  *
diff --git a/drivers/tty/vt/vt.c b/drivers/tty/vt/vt.c
index 309a39197be0..2b7eb55aafa3 100644
--- a/drivers/tty/vt/vt.c
+++ b/drivers/tty/vt/vt.c
@@ -3061,6 +3061,9 @@ int tioclinux(struct tty_struct *tty, unsigned long arg)
        case TIOCL_PASTESEL:
            ret = paste_selection(tty);
            break;
+       case TIOCL_GETSEL:
+           ret = copy_selection_to_user(p+1);
+           break;
        case TIOCL_UNBLANKSCREEN:
            console_lock();
            unblank_screen();
diff --git a/include/linux/selection.h b/include/linux/selection.h
index 5b890ef5b59f..7cb971795013 100644
-------- a/include/linux/selection.h
+++ b/include/linux/selection.h
@@ -15,6 +15,7 @@ struct tty_struct;
 struct vc_data;

 extern void clear_selection(void);
+extern int copy_selection_to_user(char __user *arg);
 extern int set_selection_user(const struct tiocl_selection __user *sel,
                  struct tty_struct *tty);
 extern int set_selection_kernel(struct tiocl_selection *v,
diff --git a/include/uapi/linux/tiocl.h b/include/uapi/linux/tiocl.h
index b32acc229024..055ebda041d4 100644
-------- a/include/uapi/linux/tiocl.h
+++ b/include/uapi/linux/tiocl.h
@@ -20,6 +20,7 @@ struct tiocl_selection {
 };

 #define TIOCL_PASTESEL 3   /* paste previous selection */
+#define TIOCL_GETSEL   18  /* get current selection */
 #define TIOCL_UNBLANKSCREEN    4   /* unblank screen */

 #define TIOCL_SELLOADLUT   5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to use the patch you need something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/ioctl.h&amp;gt;
#include &amp;lt;linux/tiocl.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;strings.h&amp;gt;


struct getsel {
  char code;
  int size;
  char data[0];
} __attribute((__packed__));

struct getsel * get_selection(int size) {
  struct getsel *d = (struct getsel *) malloc(size + sizeof(struct getsel));
  if (d == NULL) {
    perror("malloc");
    exit(1);
  }

  bzero(d, size + sizeof(struct getsel));

  d-&amp;gt;code = 18; // TIOCL_GETSEL
  d-&amp;gt;size = size;

  int fd = open("/dev/tty",O_RDWR);
  if (ioctl(fd, TIOCLINUX, d) &amp;lt; 0) {
    perror("paste: TIOCLINUX");
    exit(1);
  }
  close(fd);
  return d;
}

int main(void) {
  int size = 200;
  struct getsel *d = get_selection(size);

  printf("size: %d\n",d-&amp;gt;size);
  for (int i = 0; i &amp;lt; size; i++) {
    if (d-&amp;gt;data[i]) {
      printf("data[%d] = %d\n",i, d-&amp;gt;data[i]);
    }
  }
  d-&amp;gt;data[d-&amp;gt;size-1] = '\0';
  printf("string: %s\n", d-&amp;gt;data);
  free(d);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;anyway, there are still issues to be solved, for example when I press ctrl+y while &lt;code&gt;cat&lt;/code&gt; is open I cant past inside, because cat hoards the input.. I should patch the usb driver to take it before cat..&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;moved man to be within emacs
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;in .zshrc:
man() {
  emacsclient -ct -e '(man "'$1'")'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;still need to get man9&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#day-5"&gt;
  &lt;/a&gt;
  Day 5
&lt;/h1&gt;

&lt;p&gt;fucking cursor blinking is annoying the hell out of me&lt;br&gt;
I tried all kinds of tricks to disable it from tty and emacs&lt;br&gt;
it is always fucking blinking.&lt;/p&gt;

&lt;p&gt;so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(setq visible-cursor nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and patch it in the kernel!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;commit afda0f8175fe560d86e1f2ec0b33a9f25b3bf13f
Author: borislav nikolov &amp;lt;jack@sofialondonmoskva.com&amp;gt;
Date:   Wed Apr 1 09:13:55 2020 +0200

    fuck blinking underline

diff --git a/drivers/tty/vt/vt.c b/drivers/tty/vt/vt.c
index 2b7eb55aafa3..b8a7478c9f98 100644
-------- a/drivers/tty/vt/vt.c
+++ b/drivers/tty/vt/vt.c
@@ -2306,13 +2306,6 @@ static void do_con_trol(struct tty_struct *tty, struct vc_data *vc, int c)
                set_mode(vc, 0);
            return;
        case 'c':
-           if (vc-&amp;gt;vc_priv == EPdec) {
-               if (vc-&amp;gt;vc_par[0])
-                   vc-&amp;gt;vc_cursor_type = vc-&amp;gt;vc_par[0] | (vc-&amp;gt;vc_par[1] &amp;lt;&amp;lt; 8) | (vc-&amp;gt;vc_par[2] &amp;lt;&amp;lt; 16);
-               else
-                   vc-&amp;gt;vc_cursor_type = cur_default;
-               return;
-           }
            break;
        case 'm':
            if (vc-&amp;gt;vc_priv == EPdec) {
diff --git a/drivers/video/fbdev/core/fbcon.c b/drivers/video/fbdev/core/fbcon.c
index bb6ae995c2e5..721f326b01e6 100644
-------- a/drivers/video/fbdev/core/fbcon.c
+++ b/drivers/video/fbdev/core/fbcon.c
@@ -173,7 +173,7 @@ static const struct consw fb_con;

 static int fbcon_set_origin(struct vc_data *);

-static int fbcon_cursor_noblink;
+static int fbcon_cursor_noblink = 1;

 #define divides(a, b)  ((!(a) || (b)%(a)) ? 0 : 1)

@@ -3527,13 +3527,8 @@ static ssize_t store_cursor_blink(struct device *device,

    blink = simple_strtoul(buf, last, 0);

-   if (blink) {
-       fbcon_cursor_noblink = 0;
-       fbcon_add_cursor_timer(info);
-   } else {
-       fbcon_cursor_noblink = 1;
-       fbcon_del_cursor_timer(info);
-   }
+   fbcon_cursor_noblink = 1;
+   fbcon_del_cursor_timer(info);

 err:
    console_unlock();
diff --git a/include/linux/console_struct.h b/include/linux/console_struct.h
index 24d4c16e3ae0..b21061f8aad7 100644
-------- a/include/linux/console_struct.h
+++ b/include/linux/console_struct.h
@@ -166,7 +166,7 @@ extern void vc_SAK(struct work_struct *work);
 #define CUR_HWMASK 0x0f
 #define CUR_SWMASK 0xfff0

-#define CUR_DEFAULT CUR_UNDERLINE
+#define CUR_DEFAULT CUR_BLOCK

 bool con_is_visible(const struct vc_data *vc);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;applying it..&lt;/p&gt;

&lt;p&gt;Whoaaa, this is so beautiful.. just a block █, absolutely amazing.&lt;/p&gt;

&lt;p&gt;I did not expect the blinking to put so much mental pressure, having █ just sitting not doing anything, just telling you where you are, its like meditation for the eyes.&lt;/p&gt;

&lt;p&gt;Conclusion:&lt;/p&gt;

&lt;p&gt;I have to seriously re-think the way I spend time on my other&lt;br&gt;
computer. Working only on a tty is completely calming experience, there are no ads, no pressure, only code and text.&lt;/p&gt;

&lt;p&gt;I will keep working on it to improve the tty experience, and I will actively work on reducing my dependency on the modern web, e.g. use &lt;code&gt;go doc&lt;/code&gt; more than google, build local search indexes etc. I hope to will some of it to my daily work life.&lt;/p&gt;

&lt;p&gt;PS:&lt;/p&gt;

&lt;p&gt;Those kernel patches are just for fun, don't take them seriously.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>burnout</category>
    </item>
    <item>
      <title>Are you on TikTok?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 12 Aug 2021 21:20:12 +0000</pubDate>
      <link>https://dev.to/devteam/are-you-on-tiktok-546h</link>
      <guid>https://dev.to/devteam/are-you-on-tiktok-546h</guid>
      <description>&lt;p&gt;I don't know about you, but I frequently find myself &lt;em&gt;lost&lt;/em&gt; in TikTok's #techtok content. There are so many brilliant content creators and software developers there sharing clips of their skills, inner monologues, humor, and beyond. Who knew that so much could be communicated and captured in just a few seconds? 🤯 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-youre-a-software-developer-whos-also-on-tiktok-share-your-profile-in-the-comments-below-so-we-can-all-follow-you"&gt;
  &lt;/a&gt;
  If you're a software developer who's also on TikTok, share your profile in the comments below so we can all follow you!
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;I also wanted to let you know that, whether you're on TikTok or not, there's an awesome opportunity to be featured on the &lt;a href="https://codelandconf.com"&gt;CodeLand 2021&lt;/a&gt; program using your skills and personality as a developer...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CodeLand Recess&lt;/strong&gt; is a community-sourced track of short TikTok-&lt;em&gt;style&lt;/em&gt; videos that will lend some fun, humor, and developer-realness to the day's events. We'd love to see a video submission from you! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All CodeLand Recess video submissions are due by August 20th by 11:59 PM PT (6 AM UTC the following day).&lt;/strong&gt; Get yours in soon! Instructions and examples &lt;a href="https://community.codenewbie.org/codenewbie/reminder-submit-a-short-video-for-codeland-recess-by-august-20th-4623"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#share-your-tiktok-profile-in-the-comments-below-and-consider-submitting-a-video-to-codeland-recess"&gt;
  &lt;/a&gt;
  Share your TikTok profile in the comments below — and consider submitting a video to &lt;a href="https://community.codenewbie.org/codenewbie/reminder-submit-a-short-video-for-codeland-recess-by-august-20th-4623"&gt;CodeLand Recess&lt;/a&gt;!
&lt;/h2&gt;

</description>
      <category>discuss</category>
      <category>codenewbie</category>
      <category>codeland</category>
    </item>
  </channel>
</rss>
