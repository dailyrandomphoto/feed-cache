<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Auto-Deploy Your React Apps with Cloudflare Pages</title>
      <author>Reed Barger</author>
      <pubDate>Wed, 21 Apr 2021 16:13:33 +0000</pubDate>
      <link>https://dev.to/reedbarger/how-to-auto-deploy-your-react-apps-with-cloudflare-pages-3511</link>
      <guid>https://dev.to/reedbarger/how-to-auto-deploy-your-react-apps-with-cloudflare-pages-3511</guid>
      <description>&lt;p&gt;In this article, I'm going to show you how to very quickly deploy any React application with the help of Cloudflare pages.&lt;/p&gt;

&lt;p&gt;You'll see how to not only build and deploy your app within minutes using just a few tools, but also how to auto-deploy any future changes you make through your Github account.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Want to make your own amazing, full-stack React apps from start to deploy? Check out the &lt;a href="https://reactbootcamp.com"&gt;&lt;strong&gt;React Bootcamp&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;To get started, you'll need the following tools:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; The package manager npm and version control software Git&lt;/li&gt;
&lt;li&gt; Your own (free) GitHub account and Cloudflare account&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#create-our-react-project"&gt;
  &lt;/a&gt;
  Create our React Project
&lt;/h2&gt;

&lt;p&gt;To deploy a React application we need to first have one created.&lt;/p&gt;

&lt;p&gt;Let's build a React app on our computer with the help of Create React App. We can do so by giving it the name "cloudflare-react":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app cloudflare-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ckigvaxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://reedbarger.com/content/images/2021/04/cloudflare-react-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ckigvaxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://reedbarger.com/content/images/2021/04/cloudflare-react-1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-our-github-repository"&gt;
  &lt;/a&gt;
  Create our Github Repository
&lt;/h2&gt;

&lt;p&gt;And once our project been created successfully, let's go ahead and create a GitHub repository for it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We use GitHub to be able to keep an online, easy-to-manage record of our individual projects. Github also allows other users to make improvements to our code through pull requests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cloudflare uses Github to keep track of all of our code and whenever we make changes.&lt;/p&gt;

&lt;p&gt;To track our new React app, we create a new GitHub repository by going to &lt;a href="https://github.com/new"&gt;github.com/new&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, we can simply add all of our files and commit them with a message that says what we are doing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Deploy to Cloudflare Pages"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pPHq8bxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://reedbarger.com/content/images/2021/04/cloudflare-react-2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pPHq8bxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://reedbarger.com/content/images/2021/04/cloudflare-react-2.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to add the appropriate git remote, used to push our committed code upstream to our new Github repo.&lt;/p&gt;

&lt;p&gt;Github will tell command you need to include for your newly created repo. It should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote add origin someurl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, we can simply run &lt;code&gt;git push -u origin master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After we refresh our GitHub repo page, we should see all of our React project code, pushed to GitHub.&lt;/p&gt;

&lt;p&gt;This is the first main requirement of deploying an application to Cloudflare pages--to have a React application living on GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-cloudflare-account"&gt;
  &lt;/a&gt;
  Create a Cloudflare account
&lt;/h2&gt;

&lt;p&gt;Next, we go to Cloudflare to deploy our React project.&lt;/p&gt;

&lt;p&gt;If you don't have a free Cloudflare account already, you can go to &lt;a href="https://pages.cloudflare.com/"&gt;pages.cloudflare.com&lt;/a&gt; and hit "Sign up":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--63xTumZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.com/content/images/2021/04/Screen-Shot-2021-04-21-at-9.35.31-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--63xTumZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.com/content/images/2021/04/Screen-Shot-2021-04-21-at-9.35.31-AM.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One main reason why you and most other developers would be interested in using Cloudflare pages, is that Cloudflare have a worldwide CDN, which allows for faster delivery of our application of our deployed application.&lt;/p&gt;

&lt;p&gt;Cloudflare also has resources such as DNS management, which is especially helpful if you want your application to have its own custom domain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#link-github-to-cloudflare-pages"&gt;
  &lt;/a&gt;
  Link Github to Cloudflare Pages
&lt;/h2&gt;

&lt;p&gt;The first time you visit Cloudflare pages you'll be prompted to create a project from your GitHub repository so you'll select the Connect GitHub account button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aPjOoRlz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.com/content/images/2021/04/cloudflare-react-5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aPjOoRlz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.com/content/images/2021/04/cloudflare-react-5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you'll be asked to install and authorize Cloudflare pages.&lt;/p&gt;

&lt;p&gt;This step allows us to choose what Cloudflare gets access to--whether we want to give it access to all of our repositories or only select repositories:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r3hqTLKU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.com/content/images/2021/04/cloudflare-react-6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3hqTLKU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.com/content/images/2021/04/cloudflare-react-6.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to deploy multiple projects in the future I'd recommend selecting all repositories.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a result, Cloudflare will have the ability to access any code and deployments that we've made it can be deployed to the web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-our-react-project-to-cloudflare-pages"&gt;
  &lt;/a&gt;
  Deploy our React Project to Cloudflare Pages
&lt;/h2&gt;

&lt;p&gt;Once we've given Cloudflare authorization to do so, we'll see a screen where we can choose what project from our GitHub repository we want to deploy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3yk-FDKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.com/content/images/2021/04/cloudflare-react-7-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3yk-FDKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.com/content/images/2021/04/cloudflare-react-7-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our case, we'll choose our "cloudflare-react" repo, after which we will hit begin setup.&lt;/p&gt;

&lt;p&gt;From there we can choose our what project name we want our React app to have with Cloudflare. This project name is important because it determines the subdomain that it's going to be deployed to.&lt;/p&gt;

&lt;p&gt;Since we chose "cloudflare-react", it will be deployed to cloudflare-react.pages.dev:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15aQYsi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://reedbarger.com/content/images/2021/04/cloudflare-react-3-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15aQYsi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://reedbarger.com/content/images/2021/04/cloudflare-react-3-1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can choose which branch to deploy, as well as the build settings.&lt;/p&gt;

&lt;p&gt;Note that all we have to really do is choose what framework preset we're using. Cloudflare has a preset option for our framework--Create React App. When we choose it, it's going to include the default settings for any Create React App project: to deploy the project by running the build command "npm run build" and the output directory (the folder to which our React code will be built upon running this build command) is named "build".&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are other helpful presets for any React application that's made with a framework like Next.js or Gatsby. You can use Cloudflare pages to deploy almost any type of React application you can think of.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, we can hit the deploy button. The deployment process will take about four to five minutes the first time. Be patient, but be aware that any subsequent deploy is going to take a lot less time.&lt;/p&gt;

&lt;p&gt;We do see some helpful logs about our project being built and the progress of our deployment. If there were an error in that process, we would see it in the logs and get some indication as what as to what we needed to fix.&lt;/p&gt;

&lt;p&gt;Then to see our deployed project we can hit the continue to Project button, hit "Visit Site" and we can see our app running on the url: your-project-name.pages.dev.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-changes-with-auto-deploys"&gt;
  &lt;/a&gt;
  Making Changes with Auto Deploys
&lt;/h2&gt;

&lt;p&gt;While it was very easy to instantly deploy our React application to the web after we had it pushed to GitHub, the next step is to make changes to our app and redeploy it.&lt;/p&gt;

&lt;p&gt;As you'll see, this auto-deploy (continuous integration) functionality has already been set up.&lt;/p&gt;

&lt;p&gt;In the case of my application. I decided to install React Router DOM to add an about page. On the home page, I also added a link to the about page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZAnA-ohD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://reedbarger.com/content/images/2021/04/cloudflare-react-4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZAnA-ohD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://reedbarger.com/content/images/2021/04/cloudflare-react-4.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After I was done performing that change which you can see in the video below, I went through the same process of running, &lt;code&gt;git add .&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt; with a message about the changes that I made, and then &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After doing so, if we flip back to our Cloudflare pages dashboard, we can see that immediately Cloudflare has picked up this new deploy because it's linked to our GitHub account and can view any deploys or pull requests that were made to our repo.&lt;/p&gt;

&lt;p&gt;As a result, it instantly re-deploys our app with the changes that we made. As our deploy is taking place, we can hit "View build" we can see specific information about this deploy, along with any logs.&lt;/p&gt;

&lt;p&gt;As you will see, any change made after the initial deploy takes a lot less time (it only takes about a minute in total for the deploy to finish successfully). You will also see that it's given its own unique deploy hash at the beginning of our URL. This allows us to uniquely reference each deploy&lt;/p&gt;

&lt;p&gt;If we remove the hash, we see that the changes that we made are also deployed to our chosen project name: cloudflare-react.pages.dev.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope that this tutorial shows you just how easily it is to get started with the new Cloudflare pages and start deploying your React apps to it today to take advantage of their global CDN and all the additional features that Cloudflare has to offer.&lt;/p&gt;

&lt;p&gt;Cloudflare pages is still quite new, but it offers a lot of tools already that are worth checking out. I'd highly recommend it as your deployment service for the next React app you want to share with the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enjoy-this-post-join-the-react-bootcamp"&gt;
  &lt;/a&gt;
  Enjoy this post? Join The React Bootcamp
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;The React Bootcamp&lt;/a&gt;&lt;/strong&gt; takes everything you should know about learning React and bundles it into one comprehensive package, including videos, cheatsheets, plus special bonuses.&lt;/p&gt;

&lt;p&gt;Gain the insider information hundreds of developers have already used to master React, find their dream jobs, and take control of their future:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2usNUi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.nyc3.digitaloceanspaces.com/react-bootcamp-banner.png" alt="The React Bootcamp"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Click here to be notified when it opens&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>GitHub Actions best practices for Rust projects</title>
      <author>InfinyOn</author>
      <pubDate>Wed, 21 Apr 2021 15:57:55 +0000</pubDate>
      <link>https://dev.to/infinyon/github-actions-best-practices-for-rust-projects-1j9p</link>
      <guid>https://dev.to/infinyon/github-actions-best-practices-for-rust-projects-1j9p</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/infinyon/fluvio/"&gt;Fluvio&lt;/a&gt; is a high-performance distributed streaming platform written in Rust.&lt;/p&gt;

&lt;p&gt;As a fairly large project, we have a lot of build configurations and testing scenarios that we automate in order to make sure we don't break things by accident. We've been using GitHub Actions in order to run our CI/CD workflows, but as we've grown, things have naturally gotten messy over time. This week, I took some time to re-visit our workflow definitions to clean things up and try to increase our team's productivity.&lt;/p&gt;

&lt;p&gt;I specifically want to talk about two main improvements I worked on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Consolidating multiple jobs using the build matrix

&lt;ul&gt;
&lt;li&gt;This cut our workflow file size almost in half, from 477 lines to 264, making CI easier to maintain.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Setting up &lt;a href="https://github.com/mozilla/sccache"&gt;&lt;code&gt;sccache&lt;/code&gt;&lt;/a&gt; to improve our building and testing speed

&lt;ul&gt;
&lt;li&gt;We actually had already set up &lt;code&gt;sccache&lt;/code&gt; but it was misconfigured.
I'll talk about how to check that everything is set up properly.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first half of this post should be generally useful for anybody who needs to use GitHub Actions and wants to learn more about the build matrix. The second half should be useful to Rust developers who want a good starting point for a solid CI setup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-github-workflows-build-matrix"&gt;
  &lt;/a&gt;
  Using the GitHub workflows build matrix
&lt;/h2&gt;

&lt;p&gt;The reason I was working on workflows this week was because our CI build and test time had grown to a point that it was interfering with our team's ability to move quickly. When I started reading through our workflow definitions, what I saw was a lot of independent jobs with a lot of duplicated steps. Most of the jobs would install the Rust toolchain, install &lt;a href="https://github.com/mozilla/sccache"&gt;&lt;code&gt;sccache&lt;/code&gt;&lt;/a&gt;, cache the Cargo registry and the sccache directory, and then run a single task from our project Makefile. The boilerplate to set up each of these jobs came out to at least 60 lines of configuration. I won't post any of the "before" workflow code here, but if you are interested in seeing it you can &lt;a href="https://github.com/infinyon/fluvio/blob/6eced8a04a41552e4c5276c26a8300c00c990007/.github/workflows/ci.yml"&gt;look at this old commit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead, I'm going to show you the &lt;em&gt;new&lt;/em&gt; job definition, and the matrix setup that goes with it. One thing I learned while doing this is that GitHub's workflow documentation does not really give the matrix feature justice because they use such simple examples. Here's the matrix definition I came up with for our new job definition. I'll briefly explain how the matrix feature works in case you are unfamiliar with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# .github/workflows/ci.yml&lt;/span&gt;
&lt;span class="na"&gt;tests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.make.name }} (${{ matrix.os }})&lt;/span&gt;
  &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.os }}&lt;/span&gt;
  &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;fail-fast&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
    &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ubuntu-latest&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;macos-latest&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;rust&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;stable&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Clippy&lt;/span&gt;
          &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;check-clippy"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Unit tests&lt;/span&gt;
          &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;build-all-test&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run-all-unit-test"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Doc tests&lt;/span&gt;
          &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;run-all-doc-test"&lt;/span&gt;
      &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
          &lt;span class="na"&gt;sccache-path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/home/runner/.cache/sccache&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;macos-latest&lt;/span&gt;
          &lt;span class="na"&gt;sccache-path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/Users/runner/Library/Caches/Mozilla.sccache&lt;/span&gt;
      &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;macos-latest&lt;/span&gt;
          &lt;span class="na"&gt;rust&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stable&lt;/span&gt;
          &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Clippy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The part of this that we're interested in is the &lt;code&gt;matrix&lt;/code&gt; object. Notice that it is a proper key-value object, it has keys &lt;code&gt;os&lt;/code&gt;, &lt;code&gt;rust&lt;/code&gt;, and &lt;code&gt;make&lt;/code&gt;. These keys are arbitrary, you can choose any names that you want for them. I like to think of them as the "dimensions" of the matrix. The value at each of these keys must be a list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the key &lt;code&gt;os&lt;/code&gt;, the list is &lt;code&gt;[ubuntu-latest, macos-latest]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For the key &lt;code&gt;rust&lt;/code&gt;, we have a list with a single element: &lt;code&gt;[stable]&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;And even though the value under &lt;code&gt;make&lt;/code&gt; looks different, notice that it is still a list,
it is just a list of more yaml objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When GitHub Actions reads your job definition, it performs a sort of cross-product on each entry in your matrix, creating a list of all the combinations of items in your lists. For this matrix definition, GitHub will generate the following list of configurations to run the job with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
  &lt;span class="na"&gt;rust&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stable&lt;/span&gt;
  &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Clippy&lt;/span&gt;
    &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;check-clippy"&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;macos-latest&lt;/span&gt;
  &lt;span class="na"&gt;rust&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stable&lt;/span&gt;
  &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Clippy&lt;/span&gt;
    &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;check-clippy"&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
  &lt;span class="na"&gt;rust&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stable&lt;/span&gt;
  &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Unit tests&lt;/span&gt;
    &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;build-all-test&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run-all-unit-test"&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;macos-latest&lt;/span&gt;
  &lt;span class="na"&gt;rust&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stable&lt;/span&gt;
  &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Unit tests&lt;/span&gt;
    &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;build-all-test&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run-all-unit-test"&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
  &lt;span class="na"&gt;rust&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stable&lt;/span&gt;
  &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Doc tests&lt;/span&gt;
    &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;run-all-doc-test"&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;macos-latest&lt;/span&gt;
  &lt;span class="na"&gt;rust&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stable&lt;/span&gt;
  &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Doc tests&lt;/span&gt;
    &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;run-all-doc-test"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the rest of the job definition, you can access the fields of the active configuration using the &lt;code&gt;${{ matrix.KEY }}&lt;/code&gt; syntax. You can see in the job definition above that this is used in the line &lt;code&gt;runs-on: ${{ matrix.os }}&lt;/code&gt;, which is how we tell the runner which type of machine to run the job on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#include-and-exclude-rules"&gt;
  &lt;/a&gt;
  Include and Exclude rules
&lt;/h3&gt;

&lt;p&gt;You may be wondering right now, "Hey, what happened to &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt;? They didn't get mixed into the matrix!", and you would be right. &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; are special keys that allow you to manually edit the resulting configurations.&lt;/p&gt;

&lt;p&gt;When writing a rule for &lt;code&gt;include&lt;/code&gt;, we are essentially writing a pattern that matches against the output configurations and may add new data to them. Let's look at the effect of a specific &lt;code&gt;include&lt;/code&gt; rule:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
          &lt;span class="na"&gt;sccache-path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/home/runner/.cache/sccache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This says: "for any configuration that has &lt;code&gt;os: ubuntu-latest&lt;/code&gt;, add another key that has &lt;code&gt;sccache-path: /home/runner/.cache/sccache&lt;/code&gt;". If we apply this rule to our output configuration, it would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  - os: ubuntu-latest
    rust: stable
    make:
      name: Unit tests
      task: "build-all-test run-all-unit-test"
&lt;span class="gi"&gt;+   sccache-path: /home/runner/.cache/sccache
&lt;/span&gt;  - os: macos-latest
    rust: stable
    make:
      name: Unit tests
      task: "build-all-test run-all-unit-test"
  - os: ubuntu-latest
    rust: stable
    make:
      name: Doc tests
      task: "run-all-doc-test"
&lt;span class="gi"&gt;+   sccache-path: /home/runner/.cache/sccache
&lt;/span&gt;  - os: macos-latest
    rust: stable
    make:
      name: Doc tests
      task: "run-all-doc-test"
  - os: ubuntu-latest
    rust: stable
    make:
      name: Clippy
      task: "check-clippy"
&lt;span class="gi"&gt;+   sccache-path: /home/runner/.cache/sccache
&lt;/span&gt;  - os: macos-latest
    rust: stable
    make:
      name: Clippy
      task: "check-clippy"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;+&lt;/code&gt; at the beginning of the green lines is not part of the workflow file, &lt;br&gt;
it is part of the diff syntax I'm using to show you that this line was added&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Similarly, we can use &lt;code&gt;exclude&lt;/code&gt; rules to describe objects in the output configuration to discard. For example, we currently have two configurations that will cause Clippy to be run, but we really only need Clippy to run once. Let's look at the effect the following &lt;code&gt;exclude&lt;/code&gt; rule from our matrix has on the output configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;macos-latest&lt;/span&gt;
    &lt;span class="na"&gt;rust&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stable&lt;/span&gt;
    &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Clippy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When this rule gets applied, it removes the entry for Clippy on MacOS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  - os: ubuntu-latest
    rust: stable
    make:
      name: Unit tests
      task: "build-all-test run-all-unit-test"
  - os: macos-latest
    rust: stable
    make:
      name: Unit tests
      task: "build-all-test run-all-unit-test"
  - os: ubuntu-latest
    rust: stable
    make:
      name: Doc tests
      task: "run-all-doc-test"
  - os: macos-latest
    rust: stable
    make:
      name: Doc tests
      task: "run-all-doc-test"
  - os: ubuntu-latest
    rust: stable
    make:
      name: Clippy
      task: "check-clippy"
&lt;span class="gd"&gt;- - os: macos-latest
-   rust: stable
-   make:
-     name: Clippy
-     task: "check-clippy"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The first &lt;code&gt;-&lt;/code&gt; on the red lines is also not part of the workflow file,&lt;br&gt;
it is part of the removed-lines diff syntax&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Putting it all together, our matrix definition with all the include and exclude rules applied will look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  - os: ubuntu-latest
    rust: stable
    make:
      name: Unit tests
      task: "build-all-test run-all-unit-test"
&lt;span class="gi"&gt;+   sccache-path: /home/runner/.cache/sccache
&lt;/span&gt;  - os: macos-latest
    rust: stable
    make:
      name: Unit tests
      task: "build-all-test run-all-unit-test"
&lt;span class="gi"&gt;+   sccache-path: /Users/runner/Library/Caches/Mozilla.sccache
&lt;/span&gt;  - os: ubuntu-latest
    rust: stable
    make:
      name: Doc tests
      task: "run-all-doc-test"
&lt;span class="gi"&gt;+   sccache-path: /home/runner/.cache/sccache
&lt;/span&gt;  - os: macos-latest
    rust: stable
    make:
      name: Doc tests
      task: "run-all-doc-test"
&lt;span class="gi"&gt;+   sccache-path: /Users/runner/Library/Caches/Mozilla.sccache
&lt;/span&gt;  - os: ubuntu-latest
    rust: stable
    make:
      name: Clippy
      task: "check-clippy"
&lt;span class="gi"&gt;+   sccache-path: /home/runner/.cache/sccache
&lt;/span&gt;&lt;span class="gd"&gt;- - os: macos-latest
-   rust: stable
-   make:
-     name: Clippy
-     task: "check-clippy"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, awesome. So now we have a strategy for adding new configurations as well as for tweaking options on specific configurations.&lt;/p&gt;

&lt;p&gt;If you're trying to consolidate a bunch of duplicate jobs, a good strategy is to start identifying the small pieces of each job that are different from the others, and put those as options in the matrix. Next I'll walk through the rest of the job definition and talk about how we set it up to meet our Rust project needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimizing-rusts-build-speed-with-raw-sccache-endraw-"&gt;
  &lt;/a&gt;
  Optimizing Rust's build speed with &lt;code&gt;sccache&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;For the rest of this post I'll just be talking about how I set up the rest of this job definition to build and test our Rust binaries using &lt;code&gt;sccache&lt;/code&gt;. &lt;code&gt;sccache&lt;/code&gt; is a tool built by Mozilla that can cache the output of &lt;code&gt;rustc&lt;/code&gt; and re-use those build artifacts if nothing has changed. &lt;/p&gt;

&lt;p&gt;The basic setup we'll need in our job is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://github.com/mozilla/sccache"&gt;&lt;code&gt;sccache&lt;/code&gt;&lt;/a&gt; for the OS we're running on&lt;/li&gt;
&lt;li&gt;Use the &lt;a href="https://github.com/actions/cache"&gt;GitHub actions cache&lt;/a&gt; to save the &lt;code&gt;sccache&lt;/code&gt; cache directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me start by just posting the job definition up front, including the matrix definition we've already seen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# .github/workflows/ci.yml&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CI&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;tests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.make.name }} (${{ matrix.os }})&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.os }}&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;fail-fast&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ubuntu-latest&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;macos-latest&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;rust&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;stable&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Clippy&lt;/span&gt;
            &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;check-clippy"&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Unit tests&lt;/span&gt;
            &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;build-all-test&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run-all-unit-test"&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Doc tests&lt;/span&gt;
            &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;run-all-doc-test"&lt;/span&gt;
        &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
            &lt;span class="na"&gt;sccache-path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/home/runner/.cache/sccache&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;macos-latest&lt;/span&gt;
            &lt;span class="na"&gt;sccache-path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/Users/runner/Library/Caches/Mozilla.sccache&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;macos-latest&lt;/span&gt;
            &lt;span class="na"&gt;rust&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stable&lt;/span&gt;
            &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Clippy&lt;/span&gt;
    &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;RUST_BACKTRACE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;full&lt;/span&gt;
      &lt;span class="na"&gt;RUSTC_WRAPPER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sccache&lt;/span&gt;
      &lt;span class="na"&gt;RUSTV&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.rust }}&lt;/span&gt;
      &lt;span class="na"&gt;SCCACHE_CACHE_SIZE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2G&lt;/span&gt;
      &lt;span class="na"&gt;SCCACHE_DIR&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.sccache-path }}&lt;/span&gt;
      &lt;span class="c1"&gt;# SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment it back out&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install sccache (ubuntu-latest)&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;matrix.os == 'ubuntu-latest'&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;LINK&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://github.com/mozilla/sccache/releases/download&lt;/span&gt;
          &lt;span class="na"&gt;SCCACHE_VERSION&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.2.13&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl&lt;/span&gt;
          &lt;span class="s"&gt;mkdir -p $HOME/.local/bin&lt;/span&gt;
          &lt;span class="s"&gt;curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz&lt;/span&gt;
          &lt;span class="s"&gt;mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache&lt;/span&gt;
          &lt;span class="s"&gt;echo "$HOME/.local/bin" &amp;gt;&amp;gt; $GITHUB_PATH&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install sccache (macos-latest)&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;matrix.os == 'macos-latest'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;brew update&lt;/span&gt;
          &lt;span class="s"&gt;brew install sccache&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Rust ${{ matrix.rust }}&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions-rs/toolchain@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;toolchain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.rust }}&lt;/span&gt;
          &lt;span class="na"&gt;profile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;minimal&lt;/span&gt;
          &lt;span class="na"&gt;override&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache cargo registry&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
        &lt;span class="na"&gt;continue-on-error&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;~/.cargo/registry&lt;/span&gt;
            &lt;span class="s"&gt;~/.cargo/git&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}&lt;/span&gt;
          &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;${{ runner.os }}-cargo-&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Save sccache&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
        &lt;span class="na"&gt;continue-on-error&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.sccache-path }}&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}&lt;/span&gt;
          &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;${{ runner.os }}-sccache-&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Start sccache server&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sccache --start-server&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.make.name }}&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;make ${{ matrix.make.task }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Print sccache stats&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sccache --show-stats&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Stop sccache server&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sccache --stop-server || &lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This job definition is 95% setup and about 5% task-running. In fact, the entirety of our project-specific building and testing specifications are defined inside our &lt;code&gt;Makefile&lt;/code&gt;, so the step where we call &lt;code&gt;make ${{ matrix.make.task }}&lt;/code&gt; is the only step that is unique to our project, the rest could be re-used as boilerplate for other Rust projects ;)&lt;/p&gt;

&lt;p&gt;Let's start with the &lt;code&gt;env&lt;/code&gt; section. First, we set &lt;code&gt;RUST_BACKTRACE: full&lt;/code&gt; because if any of our tests panic we want to know why. &lt;code&gt;RUSTV&lt;/code&gt; is an environment variable that we use inside our &lt;code&gt;Makefile&lt;/code&gt; to tell cargo commands which release channel to use.&lt;/p&gt;

&lt;p&gt;The rest of the env has to do with &lt;a href="https://github.com/mozilla/sccache"&gt;&lt;code&gt;sccache&lt;/code&gt;&lt;/a&gt;. As I mentioned before, we want to use &lt;a href="https://github.com/mozilla/sccache"&gt;&lt;code&gt;sccache&lt;/code&gt;&lt;/a&gt; to reduce the number of times we need to re-build crates when possible.&lt;/p&gt;

&lt;p&gt;Here is a quick summary of the other variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;RUSTC_WRAPPER: sccache&lt;/code&gt; is read by &lt;code&gt;cargo&lt;/code&gt; itself and tells it to run compiler commands using &lt;code&gt;sccache rustc ...&lt;/code&gt; rather than just &lt;code&gt;rustc ...&lt;/code&gt;. This is the easiest way to use &lt;code&gt;sccache&lt;/code&gt; with Rust.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SCCACHE_CACHE_SIZE&lt;/code&gt; tells sccache the maximum size you want to allow your cache to grow to. This is one of the most important things to get right: if you set this too small and the cache runs out of space, &lt;code&gt;sccache&lt;/code&gt; will start evicting artifacts from the cache and you will end up recompiling more than you need to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SCCACHE_DIR&lt;/code&gt; tells sccache where to store build artifacts. This path is different on different OS's, which is why we assign it using a matrix parameter.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's run through the step definitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a pretty standard GH Actions step that just checks out your git repository in the current directory. This gives further steps the ability to build or interact with your code.&lt;/p&gt;

&lt;p&gt;Next up is installing &lt;code&gt;sccache&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install sccache (ubuntu-latest)&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;matrix.os == 'ubuntu-latest'&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;LINK&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://github.com/mozilla/sccache/releases/download&lt;/span&gt;
          &lt;span class="na"&gt;SCCACHE_VERSION&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.2.13&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl&lt;/span&gt;
          &lt;span class="s"&gt;mkdir -p $HOME/.local/bin&lt;/span&gt;
          &lt;span class="s"&gt;curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz&lt;/span&gt;
          &lt;span class="s"&gt;mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache&lt;/span&gt;
          &lt;span class="s"&gt;echo "$HOME/.local/bin" &amp;gt;&amp;gt; $GITHUB_PATH&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install sccache (macos-latest)&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;matrix.os == 'macos-latest'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;brew update&lt;/span&gt;
          &lt;span class="s"&gt;brew install sccache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a good example of adapting steps according to a matrix. Depending on whether we are running on &lt;code&gt;ubuntu-latest&lt;/code&gt; or &lt;code&gt;macos-latest&lt;/code&gt;, there is a different procedure for installing &lt;code&gt;sccache&lt;/code&gt;. Notice that only one of these two steps will ever run in a given execution of a job: the &lt;code&gt;if:&lt;/code&gt; conditional checks which &lt;code&gt;matrix.os&lt;/code&gt; value is specified in this job instance.&lt;/p&gt;

&lt;p&gt;This is also a great example of a good opportunity for creating a reusable GitHub Action definition. If there's an action definition out there for more easily installing &lt;code&gt;sccache&lt;/code&gt; (or if one of you readers decides to put one together), let me know!&lt;/p&gt;

&lt;p&gt;The next step just installs the Rust toolchain. If you have used Rust on GitHub actions before you have probably seen this one already:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Rust ${{ matrix.rust }}&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions-rs/toolchain@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;toolchain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.rust }}&lt;/span&gt;
          &lt;span class="na"&gt;profile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;minimal&lt;/span&gt;
          &lt;span class="na"&gt;override&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though in our matrix we only have one value, &lt;code&gt;rust: [stable]&lt;/code&gt;, it is nice to use &lt;code&gt;toolchain: ${{ matrix.rust }}&lt;/code&gt; so that in the future if you (or a coworker of yours) decides to run your workflow against other release channels, the only edit that will need to be made is in the matrix.&lt;/p&gt;

&lt;p&gt;This next one has to do with &lt;code&gt;sccache&lt;/code&gt; again, and it has to do with saving the cache directory itself. When using the free GitHub Action runners, jobs are always run on a fresh instance of a container or virtual machine somewhere. This means that our sccache would have to start from scratch on every job and we wouldn't get any benefit out of it. To fix this, we can use the &lt;code&gt;actions/cache@v2&lt;/code&gt; action to preserve certain directories between job runs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache cargo registry&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
        &lt;span class="na"&gt;continue-on-error&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;~/.cargo/registry&lt;/span&gt;
            &lt;span class="s"&gt;~/.cargo/git&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}&lt;/span&gt;
          &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;${{ runner.os }}-cargo-&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Save sccache&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
        &lt;span class="na"&gt;continue-on-error&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.sccache-path }}&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}&lt;/span&gt;
          &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;${{ runner.os }}-sccache-&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;actions/cache@v2&lt;/code&gt; action lets us specify directories that the GitHub runner will save at the end of each job, and attempt to restore at the beginning of the next job. You can have multiple different types of things you want to cache, so you have to choose a &lt;code&gt;key&lt;/code&gt; for each cache to be labeled with when it gets saved. You also need to give it &lt;code&gt;restore-keys&lt;/code&gt;&lt;br&gt;
that tell it how to choose an existing saved cache that you want to restore from. You can think of &lt;code&gt;restore-keys&lt;/code&gt; as a pattern for matching some prefix of an actual key: the more specifically a key matches your restore-key, the higher precedence it will have.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On a side note about GitHub caches, does anybody know whether it makes more sense to keep separate caches separate or to combine them? Here I have separate caches for the Cargo registry and for the Sccache directory, but does it make any practical difference?&lt;br&gt;
If you know one way or another, &lt;a href="https://twitter.com/RazzleRustacean"&gt;let me know&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, we have the last steps of our jobs. Here we start the sccache server, run our Make task, then print statistics and stop the sccache server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Start sccache server&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sccache --start-server&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.make.name }}&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;make ${{ matrix.make.task }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Print sccache stats&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sccache --show-stats&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Stop sccache server&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sccache --stop-server || &lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a couple of things you will want to check on when you first set this up to make sure you are actually getting benefit from the cache:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure your cargo commands are actually running sccache&lt;/li&gt;
&lt;li&gt;Make sure that sccache is actually hitting the cache rather than always rebuilding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's an example of output when the &lt;code&gt;sccache&lt;/code&gt; server has just started up and has not processed any compile requests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sccache &lt;span class="nt"&gt;--show-stats&lt;/span&gt;
Compile requests                      8
Compile requests executed             0
Cache hits                            0
Cache misses                          0
Cache timeouts                        0
Cache &lt;span class="nb"&gt;read &lt;/span&gt;errors                     0
Forced recaches                       0
Cache write errors                    0
Compilation failures                  0
Cache errors                          0
Non-cacheable compilations            0
Non-cacheable calls                   8
Non-compilation calls                 0
Unsupported compiler calls            0
Average cache write               0.000 s
Average cache &lt;span class="nb"&gt;read &lt;/span&gt;miss           0.000 s
Average cache &lt;span class="nb"&gt;read &lt;/span&gt;hit            0.000 s
Failed distributed compilations       0

Non-cacheable reasons:
incremental                           7
crate-type                            1

Cache location                  Local disk: &lt;span class="s2"&gt;"/Users/runner/Library/Caches/Mozilla.sccache"&lt;/span&gt;
Cache size                          545 MiB
Max cache size                        2 GiB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you build your project and see this immediately afterwards, something went wrong. I would recommend running your build with &lt;code&gt;--verbose&lt;/code&gt; and double-checking that the commands cargo is running all begin with &lt;code&gt;sccache rustc&lt;/code&gt; rather than just &lt;code&gt;rustc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If your verbose cargo output looks like this, your sccache setup is working:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   Compiling fluvio-spu v0.5.0 &lt;span class="o"&gt;(&lt;/span&gt;/Users/nick/infinyon/fluvio/src/spu&lt;span class="o"&gt;)&lt;/span&gt;
     Running &lt;span class="sb"&gt;`&lt;/span&gt;/Users/nick/.cargo/bin/sccache rustc &lt;span class="nt"&gt;--crate-name&lt;/span&gt; fluvio_spu &lt;span class="nt"&gt;--edition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2018 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But if you see output like this, sccache is not being invoked at all, and you should probably double-check that your &lt;code&gt;RUSTC_WRAPPER&lt;/code&gt; environment variable is set properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   Compiling fluvio-spu v0.5.0 &lt;span class="o"&gt;(&lt;/span&gt;/Users/nick/infinyon/fluvio/src/spu&lt;span class="o"&gt;)&lt;/span&gt;
     Running &lt;span class="sb"&gt;`&lt;/span&gt;rustc &lt;span class="nt"&gt;--crate-name&lt;/span&gt; fluvio_spu &lt;span class="nt"&gt;--edition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2018
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#verifying-the-raw-sccache-endraw-results"&gt;
  &lt;/a&gt;
  Verifying the &lt;code&gt;sccache&lt;/code&gt; results
&lt;/h3&gt;

&lt;p&gt;When you have set things up so that sccache is properly running, you will see stats that have actual numbers in them rather than zeros. The next step is to make sure that those numbers are telling you that you hit the cache rather than rebuilding (missing the cache).&lt;/p&gt;

&lt;p&gt;You might miss the cache for a couple of reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is the first time you have built using sccache and so you are populating the cache for the first time

&lt;ul&gt;
&lt;li&gt;In this case, just run your job again to test if you hit the cache on the second go-round&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Something went wrong when re-loading the cache directory (e.g. from the GitHub cache).&lt;/li&gt;
&lt;li&gt;You have added a ton of dependencies to your project that you haven't built before, so they're not in the cache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example of what your stats might look like if you have missed the cache. Notice that the number of hits is actually not zero, it's just a very low number. I think this is probably because of caching duplicate dependencies within your dependency tree. However, if you see these results after a build, then your build did not really benefit from&lt;br&gt;
&lt;code&gt;sccache&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Compile requests                    484
Compile requests executed           343
Cache hits                           13
Cache hits &lt;span class="o"&gt;(&lt;/span&gt;Rust&lt;span class="o"&gt;)&lt;/span&gt;                    13
Cache misses                        330
Cache misses &lt;span class="o"&gt;(&lt;/span&gt;Rust&lt;span class="o"&gt;)&lt;/span&gt;                 330
Cache timeouts                        0
Cache &lt;span class="nb"&gt;read &lt;/span&gt;errors                     0
Forced recaches                       0
Cache write errors                    0
Compilation failures                  0
Cache errors                        313
Cache errors &lt;span class="o"&gt;(&lt;/span&gt;Rust&lt;span class="o"&gt;)&lt;/span&gt;                 313
Non-cacheable compilations            0
Non-cacheable calls                 141
Non-compilation calls                 0
Unsupported compiler calls            0
Average cache write               0.000 s
Average cache &lt;span class="nb"&gt;read &lt;/span&gt;miss           2.249 s
Average cache &lt;span class="nb"&gt;read &lt;/span&gt;hit            0.001 s
Failed distributed compilations       0

Non-cacheable reasons:
crate-type                          111
incremental                          28
-                                     2

Cache location                  Local disk: &lt;span class="s2"&gt;"/Users/runner/Library/Caches/Mozilla.sccache"&lt;/span&gt;
Cache size                            4 GiB
Max cache size                       10 GiB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Usually if you get these results, all you need to do is run the build again, and the second build will be able to leverage the pre-compiled artifacts from the previous run.&lt;/p&gt;

&lt;p&gt;The stats from the second build might look more like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Compile requests                    481
Compile requests executed           330
Cache hits                          318
Cache hits &lt;span class="o"&gt;(&lt;/span&gt;Rust&lt;span class="o"&gt;)&lt;/span&gt;                   318
Cache misses                         12
Cache misses &lt;span class="o"&gt;(&lt;/span&gt;Rust&lt;span class="o"&gt;)&lt;/span&gt;                  12
Cache timeouts                        0
Cache &lt;span class="nb"&gt;read &lt;/span&gt;errors                     0
Forced recaches                       0
Cache write errors                    0
Compilation failures                  0
Cache errors                          0
Non-cacheable compilations            0
Non-cacheable calls                 151
Non-compilation calls                 0
Unsupported compiler calls            0
Average cache write               0.001 s
Average cache &lt;span class="nb"&gt;read &lt;/span&gt;miss           1.242 s
Average cache &lt;span class="nb"&gt;read &lt;/span&gt;hit            0.001 s
Failed distributed compilations       0

Non-cacheable reasons:
crate-type                          108
incremental                          41
-                                     2

Cache location                  Local disk: &lt;span class="s2"&gt;"/Users/runner/Library/Caches/Mozilla.sccache"&lt;/span&gt;
Cache size                          545 MiB
Max cache size                        2 GiB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we have many more cache hits than cache misses, that's the indicator that we are getting good value out of &lt;code&gt;sccache&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end-result"&gt;
  &lt;/a&gt;
  The end result
&lt;/h2&gt;

&lt;p&gt;When you push this workflow and trigger it, you'll see a job start running for each combination of matrix parameters you provided:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbPzUuOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.fluvio.io/blog/images/rust-workflows/workflow-jobs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbPzUuOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.fluvio.io/blog/images/rust-workflows/workflow-jobs.png" alt="Workflow jobs as shown by the GitHub Actions dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I took this screenshot from our full workflow file which includes a job for Rustfmt. The rest of the jobs in this list were generated from the single job definition I showed above.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Thanks for reading, I hope this can be helpful to others who are also setting up GitHub actions with Rust projects. If you want to learn more about the Fluvio project, feel free to &lt;a href="https://github.com/infinyon/fluvio/"&gt;check out our GitHub&lt;/a&gt; or come &lt;a href="https://discordapp.com/invite/bBG2dTz"&gt;join our community Discord&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>github</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Clipped Image Reveal on Hover</title>
      <author>Stackfindover</author>
      <pubDate>Wed, 21 Apr 2021 15:38:37 +0000</pubDate>
      <link>https://dev.to/stackfindover/clipped-image-reveal-on-hover-4je8</link>
      <guid>https://dev.to/stackfindover/clipped-image-reveal-on-hover-4je8</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hello, guys In this tutorial we will try to solve the mentioned query. and also we will learn Clipped Image Reveal on Hover Using HTML CSS &amp;amp; JS.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-query"&gt;
  &lt;/a&gt;
  Common Query
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;How to create image reveal on hover&lt;/li&gt;
&lt;li&gt;How to create clipped image reveal on hover&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;See Also:-&lt;/strong&gt; &lt;a href="https://blogs.stackfindover.com/animated-like-button-with-html-css-js/"&gt;Animated Like Button with HTML CSS &amp;amp; JS&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clipped-image-reveal-on-hover-step-by-step"&gt;
  &lt;/a&gt;
  Clipped Image Reveal on Hover Step By Step
&lt;/h3&gt;

&lt;p&gt;First, we need to create two files index.html and style.css then we need to do code for it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step1"&gt;
  &lt;/a&gt;
  Step:#1
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Add below code inside index.html&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Clipped Image Reveal on Hover&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"ie=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&amp;amp;display=swap"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Instagram&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hover-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Instagram&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image-inner"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"instagram-logo.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"instagram-logo"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image-link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linkText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.link-text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linkImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.image-link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;linkImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`translate3d( &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px, 0 )`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;linkText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;linkText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--y&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mousemove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;showContent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step2"&gt;
  &lt;/a&gt;
  Step:#2
&lt;/h3&gt;

&lt;p&gt;Then we need to add code for style.css which code I provide in the below screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'IBM Plex Sans'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f2f4f6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="nc"&gt;.image-link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#808080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.image-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;250ms&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.link-text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;250ms&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;75px&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;75px&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.image-inner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-75px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-75px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.image-link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.hover-container&lt;/span&gt; &lt;span class="nc"&gt;.image-container&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.hover-container&lt;/span&gt; &lt;span class="nc"&gt;.link-text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#clipped-image-reveal-on-hover-video-output"&gt;
  &lt;/a&gt;
  Clipped Image Reveal on Hover Video Output
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/f2iS-YL7WL0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clipped-image-reveal-on-hover-codepen-output"&gt;
  &lt;/a&gt;
  Clipped Image Reveal on Hover Codepen Output:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;We will update soon:)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>WOW 😱 This pop-up is so nice</title>
      <author>Mbenga</author>
      <pubDate>Wed, 21 Apr 2021 15:37:37 +0000</pubDate>
      <link>https://dev.to/jeremymonatte/wow-this-pop-up-is-so-nice-2l6a</link>
      <guid>https://dev.to/jeremymonatte/wow-this-pop-up-is-so-nice-2l6a</guid>
      <description>&lt;p&gt;I woke up this morning and I just wanted to show you that pop-up i created. I hope you will love it as much as I love pizza🍕.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/JeremyMonatte/embed/oNBBVdd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you have any question about how i created it, comments are here ⬇&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS : Yeah, I know, the title of my post is a overly seductive, but that make me able to tell you than in french we call that kind of title "putaclik". Do not thank me, it's free just for you&lt;/em&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to plan for a successful side-project. The Kortiku chronicles.</title>
      <author>Shaquil Maria</author>
      <pubDate>Wed, 21 Apr 2021 15:28:58 +0000</pubDate>
      <link>https://dev.to/theowlsden/how-to-plan-for-a-successful-side-project-the-kortiku-chronicles-4dnh</link>
      <guid>https://dev.to/theowlsden/how-to-plan-for-a-successful-side-project-the-kortiku-chronicles-4dnh</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@kobuagency?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;KOBU Agency&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you missed it, check out the first post about Kortiku.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/theowlsden" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rpaqbVBU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--i1FKrDD3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/603640/5e20119b-e2b7-43b5-a49b-c434f77c4340.jpg" alt="theowlsden image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theowlsden/kortiku-eps1-intro-4603" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Kortiku eps1: Intro&lt;/h2&gt;
      &lt;h3&gt;Shaquil Maria ・ Apr  6 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#php&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#laravel&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;After a couple of weeks of slacking off, I decided that it's time to continue with Kortiku. The logical step is to start coding right? Well.. no⛔. First I decided to try to create a plan for this project. Some of my other projects started with coding and were never finished. This one will be different! (Hopefully😅) After reading some articles on how to start a side project, I got an idea of how to start planning the project for success.&lt;br&gt;
(I highly recommend these posts by &lt;a class="mentioned-user" href="https://dev.to/peterlunch"&gt;@peterlunch&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/ms_yogii"&gt;@ms_yogii&lt;/a&gt;
 ):&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/peterlunch" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDwfW7U9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ieTj5mkR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/358832/da87fb8f-ff37-491a-b1a6-54bef42f0eb7.jpeg" alt="peterlunch image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/peterlunch/how-to-plan-and-build-a-programming-project-a-legitimate-guide-for-beginners-1fll" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Plan and Build a Programming Project – A Legitimate Guide for Beginners&lt;/h2&gt;
      &lt;h3&gt;Peter ・ Apr 12 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ms_yogii" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DjvQ4hJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--LIQEf9ZD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/227115/9a245dab-8d19-404d-b57d-d9842ebf2ba3.png" alt="ms_yogii image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ms_yogii/5-tips-to-work-on-your-side-project-while-working-full-time-n7i" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Tips to work on your side project while working full-time. &lt;/h2&gt;
      &lt;h3&gt;Yogini Bende ・ Apr  6 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#startup&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--imO1s5Eu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/LSRBzSMN4JCFG1AkFd/giphy.gif%3Fcid%3Decf05e47p2wxem4wx4mqxwdcywl1chnc3lyixz9opji7w81n%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imO1s5Eu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/LSRBzSMN4JCFG1AkFd/giphy.gif%3Fcid%3Decf05e47p2wxem4wx4mqxwdcywl1chnc3lyixz9opji7w81n%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First I created a more complete description of the project, what would be its features, and what they would solve. Then I estimated how much time it will take to create an MVP (Minimum Viable Product). After that, I jotted down the first set of tasks that are needed to get started. For that, I used epics and user stories. More on that &lt;a href="https://www.atlassian.com/agile/project-management/epics-stories-themes"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below you can see the description of the project and an example of how I set up the tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#short-description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Short Description&lt;/strong&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Simple and minimalistic URL shortener web application that lets you short multiple URLs. Besides that it allows you to create a link-in-profile where you can share multiple URLs in one link.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#problem-description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Problem Description&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In this day and age, people are sharing a lot of URLs with each other. This comes with the added issue of sharing long URLs that are too long and complex or that you would have to share multiple separate URLs increasing the URL confusion that already exists.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Solution&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A URL shortener allows you to create alias URLs that are shortened and more readable. By creating a collection of URLs and giving them a description, it becomes easier to share URLs. That is what Kortiku offers. While you can share the alias URLs, Kortiku also allows for the creation of QR codes for easy sharing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-phasingtimeline"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Project Phasing/Timeline&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#estimated-development-time"&gt;
  &lt;/a&gt;
  Estimated Development Time
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;3 months&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It will take 4 weeks to create an MVP, 2 months to have a production-ready application.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Start:  21 April 2021&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MVP: 14 May 2021&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initial deployment: 30 June 2021&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#mvp"&gt;
  &lt;/a&gt;
  MVP
&lt;/h2&gt;

&lt;p&gt;The Minimum Viable Product of Kortiku will consist of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to create unlimited shortened URLs&lt;/li&gt;
&lt;li&gt;Ability to generate a QR code for shortened URLs&lt;/li&gt;
&lt;li&gt;Ability to sign up &amp;amp; login/ sign out&lt;/li&gt;
&lt;li&gt;Ability to create Link-in-Profiles&lt;/li&gt;
&lt;li&gt;Ability to generate QR codes for LIPs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#nice-to-haves"&gt;
  &lt;/a&gt;
  Nice to haves
&lt;/h2&gt;

&lt;p&gt;Some nice to haves for the deployment of Kortiku are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Customizable LIP backgrounds&lt;/li&gt;
&lt;li&gt;Customizable user profiles&lt;/li&gt;
&lt;li&gt;Analytics dashboard&lt;/li&gt;
&lt;li&gt;Action buttons in LIP&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#stack"&gt;
  &lt;/a&gt;
  Stack
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PHP/ Lavarel → backend&lt;/li&gt;
&lt;li&gt;MySQL → storage&lt;/li&gt;
&lt;li&gt;Tailwind CSS → styling&lt;/li&gt;
&lt;li&gt;Laravel (Blade)/ TBD → frontend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is an example of how the tasks for this project will look like.&lt;/p&gt;

&lt;p&gt;US name: &lt;strong&gt;Homepage&lt;/strong&gt;&lt;br&gt;
Created: Apr 20, 2021&lt;br&gt;
Deadline: Apr 30, 2021&lt;br&gt;
EPIC: USER_INTERFACE&lt;br&gt;
Status: Backlog&lt;/p&gt;

&lt;p&gt;User Story: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;As a&lt;/strong&gt; developer,&lt;br&gt;
&lt;strong&gt;I want&lt;/strong&gt; to see the homepage of Kortiku.&lt;br&gt;
&lt;strong&gt;So that&lt;/strong&gt; I can understand what the product is&lt;br&gt;
&lt;strong&gt;And how&lt;/strong&gt; I can benefit from it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using user stories, you can create tasks that are descriptive enough to get you going. Now, &lt;strong&gt;I am no planning and productivity master&lt;/strong&gt;, this whole planning and sticking to plans part is a challenge on its own for me. To assist me in this endeavor, I will be using the &lt;a href="https://www.atlassian.com/agile/kanban"&gt;kanban&lt;/a&gt; method and Notion as my tool to manage tasks and monitor the progress of the project.&lt;/p&gt;

&lt;p&gt;I created a &lt;a href="https://gist.github.com/theowlsden/06233f4c7d87d8b71718721d6e1774a4"&gt;gist&lt;/a&gt; with a template for the project description and task US. Feel free to use them for your own projects.&lt;/p&gt;

&lt;p&gt;It's game on now!👨‍💻 Let's start getting these tasks from TODO to DONE!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3X_Fqj3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/LPx0x9FgTP8B7z8ujg/giphy.gif%3Fcid%3Decf05e47yngtrz2emzhi59164aokvni4dsj7gy2ko12zc6lr%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3X_Fqj3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/LPx0x9FgTP8B7z8ujg/giphy.gif%3Fcid%3Decf05e47yngtrz2emzhi59164aokvni4dsj7gy2ko12zc6lr%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>beginners</category>
      <category>laravel</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Who makes better decisions : Humans or Robots ?</title>
      <author>Gunjan Giri</author>
      <pubDate>Wed, 21 Apr 2021 15:28:51 +0000</pubDate>
      <link>https://dev.to/gunjangiri/who-makes-better-decisions-humans-or-robots-60e</link>
      <guid>https://dev.to/gunjangiri/who-makes-better-decisions-humans-or-robots-60e</guid>
      <description>&lt;p&gt;Admit it. You rely on navigation apps to help you get around almost every day, whether you drive, take the bus or train, walk, or hike from point A to B.&lt;/p&gt;

&lt;p&gt;In foreign cities, People depend on apps such as Waze and Google Maps to help them discover new places. At home, we use these apps to beat the rush-hour traffic and find the quickest routes to school, colleges, work, and other places we frequently go.&lt;/p&gt;

&lt;p&gt;But sometimes, we doubt a suggested turn; we question a re-route; we suspect an arrival-time estimate.&lt;/p&gt;

&lt;p&gt;Maybe it's because we're in a hurry. Maybe we just trust our own instincts better. Whatever the reason, there are situations that compel us to turn off the app, and go rogue, so to speak.&lt;/p&gt;

&lt;p&gt;But, what exactly is going on in our head when we make decisions that override suggestions or recommendations made by automated systems? Yael Karlinsky-Shichor, a recently appointed assistant professor of marketing at Northeastern University, is on a quest to find out.&lt;/p&gt;

&lt;p&gt;Karlinsky-Shichor's research focuses on the automation of decision-making and its application to marketing. She also studies the psychological aspects of using automation and artificial intelligence models. Wait, automation and marketing? Absolutely, says Karlinsky-Shichor. The two domains intersect more than you might think. She is really Great to Come up with these ideas.&lt;/p&gt;

&lt;p&gt;"Many of the topics that we investigate in marketing today you can also find in information systems," she says. It was really nice and Interesting for me to broaden my view on those topics and look at them from a marketing perspective, but also to continue to look at the topics that involve technology and user interaction with technology.&lt;/p&gt;

&lt;p&gt;Here's a case in point: Karlinsky-Shichor and her research colleagues ran a field experiment in which they tried to assess who could generate a higher profit for a business-to-business company that sells aluminum—humans or machines? They did this by creating an automated system that learned and reapplied every salesperson's pricing decisions.&lt;/p&gt;

&lt;p&gt;They found that when the salespeople used the prices recommended by the automated system, that generated more money for the company. But interestingly, they learned that if the system were to be used in tandem with a high-performing sales representative, that would yield even better results.&lt;/p&gt;

&lt;p&gt;"We use machine learning to automatically decide who should make the pricing decision—the salesperson or the model," Karlinsky-Shichor says. "What we find is that a hybrid structure that lets the model price most of the quotes that comes into the company but lets the expert salesperson take those cases that are more unique or out of the ordinary actually performs even better."&lt;/p&gt;

&lt;p&gt;Here's why the reason is all about. Humans are unpredictable and fickle, but they are also more adapt at handling unpredictability. They have the advantage when it comes to meeting new clients, for example, gauging a client's needs and willingness to pay. However, machines have a lag up on humans in more technical, repetitive, and scalable tasks, and they get to avoid the different behavioral inconsistencies that people often display. Together, they're an unbeatable duo.&lt;/p&gt;

&lt;p&gt;"In many cases, people think that AI models are going to replace human jobs," says Karlinsky-Shichor. What I find—and it's insight that comes up in many domains—is that instead of replacing humans, AI will complement them. And this is what it's gonna be in my opinion. &lt;/p&gt;

&lt;p&gt;Two things happened after the researchers completed their case study. The company went forward with implementing the pricing process recommended by the automated system. And, the company's chief executive officer came back to Karlinsky-Shichor and her colleagues with an interesting offer.&lt;/p&gt;

&lt;p&gt;"He said, 'well, why don't you go and take my best salesperson and create a model based on that salesperson? That model is going to give us the best results,'" she says. "But actually, we found that this is not the case. Even the best salesperson did not necessarily have an expertise that applied to every single case in this company."&lt;/p&gt;

&lt;p&gt;The researchers found that, in fact, pooling the expertise of different experts generated a better outcome for the company's bottom line than using the highest-performing salesperson. So now they are working on an automation approach that will combine the wisdom of the crowds with individual expertise, she says.&lt;/p&gt;

&lt;p&gt;Karlinsky-Shichor is also tackling a different, but related problem: How do you get people to faithfully follow suggestions or recommendations made by automated models? This issue of compliance is a challenge regularly faced by companies that use such systems, she says.&lt;/p&gt;

&lt;p&gt;Again, she points to the business-to-business pricing scheme.&lt;/p&gt;

&lt;p&gt;"What we see is that salespeople generally take the price recommended by the model when they either anticipate a low risk in the change, or it seems like there's a big difference in the price when going with the model," she says. "So one of my conjectures is that if they're very confident, or when they have no clue, they use the model's recommendation."&lt;/p&gt;

&lt;p&gt;And when I read this intertwined field of marketing and artificial intelligence with Robots it did blew my mind off. And I guess this is one of the most Interesting topic to work upon.&lt;/p&gt;

&lt;p&gt;What are your opinions in it ??&lt;br&gt;
Do shoot in the Comment Section.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Make a calculator with pure HTML5 CSS3 and JavaScript!</title>
      <author>Dipayan Ghosh</author>
      <pubDate>Wed, 21 Apr 2021 15:28:09 +0000</pubDate>
      <link>https://dev.to/dipayan108/make-a-calculator-with-pure-html5-css3-and-javascript-6gg</link>
      <guid>https://dev.to/dipayan108/make-a-calculator-with-pure-html5-css3-and-javascript-6gg</guid>
      <description>&lt;p&gt;so, recently i made a calculator with html, css and js ! to add it to my portfolio &lt;/p&gt;

&lt;p&gt;&lt;em&gt;**code for js for operator *&lt;/em&gt;*&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function useOperator(operator) {
    const currentValue = Number(calculatorDisplay.textContent)
        // Prevent multiple operators
    if (operatorValue &amp;amp;&amp;amp; awaitingNextValue) {
        operatorValue = operator
        return
    }
    // Assign firstValue if no value
    if (!firstValue) {
        firstValue = currentValue;
    } else {
        const calculation = calculate[operatorValue](firstValue, currentValue)
        calculatorDisplay.textContent = calculation
        firstValue = calculation
    }
    // Ready for next value, store operator
    awaitingNextValue = true;
    operatorValue = operator;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*** for add event listener ***&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Add Event Listeners for numbers, operators, decimal buttons
inputBtns.forEach((inputBtn) =&amp;gt; {
    if (inputBtn.classList.length === 0) {
        inputBtn.addEventListener('click', () =&amp;gt; sendNumberValue(inputBtn.value))
    } else if (inputBtn.classList.contains('operator')) {
        inputBtn.addEventListener('click', () =&amp;gt; useOperator(inputBtn.value))
    } else if (inputBtn.classList.contains('decimal')) {
        inputBtn.addEventListener('click', () =&amp;gt; addDecimal())
    }
})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>My Journey with my first Client !!</title>
      <author>ashuydv</author>
      <pubDate>Wed, 21 Apr 2021 15:08:10 +0000</pubDate>
      <link>https://dev.to/ashuydv/my-journey-with-my-first-client-d69</link>
      <guid>https://dev.to/ashuydv/my-journey-with-my-first-client-d69</guid>
      <description>&lt;p&gt;Journey with my first client on LINKEDIN ?&lt;br&gt;
---&amp;gt; Finally, last week I got my first client on LinkedIn, an amazing platform, I haven't send any emails, haven't send any cold emails, I did it by simply asking the Founder of that community, whether she wanted a website for her community, firstly, like everyone she said no, but later I joined her community on Telegram, were she shared her website, after which I asked her again, can I help in making your website ? ,this time she said "Yes", and I started making her website according to her guidance and requirements, finally the website was ready in a week... &lt;/p&gt;

&lt;p&gt;Here's the link of the website, you guys can visit it and also join the community, it's for all the coding enthusiasts who are struggling in competitive programming,&lt;/p&gt;

&lt;p&gt;Here's the link of the website: peer-programming-hub.web.app&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>programming</category>
      <category>100daysofcode</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Getting to know Flutter: Flutter 2 Migration</title>
      <author>TheOtherDev/s</author>
      <pubDate>Wed, 21 Apr 2021 15:06:34 +0000</pubDate>
      <link>https://dev.to/theotherdevs/getting-to-know-flutter-flutter-2-migration-2aal</link>
      <guid>https://dev.to/theotherdevs/getting-to-know-flutter-flutter-2-migration-2aal</guid>
      <description>&lt;p&gt;Flutter 2 is here and with web support on stable channel and new desktop crispy goodies it came a long-awaited feature: sound null safety! But... we're not here to talk in depth about it, but only how to migrate your code to Flutter 2 which, if you don't want null safety, it's pretty easy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-check-for-breaking-changes-and-change-your-code-accordingly"&gt;
  &lt;/a&gt;
  1. Check for breaking changes and change your code accordingly
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;With great releases comes great breaking changes&lt;/em&gt; (Uncle Ben).&lt;/p&gt;

&lt;p&gt;Jokes aside you should take a look &lt;a href="https://flutter.dev/docs/release/breaking-changes"&gt;here &lt;/a&gt;and check if some of your code would be affected by this update. be also aware that with by upgrading to Flutter 2 all your projects will be affected if you're not using some third-party Flutter version control methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-flutter-upgrade"&gt;
  &lt;/a&gt;
  2. flutter upgrade
&lt;/h3&gt;

&lt;p&gt;That's the very first thing to do, just give the command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt; &lt;span class="n"&gt;flutter&lt;/span&gt; &lt;span class="n"&gt;upgrade&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just wait for the download to finish and voila! Flutter 2 is here!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-check-out-your-dependencies"&gt;
  &lt;/a&gt;
  3. Check out your dependencies
&lt;/h3&gt;

&lt;p&gt;Flutter 2 lets you upgrade your dependencies because, obviously, it now supports sound null safety so, get on your project &lt;code&gt;pubspec.yaml&lt;/code&gt; file and check for updates.&lt;/p&gt;

&lt;p&gt;You should need to manually update most of your dependencies because most packages got a "major" release with Flutter 2 so refer to &lt;a href="https://pub.dev/"&gt;pub.dev&lt;/a&gt; on how to update your libraries.&lt;/p&gt;

&lt;p&gt;You did it! But for having the complete package you should also need to set your dart version to support null safety!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-feeling-brave"&gt;
  &lt;/a&gt;
  4. Feeling brave?
&lt;/h3&gt;

&lt;p&gt;This could be pretty time-consuming and giving you some issues but you should do it because it will geive you a best insight on possible issues and null exceptions.&lt;/p&gt;

&lt;p&gt;First you'll need to update the minimum dart version on your pubspec.yaml file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nl"&gt;environment:&lt;/span&gt;
  &lt;span class="nl"&gt;sdk:&lt;/span&gt; &lt;span class="s"&gt;"&amp;gt;=2.12.0&amp;lt;3.0.0"&lt;/span&gt;  &lt;span class="c1"&gt;//This line should look like this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then do a little &lt;code&gt;flutter clean&lt;/code&gt; and &lt;code&gt;pub get.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now pretty much 70% of your code will have issues. Don't worry, it's normal, refert to &lt;a href="https://dart.dev/null-safety/migration-guide"&gt;this page&lt;/a&gt; to know how to migrate your code and adding all necessary identifiers.&lt;/p&gt;

&lt;p&gt;Be also aware that if you add sound null safety to your project &lt;strong&gt;all your dependencies must have it&lt;/strong&gt; so if you have even one library has not been updated your code will fail to run.&lt;/p&gt;

&lt;p&gt;There, here's a little guide on how to migrate to Flutter 2. Wrapping up it's a pretty easy task if you don't enable sound null safety, which is absolutely the most difficult and time-consuming task. My advice is that if you have old, very big projects, just update Flutter and your dependencies, all new projects, however should have sound null safety.&lt;/p&gt;

</description>
      <category>dart</category>
      <category>flutter</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>My Newest Programming CSS Tutorial!</title>
      <author>CristoferK</author>
      <pubDate>Wed, 21 Apr 2021 14:58:54 +0000</pubDate>
      <link>https://dev.to/cristoferk/my-newest-programming-css-tutorial-45cd</link>
      <guid>https://dev.to/cristoferk/my-newest-programming-css-tutorial-45cd</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9RH_oBhMk_I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hello guys! Welcome back to my channel! In today's tutorial, you will learn how to code a loading button! Before I start, don't forget to Like, Share, Subscribe and leave a comment down below about what would you like to learn in the next tutorial. Let's start! Let's start by changing the coding language to HTML. Adding the HTML template, and adding a title. I will name this Loading Animation Tutorial. Let's add a button with some text in it. Now let's go to fontawesome.com (the link is in the description) and search for a loading icon. I am gonna choose this icon. If you want you can scroll down and see other icons. Copy the HTML tag, and past it in your HTML file. Save it as HTML.html. Now let's see how it looks. But where is the icon? To can show a font awesome icon you need at the first to make an account and go to kits. And copy the code that they are giving you. After this paste it into the header. Now if we save and reload the page you can see the icon. Now let's start designing. Change the language to CSS. And let's start by removing the default margins. And now let's go to google fonts and choose a font. I will choose Roboto. You can choose whatever font you want. Let's copy this and go to the HTML file and paste this in the header section. Now let's go back to google fonts and copy the font family, and past it in the CSS file. Save this as CSS.css. Now let's add a source tag to our HTML file. Copy the link of the files and paste it in the src section. also, add a link tag with the name of the CSS file. So, now if we refresh the page the margins disappeared. Now let's style the button. I am gonna add 10-pixel padding, set the border and the outline to none. Make the background white. Make the border-radius 10px, the width 200 pixels, and the height 80. I will also add a box shadow of 20px blue. And also position, absolute. Save it and refresh the page. You see that now our button is having a design. But now let's make it to be in the center: top, fifty%, left fifty%. transform, translate -50%, -50%. Font size 25 pixels and cursor pointer. Let's see how it looks. type animation spin 25 linear. To add the animation we need to type keyframes, spin because this is the name of the animation. Zero%, tranform roteate 0deg. And now 100%, transform, rotate three hundred sixty deg. Let's save and refresh the page. Oh! I forgot! We need to make just the icon to be animated! So let's copy the animation. Write fas. If you are using another icon look there to see if it is different. Change from 5 to s and add infinite. Now if we save and refresh, you can see that is working! Thanks for watching guys! Don't forget to Like, Share, and Subscribe! See you next time!&lt;br&gt;
Font Awesome: &lt;a href="https://fontawesome.com/%E2%80%8B"&gt;https://fontawesome.com/​&lt;/a&gt;&lt;br&gt;
Google Fonts: &lt;a href="https://fonts.google.com/"&gt;https://fonts.google.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>design</category>
      <category>animation</category>
    </item>
    <item>
      <title>🔥 NextJS Portfolio Template Free with Tailwind CSS and TypeScript [Open Source] 🚀</title>
      <author>Rem W.</author>
      <pubDate>Wed, 21 Apr 2021 14:49:48 +0000</pubDate>
      <link>https://dev.to/ixartz/nextjs-portfolio-template-free-with-tailwind-css-and-typescript-open-source-2241</link>
      <guid>https://dev.to/ixartz/nextjs-portfolio-template-free-with-tailwind-css-and-typescript-open-source-2241</guid>
      <description>&lt;p&gt;A simple portfolio template built with NextJS (React framework) and styled with Tailwind CSS. Built in high-quality in mind, the portfolio template uses TypeScript, ESLint and Prettier. It also includes SEO features by making easier to manage your metadata and Open Graph tags. A open source and free template hosted on GitHub.&lt;/p&gt;

&lt;p&gt;Deploy your own Next JS portfolio in seconds on Netlify, Vercel or any other hosting platforms.&lt;/p&gt;

&lt;p&gt;Here is a screenshot:&lt;br&gt;
&lt;a href="https://creativedesignsguru.com/demo/Nextjs-Blog-Boilerplate/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HvnRxvQK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ixartz/Next-js-Blog-Boilerplate/master/public/assets/images/screenshot.png" alt="Nextjs Portfolio Template Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check the live demo at &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Blog-Boilerplate/"&gt;NextJS Portfolio Template Live demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also check the source code on GitHub: &lt;a href="https://github.com/ixartz/Next-js-Blog-Boilerplate"&gt;NextJS Portfolio Template GitHub&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ixartz"&gt;
        ixartz
      &lt;/a&gt; / &lt;a href="https://github.com/ixartz/Next-js-Blog-Boilerplate"&gt;
        Next-js-Blog-Boilerplate
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🚀 Nextjs Blog Boilerplate is starter code for your blog based on Next framework. ⚡️ Made with Nextjs, TypeScript, ESLint, Prettier, PostCSS, Tailwind CSS.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Next js Blog Boilerplate with Tailwind CSS&lt;/h1&gt;
&lt;p&gt;
  &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Blog-Boilerplate/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3MkvwSj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ixartz/Next-js-Blog-Boilerplate/master/public/assets/images/nextjs-starter-banner.png%3Fraw%3Dtrue" alt="Nextjs starter banner"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;🚀 Next.js Blog Boilerplate is starter code for your blog based on Next.js 10+ framework with Tailwind CSS 2.0. ⚡️ Made with &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt;, &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt;, &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;, &lt;a href="https://postcss.org" rel="nofollow"&gt;PostCSS&lt;/a&gt;, &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Clone this project and use it to create your own &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; blog. You can check a &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Blog-Boilerplate/" rel="nofollow"&gt;Next js blog templates demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
Features&lt;/h3&gt;

&lt;p&gt;Blog feature:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
🎈 Syntax Highlighting with Prism.js&lt;/li&gt;
&lt;li&gt;
🤖 SEO metadata and Open Graph tags&lt;/li&gt;
&lt;li&gt;
⚙️ JSON-LD for richer indexing&lt;/li&gt;
&lt;li&gt;
📖 Pagination&lt;/li&gt;
&lt;li&gt;
🌈 Include a FREE minimalist blog theme&lt;/li&gt;
&lt;li&gt;
⬇️ Markdown&lt;/li&gt;
&lt;li&gt;
💯 Maximize lighthouse score&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Developer experience first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
🔥 &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; for Static Site Generator&lt;/li&gt;
&lt;li&gt;
🎨 Integrate with &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
💅 &lt;a href="https://postcss.org" rel="nofollow"&gt;PostCSS&lt;/a&gt; for processing &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🎉 Type checking &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
✏️ Linter with &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🛠 Code Formatter with &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🦊 SEO metadata, &lt;a href="https://developers.google.com/search/docs/guides/intro-structured-data" rel="nofollow"&gt;JSON-LD&lt;/a&gt; and &lt;a href="https://ogp.me/" rel="nofollow"&gt;Open Graph&lt;/a&gt; tags with &lt;a href="https://github.com/garmeeh/next-seo"&gt;Next SEO&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
⚙️ &lt;a href="https://www.npmjs.com/package/@next/bundle-analyzer" rel="nofollow"&gt;Bundler Analyzer&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Built-in feature from Next.js:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;…&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ixartz/Next-js-Blog-Boilerplate"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Include everything:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🎈 Syntax Highlighting&lt;/li&gt;
&lt;li&gt;🤖 SEO friendly&lt;/li&gt;
&lt;li&gt;📖 Pagination&lt;/li&gt;
&lt;li&gt;⬇️ Markdown&lt;/li&gt;
&lt;li&gt;🚀 Production-ready&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to find more components you can checkout our &lt;a href="https://creativedesignsguru.com/category/nextjs/"&gt;premium NextJS themes&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#built-on-nextjs-boilerplate"&gt;
  &lt;/a&gt;
  Built on NextJS Boilerplate
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Nextjs Portfolio Template&lt;/strong&gt; is built on top of &lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;NextJS Boilerplate&lt;/a&gt;. More than 100+ ⭐ stars on GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#built-with-latest-technologies"&gt;
  &lt;/a&gt;
  Built with latest technologies
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;NextJS 10&lt;/li&gt;
&lt;li&gt;Tailwind CSS 2.0 with the &lt;a href="https://github.com/tailwindlabs/tailwindcss-jit"&gt;Just-in-time version&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;TypeScript 4&lt;/li&gt;
&lt;li&gt;ESLint&lt;/li&gt;
&lt;li&gt;Prettier&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-react-templates-and-themes"&gt;
  &lt;/a&gt;
  Other React Templates and Themes
&lt;/h2&gt;

&lt;p&gt;You can also check out my other portfolio template at:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/blue-dark-nextjs-theme/"&gt;Blue Dark Nextjs Theme&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/blue-eclatant-nextjs-theme/"&gt;Blue Eclatant Nextjs Theme&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/blue-dark-nextjs-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kFdzS_mb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/blue-dark-mode-nextjs-theme-homepage-xs.png" alt="Blue Dark Nextjs Theme premium"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/blue-eclatant-nextjs-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZB535TK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/eclatant-blue-nextjs-theme-homepage-xs.png" alt="Blue Eclatant Nextjs Theme premium"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/blue-modern-nextjs-theme/"&gt;Blue Modern Nextjs Theme&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/blue-minimalist-nextjs-theme/"&gt;Blue Minimalist Nextjs Theme&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/blue-modern-nextjs-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--piVvAGAK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/modern-blue-nextjs-theme-homepage-xs.png" alt="Blue Modern Nextjs Theme premium"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/blue-minimalist-nextjs-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cUD8DfAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/minimalist-blue-nextjs-theme-homepage-xs.png" alt="Blue Minimalist Nextjs Theme premium"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Highly customizable and easy to configure to meet your requirements, you can deploy your Next JS portfolio in few seconds. Saving you development, design and configuration time.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Why We Moved From Lambda to ECS</title>
      <author>Taylor Reece</author>
      <pubDate>Wed, 21 Apr 2021 14:46:26 +0000</pubDate>
      <link>https://dev.to/prismatic/why-we-moved-from-lambda-to-ecs-4m96</link>
      <guid>https://dev.to/prismatic/why-we-moved-from-lambda-to-ecs-4m96</guid>
      <description>&lt;p&gt;After many months of development, my team just announced the general availability of our platform. That milestone seems like a perfect opportunity to look back and reflect on how the infrastructure that supports Prismatic has evolved over time. (Spoiler: We ended up moving our most important microservice from Lambda to ECS.)&lt;/p&gt;

&lt;p&gt;In this post I'll dive into what went well in Lambda, what challenges we faced, and why we eventually made the decision to migrate some services from Lambda to AWS Elastic Container Service (ECS).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-problem-are-we-solving"&gt;
  &lt;/a&gt;
  What Problem are We Solving?
&lt;/h2&gt;

&lt;p&gt;For some quick context, our product is an integration platform for B2B software companies. That is, we help software companies build integrations and deploy those integrations to their customers. A simple integration might look something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1: Pull down an XML document from Dropbox.&lt;/li&gt;
&lt;li&gt;Step 2: Process the XML with some custom JavaScript code.&lt;/li&gt;
&lt;li&gt;Step 3: Use some stored credentials to post the processed data to a third-party API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our users can configure integrations to run on a schedule, or they can trigger them via a webhook, and our platform takes care of running, logging, and monitoring the integrations (and a whole bunch of other things).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-early-days"&gt;
  &lt;/a&gt;
  The Early Days
&lt;/h2&gt;

&lt;p&gt;The first incarnation of Prismatic used &lt;a href="https://localstack.cloud/"&gt;LocalStack&lt;/a&gt;. We knew that we wanted to eventually host Prismatic in AWS (with the possibility of moving to Azure, GCP, etc. as needed), so the ability to spin up our platform locally to simulate AWS was appealing. The LocalStack service that approximates AWS Lambda was easy to iterate on, and ran without any major hiccups. It gave us a great development feedback loop, so we could prototype and test very quickly.&lt;/p&gt;

&lt;p&gt;We used Lambda to execute each "step" of an integration, and steps leveraged SQS to pass data and trigger the next step. So, an integration execution would look like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run a Dropbox "fetch a file" action to grab an XML file.&lt;/li&gt;
&lt;li&gt;Save the contents of that XML file to SQS, trigger the next step.&lt;/li&gt;
&lt;li&gt;Run a customer's custom JavaScript code to process the XML.&lt;/li&gt;
&lt;li&gt;Save the resulting transformed data to SQS, trigger the next step.&lt;/li&gt;
&lt;li&gt;Run an action to post the processed data to a third-party API.&lt;/li&gt;
&lt;li&gt;Save the results of the final step, trigger the end of the integration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Within LocalStack, this was a very quick process. We could define a 6-step integration, run it, and see results within a couple of seconds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-migration-to-real-aws-lambda"&gt;
  &lt;/a&gt;
  Our Migration to Real AWS Lambda
&lt;/h2&gt;

&lt;p&gt;Once we had a proof of concept working, we devoted some time to moving Prismatic to an actual production environment, with real Lambdas, queues, databases, etc. We were still a small team, and we didn't want to dedicate a ton of time to DevOps-y, infrastructure problems yet. We wanted to dedicate most of our time to our core product, and Lambda let us do just that.&lt;/p&gt;

&lt;p&gt;Lambda was attractive to us for a number of reasons. We didn't need to worry about CPU or memory allocation, server monitoring, or autoscaling; that's all built-in. We were able to throw .zip files full of JavaScript code at Lambda, and AWS took care of the rest. Lambda let us compartmentalize our code into a series of microservices (a service for logging, a service for OAuth key renewals, a service for SMS/email alerting if integrations error out, etc.), so we could keep a good mental map of what code is responsible for doing what task. Costs were pretty reasonable, too - you just pay for compute time, so rather than running servers 24/7, we just paid when our prototypes were executing something.&lt;/p&gt;

&lt;p&gt;After a few days monkeying with &lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt;, we had our second incarnation of Prismatic in AWS. Our integration runners ran on real Lambda, and were triggered via SQS. This is the point at which we started running into performance issues with our integration runners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-lambda-didnt-work-for-us"&gt;
  &lt;/a&gt;
  Why Lambda Didn't Work for Us
&lt;/h2&gt;

&lt;p&gt;We had a number of issues, ranging from speed to SQS size limits and lack of process isolation in Lambda, that caused us to reconsider its effectiveness as our integration runner. Let's talk about each of those issues:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speed.&lt;/strong&gt; Remember the 6-step integration that I said took a couple of seconds to run within LocalStack? It took a full minute using real Lambda and AWS. The actual Lambda invocations were quick - usually a few milliseconds. The writing of step results to SQS and subsequent execution of the next step, though, ended up taking multiple seconds every step. For more complex integrations, like ones that looped over 500 files, that was a show-stopper - who wants their integrations to take minutes (hours?) to complete?&lt;/p&gt;

&lt;p&gt;We tried a number of things to get our Lambda invocations to go faster. We followed guides to keep a number of Lambda instances "warm", and we cranked up the number of vCPUs powering our Lambdas to the &lt;a href="https://aws.amazon.com/about-aws/whats-new/2020/12/aws-lambda-supports-10gb-memory-6-vcpu-cores-lambda-functions/"&gt;highest we could at the time&lt;/a&gt; (6 vCPUs / 10GB RAM), but those things only shaved single digit percentages off of our integration run times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SQS Size Limits&lt;/strong&gt;. SQS &lt;a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html"&gt;limits message size&lt;/a&gt; to &lt;em&gt;256 kilobytes&lt;/em&gt;. The amount of data being passed between steps of an integration often exceeded that size (after all, it's totally reasonable for an integration developer to pull down a multiple megabyte JSON file to process). We were able to work around this size limitation - the recommended solution that we followed was to write out payloads to S3 and pass references to S3 objects via SQS - but this extra API call to S3 only compounded our slowness issues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process Isolation&lt;/strong&gt;. This was the issue that surprised me the most. At first, AWS Lambda seems appealing as a stateless compute engine - run a job, exit, run another job, etc - scale horizontally as needed. We naively assumed that Lambda invocations were isolated from one another, but that turned out to only be half true. Concurrent invocations are isolated (they run in distinct containers within Lambda). However, subsequent invocations reuse previous "warm" environments, so an integration runner might inherit a "dirty" environment from a previous integration run. That's especially a problem if you let customers write their own code, like we do for our customers' integrations.&lt;/p&gt;

&lt;p&gt;It turns out that if one customer writes some bad code into their integration - something like this, &lt;code&gt;global.XMLHttpRequest = null;&lt;/code&gt;, then subsequent integration runs on that same Lambda that depend on the &lt;code&gt;XMLHttpRequest&lt;/code&gt; library error out. This is a big deal, since one customer could break something like &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt; for another customer. A customer could even be malicious and execute something like &lt;code&gt;global.console.log = (msg) =&amp;gt; { nefariousCode(); }&lt;/code&gt;, and other integrations that execute on that same Lambda will run &lt;code&gt;nefariousCode()&lt;/code&gt; whenever they invoke &lt;code&gt;console.log()&lt;/code&gt;. Yikes!&lt;/p&gt;

&lt;p&gt;We tried a few things to get around this issue of shared execution space. We toyed with forcing our Lambdas to cold-start every time (which was a terrible idea for obvious reasons), and we tried spinning up distinct Node processes within &lt;a href="https://www.thegeekdiary.com/understanding-chroot-jail/"&gt;chroot jails&lt;/a&gt;. Neither option panned out - spinning up child Node processes in a Lambda took 3-5 seconds and partially defeated the purpose of being in Lambda in the first place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-move-to-ecs"&gt;
  &lt;/a&gt;
  Our Move to ECS
&lt;/h2&gt;

&lt;p&gt;Lambda had served us well with development - we were able to iterate quickly and get a prototype out the door, but with the myriad issues we faced in Lambda we decided to bite the bullet and dedicate some dev time to cloud infrastructure.&lt;/p&gt;

&lt;p&gt;Our team got to work expanding our existing Terraform scripts, and moved our integration runner to AWS Elastic Container Service (ECS). Within an ECS container we could easily (and quickly!) &lt;code&gt;chroot&lt;/code&gt; and isolate Node processes from one another, solving the process isolation issues we were seeing in Lambda. To get around the SQS size limit issues we faced, we swapped in a Redis-backed queuing service. We had to reinvent some wheels that Lambda had given us for free - like logging, autoscaling, and health checks - but in the end we had our 6-step test integration back to running in under 2 seconds.&lt;/p&gt;

&lt;p&gt;Now, ECS hasn't been perfect - there are are some trade-offs. For one, ECS doesn't seem to autoscale as quickly as Lambda. A "scale up" seems to take about a minute or so between API call and &lt;a href="https://aws.amazon.com/fargate/"&gt;AWS Fargate&lt;/a&gt; pulling down and initializing a container that's ready to accept jobs. We had to pull one of our devs off of product development to work on cloud infrastructure, and there's a ton more to juggle with regards to CPU and memory usage, autoscaling rules, and monitoring, but at this point in product development the pains are worth the gains to give our customers a speedy integration runner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-remained-in-lambda"&gt;
  &lt;/a&gt;
  What Remained in Lambda
&lt;/h2&gt;

&lt;p&gt;We didn't move all of our microservices out of Lambda - plenty still remain in the serverless ecosystem and will for the foreseeable future. Our integration runner didn't fit Lambda well, but there are other tasks for which Lambda seems like the clear choice. We kept all important integration services that aren't critical to the actual execution of the integration in Lambda. Those include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A logger service that pulls logs from ECS and sends them to &lt;a href="https://www.datadoghq.com/"&gt;DataDog&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A service that writes metadata about integration executions to a PostgreSQL database.&lt;/li&gt;
&lt;li&gt;A service that tracks and queues scheduled integrations.&lt;/li&gt;
&lt;li&gt;An alerting service that sends SMS or email notifications to users if their integrations error.&lt;/li&gt;
&lt;li&gt;An authorization service that renews customers' OAuth 2.0 keys for third party services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We didn't want any of these services to block execution of an integration, and for all of them it's fine if they take an additional second or two to run, so services like those fit Lambda perfectly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Our infrastructure definitely changed over time, but I think the decisions we made along the way were the right ones: LocalStack's "Lambda" service let us develop and iterate very quickly, and our first deployment into AWS was simple enough that our small dev team could Terraform our infrastructure without losing a ton of dev hours to it.&lt;/p&gt;

&lt;p&gt;Lambda seemed like an attractive solution for hosting and scaling our microservices, and for many of them, especially asynchronous services that might take a second or two to run, it still remains the correct choice. For our integration runner, though, we learned that the size, speed, and process isolation limitations of Lambda made ECS a better option, and it was worth the dev time it took to create an ECS deployment for that particular service.&lt;/p&gt;

&lt;p&gt;Lambda let us concentrate on product development early on, and when the time was right the transition to ECS was a fairly smooth one. Even with the issues we faced in Lambda, I'm glad we took the path we did.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>serverless</category>
      <category>cloud</category>
    </item>
  </channel>
</rss>
