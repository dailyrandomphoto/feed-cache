<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Are you using these Code Editors?</title>
      <author>CristoferK</author>
      <pubDate>Sun, 18 Apr 2021 09:26:02 +0000</pubDate>
      <link>https://dev.to/cristoferk/are-you-using-these-code-editors-2b9d</link>
      <guid>https://dev.to/cristoferk/are-you-using-these-code-editors-2b9d</guid>
      <description>&lt;p&gt;Are you suing these Code Editors?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/eC8mO6iqUCk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Don't forget to like, share and subscribe!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Journey of Hackathon</title>
      <author>Vilsi Jain</author>
      <pubDate>Sun, 18 Apr 2021 08:58:26 +0000</pubDate>
      <link>https://dev.to/vilsi12/journey-of-hackathon-1m1k</link>
      <guid>https://dev.to/vilsi12/journey-of-hackathon-1m1k</guid>
      <description>&lt;p&gt;What is a hackathon?&lt;br&gt;
Hackathon which makes ideas into real world problem solutions , which make you connect with like minded people it make you a good team leader , grow your skills and work with different partners.&lt;br&gt;
I started my journey of hackathon in 1st year itself without knowing much, just made my team and started that time I am not a winner. I am a learner and then till now I take part in an 8+ hackathon and now I am a mentor in a hackathon.&lt;br&gt;
Who can join — In mostly Hackathon is beginner friendly everyone can participate in that just you need to make a good team and develop technical skills or if you don’t have just give it and learn the working pattern.&lt;/p&gt;

&lt;p&gt;Getting Started: Find Your Hackathon best fits on you From what I observed I found that the best profile of hackers are people who:&lt;br&gt;
They are highly competitive with a hunger to win&lt;br&gt;
bored by “just talking about it” and have the passion to see real results&lt;br&gt;
get energized by pressure deadlines&lt;br&gt;
fueled by finding like-minded people to idea to and work with&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First Decided to make a team of technical and good leader.
FORMING TEAM:
Team chemistry and makeup is one of the most important factors not only in winning, but also in making sure that you don’t burn out. To ensure that you have a chance, here are some tips:
Pitch your idea during the initial pitching session and get folks to buy-in on sharing your vision.
Join a team that already has a front-end engineer. This is a key role that I’ll describe in further detail below.
Have a team of friends or previous hackers to participate with. Knowing each member’s strengths and weaknesses beforehand gives you an advantage in preparation and execution.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3.Employ These Strategies to Be Part of the Best Team- Make good strategies and make everyone on your team give their points and if you have a good team you will always have a chance to make sure that you are in the right direction.&lt;br&gt;
4.Understanding the Judges Panel is Key How to work — this is the best which help me to win understand the background of Judges what they want from you or in which field they are more proficient with this you will get idea that in which field you should focus more and pitch your idea.&lt;br&gt;
5.Decide Your Approach your topic and according to your skills divide it — Yes, always problem or field is given or open to all in that situation                                            1)team member should meet and discuss the innovative idea 2)approach how to make it skills required3)Divide the work on the skills of person.&lt;br&gt;
6.It’s for good time Utilize it best Hackathons typically last 24–48 hours, and the time will fly (especially if you want time for meals and sleep!).Get a general sense of who on your team will work on what, and approximately how long you expect it to take. Timebox tasks, noting when you will “just move on,” even if you can’t get things to work. Bugs can creep up anywhere — and a hackathon is no exception. Deciding in advance how much time you’ll allow for the different parts of your project, and when you’ll move on to a plan B, will help ensure that you have something to demo come pitch time.&lt;br&gt;
7.Learn How to Effectively Validate Your Idea and present it presentation is main to win means putting your ideas in front of judges is most important and you&lt;br&gt;
It’s for good time Utilize it best Hackathons typically last 24–48 hours, and the time will fly (especially if you want time for meals and sleep!).Get a general sense of who on your team will work on what, and approximately how long you expect it to take. Time box tasks, noting when you will “just move on,” even if you can’t get things to work. Bugs can creep up anywhere — and a hackathon is no exception. Deciding in advance how much time you’ll allow for the different parts of your project, and when you’ll move on to a plan B, will help ensure that you have something to demo come pitch time.&lt;br&gt;
Learn How to Effectively Validate Your Idea and present it presentation is main to win means putting your ideas in front of judges is most important and you&lt;br&gt;
8.Always write your mistake which you done and work upon it —&lt;/p&gt;

&lt;p&gt;This is the most important one “Learn from your mistake and try not to revise that in next”&lt;br&gt;
My best experience of winning Hackathon from Incubateind ,Code-n-build ,CIS, Github and my other Hackathon experience is also cool as we always learn from that&lt;br&gt;
IncubatedInd make best experience of your Hackathon I think you once checkout.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 Best Google Chrome Extensions for Web Developers in 2021</title>
      <author>Pawan Bhayde</author>
      <pubDate>Sun, 18 Apr 2021 08:55:54 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/10-best-google-chrome-extensions-for-web-developers-in-2021-239i</link>
      <guid>https://dev.to/pawanbhayde/10-best-google-chrome-extensions-for-web-developers-in-2021-239i</guid>
      <description>&lt;p&gt;Whether you're a beginner Programmer or a seasoned programmer, you spend most of some time on Google. If you've got used Google Chrome Extensions a couple of years back, you almost certainly are avoiding it now or not even realizing its existence. But within the previous couple of years, there are many good Google Chrome developer extensions specifically made for Programmers and Software Developers to assists in their work.&lt;/p&gt;

&lt;p&gt;We often download multiple tools for various purposes and spend tons of space for storing . So why not use a Google Chrome Extension to try to to an equivalent job and reduce the work to manage multiple tools. Here we've cumulated an inventory of the simplest Chrome extensions that are very helpful for you as a developer and with these built-in developer tools, there seems to be no further need for more tools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Daily.dev –&lt;/strong&gt;&lt;br&gt;
If you're a busy developer who cannot continue with the happenings of the programming and development world, then &lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Daily.dev&lt;/a&gt; is perhaps the simplest Chrome extension for you. Its creators also are professional web developers and that they created it because they were spending an excessive amount of time checking out the newest dev news.&lt;/p&gt;

&lt;p&gt;It comes with a default opening tab that shows you the foremost awesome dev news with zero efforts. it's an extension which will surely boost your professional growth with content from many qualified sources for you. Simply open a replacement tab, and you’re done. Being an open-source extension, Daily.dev helps an enormous community of developers round the world to remain in-tuned with the newest news.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Wappalyzer –&lt;/strong&gt;&lt;br&gt;
Developed by Elbert Alias in 2009, &lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Wappalyzer&lt;/a&gt; may be a Chrome extension that permits the developer to spot the various technologies that constitute the rear end of an internet site .&lt;/p&gt;

&lt;p&gt;Wappalyzer identifies the online technologies used on an internet site detecting web servers, frameworks, installed analytics tools, libraries, CMS, plugins, databases, widgets, and lots of more.&lt;/p&gt;

&lt;p&gt;It is an open-source extension and it uncovers quite thousand technologies which make it a real lifeline for developers and designers within the quest of creating appealing websites.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. sitemode.io –&lt;/strong&gt;&lt;br&gt;
This is certainly one among the simplest Chrome extensions out there for web developers since it allows them to switch , save, and share any website which too in real-time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Sitemod.io&lt;/a&gt; extension allows developers to switch an internet site without having access to the ASCII text file and also to make a shareable link to the modified website.&lt;/p&gt;

&lt;p&gt;It is an excellent tool if you're an internet designer and have ideas for a prospective customer's website.&lt;/p&gt;

&lt;p&gt;It uses Chrome Developer Tools to edit an internet page's HTML, CSS, or JS code, and make it possible to feature your code to the online page. Sitemod.io may be a must-have extension in your developer toolkit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Devo –&lt;/strong&gt;&lt;br&gt;
Devo may be a new tab extension that shows GitHub Trending topics, Product Hunts, Hacker News, and lots of different platforms’ front pages on every new tab, with no-login required.&lt;/p&gt;

&lt;p&gt;Users have the liberty of adjusting the location of the cards, display whatever platform they might wish to in several orders. it's an excellent tool for developers who got to stay updated with the newest changes in various tech-related fields.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Devo&lt;/a&gt; uses specially-built web crawlers for every of the platforms and designs the info within the way of the first platform. it's an open-source extension.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Marmoset&lt;/strong&gt;&lt;br&gt;
User appeal is extremely important for developer projects and lots of times developers might encounter the necessity to make snapshots for his or her codes in their projects for aesthetics or other representation purposes.&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Marmoset&lt;/a&gt;, it's possible to make beautiful code snapshots, in only seconds, that are useful for either creating graphical representations of your work to be used on social media or in your portfolio website or elsewhere . it's a must have tool for web developers and designers.&lt;/p&gt;

&lt;p&gt;Marmoset- Best Google Chrome Extensions for Software Developers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. JSON Viewer&lt;/strong&gt;&lt;br&gt;
If you're currently working or have previously worked with anything involving plenty of JSON code like API's (especially RestFul APIs), then you would possibly be totally conscious of the very fact that how clumsy and unreadable the JSON code is usually .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;JSON Viewer&lt;/a&gt; may be a visually stunning JSON highlighter and beautifier tool that serves an excellent purpose as a Chrome extension for developers.&lt;/p&gt;

&lt;p&gt;It helps during arranging the JSON data in a visually appealing tree format which may be viewed directly within the browser window. it's an open-source extension for inspecting JSON data.&lt;/p&gt;

&lt;p&gt;Related: Learn to Code, Make Money: the way to Turn Programming Skills Into Income&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. SAML Tracer&lt;/strong&gt;&lt;br&gt;
As an internet developer, one has got to handle large amounts of knowledge that circulates through the whole project and between various others.&lt;/p&gt;

&lt;p&gt;Security Assertion Mark-up Language (SAML) which is an open standard allowing the exchange of authorization credentials between a service provider and an identity provider comes into action here.&lt;/p&gt;

&lt;p&gt;Thus, a developer often has the necessity to trace the SAML traffic. With the assistance of the &lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;SAML Tracer&lt;/a&gt; Chrome extension, developers can easily trace and highlight SAML traffic.&lt;/p&gt;

&lt;p&gt;It traces the small print of SAML Request and Response and may also trace the small print of HTTP requests or browser traffic including requests like GET, POST, PUT, DELETE, login and logout responses, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. actiTime&lt;/strong&gt;&lt;br&gt;
Any developer round the globe knows that point may be a vital factor for the success of their projects and keeping a track of their development time is important for the project's progress and growth.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;actiTime&lt;/a&gt; extension makes time tracking easier and allows you to trace your hours directly from Chrome with a timer.&lt;/p&gt;

&lt;p&gt;It is an excellent tool for developers to stay a track of their work hours and is employed by companies and freelancers to research their performance and manage their project's progress and profitability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Ghostery&lt;/strong&gt;&lt;br&gt;
Ghostery may be a powerful privacy protection extension for Chrome developers. It not only blocks ads but also detects and stops trackers, pixels, or the other embedded snippet ultimately speeding up websites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Ghostery&lt;/a&gt; eliminates annoying advertisements from an internet site and provides tracking protection to guard your data by blocking 3rd party websites from tracking you. it's freed from cost and requires no sign-up or registration to urge started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Full-Stack Developer Tools&lt;/strong&gt;&lt;br&gt;
In the past few years, the demand for full-stack developers has risen exponentially within the market then has the demand for full-stack development tools.&lt;/p&gt;

&lt;p&gt;There are an outsized number of tools for full-stack development but it's very tedious work to fetch them from different locations. &lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Full-Stack Assistant - Developer Tools&lt;/a&gt; has made this task easier for developers by bringing the foremost used tools for full-stack development under one chrome extension.&lt;/p&gt;

&lt;p&gt;It consists of useful Development Tools and resources in one organized place.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>C++ vs Python</title>
      <author>Konchada Sai Ansul</author>
      <pubDate>Sun, 18 Apr 2021 08:31:05 +0000</pubDate>
      <link>https://dev.to/saiansulsblog/c-vs-python-47ki</link>
      <guid>https://dev.to/saiansulsblog/c-vs-python-47ki</guid>
      <description>&lt;p&gt;Hello Guys, Welcome back to another post of &lt;strong&gt;Sai Ansul's Blog&lt;/strong&gt;.&lt;br&gt;
In this blog we are gonna find which programming language is better.&lt;/p&gt;

&lt;p&gt;So let's start,&lt;/p&gt;

&lt;p&gt;Firstly let us know what is programming? &lt;br&gt;&lt;br&gt;
Programming is the way we can make the computer perform various tasks.&lt;/p&gt;

&lt;p&gt;What is programming language? &lt;br&gt;&lt;br&gt;
It is a formal language to perform various tasks, there are several protocols and algorithms to be followed.&lt;/p&gt;

&lt;p&gt;Let us know the types of programming languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Procedural Programming Language. &lt;/li&gt;
&lt;li&gt;Functional Programming Language. &lt;/li&gt;
&lt;li&gt;Object-oriented Programming Language. &lt;/li&gt;
&lt;li&gt;Scripting Programming Language. &lt;/li&gt;
&lt;li&gt;Logic Programming Language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some names of programming language are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++ Language. &lt;/li&gt;
&lt;li&gt;C Language. &lt;/li&gt;
&lt;li&gt;Pascal Language.&lt;/li&gt;
&lt;li&gt;Python Language.&lt;/li&gt;
&lt;li&gt;Java Language.&lt;/li&gt;
&lt;li&gt;Perl Language&lt;/li&gt;
&lt;li&gt;Lisp Language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, now lets us know something about both the programming language:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C++
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VxdIrASp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618658101893/6ORZL3PNI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VxdIrASp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618658101893/6ORZL3PNI.png" alt="White Photo Gaming YouTube Thumbnail.png"&gt;&lt;/a&gt;&lt;br&gt;
It is programming language used for building high level programmed applications, developed by Bjarne Stroustrup as an extension of the C programming language, or "C with Classes". C++ supports different ways of programming like: object-oriented, functional, procedural and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DY94aMkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618657361352/knijkR4X1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DY94aMkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618657361352/knijkR4X1.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
It is a programming language, it's object oriented, it's a interpreter language which is easy to learn. This can be used for software and web development also for data science.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-let-us-know-some-of-the-of-the-difference-between-two-programming-language"&gt;
  &lt;/a&gt;
  Now let us know some of the  of the difference between two programming language
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;C++&lt;/th&gt;
    &lt;th&gt;Pyhton&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;It is statically typed &lt;/td&gt;
    &lt;td&gt;It is dynamically typed &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;No scope as an backend developer &lt;/td&gt;
    &lt;td&gt;Good option for backend developer &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt; Need to write a lot of lines of code&lt;/td&gt;
    &lt;td&gt;Less lines of codes required &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;It is pre; compiled&lt;/td&gt;
    &lt;td&gt;It uses interpreter&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Looks messy but manageable as compared to python&lt;/td&gt;
    &lt;td&gt;It is easy since its object-oriented and simpler to use&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;C++ is faster than python  &lt;/td&gt;
    &lt;td&gt;Python is slower because it uses interpreter, it also determines on the type of data while running &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; It doesn't support garbage collection &lt;/td&gt;
&lt;td&gt; It supports garbage collection &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; TIOBE rating is 4 &lt;/td&gt;
&lt;td&gt; TIOBE rating is 3 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Variables are limited within loops &lt;/td&gt;
&lt;td&gt; Variables are also accessible outside loops &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; Rapid Prototyping not possible because of larger code size&lt;/td&gt;
&lt;td&gt; Rapid Prototyping is possible because of the small size of the code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; Not easy in contrast to Python because of its complex syntax. &lt;/td&gt;
&lt;td&gt; Program is easier to type &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;These were some of the differences between these 2 programming language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-let-us-know-some-advantage-amp-disadvantages-of-python-amp-c"&gt;
  &lt;/a&gt;
  Now let us know some advantage &amp;amp; disadvantages of Python &amp;amp; C++
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clb38g54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618729828057/Hy85WdYbD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clb38g54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618729828057/Hy85WdYbD.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-python"&gt;
  &lt;/a&gt;
  Advantages of Python
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Its portable&lt;/li&gt;
&lt;li&gt;Its free and open sourced&lt;/li&gt;
&lt;li&gt;Easy to use and fast to develop language&lt;/li&gt;
&lt;li&gt;It has all the libraries that each requires&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantage-of-python"&gt;
  &lt;/a&gt;
  Disadvantage of Python
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Speed is slower than C++&lt;/li&gt;
&lt;li&gt;There are sometimes runtime errors&lt;/li&gt;
&lt;li&gt;Its not a good choice for mobile development&lt;/li&gt;
&lt;li&gt;Its used for functional programming&lt;/li&gt;
&lt;li&gt;Its not a good choice for memory intensive tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-c"&gt;
  &lt;/a&gt;
  Advantages of C++
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It is also portable&lt;/li&gt;
&lt;li&gt;Object oriented&lt;/li&gt;
&lt;li&gt;Low-level Manipulation&lt;/li&gt;
&lt;li&gt;Memory Management&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-c"&gt;
  &lt;/a&gt;
  Disadvantages of C++
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It does not have any security feature&lt;/li&gt;
&lt;li&gt;It can't support garbage collection&lt;/li&gt;
&lt;li&gt;Difficult to debug while used for web applications&lt;/li&gt;
&lt;li&gt;It becomes complex while in a very big and high level programming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, since we have covered what is python &amp;amp; C++, its difference and its advantages and disadvantages.&lt;/p&gt;

&lt;p&gt;Now lets proceed towards the conclusion&lt;/p&gt;

&lt;p&gt;So, if you have read this, you might have a clear idea about which programming language is better and which one you should use.&lt;br&gt;
Python is better beginners because of  its easy code and syntax, its a good for who want to choose their  career  in backend web development.&lt;br&gt;
Python is also leading language for data analytics and machine learning .&lt;br&gt;
But, if you want to develop applications or software then C++ is a good programming language to go for.&lt;/p&gt;

&lt;p&gt;Now, at the end you have to decide for what purpose which one you have to choose.&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Solution: Remove Nth Node From End of List</title>
      <author>seanpgallivan</author>
      <pubDate>Sun, 18 Apr 2021 08:12:33 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-remove-nth-node-from-end-of-list-4njl</link>
      <guid>https://dev.to/seanpgallivan/solution-remove-nth-node-from-end-of-list-4njl</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/discuss/1164542"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-19-medium-remove-nth-node-from-end-of-list"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/"&gt;Leetcode Problem #19 (&lt;em&gt;Medium&lt;/em&gt;): Remove Nth Node From End of List&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given the &lt;code&gt;head&lt;/code&gt; of a linked list, remove the &lt;code&gt;n&lt;/code&gt;th node from the end of the list and return its &lt;code&gt;head&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow up&lt;/strong&gt;: Could you do this in one pass?&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;head = [1,2,3,4,5], n = 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[1,2,3,5]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual:&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zVNBh1PE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="Example 1 Visual"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;head = [1], n = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;head = [1,2], n = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[1]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The number of nodes in the list is &lt;code&gt;sz&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= sz &amp;lt;= 30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= Node.val &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= sz&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;With a singly linked list, the &lt;em&gt;only&lt;/em&gt; way to find the end of the list, and thus the &lt;strong&gt;n&lt;/strong&gt;'th node from the end, is to actually iterate all the way to the end. The challenge here is attemping to find the solution in only one pass. A naive approach here might be to store pointers to each node in an array, allowing us to calculate the &lt;strong&gt;n&lt;/strong&gt;'th from the end once we reach the end, but that would take &lt;strong&gt;O(M) extra space&lt;/strong&gt;, where &lt;strong&gt;M&lt;/strong&gt; is the length of the linked list.&lt;/p&gt;

&lt;p&gt;A slightly less naive approach would be to only store only the last &lt;strong&gt;n+1&lt;/strong&gt; node pointers in the array. This could be achieved by overwriting the elements of the storage array in circlular fashion as we iterate through the list. This would lower the &lt;strong&gt;space complexity&lt;/strong&gt; to &lt;strong&gt;O(N+1)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In order to solve this problem in only one pass and &lt;strong&gt;O(1) extra space&lt;/strong&gt;, however, we would need to find a way to &lt;em&gt;both&lt;/em&gt; reach the end of the list with one pointer &lt;em&gt;and also&lt;/em&gt; reach the &lt;strong&gt;n&lt;/strong&gt;'th node from the end simultaneously with a second pointer.&lt;/p&gt;

&lt;p&gt;To do that, we can simply stagger our two pointers by &lt;strong&gt;n&lt;/strong&gt; nodes by giving the first pointer (&lt;strong&gt;fast&lt;/strong&gt;) a head start before starting the second pointer (&lt;strong&gt;slow&lt;/strong&gt;). Doing this will cause &lt;strong&gt;slow&lt;/strong&gt; to reach the &lt;strong&gt;n&lt;/strong&gt;'th node from the end at the same time that &lt;strong&gt;fast&lt;/strong&gt; reaches the end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jnoNPYoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/BSiLKj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jnoNPYoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/BSiLKj0.png" alt="Visual 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we will need access to the node &lt;em&gt;before&lt;/em&gt; the target node in order to remove the target node, we can use &lt;strong&gt;fast.next == null&lt;/strong&gt; as our exit condition, rather than &lt;strong&gt;fast == null&lt;/strong&gt;, so that we stop one node earlier.&lt;/p&gt;

&lt;p&gt;This will unfortunately cause a problem when &lt;strong&gt;n&lt;/strong&gt; is the same as the length of the list, which would make the first node the target node, and thus make it impossible to find the node &lt;em&gt;before&lt;/em&gt; the target node. If that's the case, however, we can just &lt;strong&gt;return head.next&lt;/strong&gt; without needing to stitch together the two sides of the target node.&lt;/p&gt;

&lt;p&gt;Otherwise, once we succesfully find the node &lt;em&gt;before&lt;/em&gt; the target, we can then stitch it together with the node &lt;em&gt;after&lt;/em&gt; the target, and then &lt;strong&gt;return head&lt;/strong&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;There are only minor differences between the code of all four languages.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;removeNthFromEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;
    &lt;span class="nx"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;removeNthFromEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;
        &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ListNode&lt;/span&gt; &lt;span class="nf"&gt;removeNthFromEnd&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ListNode&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;ListNode&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;removeNthFromEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Nginx Cheatsheet</title>
      <author>Vishnu Chilamakuru</author>
      <pubDate>Sun, 18 Apr 2021 08:09:56 +0000</pubDate>
      <link>https://dev.to/vishnuchilamakuru/nginx-cheatsheet-24ph</link>
      <guid>https://dev.to/vishnuchilamakuru/nginx-cheatsheet-24ph</guid>
      <description>&lt;p&gt;Nginx is open-source software for web serving, reverse proxying, caching, load balancing, media streaming, and more. In this post, I will mention few Nginx configurations which we use frequently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#index"&gt;
  &lt;/a&gt;
  Index
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#listen-to-port"&gt;Listen To Port&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#access-logging"&gt;Access Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#domain-name"&gt;Domain Name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#static-assets"&gt;Static Assets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#redirect"&gt;Redirect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reverse-proxy"&gt;Reverse Proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#load-balancing"&gt;Load Balancing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ssl"&gt;SSL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#listen-to-port"&gt;
  &lt;/a&gt;
  Listen To Port
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# Standard HTTP Protocol&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Standard HTTPS Protocol&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;443&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Listen on 80 using IPv6&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="s"&gt;[::]:80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Listen only on using IPv6&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="s"&gt;[::]:80&lt;/span&gt; &lt;span class="s"&gt;ipv6only=on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#access-logging"&gt;
  &lt;/a&gt;
  Access Logging
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# Relative or full path to log file&lt;/span&gt;
  &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="n"&gt;/path/to/file.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Turn 'on' or 'off'&lt;/span&gt;
  &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#domain-name"&gt;
  &lt;/a&gt;
  Domain Name
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# Listen to yourdomain.com&lt;/span&gt;
  &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;yourdomain.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Listen to multiple domains&lt;/span&gt;
  &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;yourdomain.com&lt;/span&gt; &lt;span class="s"&gt;www.yourdomain.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Listen to all domains&lt;/span&gt;
  &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;*.yourdomain.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Listen to all top-level domains&lt;/span&gt;
  &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;yourdomain.*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Listen to unspecified Hostnames (Listens to IP address itself)&lt;/span&gt;
  &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#static-assets"&gt;
  &lt;/a&gt;
  Static Assets
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;yourdomain.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/path/to/website&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#redirect"&gt;
  &lt;/a&gt;
  Redirect
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;www.yourdomain.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt; &lt;span class="s"&gt;http://yourdomain.com&lt;/span&gt;&lt;span class="nv"&gt;$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;www.yourdomain.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/redirect-url&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt; &lt;span class="s"&gt;http://otherdomain.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reverse-proxy"&gt;
  &lt;/a&gt;
  Reverse Proxy
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;yourdomain.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://0.0.0.0:3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="c1"&gt;# where 0.0.0.0:3000 is your application server (Ex: node.js) bound on 0.0.0.0 listening on port 3000&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#load-balancing"&gt;
  &lt;/a&gt;
  Load Balancing
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;node_js&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;0.0.0.0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;0.0.0.0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="s"&gt;.131.121.122&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;yourdomain.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://node_js&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ssl"&gt;
  &lt;/a&gt;
  SSL
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;443&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;yourdomain.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;ssl&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;ssl_certificate&lt;/span&gt; &lt;span class="n"&gt;/path/to/cert.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;ssl_certificate_key&lt;/span&gt; &lt;span class="n"&gt;/path/to/privatekey.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;ssl_stapling&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;ssl_stapling_verify&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;ssl_trusted_certificate&lt;/span&gt; &lt;span class="n"&gt;/path/to/fullchain.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;ssl_protocols&lt;/span&gt; &lt;span class="s"&gt;TLSv1&lt;/span&gt; &lt;span class="s"&gt;TLSv1.1&lt;/span&gt; &lt;span class="s"&gt;TLSv1.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;ssl_connection_timeout&lt;/span&gt; &lt;span class="s"&gt;1d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;ssl_session_cache&lt;/span&gt; &lt;span class="s"&gt;shared:SSL:50m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;add_header&lt;/span&gt; &lt;span class="s"&gt;Strict-Transport-Security&lt;/span&gt; &lt;span class="s"&gt;max-age=15768000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Permanent Redirect for HTTP to HTTPS&lt;/span&gt;
&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;yourdomain.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt; &lt;span class="s"&gt;https://&lt;/span&gt;&lt;span class="nv"&gt;$host$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;







&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#if-you-like-what-you-read-and-want-to-see-more-please-support-me-with-coffee-or-a-book-"&gt;
  &lt;/a&gt;
  If you like what you read and want to see more, please support me with  &lt;a href="https://www.buymeacoffee.com/vishnuchi"&gt;coffee or a book&lt;/a&gt;  ;)
&lt;/h3&gt;

</description>
      <category>tutorial</category>
      <category>nginx</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Introduction to Microservice Architecture</title>
      <author>Tamerlan Gudabayev</author>
      <pubDate>Sun, 18 Apr 2021 08:01:00 +0000</pubDate>
      <link>https://dev.to/tamerlang/introduction-to-microservice-architecture-1p8h</link>
      <guid>https://dev.to/tamerlang/introduction-to-microservice-architecture-1p8h</guid>
      <description>&lt;p&gt;It can be very intimidating designing a backend system. There are many different variations and so many buzz words such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monolith&lt;/li&gt;
&lt;li&gt;Macroservices&lt;/li&gt;
&lt;li&gt;Miniservices&lt;/li&gt;
&lt;li&gt;Microservices&lt;/li&gt;
&lt;li&gt;Serverless&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As it turns out, the process of choosing an architecture is a lot simpler. You just gotta know the pros and cons of each one and pick the one that suits your project needs. But first, you need to have a solid understanding of each architectural pattern, so this is why in this post we cover one of the most popular architectural patterns, the microservice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You'll learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basics of software architecture&lt;/li&gt;
&lt;li&gt;Pros and cons of the monolith architecture&lt;/li&gt;
&lt;li&gt;Pros and cons of microservices&lt;/li&gt;
&lt;li&gt;Basics of design pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#terminology"&gt;
  &lt;/a&gt;
  Terminology
&lt;/h2&gt;

&lt;p&gt;Before we move on to the gritty details of microservices, we first have to cover the basic terminology.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-software-architecture"&gt;
  &lt;/a&gt;
  What is software architecture?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Architecture, in a nutshell, is the decisions that you wish you had made early on in the project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Architecture is the skeleton of the project. It is the hard decisions you make early on that determine the foundation of the project. It's this foundation that greatly influences the quality of code, ease of development and deployment, maintainability, and evolvability.&lt;/p&gt;

&lt;p&gt;Examples of architecture:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client-Server&lt;/li&gt;
&lt;li&gt;Monolith&lt;/li&gt;
&lt;li&gt;Model-View-Controller (MVC)&lt;/li&gt;
&lt;li&gt;Event-Driven&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-monolith-architecture"&gt;
  &lt;/a&gt;
  What is monolith architecture?
&lt;/h3&gt;

&lt;p&gt;You might be thinking, &lt;em&gt;isn't this post about microservices, why is this idiot talking about monolith?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The reason is that to understand what problems does the microservice architecture fix, we gotta first understand the problems that the old traditional monolithic architecture give.&lt;/p&gt;

&lt;p&gt;Okay, moving on. &lt;/p&gt;

&lt;p&gt;The word monolith means "composed all in one place", in software terms it means having a single application, made up of different components, combined into a single program from a single platform.&lt;/p&gt;

&lt;p&gt;Components may include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authorization - responsible for authorizing the user&lt;/li&gt;
&lt;li&gt;Presentation - responsible for handling HTTP requests, and responding back with HTML or JSON/XML (if it's an API)&lt;/li&gt;
&lt;li&gt;Business logic - the business logic of the application&lt;/li&gt;
&lt;li&gt;Database layer - responsible for communicating with the database&lt;/li&gt;
&lt;li&gt;Application integration - responsible for integrating with other services (using REST API or messaging) or any other data source.&lt;/li&gt;
&lt;li&gt;Notification module - responsible for sending notifications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UVGm_Jeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxhmz7z95897fdv67r7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UVGm_Jeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxhmz7z95897fdv67r7t.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For years monolithic applications have been industry default because it's simple. All code is in one place, it's simple to test, and deploy. But as application size grows, there are some major drawbacks that get introduced.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-problems-with-monolithic-architecture"&gt;
  &lt;/a&gt;
  What are the problems with monolithic architecture?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Maintenance - as the codebase increases, it becomes harder to make changes.&lt;/li&gt;
&lt;li&gt;The large code base intimidates developers, especially new ones. Which will lead to decreased productivity.&lt;/li&gt;
&lt;li&gt;Overloaded IDE - the larger the code base, the slower the IDE and the less productive developers will be.&lt;/li&gt;
&lt;li&gt;Startup time - the larger the application, the more time it will take to launch the application, in turn will lead to decreased productivity.&lt;/li&gt;
&lt;li&gt;Deployment - in order to update one component, your gonna have to redeploy the whole application. This might interrupt background tasks, and possibly cause problems.&lt;/li&gt;
&lt;li&gt;Scaling - monolithic applications are hard to scale because different modules may have different resource requirements.&lt;/li&gt;
&lt;li&gt;Scaling to development teams - as an application gets bigger, it would be advisable to separate developers into teams per module. For example, a team for the payments module, and another team for the products module. In a monolithic architecture, everything is coupled together, making it hard for teams to work independently. This forces the teams to coordinate their development and deployments. In turn, making it difficult to make changes and update production.&lt;/li&gt;
&lt;li&gt;Tech stack - Monolithic architecture forces you to stick to one technology (sometimes even a specific version of that technology). It's very hard to adopt new technology due to the fact that changing the language or framework will affect the whole application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-microservice"&gt;
  &lt;/a&gt;
  What is a microservice?
&lt;/h3&gt;

&lt;p&gt;The microservice architecture is an approach to software development, in which a large application is made up of a suite of modular services (i.e loosely coupled modules/components). A good analogy would be legos, where each set of blocks corresponds to a component. Additionally, a group of connected components would create a full-fledged application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MQRi63M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bar48ltpk20zacd7bthj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MQRi63M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bar48ltpk20zacd7bthj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each module/service has a single business goal and uses simple interfaces to communicate with other services. Another feature of services is that, unlike the monolith application where you share a single database, microservices follow the approach of database per service. This ensures loose coupling, and the service can use the database that best suits its needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros-of-microservices"&gt;
  &lt;/a&gt;
  Pros of Microservices
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Enable the continuous development and deployment of large complex applications.

&lt;ul&gt;
&lt;li&gt;Improves maintainability - each service is small, so it's much easier to make changes.&lt;/li&gt;
&lt;li&gt;Better testability - services are smaller and faster to test.&lt;/li&gt;
&lt;li&gt;Better deployability - each service can be deployed independently&lt;/li&gt;
&lt;li&gt;Enables teams to be independent - teams can get full responsibility for a single or set of services. Each team can develop, test, deploy, and scale their services independently of all other teams.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Each microservice is relatively small:

&lt;ul&gt;
&lt;li&gt;Less complexity, easier to understand&lt;/li&gt;
&lt;li&gt;Smaller code base, making the IDE fast.&lt;/li&gt;
&lt;li&gt;The application starts faster, which makes developers much more productive, and speeds up deployments.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Improved fault isolation. If one service faces issues, then only that service will be affected. The other services will continue normally. Unlike monolithic architecture, one misbehaving component can bring down the entire system.&lt;/li&gt;
&lt;li&gt;Better evolvability - when developing a new service, you can use a new technology stack. Similarly, when making major changes to an existing service, you can rewrite the whole service in a new stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons-of-microservices"&gt;
  &lt;/a&gt;
  Cons of Microservices
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Developers must deal with the additional complexity of creating a distributed system:

&lt;ul&gt;
&lt;li&gt;Developers must implement the inter-service communication mechanism and deal with partial failure&lt;/li&gt;
&lt;li&gt;Implementing requests that span multiple services is more difficult.&lt;/li&gt;
&lt;li&gt;Testing the interactions between services is more difficult.&lt;/li&gt;
&lt;li&gt;Implementing requests that span multiple services requires careful coordination between the teams.&lt;/li&gt;
&lt;li&gt;Developer tools/IDEs are oriented toward building monolithic applications and don’t provide explicit support for developing distributed applications.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Deployment complexity - in production, there is additional complexity in deploying and managing a system compromised of many different services.&lt;/li&gt;
&lt;li&gt;Increased memory consumption. The microservice architecture replaces N monolithic application instances with NxM services instances. If each service runs in its own JVM (or equivalent), which is usually necessary to isolate the instances, then there is the overhead of M times as many JVM runtimes. Moreover, if each service runs on its own VM (e.g. EC2 instance), as is the case at Netflix, the overhead is even higher.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#microservice-design-patterns"&gt;
  &lt;/a&gt;
  Microservice Design Patterns
&lt;/h2&gt;

&lt;p&gt;You cannot use the microservice architecture alone, there are many different design patterns that solve the same problems in different ways, and it's your job as the developer to choose which one best fits your project. &lt;/p&gt;

&lt;p&gt;An example may be:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How to decompose the application into services?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here you can use different design patterns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decompose by business capability and define services corresponding to business capabilities.&lt;/li&gt;
&lt;li&gt;Decompose by domain-driven design subdomain.&lt;/li&gt;
&lt;li&gt;Decompose by verb or use case and define services that are responsible for particular actions. e.g. a &lt;code&gt;Shipping Service&lt;/code&gt; that’s responsible for shipping complete orders.&lt;/li&gt;
&lt;li&gt;Decompose by nouns or resources by defining a service that is responsible for all operations on entities/resources of a given type.
e.g. an &lt;code&gt;Account Service&lt;/code&gt; that is responsible for managing user accounts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-are-patterns"&gt;
  &lt;/a&gt;
  What are patterns?
&lt;/h3&gt;

&lt;p&gt;Design patterns are typical solutions to commonly occurring problems in software design. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code.&lt;/p&gt;

&lt;p&gt;You can't just find and copy a pattern. Patterns do not provide any code but provide a general concept for solving a specific problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-types-of-microservices-patterns"&gt;
  &lt;/a&gt;
  What are the types of microservices patterns?
&lt;/h3&gt;

&lt;p&gt;Microservices have lots of patterns, to make it easier, we have separated the patterns into three categories based on their relationships to one another.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Predecessor – a predecessor pattern is a pattern that motivates the need for this pattern. For example, the Microservice Architecture pattern is the predecessor to the rest of the patterns in the pattern language except the monolithic architecture pattern.&lt;/li&gt;
&lt;li&gt;Successor – a pattern that solves an issue that is introduced by this pattern. For example, if you apply the Microservice Architecture pattern you must then apply numerous successor patterns including service discovery patterns and the Circuit Breaker pattern.&lt;/li&gt;
&lt;li&gt;Alternative – a pattern that provides an alternative solution to this pattern. For example, the Monolithic Architecture pattern and the Microservice Architecture pattern are alternative ways of architecting an application. You pick one or the other. These relationships provide valuable guidance when using a pattern language. Applying a pattern creates issues that you must then address by applying successor patterns. The selection of patterns continuously recursively until you reach patterns with no successor. If two or more patterns are alternatives then you must typically pick just one. In many ways, this is similar to traversing a graph.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations, you now know enough to go forth in your journey of being a software architect. The journey doesn't stop here, make sure to check out &lt;a href="http://microservices.io"&gt;microservices.io&lt;/a&gt; for more details on microservices.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>architecture</category>
      <category>computerscience</category>
      <category>microservices</category>
    </item>
    <item>
      <title>Basic Game Development</title>
      <author>Tom Morris</author>
      <pubDate>Sun, 18 Apr 2021 07:41:05 +0000</pubDate>
      <link>https://dev.to/wifiguard/basics-game-development-339o</link>
      <guid>https://dev.to/wifiguard/basics-game-development-339o</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-beginners-learn-game-programming"&gt;
  &lt;/a&gt;
  How Beginners Learn Game Programming
&lt;/h1&gt;

&lt;p&gt;Anyone who likes to play video games may have thought about programming your own game and then making it available to others for play.&lt;/p&gt;

&lt;p&gt;However, this project can be a little more demanding than you initially endo. What types of video games can be created, how games work and what you need to know about programming, you will learn in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-programming-of-video-games"&gt;
  &lt;/a&gt;
  What is the programming of video games?
&lt;/h2&gt;

&lt;p&gt;The creation of a game depends primarily on what kind of game you want to program. From simple 2D games to 3D graphic pops, everything is possible, but also different laborious. Casino Games are also developed in a similar way and you can find out more here: &lt;a href="https://casinokix.com"&gt;Casinokix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A mobile quiz game is programmed faster than a 2D multiplayer game with realistic physics. This also recognizes that the game genre alone influences what effort you have to make to be able to implement the game at all. In addition, there are which platforms you want to operate: From consoles, handhelds to PC and mobile devices, everything is possible, but also different time consuming. You might know it from exclusive titles for consoles. &lt;/p&gt;

&lt;p&gt;It takes quite a while to release a single-console game for other consoles or PC. The best known and most elaborate example is GTA5. This game was released for the Xbox 360 and Playstation 3 in 2013. Xbox One and Playstation 4 followed in 2014 and only in April 2015 the game was released for PC.&lt;/p&gt;

&lt;p&gt;If you are thinking that you want your game to be as large as a GTA5, you should know that more than 1000 people were involved in the development of GTA5 and the development of the game is said to have cost the equivalent of €191.2 million. It is the most complex and expensive game development ever, showing exactly how hard it can be to program games.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-a-video-game-work"&gt;
  &lt;/a&gt;
  How does a video game work
&lt;/h2&gt;

&lt;p&gt;The complexity of a game is evident when you take a closer look under the hood. When you play video games you often hear about the term FPS. This is the abbreviation for frames per second. But what does this term mean? If you look at the game mechanics, see the following sequence:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;input&lt;/li&gt;
&lt;li&gt;workmanship&lt;/li&gt;
&lt;li&gt;output&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Information about the gameplay is collected in the input. This means evaluating keyboard and mouse input or retrieving GameController data. You may even need data from the Internet, for example in multiplayer games.&lt;/p&gt;

&lt;p&gt;Then, of course, there is information about the current score, so where are the players, who performed what action last, and which animations were active in the last step.&lt;/p&gt;

&lt;p&gt;This information must be available for the next step. After all, everything is then calculated in the processing step: the next player position and animation, the game rules, are evaluated. Has a player already won, or has just done something else. Can an object through a wall or does it have to bounce off? So effects, rules of the game, physics and movements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#games-calculations"&gt;
  &lt;/a&gt;
  Games Calculations
&lt;/h2&gt;

&lt;p&gt;All these calculations are evaluated in this 2nd step, the result is then a game state that can be spent. And so you have already arrived in the third step: the edition. Now the required objects are drawn on the screen, sound effects or music are played, controllers are activated to vibrate, and the current data is sent to the server for multiplayer games. And then the whole thing starts from scratch. This is called the GameLoop.&lt;/p&gt;

&lt;p&gt;How many times do you think this needs to happen so you can gamble a smooth game? These 3 steps must be completed at least 24 times a second, otherwise it will look to your eye as if the game is stumbling. Better is 30, 60 and even 90 passes per second for 3D/VR games.&lt;/p&gt;

&lt;p&gt;In the end, an image is created with each pass, in English it is called one frame. 24 calculated frames per second result in 24 fps. The cool thing about programming is that there are so-called game engines that make your work easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-video-game"&gt;
  &lt;/a&gt;
  Create a video game
&lt;/h2&gt;

&lt;p&gt;As fast as the gameloop conjures frames per second on the screen, unfortunately, creating a game is not at all. Even if you already know all the necessary details of programming and have enough experience, the effort is high.&lt;/p&gt;

&lt;p&gt;You go through a typical software development process and have to do a few additional things.&lt;/p&gt;

&lt;p&gt;If you liked this article, here is a place where you can learn how to code. &lt;a href="https://www.codecademy.com/learn/learn-how-to-code"&gt;Code Academy&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>games</category>
      <category>development</category>
    </item>
    <item>
      <title>Setting up my Windows Coding Environment </title>
      <author>Hritik Pawar</author>
      <pubDate>Sun, 18 Apr 2021 07:31:41 +0000</pubDate>
      <link>https://dev.to/iamhritikpawar/setting-up-my-windows-coding-environment-2c7e</link>
      <guid>https://dev.to/iamhritikpawar/setting-up-my-windows-coding-environment-2c7e</guid>
      <description>&lt;p&gt;So a few days back I whipped my Computer so that I can do all clean start with all the latest version software and apps. So while doing the process I noted down everything I downloaded, so that if I do it again I just have to run all these commands once and it's done.&lt;br&gt;
It's a very effective method and time-saving I definitely recommend it to document everything you use.&lt;br&gt;
Here are some basic software commands to quickstart your setup.&lt;/p&gt;

&lt;p&gt;Also at the end are some tools I have listed that are very useful.&lt;/p&gt;

&lt;p&gt;Run the commands mentioned to install everything&lt;/p&gt;

&lt;p&gt;choco install  : To Install&lt;/p&gt;

&lt;p&gt;choco upgrade  : To upgrade&lt;/p&gt;

&lt;p&gt;choco uninstall  : To uninstall&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install a package manager&lt;/p&gt;

&lt;p&gt;Chocolatey :  &lt;a href="https://chocolatey.org/"&gt;https://chocolatey.org/&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; @&lt;span class="s2"&gt;"%SystemRoot%&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="s2"&gt;ystem32&lt;/span&gt;&lt;span class="se"&gt;\W&lt;/span&gt;&lt;span class="s2"&gt;indowsPowerShell&lt;/span&gt;&lt;span class="se"&gt;\v&lt;/span&gt;&lt;span class="s2"&gt;1.0&lt;/span&gt;&lt;span class="se"&gt;\p&lt;/span&gt;&lt;span class="s2"&gt;owershell.exe"&lt;/span&gt; &lt;span class="nt"&gt;-NoProfile&lt;/span&gt; &lt;span class="nt"&gt;-InputFormat&lt;/span&gt; None &lt;span class="nt"&gt;-ExecutionPolicy&lt;/span&gt; Bypass &lt;span class="nt"&gt;-Command&lt;/span&gt; &lt;span class="s2"&gt;"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; SET &lt;span class="s2"&gt;"PATH=%PATH%;%ALLUSERSPROFILE%&lt;/span&gt;&lt;span class="se"&gt;\c&lt;/span&gt;&lt;span class="s2"&gt;hocolatey&lt;/span&gt;&lt;span class="se"&gt;\b&lt;/span&gt;&lt;span class="s2"&gt;in"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Install latest python&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;python 

&lt;span class="c"&gt;#check python version after install&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; python &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;install latest Java&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;jdk8

&lt;span class="c"&gt;#check Java version after install&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; java &lt;span class="nt"&gt;-version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Install Hyper ( Hyper is a good looking command-line tool similar to Command line or Powershell)&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install  &lt;/span&gt;hyper
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;install Wox ( Wox is a quick search and launch tool similar to Alfred on Mac )&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;wox
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Install node.js&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;nodejs.install

&lt;span class="c"&gt;#check version after install&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; node &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Install sticky notes&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;simple-sticky-notes
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Install VS code&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;choco &lt;span class="nb"&gt;install &lt;/span&gt;vscode.install

&lt;span class="c"&gt;#for specific version specify the version&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;vscode.install &lt;span class="nt"&gt;--version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1.40.0
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```bash
#VS-CODE Extensions

1. AutoComplete Tag - sporiley.css-auto-prefix
2. CSS-Auto-Prefix - sporiley.css-auto-prefix
3. Live Server - ritwickdey.liveserver
4. Material Icon Theme - pkief.material-icon-theme
5. Adrian Theme - adriantheme.adrian-theme
6. Bunch of Language Support Apps (For any Language you use)
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install SublimeText3&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;sublimetext3
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Firefox&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; choco &lt;span class="nb"&gt;install &lt;/span&gt;firefox

&lt;span class="c"&gt;#Also install some extensions for firefox&lt;/span&gt;

1. Privacy Badger
2. HTTPS everywhere
3. Ublock origin
4. Grammarly
5. Hotspot Shield
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#other-tools-i-use"&gt;
  &lt;/a&gt;
  Other Tools I use.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://devdocs.io/"&gt;DevDocs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://carbon.now.sh/"&gt;Carbon&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://replit.com/"&gt;The collaborative browser based IDE&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://devhints.io/"&gt;Devhints - TL;DR for developer documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://devhints.io/"&gt;Devhints - TL;DR for developer documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jdan.github.io/98.css/"&gt;98.css&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.ucraft.com/free-logo-maker"&gt;Free Logo Maker | Create Your Logo Online with Ucraft&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://getterms.io/"&gt;getterms.io&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.grammarly.com/"&gt;Write your best with Grammarly.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.notion.so/"&gt;Notion - The all-in-one workspace for your notes, tasks, wikis, and databases.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A better-looking version of this post available here 😁: &lt;a href="https://www.notion.so/hritikpawar/Coding-Setup-64e514417d3240ccb03e6480d6da72dc"&gt;https://www.notion.so/hritikpawar/Coding-Setup-64e514417d3240ccb03e6480d6da72dc&lt;/a&gt;&lt;/p&gt;

</description>
      <category>setup</category>
    </item>
    <item>
      <title>Setup Development Environment with Docker for Monorepo 🐳</title>
      <author>Tejas Nikhar</author>
      <pubDate>Sun, 18 Apr 2021 07:16:09 +0000</pubDate>
      <link>https://dev.to/tejastn10/setup-development-environment-with-docker-for-monorepo-3433</link>
      <guid>https://dev.to/tejastn10/setup-development-environment-with-docker-for-monorepo-3433</guid>
      <description>&lt;p&gt;Docker is a set of the platform as service products that use OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and bundle their own software, libraries, and configuration files; they can communicate with each other through well-defined channels.&lt;/p&gt;

&lt;p&gt;In version control systems, a monorepo is a software development strategy where code for many projects is stored in the same repository.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-set-up-a-development-environment"&gt;
  &lt;/a&gt;
  Why set up a Development Environment?
&lt;/h3&gt;

&lt;p&gt;While developing a Full-Stack app we come across many things which we have to configure and are necessary for building that application. Moreover, we might be working in a team or it may be an Open-Source Project which has many contributors. As we consider these things we can definitely see, the old excuse "It was working fine on my machine...". One can also implement the development setup on their portfolio projects to showcase that they can implement their knowledge about Docker and also familiarizing themselves with it.&lt;/p&gt;

&lt;p&gt;Most of us know that we want a fast development and build process to tackle this. We set up a development environment for our project using Docker to develop seamlessly without any OS-level errors.&lt;/p&gt;

&lt;p&gt;The practice here is one way you can implement Docker. There might be many ways that might suit your scenario, so try to research more and try implementing them with the trial and error method, and remember implementing them would definitely help in the long term.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-know-your-project"&gt;
  &lt;/a&gt;
  Step 1: Know your Project
&lt;/h3&gt;

&lt;p&gt;For the demo, we are using my own Project which consists of React frontend and Nodejs Backend.&lt;/p&gt;

&lt;p&gt;Link to repo →  &lt;a href="https://github.com/tejastn10/ShoeShoppee"&gt;https://github.com/tejastn10/ShoeShoppee&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-add-dev-dockerfiles-to-the-project"&gt;
  &lt;/a&gt;
  Step 2: Add dev Dockerfiles to the project
&lt;/h3&gt;

&lt;p&gt;💡 NOTE: If you're using Vs-Code it provides so much help in creating and managing Dockerfiles for your environment. I'll provide a link showcasing how you can utilize Vs-Code to its full abilities and add docker configuration for your platform. Vs-Code adds all that is required such as dockerignore files and even debug configuration if specified.&lt;/p&gt;

&lt;p&gt;Link to video → &lt;a href="https://www.youtube.com/watch?v=BfzpN6drbJc"&gt;Supercharge Your Docker Development with VS Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frontend Dockerfile&lt;/strong&gt;&lt;br&gt;
The frontend Dockerfile is located in the &lt;em&gt;frontend/web&lt;/em&gt;  folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:alpine&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; "/app"&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn global add typescript
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn global add less

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./package.json ./&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./yarn.lock ./&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;lessc &lt;span class="nt"&gt;--js&lt;/span&gt; ./src/styles/theme.less ./src/styles/theme.css

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "yarn", "start" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Backend Dockerfile&lt;/strong&gt;&lt;br&gt;
The backend Dockerfile is located in &lt;em&gt;backend&lt;/em&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:alpine&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; "/app"&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn global add typescript

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./package.json ./&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./yarn.lock ./&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "yarn", "server" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Nginx Dockerfile&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The nginx Dockerfile is located in &lt;em&gt;nginx&lt;/em&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; nginx&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./default.conf /etc/nginx/conf.d/default.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These files are named &lt;em&gt;Dockerfile.dev&lt;/em&gt; for specifying that these are for development purposes only.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-dev-dockercompose-file-to-the-project"&gt;
  &lt;/a&gt;
  Step 3: Add dev Docker-compose file to the project
&lt;/h3&gt;

&lt;p&gt;The root folder contains the compose file adding all the services specified in the respective Docker files. In my project, the development docker-compose file is &lt;em&gt;docker-compose.debug.yml&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.4"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;nginx&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dockerfile.dev&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./nginx&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;3000:80&lt;/span&gt;
  &lt;span class="na"&gt;backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dockerfile.dev&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./backend&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/app/node_modules&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./backend:/app&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;NODE_ENV=development&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;PORT=5000&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;JWT_SECRET=clocked&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;MONGO_URI&lt;/span&gt;
  &lt;span class="na"&gt;frontend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dockerfile.dev&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./frontend/web&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/app/node_modules&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/app/src/styles&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./frontend/web:/app&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;NODE_ENV=development&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;REACT_APP_DEVELOPMENT_API_ENDPOINT=/devURL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-starting-the-project-with-dockercompose-up"&gt;
  &lt;/a&gt;
  Step 4: Starting the project with docker-compose up
&lt;/h3&gt;

&lt;p&gt;Now all that remains is to build and run the compose file and voila your setup is complete.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose &lt;span class="nt"&gt;-f&lt;/span&gt; ./docker-compose.debug.yml up &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zwLMz5vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1vdnzlkk6nmcy53rr7j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zwLMz5vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1vdnzlkk6nmcy53rr7j.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This article assumes prior knowledge about Docker, not much but familiarity with the tech is sufficient. Do tell me how you would implement yours and also provide me where I can improve my configuration.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>react</category>
      <category>docker</category>
      <category>node</category>
    </item>
    <item>
      <title>Building A CRUD Application Using Node JS And MongoDB Atlas</title>
      <author>Altaf Shaikh</author>
      <pubDate>Sun, 18 Apr 2021 06:41:01 +0000</pubDate>
      <link>https://dev.to/ialtafshaikh/building-a-crud-application-using-node-js-and-mongodb-atlas-2df5</link>
      <guid>https://dev.to/ialtafshaikh/building-a-crud-application-using-node-js-and-mongodb-atlas-2df5</guid>
      <description>&lt;p&gt;Hello Folks!!&lt;/p&gt;

&lt;p&gt;In this article, we will learn how we can use &lt;code&gt;MongoDB&lt;/code&gt; database in &lt;code&gt;Node JS&lt;/code&gt; using &lt;code&gt;Mogoose&lt;/code&gt; library, which is a very popular library widely used in the Industries.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this article we had used the &lt;code&gt;MongoDB Cloud&lt;/code&gt; service called &lt;a href="https://www.mongodb.com/cloud"&gt;MongoDB Atlas&lt;/a&gt;, you can also use the MongoDB server running &lt;code&gt;locally&lt;/code&gt;, the process remains the same.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-mongoose"&gt;
  &lt;/a&gt;
  What is Mongoose?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mongoosejs.com"&gt;Mongoose&lt;/a&gt; is an &lt;code&gt;Object Data Modeling (ODM)&lt;/code&gt; library for MongoDB and Node.js. It manages relationships between data, provides schema validation, and is used to translate between &lt;code&gt;objects in code&lt;/code&gt; and the representation of those &lt;code&gt;objects in MongoDB&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GMG8MnCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/_aGYeBYNDs0M62mntcMkPM8noSGEEkWnGLbeKXSQH5F8aaySZ7EtY-EctZ3l7b315KnpCPs9_5eCf-MZ4w4pVz0p3jm6Ban9YI_i1tntnqO9mdUtjfE6UyweGEOSBBTzkJVK0RYc" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GMG8MnCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/_aGYeBYNDs0M62mntcMkPM8noSGEEkWnGLbeKXSQH5F8aaySZ7EtY-EctZ3l7b315KnpCPs9_5eCf-MZ4w4pVz0p3jm6Ban9YI_i1tntnqO9mdUtjfE6UyweGEOSBBTzkJVK0RYc" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mongodb-vs-sql"&gt;
  &lt;/a&gt;
  MongoDb VS SQL
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MongoDB&lt;/code&gt; is a schema-less NoSQL document database. It means you can store &lt;code&gt;JSON&lt;/code&gt; documents in it, and the structure of these documents can vary as it is not enforced like SQL databases. This is one of the advantages of using NoSQL as it speeds up application development and reduces the complexity of deployments.&lt;/p&gt;

&lt;p&gt;Below is an example of how data is stored in &lt;code&gt;Mongo&lt;/code&gt; vs. &lt;code&gt;SQL&lt;/code&gt; Database:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XIQBKiUK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/4_IaG34XUPlh3Wn3m3AhGQpjAW3Qj6Gfr22t1pq704bkF9gkzRfCx_VMqwusMSNns18TaGprLPMe6Gu9XZqS1_HofdA2gsGsxeQD2KyzyAEM2bB4xSs1ZhyooRl5H0i4oavISbsA" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIQBKiUK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/4_IaG34XUPlh3Wn3m3AhGQpjAW3Qj6Gfr22t1pq704bkF9gkzRfCx_VMqwusMSNns18TaGprLPMe6Gu9XZqS1_HofdA2gsGsxeQD2KyzyAEM2bB4xSs1ZhyooRl5H0i4oavISbsA" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QdQiZ3Io--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/9-NNCrtrxHnrKbZN-ovu0tg034CJWuEI7eeuZ5XFgZQzSltwwYqFV4zupkQ8DRpvBERH0n-UYSuZLLdt7_mhtB488uNjgU5xV__qyMzwnuYzOsTcQQpSLgSi0nwcdIRmKTvZ9jfi" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QdQiZ3Io--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/9-NNCrtrxHnrKbZN-ovu0tg034CJWuEI7eeuZ5XFgZQzSltwwYqFV4zupkQ8DRpvBERH0n-UYSuZLLdt7_mhtB488uNjgU5xV__qyMzwnuYzOsTcQQpSLgSi0nwcdIRmKTvZ9jfi" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mongoose has great &lt;code&gt;documentation&lt;/code&gt;, checkout the docs &lt;a href="https://mongoosejs.com/docs/"&gt;here&lt;/a&gt; to learn more about Mongoose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mongoose-terminologies"&gt;
  &lt;/a&gt;
  Mongoose Terminologies
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#collections"&gt;
  &lt;/a&gt;
  Collections
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;'Collections'&lt;/code&gt; in Mongo are equivalent to tables in relational databases. They can hold multiple JSON documents.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documents"&gt;
  &lt;/a&gt;
  Documents
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;'Documents'&lt;/code&gt; are equivalent to records or rows of data in SQL. While a SQL row can reference data in other tables, Mongo documents usually combine that in a document.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fields"&gt;
  &lt;/a&gt;
  Fields
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;'Fields'&lt;/code&gt; or attributes are similar to columns in a SQL table.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#schema"&gt;
  &lt;/a&gt;
  Schema
&lt;/h2&gt;

&lt;p&gt;While Mongo is schema-less, SQL defines a schema via the table definition. A Mongoose &lt;code&gt;'schema'&lt;/code&gt; is a document data structure (or shape of the document) that is enforced via the application layer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#models"&gt;
  &lt;/a&gt;
  Models
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;'Models'&lt;/code&gt; are higher-order constructors that take a schema and create an instance of a document equivalent to records in a relational database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%80%8Bmongoose-in-action"&gt;
  &lt;/a&gt;
  ​Mongoose In Action
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#referencing"&gt;
  &lt;/a&gt;
  Referencing
&lt;/h3&gt;

&lt;p&gt;So now, we will see a subtle difference between Mongoose &lt;code&gt;Schema&lt;/code&gt; and &lt;code&gt;Model&lt;/code&gt;, after that we will start working with mongoose and we will proceed further step by step explain each concept.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mongoose-schema-vs-model"&gt;
  &lt;/a&gt;
  Mongoose Schema vs. Model
&lt;/h3&gt;

&lt;p&gt;A Mongoose &lt;code&gt;model&lt;/code&gt; is a wrapper on the Mongoose &lt;code&gt;schema&lt;/code&gt;. A Mongoose schema defines the structure of the document, default values, validators, etc., whereas a Mongoose model provides an interface to the database for creating, querying, updating, deleting records, etc.&lt;/p&gt;

&lt;p&gt;Don't Jump for coding right now, have some &lt;code&gt;patience&lt;/code&gt; and for now just read the sections, in further section we will create and setup the project step by step : )&lt;/p&gt;

&lt;p&gt;Creating a Mongoose model comprises primarily of &lt;code&gt;three&lt;/code&gt; parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Referencing Mongoose&lt;/li&gt;
&lt;li&gt;Defining the Schema&lt;/li&gt;
&lt;li&gt;Exporting a Model&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-referencing-mongoose"&gt;
  &lt;/a&gt;
  1. Referencing Mongoose
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require('mongoose')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;reference&lt;/code&gt; will be the same as the one that was returned when we connected to the database, which means the schema and model definitions will not need to explicitly connect to the database, we will see &lt;code&gt;database connection&lt;/code&gt; in the further section.&lt;/p&gt;

&lt;p&gt;now, lets create a &lt;code&gt;reference&lt;/code&gt; to Schema class from mongoose:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Schema = mongoose.Schema;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's move on to create our very own &lt;code&gt;Schema&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-defining-the-schema"&gt;
  &lt;/a&gt;
  2.  Defining the Schema
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const todoSchema = new Schema(
  {
    description: {
      type: String,
      required: true,
    },
  },
);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here we have created an instance of Schema and named it &lt;code&gt;todoSchema&lt;/code&gt;. The Schema takes object as a parameter, so we had passed an object and inside that we have a key called &lt;code&gt;description&lt;/code&gt; and its value is again an object in which we had specified we need a field description of type "&lt;code&gt;String&lt;/code&gt;", this type is in-built with mongoose you can refer more on official &lt;a href="https://mongoosejs.com/docs/schematypes.html"&gt;docs&lt;/a&gt; and also it is a required field so we had defined this with the key &lt;code&gt;required&lt;/code&gt; and with a &lt;code&gt;boolean&lt;/code&gt; value of true.&lt;/p&gt;

&lt;p&gt;Lets add more field into the schema,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const todoSchema = new Schema(
  {
    description: {
      type: String,
      required: true,
    },
    completed: {
      type: Boolean,
      default: false,
    },
  },
  {
    timestamps: true,
  }
);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So similarly we had define a field called &lt;code&gt;completed&lt;/code&gt; and it is of type Boolean and it hold a default value false.&lt;/p&gt;

&lt;p&gt;And if you carefully looked at the structure we had passed a second parameter which is an object with a key &lt;code&gt;timestamps&lt;/code&gt; so this second parameter is a configuration object in which we had only used an inbuilt feature of mongoose which adds to additional fields to every documents namely &lt;code&gt;createdAt&lt;/code&gt; and &lt;code&gt;updatedAt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following &lt;code&gt;Schema Types&lt;/code&gt; are permitted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Array&lt;/li&gt;
&lt;li&gt;  Boolean&lt;/li&gt;
&lt;li&gt;  Buffer&lt;/li&gt;
&lt;li&gt;  Date&lt;/li&gt;
&lt;li&gt;  Mixed (A generic / flexible data type)&lt;/li&gt;
&lt;li&gt;  Number&lt;/li&gt;
&lt;li&gt;  ObjectId&lt;/li&gt;
&lt;li&gt;  String&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-exporting-a-model"&gt;
  &lt;/a&gt;
  3. Exporting a Model
&lt;/h3&gt;

&lt;p&gt;Finally, let's create the model using the &lt;code&gt;Schema&lt;/code&gt; we had created and Export the model to use it in other modules where we need to interact with the database.&lt;/p&gt;

&lt;p&gt;​We need to call the &lt;code&gt;model constructor&lt;/code&gt; on the Mongoose instance and pass it the name of the collection and a &lt;code&gt;reference&lt;/code&gt; to the schema definition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var Todos = mongoose.model("Todo", todoSchema);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now finally let's export this model so that we can use this model throughout the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = Todos;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we understand how we can define a &lt;code&gt;schema&lt;/code&gt; and using schema how we can make our &lt;code&gt;model&lt;/code&gt;. So this was the major part of the Mongoose model creation and now we have to make use of this model.&lt;/p&gt;

&lt;p&gt;Next, we will see how to &lt;code&gt;setup the project&lt;/code&gt; and start writing some &lt;code&gt;code&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-application"&gt;
  &lt;/a&gt;
  Creating an Application
&lt;/h2&gt;

&lt;p&gt;​So let's create a project folder &lt;code&gt;node-mongoose&lt;/code&gt; and inside your project folder create a folder called &lt;code&gt;models&lt;/code&gt; and inside that create a file called &lt;code&gt;todos.js&lt;/code&gt; and paste below code into it and your &lt;code&gt;todos.js&lt;/code&gt; model file should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// models/todos.js

const mongoose = require("mongoose");
const Schema = mongoose.Schema;

const todoSchema = new Schema(
  {
    description: {
      type: String,
      required: [true, "please enter task details"],
    },
    completed: {
      type: Boolean,
      default: false,
    },
  },
  {
    timestamps: true,
  }
);

var Todos = mongoose.model("Todo", todoSchema);

module.exports = Todos;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Previously we had implemented this model, if you haven't followed that checkout the &lt;code&gt;Referencing Mongoose Section above&lt;/code&gt;, then you are good to continue this section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#folder-structure"&gt;
  &lt;/a&gt;
  Folder Structure:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node-mongoose
  - models
     - todos.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, open a terminal in &lt;code&gt;node-mongoose&lt;/code&gt; i.e root folder of your project and follow below steps:-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;code&gt;npm init -y&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; Create a file called &lt;code&gt;app.js&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; Install express using &lt;code&gt;npm install express&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; Install mongoose using &lt;code&gt;npm install mongoose&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; Install dotenv using &lt;code&gt;npm install dotenv&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; Create a file called &lt;code&gt;app.js&lt;/code&gt; in root folder of your project&lt;/li&gt;
&lt;li&gt; Now follow the steps in this blog and get the &lt;code&gt;database url&lt;/code&gt; which will look like this :
&lt;code&gt;mongodb+srv://sample_user:&amp;lt;password&amp;gt;@my-sample-cluster-b3ugy.mongodb.net/&amp;lt;dbname&amp;gt;?retryWrites=true&amp;amp;w=majority&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; Create a &lt;code&gt;.env&lt;/code&gt; file in the root folder&lt;/li&gt;
&lt;li&gt; Add this line in the .env file with your password and database name 
&lt;code&gt;DATABASE_URL=mongodb+srv://sample_user:&amp;lt;password&amp;gt;@my-sample-cluster-b3ugy.mongodb.net/&amp;lt;dbname&amp;gt;?retryWrites=true&amp;amp;w=majority&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Also to ensure your database connection should not visible to other if you are storing your code on a service like Github. Create a &lt;code&gt;.gitignore&lt;/code&gt; file and enter the file name &lt;code&gt;.env&lt;/code&gt; inside it. So git will not keep track of this file.&lt;/li&gt;
&lt;li&gt;Also add one more variable on new line inside &lt;code&gt;.env&lt;/code&gt; file called &lt;code&gt;PORT=3000&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your &lt;code&gt;.env&lt;/code&gt; file should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DATABASE_URL=mongodb+srv://sample_user:&amp;lt;password&amp;gt;@my-sample-cluster-b3ugy.mongodb.net/&amp;lt;dbname&amp;gt;?retryWrites=true&amp;amp;w=majority
PORT=3000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your &lt;code&gt;.gitignore&lt;/code&gt; file should look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
.env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, lets import the packages we have install into the &lt;code&gt;app.js&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");
const mongoose = require("mongoose");
const dotenv = require("dotenv");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, lets load the environment variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotenv.config({ path: ".env" });
const PORT = process.env.PORT;
const dbURI = process.env.DATABASE_URL;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets import the model &lt;code&gt;todos&lt;/code&gt; we have created inside the &lt;code&gt;models/&lt;/code&gt; folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//model
const Tasks = require("./models/todos");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now , lets create a &lt;code&gt;database connection&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const connect = mongoose.connect(dbURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

connect.then(
  (db) =&amp;gt; {
    console.log("Connected Successfully to Mongodb Server");

  },
  (err) =&amp;gt; {
    console.log(err);
  }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets initialize the &lt;code&gt;express app&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = express();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets add a &lt;code&gt;middleware&lt;/code&gt; which converts the request body into json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use(express.json());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally lets create a listener to accept incoming HTTP request on specific port:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.listen(PORT, () =&amp;gt; {
  console.log(`Server is running at http://localhost:${PORT}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your Final &lt;code&gt;app.js&lt;/code&gt; should look like this:&lt;br&gt;
&lt;br&gt;
 &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");
const mongoose = require("mongoose");
const dotenv = require("dotenv");

dotenv.config({ path: ".env" });
const PORT = process.env.PORT;
const dbURI = process.env.DATABASE_URL;

//model
const Tasks = require("./models/todos");

const connect = mongoose.connect(dbURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

connect.then(
  (db) =&amp;gt; {
    console.log("Connected Successfully to Mongodb Server");

  },
  (err) =&amp;gt; {
    console.log(err);
  }
);

const app = express();

app.use(express.json());

app.listen(PORT, () =&amp;gt; {
  console.log(`Server is running at http://localhost:${PORT}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we are good to go with basic &lt;code&gt;CRUD&lt;/code&gt; operations.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#mongoose-crud-operations"&gt;
  &lt;/a&gt;
  Mongoose CRUD Operations
&lt;/h2&gt;

&lt;p&gt;Mongoose has a flexible &lt;code&gt;API&lt;/code&gt; and provides many ways to accomplish a task. We will not focus on the variations because that is out of scope for this article, but remember that most of the operations can be done in more than one way either syntactically or via the application architecture.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-record"&gt;
  &lt;/a&gt;
  Create Record
&lt;/h2&gt;

&lt;p&gt;Let's &lt;code&gt;create&lt;/code&gt; a todo and &lt;code&gt;save&lt;/code&gt; into our database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let newTask = {
      description: "task added using create",
};

Tasks.create(newTask)
  .then((data) =&amp;gt; {
      console.log(data);
   })
   .catch((err) =&amp;gt; {
      console.log(err);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Firstly we had created a &lt;code&gt;newTask&lt;/code&gt; object with description of a todo which is a mandatory field required to create a document in the database. Mongoose model has a &lt;code&gt;create()&lt;/code&gt; method which is a &lt;code&gt;promise&lt;/code&gt; and on successful we get the response in data and in-case of failure it is catched and error is  displayed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-all-tasks"&gt;
  &lt;/a&gt;
  Find All Tasks
&lt;/h2&gt;

&lt;p&gt;To &lt;code&gt;get&lt;/code&gt; all the documents stored inside a collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//all tasks

Tasks.find({})
   .then((data) =&amp;gt; {
       console.log("All tasks", data);
    })
    .catch((err) =&amp;gt; {
       console.log(err);
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#find-a-single-document-or-record"&gt;
  &lt;/a&gt;
  Find A Single Document or Record
&lt;/h2&gt;

&lt;p&gt;Let's see how we can find a &lt;code&gt;single&lt;/code&gt; document from the collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; //find with condition

  Tasks.find({ completed: false })
    .then((data) =&amp;gt; {
         console.log("All tasks", data);
     })
     .catch((err) =&amp;gt; {
         console.log(err);
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#update-a-document"&gt;
  &lt;/a&gt;
  Update a Document
&lt;/h2&gt;

&lt;p&gt;Let's modify the record by &lt;code&gt;updating&lt;/code&gt; the &lt;strong&gt;status&lt;/strong&gt; &lt;code&gt;completed:false&lt;/code&gt; to &lt;code&gt;completed:true&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Tasks.findByIdAndUpdate({ _id: req.params.id },{
            $set: {completed:true},
          },
          { new: true, useFindAndModify: false } //get updated result
       )
       .then((data) =&amp;gt; {
         console.log("Updated todo data", data);
       })
       .catch((err) =&amp;gt; {
         console.log(err);
       });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#delete-a-document-from-the-collection"&gt;
  &lt;/a&gt;
  Delete a document from the collection
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; //delete all tasks
     Tasks.remove({});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// delete specific task

    Tasks.findByIdAndRemove(task_id)
       .then((data) =&amp;gt; {
         console.log("All tasks", data);
       })
       .catch((err) =&amp;gt; {
         console.log(err);
       });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example replace the &lt;code&gt;task_id&lt;/code&gt; with the value of &lt;code&gt;_id&lt;/code&gt; of a task in mongoDB databse which looks like &lt;code&gt;5a78fe3e2f44ba8f85a2409a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So we have seen all  the &lt;code&gt;CRUD&lt;/code&gt; operations namely, &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's use them in our &lt;code&gt;app.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");
const mongoose = require("mongoose");
const dotenv = require("dotenv");

dotenv.config({ path: ".env" });
const PORT = process.env.PORT;
const dbURI = process.env.DATABASE_URL;

//model
const Tasks = require("./models/todos");

const connect = mongoose.connect(dbURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

connect.then(
  (db) =&amp;gt; {
    console.log("Connected Successfully to Mongodb Server");

    //all tasks
    Tasks.find({})
      .then((data) =&amp;gt; {
        console.log("All tasks", data);
      })
      .catch((err) =&amp;gt; {
        console.log(err);
      });

    // similary use all the other operation here

    // CAUTION: don't put all the operation together, use one operation
    // at a time
  },
  (err) =&amp;gt; {
    console.log(err);
  }
);

const app = express();

app.use(express.json());

app.listen(PORT, () =&amp;gt; {
  console.log(`Server is running at http://localhost:${PORT}`);
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, run your &lt;code&gt;server&lt;/code&gt; by using the following command:&lt;/p&gt;

&lt;p&gt;first install,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nodemon app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Congratulations !!&lt;/code&gt; We had learned the &lt;code&gt;fundamentals&lt;/code&gt; of Mongoose and How we can use it in Node JS.&lt;/p&gt;

&lt;p&gt;I hope this article &lt;code&gt;helped&lt;/code&gt; you to understand the core idea : ) Do give a &lt;code&gt;like&lt;/code&gt; to this article to &lt;code&gt;motivate&lt;/code&gt; me to write more : D&lt;br&gt;
​&lt;/p&gt;

</description>
      <category>node</category>
      <category>mongodb</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Easy Lazy Loading with React &amp; Intersection Observer API</title>
      <author>AnxinYang</author>
      <pubDate>Sun, 18 Apr 2021 06:26:40 +0000</pubDate>
      <link>https://dev.to/anxinyang/easy-lazy-loading-with-react-intersection-observer-api-1dll</link>
      <guid>https://dev.to/anxinyang/easy-lazy-loading-with-react-intersection-observer-api-1dll</guid>
      <description>&lt;p&gt;In this article, I'll write a React hook and a React component that will help you achieve lazy loading in ReactJS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-intersection-observer-api"&gt;
  &lt;/a&gt;
  What is Intersection Observer API?
&lt;/h2&gt;

&lt;p&gt;Basically, Intersection Observer will monitor elements and check if they're intersect with the viewport of an document or, most of time, the browser viewport.&lt;/p&gt;

&lt;p&gt;For more information, please refer to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;MDN docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-react-hook"&gt;
  &lt;/a&gt;
  Create the React hook
&lt;/h2&gt;

&lt;p&gt;First, let's start with an empty hook like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can add a state that will tell us if the component is intersecting and return that state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we need a ref that can hold the observer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we need a target element for the observer, let's add a parameter and state to the hook function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MutableRefObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can create a observer to observe the Element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MutableRefObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;ob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And don't forget to disconnect the observer once the component is unmounted or the target element is changed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MutableRefObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cleanOb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;ob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we want to be able to configure the observer, so let's add the options to the hook function as a parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MutableRefObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserverInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cleanOb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;ob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more information about the options, please refer to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;MDN docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last, since we usually don't want to remove the content we've rendered, let's add a parameter that allow us to choice if we want the observer to be disconnected after the target element is intersected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MutableRefObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserverInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cleanOb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;forward&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;setIsIntersecting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isElementIntersecting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;ob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;


    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-lazy-loading-component"&gt;
  &lt;/a&gt;
  Create a Lazy Loading Component
&lt;/h2&gt;

&lt;p&gt;Once we have the hook we need, it's very simple to create a lazy loading componentwith it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;LazyLoadProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;ComponentType&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IntrinsicElements&lt;/span&gt;
    &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReactNode&lt;/span&gt;
    &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;CSSProperties&lt;/span&gt;
    &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="nx"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="nx"&gt;rootMargin&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;LazyLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LazyLoadProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isIntersecting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useIntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;rootMargin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rootMargin&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Tag&lt;/span&gt;
            &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, here we go. &lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Please let me know if there is any issue I made.&lt;/p&gt;

&lt;p&gt;The hook and the Lazyload component are included in my npm package &lt;a href="https://www.npmjs.com/package/ax-react-lib"&gt;ax-react-lib&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>hooks</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
