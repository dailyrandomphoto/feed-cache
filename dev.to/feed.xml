<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Singleton Pattern</title>
      <author>Eyuel Berga Woldemichael</author>
      <pubDate>Tue, 14 Dec 2021 18:33:11 +0000</pubDate>
      <link>https://dev.to/eyuelberga/singleton-pattern-3cj3</link>
      <guid>https://dev.to/eyuelberga/singleton-pattern-3cj3</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Singleton pattern allows creation of only a single instance from a class&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;Consider a case where your application needs to access a shared resource from different places at various times. And also keep a consistent state between each access.&lt;/p&gt;

&lt;p&gt;The Singleton pattern solves this problem by creating a class that is responsible for creating and insuring only a single instance is created, while allowing direct access to the instantiated object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applicability"&gt;
  &lt;/a&gt;
  Applicability
&lt;/h2&gt;

&lt;p&gt;The Singleton pattern can be used in cases where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The class have exactly one accessible instance&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JY-mvj-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jd7ve17stwg8eak3919.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JY-mvj-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jd7ve17stwg8eak3919.png" alt="Singleton pattern class diagram" width="205" height="127"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#participants"&gt;
  &lt;/a&gt;
  Participants
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Singleton:&lt;/strong&gt; defines an Instance operation that lets clients access its unique instance&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#collaborations"&gt;
  &lt;/a&gt;
  Collaborations
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Clients access a Singleton instance only through the &lt;code&gt;getInstance&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Can be sure of the number of instances&lt;/li&gt;
&lt;li&gt;Can globally access instance &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Violates single responsibility principle. It is responsible for making sure that one instance is being created and also provide the core functionalities of the object itself.&lt;/li&gt;
&lt;li&gt;It is hard to unit test because global states are hard to isolate.&lt;/li&gt;
&lt;li&gt;Causes an object to be globally mutable which may not be desired in some cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;Singletons can be implemented in numerous ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Eager initialization:&lt;/strong&gt; Object of class is created when it is loaded to the memory&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lazy initialization:&lt;/strong&gt; In this method, object is created only if it is needed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Thread Safe Singleton:&lt;/strong&gt; A thread safe singleton in created so that singleton property is maintained even in multi-threaded environment.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The money received by customers of the cafe is stored in a cash register. It is important that there is only one cash register per cafe, so that the income of the cafe is accurately known.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To solve this problem, we implement &lt;code&gt;CashRegister&lt;/code&gt; as a singleton. we make the constructor private so nobody can instantiate the class. And we implement a method &lt;code&gt;getInstance&lt;/code&gt; to be called by user to obtain instance of the class.&lt;/p&gt;


&lt;div class="ltag__replit"&gt;
  &lt;iframe height="550px" src="https://repl.it/@eyuelberga/Singleton-Pattern?lite=true"&gt;&lt;/iframe&gt;
&lt;/div&gt;


</description>
      <category>beginners</category>
      <category>java</category>
      <category>codenewbie</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>How to build a football live scores notification app with Python?</title>
      <author>Mihai Blebea</author>
      <pubDate>Tue, 14 Dec 2021 18:32:09 +0000</pubDate>
      <link>https://dev.to/mihaidev/how-to-build-a-football-live-scores-notification-app-with-python-4750</link>
      <guid>https://dev.to/mihaidev/how-to-build-a-football-live-scores-notification-app-with-python-4750</guid>
      <description>&lt;p&gt;If you are like me, you must spend a lot of time coding...&lt;/p&gt;

&lt;p&gt;I would like to spend more time watching sports or going outside to play football. But we are developers and that keeps us busy during the weekends.&lt;/p&gt;

&lt;p&gt;But you don't have to choose one or the other. Now you can enjoy both of them.&lt;/p&gt;

&lt;p&gt;In this article, I will show you the steps necessary to build a real-time football score notification app.&lt;/p&gt;

&lt;p&gt;This will most likely work better on Linux OS, but you can easily adapt this for Windows or macOS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-biggest-problem-we-will-have-to-overcome"&gt;
  &lt;/a&gt;
  What is the biggest problem we will have to overcome?
&lt;/h2&gt;

&lt;p&gt;To be completely honest with you, this is not my first stab at building this, but I always found myself stuck when I tried to get the real-time football scores.&lt;/p&gt;

&lt;p&gt;We have a couple of options to overcome this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;scrape the live scores from Google&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;follow a Twitter stream and get the scores in real-time&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;use a &lt;a href="https://bit.ly/3DYWFbs"&gt;FREE API&lt;/a&gt; that provides us the scores without any fuss&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hmmm, hard decisions... but let's go with the last option as it's the most convenient and easy to implement.&lt;/p&gt;

&lt;p&gt;Why would we spend weeks trying to build a scraper? Or deal with the Google algorithm built to block us from scraping the results.&lt;/p&gt;

&lt;p&gt;To solve this issue, just use this FREE API that I found on RapidAPI called &lt;a href="https://bit.ly/3DYWFbs"&gt;Football Live Score&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All you need to do is just &lt;a href="https://bit.ly/3DYWFbs"&gt;create a FREE account&lt;/a&gt; and they will provide you with a token that you can use to access any API on their platform.&lt;/p&gt;

&lt;p&gt;The Football Live Score API provides three endpoints at the moment, but if you read this in the "future" you may see more as this is a well-supported community.&lt;/p&gt;

&lt;p&gt;They currently support:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GET &lt;code&gt;/matches&lt;/code&gt; which provides a list of matches for the day with live updates just keep in mind you will receive matches that are not in progress&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GET &lt;code&gt;/matches/updates&lt;/code&gt; contains the same games but they are filtered by latest updates. We are going to use this one as it provides only the matches that changed scores from the last query, so we don't need to handle that complexity or store the matches on our side&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GET &lt;code&gt;/leagues&lt;/code&gt; provides the matches for today but sorted by league&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The platform in itself is very good as it allows you to test the API right on their website before including it in your application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3DYWFbs"&gt;Check it out here!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-programming-language-will-we-use"&gt;
  &lt;/a&gt;
  What programming language will we use?
&lt;/h2&gt;

&lt;p&gt;My first choice would be Golang, but recently I've spent a lot of time playing around with Python and... WOW... it just works.&lt;/p&gt;

&lt;p&gt;There are so many good libraries in Python that make it the best choice for a quick project like our football live scores notifier.&lt;/p&gt;

&lt;p&gt;We should start by checking your local Python version, so just run this command in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;--version&lt;/span&gt;

// Mine returns Python 3.10.0 and that is good &lt;span class="k"&gt;for &lt;/span&gt;now
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your's have an older version, it would be better to update your Python to at least 3.9.0.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-project-structure"&gt;
  &lt;/a&gt;
  Create the project structure
&lt;/h2&gt;

&lt;p&gt;Let's start by creating our folder structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;|-- football_updates
    |-- execute.sh
    |-- src
        |-- poll.py
        |-- installer.py
        |-- notify.py
        |-- last_update.py
    |-- assets
        |-- alarm.wav
        |-- icon.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is all that we need for now.&lt;/p&gt;

&lt;p&gt;Let's get our hands dirty and start coding it.&lt;/p&gt;

&lt;p&gt;To make sure we have all our dependencies for our project and not pollute the global scope, we will need to create a virtual environment for our script.&lt;/p&gt;

&lt;p&gt;Navigate inside your main foot folder (in my case it's &lt;code&gt;/football_updates&lt;/code&gt;) and run this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a virtual env in a folder called &lt;code&gt;virtualenv&lt;/code&gt;. Of course, you can change this by providing a different last param to the command above.&lt;/p&gt;

&lt;p&gt;Now let's install our dependencies.&lt;/p&gt;

&lt;p&gt;We will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;crontab // for interacting with crontab and making our lives a bit easier when installing the script&lt;/li&gt;
&lt;li&gt;notifypy // for triggering linux notifications&lt;/li&gt;
&lt;li&gt;requests&lt;/li&gt;
&lt;li&gt;python-dotenv // for managing the envs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install all these just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ./virtualenv/bin/activate &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./virtualenv/bin/pip3 &lt;span class="nb"&gt;install &lt;/span&gt;crontab notifypy requests python-dotenv &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; deactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool, now we should be all set to start building our script.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-notifications-script"&gt;
  &lt;/a&gt;
  Create the notifications script
&lt;/h2&gt;

&lt;p&gt;This will mostly work for Linux and the Gnome distribution but there are some other options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;send a notification on Telegram&lt;/li&gt;
&lt;li&gt;post an update on Twitter&lt;/li&gt;
&lt;li&gt;send an email or SMS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For simplicity, I will trigger the updates as a desktop notification.&lt;/p&gt;

&lt;p&gt;Navigate to the &lt;code&gt;/src&lt;/code&gt; folder and create a file called &lt;code&gt;notify.py&lt;/code&gt; that should look like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;./src/notify.py&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;notifypy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Notify&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt;

&lt;span class="c1"&gt;# Get the base path to our folder so we can trigger this from the crontab without path conflicts
&lt;/span&gt;&lt;span class="n"&gt;FOLDER_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Lock down the path to our static resources
&lt;/span&gt;&lt;span class="n"&gt;AUDIO_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FOLDER_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/../assets/alarm.wav"&lt;/span&gt;
&lt;span class="n"&gt;ICON_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FOLDER_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/../assets/icon.png"&lt;/span&gt;

&lt;span class="c1"&gt;# Main method for our script
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;notification&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
    &lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;
    &lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;application_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Football updates"&lt;/span&gt; &lt;span class="c1"&gt;# Change this to suit your needs
&lt;/span&gt;    &lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AUDIO_FILE&lt;/span&gt;
    &lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ICON_FILE&lt;/span&gt;
    &lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Add this to be able to trigger this as an executable script. Mainly for testing
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"demo title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"demo body"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oki, now it's time to test this.&lt;/p&gt;

&lt;p&gt;You can simply run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 ./src/notify.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But you would get an error complaining that the notifypy module cannot be found in our dependencies. We were so close...&lt;/p&gt;

&lt;p&gt;But don't worry, this is expected.&lt;/p&gt;

&lt;p&gt;The issue is that we are trying to call our script using the default local python interpreter. But it doesn't know about our virtual environment dependencies and modules.&lt;/p&gt;

&lt;p&gt;To make this work, we need to use the interpreter from the virtual env.&lt;/p&gt;

&lt;p&gt;Let's create a simple &lt;code&gt;execute.sh&lt;/code&gt; script in our root folder that will allow us to call any script with the virtual env interpreter.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;./execute.sh&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PYTHONDONTWRITEBYTECODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="c"&gt;# Add this to not create a __pycache__ folder&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="c"&gt;# Add our path to the PYTHONPATH, you can skip this&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;"./virtualenv/bin/python3 src/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.py &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;:2&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the path we are using to call our Python interpreter &lt;code&gt;./virtualenv/bin/python3&lt;/code&gt;. This is the one from the virtual env.&lt;/p&gt;

&lt;p&gt;Next, we pass our file and the rest of the terminal arguments but omit the name of the file.&lt;/p&gt;

&lt;p&gt;To test our notify script, we need to make our &lt;code&gt;execute.sh&lt;/code&gt; script executable by doing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x ./execute.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run this and get a demo notification:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./execute.sh notify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you get the notification? You should now see the popup.&lt;/p&gt;

&lt;p&gt;Don't forget to add the &lt;code&gt;./assets/alarm.wav&lt;/code&gt; and &lt;code&gt;./assets/icon.png&lt;/code&gt; to make it look and sound like a real notification.&lt;/p&gt;

&lt;p&gt;This step is completed, so let's move to the next one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#store-the-last-request-timestamp"&gt;
  &lt;/a&gt;
  Store the last request timestamp
&lt;/h2&gt;

&lt;p&gt;If we use the default endpoint &lt;code&gt;/matches&lt;/code&gt;, this will return all the live scores in real-time.&lt;/p&gt;

&lt;p&gt;But we won't know which one was updated from our last request. If you build a website where the live scores are displayed, this will not be an issue. &lt;/p&gt;

&lt;p&gt;But for this project, we just want to get the matches that changed between our requests.&lt;/p&gt;

&lt;p&gt;To do this, we will call &lt;code&gt;/matches/updates&lt;/code&gt; and will provide the &lt;code&gt;last_update&lt;/code&gt; query param that contains the timestamp of the last request.&lt;/p&gt;

&lt;p&gt;Navigate in the &lt;code&gt;src&lt;/code&gt; folder and create the &lt;code&gt;/last_update.py&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;./src/last_update.py&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;

&lt;span class="n"&gt;FOLDER_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;FILE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FOLDER_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/../last_update.txt"&lt;/span&gt; &lt;span class="c1"&gt;# this is the path to the temp file
&lt;/span&gt;
&lt;span class="c1"&gt;# This stores the last update, if none is provided, it will just use the current timestamp
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;store_last_update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_update&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_update&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;last_update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_current_timestamp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FILE_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_update&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# This will return the last update as a string from the file
# If the file does not exist, it will just return the current timestamp
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_last_update&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FILE_PATH&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;is_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_current_timestamp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FILE_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Just an utility function to return the current timestamp in the same format everytime
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_current_timestamp&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-the-brains-of-the-script"&gt;
  &lt;/a&gt;
  Creating the brains of the script
&lt;/h2&gt;

&lt;p&gt;It's time to get down to business and write the brains of our script.&lt;/p&gt;

&lt;p&gt;Just create a &lt;code&gt;./src/poll.py&lt;/code&gt; file and add this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;./src/poll.py&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;notify&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;trigger&lt;/span&gt; &lt;span class="c1"&gt;# Notice this is our module, not the notifypy
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dotenv_values&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;last_update&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_last_update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store_last_update&lt;/span&gt;

&lt;span class="c1"&gt;# Base url of our RapidAPI
&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://football-live-scores3.p.rapidapi.com"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Get all the match updates from the API, loop over them and call the send_notification function on each
&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;send_notification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;match_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_matches&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="c1"&gt;# Add your RapidAPI key to the headers
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"x-rapidapi-host"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"football-live-scores3.p.rapidapi.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"x-rapidapi-key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;YOUR_RAPIDAPI_KEY&amp;gt;"&lt;/span&gt; &lt;span class="c1"&gt;# add your private token that you receive form RapidAPI
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Get all the matches updates and deal with the status codes
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_matches&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;last_update_ts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_last_update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/matches/updates?last_update=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;last_update_ts&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_headers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_auth&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Made request to url &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"last_update_timestamp"&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# if the key is not in the response for some reason, just use the current timestamp
&lt;/span&gt;        &lt;span class="n"&gt;store_last_update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;store_last_update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"last_update_timestamp"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"data"&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Write a simple generator that accepts the source as a callable function to retrieve the matches
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;match_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"home_team"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"teams"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;"away_team"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"teams"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;"home_score"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"score"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;"away_score"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"score"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Call send_notifications with the match from the API and parse it to compose the notification
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_notification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;home_team&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"home_team"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;away_team&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"away_team"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;home_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"home_score"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;away_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"away_score"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Found match update &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;home_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;home_score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;away_score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;away_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Update &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;home_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;away_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;home_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;home_score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;away_score&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;away_team&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Add this to be able to call the script from the crontab
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now test the above by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./execute.sh poll
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may get none, one, or many notifications based on your current date and time. It all depends if there is any match in progress.&lt;/p&gt;

&lt;p&gt;It's also up to the players to score a goal in the same time that you are testing this. &lt;/p&gt;

&lt;p&gt;Not much you can do about this...&lt;/p&gt;

&lt;p&gt;Let's move to the next step and add the poll script to our crontab.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-our-script-easier-to-install-on-your-laptop"&gt;
  &lt;/a&gt;
  Make our script easier to install on your laptop
&lt;/h2&gt;

&lt;p&gt;To make our lives easier, let's encapsulate the logic of installing and removing the script in one single file.&lt;/p&gt;

&lt;p&gt;Just create a &lt;code&gt;./src/install.py&lt;/code&gt; and add this to it:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;./src/install.py&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;crontab&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CronTab&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;

&lt;span class="c1"&gt;# Add a comment so you know what this does in the future. This will be added to the crontab entry
# Also it will allow us to find and remove the entry in the future.
&lt;/span&gt;&lt;span class="n"&gt;COMMENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"will run the football updates scraper"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_comment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;COMMENT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;COMMENT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Get the path to our root folder
&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# This is the command that we want to run ever 5 minutes to get updates from the API
&lt;/span&gt;    &lt;span class="c1"&gt;# You can alter this to get more frequent updates
&lt;/span&gt;    &lt;span class="c1"&gt;# Notice that we send the crontab logs to our root folder in the cron.log file
&lt;/span&gt;    &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/../virtualenv/bin/python3 &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/poll.py &amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/../cron.log 2&amp;gt;&amp;amp;1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;COMMENT&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;COMMENT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Use the argparse lib to easy pass a flag to our script
&lt;/span&gt;    &lt;span class="c1"&gt;# If we call the script without any arguments, it will create an entry in the crontab
&lt;/span&gt;    &lt;span class="c1"&gt;# if we call this will a -u flag, it will remove the entry from crontab
&lt;/span&gt;    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;prog&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"installer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"%(prog)s [options]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"install the application"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"-u"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"--uninstall"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"uninstall"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"store_true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"uninstall the application"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;cron&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CronTab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="c1"&gt;# If the flag -u is passed to the script, it will uninstall the crontab entry
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uninstall&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You are all set now. &lt;/p&gt;

&lt;p&gt;To install the football updates notifier, just call this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./execute.sh &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To easily remove it and stop the updates, just call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./execute.sh &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all you need to do is wait for somebody to score a goal, and you will get a notification with the live score update.&lt;/p&gt;

&lt;p&gt;If you want more information or just read the docs for the &lt;a href="https://bit.ly/3DYWFbs"&gt;Football Live Scores API&lt;/a&gt; on RapidAPI just &lt;a href="https://bit.ly/3DYWFbs"&gt;click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to see the full code, just download it from my Github repo: &lt;a href="https://github.com/MihaiBlebea/football_updates"&gt;MihaiBlebea/football_updates&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>rapidapi</category>
      <category>football</category>
    </item>
    <item>
      <title>3 steps to configure Vanilla Forum with Orbit.love</title>
      <author>Tamimi Ahmad</author>
      <pubDate>Tue, 14 Dec 2021 18:27:31 +0000</pubDate>
      <link>https://dev.to/tweettamimi/3-steps-to-configure-vanilla-forum-with-orbitlove-5dap</link>
      <guid>https://dev.to/tweettamimi/3-steps-to-configure-vanilla-forum-with-orbitlove-5dap</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#whats-orbit"&gt;What's orbit&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#integrations"&gt;Integrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wheres-my-integration-at"&gt;Where's my integration?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#goal"&gt;Goal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#1-extract-existing-members-done-once"&gt;1. Extract VF Members&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#generate-your-vf-token"&gt;Generate VF Token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#write-your-script"&gt;Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#issues-and-improvements"&gt;Issues and Improvements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-import-your-csv-file-to-orbit"&gt;2. Import Members to Orbit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#3-connect-webhooks-to-orbit-activities"&gt;3. Configure Zapier&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#vanilla-forum-new-user-webhook"&gt;VF New User Webhook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#zapier-webhook-actions"&gt;Zapier Webhook Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orbit-step-add-new-user"&gt;Orbit Step&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips-and-tricks"&gt;Tips and Tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-orbit"&gt;
  &lt;/a&gt;
  What's Orbit?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://orbit.love/"&gt;Orbit&lt;/a&gt; is a platform that helps with understanding your online community. If you are a developer advocate or a community manager then you can consider this platform as the mission control for your community that consolidates and curates all your members and their activities from different places into one place. It's pretty nifty! At &lt;a href="https://solace.community/"&gt;Solace&lt;/a&gt; we use Orbit to better understand our community members and where they gravitate to the most. &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://orbit.love/knowledge-base/understanding-the-orbit-model"&gt;Orbit Model Framework&lt;/a&gt; helps with segmenting community members into different categories depending on their activities and interactions with the community. This framework is based on associating a weighted score for different kind of activities on different platforms. It's important to understand this model for whats coming next 👀&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrations"&gt;
  &lt;/a&gt;
  Integrations
&lt;/h3&gt;

&lt;p&gt;The nice thing about Orbit is the ability to connect multiple different integration from their natively supported &lt;a href="https://orbit.love/integrations"&gt;integrations&lt;/a&gt;. Meaning that any activity that happens on the platform, for example a tweet or a PR on a github repo, can be ported into your Orbit workspace, associate with the user, and given a particular weight for scoring purposes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wheres-my-integration-at"&gt;
  &lt;/a&gt;
  Where's my integration at?
&lt;/h3&gt;

&lt;p&gt;If your members are hanging out in a platform that is not natively supported by Orbit as an integration, worry not! Since Orbit was built with developers in mind, they naturally have APIs that facilitates the interaction with the platform via importing users and adding activities. &lt;/p&gt;

&lt;p&gt;We use &lt;a href="https://vanillaforums.com"&gt;Vanilla Forum&lt;/a&gt; (VF) as the community forum solution at Solace. Orbit, however, doesn't have a native integration with VF. What's the solution? lets jump into the API! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goal"&gt;
  &lt;/a&gt;
  Goal
&lt;/h2&gt;

&lt;p&gt;The problem we wanted to solve is the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Extract all the already existing community members from Vanilla Forum&lt;/li&gt;
&lt;li&gt;Import the members into Orbit&lt;/li&gt;
&lt;li&gt;Integrate any new user activity from VF to Orbit: New Users, Comments, New Discussions. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Luckily, VF has an API we can leverage to extract information from the forum. They also have support for &lt;a href="https://success.vanillaforums.com/kb/articles/262-webhooks"&gt;Webhooks&lt;/a&gt; to facilitate integrations between sites and services whenever any activity happens in the forum. &lt;/p&gt;

&lt;p&gt;Let's cut the chase and get to the core of it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xUOwGmsFStnxzIGC2s/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xUOwGmsFStnxzIGC2s/giphy.gif" alt="" width="480" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-extract-existing-members-done-once"&gt;
  &lt;/a&gt;
  1. Extract existing members. Done once!
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#generate-your-vf-token"&gt;
  &lt;/a&gt;
  Generate your VF Token
&lt;/h3&gt;

&lt;p&gt;To use the VF APIs, you will first need to generate an Access Token. To do so , follow the steps on &lt;a href="https://success.vanillaforums.com/kb/articles/41-authentication-with-personal-access-tokens"&gt;Authentication With Personal Access Tokens&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-your-script"&gt;
  &lt;/a&gt;
  Write your script
&lt;/h3&gt;

&lt;p&gt;I wrote a simple nodejs application to extract all the members from VF via their APIs into a CSV file. You can use your programming language of choice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baseURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://solace.community/api/v2/users?expand=extended&amp;amp;page=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;header_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &amp;lt;Insert Token Here&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;header_config&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Error fetching content from &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Response status from &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`No content in page &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// CSV list &lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;github&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;twitter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;linkedin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;discorse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;company&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;avatar_url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tags&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;teammate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isEmployee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Employee&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,,,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LinkedInprofileoptional&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CompanyName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;photoUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, "VF", &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isEmployee&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JobTitleoptional&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\n`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

 &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;users.csv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;The script expects an empty &lt;code&gt;users.csv&lt;/code&gt; file to exist&lt;/li&gt;
&lt;li&gt;The VF API returns the users in several pages. I manually traversed the pages since I knew how many pages I am dealing with for the initial import. You can check out VF's &lt;a href="https://success.vanillaforums.com/kb/articles/40-api-v2-overview#pagination"&gt;Pagination&lt;/a&gt; section for more information&lt;/li&gt;
&lt;li&gt;The generated CSV file follows the &lt;a href="https://orbit.love/knowledge-base/how-to-import-members-and-activities-via-csv"&gt;Orbit CSV import guidelines&lt;/a&gt;. Use this &lt;a href="https://docs.google.com/spreadsheets/d/1huiUe_zpBykjWW5kwzymkd-8HPQAzdRItao-1xgSh6k/edit#gid=2035324798"&gt;Template&lt;/a&gt; if you want to add other tags associated with the members&lt;/li&gt;
&lt;li&gt;The script adds a &lt;code&gt;VF&lt;/code&gt; tag to the users to make sure we can differentiate our forum users from other users. You can add whatever tags your team decides on adding. This is a comma separated list&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#issues-and-improvements"&gt;
  &lt;/a&gt;
  Issues and Improvements
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;The Orbit import format does not allow for specifying the &lt;code&gt;joined_at&lt;/code&gt; parameter, so all your imported members will have the joined date as the day you import the members to your workspace&lt;/li&gt;
&lt;li&gt;Pagination could be improved in the script above&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that you have your CSV file ready, lets import the members to Orbit! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-import-your-csv-file-to-orbit"&gt;
  &lt;/a&gt;
  2. Import your CSV file to orbit
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to the setting section in your workplace 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-iGFlEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okcgsnsqh82tve7hl22h.png" alt="Orbit screenshot" width="880" height="377"&gt;
&lt;/li&gt;
&lt;li&gt;Import your CSV File
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---0ip2MO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esrevzuf13dy3xkk84lq.png" alt="Orbit screenshot" width="880" height="361"&gt;
&lt;/li&gt;
&lt;li&gt;Wait for the import to finish&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l4JyOCNEfXvVYEqB2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l4JyOCNEfXvVYEqB2/giphy.gif" alt="" width="600" height="338"&gt;&lt;/a&gt;&lt;br&gt;
We're ready to configure Activities! 👇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-connect-webhooks-to-orbit-activities"&gt;
  &lt;/a&gt;
  3. Connect Webhooks to Orbit Activities
&lt;/h2&gt;

&lt;p&gt;Vanilla Forum has support for &lt;a href="https://success.vanillaforums.com/kb/articles/262-webhooks"&gt;Webhooks&lt;/a&gt; to integrate with other websites and services. You can use integration services like &lt;a href="https://zapier.com/"&gt;Zapier&lt;/a&gt; or &lt;a href="https://sendgrid.com/"&gt;SendGrid&lt;/a&gt; to leverage the VF Webhooks. In this tutorial I will be using Zapier and assume you already have an account. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vanilla-forum-new-user-webhook"&gt;
  &lt;/a&gt;
  Vanilla Forum new user webhook
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create a new zap and search for the Vanilla Forum app 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wDCOJDH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opvfqoumghm7be25aqpd.png" alt="Vanilla Forum Zapier Integration" width="880" height="388"&gt;
&lt;/li&gt;
&lt;li&gt;Configure the connection parameters&lt;/li&gt;
&lt;li&gt;Choose the event you want to trigger the zap with. I chose new user added
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r2vGeIbX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck1j4jpvafdpof2m37yk.png" alt="Vanilla Forum Zapier Integration" width="880" height="302"&gt;
&lt;/li&gt;
&lt;li&gt;Test the trigger and observe the output
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uBEom3Kw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0hi0hz4qr2efe1n4pi8.png" alt="Vanilla Forum Zapier Integration" width="880" height="412"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h4&gt;

&lt;p&gt;It's important to note that some metadata are not included in the body of the webhook such as the company name and Linkedin profile. Depending on what other parameters you have configured in your VF sign up form, you might want to include other metadata associated with every user.&lt;/p&gt;

&lt;p&gt;🚀 Zapier Webhook Actions for the rescue! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zapier-webhook-actions"&gt;
  &lt;/a&gt;
  Zapier Webhook Actions
&lt;/h3&gt;

&lt;p&gt;We will need to add another step after the Vanilla Forum step. This will leverage VF's REST APIs to query further parameters for the new user.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on the '+' sign to add another step&lt;/li&gt;
&lt;li&gt;Search for "Webhooks By Zapier"
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O-QvGA4b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5lwifrm42jpul7c6xh7.png" alt="Webhooks By Zapier" width="880" height="723"&gt;
&lt;/li&gt;
&lt;li&gt;Under the Action event, choose GET
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9DTmgMLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0pkf130w7o2f6m8m9o6e.png" alt="Webhooks By Zapier GET" width="880" height="423"&gt;
&lt;/li&gt;
&lt;li&gt;Under the Setup Action, fill in the URL &lt;code&gt;https://&amp;lt;your_domain&amp;gt;/api/v2/users/{userID}?expand=extended&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Note that the userID is obtained from the previous step. The &lt;code&gt;expand=extended&lt;/code&gt; parameter is needed to get extra metadata for the newly added user. Check &lt;a href="https://success.vanillaforums.com/kb/articles/394-expanding-user-profile-extender-fields"&gt;Expanding User Profile Extender Fields&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Add an &lt;code&gt;Authorization&lt;/code&gt; Header under the Headers section with a value of &lt;code&gt;Bearer &amp;lt;Insert VF Token&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Click continue and Test the integration
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I7GRuv5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5q9q1u9jb9x22fnnm73l.png" alt="Webhooks By Zapier GET" width="880" height="967"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#orbit-step-add-new-user"&gt;
  &lt;/a&gt;
  Orbit Step: Add new user
&lt;/h3&gt;

&lt;p&gt;Now that we have all the metadata associated with creating a new user, we are ready to add the user to Orbit&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on the '+' sign to add a new step&lt;/li&gt;
&lt;li&gt;Search for orbit
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBmpqPhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucezourx9yi9pyf4neak.png" alt="Orbit Zap" width="880" height="607"&gt;
&lt;/li&gt;
&lt;li&gt;Choose "Create a new Member" from the actions events
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cw2glPOR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r91g9oij3uvfnhwh8zcp.png" alt="Orbit Zap" width="880" height="460"&gt;
&lt;/li&gt;
&lt;li&gt;Fill in the information either statically (by typing it in) or dynamically (from the output of the previous step)&lt;/li&gt;
&lt;li&gt;Dont forget to add a tag for every activity! For Example &lt;code&gt;VF&lt;/code&gt; for a new user, &lt;code&gt;VF-Discussion&lt;/code&gt; for a new discussion, and &lt;code&gt;VF-Comment&lt;/code&gt; for a new comment&lt;/li&gt;
&lt;li&gt;Click continue and test action&lt;/li&gt;
&lt;li&gt;Turn on the Zap&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And you're done! Now everytime a new user joins your community forum, a webhook is triggered to Zapier, and the Zapier configuration will add that user to Orbit leveraging Orbit's APIs and the details in your step. &lt;/p&gt;

&lt;p&gt;You can follow the same steps for new discussions and new comments webhooks. Make sure you add the right tags for every activity!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0Iyl55kTeh71nTXy/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0Iyl55kTeh71nTXy/giphy.gif" alt="Done gif" width="480" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-and-tricks"&gt;
  &lt;/a&gt;
  Tips and Tricks
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Adding all the tags and information associated with every activity is extremely crucial. This comes to play and becomes helpful when you want to filter members or activity based on a particular tag&lt;/li&gt;
&lt;li&gt;You can modify the weight for every activity. This can be fine tuned and decided by you and your team. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>orbit</category>
      <category>vanillaforum</category>
      <category>zapier</category>
      <category>community</category>
    </item>
    <item>
      <title>How Hoppscotch is building an open source "API development ecosystem"</title>
      <author>Liyas Thomas</author>
      <pubDate>Tue, 14 Dec 2021 18:09:02 +0000</pubDate>
      <link>https://dev.to/liyasthomas/how-hoppscotch-is-building-an-open-source-api-development-ecosystem-5cl7</link>
      <guid>https://dev.to/liyasthomas/how-hoppscotch-is-building-an-open-source-api-development-ecosystem-5cl7</guid>
      <description>&lt;p&gt;At &lt;a href="https://hoppscotch.io/"&gt;&lt;strong&gt;Hoppscotch&lt;/strong&gt;&lt;/a&gt;, our focus has been on empowering developers to focus on their work of building and testing Application Programming Interfaces (APIs). In the past year, we have come a long way and we are excited to share the latest milestones in our journey.&lt;/p&gt;

&lt;p&gt;Today, we’re announcing that &lt;strong&gt;we’ve raised $3M in seed funding led by &lt;a href="https://oss.capital/"&gt;OSS Capital&lt;/a&gt;&lt;/strong&gt;! Additionally, we are excited to share a slew of new product updates aimed at re-envisioning the principles and practices to continue developing the best-in-class tool for developers to create APIs.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nextgeneration-companies-are-built-with-hoppscotch"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Next-generation companies are built with Hoppscotch&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Thousands of companies –from early teams to growth-stage –use Hoppscotch to develop and test APIs. Employees from &lt;strong&gt;Google, Microsoft, Salesforce, IBM, Cisco, RedHat, Verizon, Emirates, OLX&lt;/strong&gt; are just a few examples.&lt;/p&gt;

&lt;p&gt;Hoppscotch’s tools and API development methodologies are becoming the standard for high-performing teams, and the &lt;strong&gt;500,000+ people-strong Hoppscotch community&lt;/strong&gt; represents a welcoming and fast-growing hub of globally productive developers. Tools like Hoppscotch have become even more critical as companies operate on headless API-driven methodologies. APIs represent the future of making software and communicating data.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#partnering-with-oss-capital"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Partnering with OSS Capital&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Following our progress, and to accelerate and to continue taking Hoppscotch to the next level, we’ve partnered with &lt;strong&gt;OSS Capital&lt;/strong&gt; for our Seed. &lt;strong&gt;Joseph Jacks&lt;/strong&gt; (general partner, OSS Capital) led our seed round and joins our board. We admire and resonate with OSS Capital’s and Joseph’s long-term approach to company building and respect their exceptional track record of backing next-generation, category-defining COSS companies.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“OSS Capital is honored to partner with Liyas Thomas in leading the seed round for Hoppscotch, alongside Automattic — the creators of WordPress. Since first learning about Liyas and his work through the &lt;a href="http://dev.to/"&gt;DEV.to&lt;/a&gt; community, our first seed investment, we quickly developed a strong sense of the passion, authenticity, and exceptional vibrancy exhibited in the Hoppscotch community. As API-driven development continues to become a fundamental driver of digital innovation and transformation, we believe Hoppscotch will shape and further evolve the cutting edge of API tooling for developers everywhere. In a short period since launching, Hoppscotch has captured the adoption and loyalty of 500,000+ developers globally, and established itself as &lt;strong&gt;the fastest-growing open-source ecosystem in India&lt;/strong&gt;, and globally in its category. Congratulations to Liyas and team on their success so far!”&lt;/p&gt;

&lt;p&gt;— Joseph Jacks&lt;/p&gt;

&lt;p&gt;Founder and General Partner, OSS Capital&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In addition, several industry leaders are participating in this round and bringing on their insights and networks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Austen Allred, co-founder &amp;amp; CEO of Bloom Institute of Technology (formerly Lambda School)&lt;/li&gt;
&lt;li&gt;Paul Sieminski, chief legal officer of Automattic&lt;/li&gt;
&lt;li&gt;Clint Smith, chief legal officer of Discord&lt;/li&gt;
&lt;li&gt;Tod Sacerdoti, founder &amp;amp; CEO of PipeDream&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This funding, along with the support from our investors, gives us the resources to really accelerate and go after defining the new standard for software development.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#looking-ahead"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Looking ahead&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We started Hoppscotch in August of 2019, with a simple insight: building and testing APIs has increasingly grown in complexity. The current approach is to layer on more processes and cumbersome tools. We want to see a world that unwinds all of this complexity by providing the practices and tools that fit the developers' workflow, empowering teams to focus on the act of building.&lt;/p&gt;

&lt;p&gt;We are grateful for all the support we have received from our customers, partners, and investors. Let’s make software as a craft feel magical again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#join-us-were-hiring"&gt;
  &lt;/a&gt;
  Join us - we're hiring!
&lt;/h3&gt;

&lt;p&gt;Join our journey to build Hoppscotch for an API-first software era.&lt;/p&gt;

&lt;p&gt;We're hiring in product, engineering, and design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hoppscotch.io/careers"&gt;Apply now ✨&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Liyas Thomas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Founder &amp;amp; CEO, Hoppscotch&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>testing</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Get the most out of your (remote) pair programming sessions</title>
      <author>Felix Vaucourt</author>
      <pubDate>Tue, 14 Dec 2021 17:47:11 +0000</pubDate>
      <link>https://dev.to/felvct/get-the-most-out-of-your-remote-pair-programming-sessions-2l7g</link>
      <guid>https://dev.to/felvct/get-the-most-out-of-your-remote-pair-programming-sessions-2l7g</guid>
      <description>&lt;p&gt;Most of us have heard of it and most of us have used it: pair programming.&lt;/p&gt;

&lt;p&gt;In the good old pre-covid days, pair programming involved two developers working simultaneously on the same machine. Nowadays, we tend to make it work with two separate computers, in two separate locations with the help of screen sharing but the principle remains the same. One developer, &lt;em&gt;the driver&lt;/em&gt;, should write code while the second developer, &lt;em&gt;the navigator&lt;/em&gt;, reviews the typed code in real time. Those roles should be changed frequently in order to keep the dynamic of the pairing session up.&lt;/p&gt;

&lt;p&gt;The idea behind this approach is that a higher output is being generated since teammates will be working together to solve an issue rather than working in silos. Furthermore, the constant communication in the pair allows to find the best solution, share knowledge between both parties and therefore quickly move through faced challenges.&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-pair-programming"&gt;
  &lt;/a&gt;
  Benefits of pair programming
&lt;/h2&gt;

&lt;p&gt;Pairing up can be more than just working on a ticket. It gives team members the opportunity to catch up and talk about their lives outside of work. The social aspect of it shouldn't be neglected, especially now that companies are shifting more and more towards remote work and engineers are getting less and less contact with their teammates.&lt;/p&gt;

&lt;p&gt;You know the old saying, &lt;em&gt;two heads are better than one&lt;/em&gt;. You should be able to freely share and discuss your thoughts and ideas on how to solve a problem. This will allow you to see the problem more clearly and to pool the knowledge of both parties to get the best outcome possible.&lt;/p&gt;

&lt;p&gt;The knowledge sharing that takes place during those sessions is another important aspect of pair programming. It will allow you to either learn or teach coding practices and how to approach and handle problems from another perspective. This will not only increase the efficiency but also the innovation and the code base knowledge while decreasing the silo knowledge within the team.&lt;/p&gt;

&lt;p&gt;Last but not least, being on "the same skill level" is not a requirement for pair programming. Pairing up a junior developer with a senior developer will benefit either of them. The junior developer will gain a significant amount of industry knowledge while the senior developer will be rewarded with a teaching experience while sharpening his/her competence to critically think about solutions.&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drawbacks-of-pair-programming"&gt;
  &lt;/a&gt;
  Drawbacks of pair programming
&lt;/h2&gt;

&lt;p&gt;Until now we only spoke about the advantages of pair programming, but overdoing it can lead to inefficiency. Constantly pairing up, even for the smallest tasks and the tiniest bug fixes will lead to the navigator being left out. The communication will be non-existent since the implementation will be straight forward.&lt;/p&gt;

&lt;p&gt;A higher output would be generated if both developers would work on different tasks at the same time and not in a pair.&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remote-pair-programming"&gt;
  &lt;/a&gt;
  Remote pair programming
&lt;/h2&gt;

&lt;p&gt;Unlike other methods of in-person collaboration, pair programming works really well in a remote context. You don't lose anything of the pairing experience, you may even find it more effective.&lt;/p&gt;

&lt;p&gt;Use the advantage of not physically sitting next to your colleague. Thanks to screen sharing you will have more control of what you are looking at instead of working on one persons's screen.&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-for-remote-pairing-sessions"&gt;
  &lt;/a&gt;
  Tips for remote pairing sessions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#know-when-to-pair"&gt;
  &lt;/a&gt;
  Know when to pair
&lt;/h3&gt;

&lt;p&gt;Working in an isolated, remote environment is a great experience when one is "in the zone" but having no one to talk to when you really linger on an issue makes the whole experience more difficult and frustrating.&lt;/p&gt;

&lt;p&gt;When a task is giving you a hard time and you are not able to generate any output or to create some sort of progress on it, it is time to pair up. Do not be afraid to ask for help.&lt;/p&gt;

&lt;p&gt;Keep in mind that anyone can benefit from pairing up when being stuck on a problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#agenda"&gt;
  &lt;/a&gt;
  Agenda
&lt;/h3&gt;

&lt;p&gt;No one likes to waste their time, this is why every meeting should have an agenda and a scheduled pair programming session is no exception to the rule.&lt;/p&gt;

&lt;p&gt;Do not spend the first 15 minutes of the session deciding on what to work on or going through several tickets in order to understand the problem to tackle.&lt;/p&gt;

&lt;p&gt;Set goals or expectations (this can be as simple as "let's discuss our options and decide on what path to take"), both developers should be on the same page about what to do and about what to focus on during the session.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communication"&gt;
  &lt;/a&gt;
  Communication
&lt;/h3&gt;

&lt;p&gt;Do not be afraid to freely and openly speak your mind. Even if you say something wrong it helps the process, you will tackle the problem more quickly. By being corrected, a new idea may be sparked by you or your partner which will ultimately lead to a solution.&lt;/p&gt;

&lt;p&gt;Bounce of each other ideas and pool your knowledge in order to get the best outcome.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-your-tools"&gt;
  &lt;/a&gt;
  Use your tools
&lt;/h3&gt;

&lt;p&gt;Several IDEs and text editors have tools dedicated to remote pair programming. Do yourself a favor and use them. It will give you more interaction than through screen sharing alone and therefore making the whole experience more enjoyable.&lt;/p&gt;

&lt;p&gt;Here are some tools and plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/learn/collaboration/live-share"&gt;VSCode Live Share&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teletype.atom.io/"&gt;Teletype (Atom)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tuple.app/"&gt;Tuple (macOS only)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teamremote.github.io/remote-sublime/"&gt;Remote Collab (SublimeText)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codepen.io/"&gt;CodePen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#retros-after-each-pairing-session"&gt;
  &lt;/a&gt;
  Retros after each pairing session
&lt;/h3&gt;

&lt;p&gt;Being a good pair is not easy, regardless of your skill level. Do yourself a favor and finish your pairing session with a short retro in order to understand what worked well, what did not work and how you could improve your future sessions.&lt;/p&gt;




&lt;p&gt;If you have any questions, feel free to hit me up on &lt;a href="https://twitter.com/felvct"&gt;Twitter&lt;/a&gt; or on &lt;a href="https://github.com/felvct"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>codequality</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How I code signed an Electron app on Windows</title>
      <author>Ayron Wohletz</author>
      <pubDate>Tue, 14 Dec 2021 17:33:17 +0000</pubDate>
      <link>https://dev.to/awohletz/how-i-code-signed-an-electron-app-on-windows-30k5</link>
      <guid>https://dev.to/awohletz/how-i-code-signed-an-electron-app-on-windows-30k5</guid>
      <description>&lt;p&gt;So you want to distribute your Electron app to Windows users, but when people run it they get a nasty warning “Microsoft Defender SmartScreen prevented an unrecognized app from running” and it shows “Unknown publisher.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/a/66582477/1917537"&gt;One way to immediately get rid of this warning is to purchase an Extended Validation (EV) Code Signing certificate&lt;/a&gt;. I opted instead for a normal, non-EV Code Signing certificate. A normal Code Signing cert will show the publisher name in the warning instead of “unknown publisher.” However, SmartScreen will still need time to begin trusting my app before it will stop showing the warning altogether. I made that tradeoff to reduce the cost and validation time for my small app.&lt;/p&gt;

&lt;p&gt;So here’s how I used electron-builder to sign my Electron app on Windows with a Code Signing certificate. It took three steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Obtain the certificate&lt;/li&gt;
&lt;li&gt;Download the certificate&lt;/li&gt;
&lt;li&gt;Configure electron-builder&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-obtain-the-certificate"&gt;
  &lt;/a&gt;
  1. Obtain the certificate
&lt;/h2&gt;

&lt;p&gt;I purchased a Microsoft Authenticode Code Signing Certificate from Sectigo on this website: &lt;a href="https://codesigncert.com/codesigning/authenti-codesigning"&gt;https://codesigncert.com/codesigning/authenti-codesigning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To issue the certificate, the certificate vendor needs to either validate you as an individual or validate your business. I opted for business validation. For business validation, your business must be listed in public records that the vendor can look up. Your business phone number has to be listed as well. If the info is not listed, the validation process gets longer and more complicated.&lt;/p&gt;

&lt;p&gt;After I purchased the certificate, &lt;a href="http://codesigncert.com/"&gt;codesigncert.com&lt;/a&gt; gave me some instructions to kick off the validation process.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It had me create a Certificate Signing Request (CSR) with &lt;a href="https://www.digicert.com/support/tools/certificate-utility-for-windows"&gt;DigiCert Certificate Utility&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I uploaded that CSR (which is just a bunch of text) to the &lt;a href="http://codesigncert.com/"&gt;codesigncert.com&lt;/a&gt; website. The info entered into the form on the website has to match what you inputted in the DigiCert tool.&lt;/li&gt;
&lt;li&gt;Now the certificate vendor will begin the validation process. In my case, it was Sectigo.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="http://codesigncert.com/"&gt;Codesigncert.com&lt;/a&gt; provides some info on the validation requirements — address, phone number, public listing, etc. To make my business info plus phone number visible before starting validation, I updated my business profile on &lt;a href="http://dnb.com/"&gt;dnb.com&lt;/a&gt;. Their customer support crew sent me a couple messages during validation that they needed to validate my business phone number. I called them and directed the operator to my &lt;a href="http://dnb.com/"&gt;dnb.com&lt;/a&gt; listing. The operator was then able to validate and issue the certificate. All-in-all the purchase and validation process took a couple weeks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-download-the-certificate"&gt;
  &lt;/a&gt;
  2. Download the certificate
&lt;/h2&gt;

&lt;p&gt;After the certificate is issued, I had to download it &lt;em&gt;with Internet Explorer&lt;/em&gt; (IE11). Yes, it’s strange, but the certificate only downloads in the correct form with IE. At first I downloaded it with Chrome (my usual browser) but the downloaded file didn’t contain the private key. That tripped me up for a couple hours. Eventually I found that IE is a requirement. Then I followed &lt;a href="https://sectigo.com/knowledge-base/detail/How-to-Export-Your-Code-Signing-Certificate-Windows/kA01N000000zFK0"&gt;the Sectigo tutorial to export the certificate to pfx&lt;/a&gt;, which electron-builder needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-configure-electronbuilder"&gt;
  &lt;/a&gt;
  3. Configure electron-builder
&lt;/h2&gt;

&lt;p&gt;First set the environment variables CSC_LINK and CSC_KEY_PASSWORD.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSC_LINK — This should contain the path of the .pfx file you downloaded.&lt;/li&gt;
&lt;li&gt;CSC_PASSWORD — This should have the .pfx password you configured while downloading from IE.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Electron builder will pick those env vars up and sign all the executables in your bundle (including third-part executables in asar.unpacked). I set those in my dot-env file (&lt;code&gt;.env&lt;/code&gt;) and used the package &lt;a href="https://github.com/entropitor/dotenv-cli"&gt;dotenv-cli&lt;/a&gt; to load them in package.json scripts. Here is the package.json script that builds and signs: &lt;code&gt;dotenv -- cross-env NODE_ENV=production npm run test &amp;amp;&amp;amp; npm run prod-build &amp;amp;&amp;amp; electron-builder&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And this script builds, signs, and publishes to my Github releases: &lt;code&gt;dotenv -- electron-builder -p always&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here’s the relevant electron-builder config that I used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;win:
  target:
    - nsis
  signingHashAlgorithms: [ 'sha256' ]
  publisherName: (YOUR BUSINESS NAME HERE)
  signAndEditExecutable: true
  verifyUpdateCodeSignature: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After electron-builder has built and signed your executable, you can verify the signing with DigiCert Util if you want (press the “Check Signature” button).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Windows now shows my business name as the publisher in the SmartScreen warning when users run the app. It’s nice to know that my app cannot be tampered with and faulty copies sent to users. According to online materials I’ve seen, the warning should go away altogether once enough people download and run it.&lt;/p&gt;

&lt;p&gt;I also code signed the app for MacOS. That was a separate process, and I couldn’t use the cert I bought for Windows. That could be the subject of a future post.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How not to write Python comments</title>
      <author>python.land</author>
      <pubDate>Tue, 14 Dec 2021 17:29:53 +0000</pubDate>
      <link>https://dev.to/python_land/how-not-to-write-python-comments-1dc</link>
      <guid>https://dev.to/python_land/how-not-to-write-python-comments-1dc</guid>
      <description>&lt;p&gt;Writing comments in your Python code is not as trivial as one might think. In this article, &lt;strong&gt;&lt;a href="https://medium.com/pythonland/how-not-to-write-python-comments-62c613030ea8?sk=086df2711346c137b2a27d7e26fd1cdb"&gt;How not to write Python comments&lt;/a&gt;&lt;/strong&gt;, I explain how to write comments in Python. More importantly, I also share how not to use comments. These are good practices for any programming language, by the way!&lt;/p&gt;

&lt;p&gt;I'd love to hear your comments ;)&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How To Install Git And Push Codes To Github</title>
      <author>Devtonight</author>
      <pubDate>Tue, 14 Dec 2021 17:22:32 +0000</pubDate>
      <link>https://dev.to/devtonight/how-to-install-git-and-push-codes-to-github-384m</link>
      <guid>https://dev.to/devtonight/how-to-install-git-and-push-codes-to-github-384m</guid>
      <description>&lt;p&gt;This question explains how to set up a local Git repository and push it to Github.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-installation"&gt;
  &lt;/a&gt;
  Git Installation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#windows-installation"&gt;
  &lt;/a&gt;
  Windows Installation
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt; and click “Download For Windows”.&lt;/li&gt;
&lt;li&gt;Select 32 bit or 64 bit according to your PC architecture.&lt;/li&gt;
&lt;li&gt;Open the downloaded &lt;code&gt;exe&lt;/code&gt; file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The installation wizard will ask for basic information like the installation path, whether create desktop icons or not etc. You can leave them all in their default settings or make necessary changes and press “Next”. Ultimately, you will see the “Install” button at the end and it will begin the installation process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linux-installation"&gt;
  &lt;/a&gt;
  Linux Installation
&lt;/h3&gt;

&lt;p&gt;Open a terminal window and enter the following command, it will update the local software repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then install Git using the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mac-installation"&gt;
  &lt;/a&gt;
  Mac Installation
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;code&gt;Homebrew&lt;/code&gt; if not already installed&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Git&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install git
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Visit &lt;a href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt; and click “Download for Mac” for more information and alternative installation methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-the-installation"&gt;
  &lt;/a&gt;
  Check The Installation
&lt;/h3&gt;

&lt;p&gt;Run the following command, it should display the installed Git version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-your-first-git-repository"&gt;
  &lt;/a&gt;
  Create Your First Git Repository
&lt;/h2&gt;

&lt;p&gt;First, create a new directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir hello-git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go into that directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd hello-git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initialize a new local Git repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a file called &lt;code&gt;hello-git.html&lt;/code&gt; or otherwise, you can add your code files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch hello-git.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add some content into &lt;code&gt;hello-git.html&lt;/code&gt; file and check the status of the repository. It will display the changed files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add &lt;code&gt;hello-git.html&lt;/code&gt; to the repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add hello-git.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have multiple files, you can add them all by using &lt;code&gt;-A&lt;/code&gt; flag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add -A
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commit changes with a short and meaningful message like what you did in the commit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "hello-git.txt added"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#push-to-github"&gt;
  &lt;/a&gt;
  Push To Github
&lt;/h2&gt;

&lt;p&gt;Set the Github username. Your username is the part after the 3rd forward-slash (&lt;code&gt;/&lt;/code&gt;) of your profile URL. For example, in &lt;code&gt;https://github.com/bitcoin&lt;/code&gt;, &lt;code&gt;bitcoin&lt;/code&gt; is the username.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.username your_github_username
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new repository in Github by visiting &lt;a href="https://github.com/new"&gt;https://github.com/new&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Link the Github remote repository to the local repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin https://github.com/your_github_username/hello-git.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Push local repository to Github repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feel free to visit &lt;a href="https://devtonight.com?utm_source=dev&amp;amp;utm_medium=questions&amp;amp;utm_campaign=how-to-install-git-and-push-codes-to-github"&gt;devtonight.com&lt;/a&gt; for more related content.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>beginners</category>
      <category>howto</category>
    </item>
    <item>
      <title>How To Build A React App Using React Router v6 Without create-react-app</title>
      <author>Jordan Smith</author>
      <pubDate>Tue, 14 Dec 2021 17:10:33 +0000</pubDate>
      <link>https://dev.to/jordan_smith/how-to-build-a-react-app-using-react-router-v6-without-create-react-app-4fe3</link>
      <guid>https://dev.to/jordan_smith/how-to-build-a-react-app-using-react-router-v6-without-create-react-app-4fe3</guid>
      <description>&lt;p&gt;Recently I found myself in the position of needing to start a new React app from scratch, but due to anticipation for future needs of the app it was decided that we wouldn't be using create-react-app. But unfortunately, create-react-app is the only way I knew how to get a React project started. I also knew that we needed to use React Router in the app, and it just so happened that a new version was just released. So off to the internet I went, looking for a tutorial on getting started. I found some helpful links and articles, but I also found that I had to pull different steps from different areas in order to get a process that actually worked together with my setup and versioning. So in the interest of helping the next dev in my position, I decided to document the process I used. Hopefully this will make it much quicker and easier for whoever is reading this today.&lt;/p&gt;

&lt;p&gt;To start off, create a new folder and give it a name (this will end up being the name of the app). Open up the folder and in a terminal type the following command:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;You should see something similar to the following output&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XMHyNM86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639011959135/OHrqfeN-V.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XMHyNM86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639011959135/OHrqfeN-V.png" alt="Screen Shot 2021-12-08 at 4.28.45 PM.png" width="834" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next you'll create a "dist" folder at the root of your application. In that folder, create a file called index.html. This will be the initial starting HTML file for your application. Copy the following boilerplate into that file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Sample React App&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id="app"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script src="bundle.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice that inside the body tags there is a div with an id of "app." This is the div that you will eventually reference when telling React where to render everything. You can name it whatever you want, just make sure when you are referencing later on you use the same id the one you specify here.&lt;/p&gt;

&lt;p&gt;Next, we'll install the React dependencies, Webpack and Babel. These are the core dependencies you'll need for a basic React app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react react dom
npm i --save-dev @babel/preset-env react-hot-loader webpack webpack-cli webpack-dev-server @babel/core @babel/preset-react babel-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll install React Router at version 6.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-router-dom@6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that everything is installed, we'll add a script allowing us to start the application from the terminal. In package.json, add the following code to the "scripts" section.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"start": "webpack serve --config ./webpack.config.js --mode development --port 3000"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Your package.json should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "sample-react-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "webpack serve --config ./webpack.config.js --mode development --port 3000"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "dom": "^0.0.3",
    "react": "^17.0.2"
  },
  "devDependencies": {
    "@babel/core": "^7.16.0",
    "@babel/preset-env": "^7.16.4",
    "@babel/preset-react": "^7.16.0",
    "babel-loader": "^8.2.3",
    "react-hot-loader": "^4.13.0",
    "webpack": "^5.65.0",
    "webpack-cli": "^4.9.1",
    "webpack-dev-server": "^4.6.0"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we need to set some Babel presets. In your root directory create a file called .babelrc and put in the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "presets": ["@babel/preset-env", "@babel/preset-react"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll specify our Webpack presets. Create another file in the root directory called webpack.config.js and put in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const webpack = require("webpack");
const path = require("path");

module.exports = {
  entry: path.resolve(__dirname, "./src/index.js"),
  module: {
    rules: [
      {
        test: /\.(js|jsx|ts|tsx)$/,
        exclude: /node_modules/,
        use: ["babel-loader"],
      },
    ],
  },
  resolve: {
    extensions: ["*", ".js", ".jsx", ".ts", ".tsx"],
  },
  output: {
    path: path.resolve(__dirname, "./dist"),
    filename: "bundle.js",
  },
  plugins: [new webpack.HotModuleReplacementPlugin()],
  devServer: {
    static: path.resolve(__dirname, "./dist"),
    hot: true,
    historyApiFallback: true,

  },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: if you are not using typescript in your app you can omit the all references to "ts" and "tsx" (found under &lt;em&gt;resolve.extensions&lt;/em&gt; and &lt;em&gt;module.rules.test&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Now we'll create our root React app file. Create a src folder at your root directory and inside make a new file called app.jsx. This will contain the following (I'll explain what all of this is below):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";

const App = () =&amp;gt; {
  return (
    &amp;lt;BrowserRouter&amp;gt;
      &amp;lt;Routes&amp;gt;
        &amp;lt;Route path="/" element={&amp;lt;Layout /&amp;gt;}&amp;gt;
          &amp;lt;Route index element={&amp;lt;Home /&amp;gt;} /&amp;gt;
          &amp;lt;Route path="about" element={&amp;lt;About /&amp;gt;} /&amp;gt;
          &amp;lt;Route path="contact" element={&amp;lt;Contact /&amp;gt;} /&amp;gt;
          &amp;lt;Route path="*" element={&amp;lt;h2&amp;gt;Page Not Found&amp;lt;/h2&amp;gt;} /&amp;gt;
        &amp;lt;/Route&amp;gt;
      &amp;lt;/Routes&amp;gt;
    &amp;lt;/BrowserRouter&amp;gt;
  );
};

export default App;

const Layout = () =&amp;gt; {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Welcome to the app&amp;lt;/h1&amp;gt;
      &amp;lt;Outlet /&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

const Home = () =&amp;gt; {
  return &amp;lt;h2&amp;gt;Home&amp;lt;/h2&amp;gt;;
};

const About = () =&amp;gt; {
  return &amp;lt;h2&amp;gt;About&amp;lt;/h2&amp;gt;;
};

const Contact = () =&amp;gt; {
  return &amp;lt;h2&amp;gt;Contact&amp;lt;/h2&amp;gt;;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first glance, it looks like I just threw a massive code block at you just now. But if you break it down, it's simply a component that holds a router with a couple dummy components to get started. You can see that the component is called App and in this component we return a &lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt;. This is the built in React Router component that will wrap around whatever routes you add to your app in the future.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt; tag is where we will place all of our Routes. We start with a &lt;code&gt;&amp;lt;Routes&amp;gt;&lt;/code&gt; (note the "s") tag, another React Router component, basically saying "Hey here's a bunch of different routes to look for." Then of course is the &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component, which is where you'll put the actual path and the component to be rendered when that path is hit. I won't go into anymore detail on how these React Router components work. Instead if you want to see a more in depth explanation on how they all work I'd recommend checking out their documentation  &lt;a href="https://reactrouter.com/docs/en/v6"&gt;here&lt;/a&gt;. Their docs are really clear and they explain things much better than I ever could.&lt;/p&gt;

&lt;p&gt;Below that is just a couple simple dummy components, so that something will actually render when you hit each route. You'll notice that layout is the parent route, and it contains an &lt;code&gt;&amp;lt;Outlet&amp;gt;&lt;/code&gt; that renders any children elements (again - see the official documentation for a much better explanation). These of course should be replaced once you start building out your application, and they should probably be split into their own separate files. But for ease of this tutorial I decided to put them all together so you can clearly see what's being rendered and when.&lt;/p&gt;

&lt;p&gt;Finally you'll need to write your ReactDOM renderer component. In your src folder, create a file called index.js. Inside that you'll place the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import ReactDOM from "react-dom";
import App from "./app";

ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById("app"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code is what React uses to actually render your entire app. Notice in the document.getElementbyId,  you are using the id "app" that you created in your index.html file at the beginning.&lt;/p&gt;

&lt;p&gt;Now time to check everything out! Run the app using &lt;code&gt;npm start&lt;/code&gt; and then in your browser navigate to &lt;em&gt;localhost:3000&lt;/em&gt;. You should see the &lt;em&gt;home&lt;/em&gt; screen rendered on the page. In the URL bar, add "/about" to the end of the current URL and you'll see the &lt;em&gt;about&lt;/em&gt; page rendered. Switch that to "/contact" for the &lt;em&gt;contact&lt;/em&gt; page. The header from &lt;em&gt;layout&lt;/em&gt; should be shown for all routes.&lt;/p&gt;

&lt;p&gt;And that's it! You now have a basic React app with React Router v6. This is of course only one way to do it, and I'm sure others have other methods, but this is what I've found to be simple and effective to get everything going. &lt;/p&gt;

&lt;p&gt;I hope this helped, and saved you some time in the process! If you want to save even more time and not read through everything - although I do recommend going through the steps and typing everything yourself so you can have a good idea of what's going on - you can go to the GitHub repo  &lt;a href="https://github.com/TechWithJordan/react-app-with-router-quickstart"&gt;here&lt;/a&gt; to get everything in one go.&lt;/p&gt;

&lt;p&gt;Thanks for reading! If this article was helpful, or you have any questions or feedback, feel free to leave a comment!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to create Responsive Shopping cart for eCommerce website HTML CSS JS</title>
      <author>Sadee</author>
      <pubDate>Tue, 14 Dec 2021 17:01:51 +0000</pubDate>
      <link>https://dev.to/codewithsadee/responsive-shopping-cart-for-ecommerce-website-html-css-js-383g</link>
      <guid>https://dev.to/codewithsadee/responsive-shopping-cart-for-ecommerce-website-html-css-js-383g</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-gEV3znqu8E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;How to make responsive shopping cart for eCommerce website html css javascript.&lt;br&gt;
create a shopping cart page using javascript functionalities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommended-videos"&gt;
  &lt;/a&gt;
  📹 Recommended Videos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/TTrYjLOJeKs"&gt;How to use ionicon&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#essential-links"&gt;
  &lt;/a&gt;
  🔗 Essential links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://drive.google.com/file/d/10cLnh0ECCAoxifoFGObLFQVNxSdHdNm7/view?usp=sharing"&gt;All Images&lt;/a&gt;&lt;br&gt;
&lt;a href="https://fonts.google.com/specimen/Source+Sans+3"&gt;Font - Source Sans 3&lt;/a&gt;&lt;br&gt;
&lt;a href="https://ionic.io/ionicons"&gt;Ionicon&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.patreon.com/posts/source-code-cart-59909583?utm_medium=clipboard_copy&amp;amp;utm_source=copy_to_clipboard&amp;amp;utm_campaign=postshare"&gt;Source Code&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#like-follow-amp-subscribe-me"&gt;
  &lt;/a&gt;
  👤 Like - Follow &amp;amp; Subscribe Me
&lt;/h2&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/codewithsadee"&gt;https://twitter.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Github : &lt;a href="https://github.com/codewithsadee"&gt;https://github.com/codewithsadee&lt;/a&gt;&lt;br&gt;
YouTube : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
Patreon : &lt;a href="https://www.patreon.com/codewithsadee"&gt;https://www.patreon.com/codewithsadee&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhS87mRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kn6vwn4mulhsx6o69is.png" alt="Buy Me A Coffee" width="225" height="51"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Various Types of Angular Component Selectors</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Tue, 14 Dec 2021 16:59:06 +0000</pubDate>
      <link>https://dev.to/anubhab5/various-types-of-angular-component-selectors-1ec</link>
      <guid>https://dev.to/anubhab5/various-types-of-angular-component-selectors-1ec</guid>
      <description>&lt;p&gt;Today we will be learning the various ways of using the component selector in Angular. &lt;br&gt;
If you are unaware of what is a component in Angular or what are the different parts of it I would recommend you to have a quick read on the following article - &lt;a href="https://dev.to/anubhab5/understanding-angular-component-2bpa"&gt;Understanding-Components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are mainly four different ways you can define a selector in Angular component.&lt;/p&gt;

&lt;p&gt;i. &lt;strong&gt;Tag Selector&lt;/strong&gt; &lt;br&gt;
When a component is created by default it is provided with a tag selector.&lt;br&gt;
&lt;u&gt;app.component.ts&lt;/u&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'MyFirstProject';
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets use the selector in our index.html file in the following way-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8" /&amp;gt;
    &amp;lt;title&amp;gt;MyFirstProject&amp;lt;/title&amp;gt;
    &amp;lt;base href="/" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width,
     initial-scale=1" /&amp;gt;
    &amp;lt;link rel="icon" type="image/x-icon" href="favicon.ico" /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;app-root&amp;gt;&amp;lt;/app-root&amp;gt;
  &amp;lt;/body&amp;gt;
  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;ii. &lt;strong&gt;Class Selector&lt;/strong&gt; &lt;br&gt;
The class selector syntax is similar to the CSS class .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component } from '@angular/core';

@Component({
  selector: '.app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'MyFirstProject';
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the index file we can use the selector in the below way&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;body&amp;gt;
    &amp;lt;div class="app-root"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;iii. &lt;strong&gt;ID Selector&lt;/strong&gt;&lt;br&gt;
The id selector syntax also resemble like the CSS id selector.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  
&lt;/h1&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component } from '@angular/core';

@Component({
  selector: '#app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'MyFirstProject';
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the index.html file lets see how the selector has been used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;body&amp;gt;
    &amp;lt;div id="app-root"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;iv. &lt;strong&gt;Attribute Selector&lt;/strong&gt;&lt;br&gt;
The attribute selector syntax in the component decorator selector metadata looks like [app-name]&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component } from '@angular/core';

@Component({
  selector: '[app-root]',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'MyFirstProject';
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the index.html it will be used as any other attribute inside a html element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div app-root&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now we completed learning the different ways we can write and use the selectors in Angular. &lt;/p&gt;

&lt;p&gt;Hope you enjoyed the post, if you enjoyed it do like and comment.&lt;br&gt;
Also if you want any specific topic please write it in the comment section.&lt;/p&gt;

&lt;p&gt;Coming up next some more advanced features on Angular Component and more Angular topics. So stay tuned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>intermediate</category>
      <category>component</category>
      <category>selector</category>
    </item>
    <item>
      <title>Take your Front-end Team's Productivity to the Next Level</title>
      <author>Haris#</author>
      <pubDate>Tue, 14 Dec 2021 16:58:24 +0000</pubDate>
      <link>https://dev.to/harishash/take-your-front-end-teams-productivity-to-the-next-level-12ia</link>
      <guid>https://dev.to/harishash/take-your-front-end-teams-productivity-to-the-next-level-12ia</guid>
      <description>&lt;p&gt;Whether it's a baseball team or a team of developers, at the end of the day, Team Leads are responsible for bringing the best out of them. Managing a team can be hard, but it doesn’t have to be. You can make sure that your team is performing best to its abilities by providing them with the right tools. Same is the case with blox. It can help you and your team build complete UIs in a jiffy. Here are a few reasons why you should be using blox to maximize the productivity of your Dev Team.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#no-need-to-reinvent-the-wheel"&gt;
  &lt;/a&gt;
  No need to reinvent the wheel
&lt;/h1&gt;

&lt;p&gt;Sometimes the best way to start a project is to avoid making it from scratch. Why waste all the precious time of developers in making a component from scratch when it's already available out there. It is like they say: work smart, not hard. blox helps developers with its huge library of 1500+ drop-in ready components. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-mvps"&gt;
  &lt;/a&gt;
  Building MVPs
&lt;/h1&gt;

&lt;p&gt;For example you’re building a MVP as your next project. You need to put in as little effort as you can while making sure that it is capable of delivering the core functionalities. So, while developing its UI, you can simply use the drop-in ready components from blox. It will save your team from starting everything from scratch while enabling them to focus on the main features of the MVP.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#best-development-standards"&gt;
  &lt;/a&gt;
  Best Development Standards
&lt;/h1&gt;

&lt;p&gt;It is very important that you keep yourself up to date with all the modern development practices that make the project and UIs stand out from the rest of the crowd. You then pass it on to your team so that they are also up to date with the latest trends. For example, Accessibility features are highly important to Google these days and Google encourages websites to give them the utmost priority for better ranking. Now what you can do is to ask your team to use the components from blox which are all WCAG (Web Content Accessibility Guidelines) compliant. This way your team is implementing the best development practices while saving time as well. Hence resulting in increased productivity.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#less-code-more-productivity"&gt;
  &lt;/a&gt;
  Less Code. More Productivity
&lt;/h1&gt;

&lt;p&gt;Memorising syntax for multiple different frameworks is hard. Every developer can tell you that. It is standard practice to look up the syntax from documentation and then implement it accordingly. While it gets the job done, it also takes a lot of time. And when the time comes, developers might have to do this all over again for a new component. This is where blox comes in. It offers 1500+ pre-made components that can fit the needs of every possible scenario. With just a click, developers can paste hundreds of lines of code into their project thus saving them the effort of going back and forth with the syntax implementation.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#between-lowcode-amp-nocode"&gt;
  &lt;/a&gt;
  Between low-code &amp;amp; no-code
&lt;/h1&gt;

&lt;p&gt;If you’ve been working with developers then it might not come as a surprise to you that they don’t like the concept of no-code. Most UI kits get the same treatment from multiple developers out there and blox might come off as just another UI Kit. But blox is more than just a UI Kit. It offers more convenience and is the sweet spot between low-code and no-code. It still allows the developers to make changes to the code according to their preferences and saves them from making every component from scratch. So it's an easy tool to pass off to your development team without getting any backlash.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Developers and Team Leads should always work closely together so that they can better understand each other. As a Team Lead, it's your responsibility to guide them in the right direction and give them access to the tools they need to boost their productivity. I would definitely pass blox off to my development team (if I had any lol). Let me know what you guys think. Would you recommend blox to your teams?&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>devops</category>
      <category>discuss</category>
    </item>
  </channel>
</rss>
