<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why should you build for the Shopify App Store? (+How to Start)</title>
      <author>Erman K√ºpl√º</author>
      <pubDate>Wed, 15 Dec 2021 12:37:25 +0000</pubDate>
      <link>https://dev.to/analyzify/why-should-you-build-for-the-shopify-app-store-how-to-start-1k18</link>
      <guid>https://dev.to/analyzify/why-should-you-build-for-the-shopify-app-store-how-to-start-1k18</guid>
      <description>&lt;p&gt;I realize more and more that the Shopify market is being overlooked by developer communities. Whereas we have been active on the platform for almost a year now and &lt;strong&gt;can‚Äôt be happier&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;In this post, I will try to give you some reasons why you should give Shopify's App Store a chance and shortly share our story and gainings. Feel free to ask your questions in the comments section, I will do my best to answer. &lt;/p&gt;

&lt;p&gt;Here is a quick summary of why this is a great market: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A rapidly growing market with over &lt;strong&gt;1.7 million stores&lt;/strong&gt;, &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;%0 commission&lt;/strong&gt; on Shopify App Store, &lt;/li&gt;
&lt;li&gt;84% Shopify Partners revenue growth (a 84% increase year-over-year)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;$12.5 billion&lt;/strong&gt; in revenue in 2020 and that is 4x the revenue of Shopify‚Äôs own platform. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs now get into the details. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shopify-partners-ecosystem"&gt;
  &lt;/a&gt;
  Shopify Partners‚Äô Ecosystem
&lt;/h2&gt;

&lt;p&gt;It is no secret that Shopify became Shopify because of its partner ecosystem. It is one of the first companies who has an understanding of the value of partners and built an amazing API infrastructure. &lt;/p&gt;

&lt;p&gt;There are countless needs in the e-commerce field for merchants. But Shopify didn‚Äôt opt for   building everything, and Instead, they focused on the core business and left the rest for the partners. &lt;/p&gt;

&lt;p&gt;As an example, it is hard to believe that Shopify‚Äôs core product is missing too many important features, one of them being ‚ÄúSubscriptions‚Äù. You can not add a subscription feature to your e-commerce store if you are not using one of the apps. &lt;/p&gt;

&lt;p&gt;Shopify partners‚Äô ecosystem includes the following elements: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://apps.shopify.com/"&gt;Shopify Apps&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://themes.shopify.com/"&gt;Shopify Themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://experts.shopify.com/"&gt;Shopify Experts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://help.shopify.com/en/affiliates"&gt;Shopify Affiliates&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there are many other professionals or agencies that are not officially included in the ecosystem but still work as a ‚ÄúShopify Developer‚Äù or ‚ÄúShopify Agency‚Äù. This helps Shopify grow even more - and make merchants happy because there are 1000‚Äôs of professionals or resources available when they need help. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shopify-app-store-as-a-market"&gt;
  &lt;/a&gt;
  Shopify App Store as a Market
&lt;/h2&gt;

&lt;p&gt;Merchants have a lot of needs - and they constantly search for apps to solve their problems and make their store better. &lt;/p&gt;

&lt;p&gt;At the moment, there are 6000+ apps in the app store. And a merchant uses 6 apps on average. It is not hard to build an app - or to be accepted to the app store. &lt;/p&gt;

&lt;p&gt;As far as I know, it is one of the rare ‚Äúapp stores‚Äù in the world that &lt;strong&gt;has 0% commission&lt;/strong&gt;. Shopify removed its 20% commission this summer. You don‚Äôt have to pay any commission if your annual revenue is under $1M. &lt;/p&gt;

&lt;p&gt;There are some giant players in the app store as well: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Klaviyo - recently valued at $4B+&lt;/li&gt;
&lt;li&gt;Privy - with over $2B+ valuation&lt;/li&gt;
&lt;li&gt;Bold Commerce - received $40M+ investment&lt;/li&gt;
&lt;li&gt;Oberlo - acquired by Shopify for $15m&lt;/li&gt;
&lt;li&gt;and many others. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, the Shopify app store is not only for big players. There are hundreds of independent developers who build on Shopify and achieve double-digit MRRs in such a short amount of time such as &lt;a href="https://twitter.com/gilgNYC/status/1470378485667483650?s=20"&gt;Gil&lt;/a&gt; and &lt;a href="https://www.indiehackers.com/post/bootstrapped-a-shopify-app-to-500-paying-clients-with-an-mvp-ama-7dbaf8084e"&gt;myself&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-shopify-apps"&gt;
  &lt;/a&gt;
  How to build Shopify apps?
&lt;/h3&gt;

&lt;p&gt;I am not a developer myself. However, I have only heard great things about Shopify‚Äôs API and how easy it is to build things for Shopify. They don‚Äôt have tech-stack requirements. &lt;/p&gt;

&lt;p&gt;You can literally build with any programming language and host your app anywhere you like. You will have to use Shopify‚Äôs API to authenticate and charge users. Shopify apps can work in an EMBEDDED or INDEPENDENT format that opens in a new tab. &lt;/p&gt;

&lt;p&gt;Here‚Äôs a GIF for you to see how it looks üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GhpnDncU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ixn4oodxharjsxtlqzg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GhpnDncU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ixn4oodxharjsxtlqzg.gif" alt="Shopify App Store Embedded Apps" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you see on the example, our app Analyzify works in the EMBEDDED format while the other app opens in the new tab. Most apps choose the ‚ÄúNew Tab‚Äù solution. &lt;/p&gt;

&lt;p&gt;We firstly built Analyzify with Ruby &amp;amp; Rails - now we are switching to No-Code &amp;amp; Low-Code stack. I have seen many apps that use the Laravel framework. It is just about your t&lt;br&gt;
aste and capabilities. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#approval-process-amp-going-to-production"&gt;
  &lt;/a&gt;
  Approval Process &amp;amp; Going to Production:
&lt;/h3&gt;

&lt;p&gt;Our app was approved within 5 days. We initially received a rejection because of the wrong use of the payment gateway. We have made the asked changes and it got immediately approved. &lt;/p&gt;

&lt;p&gt;I can only say good things about Shopify Partners‚Äô support. They are very helpful and willing to answer the questions you should have. We have also got some support from Shopify developers‚Äô Slack group. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-sales-on-the-shopify-app-store"&gt;
  &lt;/a&gt;
  Getting Sales on the Shopify App Store:
&lt;/h3&gt;

&lt;p&gt;The app developers keep giving the same suggestion: ‚ÄúDon‚Äôt rely on the app store for the sales‚Äù. That‚Äôs true: while there are too many searches happening on the app store,you should still look for alternative customer acquisition channels. &lt;/p&gt;

&lt;p&gt;At Analyzify, we have only gone for organic channels such as content marketing, video marketing, SEO, and Shopify community forums. Many app developers are using Shopify App Store Ads that work with the PPC model. &lt;/p&gt;

&lt;p&gt;Merchants don‚Äôt really rely on the App Store, but instead, they search Google. You will find a lot of listicles like ‚ÄúThe Best Shopify Apps for X‚Äù. You will need to make yourself visible there - and probably make your own list just like we did: &lt;strong&gt;&lt;a href="https://analyzify.app/google-tag-manager-shopify/apps"&gt;Shopify Google Tag Manager Apps&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;I also see a lot of app developers who rely on merchants‚Äô communities such as Facebook &amp;amp; Slack Groups, Twitter conversations, Discord Channels, and so on. &lt;/p&gt;

&lt;p&gt;Depending on your competition, you might have to be a bit more creative and hard-working here. All will work if you create a &lt;strong&gt;good product&lt;/strong&gt; and make your &lt;strong&gt;clients happy&lt;/strong&gt;. Simple as that. &lt;/p&gt;

&lt;p&gt;As in almost every app store, &lt;strong&gt;reviews are crucial&lt;/strong&gt; on the Shopify app store as well. The merchants don‚Äôt tend to give reviews for regular apps and experiences. You need to provide exceptional customer support to get proper reviews. The sales will go way higher once you pass 10+ positive reviews. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--woo8P5Fp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxrus7x6dwbswco63haw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--woo8P5Fp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxrus7x6dwbswco63haw.jpeg" alt="Analyzify - Shopify Analytics App Reviews" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-kind-of-apps-should-you-build-for-shopify"&gt;
  &lt;/a&gt;
  What kind of apps should you build for Shopify?
&lt;/h3&gt;

&lt;p&gt;Well, that‚Äôs a great question that everybody asks. There are several methods to start with: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Serve to Shopify clients&lt;/strong&gt;. Provide services to them on your domain. That‚Äôll help you understand and get to know them. They will immediately start telling you ‚ÄúOnly if I had an app for X‚Äù, etc. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hang out in the &lt;strong&gt;Shopify community forums&lt;/strong&gt; &amp;amp; Reddit &amp;amp; Twitter. Merchants keep asking ‚ÄúIs there an app for X?‚Äù or complaining about the apps that they are using. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Study the app store. &lt;strong&gt;Check the apps with negative reviews&lt;/strong&gt; and try to understand if you can make that negative experience better. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep reading below - I‚Äôll mention some latest updates from the Shopify ecosystem. &lt;/p&gt;

&lt;p&gt;I would also recommend not to fear the competition. Of course, don‚Äôt go and create a ‚ÄúPage Builder App‚Äù where top developers have 2000+ reviews. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SgVJhwto--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upgz4f6qju9h2az2v9c6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SgVJhwto--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upgz4f6qju9h2az2v9c6.jpg" alt="Shopify App Store - Page Builders" width="880" height="566"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find a smaller competition and make things better. You will have the advantage of building from scratch and building the things the competitors are too busy to do. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#latest-updates-amp-opportunities-on-shopify-world"&gt;
  &lt;/a&gt;
  Latest Updates &amp;amp; Opportunities on Shopify World
&lt;/h2&gt;

&lt;p&gt;Shopify keeps opening new developer spaces for partners. They announced a few major upcoming changes in the latest Shopify unite event. You might want to take a closer look at that  because the existing Shopify partners are always too busy with their roadmap and clients. &lt;/p&gt;

&lt;p&gt;*&lt;em&gt;&lt;a href="https://www.shopify.com/partners/blog/shopify-online-store"&gt;Online Store 2.0&lt;/a&gt;: *&lt;/em&gt;&lt;br&gt;
They released a large update on how to build themes. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Online Store 2.0 opens up massive opportunities for developers building themes and apps for Shopify merchants. We‚Äôve rebuilt the online store experience from the ground up, and are introducing a new set of developer tools to help you create amazing experiences for merchants and shoppers. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://themes.shopify.com/"&gt;Theme Store is back again&lt;/a&gt;: &lt;br&gt;
Shopify had closed their theme stores but now it is reopened. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://hydrogen.shopify.dev/"&gt;Headless Shopify (React!)&lt;/a&gt;: &lt;br&gt;
Well, of course, they are going after the headless market. They announced Shopify Hydrogen. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hydrogen's React-based framework for building custom storefronts on Shopify gives you everything you need to start fast, build fast, and deliver the best-personalized shopping experiences.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;NFTs: &lt;br&gt;
Shopify is also looking to integrate with the NFT market. They recently released &lt;a href="https://help.shopify.com/en/manual/products/digital-service-product/nfts"&gt;a BETA program for this&lt;/a&gt; - only available in the US for now. &lt;/p&gt;

&lt;p&gt;Final Words: &lt;/p&gt;

&lt;p&gt;I strongly recommend you build something on Shopify depending on your skills. Create an MVP version, watch the market closely and enter when you feel ready. &lt;/p&gt;

&lt;p&gt;We have reached 500+ merchants and over $15K MRR only in 8 months. This is huge for us considering it was our first attempt on the Shopify app store. Now we started building more apps and new features for our existing app. &lt;/p&gt;

&lt;p&gt;I am more than willing to answer your questions. Leave it in the comments section! &lt;/p&gt;

</description>
      <category>shopify</category>
      <category>shopifyapp</category>
      <category>shopifypartners</category>
      <category>analzify</category>
    </item>
    <item>
      <title>Streaming Data to OpenSearch</title>
      <author>Matt Lewis</author>
      <pubDate>Wed, 15 Dec 2021 12:24:02 +0000</pubDate>
      <link>https://dev.to/aws-heroes/streaming-data-to-opensearch-1gb2</link>
      <guid>https://dev.to/aws-heroes/streaming-data-to-opensearch-1gb2</guid>
      <description>&lt;p&gt;In previous posts I described how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aws-heroes/real-time-streaming-for-amazon-qldb-3c3c"&gt;Stream data from QLDB to DynamoDB&lt;/a&gt; to support single-digit latency and infinitely scalable key-value enquiries, and&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aws-heroes/streaming-data-from-amazon-qldb-to-elasticsearch-78c"&gt;Stream data from QLDB to ElasticSearch&lt;/a&gt; to support rich text search and downstream analytics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was all created in a source code repository that anyone could try out for themselves. Recently, &lt;a href="https://twitter.com/sheenbrisals"&gt;Sheen Brisals&lt;/a&gt; wrote a great post on &lt;a href="https://betterprogramming.pub/why-serverless-teams-should-embrace-continuous-refactoring-217d4e67db5b"&gt;"Why Serverless Teams should embrace Continuous Refactoring"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Given that, I thought I would go back and update the repository, in line with new features and changes over the past 12 months:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Updating the QLDB permissions mode to &lt;code&gt;STANDARD&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Implementing fine grained access control for all functions accessing QLDB&lt;/li&gt;
&lt;li&gt;Updating to the latest version of Nodejs&lt;/li&gt;
&lt;li&gt;Switching from &lt;code&gt;webpack&lt;/code&gt; to &lt;code&gt;esbuild&lt;/code&gt; for tree shaking&lt;/li&gt;
&lt;li&gt;Migrating from ElasticSearch to OpenSearch&lt;/li&gt;
&lt;li&gt;Configuring Amazon Cognito authentication for OpenSearch Dashboards&lt;/li&gt;
&lt;li&gt;Implementing custom metrics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blog post focuses on the last three updates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-opensearch-service"&gt;
  &lt;/a&gt;
  Amazon OpenSearch Service
&lt;/h2&gt;

&lt;p&gt;AWS &lt;a href="https://aws.amazon.com/blogs/aws/amazon-elasticsearch-service-is-now-amazon-opensearch-service-and-supports-opensearch-10/"&gt;announced&lt;/a&gt; on 8th Sept 2021 that they had renamed Amazon ElasticSearch Service to Amazon OpenSearch Service. This is an Apache 2.0-licensed fork of ElasticSearch that is community-driven and open source.&lt;/p&gt;

&lt;p&gt;In the previous deployment, ElasticSearch was configured to run within your VPC. This is still the recommended approach from a security standpoint. However, to make things simpler for people to get up and running, I wanted to deploy OpenSearch with a public endpoint instead. In addition, I wanted to protect access to OpenSearch Dashboards using Amazon Cognito.&lt;/p&gt;

&lt;p&gt;The full source code can be found at &lt;a href="https://github.com/AWS-South-Wales-User-Group/qldb-simple-demo"&gt;QLDB Simple Demo&lt;/a&gt;, but lets walk through the main steps involved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-amazon-cognito"&gt;
  &lt;/a&gt;
  Setting up Amazon Cognito
&lt;/h2&gt;

&lt;p&gt;The first thing to setup in our &lt;code&gt;serverless.yml&lt;/code&gt; file is the Cognito User Pool. This provides the user directory to control access to OpenSearch Dashboards. The setup below asks for name and email attributes at sign up, as well as a username and password. The email will be verified by entering a code that is sent to the specified email address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OSUserPool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Cognito::UserPool&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;UsernameConfiguration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;CaseSensitive&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
    &lt;span class="na"&gt;AutoVerifiedAttributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;email&lt;/span&gt;
    &lt;span class="na"&gt;UserPoolName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;qldb-demo-user-pool&lt;/span&gt;
    &lt;span class="na"&gt;Schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;email&lt;/span&gt;
        &lt;span class="na"&gt;AttributeDataType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
        &lt;span class="na"&gt;Mutable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;Required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt;
        &lt;span class="na"&gt;AttributeDataType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
        &lt;span class="na"&gt;Mutable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;Required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is the UserPoolDomain. This provides a domain name to be used as part of the hosted UI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OSUserPoolDomain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Cognito::UserPoolDomain&lt;/span&gt; 
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;UserPoolId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;OSUserPool&lt;/span&gt; 
    &lt;span class="na"&gt;Domain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;qldb-opensearch-demo"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, we define the Cognito Identity Pool. We use this to provide a way to grant temporary AWS credentials for users. This is necessary, as to support a public endpoint on the OpenSearch domain, we need to enable fine-grained access control or apply a restrictive access policy. We don't configure the CognitoIdentityProviders, as these will be created for us by the OpenSearch service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OSIdentityPool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Cognito::IdentityPool&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;IdentityPoolName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;qldb-demo-identity-pool&lt;/span&gt;
    &lt;span class="na"&gt;AllowUnauthenticatedIdentities&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we create two roles, one for an authenticated identity, and one for an unauthenticated identity. The one for the authenticated identity is shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;CognitoAuthorizedRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;AWS::IAM::Role"&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;AssumeRolePolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;2012-10-17"&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Allow"&lt;/span&gt;
            &lt;span class="na"&gt;Principal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
            &lt;span class="na"&gt;Federated&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;cognito-identity.amazonaws.com"&lt;/span&gt;
            &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sts:AssumeRoleWithWebIdentity"&lt;/span&gt;
            &lt;span class="na"&gt;Condition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;StringEquals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
                &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;cognito-identity.amazonaws.com:aud"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;OSIdentityPool&lt;/span&gt;
            &lt;span class="s"&gt;ForAnyValue:StringLike:&lt;/span&gt;
                &lt;span class="s"&gt;"cognito-identity.amazonaws.com:amr": authenticated&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is a trust policy for an authenticated role. It allows a federated user from &lt;code&gt;cognito-identity.amazonaws.com&lt;/code&gt; (the issuer of the OpenID Connect token) to assume this role. It also places a condition, that restricts the &lt;code&gt;aud&lt;/code&gt; of the token (the client ID of the relying party) to be the Cognito Identity Pool, and the &lt;code&gt;amr&lt;/code&gt; of the token contains the value &lt;code&gt;authenticated&lt;/code&gt;. When Amazon Cognito creates a token, it will set the &lt;code&gt;amr&lt;/code&gt; of the token to be either &lt;code&gt;unauthenticated&lt;/code&gt; or &lt;code&gt;authenticated&lt;/code&gt;. There is no policy attached to this identity, as we are going to control access to OpenSearch through a resource policy attached to the OpenSearch domain.&lt;/p&gt;

&lt;p&gt;After defining the two roles with the associated policies, we map them to the Identity Pool using an IdentityPoolRoleAttachment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;IdentityPoolRoleMapping&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;AWS::Cognito::IdentityPoolRoleAttachment"&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;IdentityPoolId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;OSIdentityPool&lt;/span&gt;
    &lt;span class="na"&gt;Roles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;authenticated&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;CognitoAuthorizedRole.Arn&lt;/span&gt;
        &lt;span class="na"&gt;unauthenticated&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;CognitoUnAuthorizedRole.Arn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then its time to define a role that the OpenSearch service can assume, that includes permissions to configure the Cognito user and identity pools and use them for authentication. This can be done using the &lt;code&gt;AmazonOpenSearchServiceCognitoAccess&lt;/code&gt; AWS-managed policy as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OSCognitoRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;AWS::IAM::Role'&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;RoleName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CognitoAccessForAmazonOpenSearch'&lt;/span&gt;
    &lt;span class="na"&gt;AssumeRolePolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;2012-10-17'&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
            &lt;span class="s"&gt;Principal&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;es.amazonaws.com&lt;/span&gt;
            &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;sts:AssumeRole'&lt;/span&gt;
    &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/"&lt;/span&gt;
    &lt;span class="na"&gt;ManagedPolicyArns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;arn:aws:iam::aws:policy/AmazonOpenSearchServiceCognitoAccess&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, its time to create the OpenSearch domain, with the &lt;code&gt;CognitoOptions&lt;/code&gt; referencing the role defined above, as well as the Cognito user and identity pool.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OpenSearch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::OpenSearchService::Domain&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;DomainName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#{AWS::StackName}"&lt;/span&gt;
    &lt;span class="na"&gt;EngineVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;OpenSearch_1.0'&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;CognitoOptions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Enabled&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;IdentityPoolId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;OSIdentityPool&lt;/span&gt;
        &lt;span class="na"&gt;RoleArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;OSCognitoRole.Arn&lt;/span&gt;
        &lt;span class="na"&gt;UserPoolId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;OSUserPool&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;AccessPolicies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;2012-10-17"&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
            &lt;span class="s"&gt;Principal&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;AWS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;CognitoAuthorizedRole.Arn&lt;/span&gt;
            &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;es:ESHttpGet&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;es:ESHttpPost&lt;/span&gt;
            &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:es:${self:provider.region}:#{AWS::AccountId}:domain/#{AWS::StackName}/*&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
            &lt;span class="s"&gt;Principal&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;AWS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
          &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;es:ESHttp*&lt;/span&gt;
            &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:es:${self:provider.region}:#{AWS::AccountId}:domain/#{AWS::StackName}/*&lt;/span&gt;
            &lt;span class="na"&gt;Condition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;StringLike&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                    &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;aws:PrincipalArn"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:iam::#{AWS::AccountId}:role/qldb-streams-es-lambda-role-${self:provider.stage}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All access to the domain is controlled through the resource policy that is applied. The first statement allows the authenticated Cognito user to access the domain. The second statement allows access to the domain from the execution role attached to the AWS Lambda function. You might notice that this is defined in a different way. A circular dependency exists, as the Lambda function needs the OpenSearch domain endpoint which is set up as an environment variable. Using a condition and the &lt;code&gt;aws:PrincipalArn&lt;/code&gt; key allows you to compare the ARN of the principal that made the request with the ARN specified in the policy at runtime, rather than at deployment time which otherwise failed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-opensearch-dashboard"&gt;
  &lt;/a&gt;
  Accessing OpenSearch Dashboard
&lt;/h2&gt;

&lt;p&gt;Now the stack is deployed, we can access the OpenSearch Dashboard. The easiest place to start is by launching the Hosted UI. You can find the link in the Cognito User Pool under App Client Settings:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R6-_QJFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5ojzhsvonhh4ovq4yp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R6-_QJFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5ojzhsvonhh4ovq4yp1.png" alt="Cognito Launch HostedUI" width="880" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will allow you to sign up and verify your new account with a code sent to your email address. Once verified and signed in, you can click the heading to visualise and analyse your data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iyc368DJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu1gxownymzf0e20n7zj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iyc368DJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu1gxownymzf0e20n7zj.png" alt="OpenSearch Dashboards" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, click the button to add your data:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xEt46Bd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qovhkdf8b6kf29xy3x80.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xEt46Bd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qovhkdf8b6kf29xy3x80.png" alt="OpenSearch-Dashboards-AddData" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, create an index pattern. If you are using the sample applications, then the index pattern is simply &lt;code&gt;licence&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fS6qoKVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/319f8hdke2bj2m5gsso0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fS6qoKVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/319f8hdke2bj2m5gsso0.png" alt="Define-Index-Pattern" width="880" height="201"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you can go into &lt;code&gt;Dev Tools&lt;/code&gt; and run queries, use metrics aggregation and combine filter and query contexts amongst other features. You can also create visualisations from the raw data in OpenSearch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-cloudwatch-metrics"&gt;
  &lt;/a&gt;
  Custom CloudWatch Metrics
&lt;/h2&gt;

&lt;p&gt;In a previous blog post on &lt;a href="https://dev.to/aws-heroes/tips-to-prevent-a-serverless-wreck-15af"&gt;tips to prevent a serverless wreck&lt;/a&gt;, I strongly advocated the use of metrics to monitor an application. The CloudWatch Embedded Metric Format allows you to create custom metrics, that can be used for visualisations and alarming for real-time incident detection.&lt;/p&gt;

&lt;p&gt;In this sample application, an AWS Lambda function is used to consume an aggregated set of records from a Kinesis Data Stream, and write any new records (inserts, updates or deletes) to OpenSearch. Each request to OpenSearch hits a REST API endpoint, and returns an HTTP Status Code. We can use the returned HTTP Status Code as a custom metric as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createMetricsLogger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Unit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-embedded-metrics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;metrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMetricsLogger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setNamespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OpenSearch Status Codes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putDimensions&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`HTTP_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putMetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ProcessedRecords&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code sets the namespace to be 'OpenSearch Status Codes'. This is the name that will appear in custom namespaces in CloudWatch metrics. We use the returned status code as the dimension. A dimension is a name/value pair that is part of the identity of a metric. Each time we process a record, we use a count of 1 as the unit.&lt;/p&gt;

&lt;p&gt;This results in a log entry in CloudWatch that looks similar to below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"LogGroup"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"qldb-streams-es-dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ServiceName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"qldb-streams-es-dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ServiceType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AWS::Lambda::Function"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"StatusCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"HTTP_200"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"executionEnvironment"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AWS_Lambda_nodejs14.x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"memorySize"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"512"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"functionVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"$LATEST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"logStreamId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021/12/11/[$LATEST]6924daa324e8482099ebcad5c1168c9a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"_aws"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"Timestamp"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1639244821514&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"CloudWatchMetrics"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"Dimensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"LogGroup"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"ServiceName"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"ServiceType"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"StatusCode"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"Metrics"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ProcessedRecords"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"Unit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Count"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"Namespace"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"OpenSearch Status Codes"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ProcessedRecords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When streaming records from Kinesis to OpenSearch, there were a handful of status codes commonly returned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP 200 - a successful update to an existing document with an HTTP POST&lt;/li&gt;
&lt;li&gt;HTTP 201 - a successful insert of a new document, or completely overwriting an existing document with an HTTP PUT&lt;/li&gt;
&lt;li&gt;HTTP 409 - an error where the version of the document attempted to be inserted is less than or equal to the one that already exists. This can happen as each data record produced by a QLDB stream is delivered to Kinesis at least once, the same records can appear multiple times, and there are no ordering guarantees. The sample application implements external versioning to resolve this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After streaming a number of records to OpenSearch, we can create a simple CloudWatch Dashboard from the custom metric that looks as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EUsg1XhV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkbstxlq56ib5ryx1bdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EUsg1XhV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkbstxlq56ib5ryx1bdg.png" alt="OpenSearch-Custom-Metrics" width="880" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So there we have it. This post has shown how to quickly get up and running with OpenSearch, configuring Cognito to protect OpenSearch Dashboards, and set up a custom CloudWatch Metrics dashboard for monitoring the HTTP Status Codes that are returned. Please reach out if you have any feedback or suggestions.&lt;/p&gt;

&lt;p&gt;To find out more, read the &lt;a href="https://qldbguide.com/"&gt;QLDB Guide&lt;/a&gt;, follow the curated list of articles, tools and resources at &lt;a href="https://github.com/mlewis7127/awesome-qldb"&gt;Awesome QLDB&lt;/a&gt; or try it out our online demo to see QLDB in action at &lt;a href="https://demo.qldbguide.com/"&gt;QLDB Demo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Development in Apple M1</title>
      <author>Emili Parreno</author>
      <pubDate>Wed, 15 Dec 2021 12:03:36 +0000</pubDate>
      <link>https://dev.to/eparreno/development-in-apple-m1-4d4l</link>
      <guid>https://dev.to/eparreno/development-in-apple-m1-4d4l</guid>
      <description>&lt;p&gt;I got a new laptop one week ago and I've been investigating different ways of setting up our dev environment. Here are my findings&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-machines"&gt;
  &lt;/a&gt;
  Virtual Machines
&lt;/h2&gt;

&lt;p&gt;There are different options&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Virtual Box doesn't work as of today in Apple M1&lt;/li&gt;
&lt;li&gt;Parallels, nice but you have to buy a license&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mac.getutm.app"&gt;UTM&lt;/a&gt;, very nice UI on top of QEMU. My preferred choice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you run ARM virtual machines, it's fast as hell, feels like a native app, probably having a M1 Max with 10 cores and 64Gb of RAM helps bit :) but I wanted to use mainly x86 VMs and they are not so fast. I'll definitely use UTM in the future for running ARM based VMs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  Docker
&lt;/h2&gt;

&lt;p&gt;If you run everything inside Docker, it works out of the box. I didn't experience any issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apples-rosetta"&gt;
  &lt;/a&gt;
  Apple's Rosetta
&lt;/h2&gt;

&lt;p&gt;It turns out that the best virtualisation software comes already with you default MacOS installation and it's called Rosetta!&lt;/p&gt;

&lt;p&gt;Here's how I set up my dev laptop &lt;/p&gt;

&lt;p&gt;Duplicate your Terminal or iTerm app and give it a different name&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1KlV1Xgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7jtbbgix3s19gh75ehv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1KlV1Xgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7jtbbgix3s19gh75ehv.png" alt="Image description" width="320" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I ended up with&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--loxiuiXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76gkem72xxsukti1lx03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--loxiuiXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76gkem72xxsukti1lx03.png" alt="Image description" width="318" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the x86 terminal, get info details (CMD + i) and check "Open using Rosetta"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uTj6PZiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srebp6gu8wvrguznjfjt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uTj6PZiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srebp6gu8wvrguznjfjt.png" alt="Image description" width="388" height="374"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it. Yes, really, that's all you need. Open your x86 terminal and you have an emulated x86 environment that just works.&lt;/p&gt;

&lt;p&gt;If you install Hombrew in both envs it will be installed in different folders, the traditional &lt;code&gt;/usr/local/Cellar&lt;/code&gt; for Intel based and the new one &lt;code&gt;opt/hombrew/Cellar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I have a check in my &lt;code&gt;.zshrc&lt;/code&gt; to load paths based on the arch. With that approach you need to be mindful about the arch you are running and loading the proper paths or executing the right code after login.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if [ $(arch) = 'arm64' ]; then
  ...
else
  ...
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also added &lt;code&gt;$(arch)&lt;/code&gt; to my prompt to know in which environment I am&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8tgVnPUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20taxcgaexwavzu4koay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8tgVnPUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20taxcgaexwavzu4koay.png" alt="Image description" width="289" height="81"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h2&gt;

&lt;p&gt;If you install the same app or library in both environments they may clash. Let's say you install MySQL in both ARM and x86 using Homebrew and you want to link the binary, you should choose on what env you do it. Just be careful about that.&lt;br&gt;
For me hasn't been a problem because I mainly use x86 so I didn't install anything in the ARM env. Just avoid installing the same stuff in both envs.&lt;br&gt;
If you really need to use both arches, an alternative could be using Rosetta to emulate x86 and UTM to run ARM based VMs so you don't risk messing with duplicated libraries or apps.&lt;/p&gt;

</description>
      <category>apple</category>
      <category>m1</category>
      <category>silicon</category>
      <category>arm</category>
    </item>
    <item>
      <title>How to Build a Minimum Viable Product (MVP)</title>
      <author>Codica</author>
      <pubDate>Wed, 15 Dec 2021 11:56:47 +0000</pubDate>
      <link>https://dev.to/codicacom/how-to-build-a-minimum-viable-product-mvp-3lk1</link>
      <guid>https://dev.to/codicacom/how-to-build-a-minimum-viable-product-mvp-3lk1</guid>
      <description>&lt;p&gt;If you are a businessman who strives for a digital product, planning to build one is a matter of time. Until then, the idea is everything you got. So what comes next?&lt;/p&gt;

&lt;p&gt;Don't be in a rush to get your product to the buyers without testing it. An MVP approach comes as a great tool for everyone who wants to validate their business idea. This way, you will understand what users are ready to pay for once they open your website or app.&lt;/p&gt;

&lt;p&gt;Let‚Äôs finally get to know &lt;a href="https://www.codica.com/blog/how-to-create-minimum-viable-product/"&gt;how to build an MVP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Problem discovery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, make sure your product fixes any users‚Äô issues. According to &lt;a href="https://www.cbinsights.com/research/startup-failure-reasons-top/"&gt;CB Insights&lt;/a&gt;, lack of market demand is the second most common reason why startups fail.&lt;/p&gt;

&lt;p&gt;Several customer research insights you need to know before getting started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why do they need your product?&lt;/li&gt;
&lt;li&gt;How will your product help?&lt;/li&gt;
&lt;li&gt;What problems will it solve?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Knowing what customers are dissatisfied with while using other products gives you a glimpse of a new market solution. That's how insightful feedback from a survey can help you define your product goals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Conduct market research&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As you‚Äôre outlining the product idea, you might find an already existing solution out there. So it‚Äôs time to exercise market analysis to outsmart your competitors.&lt;/p&gt;

&lt;p&gt;Take the other companies' products and investigate their strengths and weaknesses in-depth. Ideally, do a hands-on review. It helps you learn from others' mistakes, thus delivering a better alternative to the existing solutions.&lt;/p&gt;

&lt;p&gt;In case some competitors‚Äô features are better than yours, work further on your idea to bring substantial benefits to the customers.&lt;/p&gt;

&lt;p&gt;Market and competitor research will also help you find more details about your target audience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Prioritize your product's features&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Firstly, define the user flow. These are steps taken to get the right outcome while using an app or a website. Getting to know them enables you to outline the essential set of features.&lt;/p&gt;

&lt;p&gt;To order an Uber taxi, for instance, you should enter the pickup address, the destination, and then click ‚ÄúConfirm.‚Äù&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dUqJZykn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4pf5ks0fctezabxr185.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dUqJZykn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4pf5ks0fctezabxr185.jpg" alt="Image description" width="880" height="740"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In sum, you better get your product's features prioritized by their importance.&lt;/p&gt;

&lt;p&gt;And there's more to come. Value Proposition Canvas (VPC) will help you to ensure the product-market fit. Here are three key points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jobs-to-be-done;&lt;/li&gt;
&lt;li&gt;Pains;&lt;/li&gt;
&lt;li&gt;Gains.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fill in each component above to define how an MVP can satisfy your customers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-2m72XN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yxk285850unk8n2uqse.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-2m72XN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yxk285850unk8n2uqse.jpg" alt="Image description" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.strategyzer.com/canvas/value-proposition-canvas"&gt;https://www.strategyzer.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is an example of Tesla VPC exercising the best fit to the market.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2W0SFDEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fis2k3lwuxxy7fp3mui.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2W0SFDEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fis2k3lwuxxy7fp3mui.jpg" alt="Image description" width="880" height="623"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://designabetterbusiness.com/2017/10/12/how-to-really-understand-your-customer-with-the-value-proposition-canvas/"&gt;https://designabetterbusiness.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rank each point according to their value ‚Äî from "extra" to "must-have." So, features heavily dependent on customers' needs set the foundation for a unique selling point.&lt;/p&gt;

&lt;p&gt;Thus, prioritize the features by grouping them into "essentials," "cool-to-see," and "extras."&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Create a prototype&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you finish the market research, it is time to put theory into action. To reduce expenses and save time, you can choose to &lt;a href="https://www.codica.com/blog/poc-vs-mvp/"&gt;create a prototype&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to test your idea, select the group of early adopters. They are potential customers waiting for someone to offer the desired product.&lt;/p&gt;

&lt;p&gt;At this point, you understand precisely whether your idea is worth investing more time and money in. Or vice versa, the cancellation of your product creation might seem more reasonable based on your research results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Build-measure-learn, repeat&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you kick off the &lt;a href="https://www.codica.com/services/custom-software-development/"&gt;development stage&lt;/a&gt;, you should continuously consider the feedback on your MVP. This approach can be set out in three words: &lt;strong&gt;Build-Measure-Learn&lt;/strong&gt; (BML).&lt;/p&gt;

&lt;p&gt;Such a feedback loop makes a whole point of the Lean Startup methodology.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="http://theleanstartup.com/principles"&gt;http://theleanstartup.com/principles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let‚Äôs take a look at all three cycle stages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We want to emphasize four options to develop a solution: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bring a technical co-founder&lt;/strong&gt;&lt;br&gt;
A tech startup is always a brainchild of business and science. That's why Apple's technical co-founder Steve Wozniak deserves so many credits. In other words, your tech co-founder will be in charge of the tech side of the process. Importantly, they should be inspired as much as you are.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pick a freelancer or a freelancing team&lt;/strong&gt;&lt;br&gt;
Alternatively to technical co-founders, you can hire contractual workers from dozens of websites like Upwork or Fiverr.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hire in-house developers&lt;/strong&gt;&lt;br&gt;
In contrast to previous options, you ‚Äãcan also hire a developer in-house. You can keep track of their progress at any moment. Meanwhile, this might also be expensive as an experienced specialist is keen on both exciting and high-paying projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Find an MVP development company&lt;/strong&gt;&lt;br&gt;
Sufficient experience in &lt;a href="https://www.codica.com/services/mvp-development/"&gt;MVP development&lt;/a&gt; is a huge advantage to benefit from. So you will surely get what you need working with a software agency.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Measure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Blurred success indicators will prevent you from seeing the actual progress. That is why any product development involves calculating the results obtained within the build stage.&lt;/p&gt;

&lt;p&gt;Take into account Customer Acquisition Cost (CAC) and Average Revenue Per User (ARPU) measures. Let's see how we can calculate them:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAC&lt;/strong&gt; - by dividing the whole amount spent on marketing and sales by the total number of customers acquired over a given time period.&lt;br&gt;
&lt;strong&gt;ARPU&lt;/strong&gt; - by dividing the revenue of a certain period by the total number of active users during that period.&lt;/p&gt;

&lt;p&gt;Their correlation will help you realize whether it is beneficial to go ahead with product development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Draw the line where your project should ‚Äúpersevere,‚Äù and where it should ‚Äúpivot.‚Äù&lt;/p&gt;

&lt;p&gt;Persevere means moving on, preventing the project from extras.&lt;/p&gt;

&lt;p&gt;At this point, your MVP is ready for release. All collected feedback can be used for the upcoming improvements.&lt;/p&gt;

&lt;p&gt;Pivot causes redirecting of the product strategy. So, you should change some features or rethink your development strategy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feedback&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Collecting feedback is vital once you are done with the BML cycle. The most prominent example of doing so is interviewing the customers.&lt;/p&gt;

&lt;p&gt;Where to find the very first users? The most efficient ways are socials ‚Äî Facebook and Linkedin, for instance, Quora answers, forums, and Q&amp;amp;A websites like Reddit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs time to wrap our thoughts. An MVP concept helps you to exercise your idea prior to creating a fully-built product. It helps you avoid most pitfalls initially instead of fixing the project on the go with cost climbs.&lt;/p&gt;

&lt;p&gt;For more information concerning MVP development, read &lt;a href="https://www.codica.com/blog/how-to-create-minimum-viable-product/"&gt;our full blog article&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>mvp</category>
      <category>guide</category>
      <category>webdev</category>
    </item>
    <item>
      <title>For In and For Of in Javascript</title>
      <author>Ustariz Enzo</author>
      <pubDate>Wed, 15 Dec 2021 11:51:36 +0000</pubDate>
      <link>https://dev.to/ziratsu/for-in-and-for-of-in-javascript-1og2</link>
      <guid>https://dev.to/ziratsu/for-in-and-for-of-in-javascript-1og2</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow developers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's learn the differences between the loops &lt;em&gt;For... In&lt;/em&gt; and &lt;em&gt;For... Of&lt;/em&gt; in Javascript in less than a minute!&lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/YHCaP7DA4AE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-for-of-loop"&gt;
  &lt;/a&gt;
  1. The &lt;em&gt;For... Of&lt;/em&gt; loop.
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;For... Of&lt;/em&gt; loop is used to iterate through iterable elements, for example arrays, strings, nodelists, etc. It has the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// in the console :&lt;/span&gt;
&lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will basicaly create a new constant for each element.&lt;/p&gt;

&lt;p&gt;If you use a string, it'll be exactly the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// in the console :&lt;/span&gt;
&lt;span class="c1"&gt;// "1"&lt;/span&gt;
&lt;span class="c1"&gt;// "2"&lt;/span&gt;
&lt;span class="c1"&gt;// "3"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-the-for-in-loop"&gt;
  &lt;/a&gt;
  2. The &lt;em&gt;For... In&lt;/em&gt; loop.
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;For... In&lt;/em&gt; loop is used to iterate through an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tiger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;paws&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;tiger&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tiger&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// in the console :&lt;/span&gt;
&lt;span class="c1"&gt;// "paws" 4&lt;/span&gt;
&lt;span class="c1"&gt;// "weight" 300&lt;/span&gt;
&lt;span class="c1"&gt;// "height" 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can access the property name with "prop" and/or the property value with tiger[prop].&lt;/p&gt;

&lt;p&gt;You now know the differences between these two &lt;em&gt;loops&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>React JS Project With Dark Theme for Beginners</title>
      <author>Shaif Arfan</author>
      <pubDate>Wed, 15 Dec 2021 11:36:46 +0000</pubDate>
      <link>https://dev.to/shaifarfan08/react-js-project-with-dark-theme-for-beginners-4njc</link>
      <guid>https://dev.to/shaifarfan08/react-js-project-with-dark-theme-for-beginners-4njc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#artistic"&gt;
  &lt;/a&gt;
  Artistic üì∏
&lt;/h2&gt;

&lt;p&gt;Made with ‚ù§Ô∏è by &lt;a href="http://instagram.com/shaifarfan08/"&gt;Shaif Arfan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live preview: &lt;a href="https://wc-artistic.netlify.app/"&gt;https://wc-artistic.netlify.app/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Watch on YouTube: &lt;a href="https://youtu.be/DTR2IbNBfPA"&gt;https://youtu.be/DTR2IbNBfPA&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code: &lt;a href="https://github.com/ShaifArfan/artistic"&gt;https://github.com/ShaifArfan/artistic&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#project-description"&gt;
  &lt;/a&gt;
  Project Description
&lt;/h2&gt;

&lt;p&gt;Artistic is a landing page for a photography studio. This is a well-designed and &lt;code&gt;responsive&lt;/code&gt; landing page with &lt;code&gt;dark mode&lt;/code&gt; feature. The main purpose of this project is to show how to create a landing page with &lt;code&gt;dark mode&lt;/code&gt; feature using &lt;code&gt;ReactJs&lt;/code&gt;.&lt;br&gt;
We will be using React Context API to toggle &lt;code&gt;dark mode&lt;/code&gt; feature. Hope you enjoy it!.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-we-are-going-to-learnuse"&gt;
  &lt;/a&gt;
  What we are going to learn/use
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;ReactJs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://styled-components.com/"&gt;Styled Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/context.html"&gt;React Context API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/react-icons"&gt;React Icons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/react-scroll"&gt;React Scroll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More . . .&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic ReactJs knowledge&lt;/li&gt;
&lt;li&gt;Basic HTML, CSS knowledge&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#starter-files"&gt;
  &lt;/a&gt;
  Starter files
&lt;/h2&gt;

&lt;p&gt;You can find all the starter files in &lt;code&gt;starter-files&lt;/code&gt; branch. You can to go to the &lt;code&gt;starter-files&lt;/code&gt; branch and &lt;code&gt;download zip&lt;/code&gt; the the starter files or You can clone the project and git checkout to &lt;code&gt;starter-files&lt;/code&gt; branch.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;The recommended way to get started with the project is Follow the &lt;a href="https://youtu.be/DTR2IbNBfPA"&gt;YouTube tutorial&lt;/a&gt;. You will find all the step-by-step guides. Or you Can start the project on your own by following the guide below.&lt;/p&gt;

&lt;p&gt;After getting the starter files, you need to go the file directory and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and after that start the dev server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tools-used"&gt;
  &lt;/a&gt;
  Tools Used
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Images: &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;UI Design: &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Code Editor: &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#similar-projects"&gt;
  &lt;/a&gt;
  Similar Projects
&lt;/h2&gt;

&lt;p&gt;Here are some Similar projects that you might be interested.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ShaifArfan/AYANs-portfolio"&gt;Ayan's Portfolio - React JS Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ShaifArfan/shaif-s-cuisine"&gt;Shaif's Cuisine - HTML, CSS project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ShaifArfan/AMYs-Portfolio"&gt;Amy's Portfolio - HTML, CSS Project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  FAQ
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#q-how-can-i-get-started"&gt;
  &lt;/a&gt;
  Q: How can i get started?
&lt;/h3&gt;

&lt;p&gt;You can get started by following the &lt;a href="https://youtu.be/DTR2IbNBfPA"&gt;YouTube tutorial&lt;/a&gt; of this project. Here is the full tutorial video link: [coming soon].&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q-what-i-need-to-start-the-project"&gt;
  &lt;/a&gt;
  Q: What i need to start the project?
&lt;/h3&gt;

&lt;p&gt;Just open your favorite code editor and follow along with the &lt;a href="https://youtu.be/DTR2IbNBfPA"&gt;YouTube Tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q-who-the-project-is-for"&gt;
  &lt;/a&gt;
  Q: Who the project is for?
&lt;/h3&gt;

&lt;p&gt;The project is for the people who wanna get more skilled in &lt;code&gt;ReactJs&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  Feedback
&lt;/h2&gt;

&lt;p&gt;If you have any feedback, please reach out to us at &lt;a href="http://instagram.com/web_cifar"&gt;@web_cifar&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;For support, join our &lt;a href="http://facebook.com/groups/webcifar"&gt;Community Group&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://choosealicense.com/licenses/mit/"&gt;MIT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding! üöÄ&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Day 64 of 100 Days of Code &amp; Scrum: Dynamic OpenGraph Meta Tags Using next-seo</title>
      <author>Rammina</author>
      <pubDate>Wed, 15 Dec 2021 11:33:26 +0000</pubDate>
      <link>https://dev.to/rammina/day-64-of-100-days-of-code-scrum-dynamic-opengraph-meta-tags-using-next-seo-292n</link>
      <guid>https://dev.to/rammina/day-64-of-100-days-of-code-scrum-dynamic-opengraph-meta-tags-using-next-seo-292n</guid>
      <description>&lt;p&gt;Good day, everyone!&lt;/p&gt;

&lt;p&gt;I spent most of my day working on the &lt;a href="https://www.rammina.com"&gt;company website&lt;/a&gt;'s &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags using &lt;strong&gt;OpenGraph&lt;/strong&gt; attributes, as well as the Twitter counterparts. I utilized the &lt;code&gt;next-seo&lt;/code&gt; package to make it simpler to manage each page's &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags. Most of the challenge was making dynamic blog data display the appropriate card summary. At one point, I made a mistake deploying erroneous code the production, which took a while to display the correct values (embarrassing because other people could see it).&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I worked on static &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags for my &lt;a href="https://www.rammina.com"&gt;web development page&lt;/a&gt;. Not much work done, because it was also my physical therapy visit that day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I learned and worked on today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#company-website"&gt;
  &lt;/a&gt;
  Company Website
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;continued learning &lt;strong&gt;OpenGraph&lt;/strong&gt; and the Twitter equivalent.&lt;/li&gt;
&lt;li&gt;used &lt;code&gt;next-seo&lt;/code&gt; package to manage &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; dynamically for blog posts retrieved from Ghost.&lt;/li&gt;
&lt;li&gt;preview images are now dynamic for each page.&lt;/li&gt;
&lt;li&gt;put temporary placeholder sections for &lt;strong&gt;Services&lt;/strong&gt; and &lt;strong&gt;Portfolio&lt;/strong&gt; pages to remove broken links.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I did some practice flashcards for Scrum.&lt;/li&gt;
&lt;li&gt;reviewed some of the things I've learned before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading! I wish you the best.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ogp.me/"&gt;The Open Graph Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/garmeeh/next-seo"&gt;next-seo | GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://www.rammina.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK-zilS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1638444046/rammina-button-128_x9ginu.png" alt="Rammina Logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Build CLI Quiz App with nodeJs</title>
      <author>Khyati Baria</author>
      <pubDate>Wed, 15 Dec 2021 11:28:25 +0000</pubDate>
      <link>https://dev.to/khyatibaria/build-cli-quiz-app-with-nodejs-1e85</link>
      <guid>https://dev.to/khyatibaria/build-cli-quiz-app-with-nodejs-1e85</guid>
      <description>&lt;p&gt;In this blog, we will build a Food Fact CLI Quiz App in JavaScript. We will use repl.it to write a program. We will use two npm modules&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;readlineSync -It will have a conversation with the user via a console.&lt;/li&gt;
&lt;li&gt;chalk: It is used for Terminal string styling and adding colors.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#planning-our-cli-app"&gt;
  &lt;/a&gt;
  Planning our CLI App:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;We ask the user to enter name&lt;/li&gt;
&lt;li&gt;Then we welcome the user&lt;/li&gt;
&lt;li&gt;We will display the Rules of the game to user&lt;/li&gt;
&lt;li&gt;Then we let users to play game&lt;/li&gt;
&lt;li&gt;Check that user has entered the correct answer&lt;/li&gt;
&lt;li&gt;We will print the current score of a user on every given answer&lt;/li&gt;
&lt;li&gt;We will display the total score of users at the end of the game&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now Let‚Äôs Start the Build We need to take the user input through the console so we will require npm package: readline-sync. Firstly we will install npm packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var readlineSync = require('readline-sync');
const chalk = require('chalk');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the above code in repl.it will automatically install these packages for us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asking-user-their-name"&gt;
  &lt;/a&gt;
  Asking user their Name
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var userName= readlineSync.question( ("Please Enter Your Name?"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need a variable to store the name of the user so we will create a variable called userName.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#welcome-message-for-user"&gt;
  &lt;/a&gt;
  Welcome Message for User
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log('WELCOME '+userName+ 'FOOD FACT QUIZ \n');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to display customize welcome message for every new user. For welcome message we need name of user with some greeting message. So we use string concatenation to show welcome message.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#showing-rules-of-the-game-to-the-user"&gt;
  &lt;/a&gt;
  Showing Rules of the game to the user
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  console.log ("RULES OF THE GAME ARE SIMPLE"); 
  console.log ("1). All the QUESTIONS are COMPULSORY");
  console.log ("2). If you answer RIGHT you score 2 Points");
  console.log ("3). If you answer WRONG you Lose 1 Point");
  console.log ("----------LET‚ÄôS START THE GAME------------");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use inbuilt JavaScript function console.log() to print Rules on screen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-question-of-the-quiz"&gt;
  &lt;/a&gt;
  Adding Question of the quiz
&lt;/h2&gt;

&lt;p&gt;To store Questions of the quiz we create an array of an objects. And to ask question to user we use readlineSync.question(question).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var quesBank=[
  { question: `
  What country is renowned for chocolate?
  a) Finland
  b) Belgium
  c) Argentina\n`,
    answer: "b"
  },
  { question: `
  Which of these was called "food of the gods" in ancient India?
  a) Yogurt
  b) Potato
  c) Bread\n`,
    answer: "a"
  },
  { question: `
  Which is the most stolen food in the world?
  a) Candy
  b) Cheese
  c) Chips\n`,
    answer: "b"
  },
  { question: `
  One food that all races eat is what?
  a) Chocolate
  b) Bread
  c) Cheese\n`,
    answer: "b"
  }];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need a function which traverse throughout array of objects and displays the each question to user. So we need a for loop to access all elements inside an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function play(){
   for(var i=0; i&amp;lt;quesBank.length;i++){
     var currentItem= quesBank[i];
     check(currentItem.question, currentItem.answer)
   } }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#check-if-user-answer-is-correct"&gt;
  &lt;/a&gt;
  Check if user answer is correct
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function check(question, answer)
{
   var userAns=readlineSync.question(question);

   if( userAns.toUpperCase() === answer.toUpperCase())
   {
    console.log();
    console.log(chalk.green.italic.bold("Your are Right!!!!!"));
    console.log();
    score=score+2;
   } else{
    console.log();
    console.log(chalk.red.italic.bold("Your are Wrong!!!!!"));
    console.log();
    score=score-1;
  } 
  console.log(chalk.bgWhite.blue.bold("Your Total Score is:",score));
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a function that compares user answer with correct answers in array of objects. We need a variable to store the user answer. So we create variable userAns to store user answer. Here we use branching if user answer is correct we increment score of user by 2 and if answer is wrong user score is decrease by 1. Once all questions are answered by user we will display Total score at the end of quiz Game.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;So final program will look like this&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const chalk = require('chalk');
var readlineSync = require('readline-sync');
var score=0;

function Welcome()
{
var userName= readlineSync.question("Please Enter Your Name?");
console.log(chalk.yellowBright.bold('WELCOME'+userName+'FOOD FACT QUIZ \n'));
console.log(chalk.cyanBright.bold("RULES OF THE GAME ARE SIMPLE")); 
console.log(chalk.cyanBright("1). All the QUESTIONS are COMPULSORY"));
console.log(chalk.cyanBright("2). If you answer RIGHT you score 2 Points"));
console.log(chalk.cyanBright("3). If you answer WRONG you Lose 1 Point"));
console.log(chalk.yellowBright.bold("-------LETS START THE GAME------"));
}

var quesBank=[
  {
    question: `
    What country is renowned for chocolate?
    a) Finland
    b) Belgium
    c) Argentina\n`,
        answer: "b"
  },
  {
    question: `
    Which of these was called "food of the gods" in ancient India?
    a) Yogurt
    b) Potato
    c) Bread\n`,
        answer: "a"
  },
  {
    question: `
    Which is the most stolen food in the world?
    a) Candy
    b) Cheese
    c) Chips\n`,
        answer: "b"
  },
  {
    question: `
    One food that all races eat is what?
    a) Chocolate
    b) Bread
    c) Cheese\n`,
        answer: "b"
  }];

function check(question, answer)
{
   var userAns=readlineSync.question(question);
   if( userAns.toUpperCase() === answer.toUpperCase())
   {
    console.log(chalk.green.italic.bold("Your are Right!!!!!"));
    score=score+2;
   } else{
    console.log(chalk.red.italic.bold("Your are Wrong!!!!!"));
    score=score-1;
  } 
  console.log(chalk.bgWhite.blue.bold("Your Score is:",score));
  console.log();
  console.log(chalk.yellowBright.bold("------------------------------")); 
  console.log();
}

function play(){
   for(var i=0; i&amp;lt;quesBank.length;i++){
     var currentItem= quesBank[i];
     check(currentItem.question, currentItem.answer)
   }
}

Welcome();
play();

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Thanks for reading. If you like this articles, consider following me.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>cli</category>
      <category>node</category>
      <category>quizapp</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Simple Amazon Location Service Starter</title>
      <author>Yasunori Kirimoto</author>
      <pubDate>Wed, 15 Dec 2021 11:07:17 +0000</pubDate>
      <link>https://dev.to/aws-builders/simple-amazon-location-service-starter-577g</link>
      <guid>https://dev.to/aws-builders/simple-amazon-location-service-starter-577g</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3tl5lILl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-073_01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3tl5lILl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-073_01.png" alt="img" width="769" height="200"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ive-published-a-simple-amazon-location-service-starter-tada"&gt;
  &lt;/a&gt;
  I've published a simple Amazon Location Service starter üéâ
&lt;/h3&gt;

&lt;p&gt;In the previous &lt;a href="https://dev.to/aws-builders/a-summary-of-how-to-build-amplify-geo-and-amazon-location-service-5hal"&gt;articles&lt;/a&gt;, I've shown how to build an &lt;a href="https://aws.amazon.com/jp/location"&gt;Amazon Location Service&lt;/a&gt; application on the assumption that it has a login function and a framework, but I've built a simple starter called "&lt;a href="https://github.com/dayjournal/amazon-location-service-starter"&gt;amazon-location-service-starter&lt;/a&gt;" that doesn't use these functions. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#amazonlocationservicestarter"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/dayjournal/amazon-location-service-starter"&gt;amazon-location-service-starter&lt;/a&gt;
&lt;/h3&gt;


&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;p&gt;All you have to do is clone the repository, install and configure AWS Amplify as described in the README, and you are ready to run the application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @aws-amplify/cli
amplify configure
npm &lt;span class="nb"&gt;install
&lt;/span&gt;amplify init
amplify push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have already set up AWS Amplify, you only need to do the following to get ready to run your application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install
&lt;/span&gt;amplify init
amplify push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Here's a little inside look at the starter.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-the-amazon-location-service"&gt;
  &lt;/a&gt;
  Setting up the Amazon Location Service
&lt;/h2&gt;

&lt;p&gt;First, let's configure the Amazon Location Service. Internally, I'm using Amplify Geo to build the environment easily.&lt;/p&gt;



&lt;p&gt;The authentication function has been added as usual.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://day-journal.com/memo/aws-amplify-003"&gt;AWS Amplify #003 - Add Authentication Function&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify add auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;It is okay that the basics of the map function are as usual, but I set the access target to "Authorized and Guest users". By choosing this setting, anyone can view the map without using the login function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://day-journal.com/memo/aws-amplify-004"&gt;AWS Amplify #004 - Add location feature (map)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify add geo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9NYjUYhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-073_03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9NYjUYhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-073_03.png" alt="img" width="832" height="358"&gt;&lt;/a&gt;  &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#front-end"&gt;
  &lt;/a&gt;
  Front End
&lt;/h2&gt;

&lt;p&gt;Next, let's take a look at the map application part.  &lt;/p&gt;



&lt;p&gt;Execution environment&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;node v16.10.0
&lt;/li&gt;
&lt;li&gt;npm v7.24.0
&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Overall configuration&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lOCSobSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-073_02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lOCSobSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-073_02.png" alt="img" width="228" height="459"&gt;&lt;/a&gt;  &lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#packagejson"&gt;
  &lt;/a&gt;
  package.json
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"amazon-location-service-starter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"main.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"webpack --mode=production"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"webpack serve --mode=development"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Yasunori Kirimoto"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"webpack"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.46.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"webpack-cli"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.9.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"webpack-dev-server"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^3.11.2"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"aws-amplify"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.3.10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"css-loader"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.2.6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"file-loader"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^6.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"maplibre-gl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.15.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"maplibre-gl-js-amplify"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.1.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"style-loader"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"url-loader"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.1.1"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h4&gt;
  &lt;a href="#webpackconfigjs"&gt;
  &lt;/a&gt;
  webpack.config.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./_resouce/main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/dist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;css$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;style-loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;css-loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.(&lt;/span&gt;&lt;span class="sr"&gt;png|svg|jpg|gif&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;url-loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dist/img/icon/[name].[ext]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProvidePlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;maplibregl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maplibre-gl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;maplibregljsamplify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maplibre-gl-js-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;devServer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;contentBase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/dist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;publicPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;watchContentBase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Define MapLibre GL JS and MapLibre GL JS Amplify.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProvidePlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;maplibregl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maplibre-gl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;maplibregljsamplify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maplibre-gl-js-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;/_resouce&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mainjs"&gt;
  &lt;/a&gt;
  main.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./css/style.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maplibre-gl/dist/maplibre-gl.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./js/script.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Load MapLibre GL JS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maplibre-gl/dist/maplibre-gl.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;/_resouce/css&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#stylecss"&gt;
  &lt;/a&gt;
  style.css
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Define the map style.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;/_resouce/js&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#scriptjs"&gt;
  &lt;/a&gt;
  script.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Amplify&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;awsconfig&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../aws-exports&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;Amplify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;awsconfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mapCreate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;maplibregljsamplify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createMap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;139.7648&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;35.6794&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bearing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;64.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;pitch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;maplibregl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NavigationControl&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;mapCreate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Configure Amplify.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Amplify&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;awsconfig&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../aws-exports&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;Amplify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;awsconfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Configure the map.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mapCreate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;maplibregljsamplify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createMap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;139.7648&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;35.6794&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bearing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;64.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;pitch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;maplibregl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NavigationControl&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;mapCreate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Let's check it out on a simple local server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;If Amplify has been deployed successfully, the map will appear.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8MwbmR3r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://day-journal.com/memo/images/try-073_00.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8MwbmR3r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://day-journal.com/memo/images/try-073_00.gif" alt="img" width="880" height="682"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#i-have-published-a-simple-amazon-location-service-starter-thumbsup"&gt;
  &lt;/a&gt;
  I have published a simple Amazon Location Service starter üëç
&lt;/h4&gt;

&lt;p&gt;I've built a simple Amazon Location Service starter that doesn't use the login function and framework. It can be displayed easily, so I hope you will give it a try. Since it does not use the login function, please be careful about billing due to mass access when operating in a public environment üëç&lt;/p&gt;

</description>
      <category>amazonlocationservice</category>
      <category>awsamplify</category>
      <category>maplibre</category>
      <category>webpack</category>
    </item>
    <item>
      <title>What is PyTorch: a Summary  Guide for Beginners</title>
      <author>images.cv</author>
      <pubDate>Wed, 15 Dec 2021 10:11:47 +0000</pubDate>
      <link>https://dev.to/imagescv/what-is-pytorch-a-summary-guide-for-beginners-3eeb</link>
      <guid>https://dev.to/imagescv/what-is-pytorch-a-summary-guide-for-beginners-3eeb</guid>
      <description>&lt;p&gt;&lt;a href="https://pytorch.org/"&gt;PyTorch&lt;/a&gt; is a deep learning framework that was created by Facebook. It allows you to use &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; as your main programming language, which provides flexibility and speed for many programmers who work with machine learning tasks. PyTorch is also GPU-accelerated, which makes it preferable for many users. This blog post will provide an overview of what PyTorch is and how to get started using this powerful tool.&lt;/p&gt;

&lt;p&gt;What Are Some Key Features of PyTorch?&lt;br&gt;
PyTorch has several key features that make it stand out as a deep learning framework. Some of these include:&lt;/p&gt;

&lt;p&gt;üî• &lt;u&gt;&lt;strong&gt;It's Python based&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;PyTorch uses Python as its main programming language, which is an extremely popular choice for programmers who work with machine learning tasks every day. This gives you the flexibility and speed you need to get your tasks done quickly. However, if python isn't your preferred language then another great feature comes into play...&lt;/p&gt;

&lt;p&gt;üéöÔ∏è &lt;u&gt;&lt;strong&gt;GPU accelerated&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;GPU acceleration makes PyTorch preferable for many users because this allows them to run their code much faster than they would be able to without using GPUs. If this doesn't sound like something you'll use or care about right now then keep reading because there are still several other reasons why PyTorch is a great choice for you.&lt;/p&gt;

&lt;p&gt;ü™¢ &lt;u&gt;&lt;strong&gt;The use of Tensors&lt;/strong&gt;&lt;/u&gt;&lt;br&gt;
Tensors are at the heart of PyTorch, and this allows you to easily create and manipulate your data in ways that other frameworks don't always allow. This makes PyTorch an extremely powerful tool for many different tasks.&lt;/p&gt;

&lt;p&gt;üíé &lt;u&gt;&lt;strong&gt;PyTorch Modules&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;PyTorch also has several modules that you can use to expand its functionality. These include &lt;a href="https://pytorch.org/vision/stable/index.html"&gt;torchvision&lt;/a&gt; for image processing, &lt;a href="https://pytorch.org/audio/stable/index.html"&gt;torchaudio&lt;/a&gt; for audio processing, and more. Having these modules available makes it possible to do a wide range of deep learning tasks with ease.&lt;/p&gt;

&lt;p&gt;üìà &lt;u&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;PyTorch is flexible in the sense that you can use it for many different deep learning applications. Whether your data comes from python or an external source like Caffe, PyTorch has a way to handle and work with this data in order to get results quickly and effectively. This makes it possible to solve problems fast when they arise on the job site which keeps everyone happy!&lt;/p&gt;

&lt;p&gt;‚è±Ô∏è &lt;u&gt;&lt;strong&gt;Speed&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;PyTorch is known for its speed, which makes it great for researchers and data scientists who need to get their work done quickly. The python interface combined with GPU acceleration means you can do all this without having to worry about spending hours trying to figure out how something works or getting stuck on tasks that should be simple. This lets your team focus on the important things instead of wasting time debugging code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-can-benefit-from-using-pytorch"&gt;
  &lt;/a&gt;
  Who Can Benefit From Using PyTorch?
&lt;/h2&gt;

&lt;p&gt;There are many different people who could benefit from using PyTorch including Data Scientists, Researchers, Software Engineers/Developers, and QA Testers because there isn't anyone particular industry where it wouldn't be useful! If you're looking at machine learning as a possible solution to a problem you're facing then PyTorch is definitely worth taking a look at.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;In conclusion&lt;/strong&gt;, PyTorch is a deep learning framework that was created by Facebook. It allows you to use Python as your main programming language, which provides flexibility and speed for many programmers who work with machine learning tasks. PyTorch is also GPU-accelerated, which makes it preferable for many users. It has several key features that make it stand out as a deep learning framework, including python-based, GPU accelerated, tensors, modules, flexibility, and speed. PyTorch can be used by many different people in a wide range of industries to solve machine learning problems quickly and effectively. If you're looking for a deep learning framework that has all the features you need, then PyTorch is definitely worth taking a look at.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;üëâVisit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Widget Driven Development</title>
      <author>Alexey Antipov</author>
      <pubDate>Wed, 15 Dec 2021 10:02:48 +0000</pubDate>
      <link>https://dev.to/aantipov/widget-driven-development-1n5m</link>
      <guid>https://dev.to/aantipov/widget-driven-development-1n5m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  Preface
&lt;/h2&gt;

&lt;p&gt;When developing UI applications, we compose them from components. Each UI component is essentially a combination of markup, scoped styles, and some UI logic. Data Management is frequently left out of components control, resulting in a complicated architecture with convoluted data flows.&lt;/p&gt;

&lt;p&gt;In this article, I'll demonstrate how we can transform components into autonomous isolated widgets with complete control over both Data Logic and UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-history-of-components"&gt;
  &lt;/a&gt;
  The History of Components
&lt;/h2&gt;

&lt;p&gt;Widgets, in my opinion, are the natural successors of Components. To see this, I suggest going back in time and look at how our approaches to building UI have evolved over time.&lt;/p&gt;

&lt;p&gt;Many remember the times when all application styles were defined in a single global CSS file. Styles definitions used complex combinations of different &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors"&gt;CSS selectors&lt;/a&gt;. Style collisions were common in apps. The size and complexity of those styles sometimes affected even the performance of websites.&lt;/p&gt;

&lt;p&gt;In 2009 &lt;a href="https://en.bem.info/methodology/"&gt;BEM&lt;/a&gt; was born. BEM provided a set of guidelines for defining styles and naming classes. These rules were intended to address the problem of style collisions and inefficient selectors. BEM encouraged to think of UI in terms of blocks, elements, and modifiers.&lt;/p&gt;

&lt;p&gt;2013-2015 marked the rise of &lt;strong&gt;Components&lt;/strong&gt; approach. React made it simple to divide UI into components that were a combination of markup (HTML) and UI logic (JavaScript). It was a game changer in application development. Other frameworks soon followed suit, adopting a components-based approach as well.&lt;/p&gt;

&lt;p&gt;With the rise of build tools, CSS preprocessors, and techniques like CSS-in-JS and &lt;a href="https://github.com/css-modules/css-modules"&gt;CSS Modules&lt;/a&gt;, it became feasible to make Styling a part of Components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ies03oYW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh3opup6i4335y20e5x0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ies03oYW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh3opup6i4335y20e5x0.png" alt="a combination of Markup, Styles and UI Logic" width="880" height="593"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Components playgrounds such as Storybook emerged to help developers build components in an isolated environment and ensure proper styles scoping. They encouraged developers to think of UI as &lt;a href="https://www.kn8.lt/blog/ui-is-a-function-of-data/"&gt;a function of state&lt;/a&gt;: components props values defined the look and behaviour of components.&lt;/p&gt;

&lt;p&gt;Collections of reusable high-quality components became a thing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-unresolved-hurdles"&gt;
  &lt;/a&gt;
  The unresolved hurdles
&lt;/h2&gt;

&lt;p&gt;Component-driven approach helped break UI into isolated reusable pieces and enabled building large-scale applications using collections of pre-built components.&lt;/p&gt;

&lt;p&gt;What was missing, though, is a way of supplying UI components with data.&lt;/p&gt;

&lt;p&gt;Data management became one of the most difficult tasks in Frontend Engineering and the primary contributor to the complexity of UI apps.&lt;/p&gt;

&lt;p&gt;We learned to split components into two types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Presentational&lt;/em&gt; components, which are responsible for UI representation and are usually stateless and side-effect free&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Container&lt;/em&gt; components, which deal with data-related logic and pass data down to Presentational components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All that remains is to define how Container components should work with data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gmOxeBWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbbvb9ncnr6bvhcozu5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gmOxeBWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbbvb9ncnr6bvhcozu5i.png" alt="an image of Container component that includes a Presentational component and Data logic" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-naive-approach"&gt;
  &lt;/a&gt;
  The Naive approach
&lt;/h2&gt;

&lt;p&gt;The naive approach would be for each Container component to simply fetch data needed by underlying Presentational components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fp5VQ1R2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq10jejpvyf61rjendjb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fp5VQ1R2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq10jejpvyf61rjendjb.png" alt="an image of Frontend and Backend interaction" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because the same data is usually needed by multiple different components, implementing such an approach in practice would bring a bunch of problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;duplicated requests and data over-fetching. Slow UI and overloaded server as a result.&lt;/li&gt;
&lt;li&gt;possible data inconsistency between components when requests to the same endpoint result in different data&lt;/li&gt;
&lt;li&gt;complicated data invalidation (think of a case when the data has changed on Backend and you need to make sure every dependent component refetches the data)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-common-parent-approach"&gt;
  &lt;/a&gt;
  The Common parent approach
&lt;/h2&gt;

&lt;p&gt;We learnt to overcome the problem by moving data-fetching (and mutation) functionality up to common parent components which pass data down to all underlying components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ycFa3c8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efp3s243lqvo1xyykyy2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ycFa3c8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efp3s243lqvo1xyykyy2.png" alt="an image of Frontend and Backend interaction + Prop Drilling between Components" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We solved the problem of requests duplication and data invalidation. However, we did face new challenges:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the whole application logic became more complex and more coupled&lt;/li&gt;
&lt;li&gt;we were forced to pass data down through multiple components. This issue became notorious and got a name &lt;a href="https://kentcdodds.com/blog/prop-drilling"&gt;‚ÄúProp Drilling‚Äù&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-state-management-approach"&gt;
  &lt;/a&gt;
  The State Management approach
&lt;/h2&gt;

&lt;p&gt;To bypass the Prop Drilling problem, we learnt to use State Management libraries and techniques: instead of propagating data down to underlying components, we place data in some Store that is accessible to all the components down the tree, letting them obtain the data directly from there. Components subscribe to the changes in the Store to have the data always up-to-date.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rWjmuJfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcimiwli8pey0xk4c6gw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWjmuJfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcimiwli8pey0xk4c6gw.png" alt="an image of Frontend and Backend interaction + Global Store" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Prop Drilling issue was resolved, but not for free:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;we now have to deal with a completely new concept, the Store, and care about a bunch of new things, such as designing and maintaining Store structure, appropriately updating data in the Store, data normalization, mutable vs immutable, a single store vs multiple stores, and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;state management libraries require us to learn a new vocabulary: &lt;em&gt;Actions&lt;/em&gt;, &lt;em&gt;Action Creators&lt;/em&gt;, &lt;em&gt;Reducers&lt;/em&gt;, &lt;em&gt;Middlewares&lt;/em&gt;, &lt;em&gt;Thunks&lt;/em&gt;, and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the introduced complexity and lack of clarity forced developers to create &lt;a href="https://redux.js.org/style-guide/style-guide"&gt;styleguides&lt;/a&gt; on how to work with the Store, what to do and what to avoid.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;as a result, our applications became very tangled and coupled. Frustrated developers try to mitigate the issues by inventing new state management libraries with different syntax.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-naive-approach-reimagined"&gt;
  &lt;/a&gt;
  The Naive approach reimagined
&lt;/h2&gt;

&lt;p&gt;Can we do better? Is there an easier way to approach data management? Can we have the data flows transparent and easy to understand? Can we untangle our apps and boost &lt;a href="https://www.freecodecamp.org/news/orthogonality-in-software-engineering/"&gt;orthogonality&lt;/a&gt;? Can we bring Data Logic under control of Components in the same way that we have done with Markup, Styles and UI Logic?&lt;/p&gt;

&lt;p&gt;We must have gotten too far into the woods and &lt;em&gt;can't see the forest for the trees&lt;/em&gt;. Let's go back to the starting point, to the Naive approach, and see if we can solve its problems differently.&lt;/p&gt;

&lt;p&gt;The main bummers there were requests duplication and data inconsistency.&lt;/p&gt;

&lt;p&gt;What if we could have an intermediate player between our components and Backend, say an API wrapper or interceptor, solving all those problems under the hood:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;deduplicate all the requests&lt;/li&gt;
&lt;li&gt;ensure data consistency: all the components should always have the same data when using the same request&lt;/li&gt;
&lt;li&gt;provide data invalidation ability: if a component changes data on the server, other components that rely on that data should receive the new data&lt;/li&gt;
&lt;li&gt;be transparent to components and not affect their logic in any way (make components think they communicate to Backend directly)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cKhUdzDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyhk7wq6t9vw6t72zp7n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cKhUdzDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyhk7wq6t9vw6t72zp7n.png" alt="Frontend and Backend interaction using an API Wrapper" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The good news is that we can have it, and there are already libraries providing such solutions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;some GraphQL clients, e.g. &lt;a href="https://relay.dev/"&gt;Relay&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://react-query.tanstack.com/"&gt;React-Query&lt;/a&gt;, &lt;a href="https://swr.vercel.app/"&gt;SWR&lt;/a&gt;, &lt;a href="https://redux-toolkit.js.org/rtk-query/overview"&gt;Redux Toolkit Query&lt;/a&gt;, &lt;a href="https://vue-query.vercel.app/"&gt;Vue Query&lt;/a&gt; for RESTful APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All we basically need to do is to wrap every API call with such an API Wrapper. The rest is handled automatically for us.&lt;/p&gt;

&lt;p&gt;The huge benefit of such an approach is that we can finally untangle our applications' data logic, put Data Logic under control of Components, and achieve better orthogonality by combining all pieces together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-rrvbIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgfzyv0h6wd0hjjlmbdw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-rrvbIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgfzyv0h6wd0hjjlmbdw.png" alt="a triangle including Data Logic, Styles, Markup and UI Logic" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#widget-driven-development"&gt;
  &lt;/a&gt;
  Widget driven development
&lt;/h2&gt;

&lt;p&gt;In my team, we started to use the described above Naive approach together with React Query and we love it. It enabled us to approach building our application differently. Let me call it &lt;em&gt;"Widget Driven Development"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The idea is that we split every page into so-called &lt;em&gt;widgets&lt;/em&gt;, which behave autonomously and are self-contained.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4lCIbhJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z42221shfvhv142e0ji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4lCIbhJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z42221shfvhv142e0ji.png" alt="a Page separated into Widgets" width="880" height="1000"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every widget is responsible for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fetching and providing all the required data to its UI&lt;/li&gt;
&lt;li&gt;mutating the related data on server if needed&lt;/li&gt;
&lt;li&gt;data representation in the UI&lt;/li&gt;
&lt;li&gt;UI for Loading state&lt;/li&gt;
&lt;li&gt;(optional) UI for Error state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Speaking of code organization, we co-locate all the widgets related files:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dLNzDKTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uietsdgrqj2bavtvoc9d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLNzDKTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uietsdgrqj2bavtvoc9d.png" alt="an image of files grouped into widgets" width="880" height="889"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usually, the same API endpoint is used across multiple widgets. So we decided to keep all of them in a separate shared folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HTzyg2kj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmhjdnzzbw5xskb2f36x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HTzyg2kj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmhjdnzzbw5xskb2f36x.png" alt='an image of queries hooks grouped under "queries" folder' width="880" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use React Query library and each file in the &lt;code&gt;queries/&lt;/code&gt; folder exposes fetch and mutation methods wrapped into React Query.&lt;/p&gt;

&lt;p&gt;All Container components have a similar code structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useBookQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;queries/useBookQuery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAuthorQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;queries/useAuthorQuery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Presentation&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Presentation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;BookDetailsContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;bookId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isBookError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useBookQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bookId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isAuthorError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthorQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Presentation&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isBookError&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isAuthorError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how easy and declaratively dependant queries are handled. Also the only dependency of our widget is the presence of &lt;code&gt;bookId&lt;/code&gt; in the URL.&lt;/p&gt;

&lt;p&gt;Most of our widgets‚Äô container components have no props and rely on no external state except for URL data.&lt;/p&gt;

&lt;p&gt;Such an approach makes it transparent what API queries our widget relies upon. That transparency combined with near to zero external dependencies makes it easy to test widgets and gives us confidence in our code.&lt;/p&gt;

&lt;p&gt;Usually, changes to a widget are limited by modifications to files under that widget's folder. It significantly limits the risk of breaking any other parts of the application.&lt;/p&gt;

&lt;p&gt;Adding new widgets is also very straightforward: create a new folder for the widget with all required files in it and, if necessary, create a new query in the &lt;code&gt;/queries&lt;/code&gt; folder. Again, the risk of breaking any other parts of the application is very limited.&lt;/p&gt;

&lt;p&gt;Every widget can also be easily reused on different pages thanks to the limited dependency on the context. We usually just need to make sure the URLs of those pages contain the data identifiers needed for the widget.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The Components approach made easy and straightforward creation of reusable independent pieces of UI.&lt;br&gt;
It didn't solve all the problems though and Frontend applications often suffer from convoluted Data Management.&lt;/p&gt;

&lt;p&gt;There are libraries that enable approaching Data Management differently and significantly reduce the complexity of our applications.&lt;/p&gt;

&lt;p&gt;Leveraging those libraries, we can put data logic under control of components and convert an application into a set of reusable self-contained widgets. It makes the data flows transparent, architecture flexible, the code resilient and easy to test.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>statemanagement</category>
    </item>
    <item>
      <title>Blazingly fast Preview Environments for NextJS, NodeJS, and MongoDB on AWS</title>
      <author>Patryk Jeziorowski</author>
      <pubDate>Wed, 15 Dec 2021 10:00:59 +0000</pubDate>
      <link>https://dev.to/pjeziorowski/blazingly-fast-preview-environments-for-nextjs-nodejs-and-mongodb-on-aws-o1k</link>
      <guid>https://dev.to/pjeziorowski/blazingly-fast-preview-environments-for-nextjs-nodejs-and-mongodb-on-aws-o1k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Have you ever dreamed of deploying your applications on the cloud without any hassle? Imagine a platform where all you need to do is to sign in with your AWS credentials, and automagically the platform does all the hard work of configuration of the cloud for you, and, on top of that, provides some extra features that do not exist out of the box anywhere else.&lt;/p&gt;

&lt;p&gt;Qovery is this platform - not only does it allow you to deploy your infrastructure and applications on your own cloud account, but also provides extra cool features, one of which we will see in this article.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don't take our words for granted - 14000 developers from more than 100 countries use Qovery to deploy their apps on AWS.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview-environments"&gt;
  &lt;/a&gt;
  Preview Environments
&lt;/h3&gt;

&lt;p&gt;Imagine working on a new feature. You're dealing with a full-stack application - you have a frontend, backend, and a database. You introduce a change to your backend app - how do you test all of it? It would be great if there was a service that could deploy everything for you so you can test your changes quickly and in separation with all the components...&lt;/p&gt;

&lt;p&gt;Qovery Preview Environments are designed to help you with exactly this.&lt;/p&gt;

&lt;p&gt;It not only deploys the app you changed but all other related applications and databases as well in the cloud so that you can test your new features and collaborate with reviewers of your code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPdtVKP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvhsaudl4xqvxuw3rmnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPdtVKP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvhsaudl4xqvxuw3rmnn.png" alt="Image description" width="880" height="617"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Preview environments feature is available on other platforms as well. Vercel and Netlify allows you to test your changes before merging code into production. It‚Äôs perfect for single frontend applications, but the concept of Preview Environments on Qovery goes far beyond this.&lt;/p&gt;

&lt;p&gt;Qovery is able not only to create a preview environment for your frontend, but also for the backend and databases - the whole stack is supported. Running a set of backend microservices? No worries, Qovery got you covered. All services will be replicated in the new environment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview-environments-benefits"&gt;
  &lt;/a&gt;
  Preview environments benefits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Time-saving&lt;/strong&gt; - You don't have to set up a fresh environment to test changes in isolation - Qovery does it all for you&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Productivity&lt;/strong&gt; - Faster changes, quicker review, better feedback loop - the productivity and quality of your application increases dramatically&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Better tests&lt;/strong&gt; - It's best to test apps in isolation, but it's almost impossible with a complicated stack if you have to prepare the testing environment manually - Qovery does it all "automagically" for you&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Independence&lt;/strong&gt; - Each environment is completely separate, meaning more people can work flawlessly on the project, testing the changes they introduce in parallel, not blocking each other&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deliver quickly&lt;/strong&gt; - Faster feedback loop, independent developers, fewer bugs, meaning the product is delivered more quickly&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reduce friction&lt;/strong&gt; - Waiting for others to test your changes is frustrating - with preview envs everyone has his own testing environment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#aws-infrastructure"&gt;
  &lt;/a&gt;
  AWS Infrastructure
&lt;/h3&gt;

&lt;p&gt;Before we start with the deployments, we need to have our AWS infrastructure ready and deployed. It can be done as simply as by providing credentials to your cloud account, you can see how to configure the credentials in this article - &lt;a href="https://hub.qovery.com/docs/using-qovery/configuration/cloud-service-provider/amazon-web-services/"&gt;https://hub.qovery.com/docs/using-qovery/configuration/cloud-service-provider/amazon-web-services/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iGWwz16k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04ilry028dda5tk13pu3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iGWwz16k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04ilry028dda5tk13pu3.png" alt="Image description" width="880" height="403"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The initial setup takes about 15 min, and your cluster is ready to host your applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#full-stack-application"&gt;
  &lt;/a&gt;
  Full Stack Application
&lt;/h3&gt;

&lt;p&gt;In this example, we will use a Next.js frontend, Node.js backend, and MongoDB as a database. The app will display an image gallery with images fetched from the backend. Preview Environments feature will help us introduce a new change in the backend - moving away from a hardcoded POC list of images to a list fetched from our database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h3&gt;

&lt;p&gt;Our simple image gallery will look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---NVyKyVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k56v3eqfatdm7zkim24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---NVyKyVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k56v3eqfatdm7zkim24.png" alt="Image description" width="880" height="691"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To generate the application, we used &lt;code&gt;npx create-next-app@latest&lt;/code&gt;, but the source code can be found here - &lt;a href="https://github.com/pjeziorowski/gallery-demo/tree/master/frontend"&gt;https://github.com/pjeziorowski/gallery-demo/tree/master/frontend&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main changes introduced to the generated application scaffolding are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding a &lt;code&gt;Dockerfile&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:alpine&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /usr/src
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /usr/src&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm run build

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; npm run start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adding a query to our backend (which we will be built soon in the next steps) that fetches a list of images to display in our gallery&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useImages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;apiRoot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/v1/images`&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plus, we adjusted the HTML and styling for the demo purpose of showing a list of images&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Backend
&lt;/h3&gt;

&lt;p&gt;Our backend is the main star of the demo. In its first version, the backend is displaying a hardcoded list of images. In the next step, we will gradually expand its capabilities. It will connect to a database and fetch the list from MongoDB instead. To make sure the changes are correct, we will use &lt;code&gt;Preview Environment&lt;/code&gt; feature before merging the pull request to our production environment&lt;/p&gt;

&lt;p&gt;The backend was generated using Express &lt;code&gt;npx express-generator --no-view&lt;/code&gt;, and the source code can be found here - &lt;a href="https://github.com/pjeziorowski/gallery-demo/tree/master/frontend"&gt;https://github.com/pjeziorowski/gallery-demo/tree/master/backend&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Changes that we introduced to the generated app scaffolding are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adding a Dockerfile&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:16&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package*.json ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8080&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "node", "src/index.js" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating a &lt;code&gt;/api/v1/images&lt;/code&gt; endpoint that returns a hardcoded array of images&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/images&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IMG_4985.HEIC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.9 MB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1582053433976-25c00369fc93?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=512&amp;amp;q=80&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;In the next step we will improve the function to use a Mongo database instead.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h3&gt;

&lt;p&gt;After creating a new project, let's now set up our &lt;code&gt;production&lt;/code&gt; environment.&lt;/p&gt;

&lt;p&gt;First, let's deploy our frontend. Click &lt;code&gt;Add my first application&lt;/code&gt;, select a correct repository, &lt;code&gt;Docker&lt;/code&gt; as build mode and expose port &lt;code&gt;3000&lt;/code&gt;. The application root path is &lt;code&gt;/frontend&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next step: add a &lt;code&gt;MongoDB&lt;/code&gt; database - it will be used by our backend later on. You can do so by clicking on &lt;code&gt;Add&lt;/code&gt; button in Qovery Console in Environment.&lt;/p&gt;

&lt;p&gt;Now let's deploy our backend. Click &lt;code&gt;Add&lt;/code&gt; ‚Üí &lt;code&gt;Application&lt;/code&gt;, pick up &lt;code&gt;/backend&lt;/code&gt; as application root path, &lt;code&gt;8080&lt;/code&gt; port, and &lt;code&gt;Docker&lt;/code&gt; build mode.&lt;/p&gt;

&lt;p&gt;For the future connection to DB, let's add an alias named &lt;code&gt;DATABASE_URL&lt;/code&gt; that points to our Mongo database internal URL in our backend &lt;code&gt;Environment Variable&lt;/code&gt; settings:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YHggJGZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjh1gf92i7feako2fpig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YHggJGZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjh1gf92i7feako2fpig.png" alt="Image description" width="880" height="479"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Additionally, let's create an alias called &lt;code&gt;API_ROOT&lt;/code&gt; in our frontend application that points to our backend external URL:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N6Zcci13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuf8ugubrao052hz48nq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N6Zcci13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuf8ugubrao052hz48nq.png" alt="Image description" width="880" height="270"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This is it! Now we can deploy our production environment. After a few minutes, navigate to the frontend app, click on &lt;code&gt;Open&lt;/code&gt; - you should be redirected to the image gallery&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tk1lSS4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uyy1wn6aao02wx6wevn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tk1lSS4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uyy1wn6aao02wx6wevn.png" alt="Image description" width="880" height="691"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enable-preview-environments"&gt;
  &lt;/a&gt;
  Enable Preview Environments
&lt;/h3&gt;

&lt;p&gt;The next step to see the preview environment feature in action is to enable it for our backend application.&lt;/p&gt;

&lt;p&gt;To do so, navigate to &lt;code&gt;Environment&lt;/code&gt; ‚Üí &lt;code&gt;Settings&lt;/code&gt; ‚Üí &lt;code&gt;Preview Env&lt;/code&gt; and tick it for the backend app&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y-7l5ove--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aalevwhxkrxm8th41f28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y-7l5ove--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aalevwhxkrxm8th41f28.png" alt="Image description" width="880" height="646"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Great! The feature is enabled. To see it in action, let's edit our code in the backend app so that the list of images is fetched from the database instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-preview-environments"&gt;
  &lt;/a&gt;
  Testing Preview Environments
&lt;/h3&gt;

&lt;p&gt;Let's make a small update of our backend - let's connect to MongoDB and fetch images from there. Here are changes to the function we could introduce to make it happen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;databaseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DATABASE_URL&lt;/span&gt;
    &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongodb://localhost:27017/test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;databaseUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;imageSchema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now create a new branch in our repository and create a pull request to our production (master branch) environment. Preview Environments feature will spin up a new environment for us so that we can safely test changes we just introduced!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7uSCLtnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8z9a6unj4zgjgj9atbe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7uSCLtnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8z9a6unj4zgjgj9atbe.png" alt="Image description" width="880" height="774"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now, when we display environments in our project, we will see that a new environment for the pull request is being deployed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1dZ4EThI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdg8dtj44r9vk0do92cv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1dZ4EThI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdg8dtj44r9vk0do92cv.png" alt="Image description" width="880" height="606"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;with all the resources we need! A database, backend, frontend - we can now test our changes in complete separation from the production without any manual setting up work:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pc1QzYw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pteka2uluhf2pgy9rxf8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pc1QzYw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pteka2uluhf2pgy9rxf8.png" alt="Image description" width="880" height="606"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview-environment-explained"&gt;
  &lt;/a&gt;
  Preview Environment Explained
&lt;/h3&gt;

&lt;p&gt;The Preview Environment feature can be enabled or disabled per app. It creates a complete copy of your environment so that you can test new changes from pull requests in separation. It deploys your databases, backend, and frontend applications to a  completely new environment once a pull request is opened. If you update your pull request, all new changes are also reflected in the new environment so that you can test them or fix problems during the review. What is great is that Qovery takes care of managing all environment variables for you as well, creates new aliases just as you had in your prod environment, so that everything is really tested separately and it all happens automagically. After the pull request is merged, Qovery automatically cleans up the preview environment to save your money.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-preview-environments-pt-ii"&gt;
  &lt;/a&gt;
  Testing Preview Environments PT II
&lt;/h3&gt;

&lt;p&gt;After a few minutes, your preview environment should be up and running. You can now navigate to the frontend app and click &lt;code&gt;Open&lt;/code&gt; - in the image gallery, you will see an empty list because we don't yet have any images in the database.&lt;/p&gt;

&lt;p&gt;You can add a few images manually by connecting to your mongo instance via CLI. The credentials can be found in the database overview:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x0164xD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqfhonsonx6yipnzfhfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x0164xD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqfhonsonx6yipnzfhfl.png" alt="Image description" width="590" height="412"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;After connecting, let's add images by executing the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IMG_4985.HEIC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.9 MB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1582053433976-25c00369fc93?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=512&amp;amp;q=80&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;},&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IMG_4985.HEIC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.9 MB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1582053433976-25c00369fc93?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=512&amp;amp;q=80&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;},&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IMG_4985.HEIC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.9 MB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1582053433976-25c00369fc93?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=512&amp;amp;q=80&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, after opening the frontend app in our preview environment, we will see all the images we put in the database! It looks like the feature is working well, so let's merge the PR:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kd2L02MA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xubg6kpwcx9qnal66g9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kd2L02MA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xubg6kpwcx9qnal66g9z.png" alt="Image description" width="880" height="585"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;What now happens is automatically after the PR merge, the preview environment is automatically cleaned up:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M9E1qSiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8mcqtug1mnj4ck8ztba4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M9E1qSiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8mcqtug1mnj4ck8ztba4.png" alt="Image description" width="880" height="607"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Great job! Thanks to Qovery Preview Environments, we managed to develop a new feature in a complete separation from our production, we tested it in a real environment deployed in the cloud, and we didn't have to spend any time preparing our environment for tests at all.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In the article, we quickly went through the process of creating a full-stack application with frontend, backend, and database. We enabled the Preview Environment feature to develop new features more quickly. We learned what the benefits of Preview Environments are, how to use them, and how to integrate them to day to day development workflow.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>mongodb</category>
      <category>react</category>
    </item>
  </channel>
</rss>
