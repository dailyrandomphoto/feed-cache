<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My Dev Journey: Week 2</title>
      <author>Harry York</author>
      <pubDate>Sun, 16 May 2021 19:56:36 +0000</pubDate>
      <link>https://dev.to/harryyork97/my-dev-journey-week-2-149o</link>
      <guid>https://dev.to/harryyork97/my-dev-journey-week-2-149o</guid>
      <description>&lt;p&gt;My second week at Northcoders, marks the start of a 3 week block where we focus on JavaScript fundementals.&lt;/p&gt;

&lt;p&gt;If you enjoyed the past couple of posts too, then maybe consider following me on &lt;a href="https://twitter.com/grand_oldduke"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/harryyork97"&gt;GitHub&lt;/a&gt; üòÅ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ive-learnt-this-week"&gt;
  &lt;/a&gt;
  What I've learnt this week
&lt;/h2&gt;

&lt;p&gt;A big focus this week was getting used to pair programming, which is something we'll all be getting used to for our time at Northcoders.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jest"&gt;
  &lt;/a&gt;
  JEST
&lt;/h3&gt;

&lt;p&gt;Testing with JEST has been really fun this week! It's been great to change mindset on how I write code to be TDD focused. Using JEST I've been incrementally adding functionality to my code to pass unit-tests each time and make my functions more robust!&lt;/p&gt;

&lt;p&gt;At times it has taken a lot of self-control to not go ahead and implement functionality to the code before it's needed! I've found this has been great for two main reasons. One of the reasons has been to not add complexity to a function, and it has also been great to understand how every bit of code works in more depth.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#value-vs-reference"&gt;
  &lt;/a&gt;
  Value vs Reference
&lt;/h3&gt;

&lt;p&gt;Learning the difference between where primitive types are passed by their value, and non-primitives are passed by a reference to that object in memory. This has shed light on a lot of the quirks I encountered early on in learning JS. As well as being meaningful when testing for mutation across my functions&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#destructuring-assignment"&gt;
  &lt;/a&gt;
  Destructuring Assignment
&lt;/h3&gt;

&lt;p&gt;On the first time of seeing array/object destructring, it seemed like a syntax error! üòÇ&lt;/p&gt;

&lt;p&gt;Seeing square/curly braces on the left-hand side of the assignment operator, was so odd to start with, but oddly made so much sense, especially in the context of exports and requires!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-ive-found-useful-this-week"&gt;
  &lt;/a&gt;
  Resources I've found useful this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#state-of-js"&gt;
  &lt;/a&gt;
  State of JS
&lt;/h3&gt;

&lt;p&gt;Whilst not a resource per say, &lt;a href="https://2020.stateofjs.com/en-US/technologies/testing/"&gt;State of JS&lt;/a&gt; been increadibly useful to put a little more context to a lot of the techonologies I see mentioned accross Twitter and job specs. Also who doesn't love a good bit of data visuisation üòÖü§ì&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jest-docs"&gt;
  &lt;/a&gt;
  JEST docs
&lt;/h3&gt;

&lt;p&gt;When getting familiar with testing and what certain assertions &lt;em&gt;actually&lt;/em&gt; test for, the &lt;a href="https://jestjs.io/"&gt;JEST docs&lt;/a&gt; have come in handy to solidify the points that the tutors have been driving home this week!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-partners"&gt;
  &lt;/a&gt;
  My partners
&lt;/h3&gt;

&lt;p&gt;Learning from my partners this week has been increadibly valuable. I have definitely felt more comfortable towards the end of this week with working in a pair, screen sharing whilst &lt;em&gt;trying&lt;/em&gt; to type, and communicating in both the Driver and Navigator role, but I know there's a lot of improvment and work to do on this very specific skill.&lt;/p&gt;

&lt;p&gt;Writing this makes me think of a &lt;a href="https://www.codenewbie.org/podcast/what-good-soft-skills-look-like"&gt;CodeNewbie&lt;/a&gt; podcast from not that long ago, highlighting just how important these soft skills are in dev roles.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>bootcamp</category>
    </item>
    <item>
      <title>"Should I learn React?"</title>
      <author>sheriffderek</author>
      <pubDate>Sun, 16 May 2021 19:37:19 +0000</pubDate>
      <link>https://dev.to/perpetual_edu/should-i-learn-react-49o3</link>
      <guid>https://dev.to/perpetual_edu/should-i-learn-react-49o3</guid>
      <description>&lt;p&gt;If you're asking this question...&lt;/p&gt;

&lt;p&gt;Then the answer is &lt;em&gt;no.&lt;/em&gt; Why?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-IZySRgEHXk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;When you know &lt;em&gt;for sure&lt;/em&gt; what wall you've hit, what needs to happen, what tool makes that happen, and you understand the tech debt you'll incur, then (and only then) - should you even consider learning it. That goes for anything. &lt;/p&gt;

&lt;p&gt;Should you learn CSS Grid? &lt;/p&gt;

&lt;p&gt;(If you're asking... then - &lt;em&gt;no&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Should you learn Rails? &lt;/p&gt;

&lt;p&gt;(If you're asking... then - &lt;em&gt;no&lt;/em&gt;)&lt;/p&gt;




&lt;p&gt;Would you like to learn "All the things" in order of importance and skip all of the "Should I..." and all the youtube videos and late nights and tutorials?&lt;/p&gt;

&lt;p&gt;Check out what we're doing at Perpetual Dot Education.&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>Techniques for Effective Software Development Effort Estimation</title>
      <author>Jesal Gadhia</author>
      <pubDate>Sun, 16 May 2021 19:31:15 +0000</pubDate>
      <link>https://dev.to/jesalg/techniques-for-effective-software-development-effort-estimation-1k71</link>
      <guid>https://dev.to/jesalg/techniques-for-effective-software-development-effort-estimation-1k71</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-long-do-you-think-itll-take"&gt;
  &lt;/a&gt;
  How long do you think it'll take?
&lt;/h2&gt;

&lt;p&gt;As builders and creative people, we are all too familiar with that question. Getting estimates right is incredibly difficult and it's a skill that we learn slowly over time as we gain more experience building and shipping projects.&lt;/p&gt;

&lt;p&gt;So why is this simple exercise so difficult? Oftentimes it's because we forget to ask the right questions and make assumptions that may not be correct. Let's examine what are these questions that we should be asking and break them down into phases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scoping-what-is-being-requested-and-when-is-it-needed"&gt;
  &lt;/a&gt;
  Scoping ‚Äî What is being requested and when is it needed?
&lt;/h2&gt;

&lt;p&gt;Don't assume what you think of as ‚Äúdone‚Äù is the same as what the party asking for an estimate would call,  ‚Äúdone‚Äù. It is important to explicitly call out the timeline and specific deliverables before doing the exercise of estimation.&lt;/p&gt;

&lt;p&gt;So part of that is first understanding what you are being asked to estimate. Make sure what you have in mind is an acceptable outcome for the stakeholder. If you don't already have it, make a list of user personas and stories to align on the requirements with the stakeholder and decide on what will be in scope.&lt;/p&gt;

&lt;p&gt;Secondly, understand the user group that should be targeted as part of the delivery timeline. For example, will the product be shipped in phases such as internal, friends &amp;amp; family, early access, general availability, etc? If so what does our estimate aim for? Be explicit about which release phase you are estimating for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-exploration-how-will-it-be-built"&gt;
  &lt;/a&gt;
  Technical Exploration ‚Äî How will it be built?
&lt;/h2&gt;

&lt;p&gt;To provide a good estimate there has to be some level of understanding of the existing system and how to go about making changes in it.&lt;/p&gt;

&lt;p&gt;You can never know exactly all the steps you may need to take but there has to be a certain degree of confidence. Anything below 70% confidence would warrant a technical exploration or a &lt;a href="https://www.scaledagileframework.com/spikes/"&gt;spike&lt;/a&gt; to get a better understanding of the required effort.&lt;/p&gt;

&lt;p&gt;If you are going to touch a particular aspect of the system, take the opportunity to leave it in a better state than you found it in. This is a good time to identify if there are any long-standing hotspots or technical debt that could be addressed as part of this task. Even small incremental improvements will help keep the system maintainable over the long run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#capacity-planning-what-is-the-level-of-effort"&gt;
  &lt;/a&gt;
  Capacity Planning ‚Äî What is the level of effort?
&lt;/h2&gt;

&lt;p&gt;The next step in formulating an estimate is to get a handle on the capacity. For example, based on the technical exploration, you may think something might require one week of effort. This is the most common step where the estimation effort derails.&lt;/p&gt;

&lt;p&gt;We are not done. We still have to further refine that and ask, ‚ÄúIs it one week of an average engineer's time? Or is it specifically your time?‚Äù&lt;/p&gt;

&lt;p&gt;If you are estimating for yourself, does that account for all the meetings you have to attend? Are there any holidays coming up? Do you have any other competing priorities or commitments? Estimate the time you may have to focus on those things and add that to the estimate.&lt;/p&gt;

&lt;p&gt;Also, does this account for time to deal with any potential hiccups or areas of high ambiguity that you may still have to be fleshed out? Figure out your confidence level after the technical exploration, then account for some additional time based on the percent of ambiguity that remains. It might be helpful to go through a &lt;a href="https://tanzu.vmware.com/developer/practices/risks-and-mitigations/"&gt;Risks &amp;amp; Mitigations&lt;/a&gt; exercise here where you can list out all the areas of risks and potential actions to mitigate them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment-process-what-will-it-take-to-be-deployed"&gt;
  &lt;/a&gt;
  Deployment Process ‚Äî What will it take to be deployed?
&lt;/h2&gt;

&lt;p&gt;We are in the final stretch, but the exercise is not over yet! Now that we are getting a better handle on the actual engineering time, let's start to think about the process of shipping the work.&lt;/p&gt;

&lt;p&gt;What are the review phases that you will encounter? Will the changes have to go through peer reviews? If so, what kind of cycle time can we expect from the reviewers? There may be a review/feedback cycle to each change that is shipped. How long will that take approximately?&lt;/p&gt;

&lt;p&gt;Will there be any other reviews outside of peer reviews? Will this have to go through a design review to ensure the final product matches the designs? Will it have to go through any compliance audits such as Privacy, Security, Legal, etc? Try to gather the rough turnaround time for those.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;Providing time-based estimates is always hard. It involves a slew of factors and varies from person to person. That's one of the reasons why many teams have transitioned to a practice of assigning points to a task known as "story points", which is an &lt;a href="https://www.atlassian.com/agile"&gt;agile development&lt;/a&gt; practice.&lt;/p&gt;

&lt;p&gt;Instead of time spent, the team would assign a relative complexity of a task on a point scale. The scale can be anything from Fibonacci sequence to t-shirt sizes. Over time, the team builds a better understanding of how their story points map to difficulty of a task which in turn can be used to inform timelines.&lt;/p&gt;

&lt;p&gt;No matter which framework you decide to use, like developing any skill, estimation requires continuous practice, refinement, and learning. You'll get better and better if you treat it as a skill that can be developed over time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was originally published on the &lt;a href="https://build.betterup.com/techniques-for-effective-software-development-effort-estimation/"&gt;BetterUp Product Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>softwaredevelopment</category>
      <category>agile</category>
      <category>projectmanagement</category>
    </item>
    <item>
      <title>I built an app with $0</title>
      <author>Pleasant Tech</author>
      <pubDate>Sun, 16 May 2021 19:28:57 +0000</pubDate>
      <link>https://dev.to/pleasanttech/i-built-an-app-with-0-2cj0</link>
      <guid>https://dev.to/pleasanttech/i-built-an-app-with-0-2cj0</guid>
      <description>&lt;p&gt;In this video I explain how I built an app with NO MONEY at all. This is my first time and it went well , I'd love to hear your feedbacks! üòÑ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/5RYw77yibQk"&gt;https://youtu.be/5RYw77yibQk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tech</category>
      <category>react</category>
      <category>startup</category>
      <category>programming</category>
    </item>
    <item>
      <title>What I Learned This Week #1</title>
      <author>blaquebeardcoder </author>
      <pubDate>Sun, 16 May 2021 19:04:03 +0000</pubDate>
      <link>https://dev.to/blaquebeardcoder/what-i-learned-this-week-1-560c</link>
      <guid>https://dev.to/blaquebeardcoder/what-i-learned-this-week-1-560c</guid>
      <description>&lt;p&gt;What I Learned This Week #1&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wiltw"&gt;
  &lt;/a&gt;
  WILTW
&lt;/h1&gt;

&lt;p&gt;By. Jahaziel Israel&lt;/p&gt;

&lt;p&gt;So, it‚Äôs taken me 6 weeks to actually muster up the mental fortitude and the discipline to get into this new habit of blogging about my latest journey into the world of java programming -- mainly because I‚Äôve been on this seemingly never-ending refinement of finding an optimal distraction free work-life balance in this post COVID world.  &lt;/p&gt;

&lt;p&gt;In all honesty, I prefer to have the option of co-working in public spaces where there are peripheral distractions ( you know, like pretentious hipster parents gently scolding their rambunctious sugar-filled toddlers over their overpriced iced lattes), asking other human beings to keep their eyes on my laptop while I run to the bodega to buy more reasonably priced food than the cafe,  (I still can‚Äôt justify $15 for a slice of avocado toast?)  - I find that when I‚Äôm in the solitude of my ‚Äúcozy‚Äù studio apartment, that I find myself surrounded by a litany of distractions disguised as multi-tasking or busy work, which essentially means that I get nothing done.&lt;/p&gt;

&lt;p&gt;After working on my last React and React Native collaborative project called &lt;a href="https://tsundoku.netlify.app/"&gt;Tsundoku&lt;/a&gt;, which is the Japanese word meaning ‚Äúbuying books and not reading them; letting books pile up unread on shelves or floors or nightstands‚Äù, I‚Äôve lowkey become obsessed with Japanese philosophy, culture and literature, and have since completed the memoir and first 2 works of the iconic Japanese fiction author Haruki Murukami.&lt;/p&gt;

&lt;p&gt;This led me to discover the Japanese mysterious concept of Ikigai, which translates roughly as ‚Äúthe happiness of always being busy‚Äù, and is the source that explains the extraordinary longevity of the Japanese, especially on the island of Okinawa.  I‚Äôm currently reading ‚ÄúIkigai: The Japanese Secret to a Long and Happy Life‚Äù by Hector Garcia and Fransec Miralles‚Äù and here are some great gems that I‚Äôve taken and applied to optimize my current dilemma of achieving flow while studying and learning programming remotely, during a global pandemic;&lt;/p&gt;

&lt;p&gt;In Chapter IV: Find flow in everything you do ‚ÄúHow to turn work and free time into spaces for growth‚Äù, there are some key principles discussed from researcher Owen Schaffer of DePaul University;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Seven Conditions for Achieving Flow&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Knowing what to do&lt;/li&gt;
&lt;li&gt;Knowing how to do it&lt;/li&gt;
&lt;li&gt;Knowing how well you are doing&lt;/li&gt;
&lt;li&gt;Knowing where to go (where navigation is involved)&lt;/li&gt;
&lt;li&gt;Perceiving significant challenges&lt;/li&gt;
&lt;li&gt;Perceiving significant skills&lt;/li&gt;
&lt;li&gt;Being free from distractions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I shared earlier, I have been experiencing self-imposed writers block for the past 6 weeks, and according to some of the strategies I‚Äôve read about, had I just taken out a blank Google Doc and got the first few words going (like I‚Äôm currently doing), I would get over my mental block and achieve a pleasant  flow, or ikigai.&lt;/p&gt;

&lt;p&gt;Strategy 1: Reflect on what we hope to achieve before starting study/work&lt;br&gt;
Before we begin each day, we should ask ourselves questions such as;&lt;/p&gt;

&lt;p&gt;What is my objective for today‚Äôs session in the studio?&lt;br&gt;
How many words am I going to write today for the article coming out next week?&lt;br&gt;
What is my team‚Äôs mission?&lt;br&gt;
How fast will I set the metronome tomorrow in order to play that sonata at an allegro tempo by the end of the week?&lt;/p&gt;

&lt;p&gt;I‚Äôve found that when I take the time to be intentional about how I‚Äôm going to spend my time during the day, that I get more sh*t done and I‚Äôm more productive -- and for me, this list has to be analog (handwritten in a planner‚Ä¶ yeah I‚Äôm still old school like that!).&lt;/p&gt;

&lt;p&gt;Strategy 2: Concentrate on a Single Task&lt;/p&gt;

&lt;p&gt;Now, this has been one of the biggest challenges for me during the pandemic working remotely from home while public spaces and indoor dining in coffee shops and cafes  is severely limited or non-existent. From watching Treehouse tutorials on 1.5x the speed while simultaneously streaming lo-fi music, and toggling through (VERY DENSE) Java documentation‚Ä¶ to then Googling more simplified explanations or videos of the very dense Java documentation,  and being distracted with mobile notifications, Amazon and Uber Eats deliveries and never-ending zoom calls &amp;gt;&amp;gt; lol.. It‚Äôs amazing that I‚Äôve been able to keep up.&lt;/p&gt;

&lt;p&gt;The authors write that ‚Äúconcentrating on one thing at a time may be the single most important factor in achieving flow.‚Äù  Studies show that working on several things at once lowers our productivity by at least 60% and our IQ by more than 10 points.  In order to focus on a single task we need:&lt;/p&gt;

&lt;p&gt;To be in a distraction-free environment&lt;br&gt;
To have control over what we are doing at every moment&lt;/p&gt;

&lt;p&gt;Here are some tips that I‚Äôve implemented in the book that have actually helped my significantly in being more focused on my learning during this ‚Äúpandemonium‚Äù;&lt;/p&gt;

&lt;p&gt;Don‚Äôt look at any kind of screen the first hour that I‚Äôm awake and the last hour before I go to sleep.  I spend that time writing gratitude, journaling and reading.&lt;br&gt;
Turn my phone on DND and mute all notifications before beginning work.&lt;br&gt;
Time blocking tasks like checking emails, social media, calling friends, etc‚Ä¶&lt;br&gt;
Pomodoro Technique has been helpful &amp;gt;&amp;gt; and watching YouTubers who make pomodoro study with me videos. (I‚Äôll be creating some of these soon!)&lt;br&gt;
Work in a space where you will not be distracted. For me, I can‚Äôt do this at home, so I have to go to a library or cafe and look for several weeks until I found the right place.&lt;/p&gt;

&lt;p&gt;TECHY STUFF&lt;br&gt;
There is a whole litany of other more technical topics that I learned this week, including;&lt;/p&gt;

&lt;p&gt;How to construct objects and create instances of Objects in Java&lt;br&gt;
Managing state with getters and setters&lt;br&gt;
Arrays &amp;gt; Array literals, multi-dimensional arrays and ArrayLists&lt;br&gt;
Java Lists &amp;amp; Maps&lt;br&gt;
Strings are actually objects&lt;br&gt;
IntelliJ is becoming less scary the more I use it‚Ä¶ lol&lt;/p&gt;

&lt;p&gt;Whew‚Ä¶ I finally got all that out! &lt;/p&gt;

&lt;p&gt;‚úåüèæ ya next week. &lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>android</category>
      <category>java</category>
      <category>wiltw</category>
    </item>
    <item>
      <title>Movies app using react-query for server-side state management</title>
      <author>Rishikesh Vedpathak</author>
      <pubDate>Sun, 16 May 2021 18:37:40 +0000</pubDate>
      <link>https://dev.to/rishikeshvedpathak/movies-app-using-react-query-for-server-side-state-management-22de</link>
      <guid>https://dev.to/rishikeshvedpathak/movies-app-using-react-query-for-server-side-state-management-22de</guid>
      <description>&lt;p&gt;State management is one of the key factors that developers should consider before starting a React project. React developers usually tend to use libraries like Redux for a solution and with that, they often misuse the way the redux should be used.&lt;/p&gt;

&lt;p&gt;In this article, we will see how react-query helps solve the issues we face with redux and the practical example to demonstrate the use case of react-query.&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href="https://react-query-movies-app.netlify.app/"&gt;demo application&lt;/a&gt; we are going to discuss,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/Q92YalYbfkM"&gt;Youtube preview&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-react-query"&gt;
  &lt;/a&gt;
  What is React Query?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;React Query is often described as the missing data-fetching library for React, but in more technical terms, it makes fetching, caching, synchronizing and updating server state in your React applications a breeze.&lt;br&gt;
&lt;a href="https://react-query.tanstack.com/"&gt;&lt;strong&gt;React Query&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;React Query changes the way we look at our application state. It introduces the concepts of &lt;strong&gt;Client state&lt;/strong&gt; and &lt;strong&gt;Server state&lt;/strong&gt;. While using redux, we often put all the state to redux store even the local state like if a sidebar is open or not. React Query allows you to defeat and overcome the tricky challenges and hurdles of server state and control your app data before it starts to control you.&lt;/p&gt;

&lt;p&gt;Key features of React Query,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Help you remove &lt;strong&gt;many&lt;/strong&gt; lines of complicated and misunderstood code from your application and replace them with just a handful of lines of React Query logic.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make your application more maintainable and easier to build new features without worrying about wiring up new server state data sources&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have a direct impact on your end-users by making your application feel faster and more responsive than ever before.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Potentially help you save on bandwidth and increase memory performance&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;You can install React Query with &lt;strong&gt;NPM **or **Yarn&lt;/strong&gt;,&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-query 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add react-query
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#devtools-for-react-query"&gt;
  &lt;/a&gt;
  Devtools for React Query
&lt;/h2&gt;

&lt;p&gt;React Query does come with dedicated devtools. The devtools are bundle split into the react-query/devtools. Just import it into your app.js file as,&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { ReactQueryDevtools } from 'react-query/devtools'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;By default, React Query Devtools are not included in production bundles when process.env.NODE_ENV === 'production', so you don't need to worry about excluding them during a production build.&lt;/p&gt;

&lt;p&gt;Once imported, wrap your root component with QueryClientProvider&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Now, when you run your application locally it will show a small react-query icon in the bottom-left corner and when you click on it opens up a devtools as shown below,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C62nyrBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3810/1%2A6BfuqOOH_RrrVI7g4ZRI-Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C62nyrBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3810/1%2A6BfuqOOH_RrrVI7g4ZRI-Q.png" alt="React Query Devtools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The devtools has many other options which we can configure at our convenience. Refer to &lt;a href="https://react-query.tanstack.com/devtools"&gt;https://react-query.tanstack.com/devtools&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#omdb-api"&gt;
  &lt;/a&gt;
  OMDb API
&lt;/h2&gt;

&lt;p&gt;For this project, we are using the OMDb API. It is a free web service to obtain movie information. It is simple to use and the doc page is pretty easy to understand. However it just provides the GET APIs, so we won‚Äôt be able to perform POST/PUT/DELETE operations.&lt;br&gt;
&lt;a href="https://www.omdbapi.com/"&gt;&lt;strong&gt;OMDb API&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#fetch-movies-using-react-queryusequery-hook"&gt;
  &lt;/a&gt;
  Fetch movies using React Query(useQuery hook)
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
Yes, it is as simple as it looks. The useQuery returns a few very important states.

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;isLoading or status === 'loading' - The query has no data and is currently fetching&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;isError or status === 'error' - The query encountered an error&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;isSuccess or status === 'success' - The query was successful and data is available&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;isIdle or status === 'idle' - The query is currently disabled (you'll learn more about this in a bit)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Beyond those primary states, more information is available depending on the state of the query:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;error - If the query is in an isError state, the error is available via the error property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;data - If the query is in a success state, the data is available via the data property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;isFetching - In any state, if the query is fetching at any time (including background refetching) isFetching will be true.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using these states we can decide what to display on UI,&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#query-keys"&gt;
  &lt;/a&gt;
  Query Keys
&lt;/h2&gt;

&lt;p&gt;Consider a scenario where we want to fetch movies depending on the search text. For this, we need to pass search text as a query parameter to our GET API. We can achieve this with the help of query keys.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At its core, React Query manages query caching for you based on query keys. Query keys can be as simple as a string, or as complex as an array of many strings and nested objects. As long as the query key is serializable, and &lt;strong&gt;unique to the query‚Äôs data&lt;/strong&gt;, you can use it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our case, the query key is a simple string value.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
You can see the queries cached in devtools,

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ofsPPt3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3806/1%2AVDrIJSXftTwqW8cl6SyiQA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ofsPPt3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3806/1%2AVDrIJSXftTwqW8cl6SyiQA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#understanding-caching"&gt;
  &lt;/a&gt;
  Understanding Caching
&lt;/h2&gt;

&lt;p&gt;The query key that we have provided to our useQuery hook is used internally for refetching, caching, and sharing your queries throughout your application.&lt;/p&gt;

&lt;p&gt;To understand this let's see the below steps,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You searched ‚ÄòBatman‚Äô for the very first time. It will fetch data from API and while fetching, the application will display loader on UI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you clear the search box and searched for ‚ÄòMarvel‚Äô, the same will happen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You again clear the search box and searched for ‚ÄòBatman‚Äô again, in this case, you will see search results are displayed immediately without any wait time and loader on UI. This is because React query managed to cache the data for the unique key i.e. [‚Äúmovies‚Äù, ‚ÄúBatman‚Äù].&lt;br&gt;
And React Query intelligently updates the data returned from the second API call in its cached data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This improves our application performance.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;React Query is a powerful and easy-to-use library to manage our application‚Äôs server state. It is a great alternative to Redux, MobX and can reduce boilerplate code to a larger extent. React Query is not a replacement for local/client state management. However, you can use React Query alongside most client state managers with zero issues.&lt;/p&gt;

&lt;p&gt;We have created a Movie List Application just using React Query to demonstrate its use case. We did not use any other state management library which concludes the importance of keeping client and server states separately.&lt;/p&gt;

&lt;p&gt;You can find the final code in the GitHub repo,&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/RishikeshVedpathak"&gt;
        RishikeshVedpathak
      &lt;/a&gt; / &lt;a href="https://github.com/RishikeshVedpathak/react-query-movies-app"&gt;
        react-query-movies-app
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A simple ReactJS movies app based on OMDb API to demonstrate react-query use cases as a state management library
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
React-Query-Movies-App&lt;/h1&gt;
&lt;p&gt;A simple ReactJS movies app based on OMDb API to demonstrate react-query use cases as a state management library&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1983286/118326220-4ff67700-b522-11eb-8bf7-6e5e637fc8c9.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y4AFQZEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1983286/118326220-4ff67700-b522-11eb-8bf7-6e5e637fc8c9.png" alt="Movie List App using React Query"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/RishikeshVedpathak/react-query-movies-app"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;I hope this will help you to understand and encourage you to freely use React Query in your application. Please feel free to give feedback and suggestions!&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactquery</category>
      <category>reactstatemanagement</category>
      <category>javascript</category>
    </item>
    <item>
      <title>INTRODUCTION TO MACHINE 
LEARNING</title>
      <author>Ayush Goel</author>
      <pubDate>Sun, 16 May 2021 18:19:49 +0000</pubDate>
      <link>https://dev.to/1801ayush/introduction-to-machine-learning-3mof</link>
      <guid>https://dev.to/1801ayush/introduction-to-machine-learning-3mof</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VnDw8Bcv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whaf9lrjq14b8xjlj1yp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VnDw8Bcv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whaf9lrjq14b8xjlj1yp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Machine learning is the science of getting computers to act without being explicitly programmed. In the past decade, machine learning has given us self-driving cars, practical speech recognition, effective web search, and a vastly improved understanding of the human genome. Machine learning is so pervasive today that you probably use it dozens of times a day without knowing it.Many researchers also think it is the best way to make progress towards human-level AI.&lt;/p&gt;

&lt;p&gt;We see daily news stories that herald new breakthroughs in facial recognition technology, self driving cars or computers that can have a conversation just like a real person. Machine Learning technology is set to revolutionise almost any area of human life and work, and so will affect all our lives, and so you are likely to want to find out more about it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vfJp5rfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2sj6senp1aocvr1cwpwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vfJp5rfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2sj6senp1aocvr1cwpwj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Model is nothing but just a mathematical equation for eg y=mx+c where y=output, x=input and m&amp;amp;c are parameters and  training the model just means generating the parameters for the equation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have to identify for what type of data, which algo 
we have to use to get the ML model, we can also combine 
many algos to get the best model for us.&lt;/li&gt;
&lt;li&gt;Train:to understand how to calculate 
Test:to check if the machine can calculate.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#types-of-machine-learning"&gt;
  &lt;/a&gt;
  TYPES OF MACHINE LEARNING?
&lt;/h1&gt;

&lt;p&gt;Machine Learning can be classified into 3 types of algorithms.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-supervised-learning"&gt;
  &lt;/a&gt;
  1. Supervised Learning
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-unsupervised-learning"&gt;
  &lt;/a&gt;
  2. Unsupervised Learning
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-reinforcement-learning"&gt;
  &lt;/a&gt;
  3. Reinforcement Learning
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r_v3Vqfl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zd1j4ijp4e1jiwc9x2n5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_v3Vqfl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zd1j4ijp4e1jiwc9x2n5.png" alt="1_8wU0hfUY3UK_D8Y7tbIyFQ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#supervised-learning"&gt;
  &lt;/a&gt;
  SUPERVISED LEARNING:
&lt;/h2&gt;

&lt;p&gt;It is defined by its use of labeled datasets to train algorithms that to classify data or predict outcomes accurately. As input data is fed into the model, it adjusts its weights until the model has been fitted appropriately, which occurs as part of the cross validation process. Supervised learning helps organisations solve for a variety of real-world problems at scale, such as classifying spam in a separate folder from your inbox.&lt;br&gt;
Supervised learning uses a training set to teach models to yield the desired output. This training dataset includes inputs and correct outputs, which allow the model to learn over time. The algorithm measures its accuracy through the loss function, adjusting until the error has been sufficiently minimised.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--brfhFTMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ms2yfsihvror14emnsht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--brfhFTMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ms2yfsihvror14emnsht.png" alt="Machine-Learning-Explained1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#supervised-learning-can-be-separated-into-two-types-of-problems-when-data-mining-classification-and-regression"&gt;
  &lt;/a&gt;
  Supervised learning can be separated into two types of problems when data mining -- classification and regression:
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#classification"&gt;
  &lt;/a&gt;
  Classification:
&lt;/h6&gt;

&lt;p&gt;It uses an algorithm to accurately assign test data into specific categories. It recognises specific entities within the dataset and attempts to draw some conclusions on how those entities should be labeled or defined. Common classification algorithms are linear classifiers, support vector machines (SVM), decision trees, k-nearest neighbour, and random forest, which are described in more detail below.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#regression"&gt;
  &lt;/a&gt;
  Regression:
&lt;/h6&gt;

&lt;p&gt;It is used to understand the relationship between dependent and independent variables. It is commonly used to make projections, such as for sales revenue for a given business. Linear regression, logistical regression, and polynomial regression are popular regression algorithms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unsupervised-learning"&gt;
  &lt;/a&gt;
  UNSUPERVISED LEARNING:
&lt;/h2&gt;

&lt;p&gt;It uses machine learning algorithms to analyse and cluster unlabelled datasets. These algorithms discover hidden patterns or data groupings without the need for human intervention. &lt;/p&gt;

&lt;p&gt;Its ability to discover similarities and differences in information make it the ideal solution for exploratory data analysis, cross-selling strategies, customer segmentation, and image recognition.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzYqJTfo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0lhypr5j1y2h0gsxhfo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzYqJTfo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0lhypr5j1y2h0gsxhfo.png" alt="Machine-Learning-Explained2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#unsupervised-learning-models-are-utilised-for-three-main-tasksclustering-association-and-dimensionality-reduction"&gt;
  &lt;/a&gt;
  Unsupervised learning models are utilised for three main tasks‚Äîclustering, association, and dimensionality reduction.
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#clustering"&gt;
  &lt;/a&gt;
  Clustering:
&lt;/h6&gt;

&lt;p&gt;It is a data mining technique which groups unlabelled data based on their similarities or differences. Clustering algorithms are used to process raw, unclassified data objects into groups represented by structures or patterns in the information. Clustering algorithms can be categorised into a few types, specifically exclusive, overlapping, hierarchical, and probabilistic.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#association-rule"&gt;
  &lt;/a&gt;
  Association rule:
&lt;/h6&gt;

&lt;p&gt;It is a rule-based method for finding relationships between variables in a given dataset.These methods are frequently used for market basket analysis, allowing companies to better understand relationships between different products. Understanding consumption habits of customers enables businesses to develop better cross-selling strategies and recommendation engines. Examples of this can be seen in Amazon‚Äôs ‚ÄúCustomers Who Bought This Item Also Bought‚Äù or Spotify‚Äôs "Discover Weekly" playlist.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#dimensionality-reduction"&gt;
  &lt;/a&gt;
  Dimensionality reduction:
&lt;/h6&gt;

&lt;p&gt;While more data generally yields more accurate results, it can also impact the performance of machine learning algorithms (e.g. overfitting) and it can also make it difficult to visualise datasets. Dimensionality reduction is a technique used when the number of features, or dimensions, in a given dataset is too high. It reduces the number of data inputs to a manageable size while also preserving the integrity of the dataset as much as possible. It is commonly used in the preprocessing data stage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reinforcement-learning"&gt;
  &lt;/a&gt;
  REINFORCEMENT LEARNING:
&lt;/h2&gt;

&lt;p&gt;In reinforcement learning, an artificial intelligence faces a game-like situation. The computer employs trial and error to come up with a solution to the problem. To get the machine to do what the programmer wants, the artificial intelligence gets either rewards or penalties for the actions it performs. Its goal is to maximise the total reward.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nyKv9gmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/407r0jv07v9tn9dq7vm3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nyKv9gmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/407r0jv07v9tn9dq7vm3.png" alt="Machine-Learning-Explained3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although the designer sets the reward policy‚Äìthat is, the rules of the game‚Äìhe gives the model no hints or suggestions for how to solve the game. It‚Äôs up to the model to figure out how to perform the task to maximise the reward, starting from totally random trials and finishing with sophisticated tactics and superhuman skills. By leveraging the power of search and many trials, reinforcement learning is currently the most effective way to hint machine‚Äôs creativity. In contrast to human beings, artificial intelligence can gather experience from thousands of parallel gameplays if a reinforcement learning algorithm is run on a sufficiently powerful computer infrastructure.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION:
&lt;/h1&gt;

&lt;p&gt;In this blog, I have presented you with the basic concepts of Machine Learning and I hope this blog was helpful and would have motivated you enough to get interested in the topic.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>beginners</category>
      <category>ai</category>
      <category>firstpost</category>
    </item>
    <item>
      <title>JavaScript Tips, Tricks and Best Practices</title>
      <author>kpiteng</author>
      <pubDate>Sun, 16 May 2021 18:01:07 +0000</pubDate>
      <link>https://dev.to/kpiteng/javascript-tips-tricks-and-best-practices-33dm</link>
      <guid>https://dev.to/kpiteng/javascript-tips-tricks-and-best-practices-33dm</guid>
      <description>&lt;p&gt;Hello Developers! In this tech article I will cover JavaScript Trips, Tricks and Best Practices. In daily coding many times we wrote a long lines of code, read this article I am going to cover best javascript practices, tips &amp;amp; tricks to reduce lines of code and minimize your works using JavaScript in-built functions. I will cover array of JavaScript function along with example right away, So Let's Start!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take away -&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Replace All&lt;/li&gt;
&lt;li&gt;Group By Array Of Objects&lt;/li&gt;
&lt;li&gt;Next - next()&lt;/li&gt;
&lt;li&gt;Map - map()&lt;/li&gt;
&lt;li&gt;Cast Values in array using - map()&lt;/li&gt;
&lt;li&gt;Filter - filter()&lt;/li&gt;
&lt;li&gt;Find Index - findIndex()&lt;/li&gt;
&lt;li&gt;Best Practice - Avoid If/Else | Switch&lt;/li&gt;
&lt;li&gt;Destructuring Assignment - Smart Tips!&lt;/li&gt;
&lt;li&gt;Numeric Separators&lt;/li&gt;
&lt;li&gt;Get Unique Elements || Remove Duplicate Objects From Array -&lt;/li&gt;
&lt;li&gt;Promise Any&lt;/li&gt;
&lt;li&gt;Logical Assignment Operators&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#1-replace-all-replaceallarg1-arg2"&gt;
  &lt;/a&gt;
  1. Replace All - replaceAll(arg1, arg2)
&lt;/h1&gt;

&lt;p&gt;replaceAll('arg1', 'arg2') - Easily replace all the characters that you specify in a string without using a regex. It takes two arguments, arg1 - the character you want to replace and arg2 - the character you want to replace it by.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const string = "Javascript is the best web scripting language. Javascript can be used for both front end and backend";
console.log(string.replace("Javascript", "Typescript"));

// output: Typescript is the best web scripting language. Typescript can be used for both front end and backend

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let myStr = ‚ÄòPrograssing‚Äô;
console.log(myStr.replaceAll(‚Äús‚Äù, ‚Äúm‚Äù)); //output: Programming
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-group-by-array-of-objects-reduce"&gt;
  &lt;/a&gt;
  2. Group By Array Of Objects - reduce()
&lt;/h1&gt;

&lt;p&gt;Very Important Tricks - Many times we need to group result from array, Let's check how reduce() help us to achieve, over here I have sent two arguments: arg1 - arrCity (array), arg2 - region (key-name - on which you want to apply group)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var arrCity = [
  {'region': 'Europe', 'name': 'Paris'},
  {'region': 'Europe', 'name': 'Amsterdam'},
  {'region': 'Europe', 'name': 'Vienna'},
  {'region': 'UnitedStates', 'name': 'New York'},
  {'region': 'UnitedStates', 'name': 'San Francisco'},
  {'region': 'Europe', 'name': 'Barcelona'},
 ]

var groupBy = function(xs, key) {
return xs.reduce(function(rv, x) {
  (rv[x[key]] = rv[x[key]] || []).push(x);
  return rv;
  }, {});
};

var resultByRegion = groupBy(arrCity, 'region'); // pass array &amp;amp; key-name

console.log(resultByRegion);
//output: 
{
  Europe: [
    {name: "Paris", region: "Europe"}, 
    {name: "Amsterdam",region: "Europe"}, 
    {name: "Vienna",region: "Europe"}, 
    {name: "Barcelona",region: "Europe"}
  ],
  UnitedStates: [
    {name: "New York",region: "UnitedStates"}, 
    {name: "San Francisco",region: "UnitedStates"}
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-next-next"&gt;
  &lt;/a&gt;
  3. Next - next()
&lt;/h1&gt;

&lt;p&gt;Many times we are required to take a unique number for our business logic and we try random functions but it might chance it will repeat the same number again. Try next() will give you a unique number every time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function* getUniqueID() {
  var uniqueNumber = 0;
  while (true) {
    yield uniqueNumber++;
  }
}

const uniqueID = getUniqueID();

console.log(uniqueID.next().value); // output: 0
console.log(uniqueID.next().value); // output: 1
console.log(uniqueID.next().value); // output: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#4-map-map"&gt;
  &lt;/a&gt;
  4. Map - map()
&lt;/h1&gt;

&lt;p&gt;Map is widely used by developers in daily coding, Map offers various use cases depending upon your custom requirement. Let's check in code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var arrCity = [
  {
  'id': 1,
  'name': 'London',
  'region': 'UK',
  },
  {
  'id': 2,
  'name': 'Paris',
  'region': 'Europe',
  },
  {
  'id': 3,
  'name': 'New York',
  'region': 'United State',
  },
 ]

 const arrCityName = arrCity.map(city =&amp;gt; city.name);
 console.log(arrCityName); // output: ['London', 'Paris', 'New York']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Many times we required to add new key-pari within existing array, Let's do that,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Let's use arrCity over here,

arrCity.map(city =&amp;gt; city.cityWithName = city.name + ' - ' + city.region);
console.log(arrCity); 

// output: 
[{
  cityWithName: "London - UK", // new key-pair 
  id: 1,
  name: "London",
  region: "UK"
}, {
  cityWithName: "Paris - Europe", // new key-pair 
  id: 2,
  name: "Paris",
  region: "Europe"
}, {
  cityWithName: "New York - United State", // new key-pair 
  id: 3,
  name: "New York",
  region: "United State"
}]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's use another approach and add new key-pair value,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// We will use same array - arrCity over here,

const newArrCity = arrCity.map((city) =&amp;gt; ({
  ...city,
  newCity: true,
}));
console.log(newArrCity); 

// output: 
[{
  id: 1,
  name: "London",
  newCity: true, // new key-pair 
  region: "UK"
}, {
  id: 2,
  name: "Paris",
  newCity: true, // new key-pair 
  region: "Europe"
}, {
  id: 3,
  name: "New York",
  newCity: true, // new key-pair 
  region: "United State"
}]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#5-cast-values-in-array-using-map"&gt;
  &lt;/a&gt;
  5. Cast Values in array using - map()
&lt;/h1&gt;

&lt;p&gt;Awesome tricks - harness the power of map function you will convert an array of strings into an array of numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const arrStringValues = ['1', '2', '3', '4.567', '-89.95', [1.2345]];
const arrNumbers = arrStringValues.map(Number);

console.log(arrNumbers); // output: [1, 2, 3, 4.567, -89.95, 1.2345]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#6-filter-filter"&gt;
  &lt;/a&gt;
  6. Filter - filter()
&lt;/h1&gt;

&lt;p&gt;Consider you have an array and you want to take only relevant data, use filter() and apply your criteria it will return you filter result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var arrCity = [
  {'region': 'Europe', 'name': 'Paris'},
  {'region': 'Europe', 'name': 'Amsterdam'},
  {'region': 'Europe', 'name': 'Vienna'},
  {'region': 'UnitedStates', 'name': 'New York'},
  {'region': 'UnitedStates', 'name': 'San Francisco'},
  {'region': 'Europe', 'name': 'Barcelona'},
 ]

const arrEuropeCity = arrCity.filter(city =&amp;gt; city.region === 'Europe')

console.log(arrEuropeCity); 

output:
[
  {name: "Paris", region: "Europe"}, 
  {name: "Amsterdam", region: "Europe"}, 
  {name: "Vienna", region: "Europe"},
  {name: "Barcelona", region: "Europe"}
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#7-find-index-findindex"&gt;
  &lt;/a&gt;
  7. Find Index - findIndex()
&lt;/h1&gt;

&lt;p&gt;Very useful on daily coding - It's simple trick to find index of object from array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
const arrCity = [
  {'id':'1', 'name':'London'},
  {'id':'2', 'name':'Paris'},
  {'id':'3', 'name':'New York'}
];

const index = arrCity.findIndex(city =&amp;gt; city.name === 'Paris');
console.log(index); // output: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#8-best-practice-avoid-ifelse-switch"&gt;
  &lt;/a&gt;
  8. Best Practice - Avoid If/Else | Switch
&lt;/h1&gt;

&lt;p&gt;Many times we write conditional code, either we use if/else Or switch, I would suggest best code practice here and use smart trick, Let's check how it is going with If/Else,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getCityInformation(city) {
  if (city.toLowerCase() === "london") {
    return "Welcome to London!";
  } else if (rhyme.toLowerCase() === "paris") {
    return "Welcome to Paris!";
  } else if (rhyme.toLowerCase() === "amsterdam") {
    return "Welcome to Amsterdam!";
  }

  return "We're Sorry, No City Found!";
}
const londonCityInfo = getCityInformation('London');

console.log(londonCityInfo); // output: Welcome to London!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's avoid If/Else OR Switch and use our TRICK here,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getCityInformation(city) {
  const cityInfo = {
    "london": "Welcome to London!",
    "paris": "Welcome to Paris!",
    "amsterdam": "Welcome to Amsterdam!",
  };

  return cityInfo[city.toLowerCase()] ?? "We're Sorry, No City Found!";
}
const pariseCityInfo = getCityInformation('Paris');

console.log(pariseCityInfo); // output: Welcome to Paris!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#9-destructuring-assignment-smart-tips"&gt;
  &lt;/a&gt;
  9. Destructuring Assignment - Smart Tips!
&lt;/h1&gt;

&lt;p&gt;All you know about props extractor very well, its bit similar kind of syntax where you can give ALIAS_NAME which you extract from object which return you the smart result, Let's Check,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const region = {
  "id": 1,
  "name": "Europe",
  "city": ['Paris', 'Vienna', 'Amsterdam'],
};

const {id, name} = region;
const {0: paris, 2: amsterdam} = region.city;

console.log(id); // 1
console.log(name); // Europe
console.log(paris); // Paris
console.log(amsterdam); // Amsterdam
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#10-numeric-separators"&gt;
  &lt;/a&gt;
  10. Numeric Separators
&lt;/h1&gt;

&lt;p&gt;Numeric separators are one of the useful features that have been introduced in ES2021. This makes it easier to read large numbers in JavaScript by providing separation between digits using underscores _.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let myNumber = 3_000_000;
console.log(myNumber); //output: 3000000

let num = 0.000_0003;
console.log(num); //output: 3e-7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#11-get-unique-elements-remove-duplicate-objects-from-array"&gt;
  &lt;/a&gt;
  11. Get Unique Elements || Remove Duplicate Objects From Array
&lt;/h1&gt;

&lt;p&gt;What do you do to get unique elements from an array, manual iterate and check if an element exists or not? Let's try Set function to get unique results -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const arrIndex = [1,2,3,4,5,3,7,9,1,6,8,0];
const arrCity = ['Paris', 'London', 'New York', 'Paris' , 'Chicago'];

const uniqueIndex = [...new Set(arrIndex)];
const uniqueCity = [...new Set(arrCity)];

console.log(uniqueIndex); // output: [1, 2, 3, 4, 5, 7, 9, 6, 8, 0]
console.log(uniqueCity); // output: ["Paris", "London", "New York", "Chicago"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#12-promise-any"&gt;
  &lt;/a&gt;
  12. Promise Any
&lt;/h1&gt;

&lt;p&gt;Promise.any() takes an array of promises as an argument. If all the promises are resolved, then only it will return a result. It will wait until all promises complete their tasks, no matter whether it's resolve, reject.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const promise1 = new Promise((resolve, reject) =&amp;gt; {
  resolve(‚Äòpromise1 was resolved.‚Äô);
 });
 const promise2 = new Promise((resolve, reject) =&amp;gt; {
  resolve(‚Äòpromise2 was resolved.‚Äô);
 });
 const promise3 = new Promise((resolve, reject) =&amp;gt; {
  resolve(‚Äòpromise3 was resolved.‚Äô);
 });
 let result = Promise.any([promise1, promise2, promise3]);
 console.log(result); //output: promise1 was resolved. promise2 was resolved. promise3 was resolved.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#13-logical-assignment-operators"&gt;
  &lt;/a&gt;
  13. Logical Assignment Operators
&lt;/h1&gt;

&lt;p&gt;ES2021 come out with three useful logical assignment operators: &amp;amp;&amp;amp;= , ||= , and ??= .&lt;/p&gt;

&lt;p&gt;The logical assignment operator &amp;amp;&amp;amp;= is used between two values. If the first value is truthy, the second value will be assigned to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let firstNumber = 5;
let secondNumber = 20;
firstNumber &amp;amp;&amp;amp;= secondNumber; //output: 20
console.log(firstNumber); //output: 20
//Here is an equivalent to it:
if(firstNumber){
  firstNumber = secondNumber;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The logical assignment operator ||= is also used between two values. If the first value is not truthy(falsy), the second value will be assigned to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let firstNumber = null;
let secondNumber = 10;
firstNumber ||= secondNumber; //output: 10
console.log(firstNumber); //output: 10
//Here is an equivalent to it:
if(!firstNumber){
 firstNumber = secondNumber;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The logical assignment operator ??= checks if the first value is null or undefined. If it is, the second value is assigned to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//when first value is null or undefined
let firstNumber = null;
let secondNumber = 10;
firstNumber ??= secondNumber; //output: 10
console.log(firstNumber); //output: 10
//when first value is truthy
firstNumber = 9;
firstNumber ??= secondNumber; //output: 9
console.log(firstNumber); //output: 9
//Here is an equivalent to it:
if(firstNumber == null || firstNumber == undefined){
 firstNumber = secondNumber;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for reading Article!&lt;/p&gt;

&lt;p&gt;KPITENG | DIGITAL TRANSFORMATION&lt;br&gt;
&lt;a href="//www.kpiteng.com"&gt;www.kpiteng.com&lt;/a&gt; | &lt;a href="mailto:hello@kpiteng.com"&gt;hello@kpiteng.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>reactnative</category>
      <category>typescript</category>
    </item>
    <item>
      <title>A fusion of Makefile and Docker</title>
      <author>Gaurav Rai</author>
      <pubDate>Sun, 16 May 2021 17:48:23 +0000</pubDate>
      <link>https://dev.to/raigaurav/a-fusion-of-makefile-and-docker-45an</link>
      <guid>https://dev.to/raigaurav/a-fusion-of-makefile-and-docker-45an</guid>
      <description>&lt;p&gt;In our &lt;a href="https://dev.to/raigaurav/getting-ready-for-production-jio"&gt;previous&lt;/a&gt; article we have created a Dockerfile for our &lt;a href="https://mojolicious.org/"&gt;Mojolicious&lt;/a&gt; application. In there I mentioned that we have to run several docker command and when we map it across different environment we have to take care of different permutations and combinations.&lt;br&gt;
What if we can automate it more. What if we can abstract the complexity and as a user I just have to run minimum command to get it working.&lt;br&gt;
Here comes the Makefile. We will be using this to make our process more easier. For windows you can use &lt;code&gt;gmake.exe&lt;/code&gt; utility instead of &lt;code&gt;make&lt;/code&gt;. It comes with Strawberry Perl.&lt;br&gt;
Lets create a Make file in &lt;code&gt;mojo_react_app/Makefile&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="nv"&gt;DOCKER_TAG&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; mojo_react_app:development
&lt;span class="nv"&gt;NO_CACHE&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;PULL&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;BUILD_TYPE&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; development
&lt;span class="nv"&gt;CONTAINER_NAME&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; mojo_react_app
&lt;span class="nv"&gt;HTTPS_OUT_PORT&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; 443
&lt;span class="nv"&gt;HTTPS_IN_PORT&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; 443
&lt;span class="nv"&gt;HTTP_OUT_PORT&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; 80
&lt;span class="nv"&gt;HTTP_IN_PORT&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; 80
&lt;span class="nv"&gt;DOCKER_REPO&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; &amp;lt;docker_repo_url&amp;gt;
&lt;span class="nv"&gt;ADDRESS&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; 0.0.0.0
&lt;span class="nv"&gt;DOCKER_CFG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;path to docker config on machine&amp;gt;

&lt;span class="nl"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# Build the dockerfile&lt;/span&gt;
    docker build &lt;span class="nt"&gt;--pull&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${PULL}&lt;/span&gt; &lt;span class="nt"&gt;--no-cache&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$(NO_CACHE)&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="nv"&gt;$(DOCKER_TAG)&lt;/span&gt; .

&lt;span class="nl"&gt;create&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# Create the container and copy the certificates&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Creating container for &lt;/span&gt;&lt;span class="nv"&gt;${ADDRESS}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
    docker create &lt;span class="nt"&gt;--name&lt;/span&gt; &lt;span class="nv"&gt;${CONTAINER_NAME}&lt;/span&gt;_&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="nv"&gt;${ADDRESS}&lt;/span&gt;:&lt;span class="nv"&gt;$(HTTPS_OUT_PORT)&lt;/span&gt;:&lt;span class="nv"&gt;$(HTTPS_IN_PORT)&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="nv"&gt;${ADDRESS}&lt;/span&gt;:&lt;span class="nv"&gt;$(HTTP_OUT_PORT)&lt;/span&gt;:&lt;span class="nv"&gt;$(HTTP_IN_PORT)&lt;/span&gt; &lt;span class="nt"&gt;--env&lt;/span&gt; &lt;span class="nv"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;${DOCKER_TAG}&lt;/span&gt;
    docker &lt;span class="nb"&gt;cp&lt;/span&gt; &lt;span class="nv"&gt;${DOCKER_CFG}&lt;/span&gt;/mojo_react_app/apache-certificate/apache_certificate_&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;.crt &lt;span class="nv"&gt;${CONTAINER_NAME}&lt;/span&gt;_&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;:/etc/ssl/certs/server.crt
    docker &lt;span class="nb"&gt;cp&lt;/span&gt; &lt;span class="nv"&gt;${DOCKER_CFG}&lt;/span&gt;/mojo_react_app/apache-certificate/apache_certificate_&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;.key &lt;span class="nv"&gt;${CONTAINER_NAME}&lt;/span&gt;_&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;:/etc/ssl/private/server.key

&lt;span class="nl"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# Start a container&lt;/span&gt;
    docker start &lt;span class="nv"&gt;${CONTAINER_NAME}&lt;/span&gt;_&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;

&lt;span class="nl"&gt;run&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# Create and start the container&lt;/span&gt;
    make create &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;ADDRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${ADDRESS}&lt;/span&gt; &lt;span class="nv"&gt;HTTPS_OUT_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${HTTPS_OUT_PORT}&lt;/span&gt; &lt;span class="nv"&gt;HTTPS_IN_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${HTTPS_IN_PORT}&lt;/span&gt; &lt;span class="nv"&gt;BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt; &lt;span class="nv"&gt;DOCKER_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${DOCKER_TAG}&lt;/span&gt;
    make start &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;
    make show

&lt;span class="nl"&gt;stop&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# Stop a running container&lt;/span&gt;
    docker stop &lt;span class="nv"&gt;${CONTAINER_NAME}&lt;/span&gt;_&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nl"&gt;clean_container&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# remove previous container&lt;/span&gt;
    docker &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nv"&gt;${CONTAINER_NAME}&lt;/span&gt;_&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt; 2&amp;gt;/dev/null &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Container for "&lt;/span&gt;&lt;span class="nv"&gt;${CONTAINER_NAME}&lt;/span&gt;&lt;span class="s1"&gt;_&lt;/span&gt;&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;&lt;span class="s1"&gt;" removed.'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Container for "&lt;/span&gt;&lt;span class="nv"&gt;${CONTAINER_NAME}&lt;/span&gt;&lt;span class="s1"&gt;_&lt;/span&gt;&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;&lt;span class="s1"&gt;" already removed or not found.'&lt;/span&gt;

&lt;span class="nl"&gt;clean_image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# remove created image&lt;/span&gt;
    docker rmi &lt;span class="nv"&gt;${DOCKER_TAG}&lt;/span&gt; 2&amp;gt;/dev/null &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Image(s) for "&lt;/span&gt;&lt;span class="nv"&gt;${DOCKER_TAG}&lt;/span&gt;&lt;span class="s1"&gt;" removed.'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Image(s) for "&lt;/span&gt;&lt;span class="nv"&gt;${DOCKER_TAG}&lt;/span&gt;&lt;span class="s1"&gt;" already removed or not found.'&lt;/span&gt;

&lt;span class="nl"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
    make build &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;PULL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${PULL}&lt;/span&gt; &lt;span class="nv"&gt;NO_CACHE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${NO_CACHE}&lt;/span&gt;
    make clean_container
    make create
    make start
    make show

&lt;span class="nl"&gt;stag&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; override &lt;span class="nv"&gt;BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;staging&lt;span class="nf"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; override &lt;span class="nv"&gt;DOCKER_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${CONTAINER_NAME}&lt;/span&gt;:&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;&lt;span class="nf"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# This will return only the IP address associated with the domain name ans assign it to ADDRESS&lt;/span&gt;
    &lt;span class="nf"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; override &lt;span class="nv"&gt;ADDRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;shell&lt;/span&gt; dig +short &amp;lt;your staging URL e.g. mojo-react-app-staging.com&amp;gt;&lt;span class="nf"&gt;))&lt;/span&gt;

    &lt;span class="err"&gt;make&lt;/span&gt; &lt;span class="err"&gt;build&lt;/span&gt; &lt;span class="err"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;PULL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true &lt;/span&gt;&lt;span class="nv"&gt;NO_CACHE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true &lt;/span&gt;&lt;span class="nv"&gt;DOCKER_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${DOCKER_TAG}&lt;/span&gt;
    &lt;span class="err"&gt;make&lt;/span&gt; &lt;span class="err"&gt;clean_container&lt;/span&gt; &lt;span class="err"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;
    &lt;span class="err"&gt;make&lt;/span&gt; &lt;span class="err"&gt;create&lt;/span&gt; &lt;span class="err"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;ADDRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${ADDRESS}&lt;/span&gt; &lt;span class="nv"&gt;BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt; &lt;span class="nv"&gt;DOCKER_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${DOCKER_TAG}&lt;/span&gt;
    &lt;span class="err"&gt;make&lt;/span&gt; &lt;span class="err"&gt;start&lt;/span&gt; &lt;span class="err"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;
    &lt;span class="err"&gt;make&lt;/span&gt; &lt;span class="err"&gt;show&lt;/span&gt;

&lt;span class="nl"&gt;prod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; override &lt;span class="nv"&gt;BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production&lt;span class="nf"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; override DOCKER_TAG &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;${CONTAINER_NAME}&lt;/span&gt;:&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;&lt;span class="nf"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# This will return only the IP address associated with the domain name ans assign it to ADDRESS&lt;/span&gt;
    &lt;span class="nf"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; override &lt;span class="nv"&gt;ADDRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;shell&lt;/span&gt; dig +short &amp;lt;your production URL e.g. mojo-react-app.com&lt;span class="nf"&gt;))&lt;/span&gt;

    &lt;span class="err"&gt;make&lt;/span&gt; &lt;span class="err"&gt;build&lt;/span&gt; &lt;span class="err"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;PULL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true &lt;/span&gt;&lt;span class="nv"&gt;NO_CACHE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true &lt;/span&gt;&lt;span class="nv"&gt;DOCKER_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${DOCKER_TAG}&lt;/span&gt;
    &lt;span class="err"&gt;make&lt;/span&gt; &lt;span class="err"&gt;clean_container&lt;/span&gt; &lt;span class="err"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;
    &lt;span class="err"&gt;make&lt;/span&gt; &lt;span class="err"&gt;create&lt;/span&gt; &lt;span class="err"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;ADDRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${ADDRESS}&lt;/span&gt; &lt;span class="nv"&gt;BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt; &lt;span class="nv"&gt;DOCKER_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${DOCKER_TAG}&lt;/span&gt;
    &lt;span class="err"&gt;make&lt;/span&gt; &lt;span class="err"&gt;start&lt;/span&gt; &lt;span class="err"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;
    &lt;span class="err"&gt;make&lt;/span&gt; &lt;span class="err"&gt;show&lt;/span&gt;

&lt;span class="nl"&gt;show&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# show running containers&lt;/span&gt;
    docker ps | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nv"&gt;${CONTAINER_NAME}&lt;/span&gt;

&lt;span class="nl"&gt;rebuild&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# rebuilt the dockerfile&lt;/span&gt;
    make clean_container &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt;
    make build &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;PULL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true &lt;/span&gt;&lt;span class="nv"&gt;NO_CACHE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true &lt;/span&gt;&lt;span class="nv"&gt;DOCKER_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${DOCKER_TAG}&lt;/span&gt;

&lt;span class="nl"&gt;up&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# Run container on port&lt;/span&gt;
    make build &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;PULL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true &lt;/span&gt;&lt;span class="nv"&gt;NO_CACHE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true &lt;/span&gt;&lt;span class="nv"&gt;DOCKER_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${DOCKER_TAG}&lt;/span&gt;
    make run &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;HTTPS_OUT_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${HTTPS_OUT_PORT}&lt;/span&gt; &lt;span class="nv"&gt;HTTPS_IN_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${HTTPS_IN_PORT}&lt;/span&gt; &lt;span class="nv"&gt;BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt; &lt;span class="nv"&gt;DOCKER_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${DOCKER_TAG}&lt;/span&gt;

&lt;span class="nl"&gt;login&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# run as a service and attach to it&lt;/span&gt;
    docker &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nv"&gt;${CONTAINER_NAME}&lt;/span&gt;_&lt;span class="nv"&gt;${BUILD_TYPE}&lt;/span&gt; bash

&lt;span class="nl"&gt;release&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    make build &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;PULL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true &lt;/span&gt;&lt;span class="nv"&gt;NO_CACHE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true &lt;/span&gt;&lt;span class="nv"&gt;DOCKER_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${DOCKER_TAG}&lt;/span&gt;
    make push &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;${VERSION}&lt;/span&gt;

&lt;span class="nl"&gt;push&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    docker push &lt;span class="nv"&gt;$(DOCKER_REPO)&lt;/span&gt;/&lt;span class="nv"&gt;$(CONTAINER_NAME)&lt;/span&gt;:&lt;span class="nv"&gt;$(VERSION)&lt;/span&gt;

&lt;span class="nl"&gt;pull&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    docker pull &lt;span class="nv"&gt;$(DOCKER_REPO)&lt;/span&gt;/&lt;span class="nv"&gt;$(CONTAINER_NAME)&lt;/span&gt;:&lt;span class="nv"&gt;$(VERSION)&lt;/span&gt;

&lt;span class="c"&gt;# Docker tagging
&lt;/span&gt;&lt;span class="nl"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;## Generate container tags for the `{version&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'create tag &lt;/span&gt;&lt;span class="nv"&gt;$(VERSION)&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
    docker tag &lt;span class="nv"&gt;$(DOCKER_TAG)&lt;/span&gt; &lt;span class="nv"&gt;$(DOCKER_REPO)&lt;/span&gt;/&lt;span class="nv"&gt;$(CONTAINER_NAME)&lt;/span&gt;:&lt;span class="nv"&gt;$(VERSION)&lt;/span&gt;

&lt;span class="nl"&gt;help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Usage: make [TARGET] [EXTRA_ARGUMENTS]'&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Targets:'&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'  build      build docker --image--'&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'  rebuild    rebuild docker --image--'&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'  dev        run docker --container-- in development mode =&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;$(DOCKER_TAG)&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'  stag       run docker --container-- in staging mode'&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'  prod       run docker --container-- in production mode'&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'  login      run as service and login --container--'&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'  clean_image        remove docker --image-- '&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Extra arguments:'&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'CONTAINER_NAME=:     make clean_container -e CONTAINER_NAME=my_app (no need to provide this param, it will be set by default)'&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'BUILD_TYPE=:     make clean_container -e CONTAINER_NAME=my_app BUILD_TYPE=staging (whether the build type is '&lt;/span&gt;development&lt;span class="s1"&gt;', '&lt;/span&gt;staging&lt;span class="s1"&gt;' or '&lt;/span&gt;production&lt;span class="s1"&gt;')'&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'DOCKER_TAG=:     make build -e DOCKER_TAG=my_app:staging'&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'HTTPS_OUT_PORT=:     make create -e HTTPS_IN_PORT=8080 (port from which the request will come- outside world)'&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'HTTPS_IN_PORT=:      make create -e HTTPS_IN_PORT=443 (port to which the request will be forwarded)'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know its overwhelming. Lets go through each one of them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initial 12 lines are the default parameters. In case you will not provide any parameter it will take those arguments. By default everything is in &lt;code&gt;development&lt;/code&gt; mode. You will have to overwrite it for different modes.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DOCKER_TAG     =&amp;gt;  Name of your app with the env name (e.g. mojo_react_app:development)
NO_CACHE       =&amp;gt;  Whether to start the build from scratch (true|false). Default - false
PULL           =&amp;gt;  Whether to pull a newer version of the image (true|false). Default - false
BUILD_TYPE     =&amp;gt;  Build environment (development|staging|production). Default - development
CONTAINER_NAME =&amp;gt;  Name of the container (e.g. mojo_react_app)
HTTPS_OUT_PORT =&amp;gt;  HTTPS host port visible to outside world while publishing the container(443)
HTTPS_IN_PORT  =&amp;gt;  HTTPS container port on which traffic will be coming inside the container(443)
HTTP_OUT_PORT  =&amp;gt;  HTTP host port visible to outside world while publishing the container(80)
HTTP_IN_PORT   =&amp;gt;  HTTP container port on which traffic will be coming inside the container(80)
DOCKER_REPO    =&amp;gt;  URL of the docker repo where you want to push or pull image.
ADDRESS        =&amp;gt;  IP address of the container from where the outside word can access it. Default - 0.0.0.0
DOCKER_CFG     =?  Path to docker config files on host machine. This will contain the apache certificate and will be private to you.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;build&lt;/code&gt; will build your dockerfile&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;create&lt;/code&gt; will create the container and copy the apache certificates&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;start&lt;/code&gt; will start the container&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;run&lt;/code&gt; will create and start the container. It will internally call the &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;stop&lt;/code&gt; will stop the running container.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;clean_container&lt;/code&gt; will remove/delete the remove previous container if exist.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;clean_image&lt;/code&gt; will remove/delete created image if exist.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;show&lt;/code&gt; will show the info about running container.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rebuild&lt;/code&gt; will rebuilt the dockerfile. It will just call &lt;code&gt;clean_container&lt;/code&gt; and &lt;code&gt;build&lt;/code&gt; the image again.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;up&lt;/code&gt; will run the container on given port. It will always pull  the new image.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;login&lt;/code&gt; will login to the container. Using this you can see the  traffic logs and what is going on inside the container.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;release&lt;/code&gt; &lt;code&gt;push&lt;/code&gt; &lt;code&gt;pull&lt;/code&gt; &lt;code&gt;tag&lt;/code&gt; - These commands you will be using when you want to create tag and push it to docker repo url(somewhere where you can access it and you don't have to create the image again). This is handful in Jenkins deployments, otherwise in normal dev work its not that important and will not be used much.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;help&lt;/code&gt; will give you the info about different param and what they do.&lt;/li&gt;
&lt;li&gt;Now 3 important commands which we will be using more often is -
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    make dev
    make stag
    make prod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#make-dev"&gt;
  &lt;/a&gt;
  make dev
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;dev&lt;/code&gt; is written in such a way that you don't have to worry about your container name and param. Just update the default value with your project specific value one time and your dev environment will be ready in no time.&lt;br&gt;
It will build the container, create it and run it with single command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;make dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run this command.&lt;br&gt;
Here are the screenshot at different point of time for this command. For the first time this command will take few minutes but subsequent run will be completed within few seconds.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pEf7xN68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rai-gaurav/mojo_react_app/main/with_jsx/server/output_screenshot/make_dev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pEf7xN68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rai-gaurav/mojo_react_app/main/with_jsx/server/output_screenshot/make_dev.png" alt="make_dev"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---PwTLAcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rai-gaurav/mojo_react_app/main/with_jsx/server/output_screenshot/Mojo_installation.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---PwTLAcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rai-gaurav/mojo_react_app/main/with_jsx/server/output_screenshot/Mojo_installation.png" alt="mojo_installation"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Y3rwP-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rai-gaurav/mojo_react_app/main/with_jsx/server/output_screenshot/container_up.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Y3rwP-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rai-gaurav/mojo_react_app/main/with_jsx/server/output_screenshot/container_up.png" alt="container_up"&gt;&lt;/a&gt;&lt;br&gt;
I have highlighted different section for better understanding.&lt;br&gt;
You can access your app on &lt;a href="https://localhost/"&gt;https://localhost/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fuBsDcBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rai-gaurav/mojo_react_app/main/with_jsx/server/output_screenshot/HomePage.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fuBsDcBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rai-gaurav/mojo_react_app/main/with_jsx/server/output_screenshot/HomePage.png" alt="HomePage"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#make-stag"&gt;
  &lt;/a&gt;
  make stag
&lt;/h1&gt;

&lt;p&gt;This command you will be running when you want to deploy your application in staging environment.&lt;br&gt;
If you look closely we are overriding the default config for staging in initial few lines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;    &lt;span class="err"&gt;$(eval&lt;/span&gt; &lt;span class="err"&gt;override&lt;/span&gt; &lt;span class="nv"&gt;BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;staging&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nl"&gt;$(eval override DOCKER_TAG=${CONTAINER_NAME}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;${BUILD_TYPE})&lt;/span&gt;
    &lt;span class="c"&gt;# This will return only the IP address associated with the domain name ans assign it to ADDRESS&lt;/span&gt;
    &lt;span class="nf"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; override &lt;span class="nv"&gt;ADDRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;shell&lt;/span&gt; dig +short &amp;lt;your staging URL e.g. mojo-react-app-staging.com&amp;gt;&lt;span class="nf"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The 4th lines is where you have to make your changes as per your requirement. We are overriding the default value of address(0.0.0.0) with your domain name of staging environment. We are using the &lt;code&gt;dig&lt;/code&gt; utility to generate the IP address from that domain name and assigning it to ADDRESS.&lt;br&gt;
Just run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;make stag
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you can access your staging environment.&lt;br&gt;
E.g. &lt;br&gt;
      &lt;a href="https://mojo-react-app-staging.com/"&gt;https://mojo-react-app-staging.com/&lt;/a&gt; &lt;br&gt;
&lt;strong&gt;or&lt;/strong&gt;&lt;br&gt;
      &lt;a href="https://staging-ip-add/"&gt;https://staging-ip-add/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#make-prod"&gt;
  &lt;/a&gt;
  make prod
&lt;/h1&gt;

&lt;p&gt;This command you will be running when you want to deploy your application in production environment.&lt;br&gt;
Again, you can see we are overriding the default config for production in initial few lines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;    &lt;span class="err"&gt;$(eval&lt;/span&gt; &lt;span class="err"&gt;override&lt;/span&gt; &lt;span class="nv"&gt;BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nl"&gt;$(eval override DOCKER_TAG = ${CONTAINER_NAME}&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;${BUILD_TYPE})&lt;/span&gt;
    &lt;span class="c"&gt;# This will return only the IP address associated with the domain name ans assign it to ADDRESS&lt;/span&gt;
    &lt;span class="nf"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; override &lt;span class="nv"&gt;ADDRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;shell&lt;/span&gt; dig +short &amp;lt;your production URL e.g. mojo-react-app.com&lt;span class="nf"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here again in 4th lines is where you have to make your changes as per your requirement. Update it to your prod environment hostname. We are using the &lt;code&gt;dig&lt;/code&gt; utility to generate the IP address from that domain name and assigning it to ADDRESS.&lt;br&gt;
Just run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;make prod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you can access your staging environment.&lt;br&gt;
E.g. &lt;br&gt;
      &lt;a href="https://mojo-react-app.com/"&gt;https://mojo-react-app.com/&lt;/a&gt; &lt;br&gt;
&lt;strong&gt;or&lt;/strong&gt;&lt;br&gt;
      &lt;a href="https://production-ip-add/"&gt;https://production-ip-add/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#stop-the-container"&gt;
  &lt;/a&gt;
  Stop the container
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;make stop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default it will stop the dev container. Pass different param for stag or prod env.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#login-to-container"&gt;
  &lt;/a&gt;
  Login to container
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;make login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again it will login to dev one by default. You can pass param to override that behavior.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7di2ioyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rai-gaurav/mojo_react_app/main/with_jsx/server/output_screenshot/make_login.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7di2ioyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rai-gaurav/mojo_react_app/main/with_jsx/server/output_screenshot/make_login.png" alt="LoginContainer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This Makefile is just a wrapper around different docker commands.&lt;br&gt;
Especially during development you can enable live reload and your changes in host will be available in docker container also . More info &lt;a href="https://www.freecodecamp.org/news/how-to-enable-live-reload-on-docker-based-applications/"&gt;here&lt;/a&gt;.&lt;br&gt;
You can use it for any Dockerfile. Here I am using a Mojolicious application. But the same Makefile can be used for a Django application or any other.&lt;/p&gt;

&lt;p&gt;I hope this is useful for you and make your life more smoother.&lt;br&gt;
The Makefile is also available on &lt;a href="https://github.com/rai-gaurav/mojo_react_app/tree/main/with_jsx/server/mojo_react_app"&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perl onion logo taken from &lt;a href="https://github.com/dnmfarrell/Perl-Icons/blob/master/Icons/Perl_Onion_Color.svg"&gt;here&lt;/a&gt;&lt;br&gt;
Mojolicious logo taken from &lt;a href="https://github.com/mojolicious/mojo/blob/master/lib/Mojolicious/resources/public/mojo/logo.png"&gt;here&lt;/a&gt;&lt;br&gt;
Docker logo taken from &lt;a href="https://www.docker.com/company/newsroom/media-resources"&gt;here&lt;/a&gt;&lt;br&gt;
GNU logo taken from &lt;a href="https://www.gnu.org/software/make/"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>perl</category>
      <category>docker</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Comprehensive Guide for not so Regular Expressions</title>
      <author>Lakshya Singh</author>
      <pubDate>Sun, 16 May 2021 17:47:21 +0000</pubDate>
      <link>https://dev.to/king11/comprehensive-guide-for-not-so-regular-expressions-56f7</link>
      <guid>https://dev.to/king11/comprehensive-guide-for-not-so-regular-expressions-56f7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-regex"&gt;
  &lt;/a&gt;
  What is Regex?
&lt;/h2&gt;

&lt;p&gt;Regular expressions ( or regexes, or regex patterns) are essentially a kind of formal grammar/syntax used to find the set of possible strings that you want to match.&lt;/p&gt;

&lt;p&gt;At first, REs can look pretty scary and daunting, but we can write highly efficient matching patterns in terms of length and speed after understanding even a few special characters.&lt;/p&gt;

&lt;p&gt;We can use REs to save the day in a variety of use cases :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checking a pattern in string&lt;/li&gt;
&lt;li&gt;Splitting into strings&lt;/li&gt;
&lt;li&gt;Replacing part of strings&lt;/li&gt;
&lt;li&gt;Matching a complete string&lt;/li&gt;
&lt;li&gt;Cleaning raw data in Natural Language Processing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7N7OVZdp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3l5jeoltinem0bc74g8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7N7OVZdp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3l5jeoltinem0bc74g8.png" alt="Hardcoding string expressions not the right way"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All major programming languages and even IDEs have their own standard module for regex where the syntax might change, but the underlying concept remains the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# python3
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"doge&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;shen+lo+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Doge hennnloo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Henlo Doge"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// javascript&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/doge&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;hen+lo+/i&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doge hennnloo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Henlo Doge&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started üöÄ
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#normal-characters-%F0%9F%87%A6"&gt;
  &lt;/a&gt;
  Normal Characters üá¶
&lt;/h3&gt;

&lt;p&gt;You can use regex as you use normal strings/characters for matching too :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/king-11/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;king-11&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// returns true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But certain special characters have to be escaped because they carry special meaning in regex.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;\ / [ ] { } . ? + * ^ $ | ( )&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// we have to escape back slash in string to be tested as well&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\\\/\[\]\{\}\.\?\+\*\^\$\|\(\)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;/[]{}.?+*^$|()&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// returns true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#character-class-and-regex-characters"&gt;
  &lt;/a&gt;
  Character Class and Regex Characters üßëüèº‚Äçü§ù‚Äçüßëüèº
&lt;/h3&gt;

&lt;p&gt;A character class allows you to define a set of characters from which a match is considered if any of the characters match.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;aeiou&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns true&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;aeiou&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also provide range values to regex for defining character classes using &lt;code&gt;-&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;l&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns true matches all lowercase alphabets&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;L&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns true matches all uppercase alphabets&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns true matches all digits from 0 to 9&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns false matches all digits from 0 to 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But if you want to match &lt;code&gt;-&lt;/code&gt;, you have to escape it or keep it at the start or end of character class, i.e. &lt;code&gt;[]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// returns true matches 0, 5, -&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// returns true matches digits from 0 to 5 and -&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can define complement character class, i.e. characters we don't want to match, by adding &lt;code&gt;^&lt;/code&gt; at the start of our class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// returns true doesn't match any lowercase alphabet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside a character class, only two characters carry special meaning &lt;code&gt;-&lt;/code&gt; in-between characters and &lt;code&gt;^&lt;/code&gt; at the start of the class rest all other characters don't carry their special meaning; hence we don't need to escape them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns true matches $ and +&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can define character classes for things like alphabets and digits but regex makes it easier for you by defining several special regex characters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;\w&lt;/code&gt; [a-zA-Z0-9_] Alphabets and Digits Class&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\W&lt;/code&gt; [^a-zA-Z0-9_] Negated Class of &lt;code&gt;\w&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\d&lt;/code&gt; [0-9] Digits Class&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\D&lt;/code&gt; [^0-9] Negated Class of &lt;code&gt;\d&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\t&lt;/code&gt; Tab Character&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\n&lt;/code&gt; Newline Character&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\s&lt;/code&gt; [ \t\r\f\v\n] Matches all white space characters like space, tab, newline, carriage return, vertical tab, form feed, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\S&lt;/code&gt; [^\s]&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\b&lt;/code&gt; Matches Word Boundary where there is a &lt;code&gt;\w&lt;/code&gt; on one side and &lt;code&gt;\W&lt;/code&gt; on other side of position
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRK2fBAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abosozkbi92rlk2e52ac.jpeg" alt="boundary.jpg"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\B&lt;/code&gt; [^\b] Matches all non Word Boundaries&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#wild-cards"&gt;
  &lt;/a&gt;
  Wild üêØ Cards
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;^&lt;/code&gt; symbol allows us to match the starting of the string &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$&lt;/code&gt; allows you to match the end of the string&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.&lt;/code&gt; allows us to match any character
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tall&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/l$/ig&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'l' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^t/ig&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'T' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_UD_HZDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ye93ro9n5u3d9dkqjb1.png" alt="example regex for end of line"&gt;&lt;/th&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2YJyMRCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yfnw5wgzybr25f7xrs6.png" alt="example regex for start of line"&gt;&lt;/th&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K03G15ZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kz5s0bc1tubqhkk2km4g.png" alt="example regex comparison"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In the above example, while &lt;code&gt;l&lt;/code&gt; was matched only with the last one, whereas &lt;code&gt;T&lt;/code&gt; was matched with the first one due to &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;^&lt;/code&gt;, respectively. Without &lt;code&gt;$&lt;/code&gt; as you can see, all the &lt;code&gt;l&lt;/code&gt;s were matched.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ho.dog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hotdog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hoddog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;.&lt;/code&gt; allowed us to match both &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; in the above example. All the three wildcards are special characters to match them specifically, i.e. &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; you have to escape them using &lt;code&gt;\&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flags"&gt;
  &lt;/a&gt;
  Flags üéå
&lt;/h3&gt;

&lt;p&gt;You might have observed usage of &lt;code&gt;g&lt;/code&gt; or &lt;code&gt;i&lt;/code&gt; after the regex expression so what are these things?&lt;br&gt;
These are regex flags that affect the number and type of match we want to make :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;i&lt;/strong&gt; -  Case insensitive match which doesn't differentiate &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;g&lt;/strong&gt; - Global Flag allows us to match more than one instance of our expression and not just the first instance&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;m&lt;/strong&gt; - Multiline Flag affects the behaviour of &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; where a &lt;code&gt;\n&lt;/code&gt; newline character would mean the start of a new string
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"^football"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"rugby&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;football"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="c1"&gt;# &amp;lt;re.Match object; span=(6, 14), match='football'&amp;gt;
&lt;/span&gt;  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"^football"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"rugby&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;football"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="c1"&gt;# None
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;s&lt;/strong&gt; - DotAll Mode, allows wildcard &lt;code&gt;.&lt;/code&gt; to match newline character as well.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;u&lt;/strong&gt; - Unicode support enabled&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Half Way through, but I believe the next half will be easier&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/y2i2oqWgzh5ioRp4Qa/giphy-downsized.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/y2i2oqWgzh5ioRp4Qa/giphy-downsized.gif" alt="Half Way Checkpoint"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#quantifiers"&gt;
  &lt;/a&gt;
  Quantifiers 3Ô∏è‚É£
&lt;/h3&gt;

&lt;p&gt;Sometimes we require to match a character class, character, group ( coming up ) zero, one, more than one or even, let's say &lt;code&gt;11-22&lt;/code&gt; times ( random numbers ); in such cases, quantifiers come to the rescue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;?&lt;/code&gt; Matches its preceding character, class or group zero or one time.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hot?dog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hotdog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# True
&lt;/span&gt;  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hodog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;*&lt;/code&gt; Matches its preceding character, class or group zero or more times ( ‚àû ).
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hot*dog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hotttttdog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# True
&lt;/span&gt;  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hodog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# True
&lt;/span&gt;  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hotog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;+&lt;/code&gt; Matches its preceding character, class or group one or more times ( ‚àû ).
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hot+dog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hotttttdog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# True
&lt;/span&gt;  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hodog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# False
&lt;/span&gt;  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hotog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;{n,m}&lt;/code&gt; Matches its preceding character at least &lt;code&gt;n&lt;/code&gt; times and at most &lt;code&gt;m&lt;/code&gt; times. The default value for &lt;code&gt;n&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; and the default for &lt;code&gt;m&lt;/code&gt; is &lt;code&gt;&amp;amp;#8734;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hot{1,3}dog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hotdog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# True
&lt;/span&gt;  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hottttdog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# False
&lt;/span&gt;  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hotttog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#groups"&gt;
  &lt;/a&gt;
  Groups ‚ú®
&lt;/h3&gt;

&lt;p&gt;Groups allow us to create grouped expressions that can help us in substitution, referencing them in later parts of a regular expression.&lt;/p&gt;

&lt;p&gt;Let's say we want to replace all the &lt;code&gt;function&lt;/code&gt; with &lt;code&gt;arrow functions&lt;/code&gt;. Obviously, we would like to retain the name of the function and its arguments, but we need to reference them in replacement. With VSCode, our favourite editor and regex, we can do something like :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NotAnArrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I do something&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--91ZBILyY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpnt0w61jt1vxa5xchyn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--91ZBILyY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpnt0w61jt1vxa5xchyn.png" alt="Vscode regular expression"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NotAnArrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I do something&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we used were &lt;code&gt;capturing groups&lt;/code&gt;, which we created using &lt;code&gt;(.+)&lt;/code&gt; and &lt;code&gt;(.*)&lt;/code&gt; ( &lt;code&gt;arguments&lt;/code&gt; might not be there ). Anything inside those brackets forms our group, and the expression inside them is the one that will be matched.&lt;/p&gt;

&lt;p&gt;There are other types of groups as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Named Groups &lt;code&gt;(?&amp;lt;Name&amp;gt;...)&lt;/code&gt; is a group that provides us reference to that group using its name instead of numbers&lt;/li&gt;
&lt;li&gt;Non Capturing Groups &lt;code&gt;(?:...)&lt;/code&gt; is a group that will match, but we can't reference them in the result of the regex expression.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#alternation-raw-endraw-"&gt;
  &lt;/a&gt;
  Alternation &lt;code&gt;|&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Alternation is a simple &lt;code&gt;OR&lt;/code&gt; that we can use between different parts of our regex pattern to match this or that or even that by providing different options, just like radio buttons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;java|type&lt;/span&gt;&lt;span class="se"&gt;)(?:&lt;/span&gt;&lt;span class="sr"&gt;script&lt;/span&gt;&lt;span class="se"&gt;)?&lt;/span&gt;&lt;span class="sr"&gt;|html5&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;|css3&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;|php|c&lt;/span&gt;&lt;span class="se"&gt;(\+\+)?\s&lt;/span&gt;&lt;span class="sr"&gt;/gi&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="s2"&gt;`JavaScript is here but PhP came
before them and now its TypeScript`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'TypeScript', 'Type', index: 56, input: 'JavaScript is ..... ]&lt;/span&gt;
&lt;span class="c1"&gt;// .&lt;/span&gt;
&lt;span class="c1"&gt;// .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here is what we did with that complex-looking but now easy for you to understand Regular Expression.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Created Group to match both &lt;code&gt;Java&lt;/code&gt;, &lt;code&gt;Javascript&lt;/code&gt; and &lt;code&gt;Typescript&lt;/code&gt; using &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Used &lt;code&gt;|&lt;/code&gt; to match other languages as well&lt;/li&gt;
&lt;li&gt;Escaped &lt;code&gt;+&lt;/code&gt; to match for &lt;code&gt;C++&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; as well using &lt;code&gt;?&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Finally, a character class &lt;code&gt;\s&lt;/code&gt; to signify the end of the language name&lt;/li&gt;
&lt;li&gt;Flags like &lt;code&gt;gi&lt;/code&gt; to match all languages and irrespective of case&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Usually, you will find yourself using &lt;code&gt;|&lt;/code&gt; inside of groups as you wouldn't want to pollute your global regex just like you always use virtual environment. Make sure to make them &lt;code&gt;non capturing&lt;/code&gt; if you don't want to reference or find them in your results.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#trick-treat"&gt;
  &lt;/a&gt;
  Trick üéÉ Treat
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; are of nature greedy. They will keep adding characters to the match until they find the last instance of any succeeding expression or the sentence ends.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"(a|m).+e"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"apple maple"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# expected ['apple','maple'] found 'apple maple'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;.+&lt;/code&gt; ignored the &lt;code&gt;e&lt;/code&gt; of &lt;code&gt;apple&lt;/code&gt; and went all the way to finish at &lt;code&gt;e&lt;/code&gt; of &lt;code&gt;maple&lt;/code&gt; as it was the last instance of &lt;code&gt;e&lt;/code&gt; that it was able to find.&lt;/p&gt;

&lt;p&gt;Lazy Mode for &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; can be activated by appending &lt;code&gt;?&lt;/code&gt; after the quantifier matches only the minimum required characters for the regex expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(?:&lt;/span&gt;&lt;span class="sr"&gt;a|m&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;.+&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;e/gi&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple mapple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// expected ['apple','maple'] found ['apple' 'maple']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I highly recommend you to check language-specific docs for syntax and available features. One of the best docs for regex is for &lt;a href="https://docs.python.org/3/howto/regex.html"&gt;python&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I didn't cover one feature that I might make a new article on it is &lt;a href="https://javascript.info/regexp-lookahead-lookbehind"&gt;Lookahead and Lookbehind&lt;/a&gt;. You can wait :) or check out the link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/MCZ39lz83o5lC/giphy-downsized.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/MCZ39lz83o5lC/giphy-downsized.gif" alt="Use regex carefully due to backtracking and recursive nature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why did I say that? Because sometimes regex can take exponential time to search a be really &lt;a href="https://javascript.info/regexp-catastrophic-backtracking"&gt;catastrophic&lt;/a&gt;. So .....&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;May the code be with you üññ&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>machinelearning</category>
      <category>regex</category>
    </item>
    <item>
      <title>Improve your Code Quality with SonarLint and SonarQube</title>
      <author>Dennis Whalen</author>
      <pubDate>Sun, 16 May 2021 17:21:18 +0000</pubDate>
      <link>https://dev.to/leading-edje/improve-your-code-quality-with-sonarqube-3kk6</link>
      <guid>https://dev.to/leading-edje/improve-your-code-quality-with-sonarqube-3kk6</guid>
      <description>&lt;p&gt;As a Quality Engineer, I am typically involved in building automated tests.  These tests are used to ensure that future code changes don't break existing functionality, and can include integration, API, and end-to-end testing.  All of these tests are run after code has been written and will execute the code to verify it conforms to the functional requirements being validated.&lt;/p&gt;

&lt;p&gt;These tests are all considered "dynamic tests", as they are executed against the running application.  &lt;/p&gt;

&lt;p&gt;Static code analysis is another tool you can use to ensure the quality of your code.  It's different from dynamic testing, in that in that the analysis is done against your source code, without the application executing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-can-static-code-analysis-do"&gt;
  &lt;/a&gt;
  What can static code analysis do?
&lt;/h1&gt;

&lt;p&gt;Static code analysis evaluates your source code statically, without running it.  Some areas it can address include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;identifying overly complicated code&lt;/li&gt;
&lt;li&gt;finding security issues&lt;/li&gt;
&lt;li&gt;enforcing best practices&lt;/li&gt;
&lt;li&gt;identifying maintainability issues&lt;/li&gt;
&lt;li&gt;providing test coverage metrics&lt;/li&gt;
&lt;li&gt;enforcing common team-based language ruleset&lt;/li&gt;
&lt;li&gt;integrating into your build pipeline&lt;/li&gt;
&lt;li&gt;and more!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#static-code-analysis-courtesy-of-your-ide"&gt;
  &lt;/a&gt;
  Static code analysis, courtesy of your IDE
&lt;/h1&gt;

&lt;p&gt;Most modern IDEs have a mechanism to allow for static code analysis.  If you don't use it now, take some time to find out how your IDE supports static analysis.  If you haven't run it in the past, you are very likely to find some interesting results.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sonarlint"&gt;
  &lt;/a&gt;
  SonarLint
&lt;/h3&gt;

&lt;p&gt;In addition to static code analysis that may be baked into your IDE, there are 3rd partying linting plugins such as &lt;a href="https://www.sonarlint.org/"&gt;SonarLint&lt;/a&gt; that allow you to analyze your code right in the IDE.&lt;/p&gt;

&lt;p&gt;Let's take a look at a quick example.  For my environment I am using IntelliJ IDEA, and I have the SonarLint plugin installed.&lt;/p&gt;

&lt;p&gt;I have the following Java method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;my_FIRST_var&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;my_SECOND_var&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"adding"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;my_FIRST_var&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;my_SECOND_var&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if I look at this method in my IDE, I see some things highlighted:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NDI51-mL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7awmg12tighoyh4addt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NDI51-mL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7awmg12tighoyh4addt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing I see highlighted is the variable &lt;code&gt;my_FIRST_var&lt;/code&gt;.  If I hover &lt;code&gt;my_FIRST_var&lt;/code&gt; I get a SonarLint popup that shows me the issue.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S1pNCr4t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4exd9prnh6hvw4iswnc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S1pNCr4t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4exd9prnh6hvw4iswnc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I can click the link for more detail and get a full explanation for this issue:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0C2vs6tp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bze3hrm5mc2x6bqkqflq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0C2vs6tp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bze3hrm5mc2x6bqkqflq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, this is a contrived example, but I hope you get a taste of the advantages of using SonarLint within your IDE.  Issues are going to be visible immediately, which is the best time to fix them. You can save your reviewers valuable time by finding and fixing issues immediately.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#static-code-analysis-with-sonarqube"&gt;
  &lt;/a&gt;
  Static code analysis with SonarQube
&lt;/h1&gt;

&lt;p&gt;In addition to IDE-based SonarLint, &lt;a href="https://www.sonarqube.org/"&gt;SonarQube&lt;/a&gt; allows you to perform robust static analysis and gating as part of the CI/CD pipeline.  &lt;/p&gt;

&lt;p&gt;SonarQube has 4 basic architectural components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the web server which serves the user interface&lt;/li&gt;
&lt;li&gt;the database, used to store historical metrics for all code scans&lt;/li&gt;
&lt;li&gt;the compute engine that performs code scans and saves metrics to the database&lt;/li&gt;
&lt;li&gt;a search engine based on ElasticSearch to support user searches&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SonarQube will typically be installed in a central environment, but you can also run it right on your machine. To get started you need an instance of SonarQube running on your machine.  The quickest way to make that happen is through the magic of Docker:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p 9000:9000 sonarqube:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then browse to &lt;a href="https://dev.tolocalhost:9000"&gt;localhost:9000&lt;/a&gt; and you should see something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---u0Rwbos--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jl8n76wt7alftk9ca40j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---u0Rwbos--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jl8n76wt7alftk9ca40j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We haven't run a scan yet, so we don't see any useful data.  I can build, test, and lint my solution from the command line with a simple command such as &lt;code&gt;mvn sonar:sonar -Dsonar.login=myAuthenticationToken&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once that process completes I can see the results in SonarQube:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--izdoJkvF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojgmgl8lvo1hiw35of60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--izdoJkvF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojgmgl8lvo1hiw35of60.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well I see some green, but also see some red.  It appears the code did not pass the quality gate. The UI will provide plenty of additional detail for troubleshooting, but our main issue is clear right on the Overview page; the test coverage is only 75%, and it needs to be 80% to pass the gate validation.&lt;/p&gt;

&lt;p&gt;Once we get this analysis setup in our build pipeline, problems like this will need to be addressed before code can get merged and deployed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus-feature"&gt;
  &lt;/a&gt;
  Bonus feature
&lt;/h1&gt;

&lt;p&gt;One feature of SonarQube that I really like it the robust detail that is provided related to recommendations.  Want to find out why it might not be a great idea to directly use standard outputs for logging?  SonarQube will tell you.  You can fix your code and learn something at the same time.  What could be better?  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h1&gt;

&lt;p&gt;So there you go, a little introduction to static code analysis, and some details about getting SonarLint and SonarQube setup on your workstation.  If you're not using static code analysis, go ahead and install the SonarLint plugin and see what you can find.  You'll likely find some issues to fix.  You can also setup SonarQube locally and learn about best practices in a number of areas.&lt;/p&gt;

&lt;p&gt;For my next post I'm going to focus more on SonarQube.  I'll start with some .Net code in need of assistance.  From there we'll look at how to include SonarQube in a CI/CD pipeline, and leverage a cloud-based SonarQube instance to execute our scans and store scan metrics.  &lt;/p&gt;

&lt;p&gt;See you soon! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/leading-edje"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SfUhPiEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5uo60qforg9yqdpgzncq.png" alt="Smart EDJE Image"&gt;&lt;br&gt;
&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>testing</category>
      <category>devops</category>
      <category>sonarqube</category>
    </item>
    <item>
      <title>Weekly Digest 19/2021 - Top of the Week</title>
      <author>Marco Biedermann</author>
      <pubDate>Sun, 16 May 2021 17:17:07 +0000</pubDate>
      <link>https://dev.to/worldindev/weekly-digest-19-2021-1cfh</link>
      <guid>https://dev.to/worldindev/weekly-digest-19-2021-1cfh</guid>
      <description>&lt;p&gt;Welcome to my Weekly Digest #19 of this year.&lt;/p&gt;

&lt;p&gt;This weekly digest contains a lot of interesting and inspiring articles, videos, tweets, podcasts, and designs I consumed during this week.&lt;/p&gt;




&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#giveaway"&gt;
  &lt;/a&gt;
  üéâ Giveaway
&lt;/h2&gt;

&lt;p&gt;We are giving away any course you need on Udemy. Any price any course.&lt;br&gt;
To enter you have to do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;üëç React to this post&lt;/li&gt;
&lt;li&gt;‚úâÔ∏è Subscribe to our &lt;a href="https://worldindev.ck.page"&gt;newsletter&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You will receive &lt;a href="https://dev.to/worldindev"&gt;our articles&lt;/a&gt; directly to your &lt;a href="https://worldindev.ck.page"&gt;inbox&lt;/a&gt; üì¨.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#interesting-articles-to-read"&gt;
  &lt;/a&gt;
  Interesting articles to read
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#frustrating-design-patterns-that-need-fixing-birthday-picker"&gt;
  &lt;/a&gt;
  Frustrating Design Patterns That Need Fixing: Birthday Picker
&lt;/h3&gt;

&lt;p&gt;In this new series of articles on UX, we take a closer look at some frustrating design patterns and explore better alternatives, along with plenty of examples to keep in mind when building or designing one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-birthday-picker/"&gt;Frustrating Design Patterns That Need Fixing: Birthday Picker - Smashing Magazine&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript-testing-9-best-practices-to-learn"&gt;
  &lt;/a&gt;
  JavaScript testing: 9 best practices to learn
&lt;/h3&gt;

&lt;p&gt;We zoom in on nine best practices for JavaScript testing that can help you write better tests and help your team to better understand them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.logrocket.com/javascript-testing-best-practices/"&gt;JavaScript testing: 9 best practices to learn - LogRocket Blog&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-forms-in-react"&gt;
  &lt;/a&gt;
  Using Forms in React
&lt;/h3&gt;

&lt;p&gt;Learn how to build forms with React, the difference between controlled and uncontrolled inputs, and which to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://daveceddia.com/react-forms/"&gt;Using Forms in React&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-we-use-web-components-at-github"&gt;
  &lt;/a&gt;
  How we use Web Components at GitHub
&lt;/h3&gt;

&lt;p&gt;GitHub has long been a proponent of Web Components. Here's how we use them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.blog/2021-05-04-how-we-use-web-components-at-github/"&gt;How we use Web Components at GitHub | The GitHub Blog&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#some-great-videos-i-watched-this-week"&gt;
  &lt;/a&gt;
  Some great videos I watched this week
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#typescript-for-react-components"&gt;
  &lt;/a&gt;
  Typescript for React Components
&lt;/h3&gt;

&lt;p&gt;Typescript is quickly becoming the industry standard for React development. Take your Typescript skills from beginner to masters level by learning everything you need to know about how to write components in React the right way.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_Iv3whBUeCY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/jherr"&gt;Jack Herrington&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advanced-css-borderradius-tutorial"&gt;
  &lt;/a&gt;
  Advanced CSS Border-Radius Tutorial
&lt;/h3&gt;

&lt;p&gt;How to create complex shape with only CSS border-radius and understand how to separately control horizontal and vertical border-radius.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/j3Z4DR0o8bk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/redstapler_twit"&gt;Red Stapler&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thinking-on-ways-to-solve-a-media-scroller"&gt;
  &lt;/a&gt;
  Thinking on ways to solve a Media Scroller
&lt;/h3&gt;

&lt;p&gt;In today‚Äôs GUI challenge, Adam Argyle shares thinking on ways to create inline scrolling experiences for the web that are minimal, responsive, accessible and work across browsers and platforms (like TVs!).&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jmLdZY_Lo1k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/argyleink"&gt;Adam Argyle&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amazons-etsys-and-ebays-checkout-ui"&gt;
  &lt;/a&gt;
  Amazon's, Etsy's and Ebay's Checkout UI
&lt;/h3&gt;

&lt;p&gt;Here are five key UI elements that appear on leading ecommerce companies' checkout screens. The UI comparison also has lead to a freebie Figma Checkout template.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/t6DXK6j4Nw8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/jlinowski"&gt;Jakub Linowski&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yet-another-5-must-know-css-tricks-that-almost-nobody-knows"&gt;
  &lt;/a&gt;
  Yet Another 5 Must Know CSS Tricks That Almost Nobody Knows
&lt;/h3&gt;

&lt;p&gt;CSS is a vast language with tons of features and it is impossible to know them all. In this video I will be covering another 5 features in CSS that nobody knows but are incredibly useful.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-0fAhoahXYw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/DevSimplified"&gt;Web Dev Simplified&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-react-components"&gt;
  &lt;/a&gt;
  Testing React Components
&lt;/h3&gt;

&lt;p&gt;Here, Amy Dutton will show you how to write tests for a React component using Jest and the React Testing Library.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/c31KJTzt5YY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/selfteachme"&gt;Amy Dutton&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mastering-react-hooks-with-typescript"&gt;
  &lt;/a&gt;
  Mastering React Hooks with Typescript
&lt;/h3&gt;

&lt;p&gt;Let's dive DEEP again into Typescript but this time to look at React Hooks.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2vjrk2LHcJQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/jherr"&gt;Jack Herrington&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useful-github-repositories"&gt;
  &lt;/a&gt;
  Useful GitHub repositories
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#folio"&gt;
  &lt;/a&gt;
  Folio
&lt;/h3&gt;

&lt;p&gt;A customizable test framework to build your own test frameworks.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/microsoft"&gt;
        microsoft
      &lt;/a&gt; / &lt;a href="https://github.com/microsoft/folio"&gt;
        folio
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A customizable test framework to build your own test frameworks
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Folio &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/af30bc55094f0d1b645a74c62a6551cc2f20d9e6a0774f0ca698f4003fdf1072/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f666f6c696f"&gt;&lt;img src="https://camo.githubusercontent.com/af30bc55094f0d1b645a74c62a6551cc2f20d9e6a0774f0ca698f4003fdf1072/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f666f6c696f" alt="npm"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;A customizable test framework to build your own test frameworks. Foundation for the &lt;a href="https://github.com/microsoft/playwright-test"&gt;Playwright test runner&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Folio is &lt;strong&gt;available in preview&lt;/strong&gt; and is under active development. Breaking changes could happen. We welcome your feedback to shape this towards 1.0.&lt;/p&gt;
&lt;h2&gt;
Docs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#isolation-and-flexibility"&gt;Isolation and flexibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#writing-a-test"&gt;Writing a test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#writing-a-configuration-file"&gt;Writing a configuration file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#creating-an-environment"&gt;Creating an environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#command-line"&gt;Command line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#snapshots"&gt;Snapshots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#annotations"&gt;Annotations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#flaky-tests"&gt;Flaky tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#parallelism-and-sharding"&gt;Parallelism and sharding&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#workers"&gt;Workers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#shards"&gt;Shards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#advanced-configuration"&gt;Advanced configuration&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#configuration-object"&gt;Configuration object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#changing-the-timeout"&gt;Changing the timeout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#workerinfo"&gt;workerInfo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#testinfo"&gt;testInfo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#multiple-test-types-and-configurations"&gt;Multiple test types and configurations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#global-setup-and-teardown"&gt;Global setup and teardown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#test-options"&gt;Test options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#reporters"&gt;Reporters&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#built-in-reporters"&gt;Built-in reporters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#reporter-api"&gt;Reporter API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#expect"&gt;Expect&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/microsoft/folio/master/#add-custom-matchers-using-expectextend"&gt;Add custom matchers using expect.extend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Isolation and flexibility&lt;/h2&gt;
&lt;p&gt;Folio focuses on test isolation and flexibility. This makes it fast, reliable and able to adapt to your specific needs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Isolation&lt;/strong&gt;. Tests are isolated by default and can be run independently.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Folio runs tests in parallel by default, making your test suite much faster. Thanks to isolation, Folio reuses‚Ä¶&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/microsoft/folio"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#zx"&gt;
  &lt;/a&gt;
  zx
&lt;/h3&gt;

&lt;p&gt;A tool for writing better scripts&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/google"&gt;
        google
      &lt;/a&gt; / &lt;a href="https://github.com/google/zx"&gt;
        zx
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A tool for writing better scripts
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
üêö zx&lt;/h1&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;#!/usr/bin/env zx

&lt;span class="pl-k"&gt;await&lt;/span&gt; &lt;span class="pl-en"&gt;$&lt;/span&gt;&lt;span class="pl-s"&gt;`cat package.json | grep name`&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-s1"&gt;branch&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;await&lt;/span&gt; &lt;span class="pl-en"&gt;$&lt;/span&gt;&lt;span class="pl-s"&gt;`git branch --show-current`&lt;/span&gt;
&lt;span class="pl-k"&gt;await&lt;/span&gt; &lt;span class="pl-en"&gt;$&lt;/span&gt;&lt;span class="pl-s"&gt;`dep deploy --branch=&lt;span class="pl-s1"&gt;&lt;span class="pl-kos"&gt;${&lt;/span&gt;&lt;span class="pl-s1"&gt;branch&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/span&gt;`&lt;/span&gt;

&lt;span class="pl-k"&gt;await&lt;/span&gt; &lt;span class="pl-v"&gt;Promise&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;all&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;[&lt;/span&gt;
  &lt;span class="pl-en"&gt;$&lt;/span&gt;&lt;span class="pl-s"&gt;`sleep 1; echo 1`&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-en"&gt;$&lt;/span&gt;&lt;span class="pl-s"&gt;`sleep 2; echo 2`&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-en"&gt;$&lt;/span&gt;&lt;span class="pl-s"&gt;`sleep 3; echo 3`&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
&lt;span class="pl-kos"&gt;]&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;

&lt;span class="pl-k"&gt;let&lt;/span&gt; &lt;span class="pl-s1"&gt;name&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;'foo bar'&lt;/span&gt;
&lt;span class="pl-k"&gt;await&lt;/span&gt; &lt;span class="pl-en"&gt;$&lt;/span&gt;&lt;span class="pl-s"&gt;`mkdir /tmp/&lt;span class="pl-s1"&gt;&lt;span class="pl-kos"&gt;${&lt;/span&gt;&lt;span class="pl-s1"&gt;name&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/span&gt;`&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Bash is great, but when it comes to writing scripts,
people usually choose a more convenient programming language.
JavaScript is a perfect choice, but standard Node.js library
requires additional hassle before using. The &lt;code&gt;zx&lt;/code&gt; package provides
useful wrappers around &lt;code&gt;child_process&lt;/code&gt;, escapes arguments and
gives sensible defaults.&lt;/p&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm i -g zx&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;p&gt;Write your scripts in a file with &lt;code&gt;.mjs&lt;/code&gt; extension in order to
be able to use &lt;code&gt;await&lt;/code&gt; on top level. If you prefer the &lt;code&gt;.js&lt;/code&gt; extension
wrap your scripts in‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/google/zx"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#remote-redux-devtools"&gt;
  &lt;/a&gt;
  Remote Redux DevTools
&lt;/h3&gt;

&lt;p&gt;Use &lt;a href="https://github.com/reduxjs/redux-devtools"&gt;Redux DevTools&lt;/a&gt; remotely for React Native, hybrid, desktop and server side Redux apps.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/zalmoxisus"&gt;
        zalmoxisus
      &lt;/a&gt; / &lt;a href="https://github.com/zalmoxisus/remote-redux-devtools"&gt;
        remote-redux-devtools
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Redux DevTools remotely.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Remote Redux DevTools&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/zalmoxisus/remote-redux-devtools/master/demo.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rw9NUQ2F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/zalmoxisus/remote-redux-devtools/master/demo.gif" alt="Demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;a href="https://github.com/gaearon/redux-devtools"&gt;Redux DevTools&lt;/a&gt; remotely for React Native, hybrid, desktop and server side Redux apps.&lt;/p&gt;
&lt;h3&gt;
Installation&lt;/h3&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;npm install --save-dev remote-redux-devtools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: for Windows use &lt;code&gt;remote-redux-devtools@0.5.0&lt;/code&gt; (newer versions will not work due to a Windows issue fixed in &lt;code&gt;react-native&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
Usage&lt;/h3&gt;
&lt;p&gt;There are 2 ways of usage depending if you're using other store enhancers (middlewares) or not.&lt;/p&gt;
&lt;h4&gt;
Add DevTools enhancer to your store&lt;/h4&gt;
&lt;p&gt;If you have a basic &lt;a href="http://redux.js.org/docs/api/createStore.html" rel="nofollow"&gt;store&lt;/a&gt; as described in the official &lt;a href="http://redux.js.org/index.html" rel="nofollow"&gt;redux-docs&lt;/a&gt;, simply replace:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;createStore&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'redux'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;store&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;createStore&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;reducer&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;createStore&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'redux'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s1"&gt;devToolsEnhancer&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'remote-redux-devtools'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;store&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;createStore&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;reducer&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-en"&gt;devToolsEnhancer&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-c"&gt;// or const store = createStore(reducer, preloadedState, devToolsEnhancer());&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: passing enhancer as last argument requires redux@&amp;gt;=3.1.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
When to use DevTools compose helper&lt;/h4&gt;
&lt;p&gt;If you setup your store with &lt;a href="http://redux.js.org/docs/api/applyMiddleware.html" rel="nofollow"&gt;middlewares and enhancers&lt;/a&gt;‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/zalmoxisus/remote-redux-devtools"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#dribbble-shots"&gt;
  &lt;/a&gt;
  dribbble shots
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#localy-roadmap"&gt;
  &lt;/a&gt;
  Localy ‚Äî Roadmap
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rab4UEd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1494589/screenshots/15646449/media/f8e8a1b9e5190da7702646f3b0c02214.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rab4UEd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1494589/screenshots/15646449/media/f8e8a1b9e5190da7702646f3b0c02214.png" alt="https://cdn.dribbble.com/users/1494589/screenshots/15646449/media/f8e8a1b9e5190da7702646f3b0c02214.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/15646449--Localy-Roadmap"&gt;Arman Rokni&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#govoroon-app"&gt;
  &lt;/a&gt;
  Govoroon App
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pXP_LX0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/653699/screenshots/15648656/media/9d41b3c079f3ca5e14f6641b73e5cc08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pXP_LX0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/653699/screenshots/15648656/media/9d41b3c079f3ca5e14f6641b73e5cc08.png" alt="https://cdn.dribbble.com/users/653699/screenshots/15648656/media/9d41b3c079f3ca5e14f6641b73e5cc08.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/15648656-Govoroon-App"&gt;Gregory Riaguzov&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iot-app-for-growing-plants"&gt;
  &lt;/a&gt;
  IoT App for growing plants
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n3eA1ebb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2770155/screenshots/15649083/media/e7ee2c36f5392362d992d77aecf9f2ab.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3eA1ebb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2770155/screenshots/15649083/media/e7ee2c36f5392362d992d77aecf9f2ab.jpg" alt="https://cdn.dribbble.com/users/2770155/screenshots/15649083/media/e7ee2c36f5392362d992d77aecf9f2ab.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/15649083-IoT-App-for-growing-plants"&gt;Amirhossein Soltani&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#doctor-appointment"&gt;
  &lt;/a&gt;
  Doctor appointment
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vdR7bULH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2067473/screenshots/15644898/media/c2dda673891b89964bd3fb1ebe14a646.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vdR7bULH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2067473/screenshots/15644898/media/c2dda673891b89964bd3fb1ebe14a646.png" alt="https://cdn.dribbble.com/users/2067473/screenshots/15644898/media/c2dda673891b89964bd3fb1ebe14a646.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/15644898-Doctor-appointment"&gt;Martyna Zieli≈Ñska&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#allhand-mobile-app"&gt;
  &lt;/a&gt;
  Allhand - Mobile App
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EGFTBdzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/4536274/screenshots/15648806/media/f2ad2023d41f32d5fadd0b7a13bb6d68.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EGFTBdzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/4536274/screenshots/15648806/media/f2ad2023d41f32d5fadd0b7a13bb6d68.png" alt="https://cdn.dribbble.com/users/4536274/screenshots/15648806/media/f2ad2023d41f32d5fadd0b7a13bb6d68.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/15648806-Allhand-Mobile-App"&gt;Baten&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tweets"&gt;
  &lt;/a&gt;
  Tweets
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uE0c9Mpn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E05elPbWQAM8csP.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--NkkUn_Rh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1375211490958016514/r7J_FWgD_normal.jpg" alt="Lindseyüë©‚Äçüíª profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Lindseyüë©‚Äçüíª
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/lindsey_design"&gt;@lindsey_design&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      üòÇüëå&lt;br&gt;&lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:10 PM - 08 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1391153503716978692" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1391153503716978692" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1391153503716978692" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vnWAruUZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E1CaDZ0XoAcoetH.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--M3hInNzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1363694184641748992/F2CevIAq_normal.jpg" alt="ùêÉùêöùê¶ùê¢ üîÖ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        ùêÉùêöùê¶ùê¢ üîÖ
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @dakitianthm
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/hashtag/HappyMonday"&gt;#HappyMonday&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:46 PM - 10 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1391781674548088833" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1391781674548088833" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1391781674548088833" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_6xtsg6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E1DnqVpXMAAS1PG.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ade2nZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1338344493234286592/C_ujKIUa_normal.png" alt="GitHub profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        GitHub
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @github
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Copying and pasting Markdown code blocks just got a whole lot easier. Click to copy and paste away! üñ±Ô∏è üìã üí• 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:25 PM - 10 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1391867011832193030" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1391867011832193030" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1391867011832193030" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dS_WoaI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E1MValrXIAcQrJi.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dAzxD1zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1135999619781939201/HZ-pCQcP_normal.png" alt="Gatsby profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Gatsby
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @gatsbyjs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      üí• Gatsby v3.5 is here. &lt;br&gt;&lt;br&gt;DX:&lt;br&gt;‚ñ™Ô∏è ~ 20% faster Gatsby CLI startup.&lt;br&gt;‚ñ™Ô∏è Gatsby v3 compatibility for Gatsby Source GraphQL Toolkit.&lt;br&gt;&lt;br&gt;Build perf:&lt;br&gt;‚ñ™Ô∏è ~ 20% faster query running.&lt;br&gt;‚ñ™Ô∏è ~ 70% faster page creation.&lt;br&gt;‚ñ™Ô∏è ~ 50% drop in peak memory utilization.&lt;br&gt;&lt;br&gt;üëâüèæ &lt;a href="https://t.co/HRCN78ve9n"&gt;gatsbyjs.com/docs/reference‚Ä¶&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:02 PM - 12 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1392480258285264900" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1392480258285264900" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1392480258285264900" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#picked-pens"&gt;
  &lt;/a&gt;
  Picked Pens
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#glsl-sample027"&gt;
  &lt;/a&gt;
  GLSL Sample027
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Web_yuki1027/embed/yLgYpWM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://codepen.io/Web_yuki1027"&gt;Yuki&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#spring-pattern"&gt;
  &lt;/a&gt;
  Spring pattern
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shubniggurath/embed/mdWeGPd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/liamegan"&gt;Liam Egan&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#podcasts-worth-listening"&gt;
  &lt;/a&gt;
  Podcasts worth listening
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#syntax-fm-technical-debt"&gt;
  &lt;/a&gt;
  Syntax FM - Technical Debt
&lt;/h3&gt;

&lt;p&gt;In this Hasty Treat, Scott and Wes talk about technical debt ‚Äî what it is, why does it occur, and some techniques for reducing and avoiding it.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3aPho73s5JAl5xQC7ndqnc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-css-podcast-snap-points"&gt;
  &lt;/a&gt;
  The CSS Podcast - Snap Points
&lt;/h3&gt;

&lt;p&gt;In this episode, Una and Adam are guiding scroll areas into their peaceful resting places, maintaining alignment, keeping visual harmony, and improving the overall experience with the content.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/02VO53lNDAYj46zIlbeWQx"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smashing-podcast-what-is-the-future-of-css"&gt;
  &lt;/a&gt;
  Smashing Podcast - What is The Future of CSS?
&lt;/h3&gt;

&lt;p&gt;We‚Äôre starting our new season with a look the future of CSS. What new specs will be landing in browsers soon? Drew McLellan talks to expert Miriam Suzanne to find out.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5ytU8nRh3i6bBCHU3Tvv7P"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-minutes-with-kent-cypress-driven-development"&gt;
  &lt;/a&gt;
  3 Minutes with Kent - Cypress Driven Development
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/674892x1cW455FvMFmGfjT"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-engineering-daily-natural-language-processing"&gt;
  &lt;/a&gt;
  Software Engineering Daily - Natural Language Processing
&lt;/h3&gt;

&lt;p&gt;Natural Language Processing (NLP) is a branch of artificial intelligence concerned with giving computers the ability to understand text and spoken words. ‚ÄúUnderstanding‚Äù includes intent, sentiment, and what‚Äôs important in the message.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/2NwKZ8Hia6tMTxnlccu3er"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Thank you for reading, talk to you next week, and stay safe! üëã&lt;/p&gt;




&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;Make sure to subscribe to our &lt;a href="https://worldindev.ck.page"&gt;newsletter&lt;/a&gt; üíå to receive our weekly recap directly on your email and react to this post to automatically participate in our giveaway üéÅ&lt;/p&gt;

&lt;p&gt;If you would like to join our discussions, you can find us on &lt;a href="https://discord.gg/aWS2YKk6"&gt;Discord&lt;/a&gt; üì£.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
