<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>#noqa magic comment in python</title>
      <author>Vadim Kolobanov</author>
      <pubDate>Wed, 03 Nov 2021 04:31:00 +0000</pubDate>
      <link>https://dev.to/vadimkolobanov/noqa-magic-comment-in-python-33e6</link>
      <guid>https://dev.to/vadimkolobanov/noqa-magic-comment-in-python-33e6</guid>
      <description>&lt;p&gt;Adding #noqa to a line means that the linter (a program that automatically checks the quality of the code) should not check this line. Any warnings that the code may have generated will be ignored.&lt;/p&gt;

&lt;p&gt;This line may have something that "looks bad" to the linter, but the developer understands and intends to do it for some reason.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Noqa = NO-QA (NO Quality Assurance)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Simply put, lines with #noga at the end will be ignored by linter programs and will not issue any warnings.&lt;/p&gt;

&lt;p&gt;Just leave a comment #noqa at the end of the line that triggers a warning from linter, and he will stop paying attention to it.&lt;/p&gt;

&lt;p&gt;The most interesting thing is that I got acquainted with NOQA in the root files of the Django framework. The developers just decided to ignore the warnings in some of their imports. Look better visually&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ObjectDoesNotExist&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.aggregates&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="c1"&gt;# NOQA
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.aggregates&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;aggregates_all&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.constraints&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="c1"&gt;# NOQA
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.constraints&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;constraints_all&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.deletion&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DO_NOTHING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PROTECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RESTRICT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SET_DEFAULT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SET_NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ProtectedError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RestrictedError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.enums&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="c1"&gt;# NOQA
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.enums&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;enums_all&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.expressions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Case&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Exists&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ExpressionList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ExpressionWrapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;OrderBy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OuterRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RowRange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Subquery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ValueRange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;When&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;WindowFrame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="c1"&gt;# NOQA
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fields_all&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.fields.files&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FileField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImageField&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.fields.json&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSONField&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.fields.proxy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderWrt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.indexes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="c1"&gt;# NOQA
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.indexes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;indexes_all&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.lookups&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Lookup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Transform&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.manager&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Manager&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.query&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Prefetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QuerySet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefetch_related_objects&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.query_utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FilteredRelation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to find it yourself, look in django.db.models&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good-luck"&gt;
  &lt;/a&gt;
  Good Luck!
&lt;/h3&gt;

&lt;p&gt;You can also &lt;a href="https://titanyforgame.medium.com/"&gt;find me on Medium&lt;/a&gt;. I will be very glad to have &lt;br&gt;
your attention.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/bePatron?u=64009903"&gt;&amp;lt;img src="&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4kAQAgAW-"&gt;https://res.cloudinary.com/practicaldev/image/fetch/s--4kAQAgAW-&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>discuss</category>
      <category>features</category>
    </item>
    <item>
      <title>3 Ways to add CSS in React JS</title>
      <author>Saleh-Mubashar</author>
      <pubDate>Wed, 03 Nov 2021 03:48:30 +0000</pubDate>
      <link>https://dev.to/salehmubashar/3-ways-to-add-css-in-react-js-336f</link>
      <guid>https://dev.to/salehmubashar/3-ways-to-add-css-in-react-js-336f</guid>
      <description>&lt;p&gt;Hi guys!.&lt;/p&gt;

&lt;p&gt;In this post, we will be looking into the 3 best ways CSS code can be added in React JS or to you React App.&lt;br&gt;
Obviously, CSS is crucial in making your app user friendly and visually attractive. These are the 3 different ways to add CSS to your react app:&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#1-external-stylesheet"&gt;
  &lt;/a&gt;
  1 - External Stylesheet
&lt;/h2&gt;

&lt;p&gt;You can create a new CSS file in your project directory and add your CSS inside it. You can then import it in your component, class or React JS page.&lt;br&gt;
The following code is used to import an external CSS stylesheet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-inline-css"&gt;
  &lt;/a&gt;
  2 - Inline CSS
&lt;/h2&gt;

&lt;p&gt;Probably the most common and quickest out of all 3 is inline CSS. However it has many disadvantages and it is generally discouraged to use unless it is a very small application.&lt;br&gt;
Basically, we create an object that contains different references which are then called using the &lt;code&gt;style{}&lt;/code&gt; attribute.&lt;br&gt;
For example, the CSS is added like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;section&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;18px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#292b2c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 20px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;textAlign&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;50px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is then added to an element like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-styled-components"&gt;
  &lt;/a&gt;
  3 - Styled Components
&lt;/h2&gt;

&lt;p&gt;Probably the most powerful and useful in my opinion is Styled Components. Styled Components lets you write actual CSS in your JavaScript. The main advantage is that you can add conditional code and use variables and functions within the CSS!.&lt;/p&gt;

&lt;p&gt;You can install Styled Components using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install --save styled-components&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Next, you need to import it in you component. Then you can create a new variable that will contain the CSS. The same variable name with open and close brackets will render or create an HTML element with the previously added styles on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// Create a button variable and add CSS&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  background: transparent;
  border-radius: 3px;
  border: 2px solid red;
  color:red;
`&lt;/span&gt;
&lt;span class="c1"&gt;//display the HTML&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Thanks for reading the post!.&lt;br&gt;
Please check out my new &lt;a href="https://discover.hubpages.com/technology/reactCounter"&gt;tutorial&lt;/a&gt;.&lt;br&gt;
And please support me on &lt;a href="https://hubpages.com/@salehmubashar"&gt;hubpages&lt;/a&gt; as well.&lt;br&gt;
Until next time.&lt;br&gt;
Cheers!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How Nebula Clients works with fbthrift</title>
      <author>lisahui</author>
      <pubDate>Wed, 03 Nov 2021 03:44:41 +0000</pubDate>
      <link>https://dev.to/lisahui/how-nebula-clients-works-with-fbthrift-hjg</link>
      <guid>https://dev.to/lisahui/how-nebula-clients-works-with-fbthrift-hjg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;Nebula Clients provide users with APIs in multiple programming languages to interact with Nebula Graph and repackages the data structure returned by the server for better use.&lt;/p&gt;

&lt;p&gt;Currently, Nebula Clients support C++, Java, Python, Golang, and Rust.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#framework-for-service-communication"&gt;
  &lt;/a&gt;
  Framework for service communication
&lt;/h2&gt;

&lt;p&gt;Nebula Clients use fbthrift &lt;a href="https://github.com/facebook/fbthrift"&gt;https://github.com/facebook/fbthrift&lt;/a&gt; as the RPC framework for service communication between servers and clients to implement cross-language interaction.&lt;/p&gt;

&lt;p&gt;At a high level, fbthrift is:&lt;/p&gt;

&lt;p&gt;A code generator: fbthrift has a code generator that generates data structures that can be serialized using Thrift in different languages.&lt;br&gt;
A serialization framework: fbthrift has a set of protocols to serialize the generated structures created from the code generator.&lt;br&gt;
An RPC framework: fbthrift has a framework to send messages between clients and servers and to call application-defined functions when receiving messages in different languages.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;Take the Golang client as an example to show the application of fbthrift in Nebula Graph.&lt;/p&gt;

&lt;p&gt;The definition of the Vertex structure in servers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct Vertex {
    Value vid;
    std::vector&amp;lt;Tag&amp;gt; tags;

    Vertex() = default;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Define some data structures in src/interface/common.thrift:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct Tag {
        1: binary name,
        // List of &amp;lt;prop_name, prop_value&amp;gt;
        2: map&amp;lt;binary, Value&amp;gt; (cpp.template = "std::unordered_map") props,
} (cpp.type = "nebula::Tag")

struct Vertex {
        1: Value     vid,
        2: list&amp;lt;Tag&amp;gt; tags,
} (cpp.type = "nebula::Vertex")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we define a Vertex structure. (cpp.type = "nebula::Vertex") indicates this structure corresponds to the nebula::Vertex of the server.&lt;/p&gt;

&lt;p&gt;fbthrift will automatically generate the data structure in Golang:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Attributes:
//  - Vid
//  - Tags
type Vertex struct {
    Vid *Value `thrift:"vid,1" db:"vid" json:"vid"`
    Tags []*Tag `thrift:"tags,2" db:"tags" json:"tags"`
}

func NewVertex() *Vertex {
    return &amp;amp;Vertex{}
}

...

func (p *Vertex) Read(iprot thrift.Protocol) error { // Deserialization
    ...
}

func (p *Vertex) Write(oprot thrift.Protocol) error { // Serialization 
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In MATCH (v:Person) WHERE id(v) == "ABC" RETURN v, the client requests a vertex (nebula::Vertex) from the server. The server will serialize it after finding it. After the server finds this vertex, it will be serialized and sent to the client through the transport of the RPC communication framework. When the client receives this data, it will be deserialized to generate the corresponding data structure (type Vertex struct) defined in the client.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clients"&gt;
  &lt;/a&gt;
  Clients
&lt;/h2&gt;

&lt;p&gt;In this section, we will take nebula-go as an example to introduce different modules of the client and their main interfaces.&lt;/p&gt;

&lt;p&gt;Configs provides the whole configuration options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type PoolConfig struct {
    // Set the timeout threshold. The default value 0 means it does not time out. Unit: ms
    TimeOut time.Duration
    // The maximum idle time of each connection. When the idle time exceeds this threshold, the connection will be disconnected and deleted. The default value 0 means permanently idle and the connection will not be disconnected
    IdleTime time.Duration
    // max_connection_pool_size: Set the maximum number of connections in the connection pool. The default value is 10
    MaxConnPoolSize int
    // The minimum number of idle connections. The default value is 0
    MinConnPoolSize int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Session provides an interface for users to call directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Manage the specific information of Session
type Session struct {
    // Use for identity verification or message retry when executing commands
    sessionID  int64
    // Currently held connections
    connection *connection
    // Currently used connection pools
    connPool   *ConnectionPool
    // Log tools
    log        Logger
    // Use to save the time zone used by the current session
    timezoneInfo
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The definition of interfaces is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Execute nGQL. The return data type is ResultSet. This interface is non-thread-safe
    func (session *Session) Execute(stmt string) (*ResultSet, error) {...}
    // Re-acquire a connection from the connection pool for the current Session
    func (session *Session) reConnect() error {...}
    // Signout, release the Session ID, and return the connection to the pool
    func (session *Session) Release() {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ConnectionPool manages all connections. The main interfaces are as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Create a new connection pool and complete the initialization with the entered service address
func NewConnectionPool(addresses []HostAddress, conf PoolConfig, log Logger) (*ConnectionPool, error) {...}
// Validate and get the Session example
func (pool *ConnectionPool) GetSession(username, password string) (*Session, error) {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Connection packages the network of thrift and provides the following interfaces:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Establish a connection with the specified ip and port
func (cn *connection) open(hostAddress HostAddress, timeout time.Duration) error {...}
// Authenticate the username and password
func (cn *connection) authenticate(username, password string) (*graph.AuthResponse, error) {
// Execute query
func (cn *connection) execute(sessionID int64, stmt string) (*graph.ExecutionResponse, error) {...}
// Generate a temp sessionID 0 and send the query "YIELD 1" to test if the connection is usable.
func (cn *connection) ping() bool {...}
// Release sessionId to the graphd process.
func (cn *connection) signOut(sessionID int64) error {...}
// Disconnect.
func (cn *connection) close() {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;LoadBalance is used in the connection pool.&lt;br&gt;
Policy: Polling&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#interaction-of-modules"&gt;
  &lt;/a&gt;
  Interaction of modules
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ANwViQLn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/139806844-7bbffd66-6161-40d4-9115-e7522f44538d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ANwViQLn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/139806844-7bbffd66-6161-40d4-9115-e7522f44538d.png" alt="Interaction of modules" width="880" height="486"&gt;&lt;/a&gt;&lt;br&gt;
Connection pool&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#initialize"&gt;
  &lt;/a&gt;
  Initialize:
&lt;/h3&gt;

&lt;p&gt;When using it, the user needs to create and initialize a connection pool. During initialization, the connection pool will establish a connection at the address of the Nebula service specified by the user. If multiple Graph services are deployed in a cluster deployment method, the connection pool will use a polling policy to balance the load and establish a nearly equal number of connections for each address.&lt;br&gt;
Manage connections:&lt;br&gt;
Two queues are maintained in the connection pool, idle connection queue and active Connection Queue. The connection pool will periodically detect expired idle connections and close them. These two queues will use read-write lock to ensure the correctness of multi-thread execution when adding or deleting elements.&lt;br&gt;
When Session requests a connection to the connection pool, it will check whether there are usable connections in the idle connection queue. If there are any usable connections, they will be directly returned to the Session for users to use. If there are no usable connections and the current total number of connections does not exceed the maximum number of connections defined in the configuration, a new connection is created to the Session. If it reaches the maximum number of connections, an error is returned.&lt;br&gt;
Generally, the connection pool needs to be closed only when you close the program. All connections in the pool will be disconnected when the program is closed.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#session"&gt;
  &lt;/a&gt;
  Session
&lt;/h3&gt;

&lt;p&gt;Session is generated through the connection pool. The user needs to provide the password for authentication. After the authentication succeeds, the user will get a Session example and communicate with the server through the connection in the Session. The most commonly used interface is execute(). If an error occurs during execution, the client will check the error type. If it is a network error, it will automatically reconnect and try to execute the statement again.&lt;br&gt;
Note that a Session does not support being used by multiple threads at the same time. The correct way is that multiple sessions are applied by multiple threads, and one session is used by each thread.&lt;br&gt;
When the Session is released, the connection held by it will be put back into the idle connection queue of the connection pool so that it can be reused by other sessions later.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#connection"&gt;
  &lt;/a&gt;
  Connection
&lt;/h3&gt;

&lt;p&gt;Each connection example is equivalent and can be held by any Session. The purpose of this design is to allow these connections to be reused by different Sessions, reducing repeatedly enabling and disabling Transport.&lt;br&gt;
The connection will send the client’s request to the server and return the result to the Session.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Initialize connection pool
pool, err := nebula.NewConnectionPool(hostList, testPoolConfig, log)
if err != nil {
    log.Fatal(fmt.Sprintf("Fail to initialize the connection pool, host: %s, port: %d, %s", address, port, err.Error()))
}
// Close all connections in the pool when program exits
defer pool.Close()

// Create session
session, err := pool.GetSession(username, password)
if err != nil {
    log.Fatal(fmt.Sprintf("Fail to create a new session from connection pool, username: %s, password: %s, %s",
        username, password, err.Error()))
}
// Release session and return connection back to connection pool when program exits
defer session.Release()

// Excute a query
resultSet, err := session.Execute(query)
if err != nil {
    fmt.Print(err.Error())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#returned-data-structure"&gt;
  &lt;/a&gt;
  Returned data structure
&lt;/h2&gt;

&lt;p&gt;The client packages the returned query results by part of the complex servers and adds an interface for convenience use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WDZ_zJIp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A5n3-d30WiZMNr8jRc3WeTQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WDZ_zJIp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A5n3-d30WiZMNr8jRc3WeTQ.png" alt="Returned data structure" width="880" height="837"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;nebula::Value will be packaged as ValueWrapper in the client and converted to other structures through interfaces. (i.g. node = ValueWrapper.asNode())&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#analysis-of-data-structure"&gt;
  &lt;/a&gt;
  Analysis of data structure
&lt;/h2&gt;

&lt;p&gt;For MATCH p= (v:player{name:"Tim Duncan"})-[]-&amp;gt;(v2) RETURN p, the returned result is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| p                                                                                                                                                                                                                         |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| &amp;lt;("Tim Duncan" :bachelor{name: "Tim Duncan", speciality: "psychology"} :player{age: 42, name: "Tim Duncan"})&amp;lt;-[:teammate@0 {end_year: 2016, start_year: 2002}]-("Manu Ginobili" :player{age: 41, name: "Manu Ginobili"})&amp;gt; |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
Got 1 rows (time spent 11550/12009 us)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that the returned result contains one row, and its type is a path. At this time, you can execute as follows to get the properties of the destination vertex of the path (v2).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Excute a query
resultSet, _ := session.Execute("MATCH p= (v:player{name:"\"Tim Duncan"\"})-[]-&amp;gt;(v2) RETURN p")

// Get the first row of the result. The index of the first row is 0
record, err := resultSet.GetRowValuesByIndex(0)
if err != nil {
    t.Fatalf(err.Error())
}

// Take the value of the cell in the first column from the first row
// At this time, the type of valInCol0 is ValueWrapper
valInCol0, err := record.GetValueByIndex(0)

// Convert ValueWrapper into PathWrapper objects.
pathWrap, err = valInCol0.AsPath()

// Get the destination vertex through pathWrap.GetEndNode()
node, err = pathWrap.GetEndNode()

// Get all properties through node.Properties()
// The type of props is map[string]*ValueWrapper
props, err = node.Properties()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#address-of-clients"&gt;
  &lt;/a&gt;
  Address of clients
&lt;/h2&gt;

&lt;p&gt;The GitHub addresses of clients are as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/vesoft-inc/nebula-cpp"&gt;https://github.com/vesoft-inc/nebula-cpp&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/vesoft-inc/nebula-java"&gt;https://github.com/vesoft-inc/nebula-java&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/vesoft-inc/nebula-python"&gt;https://github.com/vesoft-inc/nebula-python&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/vesoft-inc/nebula-go"&gt;https://github.com/vesoft-inc/nebula-go&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/vesoft-inc/nebula-rust"&gt;https://github.com/vesoft-inc/nebula-rust&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you encounter any problems in the process of using Nebula Graph, please refer to &lt;a&gt;Nebula Graph Database Manual&lt;/a&gt; to troubleshoot the problem. It records in detail the knowledge points and specific usage of the graph database and the graph database Nebula Graph.&lt;/p&gt;

</description>
      <category>database</category>
      <category>opensource</category>
      <category>devops</category>
      <category>programming</category>
    </item>
    <item>
      <title>40+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs [Beginners - Advance] </title>
      <author>W3School</author>
      <pubDate>Wed, 03 Nov 2021 03:30:28 +0000</pubDate>
      <link>https://dev.to/w3webs/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-20eo</link>
      <guid>https://dev.to/w3webs/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-20eo</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1"&gt;40+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs &lt;/a&gt;&lt;/b&gt; &lt;/p&gt;






</description>
    </item>
    <item>
      <title>40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS  [Beginners - Advance]</title>
      <author>W3School</author>
      <pubDate>Wed, 03 Nov 2021 03:23:13 +0000</pubDate>
      <link>https://dev.to/w3webs/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-10fi</link>
      <guid>https://dev.to/w3webs/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-10fi</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Tips to become a great programmer [Beginners - Advance]</title>
      <author>W3School</author>
      <pubDate>Wed, 03 Nov 2021 03:22:12 +0000</pubDate>
      <link>https://dev.to/w3webs/tips-to-become-a-great-programmer-beginners-advance-1bf4</link>
      <guid>https://dev.to/w3webs/tips-to-become-a-great-programmer-beginners-advance-1bf4</guid>
      <description>&lt;p&gt; A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>3 Reasons Why you need to join a tech community</title>
      <author>Jessica Wilkins</author>
      <pubDate>Wed, 03 Nov 2021 03:16:54 +0000</pubDate>
      <link>https://dev.to/codergirl1991/3-reasons-why-you-need-to-join-a-tech-community-5acl</link>
      <guid>https://dev.to/codergirl1991/3-reasons-why-you-need-to-join-a-tech-community-5acl</guid>
      <description>&lt;p&gt;No matter where you are in your developer journey, it is really important to join a tech community. Healthy tech communities can provide valuable learning opportunities, growth, mentorship and career advancement. &lt;/p&gt;

&lt;p&gt;In this article, I will provide you with three reasons why you should join a tech community. I will also provide you with a list of communities I enjoy being apart of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reason-1-community-support"&gt;
  &lt;/a&gt;
  Reason #1: Community Support
&lt;/h2&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@dimhou?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Dim Hou&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/support?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k3zhWhaC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hps3zy8iefsjbm53nn1z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k3zhWhaC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hps3zy8iefsjbm53nn1z.jpg" alt="Family holding hands" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I first started learning how to code, I remember feeling lost on what to do.&lt;/p&gt;

&lt;p&gt;I had so many questions including: &lt;/p&gt;

&lt;p&gt;Which courses should I take?&lt;/p&gt;

&lt;p&gt;How long will it take to get a developer job?&lt;/p&gt;

&lt;p&gt;Is it normal to struggle while learning how to code?&lt;/p&gt;

&lt;p&gt;After a couple of months of bouncing around to different online sources, I stumbled across &lt;a href="https://www.freecodecamp.org/learn"&gt;freeCodeCamp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not only did I enjoy their interactive lessons, but I also loved being apart of their &lt;a href="https://forum.freecodecamp.org/"&gt;supportive online community&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since I came from a non-tech background, it was very helpful to have a community there to help guide me throughout my journey. &lt;/p&gt;

&lt;p&gt;When you are plugged into a good community, they will be there to celebrate your wins, and support you during the tough times.&lt;/p&gt;

&lt;p&gt;Whether you have been programming for 2 months or 2 decades, everyone needs a support system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reason-2-access-to-valuable-programming-resources"&gt;
  &lt;/a&gt;
  Reason #2: Access to valuable programming resources
&lt;/h2&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@sincerelymedia?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Sincerely Media&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/resources?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vbeji4T9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7n927j3j5db103qhn01y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vbeji4T9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7n927j3j5db103qhn01y.jpg" alt="Public Library" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the great things about being in a community is the volume of great resources that developers share with each other. &lt;/p&gt;

&lt;p&gt;I have probably bookmarked 100's of resources within the past year.  &lt;/p&gt;

&lt;p&gt;Here are a few great resources I learned about through my community.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mentors.codingcoach.io/"&gt;Coding Coach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/heretohelp/Here-To-Help-12bd77846a2540b186f51ad345cc5993"&gt;Here to help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://teachyourselfcs.com/"&gt;Teach Yourself Computer Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://protege.dev/"&gt;Protege - Remote Jobs for Junior Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have also asked my community for suggestions on resources  for accessibility, Web 3, interview prep and more. &lt;/p&gt;

&lt;p&gt;Your community should be a trusted resource to help you distinguish between the good and bad content. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reason-3-networking"&gt;
  &lt;/a&gt;
  Reason #3: Networking
&lt;/h2&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@antenna?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Antenna&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/networking?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--41LUEe7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m1x751hl78m854p5dgu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41LUEe7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m1x751hl78m854p5dgu.jpg" alt="People talking at conference" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connecting with other developers is one of the biggest reasons why people join tech communities in the first place.&lt;/p&gt;

&lt;p&gt;Making genuine connections with people can help boost your developer career. There are many developers out there who got jobs through their network.&lt;/p&gt;

&lt;p&gt;When you take the time to meet, discuss, connect and collaborate with other developers, it can lead to more career opportunities than the traditional job search. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please Note:&lt;/strong&gt;&lt;br&gt;
Networking does not mean using people for personal gain.&lt;/p&gt;

&lt;p&gt;Do not join a tech community and immediately demand complete strangers for a job.&lt;/p&gt;

&lt;p&gt;Focus on making genuine connections with others. That way they can vouch for your work and feel comfortable recommending you for jobs. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#list-of-good-tech-communities"&gt;
  &lt;/a&gt;
  List of good tech communities
&lt;/h2&gt;

&lt;p&gt;Here is list of good tech communities that I love being apart of.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#virtual-coffee"&gt;
  &lt;/a&gt;
  &lt;a href="https://virtualcoffee.io/"&gt;Virtual Coffee&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a0sOHsgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cysgmfiv10ox2j85skp0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0sOHsgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cysgmfiv10ox2j85skp0.png" alt="Virtual Coffee Website" width="880" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I joined Virtual Coffee a few months ago and it has been an incredible experience. The level of care and time that goes into everything they do is beyond amazing.&lt;/p&gt;

&lt;p&gt;Virtual Coffee was founded by &lt;a class="mentioned-user" href="https://dev.to/bekahhw"&gt;@bekahhw&lt;/a&gt;
 in April of 2020. Since then it has grown into an incredible group of developers from all around the world.&lt;/p&gt;

&lt;p&gt;Virtual Coffee meets twice a week on Tuesdays and Thursdays to discuss anything related to tech. Members can also seek programming help, career advice, and more through the slack channel. &lt;/p&gt;

&lt;p&gt;I also really enjoy participating in the Lunch and Learn events as well as the monthly challenges. &lt;/p&gt;

&lt;p&gt;If you are interested in joining, then please visit the &lt;a href="https://virtualcoffee.io/events/"&gt;Virtual Coffee website&lt;/a&gt; on how to attend a meeting. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-freecodecamp-forum"&gt;
  &lt;/a&gt;
  The freeCodeCamp &lt;a href="https://forum.freecodecamp.org/"&gt;forum&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUTRrfpL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ww7j27fdg9wtdtxx25ib.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUTRrfpL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ww7j27fdg9wtdtxx25ib.png" alt="freeCodeCamp forum" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a forum dedicated to those seeking help with the freeCodeCamp curriculum as well as general advice regarding web development and careers. &lt;/p&gt;

&lt;p&gt;This was the first community I had ever joined and I really liked that fact that it was a safe place to ask questions.&lt;/p&gt;

&lt;p&gt;There is no question to dumb or small to ask because people are always willing to help out. &lt;/p&gt;

&lt;p&gt;The forum is also a great place to share projects you have been working on and receive valuable feedback. &lt;/p&gt;

&lt;p&gt;You don't have to be actively going through the curriculum to join the forum. There are plenty of professional developers who have joined and just want to participate in the conversations. &lt;/p&gt;

&lt;p&gt;If you are interested in joining, then please sign up on the &lt;a href="https://forum.freecodecamp.org/"&gt;freeCodeCamp forum website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also join the freeCodeCamp &lt;a href="https://discord.com/invite/KVUmVXA"&gt;discord&lt;/a&gt; or &lt;a href="https://chat.freecodecamp.org/home"&gt;chat&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-find-other-developer-communities"&gt;
  &lt;/a&gt;
  How to find other developer communities
&lt;/h2&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@brookecagle?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Brooke Cagle&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/community?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HWyWQ3vk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj7b5c54a6hz8b7d8cen.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HWyWQ3vk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj7b5c54a6hz8b7d8cen.jpg" alt="Community of people" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are plenty of forums, chats, slack channels, and meetups that you can join.&lt;/p&gt;

&lt;p&gt;Here is a list of some other suggestions that you can try out and see if it is a good fit. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/"&gt;The DEV Community&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thisdotmedia.com/women-in-tech"&gt;This Dot Labs - Women in Tech meetup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.eddiehub.org/home?r_done=1"&gt;EddieHub - Inclusive Open Source Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.womenwhocode.com/"&gt;Women Who Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codenewbie.org/"&gt;CodeNewbie&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/community/gdg"&gt;Google Developer Community&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you enjoyed this article and best of luck on your developer journey.   &lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding Speech Recognition and Building a Voice Controlled To-Do List</title>
      <author>Deon Rich</author>
      <pubDate>Wed, 03 Nov 2021 02:37:53 +0000</pubDate>
      <link>https://dev.to/zippcodder/understanding-speech-recognition-and-building-a-voice-controlled-to-do-list-3e5</link>
      <guid>https://dev.to/zippcodder/understanding-speech-recognition-and-building-a-voice-controlled-to-do-list-3e5</guid>
      <description>&lt;p&gt;One of the biggest and most important building blocks of modern technology, hands-down, is AI. Machine learning is a completly different animal when it comes to how machines process information. I consider it to be one of the key stepping stones for bridging the gap between the way machines process and understand data, and the way we humans think and take in information.&lt;/p&gt;

&lt;p&gt;It can seem rather impossible for a machine to emulate the capabilities that our human minds do, with the unique way we have of learning, understanding, mapping information and extracting context from data. This especially applies when talking about &lt;strong&gt;human language and speech&lt;/strong&gt;. But as always, technology has found a way!&lt;/p&gt;

&lt;p&gt;In this post, I thought it would be interesting for us to take a look at how modern speech recognition technology works, as examplified by technologies such as Google Assistant, Amazon's Alexa and Apple's Siri. Then lastly, we'll look at an example of how we can utilize this tech in our projects by building a &lt;strong&gt;voice controlled to-do list&lt;/strong&gt; using the &lt;strong&gt;Web Speech API&lt;/strong&gt;! 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-building-blocks-of-speech-recognition"&gt;
  &lt;/a&gt;
  The Building Blocks of Speech Recognition
&lt;/h2&gt;

&lt;p&gt;When it comes to how machines understand and process language, more specifically in the form of audio, there exsists two fundamental concepts that must be implemented for speech recognition to be possible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Automatic Speech Recognition (ASR)&lt;/strong&gt;: Though ASR is usually used as an umbrella term for the concepts behind speech recognition, it primarily refers to the process of breaking down speech in the form of audio, and applying algorithms to transcribe the peices of audio. This is the main concept behind Speech-To-Text programs, and allows a machine to know &lt;em&gt;what&lt;/em&gt; you're saying, but not the meaning behind it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Natural Language Processing (NLP)&lt;/strong&gt;: Refers to the process of understanding or emulating language. The act of constructing and or deconstructing key points in natural speech. This is the main player behind programs like Alexa, which are able to not only know &lt;em&gt;what&lt;/em&gt; you're saying, but &lt;em&gt;understand&lt;/em&gt; it based on the summary it formulates from your speech (NLU), or even respond back (NLG). The concepts used in NLP are applyed in both &lt;strong&gt;NLG (Natural Language Generation)&lt;/strong&gt; and &lt;strong&gt;NLU (Natural Language Understanding)&lt;/strong&gt;, as its used as an umbrella term for both.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both NLP and ASR are implemented using algorithms based on machine learning, neural networks and deep learning, and are heavily based on linguistics, semantics and statistics. And considering how complex human language is, this is the right approach.&lt;/p&gt;

&lt;p&gt;These technologies aren't perfect, however. Human language cannot be simply analized like any other set of data. There exists anthimeria, sarcasm, slang, implication, words with double meaning, figures of speech and a whole lot of other quirks that a machine is going to have to learn to identify over time. Not to mention, this all varies from language to language.&lt;/p&gt;

&lt;p&gt;So how do ASR and NLP acomplish what they do? Lets take a bit of a closer look..👇&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-process-of-asr"&gt;
  &lt;/a&gt;
  The Process of ASR
&lt;/h3&gt;

&lt;p&gt;The main steps behind ASR that a program will take go as follows. Note that the process may vary depending on a specific programs end goal:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The program receives an audio input.&lt;/li&gt;
&lt;li&gt;This audio is refined, as the program attempts to isolate the speech from background noise.&lt;/li&gt;
&lt;li&gt;The resulting speech is split into
&lt;a href="https://en.m.wikipedia.org/wiki/Phoneme"&gt;phonemes&lt;/a&gt;. Phonemes are small units of sounds unique to a language that are commonly used to construct words, and can be used to differentiate one word from another, or where one word may start or where another may end.&lt;/li&gt;
&lt;li&gt;The phonemes are then analysed, and the AI uses its aquired knowledge of that language to determine the most likely word that would follow based on the sequence of sounds. Once it forms words, the same probability analysis is applied to determine what a sentence might be.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-process-of-nlp"&gt;
  &lt;/a&gt;
  The Process of NLP
&lt;/h3&gt;

&lt;p&gt;The main steps behind NLP &lt;strong&gt;(or more specifically NLU)&lt;/strong&gt; that a program will take go as follows. Note that the process may vary depending on a specific programs end goal:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The input speech is separated into sentences. The resulting sentences are then split into separate words, this is called &lt;em&gt;tokenization&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The tokenized words are then analysed and given roles (nouns, verbs or adjectives) based on the surrounding sentence.&lt;/li&gt;
&lt;li&gt;Non &lt;a href="https://searchenterpriseai.techtarget.com/definition/lemmatization#:~:text=Lemmatization%20is%20the%20grouping%20together%20of%20different%20forms%20of%20the%20same%20word.&amp;amp;text=Complex%20algorithms%20use%20the%20rules,and%20writing%20by%20inflected%20forms."&gt;lemmas&lt;/a&gt; are then lemmatized, meaning they're mapped to their basic form, to signal that they pose the same meaning (broken -&amp;gt; break).&lt;/li&gt;
&lt;li&gt;Common words such as "and","or" and "a" are removed, as to isolate the words which hold the primary meaning.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://towardsdatascience.com/natural-language-processing-dependency-parsing-cf094bbbe3f7#:~:text=Dependency%20Parsing%20is%20the%20process,dependent%20that%20modifies%20the%20head."&gt;Dependency Parsing&lt;/a&gt; is then preformed, and a tree is created, associating words which depend on each other together (chocolate -&amp;gt; best -&amp;gt; icecream -&amp;gt; flavor).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/mysuperai/what-is-named-entity-recognition-ner-and-how-can-i-use-it-2b68cf6f545d"&gt;Named Entity Recognition (NER)&lt;/a&gt; is preformed, labeling each noun based on the real world thing they're meant to represent (Peter Parker -&amp;gt; fictional character).&lt;/li&gt;
&lt;li&gt;Lastly, &lt;a href="https://nlp.stanford.edu/projects/coref.shtml#:~:text=Coreference%20resolution%20is%20the%20task,question%20answering%2C%20and%20information%20extraction."&gt;Coreference Resolution&lt;/a&gt; is done on pronouns such as "it", "she", "he" and "they", in order to link them to the noun that they're refering to. Once this is done, the program can properly deduce the meaning behind the speech sample (she -&amp;gt; Lisa Ross).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course its important to remember that there is much more that goes into these proceses within a real implementation of NLP and ASR. In order to actually execute each of these steps advanced algorithms and methods are utilized, such as &lt;strong&gt;Hidden Markov Models&lt;/strong&gt;, &lt;strong&gt;Dynamic Time Warping&lt;/strong&gt;, and &lt;strong&gt;Neural Networks&lt;/strong&gt; to list a few. &lt;/p&gt;

&lt;p&gt;Anyway, now that we've got a good idea of how ASR functions, lets get our hands dirty at look at how we can use it in our code by utilizing the &lt;strong&gt;Web Speech API&lt;/strong&gt;, and building a &lt;strong&gt;Voice Controlled To-Do List&lt;/strong&gt;! 😁&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The Web Speech API is still in an experimental phase. It may not support a given browser and its implementation is still incomplete. That being said it should be used in personal projects only. There already exists stable STT APIs out there such as those listed &lt;a href="https://nordicapis.com/5-best-speech-to-text-apis/"&gt;here&lt;/a&gt;, but im going with the Web Speech API as its extreamly simple, easily accessable and suffices our needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-voice-controlled-todo-list"&gt;
  &lt;/a&gt;
  Building a Voice Controlled To-Do List
&lt;/h2&gt;

&lt;p&gt;Before I walk you through our example, let me first show you the finished product. Here however, the embed isn't allowed media access, which breaks its functionality. If you want to see how it functions you can view it &lt;a href="https://codepen.io/ZippCodder/full/wvqrBOe"&gt;here&lt;/a&gt;. Anyway, heres what it will look like:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZippCodder/embed/wvqrBOe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The functionality is pretty simple. Once the switch is flipped, the speech recognition service will start listening for speech. Our program will first expect the user to give a title, and once thats given it will then expect a description. After the description is spoken, a new task will be added to the UI, containing the title and description the user entered. The state of the program (weather its active, or what peice of information its expecting next) will be expressed in the message above the switch.&lt;/p&gt;

&lt;p&gt;Simple, right? Lets go over the code..&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-speech-recognition-service"&gt;
  &lt;/a&gt;
  Using the Speech Recognition Service
&lt;/h3&gt;

&lt;p&gt;First, lets cover the most important step, which is starting the speech recognition service through the Web Speech API. When I say "speech recognition service", im refering to the default speech recognition service build into Chrome. Our audio will be captured and sent to a server (the speech recognition service) where it will be processed, and then sent back. &lt;/p&gt;

&lt;p&gt;First, we need to establish a connection with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// Setup recognition service&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webkitSpeechRecognition&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;SpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;recog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webkitSpeechRecognition&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;SpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;grammarList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webkitSpeechGrammarList&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;SpeechGrammarList&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
  &lt;span class="nx"&gt;recog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grammars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;grammarList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;recog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Alert user if API isnt supported&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sorry, your browser dosen't support the WebSpeech API!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here all we do is first ensure that the API exists within the &lt;code&gt;window&lt;/code&gt; object. Once thats done we instantiate a new &lt;code&gt;SpeechRecognition&lt;/code&gt; object, which is the interface for interacting with the speech recognition service.&lt;/p&gt;

&lt;p&gt;Its primary events and methods are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;start()&lt;/code&gt;: Begin listening for speech.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;stop()&lt;/code&gt;: Stop listening for speech.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;abort()&lt;/code&gt;: Stop listing for speech without returning result.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;result&lt;/code&gt;:  Fires when a result is returned from the recognition service. The result is passed to the callback.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;end&lt;/code&gt;: Fires when the speech recognition is stopped.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;start&lt;/code&gt;: Fires when the speech recognition service is started.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;speechstart&lt;/code&gt;: Fires when speech is detected.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;speechend&lt;/code&gt;: Fires when speech is no longer detected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then I attach a &lt;code&gt;SpeechGrammarList&lt;/code&gt; to it via &lt;code&gt;SpeechRecognition.grammars&lt;/code&gt;. &lt;code&gt;SpeechGrammarList&lt;/code&gt; is an object which is meant to hold a list of grammars. A grammar (though through this API is given as a string) is a special file that is sent to the speech recognition service, which gives it the grammar or key words or phrases that it should be listening for. Through grammars you're also able to tell it which phrases it should listen for more than others, by specifying their "weight".&lt;/p&gt;

&lt;p&gt;Grammars are typically specified using the &lt;a href="https://en.m.wikipedia.org/wiki/Speech_Recognition_Grammar_Specification"&gt;SRGS&lt;/a&gt;(Speech Recognition Grammar Specification) format, or the &lt;a href="https://www.ibm.com/docs/en/wvs/6.1.1?topic=editor-what-is-jsgf"&gt;JSGF&lt;/a&gt;(Java Speech Grammar Format). However, at the moment this API dosen't support grammars very well, as they have little effect on the results of the speech recognizer. Thus, I give it an empty &lt;code&gt;SpeechGrammarList&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;After that, we set the language the recognizer should listen for via the &lt;code&gt;SpeechRecognizer.lang&lt;/code&gt; property, which in this case is english.&lt;/p&gt;

&lt;p&gt;And thats really all there is to it to get up and running. Now we just need to fill in the gaps we need to integrate it into our to-do list!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it All Together
&lt;/h3&gt;

&lt;p&gt;Because the UI isn't as important i'll only be going over the javascript, but you can give it a closer look &lt;a href="https://codepen.io/ZippCodder/pen/mdMqgOv"&gt;here&lt;/a&gt; or in the embed I showed earlier. You can of course make the UI look however you want if you intend on following along. &lt;/p&gt;

&lt;p&gt;The main idea is that we simply have a main button to toggle the speech recognition service, a message to indicate the state of the program (active, listening, or what info its expecting), and an area where the resulting tasks will appear. &lt;/p&gt;

&lt;p&gt;To wrap up, i'll breifly go over each segment of functionality.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Only proceed if API is Supported...&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webkitSpeechRecognition&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;SpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="cm"&gt;/*
"active" will be used to keep track of weather 
or not the service is active.

"phase" will be used to keep track of what 
information is currently being 
expected (either the title or description).

"task" is simply a container for our information 
when results are received.
*/&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;phase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="c1"&gt;//________________________________________&lt;/span&gt;

&lt;span class="cm"&gt;/*
Listen for when the switch is toggled. 
If the service is inactive, start the service 
and set the phase to "title" since 
this is the first peice of info once 
the service is listening. 
If the service is active, do the opposite.
*/&lt;/span&gt;

&lt;span class="c1"&gt;// select message element above switch&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.container__message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// select toggle switch&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.container__button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;recog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;phase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;waiting for title...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;recog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;phase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Flip switch to toggle speech recognition&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// ________________________________________&lt;/span&gt;

&lt;span class="cm"&gt;/*
"addTask()" will be after both the title and description are 
spoken. This will hide the placeholder 
and fill a copy of the tasks template with the 
respective information. It'll then be 
appended to the tasks container
*/&lt;/span&gt;

&lt;span class="c1"&gt;// Select container where tasks will appear, its placeholder and the template for the tasks.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.container__tasks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;placeholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.container__tasks__placeholder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#task-template&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Function for appending tasks&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addTask&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;summary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//________________________________________&lt;/span&gt;

&lt;span class="cm"&gt;/* Setting up the recognition service, 
as already explained previously */&lt;/span&gt;

 &lt;span class="c1"&gt;// Setup recognition service&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;recog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webkitSpeechRecognition&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;SpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;grammarList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webkitSpeechGrammarList&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;SpeechGrammarList&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
  &lt;span class="nx"&gt;recog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grammars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;grammarList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;recog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//________________________________________&lt;/span&gt;

&lt;span class="cm"&gt;/* Inform user that service is listening when speech s detected */&lt;/span&gt;

  &lt;span class="c1"&gt;// Let user know recognition service is listening&lt;/span&gt;
  &lt;span class="nx"&gt;recog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;speechstart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listening...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;//________________________________________&lt;/span&gt;

&lt;span class="cm"&gt;/*  
Register an event listener for when the result comes in, 
which will be each time the user stops 
speaking and speech was recognized. 

In the callback, if the phase is currently 
"title" (the program is waiting for the title) 
add the title to the "task" object and 
switch phase to "desc".

If the the phase is currently "desc" 
(we already have the title, and are waiting for the description) 
add the description to the "task" object, call "addTask()" 
and inform the user that the task was successfully added.
*/&lt;/span&gt;

  &lt;span class="c1"&gt;// Determine what to do with result once it comes in&lt;/span&gt;
  &lt;span class="nx"&gt;recog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;transcript&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;waiting for description...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;phase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;task added!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;phase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;waiting for title...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;addTask&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;//________________________________________&lt;/span&gt;

  &lt;span class="c1"&gt;// Keep service open by restarting it, since it ends after each speech segment it receives.&lt;/span&gt;
  &lt;span class="nx"&gt;recog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;recog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// Cancel service if error occurs&lt;/span&gt;
  &lt;span class="nx"&gt;recog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;recog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Alert user if API isnt supported&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sorry, your browser dosen't support the WebSpeech API!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And there you have it folks! An introduction to how ASR works, and a small example of how you can implement it into your projects. If you want to dive deeper into ASR, NLP or the Web Speech API, you should check out these resources below..👇&lt;/p&gt;

&lt;p&gt;ASR: &lt;a href="https://verbit.ai/asr-and-the-next-generation-of-transcription/"&gt;https://verbit.ai/asr-and-the-next-generation-of-transcription/&lt;/a&gt;&lt;br&gt;
NLP: &lt;a href="https://medium.com/@ritidass29/the-essential-guide-to-how-nlp-works-4d3bb23faf76"&gt;https://medium.com/@ritidass29/the-essential-guide-to-how-nlp-works-4d3bb23faf76&lt;/a&gt;&lt;br&gt;
Web Speech API: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API"&gt;https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;Thanks for reading..😊!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>speechrecognition</category>
    </item>
    <item>
      <title>The Joy Of Empowering Others</title>
      <author>Arit Amana</author>
      <pubDate>Tue, 02 Nov 2021 23:59:22 +0000</pubDate>
      <link>https://dev.to/aritdeveloper/the-joy-of-empowering-others-3kbh</link>
      <guid>https://dev.to/aritdeveloper/the-joy-of-empowering-others-3kbh</guid>
      <description>&lt;p&gt;I’ve had the privilege of speaking at a few events this year. I linked a couple of them below.&lt;/p&gt;

&lt;p&gt;I don’t think I can ever tire of encouraging those who wish to break into software development! Several people who’ve listened to these talks have reached out, sharing how they related to my journey, and the resulting motivation they received. When it comes to tech: the more, the merrier !&lt;/p&gt;

&lt;p&gt;🎙 ThunderNerds - &lt;a href="https://www.thundernerds.io/2021/05/empowering-women-in-tech-with-arit-amana/"&gt;Empowering Women In Tech&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎙 CodeNewbie - &lt;a href="https://www.codenewbie.org/podcast/what-it-s-like-to-break-into-tech-as-a-mother/"&gt;Breaking Into Tech As A Mother&lt;/a&gt;&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z23UI1Yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1202427288811397120/r9CWK7Wg_normal.jpg" alt="Porfirio profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Porfirio
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @burgostampadad
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/aritdeveloper"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/aritdeveloper"&gt;@aritdeveloper&lt;/a&gt; &lt;a href="https://twitter.com/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt; I am a 35 year old father and could relate with &lt;a href="https://twitter.com/aritdeveloper"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/aritdeveloper"&gt;@aritdeveloper&lt;/a&gt; so much. This podcast was very refreshing and put a fire in my butt to not give up and continue pursuing this career. Thank you!
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:32 PM - 21 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1407043780813938693" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1407043780813938693" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1407043780813938693" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--kFr3KO46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1151698346546827266/B8KXJG49_normal.jpg" alt="Kelsi Flatland (she/her) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kelsi Flatland (she/her)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @msflatland
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      In particular, I appreciated &lt;a href="https://twitter.com/aritdeveloper"&gt;@aritdeveloper&lt;/a&gt; 's talk and advice on getting started in open source projects. Her specific suggestions for your first contribution are super helpful, such as documenting your local setup and then updating the installation docs for clarity!
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:01 PM - 10 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1403064905771614208" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1403064905771614208" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1403064905771614208" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h3&gt;
  &lt;a href="#its-a-wrap"&gt;
  &lt;/a&gt;
  It's A Wrap!
&lt;/h3&gt;

&lt;p&gt;Whew! We wrapped Cycle 2 of my nonprofit &lt;a href="https://ourtimefortech.org"&gt;Our Time For Tech&lt;/a&gt; up at the end of May. I am so proud of our 7 fellows and their accomplishments!&lt;/p&gt;

&lt;p&gt;Our CodeCollab fellows completed the MVP of their ShiftWork app, and &lt;a href="https://us02web.zoom.us/rec/share/2iQMA6qbRTKoXz25phHeiXYOlq30OpVYAVSnquhBR4V_GC2ryUdkSNEOVIEpg1xq.S2rtluXeMkBwfpMS"&gt;demoed it for the tech community&lt;/a&gt; (password: XJE*PnA9).&lt;/p&gt;

&lt;p&gt;Our BetterPrep fellows landed their first-ever dev jobs 🎉 or built skills and fortitude to better weather their job searches.&lt;/p&gt;

&lt;p&gt;I’m currently retro-ing the Cycle 2 experience and using what I learn to plan for 2022. If you know anyone that may be interested in what we offer, invite them to join the Arit Developer newsletter so they can stay updated on future programs.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;To enjoy content like this in your inbox, subscribe to the &lt;strong&gt;Arit Developer&lt;/strong&gt; newsletter &lt;a href="https://news.arit.dev"&gt;HERE&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>career</category>
    </item>
    <item>
      <title>Next.js Portfolio Template</title>
      <author>Lasha Kakabadze</author>
      <pubDate>Tue, 02 Nov 2021 23:29:59 +0000</pubDate>
      <link>https://dev.to/adrinlol/nextjs-portfolio-template-gde</link>
      <guid>https://dev.to/adrinlol/nextjs-portfolio-template-gde</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;If you're a developer, it's important for you to have a personal portfolio website – especially when you're applying for jobs.&lt;/p&gt;

&lt;p&gt;After a few months of development, I have finally put together a multi-themed website that will greatly increase your chances of getting attention from recruiters.&lt;/p&gt;

&lt;p&gt;Here is a link to my portfolio - &lt;a href="https://www.adrinlol.com/"&gt;https://www.adrinlol.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can download the source code by going here - &lt;a href="https://adrinlol.gumroad.com/l/cHsGL"&gt;https://adrinlol.gumroad.com/l/cHsGL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will find a detailed documentation inside the &lt;code&gt;README&lt;/code&gt; fille on how to setup, make changes and run this website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-project"&gt;
  &lt;/a&gt;
  About the project
&lt;/h2&gt;

&lt;p&gt;This template has several API calls, that is handled by the SWR (stale-while-revalidate), the list includes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developers.medium.com/"&gt;Medium's API&lt;/a&gt; to display my personal articles in this project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.spotify.com/"&gt;Spotify's API&lt;/a&gt; to show the current track as well as display my top 20 songs of the week. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.github.com/en/rest"&gt;GitHub's API&lt;/a&gt; to highlight most popular of my open-source projects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#technology-stack"&gt;
  &lt;/a&gt;
  Technology stack
&lt;/h2&gt;

&lt;p&gt;As for the technologies, here is a full list of libraries I'm using for this project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Next.js&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;styled-components&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;swr&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;react-transition-group&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lighthouse-results"&gt;
  &lt;/a&gt;
  Lighthouse results
&lt;/h2&gt;

&lt;p&gt;It should come with no surprise that Next.js coupled with SWR is blazing fast, and the results are no surprise.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S996BjVf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nc6yr60wfdcyyawmdg2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S996BjVf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nc6yr60wfdcyyawmdg2.PNG" alt="Image description" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Layer 1 vs. Layer 2</title>
      <author>Waylon Jepsen</author>
      <pubDate>Tue, 02 Nov 2021 23:01:25 +0000</pubDate>
      <link>https://dev.to/0xjepsen/layer-1-vs-layer-2-15kf</link>
      <guid>https://dev.to/0xjepsen/layer-1-vs-layer-2-15kf</guid>
      <description>&lt;p&gt;If you are learning about web3, the chances are that you have heard different projects referred to as being a layer-one project or a layer-two project. Hearing these terms without any prior knowledge or context can be confusing. In this post, I'll explain the differences between layer one and layer two networks and provide examples of both.&lt;/p&gt;

&lt;p&gt;Disclaimer: This is just a brief overview of the mentioned topics and is in no way a complete piece of work on the topic. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#layer-1"&gt;
  &lt;/a&gt;
  Layer 1
&lt;/h2&gt;

&lt;p&gt;A layer one network is a network that acts as infrastructure for other projects to build on top of. A public decentralized layer one network's primary characteristic is its consensus mechanism. Different consensus mechanisms provide different levels of speed, security, and throughput. Some examples of layer one networks and their consensus mechanisms are given below. Two common categories of consensus mechanisms are proof of work (PoW) and proof of stake (PoS). Note that these are just two categories and that there are many unique PoS consensus mechanisms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bitcoin.org/en/"&gt;Bitcoin&lt;/a&gt; - Consensus: Proof of work, Native Token: BTC &lt;br&gt;
&lt;a href="https://ethereum.org/en/"&gt;Ethereum&lt;/a&gt; - Consensus: Proof of work (moving to proof of stake in Eth2), Native Token: Eth &lt;br&gt;
&lt;a href="https://www.algorand.com/"&gt;Algorand&lt;/a&gt; - Consensus: Proof of Stake, Native Token: Alg&lt;br&gt;
&lt;a href="https://hedera.com/"&gt;Hedera&lt;/a&gt; - Consensus: Proof of Stake, Native Token: hbar &lt;br&gt;
&lt;a href="https://cardano.org/"&gt;Cardano&lt;/a&gt; - Consensus: Proof of Stake, Native Token: Ada &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#qualities-of-layer-one-networks"&gt;
  &lt;/a&gt;
  Qualities of Layer one networks
&lt;/h3&gt;

&lt;p&gt;All layer one networks have a native token that serves as network fuel within the network. You use a network's native token to pay for network services like transactions, file services, and smart contract services. Note that not all layer one networks support the same array of services, although all support transactions. When comparing layer one networks, it is essential to learn about its consensus mechanism and the pros and or con's that it provides the network.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#layer-two"&gt;
  &lt;/a&gt;
  Layer Two
&lt;/h2&gt;

&lt;p&gt;Layer 2 networks extend the functionality of their layer 1 counterpart. This can be to increase the layer 1 network’s performance, reduce transaction fees, or increase programmability. For example, on Ethereum, where gas fees can be highly variable and transaction times slow, it is increasingly common for application developers to provide its user the ability to interact with a layer 2 network, like Polygon, to decrease their user’s fees and transaction latency. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#qualities-of-layer-two-networks"&gt;
  &lt;/a&gt;
  Qualities of Layer Two Networks
&lt;/h3&gt;

&lt;p&gt;Similar to how Layer 1 networks have different approaches to consensus, each layer 2 network will implement a scaling solution, or means to map transactions back to its layer 1.  For instance, a commonly discussed layer 2 scaling solution is the implementation of zero-knowledge rollups. The idea is that a side-chain performs transaction ordering and processing and submits mathematical proof that they have processed the transactions fairly. Some examples of layer two scaling solutions are the &lt;a href="https://lightning.network/"&gt;Lightning Network&lt;/a&gt;, &lt;a href="https://polygon.technology/"&gt;Polygon&lt;/a&gt;, and &lt;a href="https://starkware.co/product/starknet/"&gt;Starknet&lt;/a&gt;. The majority of scaling layer two solutions depend on cryptographic systems. For resources on the cryptography behind zero knowledge proofs I recommend this &lt;a href="https://www.di.ens.fr/~nitulesc/files/Survey-SNARKs.pdfhttps://www.di.ens.fr/~nitulesc/files/Survey-SNARKs.pdf"&gt;resource&lt;/a&gt;. The watered down version of what is happening, is that a mathematical proof is created by a verifier that some knowledge is correct. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://lightning.network/"&gt;Lightning Network&lt;/a&gt; - &lt;a href="https://lightning.network/lightning-network-technical-summary.pdf"&gt;2-party multi-signature channels&lt;/a&gt;&lt;br&gt;
&lt;a href="https://starkware.co/product/starknet/"&gt;Starknet&lt;/a&gt; - &lt;a href="https://www.di.ens.fr/~nitulesc/files/Survey-SNARKs.pdf"&gt;Zero Knowledge Rollups&lt;/a&gt;&lt;br&gt;
&lt;a href="https://polygon.technology/"&gt;Polygon&lt;/a&gt; - Side Chains &lt;a href="https://docs.ethhub.io/ethereum-roadmap/layer-2-scaling/optimistic_rollups/"&gt;Optimistic Rollups&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that only layer one 1 with scaling limitations needs scaling solutions. Networks like Algorand and Hedera with high native speeds for scale don't need to scale with layer-2s because they scale at the network layer.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>distributedsystems</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>How to create an Elementor Parallax effect?</title>
      <author>CodeWatchers</author>
      <pubDate>Tue, 02 Nov 2021 23:01:22 +0000</pubDate>
      <link>https://dev.to/codewatchers_en/how-to-create-an-elementor-parallax-effect-3men</link>
      <guid>https://dev.to/codewatchers_en/how-to-create-an-elementor-parallax-effect-3men</guid>
      <description>&lt;p&gt;Nowadays, there are numerous excellent web sites out on the net with awful optical phenomenon scrolling animations wherever the background moves quicker than the foreground parts to convey the depth. From construction firms and promoting agencies, everybody uses this facility to form portfolios and acquire a lot of public attention.&lt;/p&gt;

&lt;p&gt;The parallax impact is beyond any doubt spectacular, and it can really make your website stand out from the gang and lend it a knowledgeable look. And you'll be able to add a parallax effect to your WordPress website using &lt;a href="https://codewatchers.com/en/blog/is-elementor-the-best-free-page-builder-for-wordpress"&gt;Elementor&lt;/a&gt; while not having plenty of professional knowledge?&lt;/p&gt;

&lt;p&gt;Parallax is genuinely an integral feature in Elementor Pro, you can create a parallax effect in the premium version of Elementor, and we will talk about it today. Also, you can create beautiful pages with this feature on the free version of Elementor.&lt;/p&gt;

&lt;p&gt;The parallax privileges are that it looks really cool, and it can also help with user betrothal! If you have the opportunity to do an A/B test, checking if adding a primary parallax effect on your webpage can decrease your bounce rate and boost average time on the page - worth it. The strategic use of parallax is proven to direct visitors right to your call to action. The parallax effect's motion draws the eye, which means a carefully placed button or form can boost your overall conversion rate.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#parallax-effect-on-an-element" class="anchor"&gt;
  &lt;/a&gt;
  Parallax Effect on an Element
&lt;/h3&gt;

&lt;p&gt;Design parallax effects on your webpage has never been more manageable. There's no demand for specialized WordPress themes that compatible with parallax. By Elementor, you can create any kind of effect only by drag and drop webpage builder.&lt;/p&gt;

&lt;p&gt;Decorating your online shop or designing engaging blog layouts, or creating excellent landing pages - Elementor got your back.&lt;/p&gt;

&lt;p&gt;Just follow the steps in this article and start creating your brand new parallax website.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-page-with-parallax-in-elementor-pro" class="anchor"&gt;
  &lt;/a&gt;
  A Page With Parallax in Elementor Pro
&lt;/h3&gt;

&lt;p&gt;So let's work on bringing parallax effects to our web pages. First, select "Elementor Full Width" and switch to the Advanced tab. Of course, there must be a few sections on your page because the parallax effect's beauty cannot be felt on a blank page. We have a placeholder section, and you can use any you need.&lt;/p&gt;

&lt;p&gt;To set the effect, go to Advanced &amp;gt; Motion Effects, and turn Scrolling Effects on. Below, you'll see several options for stimulating motion effects that depend on scrolling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TtmBQX6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2020/12/A-Page-With-Parallax-in-Elementor-Pro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TtmBQX6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2020/12/A-Page-With-Parallax-in-Elementor-Pro.png" alt="" width="374" height="1024"&gt;&lt;/a&gt;#### Vertical&lt;/p&gt;

&lt;p&gt;For instance, I'm creating the second section helix at a different speed than the hero compartment. Remember, you have additional settings that you can work on that are applicable for any scrolling effect. In vertical scrolling, you can choose for the Element to place up or down, change the rate visible, and make the impact relative to the viewport or the entire page.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#horizontal" class="anchor"&gt;
  &lt;/a&gt;
  Horizontal
&lt;/h4&gt;

&lt;p&gt;Like we did with vertical scrolling, we can move an image or section horizontally through the display. Your choices here are left or right, speed, and percent visible from the bottom and top.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#transparency" class="anchor"&gt;
  &lt;/a&gt;
  Transparency
&lt;/h4&gt;

&lt;p&gt;You can get a charming fade look using the transparency motion effect. There's also an opening animation right under this area that performs the same thing. Still, the transparency motion impact offers you tons of management over, however, and once it appears. For this option, you'll be able to decide if you wish it to fade in, change state, fade out so in, or fade in and then out. You'll be able to additionally set the full transparency level from one to 10.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#blur" class="anchor"&gt;
  &lt;/a&gt;
  Blur
&lt;/h4&gt;

&lt;p&gt;The Blur motion effect permits you to possess pictures that start indistinct and are available into focus sort of a depth of field shot, begin within the direction and begin to blur as you scroll past it. This looks very cool. Like with transparency effect, blur lets you choose options like fade in or out with different styles.&lt;/p&gt;

&lt;p&gt;These are the immediate effects you'll be looking at. Still, there's plenty more to consider, such as rotation and scale animations, plus many style options, mouse effects, and other impressive effects that will help your website elements pop!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1-add-parallax-on-a-chosen-element" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: Add parallax on a chosen Element
&lt;/h4&gt;

&lt;p&gt;To add some magical parallax effect to your Elementor website, the first thing you need to do is pick an element you want to add it to. This could be anything, such as pictures, text, video, etc.&lt;/p&gt;

&lt;p&gt;Let's start by clicking on the widget and moving to the advanced tab section.&lt;/p&gt;

&lt;p&gt;#### Step 2: Under Motion and Switch to Scrolling Effects&lt;/p&gt;

&lt;p&gt;Once you are on the advanced tab, click the Motion Effect dropdown and then set Scrolling Effects to On. Currently, you'll be able to opt for any of the half-dozen animations that may bring your website to life.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w1jBUWza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2020/12/Under-Motion-Effect-Switch-to-Scrolling-Effect.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w1jBUWza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2020/12/Under-Motion-Effect-Switch-to-Scrolling-Effect.png" alt="" width="602" height="680"&gt;&lt;/a&gt;#### Step 3: change the Animation in step with Your Needs.&lt;/p&gt;

&lt;p&gt;You can change and tweak each impact to induce it just right. Press the pencil icon, then a window will open up with controls.&lt;/p&gt;

&lt;p&gt;You can adjust things like the direction, speed, and viewport for {every} effect, which controls once the Animation begins and ends.&lt;/p&gt;

&lt;p&gt;Besides, you can outline on the Viewport scale what a part of the scroll your effect will start and what role it'll end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codewatchers.com/en/blog/how-to-create-an-elementor-parallax-effect?utm_campaign=content-trimming&amp;amp;utm_source=dev.to&amp;amp;utm_medium=link"&gt;Read The Full Tutorial.&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
