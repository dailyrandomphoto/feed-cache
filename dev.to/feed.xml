<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Can you solve this interview problem?</title>
      <author>Shuvo</author>
      <pubDate>Thu, 04 Nov 2021 05:29:04 +0000</pubDate>
      <link>https://dev.to/0shuvo0/can-you-solve-this-interview-problem-4gaa</link>
      <guid>https://dev.to/0shuvo0/can-you-solve-this-interview-problem-4gaa</guid>
      <description>&lt;p&gt;So few days ago I applied to a MNC and I had some interesting problems to solve in given amount of time. So let me share one with you, see if you can solve this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem-description"&gt;
  &lt;/a&gt;
  Problem Description
&lt;/h2&gt;

&lt;p&gt;So let's say we have a URL something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://dev.to/0shuvo0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now they have converted the url to a base64 string.&lt;br&gt;
So the URL have become something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aHR0cHM6Ly9kZXYudG8vMHNodXZvMA==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now what they did was split the sting to multiple parts and convert into an array&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aHR0cH&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M6Ly9kZX&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YudG8vMHN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;odXZvMA==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But of course the madnesses doesn't stop here. Then the shuffled the array so it became something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M6Ly9kZX&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aHR0cH&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;odXZvMA==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YudG8vMHN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And lastly they have converted that array to a string.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#so-here-is-your-input"&gt;
  &lt;/a&gt;
  So here is your input
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[ '0LzFqZTFt', '9jb21tZW5', '8vMHNodXZvMC', '6Ly9kZXYudG', 'aHR0cHM' ]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Use the input to find the original URL programmatically&lt;/strong&gt; &lt;em&gt;you have 45 Minutes to do it.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#useful-javascript-functions-that-can-help-you"&gt;
  &lt;/a&gt;
  Useful JavaScript functions that can help you
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can convert your array to sting by calling &lt;strong&gt;join&lt;/strong&gt; method on it. Eg.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;urlStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;You can use &lt;strong&gt;atob&lt;/strong&gt; function to decode the base64 string.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;decoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urlStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#now-go-and-and-see-if-you-can-solve-this-best-of-luck"&gt;
  &lt;/a&gt;
  Now go and and see if you can solve this. Best of luck üëç
&lt;/h2&gt;


&lt;div class="ltag__user ltag__user__id__728097"&gt;
  
    .ltag__user__id__728097 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/0shuvo0" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZgMNup---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j0_lvM9_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/728097/0f6e1da9-f243-42d0-b446-301ac6ea6412.jpeg" alt="0shuvo0 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/0shuvo0"&gt;Shuvo&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/0shuvo0"&gt;Frontend Developer and YouTuber.
Channel link: https://www.youtube.com/c/AngleBrace&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#was-it-useful-support-me-on-patreon"&gt;
  &lt;/a&gt;
  Was it useful? Support me on Patreon
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/0shuvo0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lZ1ZPOAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twjftovyevtqht7v3ley.png" alt="Patreon Logo" width="554" height="554"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>discuss</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Portfolio Web App Development using React, Typescript and Chakra UI</title>
      <author>Balram Rathore</author>
      <pubDate>Thu, 04 Nov 2021 05:04:45 +0000</pubDate>
      <link>https://dev.to/devstack06/portfolio-web-app-development-using-react-typescript-and-chakra-ui-99l</link>
      <guid>https://dev.to/devstack06/portfolio-web-app-development-using-react-typescript-and-chakra-ui-99l</guid>
      <description>&lt;p&gt;Hi guys, I have started a new video series for portfolio web app development using #react #ChakraUI and #Typescript. I will be going to cover the storybook too. If anyone is interested in this series, they can find the links below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Introduction video: &lt;a href="https://youtu.be/-dxHHNgO1dg"&gt;https://youtu.be/-dxHHNgO1dg&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Typescript overview video: &lt;a href="https://youtu.be/_Kha2yBztWI"&gt;https://youtu.be/_Kha2yBztWI&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qQF_RUT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exc6xj9e3mbbeoejx3me.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qQF_RUT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exc6xj9e3mbbeoejx3me.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>Free Certification Courses for Developers üî•</title>
      <author>Savio Martin</author>
      <pubDate>Thu, 04 Nov 2021 03:20:23 +0000</pubDate>
      <link>https://dev.to/saviomartin/free-certification-courses-for-developers-3378</link>
      <guid>https://dev.to/saviomartin/free-certification-courses-for-developers-3378</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-folks"&gt;
  &lt;/a&gt;
  Hello Folks üëã
&lt;/h2&gt;

&lt;p&gt;This is Savio here. 14 year old, building useful products. Helping people with tweets and blogs on web development, frotend tips, and interesting resources.&lt;/p&gt;

&lt;p&gt;Today, I'd like to share 7 Free Certification Courses for Developers Let's goooo üöÄ&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-freecodecamp"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.freecodecamp.org/learn/"&gt;FreeCodeCamp&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R00d_IcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4no7ov5d95xyq6f9ry1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R00d_IcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4no7ov5d95xyq6f9ry1.png" alt="FreeCodeCamp" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;FreeCodeCamp is one of the most popular sites offering free certification. FreeCodeCamp is a non-profit organization that consists of an interactive learning web platform, an online community forum, chat rooms, support etc. FreeCodeCamp is the best place to learn code free and earn certification.&lt;/p&gt;

&lt;p&gt;10 certifications available: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Responsive Web Design&lt;/li&gt;
&lt;li&gt;JavaScript Algorithms and Data Structures&lt;/li&gt;
&lt;li&gt;Front End Development&lt;/li&gt;
&lt;li&gt;Data Visualization&lt;/li&gt;
&lt;li&gt;Backend Development&lt;/li&gt;
&lt;li&gt;Quality Assurance&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Data Analysis with Python&lt;/li&gt;
&lt;li&gt;Information Security&lt;/li&gt;
&lt;li&gt;Machine Learning&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-fundamentals-of-digital-marketing-by-google"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://learndigital.withgoogle.com/digitalgarage/course/digital-marketing"&gt;Fundamentals of digital marketing by Google&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Me5e2H0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gglcpxbllz3svtpdhtob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Me5e2H0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gglcpxbllz3svtpdhtob.png" alt="Fundamentals of digital marketing by Google" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;There are 26 modules to explore, all created by Google trainers, packed full of practical exercises and real-world examples to help you turn knowledge into action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-cognitive-class-by-ibm"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://cognitiveclass.ai/learn"&gt;Cognitive Class by IBM&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXjVwlqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5melniqyazhsmbtkjw9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXjVwlqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5melniqyazhsmbtkjw9v.png" alt="Cognitive Class by IBM" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn leading-edge technologies like Blockchain, Data Science, AI, Cloud, Serverless, Docker, Kubernetes and more... with certification fully free of charge. Build your career with skills employers seek.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-test-automation-university"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://testautomationu.applitools.com/"&gt;Test Automation University&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FaHwzoiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6w8wttjes9zgciwmhv43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FaHwzoiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6w8wttjes9zgciwmhv43.png" alt="Test Automation University" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Free test automation courses with videos, transcripts, quizzes, credits, rank badges, and certificates! everything free thought by experts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-programming-essentials-in-python-by-cisco"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://www.netacad.com/courses/programming/pcap-programming-essentials-python"&gt;Programming Essentials in Python by Cisco&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ue0vvuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a0c6mizy2imf38t0hn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ue0vvuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a0c6mizy2imf38t0hn5.png" alt="Programming Essentials in Python by Cisco" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;75 hours long course led by leading developers teching Python, the versatile programming language completely free of charge and with certification.&lt;/p&gt;

&lt;p&gt;Course includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;8 Modules&lt;/li&gt;
&lt;li&gt;Practice Labs&lt;/li&gt;
&lt;li&gt;Module Quizzes and Module Tests&lt;/li&gt;
&lt;li&gt;Summary Tests&lt;/li&gt;
&lt;li&gt;Final Exam&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-python-training-course"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://data-flair.training/python-course/"&gt;Python Training Course&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t36QkIVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxj4wk140ilavjd7pt6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t36QkIVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxj4wk140ilavjd7pt6.png" alt="Python Training Course" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A perfect blend of in-depth Python theoretical knowledge and strong practical skills, this Free course for Python introduces real-time Python projects  to give you a headstart in learning Python and enables you to bag top Python jobs in the industry.&lt;/p&gt;

&lt;p&gt;Course includes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;5 real-time projects and 20 complementary projects&lt;/li&gt;
&lt;li&gt;100+ hrs of study material, practical codes, quizzes, interview guides&lt;/li&gt;
&lt;li&gt;case studies to gain expertise&lt;/li&gt;
&lt;li&gt;certificate&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-learn-by-kaggle"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://www.kaggle.com/learn"&gt;Learn by Kaggle&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JuKNVdGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opxxs3mrbpbxhsbbrxrh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JuKNVdGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opxxs3mrbpbxhsbbrxrh.png" alt="Learn by Kaggle" width="880" height="495"&gt;&lt;/a&gt;   &lt;/p&gt;

&lt;p&gt;Gain the skills you need to do independent data science projects. They pare down complex topics to their key practical components, so you gain usable skills in a few hours (instead of weeks or months). The courses are free, and could earn certificates.&lt;/p&gt;

&lt;p&gt;Certifications available: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Pandas&lt;/li&gt;
&lt;li&gt;Data Visualization&lt;/li&gt;
&lt;li&gt;Feature Engineering&lt;/li&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;Deep Learning&lt;/li&gt;
&lt;li&gt;Computer Vision&lt;/li&gt;
&lt;li&gt;Time Series&lt;/li&gt;
&lt;li&gt;Data Cleaning&lt;/li&gt;
&lt;li&gt;AI Ethics&lt;/li&gt;
&lt;li&gt;Geospatial Analysis&lt;/li&gt;
&lt;li&gt;Machine Learning&lt;/li&gt;
&lt;li&gt;Natural Language Processing&lt;/li&gt;
&lt;li&gt;Intro Intro to Game AI&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  üëÄ Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Yeah, that's a wrap. Hope you enjoyed the article. Do not hesitate to share your feedback. I am on Twitter &lt;a href="https://twitter.com/SavioMartin7"&gt;@saviomartin7&lt;/a&gt;. Give a follow!&lt;/p&gt;

&lt;p&gt;Follow me on Github &lt;a href="https://github.com/saviomartin"&gt;@saviomartin&lt;/a&gt;, Don't miss my amazing projects! üíØ&lt;/p&gt;

&lt;p&gt;Feedbacks are greatly appreciated! üôå Have an amazing day!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  üåé Lets connect
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://github.com/saviomartin"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/saviomartin7"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>opensource</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CSS em and rem units #CSSforJS</title>
      <author>Zach Snoek</author>
      <pubDate>Thu, 04 Nov 2021 03:03:30 +0000</pubDate>
      <link>https://dev.to/zachsnoek/css-em-and-rem-units-cssforjs-5697</link>
      <guid>https://dev.to/zachsnoek/css-em-and-rem-units-cssforjs-5697</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This is my first post in a series about topics covered in Josh Comeau's &lt;a href="https://css-for-js.dev/"&gt;CSS for JavaScript Developers&lt;/a&gt; course. These posts will be brief, polished versions of my notes. I'll write about new things I learned or deepen my understanding of something already familiar to me.&lt;/p&gt;

&lt;p&gt;In this post, we'll explore the &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; units in CSS, covered in module 0 of the course.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ems"&gt;
  &lt;/a&gt;
  Ems
&lt;/h2&gt;

&lt;p&gt;An &lt;code&gt;em&lt;/code&gt; is a unit relative to the &lt;code&gt;font-size&lt;/code&gt; of the current element. When used for the &lt;code&gt;font-size&lt;/code&gt; property, an &lt;code&gt;em&lt;/code&gt; is relative to the &lt;code&gt;font-size&lt;/code&gt; of the &lt;em&gt;parent&lt;/em&gt; element.&lt;/p&gt;

&lt;p&gt;For example, if an element has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;16px&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt; of &lt;code&gt;2em&lt;/code&gt;, the element's &lt;code&gt;padding&lt;/code&gt; will be 32 pixels (16 x 2):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/VwzPgjG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If an element has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;16px&lt;/code&gt; and its child has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;1.5em&lt;/code&gt;, the child's &lt;code&gt;font-size&lt;/code&gt; will be 24 pixels (16 x 1.5):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/abypXWE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If the element's  &lt;code&gt;font-size&lt;/code&gt; is not set, the closest ancestor with a &lt;code&gt;font-size&lt;/code&gt; gets used. Note that browsers have a default font size of 16 pixels out of the box, so &lt;code&gt;1em&lt;/code&gt; is generally equal to 16 pixels.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;em&lt;/code&gt;s are useful when scaling some property with the element's &lt;code&gt;font-size&lt;/code&gt;. Consider the following &lt;code&gt;.box&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create small, medium, and large boxes with these same proportions, we can alter the  &lt;code&gt;font-size&lt;/code&gt; of each &lt;code&gt;.box&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/porRGpR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-compounding-problem"&gt;
  &lt;/a&gt;
  The compounding problem
&lt;/h3&gt;

&lt;p&gt;Because &lt;code&gt;em&lt;/code&gt;s are relative, the value of an &lt;code&gt;em&lt;/code&gt; in descendant elements can compound. This can cause unexpected layout changes when a font size change ripples through descendant elements. For instance, if an element has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;2em&lt;/code&gt; and its child has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;1.5em&lt;/code&gt;, the child's font size is 48 pixels (16 x 2 x 1.5):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/mdMRZjO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rems"&gt;
  &lt;/a&gt;
  Rems
&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;rem&lt;/code&gt;, short for "root em," is like an &lt;code&gt;em&lt;/code&gt;, but its value is relative to the root &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag. So, if the root &lt;code&gt;font-size&lt;/code&gt; is 16 pixels, a value of &lt;code&gt;2rem&lt;/code&gt; is 32 pixels at every level in the DOM:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/wvqgLLy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rem&lt;/code&gt;s are always relative to the root element, so there isn't an issue with compounding. This makes them more predictable and consistent than &lt;code&gt;em&lt;/code&gt;s:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/oNeBrKx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We can use &lt;code&gt;rem&lt;/code&gt;s to scale values globally by only changing the root &lt;code&gt;font-size&lt;/code&gt;. The following &lt;code&gt;article&lt;/code&gt; has many font sizes specified in &lt;code&gt;rem&lt;/code&gt;s, and we can use a media query to change all the sizes by setting the root &lt;code&gt;font-size&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/MWvJNYx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#em-and-rem-a11y-benefits"&gt;
  &lt;/a&gt;
  Em and rem a11y benefits
&lt;/h2&gt;

&lt;p&gt;Both &lt;code&gt;em&lt;/code&gt;s and &lt;code&gt;rem&lt;/code&gt;s help make our sites more accessible by respecting the user's default font size, set in their browser's settings. Using a fixed unit such as &lt;code&gt;px&lt;/code&gt; will override this setting, but &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; will scale it. This makes &lt;code&gt;rem&lt;/code&gt;s particularly good for typography because we can scale the user's font size preference globally without &lt;code&gt;em&lt;/code&gt; interference.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; are relative units. An &lt;code&gt;em&lt;/code&gt; is generally relative to the current element's &lt;code&gt;font-size&lt;/code&gt;; when used for the &lt;code&gt;font-size&lt;/code&gt; property, it's relative to its parent's &lt;code&gt;font-size&lt;/code&gt;. A &lt;code&gt;rem&lt;/code&gt; is relative to the root &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element's &lt;code&gt;font-size&lt;/code&gt;, which is usually 16 pixels. Take caution when using &lt;code&gt;em&lt;/code&gt;s because of their compounding effect; &lt;code&gt;rem&lt;/code&gt;s are more predictable and increase accessibility by respecting the user's default font size.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect
&lt;/h2&gt;

&lt;p&gt;Thanks for reading! If you enjoyed this post, connect with me on &lt;a href="https://www.linkedin.com/in/zach-snoek-5b327b179/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://github.com/zachsnoek"&gt;GitHub&lt;/a&gt;, and &lt;a href="https://twitter.com/zach_snoek"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://css-for-js.dev/"&gt;Josh Comeau | CSS for JavaScript Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=_-aDOAMmDHI"&gt;Kevin Powell | CSS em and rem explained #CSS #responsive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units"&gt;MDN | CSS values and units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size"&gt;MDN | font-size&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>cssforjs</category>
    </item>
    <item>
      <title>Java Tip: What are Methods, Functions, and Procedures?</title>
      <author>Edwin Torres ‚ú®</author>
      <pubDate>Thu, 04 Nov 2021 02:43:16 +0000</pubDate>
      <link>https://dev.to/realedwintorres/java-tip-what-are-methods-functions-and-procedures-4nfm</link>
      <guid>https://dev.to/realedwintorres/java-tip-what-are-methods-functions-and-procedures-4nfm</guid>
      <description>&lt;p&gt;Methods ü¶Å, Functions üêØ, and Procedures üêª, Oh My!&lt;/p&gt;

&lt;p&gt;Programmers often use these terms interchangeably. But there are differences among them. The following paragraphs describe methods, functions, and procedures in Java.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;method&lt;/strong&gt; in Java is a subroutine that is part of a &lt;em&gt;class&lt;/em&gt;. The subroutine is like a miniature program that can execute in other parts of the program. Methods promote code reuse and maintainability.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;method definition&lt;/em&gt; consists of the modifier, return type, name, parameter list, exception list, and body. The method name and parameter types form the &lt;em&gt;method signature&lt;/em&gt;. The method signature uniquely identifies the method for execution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Java also has &lt;em&gt;constructor methods&lt;/em&gt;. A constructor is a special method that creates an object of a class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are two types of methods: &lt;em&gt;procedures&lt;/em&gt; and &lt;em&gt;functions&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#procedures"&gt;
  &lt;/a&gt;
  Procedures
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;procedure&lt;/strong&gt; is a method that does &lt;em&gt;not&lt;/em&gt; have a return value. To define a method to be a procedure, define the return type to be &lt;code&gt;void&lt;/code&gt;. An example of a built-in procedure in Java is &lt;code&gt;System.out.println()&lt;/code&gt;. This procedure simply outputs its parameter to the console, without returning a value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;function&lt;/strong&gt; is a method that &lt;em&gt;does&lt;/em&gt; have a return value. To define a method to be a function, set its return type to be the type of the value it is returning. An example of a built-in function in Java is &lt;code&gt;Math.pow()&lt;/code&gt;. This &lt;code&gt;Math&lt;/code&gt; function accepts two &lt;code&gt;double&lt;/code&gt; parameters and returns the first parameter raised to the power of the second parameter. The return type is &lt;code&gt;double&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, &lt;em&gt;user-defined&lt;/em&gt; methods are procedures and functions that &lt;strong&gt;you&lt;/strong&gt; define. Since Java only provides general-purpose methods, it is up to you to define methods that make sense for your programming project.&lt;/p&gt;

&lt;p&gt;If you liked this article &lt;em&gt;proceed&lt;/em&gt; to my Twitter profile &lt;a href="https://twitter.com/realEdwinTorres"&gt;&lt;code&gt;@realEdwinTorres&lt;/code&gt;&lt;/a&gt; and follow me! üòä &lt;/p&gt;

</description>
      <category>java</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>How to seamlessly exchange data between JavaScript environments</title>
      <author>Wynn Tee</author>
      <pubDate>Thu, 04 Nov 2021 02:22:55 +0000</pubDate>
      <link>https://dev.to/quantirisk/how-to-seamlessly-exchange-data-between-javascript-environments-32aa</link>
      <guid>https://dev.to/quantirisk/how-to-seamlessly-exchange-data-between-javascript-environments-32aa</guid>
      <description>&lt;h2&gt;
  &lt;a href="#json-limitations"&gt;
  &lt;/a&gt;
  JSON limitations
&lt;/h2&gt;

&lt;p&gt;Wouldn't you find it strange if adults who are fluent in the same language spoke to each other using the vocabulary of a 3-year-old? Well, something analogous is happening when browsers and JavaScript servers exchange data using JSON, the de facto serialization format on the internet.&lt;/p&gt;

&lt;p&gt;For example, if we wanted to send a &lt;code&gt;Date&lt;/code&gt; object from a JavaScript server to a browser, we would have to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Convert the &lt;code&gt;Date&lt;/code&gt; object to a number.&lt;/li&gt;
&lt;li&gt;Convert the number to a JSON string.&lt;/li&gt;
&lt;li&gt;Send the JSON string to the browser.&lt;/li&gt;
&lt;li&gt;Revert the JSON string to a number.&lt;/li&gt;
&lt;li&gt;Realize the number represents a date.&lt;/li&gt;
&lt;li&gt;Revert the number to a &lt;code&gt;Date&lt;/code&gt; object.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This roundabout route seems ludicrous, because the browser and server both support the &lt;code&gt;Date&lt;/code&gt; object, but is necessary, because JSON does not support the &lt;code&gt;Date&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;In fact, JSON does not support most of the data types and data structures intrinsic to JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jPqrATBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yoakh1kdpn6hx190d30i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jPqrATBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yoakh1kdpn6hx190d30i.png" alt="JavaScript data supported by JSON" width="320" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#joss-as-a-solution"&gt;
  &lt;/a&gt;
  JOSS as a solution
&lt;/h2&gt;

&lt;p&gt;The aforementioned limitations of JSON motivated us to create the JS Open Serialization Scheme (JOSS), a new binary serialization format that supports almost all data types and data structures intrinsic to JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--38FaVaKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dm5uns2ksvso59eyxdrj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38FaVaKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dm5uns2ksvso59eyxdrj.png" alt="JavaScript data supported by JOSS" width="320" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JOSS also supports some often overlooked features of JavaScript, such as primitive wrapper objects, circular references, sparse arrays, and negative zeros. Please read the &lt;a href="https://github.com/quantirisk/joss/blob/main/SPECS.md"&gt;official specification&lt;/a&gt; for all the gory details.&lt;/p&gt;

&lt;p&gt;JOSS serializations come with the textbook advantages that binary formats have over text formats, such as efficient storage of numeric data and ability to be consumed as streams. The latter allows for JOSS serializations to be handled asynchronously, which we shall see in the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference-implementation"&gt;
  &lt;/a&gt;
  Reference implementation
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/quantirisk/joss"&gt;reference implementation&lt;/a&gt; of JOSS is available to be downloaded as an &lt;a href="https://github.com/quantirisk/joss/raw/main/joss.min.js"&gt;ES module&lt;/a&gt; (for browsers and Deno), &lt;a href="https://github.com/quantirisk/joss/raw/main/joss.node.min.js"&gt;CommonJS module&lt;/a&gt; (for Node.js), and &lt;a href="https://github.com/quantirisk/joss/raw/main/joss.iife.min.js"&gt;IIFE&lt;/a&gt; (for older browsers). It provides the following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;serialize()&lt;/code&gt; and &lt;code&gt;deserialize()&lt;/code&gt; to handle serializations in the form of static data.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;serializable()&lt;/code&gt;, &lt;code&gt;deserializable()&lt;/code&gt;, and &lt;code&gt;deserializing()&lt;/code&gt; to handle serializations in the form of readable streams.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To illustrate the syntax of the methods, allow us to guide you through an example in Node.js.&lt;/p&gt;

&lt;p&gt;First, we import the CommonJS module into a variable called &lt;code&gt;JOSS&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Change the path accordingly&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;JOSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/path/to/joss.node.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we create some dummy data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;simples&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;u2661 JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;bigints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;72057594037927935&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1152921504606846975&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;sparse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;baz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
  &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)]]),&lt;/span&gt;
  &lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
  &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/ab+c/gi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To serialize the data, we use the &lt;code&gt;JOSS.serialize()&lt;/code&gt; method, which returns the serialized bytes as a &lt;code&gt;Uint8Array&lt;/code&gt; or &lt;code&gt;Buffer&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JOSS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To deserialize, we use the &lt;code&gt;JOSS.deserialize()&lt;/code&gt; method, which simply returns the deserialized data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JOSS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deserialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we inspect the original data and deserialized data, we will find they look exactly the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should be evident by now that you can migrate from JSON to JOSS by replacing all occurrences of &lt;code&gt;JSON.stringify/parse&lt;/code&gt; in your code with &lt;code&gt;JOSS.serialize/deserialize&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#readable-streams"&gt;
  &lt;/a&gt;
  Readable Streams
&lt;/h3&gt;

&lt;p&gt;If the data to be serialized is large, it is better to work with readable streams to avoid blocking the JavaScript event loop.&lt;/p&gt;

&lt;p&gt;To serialize the data, we use the &lt;code&gt;JOSS.serializable()&lt;/code&gt; method, which returns a readable stream from which the serialized bytes can be read.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JOSS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serializable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To deserialize, we use the &lt;code&gt;JOSS.deserializable()&lt;/code&gt; method, which returns a writable stream to which the readable stream can be piped.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JOSS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deserializable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;readable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;finish&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To access the deserialized data, we wait for the piping process to complete and read the &lt;code&gt;result&lt;/code&gt; property of the writable stream.&lt;/p&gt;

&lt;p&gt;Whilst writable streams are well supported in Deno and Node.js, they are either not supported or not enabled by default in browsers at the present time.&lt;/p&gt;

&lt;p&gt;To deserialize when we do not have recourse to writable streams, we use the &lt;code&gt;JOSS.deserializing()&lt;/code&gt; method, which returns a &lt;code&gt;Promise&lt;/code&gt; that resolves to the deserialized data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readable2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JOSS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serializable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JOSS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deserializing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;readable2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#servers"&gt;
  &lt;/a&gt;
  Servers
&lt;/h3&gt;

&lt;p&gt;In practice, we would serialize data to be sent in an outgoing HTTP request or response, and deserialize data received from an incoming HTTP request or response.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/quantirisk/joss"&gt;reference implementation&lt;/a&gt; page contains examples on how to use JOSS in the context of the &lt;a href="https://github.com/quantirisk/joss/#fetch-api"&gt;Fetch API&lt;/a&gt;, &lt;a href="https://github.com/quantirisk/joss/#deno-http-server"&gt;Deno HTTP server&lt;/a&gt;, and &lt;a href="https://github.com/quantirisk/joss/#nodejs-http-server"&gt;Node.js HTTP server&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-remarks"&gt;
  &lt;/a&gt;
  Closing remarks
&lt;/h2&gt;

&lt;p&gt;JOSS will evolve with the JavaScript specification. To keep track of changes to JOSS, please star or watch the &lt;a href="https://github.com/quantirisk/joss"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>deno</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Database Management Systems Pt. 1</title>
      <author>Adrian Brown</author>
      <pubDate>Thu, 04 Nov 2021 01:44:08 +0000</pubDate>
      <link>https://dev.to/cloudguruab/database-management-systems-pt-1-1k7f</link>
      <guid>https://dev.to/cloudguruab/database-management-systems-pt-1-1k7f</guid>
      <description>&lt;h4&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h4&gt;

&lt;p&gt;Lets take a look at the ecosystem for databases and the tools that govern them.&lt;/p&gt;

&lt;p&gt;To note, a database is a collection of inter-related data which helps in efficient retrieval, insertion and deletion of data from database and organizes the data in the form of tables, views, schemas, reports and more.&lt;/p&gt;

&lt;p&gt;Looking at what database management systems can do we realize that these tools are used to manage our databases out of the box. &lt;/p&gt;

&lt;p&gt;In short, a database management system is the software used to efficiently and reliably handle data processing and management. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#by-the-end-of-this-tutorial-you-will"&gt;
  &lt;/a&gt;
  By the end of this tutorial, you will
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Understand the fundamentals of databases&lt;/li&gt;
&lt;li&gt;Working points of DBMS&lt;/li&gt;
&lt;li&gt;How to run simple Database queries&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#core-concepts"&gt;
  &lt;/a&gt;
  Core Concepts
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;We must always be thinking about our data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#quick-use-cases"&gt;
  &lt;/a&gt;
  Quick use cases,
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Creation of a database&lt;/li&gt;
&lt;li&gt;Retrieval of information from the database&lt;/li&gt;
&lt;li&gt;Updating the database&lt;/li&gt;
&lt;li&gt;Managing a database&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With DBMS's being so important in the management of our databases a DBMS will look to focus on the following problems: Redundancy of data, Inconsistency of Data, Difficult Data Access, Unauthorized Access, No Concurrent Access, No Backup and Recovery.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h5&gt;

&lt;p&gt;The structure of a DBMS is laid out in three levels which are known as your physical, conceptual and external levels. This can be looked at as a 3-tier'd architecture in relation to what a DBMS provides. &lt;/p&gt;

&lt;p&gt;Each level will serve a specific focus for a DBMS as the physical layer is the information about the location of database objects in the data store is kept. The conceptual level data is represented in the form of various database tables. At the external level objects will specify a view of the data in terms of conceptual level tables.&lt;/p&gt;

&lt;p&gt;As noted earlier, we must always think about our data. This is important walking through the 3-tier architecture as data independence states that changes in data at one level shouldn't affect another. &lt;/p&gt;

&lt;p&gt;Types of Data Independence: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Physical Data Independence: Any change in the physical location of tables and indexes should not affect the conceptual level or external view of data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conceptual Data Independence: The data at conceptual level schema and external level schema must be independent.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;This concludes the first part of my series on Database Management Systems, I will be posting more on whats to be continued shortly!&lt;/em&gt; &lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hot Take: You Don't Need To Learn Everything (Yet)</title>
      <author>Tatiana</author>
      <pubDate>Thu, 04 Nov 2021 01:24:38 +0000</pubDate>
      <link>https://dev.to/tatianacodes/hot-take-you-dont-need-to-learn-everything-at-once-90</link>
      <guid>https://dev.to/tatianacodes/hot-take-you-dont-need-to-learn-everything-at-once-90</guid>
      <description>&lt;p&gt;Learners often begin their journey with a simple Google search: "How to become a software developer". That search often leads them to complicated skill trees listing hundreds of different technologies and concepts, a swath of Reddit posts, Medium articles, and YouTubers that claim that you need to know the frontend, backend, DevOps, 3 frameworks, 6 languages, and every data structure and algorithm you can think of in order to become a professional programmer.&lt;/p&gt;

&lt;p&gt;Job descriptions are no more helpful when a newbie is trying to understand what you &lt;strong&gt;must&lt;/strong&gt; learn in order to become a professional. Similarly to the above skill trees, job listings are often notorious for listing nearly every technology under the sun for a role. In fact, it's practically a meme these days.&lt;/p&gt;

&lt;p&gt;Not only is the idea that you need to know a heck of a lot to get hired discouraging, but it's &lt;em&gt;unrealistic&lt;/em&gt;. And we should change the narrative. &lt;/p&gt;

&lt;p&gt;Here's a little secret, for the uninitiated: &lt;em&gt;you don't need to know everything- yet&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-gud"&gt;
  &lt;/a&gt;
  Git Gud
&lt;/h2&gt;

&lt;p&gt;It can be overwhelming determining exactly what you should learn, given the above issues with skill trees and job descriptions. How can you possibly be proficient in 10 different technologies, languages, and frameworks? The real answer is- it's hard, nearly impossible to be good at &lt;em&gt;everything&lt;/em&gt;. So what can you do to be competitive, then? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer: Git gud&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I argue that &lt;strong&gt;depth &amp;gt; breadth&lt;/strong&gt; when it comes to gaining a strong programming foundation and working towards that first developer role. &lt;/p&gt;

&lt;p&gt;We've all heard of the following phrase (most often only the first clause):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A jack of all trades is a master of none&lt;/strong&gt;, &lt;em&gt;but oftentimes better than a master of one&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think the entire quote is valid, to a point. Developers inherently need to learn many different things in order to keep up with the ever changing landscape of technology. Being rigid in your stack might not be feasible when trying to reach for growth not only professionally, but technically. To be clear, I believe that in order to be a great developer, having the ability to learn a lot of different things is basically a requirement. So yes, as a professional, "oftentimes better than a master of one" is pretty key.&lt;/p&gt;

&lt;p&gt;But when you're just starting out, fundamentals and learning how to learn so you can be that great developer who can quickly ramp up on different technologies is far more important than trying to split your attention between multiple languages and tools. &lt;/p&gt;

&lt;p&gt;Let‚Äôs think back to that first clause of the above quote- ‚Äúa jack of all trades is a master of none‚Äù. It‚Äôs very easy to learn the basics in many things, but to develop competency and prove that to employers means moving past those barebones basics. Similarly to tutorial hell, we want to avoid the trap of being a perpetual beginner, while still growing that mindset of being a perpetual &lt;em&gt;learner&lt;/em&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-all-transferable"&gt;
  &lt;/a&gt;
  It's all transferable!
&lt;/h2&gt;

&lt;p&gt;Believing that learners need not learn every new framework and tool of the month prior to searching for a job, or during their initial learning does not mean that those learners will be less equipped as professional developers. It also doesn't mean that one &lt;em&gt;shouldn't&lt;/em&gt; have that sense of curiosity about other technologies. Ideally, learners should strive to get into a mindset where they can easily transfer their skills in one framework or tool to another &lt;em&gt;if they need to&lt;/em&gt;. What's important is you have strong fundamentals.&lt;/p&gt;

&lt;p&gt;Core programming concepts are frequently transferable across languages. If you know how to write a loop in one language, it's really just a matter of learning the syntax to write it in another. You've done much of the heavy lifting of learning the &lt;em&gt;concept of a loop&lt;/em&gt; when you learned your first language. At this point, it's all about making sure what you type is syntactically valid.  At the end of the day, a language, framework, or technology is just a tool. But it's a lot easier to learn a new tool if you have &lt;strong&gt;strong&lt;/strong&gt; skills and depth in another already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-rockstar-developer"&gt;
  &lt;/a&gt;
  The Rockstar Developer
&lt;/h2&gt;

&lt;p&gt;As I said above, we've all become familiar with the "rockstar ninja master Jedi" job listings that seem to ask for 10 years of experience in tools that have been around for 5 years, knowledge of four different languages, and 3-5 years of experience for an entry level role. &lt;/p&gt;

&lt;p&gt;I can understand the kind of anxiety this may inspire that leads one to believe that to have a shot at this field, you &lt;strong&gt;must&lt;/strong&gt; know tons of different tools and languages. That said, it may surprise you that often these things are wish lists, or things you'll get &lt;em&gt;paid to learn on the job&lt;/em&gt;. Now, is it great to know these tools, languages, and frameworks before you apply? Sure. That's absolutely a plus to know those things. But it's entirely possible to gain employment in roles outside of your preferred stack, and honestly, it's common.&lt;/p&gt;

&lt;p&gt;In my own experience, I was all in on the MERN stack. I was targeting companies that used that stack, for the most part. I had multiple interview processes (even getting to the final round!) where the stack was not MERN. My current employer uses a completely custom front/backend framework, TypeScript, and CoffeeScript. The only thing I had in common was that they used Node and MongoDB. &lt;/p&gt;

&lt;p&gt;I lacked confidence that I would do well in the role even though I knew my skills would be transferable. I got the job anyway despite not knowing any of those tools! I'm currently working with technologies such as Kafka and Redis, which are also completely new to me. Despite all of these technologies and tools that I didn't know prior to my role, I‚Äôve been doing great. This isn‚Äôt to say that there haven‚Äôt been hiccups, but it‚Äôs nothing the documentation, drawing on my fundamentals, and asking great questions can‚Äôt solve. We should give ourselves more credit for being flexible and able to learn. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Being a developer is committing to a career of constantly learning. You'll probably find that you're learning daily in the first few months of your first job. It's more imperative to learn how to learn so you can tackle the novel challenges you will face as your team works on new projects, rather than trying to figure it all out ahead of time. You don't need to know everything in advance. You'll often find that your team, regardless of their individual seniority, is learning right alongside you, and if they're humble, they'll shout it from the rooftops.&lt;/p&gt;

&lt;p&gt;That said, don't sweat it when it comes to facing what seems like a mountain of "need to knows". Are all of these things great to know? Sure, knowing things well can be very helpful. &lt;/p&gt;

&lt;p&gt;But if you're just starting out and aren't strong in any given technologies just yet, laser-focus your learning commitments and get &lt;em&gt;really great&lt;/em&gt; at some key skills. Express your skills through some &lt;em&gt;really great&lt;/em&gt; projects. Honing in on fundamentals and core skills will pay dividends when the time comes to branch out after you get that first job, and propel you forward towards that first job &lt;em&gt;much&lt;/em&gt; faster than splitting your attention amongst an impossible number of tools too early. Git Gud- The rest will come. &lt;/p&gt;

&lt;p&gt;Let me know your thoughts about this searing hot take below. &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>learning</category>
    </item>
    <item>
      <title>Yancy: What We Leave Behind</title>
      <author>Doug Bell</author>
      <pubDate>Thu, 04 Nov 2021 01:06:11 +0000</pubDate>
      <link>https://dev.to/preaction/yancy-what-we-leave-behind-509n</link>
      <guid>https://dev.to/preaction/yancy-what-we-leave-behind-509n</guid>
      <description>&lt;p&gt;When I started the &lt;a href="http://preaction.me/yancy"&gt;Yancy Content Management System&lt;/a&gt;, my goal was to see how easy it would be to build a generic admin editor on top of a &lt;a href="https://mojolicious.org"&gt;Mojolicious&lt;/a&gt; application database. Its design was, therefore, simple: A backend layer to talk to the database, a web application to view and edit the data, and an API controller to connect the two.&lt;/p&gt;

&lt;p&gt;Now, 4 years later, Yancy is on its way to becoming the M in Mojolicious &lt;a href="https://docs.mojolicious.org/Mojolicious/Guides/Growing#Model-View-Controller"&gt;MVC&lt;/a&gt;. I added &lt;a href="http://preaction.me/yancy/perldoc/Yancy/Model/"&gt;Yancy::Model&lt;/a&gt; as a place to keep data logic without the overhead of &lt;a href="https://metacpan.org/pod/DBIx::Class"&gt;DBIx::Class&lt;/a&gt;, but having a layer between the database backend and the web API enables all sorts of fun things, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Custom validation&lt;/li&gt;
&lt;li&gt;Packing and unpacking of complex data&lt;/li&gt;
&lt;li&gt;Automatic joining of related data&lt;/li&gt;
&lt;li&gt;Secondary, read-only backends and failover&lt;/li&gt;
&lt;li&gt;Transparent caching&lt;/li&gt;
&lt;li&gt;Data versioning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And these things can work across different backends: A caching module that uses Redis could be a frontend for a cache of a MySQL database or a Postgres database. The code only needs to be written once and made available on &lt;a href="https://cpan.org"&gt;CPAN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, the new APIs take the place of some existing APIs and features that will have to be removed. These features were added to serve the frontend, but are awkward and limited in power compared to customizing the model API. The main features that have been deprecated are: Filters, Views, and OpenAPI.&lt;/p&gt;

&lt;p&gt;Filters were added to enable the frontend to do password hashing. By adding &lt;code&gt;x-filter&lt;/code&gt; to the configuration, a field or a row could have one or more filters applied to it before being written to the database. With the addition of the model API, filters can be added more easily and explicitly by creating a &lt;a href="http://preaction.me/yancy/perldoc/Yancy/Guides/Model/#Starting-a-Custom-Model"&gt;custom Schema class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Views were a way to present subsets of data to a user through the frontend application. Instead of seeing all the raw information an application needs for a user, the editor could be made to show just the important information for the administrator or content manager. This, much like filters, can be done more robustly through the model API, or even directly through your database.&lt;/p&gt;

&lt;p&gt;Last, the &lt;a href="http://openapis.org"&gt;OpenAPI&lt;/a&gt; spec was how the frontend app analyzed the data schema to determine what it could do. However, since every schema can only do the same four operations (create, read, update, and delete), reading the OpenAPI spec to handle operations is needless complexity. The generated API could be used by more than just the Yancy editor, so the code for generating OpenAPI specs from Yancy schemas has been moved to &lt;a href="https://metacpan.org/pod/Yancy::Plugin::OpenAPI"&gt;the Yancy::Plugin::OpenAPI module on CPAN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yancy v2 has been &lt;a href="https://github.com/preaction/Yancy/issues/25"&gt;planned and in development for quite a while&lt;/a&gt;, but it is nearing completion. When v2 is released, these deprecated features will be removed. What will remain is a leaner, easier-to-use content management system for the best web framework out there.&lt;/p&gt;

</description>
      <category>mojolicious</category>
      <category>perl</category>
      <category>webdev</category>
      <category>yancy</category>
    </item>
    <item>
      <title>The key to developer happiness and how to prevent coding from becoming just another job</title>
      <author>Heshie Brody</author>
      <pubDate>Thu, 04 Nov 2021 00:31:08 +0000</pubDate>
      <link>https://dev.to/heshiebee/the-key-to-developer-happiness-and-how-to-prevent-coding-from-becoming-just-another-job-4m60</link>
      <guid>https://dev.to/heshiebee/the-key-to-developer-happiness-and-how-to-prevent-coding-from-becoming-just-another-job-4m60</guid>
      <description>&lt;h6&gt;
  &lt;a href="#this-article-first-appeared-here-httpswwwzigiaiblogthekeytodeveloperhappinessandhowtopreventcodingfrombecomingjustanotherjob"&gt;
  &lt;/a&gt;
  This article first appeared here:  &lt;a href="https://www.zigi.ai/blog/the-key-to-developer-happiness-and-how-to-prevent-coding-from-becoming-just-another-job"&gt;https://www.zigi.ai/blog/the-key-to-developer-happiness-and-how-to-prevent-coding-from-becoming-just-another-job&lt;/a&gt;
&lt;/h6&gt;

&lt;h2&gt;
  &lt;a href="#mid-sprint-gloom-day-tuesday"&gt;
  &lt;/a&gt;
  Mid Sprint Gloom Day Tuesday
&lt;/h2&gt;

&lt;p&gt;It was a week after sprint planning and I sat at my desk feeling lost and bored. Here I was in my third year in my software developer career feeling overwhelmed and uninspired. &lt;/p&gt;

&lt;p&gt;All the pain that motivated me into focusing my career on software development and out of my boring e-commerce job was back but yet as a software developer.&lt;/p&gt;

&lt;p&gt;I still remember the moment when at age 14 I double-clicked the Visual basic form editor button and coded my first &lt;code&gt;MessageBox.Show("Hello world")&lt;/code&gt;. The invigoration and excitement of seeing a computer execute the code that I just wrote were second to none. Ask every software developer this and they will remember that exact moment as if it happened yesterday. &lt;/p&gt;

&lt;p&gt;After experiencing the above I started questioning the creative work industry. &lt;/p&gt;

&lt;p&gt;Is it impossible to experience that same feeling of joy when working creatively on my hobby as when doing it as a job?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Will a job always be a job?&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now, for us, as software developers to stay happy, we must stick close to our core motivation which is creation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-birth-of-a-software-developer"&gt;
  &lt;/a&gt;
  The birth of a software developer
&lt;/h2&gt;

&lt;p&gt;As a human our greatest joy comes from creation, making something out of nothing. To many people buying creations built by others is enough to satisfy that need but for some of us who are desperate enough, unless we build something of our own we feel no joy.&lt;/p&gt;

&lt;p&gt;This is how we as software developers are born.&lt;/p&gt;

&lt;p&gt;Now, for us, as software developers to stay happy, we must stick close to our core motivation which is creation. &lt;/p&gt;

&lt;p&gt;All the noise and pressure not related to creating or building stuff moves us further away from what made us join this creative industry in the first place.&lt;/p&gt;

&lt;p&gt;To keep all the businessey side of things away from dampening the fun part which is building stuff, it must not feel like a burden to the creator aka the software developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As a software developer, when I had the following I was most calm and looked forward to my work:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Having my day prepared with a clear list of work assigned&lt;/li&gt;
&lt;li&gt;Having ample and reasonable time for each task&lt;/li&gt;
&lt;li&gt;Knowing when my work is considered complete
&lt;/li&gt;
&lt;li&gt;Having my manager in sync instead of pinging me all day in Slack with requests for progress updates. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The greatest pleasure as a software developer is when you are assigned work where you know exactly what the specifications are and what the result should look like. &lt;/p&gt;

&lt;p&gt;Being able to knock something out to its completion allows us to no end. &lt;/p&gt;

&lt;p&gt;Working off a vague idea or not knowing where to begin or end leads to burnout and boredom since to us as creators there we now have additional baggage around the creation process which turns it into a job and less like a hobby.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-nonmanager-manager"&gt;
  &lt;/a&gt;
  The non-manager, manager
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0IykI5OLMhjtnB60/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0IykI5OLMhjtnB60/giphy.gif" alt="Like a boss" width="498" height="226"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's be honest, software development is chaotic much like business is chaotic. &lt;/p&gt;

&lt;p&gt;For a team to be run efficiently some sort of separation must be placed between the software developers and the business side of things to bring it under control.&lt;/p&gt;

&lt;p&gt;This necessary separation is the job of the team lead or engineering manager.&lt;/p&gt;

&lt;p&gt;But even with a manager in place, the challenge is still there. &lt;/p&gt;

&lt;p&gt;The manager must find the right balance of communication and goal setting with biz dev who wants everything yesterday and the development teams who are running a backlog.&lt;/p&gt;

&lt;p&gt;Many times the pressure put on the manager finds its way down to the developers and before you know it your development team is pressured and micro-managed not knowing what to work on first in turn making what we find fun as a hobby the opposite as a job. &lt;/p&gt;

&lt;p&gt;We as developers on the other side are too intimidated or shy to communicate our feelings back up and we just accept the workload and pressure as a given.  And this is a huge problem since work overload and micromanagement are the greatest causes of burnout and indirection much like that Tuesday I described above.&lt;/p&gt;

&lt;p&gt;Finding the perfect manager that can properly lead their team while keeping developer happiness levels high is difficult.&lt;br&gt;
Humans are humans and we succumb to pressure and emotions. Even the greatest leaders sometimes break down and falter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-key-to-developer-happiness-and-how-to-prevent-coding-from-becoming-just-another-job"&gt;
  &lt;/a&gt;
  The key to developer happiness and how to prevent coding from becoming just another job
&lt;/h2&gt;

&lt;p&gt;The great Lao Tzu put it best &lt;strong&gt;&lt;em&gt;‚ÄúA leader is best when people barely know he exists. When his work is done, his aim fulfilled, they will say: we did it ourselves.‚Äù&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, what if I started my Tuesday morning a bit differently that day? As I get to my desk a curated checklist of exactly what I‚Äôll be working on that day is in my inbox. I report to my manager the progress I have been making, and I put aside my timidness and discuss my progress and provide feedback if they assigned too much work to me.&lt;/p&gt;

&lt;p&gt;In doing so I would‚Äôve felt mentally at ease knowing that my manager has been updated with my progress and has been communicated with how I feel about the workload.&lt;/p&gt;

&lt;p&gt;Also since my goals and expectations are set I now have a clear purpose and goal for that day feeling free to indulge in building in a way that makes me happy.&lt;/p&gt;

&lt;p&gt;Now from my manager‚Äôs perspective, I have removed their morning overhead and already put them at ease since they now know exactly what I‚Äôm working on plus insight on the team progress and efficiency leading to a more relaxed atmosphere and greater developer happiness.&lt;/p&gt;

&lt;p&gt;Finding the courage to do so is a game changer. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;But do we find the courage?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Do we speak up when we disagree on how something should be done or do we just stay quiet to get done with ‚Äòthat‚Äô meeting?&lt;/p&gt;

&lt;p&gt;Do we communicate our feelings about the timeline or do we just nod along so as not to be called out as a ‚Äúnon-team player?&lt;/p&gt;

&lt;p&gt;Here‚Äôs an exercise; now it might not be for everybody and if you‚Äôre great at communicating then kudos to you but for those who are not great at communicating [yet] next time you feel something during a meeting; a thought, an insight, a timeline expectation, speak up! &lt;/p&gt;

&lt;p&gt;It‚Äôll be &lt;strong&gt;&lt;em&gt;tough&lt;/em&gt;&lt;/strong&gt; at first, you‚Äôll feel your body fighting many different forces but carry on, &lt;strong&gt;&lt;em&gt;It‚Äôs worth it&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;People hire you for more than just listening. They want your opinion and thoughts, they want that clarity and insight that your background brings that someone else may not have.&lt;/p&gt;

&lt;p&gt;In doing so you will effectively get more comfortable communicating your thoughts and help keep your team in sync while also putting you at ease and giving you the needed clarity to focus on what you love best which is building product.&lt;/p&gt;

&lt;p&gt;A win-win! But only if you have the courage. &lt;/p&gt;

&lt;p&gt;May the courage be with us.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/kaBmqpJtdvFqo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/kaBmqpJtdvFqo/giphy.gif" alt="May the force be with you" width="500" height="427"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Heshie&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"&lt;a href="https://zigi.ai"&gt;Zigi&lt;/a&gt; is your own AI-powered personal assistant, managing your entire dev workflow and handling all your mundane, &lt;br&gt;
Non-programming tasks across multiple apps, so you can focus on code creation and innovation".&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How to start with stripe</title>
      <author>Roopali Singh</author>
      <pubDate>Thu, 04 Nov 2021 00:09:05 +0000</pubDate>
      <link>https://dev.to/roopalisingh/how-to-start-with-stripe-3pip</link>
      <guid>https://dev.to/roopalisingh/how-to-start-with-stripe-3pip</guid>
      <description>&lt;p&gt;Hi thereüëã,&lt;/p&gt;

&lt;p&gt;In this guide we will be learning how to integrate a payment gateway in our web application using &lt;strong&gt;stripe&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We are working with &lt;code&gt;React&lt;/code&gt; for the frontend and &lt;code&gt;Node&lt;/code&gt; &amp;amp; &lt;code&gt;Express&lt;/code&gt; for the backend. To make api calls we are using &lt;code&gt;axios&lt;/code&gt; library.&lt;/p&gt;

&lt;p&gt;For simplicity we will not be focusing on design.&lt;br&gt;
To start we are using &lt;code&gt;create-react-app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;1.&lt;/span&gt; After getting our project bootstrapped with &lt;code&gt;create-react-app&lt;/code&gt;, in your React code we need to add two dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save @stripe/react-stripe-js @stripe/stripe-js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;2.&lt;/span&gt; Now in &lt;code&gt;App.js&lt;/code&gt; file, call the &lt;code&gt;loadStripe&lt;/code&gt; function to pass the &lt;strong&gt;stripe test publishable key&lt;/strong&gt; which you can get from the stripe dashboard.&lt;br&gt;
(&lt;em&gt;it is safe to share the stripe publishable key, they aren‚Äôt secret&lt;/em&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loadStripe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@stripe/stripe-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripePromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loadStripe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;STRIPE_PUBLISHABLE_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Make sure to call `loadStripe` outside of a component‚Äôs render &lt;/span&gt;
&lt;span class="c1"&gt;// to avoid recreating the `Stripe` object on every render.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;3.&lt;/span&gt; Next, we will pass the returned &lt;code&gt;promise&lt;/code&gt; from loadStripe function to &lt;code&gt;Elements&lt;/code&gt; provider which is a wrapper that allows us to access Stripe object in any nested component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Elements&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@stripe/react-stripe-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loadStripe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@stripe/stripe-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripePromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loadStripe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;STRIPE_PUBLISHABLE_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Elements&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stripePromise&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CheckoutPage&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Elements&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// Render an Elements provider at the root of your React app&lt;/span&gt;
&lt;span class="c1"&gt;// so that it is available everywhere you need it.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;4.&lt;/span&gt; In the &lt;code&gt;CheckoutPage&lt;/code&gt; component, we're going to add a &lt;code&gt;CardElement&lt;/code&gt; which is a flexible single-line input that collects all necessary card details.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CardElement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@stripe/react-stripe-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CheckoutPayment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;paymentHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// We're going to make the function async in the next step&lt;/span&gt;
    &lt;span class="c1"&gt;// handling the payment&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;paymentHandler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardElement&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Pay&lt;/span&gt; &lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CheckoutPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CardElement will look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZIG42E8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v8v86ach86i3zzhjtc9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZIG42E8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v8v86ach86i3zzhjtc9.PNG" alt="CardElement" width="609" height="171"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;5.&lt;/span&gt; Now we are going to use these two powerful hooks: &lt;code&gt;useStripe&lt;/code&gt; and &lt;code&gt;useElements&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;useElements&lt;/strong&gt; is used to safely pass the payment information collected by the Payment Element to the Stripe API.&lt;br&gt;
&lt;strong&gt;useStripe&lt;/strong&gt; hook returns a reference to the Stripe instance passed to the Elements provider (&lt;em&gt;we're going to use it to confirm payments&lt;/em&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CardElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useElements&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useStripe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@stripe/react-stripe-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CheckoutPayment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStripe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useElements&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;paymentHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Stripe.js has not yet loaded.&lt;/span&gt;
      &lt;span class="c1"&gt;// Make sure to disable form submission until Stripe.js has&lt;/span&gt;
      &lt;span class="c1"&gt;// loaded.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;// hadling the payment&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;paymentHandler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardElement&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Pay&lt;/span&gt; &lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CheckoutPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to complete payment with stripe, we need a &lt;code&gt;clientSecret&lt;/code&gt; which is unique for every payment.&lt;/p&gt;

&lt;p&gt;For this we have to create a &lt;code&gt;paymentIntent&lt;/code&gt; by providing it with the amount and currency.&lt;/p&gt;

&lt;p&gt;This code will be in the backend so let's move to our Node.js code.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;6.&lt;/span&gt; First, we will install stripe in the backend.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install stripe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;7.&lt;/span&gt; For this step, we will need the &lt;strong&gt;stripe test secret key&lt;/strong&gt; which we can get from the dashboard.&lt;/p&gt;

&lt;p&gt;‚ñ∂Ô∏è(&lt;strong&gt;Remember: You must keep your secret API keys confidential. Do not just put it on any version control platform&lt;/strong&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Stripe&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stripe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripeSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;STRIPE_SECRET_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;///////////// Getting client secret /////////////&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/payment/create&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paymentIntent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; 
&lt;span class="nx"&gt;stripeSecret&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paymentIntents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;paymentIntent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client_secret&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;üòÉWhoa!&lt;/strong&gt;&lt;br&gt;
If you have reached up till here then you have covered more than half of the journey. Just a couple more steps to go üî•&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xSJytslq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m1lmks6dvr3n6w7krkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xSJytslq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m1lmks6dvr3n6w7krkd.png" alt="Half way through" width="600" height="630"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we have written our function to get the &lt;code&gt;clientSecret&lt;/code&gt; at the backend.&lt;/p&gt;

&lt;p&gt;Now back to frontend.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;CheckoutPage&lt;/code&gt; component, we need to make a request to our server to create a new &lt;code&gt;paymentIntent&lt;/code&gt; as soon as the page loads.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClientSecret&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setErrorMsg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getClientSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`/api/payment/create?total=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// All API requests expect amounts to be provided&lt;/span&gt;
      &lt;span class="c1"&gt;// in a currency‚Äôs smallest unit.&lt;/span&gt;

      &lt;span class="nx"&gt;setClientSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setErrorMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;getClientSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;the_amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;the_amount&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have now received out &lt;code&gt;clientSecret&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now there's one last step to complete the payment handler function and do some error handling.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;CheckoutPage&lt;/code&gt; component, we will check if the payment is completed by calling &lt;code&gt;stripe.confirmPayment()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CheckoutPayment&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClientSecret&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setErrorMsg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;processing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setProcessing&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="nx"&gt;getClientSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;the_amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;the_amount&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;paymentHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setProcessing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;confirmCardPayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;payment_method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;card&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CardElement&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;paymentIntent&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setErrorMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;setProcessing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setErrorMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;setProcessing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;paymentHandler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardElement&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errorMsg&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;errorMsg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;processing&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Pay&lt;/span&gt; &lt;span class="nx"&gt;Now&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have successfully integrated the payment gateway in our webapp using stripe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: You need to change the &lt;code&gt;test publishable key&lt;/code&gt; and &lt;code&gt;test secret key&lt;/code&gt; with the &lt;code&gt;live publishable and secret key&lt;/code&gt; to use it in the production enviroment.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heres-a-demo-that-i-have-made-with-some-styling"&gt;
  &lt;/a&gt;
  Here's a demo that I have made with some styling:
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#i-call-it-moon-with-stripes"&gt;
  &lt;/a&gt;
  I call it &lt;a href="https://moonclock.herokuapp.com/"&gt;Moon with Stripes&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m8ieFGO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqji5o9jx6yt5odbbz9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m8ieFGO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqji5o9jx6yt5odbbz9v.png" alt="Finally Done!" width="880" height="525"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>payment</category>
    </item>
    <item>
      <title>What Are DApps: A Complete Guide To Decentralized Applications</title>
      <author>Suhail Kakar</author>
      <pubDate>Wed, 03 Nov 2021 23:55:54 +0000</pubDate>
      <link>https://dev.to/suhailkakar/what-are-dapps-a-complete-guide-to-decentralized-applications-oc2</link>
      <guid>https://dev.to/suhailkakar/what-are-dapps-a-complete-guide-to-decentralized-applications-oc2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-dapp"&gt;
  &lt;/a&gt;
  What is a dApp?
&lt;/h2&gt;

&lt;p&gt;A decentralized app (dApp) is a digital application or a program that resides and executes on a blockchain or peer-to-peer network of computers rather than a single computer and is independent of anyone's authority's control.&lt;/p&gt;

&lt;p&gt;DApps is short for &lt;strong&gt;Decentralized applications&lt;/strong&gt; which means it is not controlled by a single organization and they are playing a vital role in the world of blockchain. These decentralized applications operate on a blockchain network in a public, open-source, and decentralized environment that is free of central control and influence.&lt;/p&gt;

&lt;p&gt;Here is a great example of dApps by Cat McGee, which she mentioned in a  &lt;a href="https://twitter.com/hashnode/status/1455453722948034563"&gt;Twitter Space&lt;/a&gt; organized by Hashnode.&lt;/p&gt;

&lt;p&gt;You can create a Twitter-like dApp and deploy it on a blockchain, allowing any user to post tweets. Once they've been uploaded no one, even you (app maker) can &lt;strong&gt;delete&lt;/strong&gt; those tweets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPWtH2T_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635980779353/sc9fmr_V-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPWtH2T_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635980779353/sc9fmr_V-.png" alt="Blue and White Mind Map Presentation (1920 x 1000 px).png" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some dApps features are &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is open-source which means that its source code is available for common users.&lt;/li&gt;
&lt;li&gt;When miners successfully contribute to the ecosystem, they are rewarded with tokens.&lt;/li&gt;
&lt;li&gt;It is decentralized and adopts blockchain technology. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you have good knowledge about dApps, let's learn what are their benefits.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-dapps"&gt;
  &lt;/a&gt;
  Benefits of dApps
&lt;/h2&gt;

&lt;p&gt;DApps have many benefits, however, in this article, I have mentioned only a few of them such as &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-downtime"&gt;
  &lt;/a&gt;
  No downtime
&lt;/h3&gt;

&lt;p&gt;There will be no downtime or restrictions as it doesn't rely on a single point of failure like a hosting server instead it runs on a peer-to-peer network of computers. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transparency"&gt;
  &lt;/a&gt;
  Transparency
&lt;/h3&gt;

&lt;p&gt;Data from decentralized applications are stored on a public ledger, which keeps track of everything in a safe and transparent manner that ensures no one can tamper with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opensource"&gt;
  &lt;/a&gt;
  Open-source
&lt;/h3&gt;

&lt;p&gt;The code of open-source dApps is available for review. Because more input can be offered, and the entire ecosystem can be more adaptable, progress faster, and evolve more safely.&lt;/p&gt;

&lt;p&gt;And yes, we all know, everything has both benefits and drawbacks, so here are a few Drawbacks of dApps &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drawbacks-of-dapps"&gt;
  &lt;/a&gt;
  Drawbacks of dApps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#uxuser-experience"&gt;
  &lt;/a&gt;
  UX/User experience
&lt;/h3&gt;

&lt;p&gt;It may be more difficult to create user-friendly experiences since setting up the tool stack required to communicate with the blockchain in a properly safe manner may be too difficult for the average end-user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maintenance"&gt;
  &lt;/a&gt;
  Maintenance
&lt;/h3&gt;

&lt;p&gt;Because every peer in the network must update their node software, running in a complicated environment dispersed amongst peers makes maintenance, debugging, and updates more difficult.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fewer-thirdparty-dapps"&gt;
  &lt;/a&gt;
  Fewer Third-Party DApps
&lt;/h3&gt;

&lt;p&gt;Sometimes we have to rely on third-party APIs to collect certain third-party information under the present centralized app structure. We don't have this advantage with DApps because there isn't yet a substantial third-party DApps ecosystem in place.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because DApps cannot access APIs through a centralized application, they must engage with other DApps for their API needs, which is also a drawback.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That is it for this article. I hope you found this article useful, if you need any help please let me know in the comment section. &lt;/p&gt;

&lt;p&gt;Would you like to buy me a coffee, You can do it &lt;a href="https://www.buymeacoffee.com/suhailkakar"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;üëã Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
