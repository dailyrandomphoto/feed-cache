<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Azure Durable Functions - Developing Serverless Stateful Workflow </title>
      <author>Jonah Andersson üë©üèª‚ÄçüíªSE</author>
      <pubDate>Fri, 26 Feb 2021 15:56:09 +0000</pubDate>
      <link>https://dev.to/jonahandersson/azure-durable-functions-developing-serverless-stateful-workflow-4787</link>
      <guid>https://dev.to/jonahandersson/azure-durable-functions-developing-serverless-stateful-workflow-4787</guid>
      <description>&lt;h1&gt;
  &lt;a href="#knowledge-sharing-azure-durable-functions-at-my-workplace" class="anchor"&gt;
  &lt;/a&gt;
  Knowledge Sharing Azure Durable Functions at my workplace
&lt;/h1&gt;

&lt;p&gt;Yesterday, I had an opportunity to share technical knowledge with my colleagues at &lt;a href="http://forefront.se/"&gt;Forefront Consulting&lt;/a&gt; during our monthly meeting in our Technology division. I was glad to share insights and knowledge about the basics of one of my &lt;a href="https://medium.com/@jonah.andersson/a-net-software-developers-top-6-favorite-microsoft-azure-technologies-45f945f72605"&gt;favorite Azure cloud services&lt;/a&gt;, Azure Durable Functions.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-azure-durable-functions" class="anchor"&gt;
  &lt;/a&gt;
  What are Azure Durable Functions?
&lt;/h1&gt;

&lt;p&gt;Well, if you have not work with Azure development or familiar with Azure technologies, probably it is hard to understand right away what it is. I hope that this article will enlighten you and give you the basics of it. I personally like to share that this great serverless technology exists!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Azure Durable Functions&lt;/strong&gt; is an extension of &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/"&gt;Azure Functions&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Azure Functions is a serverless solution that allows you to write less code, maintain less infrastructure, and save on costs. Instead of worrying about deploying and maintaining servers, the cloud infrastructure provides all the up-to-date resources needed to keep your applications running. You focus on the pieces of code that matter most to you, and Azure Functions handles the rest.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Azure Durable Functions on the other hand is built on top of Azure Functions. It does more than an Azure Function can do, especially it being when you have to develop a serverless long-running stateful workflow from the code along with the Azure Function in a &lt;a href="https://en.wikipedia.org/wiki/Serverless_computing"&gt;serverless&lt;/a&gt;environment.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#major-benefits-of-using-azure-durable-functions" class="anchor"&gt;
  &lt;/a&gt;
  Major Benefits of Using Azure Durable Functions
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;If you want write complex approval workflows&lt;/li&gt;
&lt;li&gt;If you need to write long-running tasks &lt;/li&gt;
&lt;li&gt;If you need to work with multiple Azure Functions&lt;/li&gt;
&lt;li&gt;If you need to the lifecycle of your tasks&lt;/li&gt;
&lt;li&gt;If you need to create serverless stateful workflows that require human interaction, monitoring, and more&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#azure-durable-task-framework-the-technology-behind" class="anchor"&gt;
  &lt;/a&gt;
  Azure Durable Task Framework - The Technology Behind!
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Behind the scenes, the Durable Functions extension is built on top of the &lt;a href="https://github.com/Azure/durabletask"&gt;Durable Task Framework&lt;/a&gt;, an open-source library on GitHub that's used to build workflows in code. Like Azure Functions is the serverless evolution of Azure WebJobs, Durable Functions is the serverless evolution of the Durable Task Framework. Microsoft and other organizations use the Durable Task Framework extensively to automate mission-critical processes. It's a natural fit for the serverless Azure Functions environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#major-components-in-azure-durable-functions" class="anchor"&gt;
  &lt;/a&gt;
  Major Components in Azure Durable Functions
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Client functions&lt;/strong&gt; are the entry point for creating an instance of a Durable Functions orchestration. They can run in response to an event from many sources, such as a new HTTP request arriving, a message being posted to a message queue, an event arriving in an event stream. You can write them in any of the supported languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Orchestrator functions&lt;/strong&gt;  describe how actions are executed, and the order in which they are run. You write the orchestration logic in code and it is important that these functions are deterministic. Learn more about &lt;a href="Orchestrator%20logic%20must%20be%20deterministic%20because%20the%20whole%20function%20will%20be%20%E2%80%9Creplayed%E2%80%9D%20&amp;lt;br&amp;gt;%0AMore%20info%20about%20Deterministic%20API%E2%80%99s:%20&amp;lt;br&amp;gt;%0Ahttps://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-code-constraints#using-deterministic-apis"&gt;Deterministic APIs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Activity functions&lt;/strong&gt; are the basic units of work in a durable function orchestration. An activity function contains the actual work performed by the tasks being orchestrated.&lt;br&gt;
Entity functions define operations for reading and updating small pieces of state, known as durable entities. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entity Functions&lt;/strong&gt; are only available in Durable Functions 2.0 and above. They are currently supported in .NET and JavaScript.&lt;/p&gt;

&lt;p&gt;Durable Functions have different patterns that are worth checking out. Read more about it &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview?tabs=csharp"&gt;Azure Durable Functions&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#further-reading-and-learning-resources" class="anchor"&gt;
  &lt;/a&gt;
  Further Reading and Learning Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft Azure Functions Documentation
&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/"&gt;https://docs.microsoft.com/en-us/azure/azure-functions/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Microsoft Azure Durable Functions Documentation
&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/durable/"&gt;https://docs.microsoft.com/en-us/azure/azure-functions/durable/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Azure Core Tools 
&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=windows%2Ccsharp%2Cbash"&gt;https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=windows%2Ccsharp%2Cbash&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you like this article, please reshare. Feel free to leave feedback and ask questions. Follow me &lt;a href="https://twitter.com/cjkodare"&gt;Twitter&lt;/a&gt; or via my &lt;a href="https://www.linkedin.com/in/jonahandersson/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>azuredurablefunctions</category>
      <category>azurefunctions</category>
      <category>serverless</category>
      <category>statefulworkflows</category>
    </item>
    <item>
      <title>Understand GraphQL in 5 minutes</title>
      <author>Mehdi Zed</author>
      <pubDate>Fri, 26 Feb 2021 14:33:06 +0000</pubDate>
      <link>https://dev.to/jesuisundev/understand-graphql-in-5-minutes-1oa6</link>
      <guid>https://dev.to/jesuisundev/understand-graphql-in-5-minutes-1oa6</guid>
      <description>&lt;p&gt;When GraphQL arrived on the Internet, it spread like an epidemic. GraphQL has completely changed the way things are done and continues its progression everywhere. If you have five minutes in front of you, I'll explain everything you need to know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#once-upon-a-time" class="anchor"&gt;
  &lt;/a&gt;
  Once upon a time
&lt;/h3&gt;

&lt;p&gt;By 2012, the adoption of mobile phones reached monstrous figures worldwide. &lt;strong&gt;It's such an invasion that companies that didn't adapt their products were at risk.&lt;/strong&gt; At that point, Facebook was at risk.&lt;/p&gt;

&lt;p&gt;Facebook was primarily a web company. &lt;strong&gt;As a result, they made their IOS app like a website, using web-view.&lt;/strong&gt; Very quickly, they realize that web-view was shit (at that time). So they decided to redo it entirely in native, for a better customer experience. Immediately they hit another wall .&lt;/p&gt;

&lt;p&gt;The existing architecture didn't work. &lt;strong&gt;Mainly because the endpoints of their existing REST api don't allow flexibility on the data.&lt;/strong&gt; Multiple round trips to different endpoints were required for nested data, causing slowness and inconsistencies. Part of the payload was not required for most queries, causing unnecessary data transfers. And most importantly, it was tedious for Facebook to handle so many HTTP calls.&lt;/p&gt;

&lt;p&gt;In this infernal context, in February 2012, &lt;a href="https://twitter.com/leeb"&gt;Lee Byron&lt;/a&gt;, &lt;a href="https://twitter.com/dlschafer"&gt;Dan Schafer&lt;/a&gt; and &lt;a href="https://twitter.com/schrockn"&gt;Nick Schrock&lt;/a&gt; reserved some workstations in a corner of Facebook.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcy_eecC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/n5BcBNH.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcy_eecC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/n5BcBNH.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Very quickly a first prototype of GraphQL, then called SuperGraph, was produced by our three devs. In August 2012, GraphQL was shipped in production with the new native Facebook app. In 2015, the first public version arrives on the internet. &lt;strong&gt;GraphQL is still present today when you scroll your Facebook wall.&lt;/strong&gt; But how did they solve a problem that affected not only Facebook, but the whole industry?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-graphql-" class="anchor"&gt;
  &lt;/a&gt;
  What is GraphQL ?
&lt;/h3&gt;

&lt;p&gt;GraphQL is a &lt;strong&gt;data query language&lt;/strong&gt; for APIs. QL, as in SQL, stands for Query Language. &lt;strong&gt;GraphQL allows to manipulate data in a simple, flexible and very precise way.&lt;/strong&gt; GraphQL is not a programming language nor a framework. GraphQL is a specification to implement your API. Concretely it looks like this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Request&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;pokemons&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;abilities&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;damage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;accuracy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;mana&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;type&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"pokemons"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pikachu"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"abilities"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Thunder punch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"damage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"accuracy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"mana"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"physical"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Thunderbolt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"damage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"accuracy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"mana"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"electric"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mewtwo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"abilities"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Earthquake"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"damage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"accuracy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"mana"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ground"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Brutal swing"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"damage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"accuracy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"mana"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"physical"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's how you ask for and receive data using GraphQL. Okay, at the moment, it's not clear. First of all, where does this thing fit into your architecture?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--maCqsJ3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/H8Brhcq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--maCqsJ3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/H8Brhcq.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The dude smiling it's you. And to make the payload I showed you earlier with the Pokemons and their skills, you're in trouble. &lt;strong&gt;You're struggling because the REST API you're using is not made for your needs.&lt;/strong&gt; You end up making one call per Pokemon, then one call per skill for each Pokemon.&lt;/p&gt;

&lt;p&gt;Each time the logic in your application makes a request to the database and sends you a payload. And so, despite your apparent smile, you feel like shooting yourself. That's where GraphQL comes in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lF4vDIYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8vU1KHF.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lF4vDIYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8vU1KHF.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With GraphQL, no more problems. &lt;strong&gt;You make a single POST and you ask exactly what you want via a GraphQL request.&lt;/strong&gt; Then, the server manages everything and you get your full payload.&lt;/p&gt;

&lt;p&gt;With REST, you get objects defined by endpoints. &lt;strong&gt;With GraphQL, you don't adapt to a object defined by the backend, you dynamically define the object you're going to receive on the client side.&lt;/strong&gt; And that changes everything.&lt;/p&gt;

&lt;p&gt;OK, that's all very well, but how does it work in concrete terms? &lt;strong&gt;How does GraphQL access your database and make queries?&lt;/strong&gt; To really understand GraphQL, you have to get your hands on it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#show-me-the-code" class="anchor"&gt;
  &lt;/a&gt;
  Show me the code
&lt;/h3&gt;

&lt;p&gt;I'm going to make you a Javascript implementation (NodeJS).&lt;strong&gt;Be aware that all the following is applicable in any language.&lt;/strong&gt; The GraphQL logic remains the same everywhere since it is above all a specification.&lt;/p&gt;

&lt;p&gt;To start working on GraphQL go to the official site and their implementation list in all languages of the world. To make it simple with NodeJS we need the express-graphql and graphql modules. Let's start by mounting the base server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graphqlHTTP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express-graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;schema/query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graphQLSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GraphQLSchema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;graphqlHTTP&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;graphQLSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;graphiql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;First of all, we call our dependencies. &lt;strong&gt;Then line 6 we look for our root query which we pass to the main schema on line 7.&lt;/strong&gt; We launch our express server, we expose the /graphql route via an express middleware and finally we listen on port 8080. Let's see what happens inside the schema now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;schema/query.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLObjectType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GraphQLList&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pokemonsType&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;schema/types&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RootQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLObjectType&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RootQueryType&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;pokemons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemonsType&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data/pokemons.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;RootQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The schema is central in GraphQL. It will dictate the communication between your client and your server. I*&lt;em&gt;t specifies the queries your clients can make, the types of data that can be retrieved and the relationships between these types.&lt;/em&gt;* Everything is defined in this schema. Starting with the root query.&lt;/p&gt;

&lt;p&gt;The root query allows GraphQL to know what type of data can be retrieved. And here, in my root query, I specify that I have a field pokemon line 9 which is a list of type pokemon line 10.&lt;/p&gt;

&lt;p&gt;Then we have a resolver on line 11. &lt;strong&gt;It's the resolvers that do the job of fetching your data from your database.&lt;/strong&gt; A resolver is assigned to each of your fields. And the resolver for my pokemon field is a pokemon object list. My resolver here returns the data via a JSON file that corresponds to an array of pokemons.&lt;/p&gt;

&lt;p&gt;I return a JSON for the data for simplicity and brevity. &lt;strong&gt;But in real life this is where you are supposed to call your database&lt;/strong&gt;, make queries, and return the data. Now let's see what the types look like.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;schema/types.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLObjectType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GraphQLList&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;abilitiesType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLObjectType&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ability&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;damage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;damage&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;accuracy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accuracy&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;mana&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mana&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokemonsType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLObjectType&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pokemons&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GraphQLString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;abilities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;abilitiesType&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;abilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data/abilities.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;abilities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ability&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;ability&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linkedTo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pokemonsType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pokemonsType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The principle remains the same. We create GraphQL object types that represent our data structure. &lt;strong&gt;We specify fields and for each field, we assign a resolver that will look for the right data.&lt;/strong&gt; It's interesting to see here that I use the context of the parent to filter which abilities to return for each pok√©mon line 44.&lt;/p&gt;

&lt;p&gt;If you want to see a working version of this implementation, &lt;strong&gt;I made a little &lt;a href="https://codesandbox.io/s/graphql-5-minutes-lys1y?fontsize=14&amp;amp;hidenavigation=1&amp;amp;initialpath=%2Fgraphql&amp;amp;theme=dark"&gt;public sandbox&lt;/a&gt; where you can play with it&lt;/strong&gt;. You can see all the files, including the JSON files, and change whatever you want!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/graphql-5-minutes-lys1y?initialpath=/graphql"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Instead of JSON data you could implement the same thing by doing fech on Pok√©API. That would allow you to practice GraphQL as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#epilogue" class="anchor"&gt;
  &lt;/a&gt;
  Epilogue
&lt;/h3&gt;

&lt;p&gt;That's it, I can't go any further in the presentation. I'm already over the five minutes of time you gave me. There's a lot more to be said about this technology. The mutations, the cache, the variables and the contexts. I'll stick to the basics. If you want to know more and have some time to spare, I recommend this &lt;a href="https://ultimatecourses.com/blog/graphql-resolvers-an-in-depth-look"&gt;very complete article&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>graphql</category>
      <category>dev</category>
    </item>
    <item>
      <title>Documenting your ExpressWebJs API with Swagger</title>
      <author>Alex Igbokwe</author>
      <pubDate>Fri, 26 Feb 2021 14:23:34 +0000</pubDate>
      <link>https://dev.to/alexigbokwe/documenting-your-expresswebjs-api-with-swagger-36hf</link>
      <guid>https://dev.to/alexigbokwe/documenting-your-expresswebjs-api-with-swagger-36hf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jk3ia_zK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u09powimhz3p6vzgimu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jk3ia_zK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u09powimhz3p6vzgimu.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Almost every application today has to be connected to share data with other applications. The best way to do that is through APIs and &lt;a href="https://expresswebjs.com/"&gt;ExpressWebjs&lt;/a&gt; is the goto framework for building your node apis.&lt;/p&gt;

&lt;p&gt;In this tutorial, however, we‚Äôre going to explore Swagger usage along with &lt;a href="https://expresswebjs.com/"&gt;expressWebjs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What is Swagger?&lt;br&gt;
On the Swagger site we can find definition of Swagger:&lt;br&gt;
Swagger is the world‚Äôs largest framework of API developer tools for the OpenAPI Specification(OAS), enabling development across the entire API lifecycle, from design and documentation, to test and deployment.&lt;/p&gt;

&lt;p&gt;In our example, we‚Äôll be making use of the two libraries: &lt;a href="https://github.com/scottie1984/swagger-ui-express"&gt;swagger-ui-express&lt;/a&gt; and &lt;a href="https://github.com/Surnet/swagger-jsdoc"&gt;swagger-jsdoc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first is a module that allows you to feed a Swagger UI (auto-generated views based on the swagger-ui project) from a swagger.json file, or from an inline object.&lt;/p&gt;

&lt;p&gt;The second is about integrating Swagger using JSDoc comments in Docs directory in ExpressWebjs. This is pretty useful, especially when you have extensive APIs and dozens of models.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#application-setup" class="anchor"&gt;
  &lt;/a&gt;
  Application setup
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#install-expresswebjs" class="anchor"&gt;
  &lt;/a&gt;
  Install ExpressWebJs
&lt;/h3&gt;

&lt;p&gt;Run the following command in your terminal to create a new project with ExpressWebJs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   npx expresswebcli new myNewApp
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;cd into your newly created project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   cd myNewApp
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Visit my article on &lt;a href="https://dev.to/alexigbokwe/developing-rest-apis-with-expresswebjs-v2-a-nodejs-framework-part-1-1fg4"&gt;developing rest apis with expresswebjs&lt;/a&gt; or &lt;a href="https://expresswebjs.com/"&gt;expresswebjs&lt;/a&gt; documentation for work through on how to get started with expresswebjs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-swagger" class="anchor"&gt;
  &lt;/a&gt;
  Adding swagger
&lt;/h1&gt;

&lt;p&gt;Now that our application is ready, &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xnkizaWA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hon1onugip8hurlncq1l.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xnkizaWA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hon1onugip8hurlncq1l.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we can now integrate swagger by creating our swagger.json file in the root directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;definition&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;openapi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3.0.n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My Website API Documentation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My website API docs with ExpressWebJs and documented with Swagger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;license&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MIT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://spdx.org/licenses/MIT.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;servers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:5100/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Docs/*.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;"apis": ["./Docs/*.js"]&lt;/code&gt; section specifies the path where your actual documentations are. In our case, it is in Docs folder in the root directory.&lt;/p&gt;

&lt;p&gt;After that we can now create our swagger service in App/Service directory.&lt;/p&gt;

&lt;p&gt;In App/Service directory, lets create a Swagger folder with an index.js file. Our path will be App/Service/Swagger/index.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;//App/Service/Swagger/index.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerJsdoc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;swagger-jsdoc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerUi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;swagger-ui-express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../../swagger.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Swagger&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;specs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;swaggerJsdoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;serverApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api-docs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;swaggerUi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;swaggerUi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;specs&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="na"&gt;exporer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Swagger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#expresswebjs-serviceprovider" class="anchor"&gt;
  &lt;/a&gt;
  ExpressWebJs ServiceProvider
&lt;/h1&gt;

&lt;p&gt;Next we will register our swagger service in our application service provider. Navigate to App/Providers/AppServiceProvider.js file and add our swagger service to be executed at boot time&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swagger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../Service/swagger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppServiceProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * Register application services.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Bootstrap any application services.
   *
   * @return void
   */&lt;/span&gt;
  &lt;span class="nx"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;swagger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AppServiceProvider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note: you can create your own service provider. Read more about &lt;a href="https://expresswebjs.com/2.0/guide/service-provider.html"&gt;ExpressWebjs ServiceProvider in the Documentation site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once all the setup is done, you can now start writing your api documentation in the Docs directory.&lt;/p&gt;

&lt;p&gt;To view your swagger docs, run your project using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;and navigate to &lt;code&gt;&lt;a href="http://127.0.0.1/api/api-docs"&gt;http://127.0.0.1/api/api-docs&lt;/a&gt;&lt;/code&gt; in your browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my article &lt;br&gt;
You can follow me on twitter &lt;a href="https://twitter.com/EmekaIgbokwe"&gt;@EmekaIgbokwe&lt;/a&gt;&lt;br&gt;
You can follow ExpressWebJs on twitter &lt;a href="https://twitter.com/expresswebjs"&gt;@expresswebjs&lt;/a&gt;&lt;br&gt;
and don't forget to star on github &lt;a href="https://github.com/Alexigbokwe/ExpressWebJs"&gt;ExpressWebJs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please, let me know if you have any questions in the comment section. üòä&lt;/p&gt;

</description>
      <category>node</category>
      <category>expresswebjs</category>
      <category>javascript</category>
      <category>swagger</category>
    </item>
    <item>
      <title>Pluck single values out of ActiveRecord models or Enumerables</title>
      <author>matt swanson</author>
      <pubDate>Fri, 26 Feb 2021 13:00:00 +0000</pubDate>
      <link>https://dev.to/swanson/pluck-single-values-out-of-activerecord-models-or-enumerables-2gjc</link>
      <guid>https://dev.to/swanson/pluck-single-values-out-of-activerecord-models-or-enumerables-2gjc</guid>
      <description>&lt;p&gt;Rails has a great, expressive term called &lt;code&gt;pluck&lt;/code&gt; that allows you to grab a subset of data from a record. You can use this on ActiveRecord models to return one (or a few) columns.&lt;/p&gt;

&lt;p&gt;But you can also use the same method on regular old &lt;code&gt;Enumerables&lt;/code&gt; to pull out all values that respond to a given key.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;In Rails, use &lt;code&gt;pluck&lt;/code&gt; to query a subset of columns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Shoe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# SELECT "shoes.*" from "shoes"&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; ["Air Force 1", "NMD_2", "Air Jordans", ...]&lt;/span&gt;
&lt;span class="c1"&gt;# This returns an array with all shoe names, but our database query pulled down all of the columns on the `shoes` table&lt;/span&gt;

&lt;span class="no"&gt;Shoe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# SELECT "shoes.name" from "shoes"&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; ["Air Force 1", "NMD_2", "Air Jordans", ...]&lt;/span&gt;
&lt;span class="c1"&gt;# Same result, but we only query exactly the columns we wanted&lt;/span&gt;

&lt;span class="no"&gt;Shoe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:brand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# SELECT "shoes"."name", "shoes"."brand" FROM "shoes"&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [["Air Jordan 1 Mid", "Nike"], ["Air Jordan 1 Mid", "Nike"], ... ]&lt;/span&gt;

&lt;span class="no"&gt;Shoe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:brand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# SELECT DISTINCT "shoes"."brand" FROM "shoes"&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; ["Nike", "Adidas", ...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also use &lt;code&gt;pluck&lt;/code&gt; with &lt;code&gt;Enumerables&lt;/code&gt; when using &lt;code&gt;ActiveSupport&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"David"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"Rafael"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"Aaron"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# =&amp;gt; ["David", "Rafael", "Aaron"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I find the &lt;code&gt;Enumerable&lt;/code&gt; version to be particularly handy when dealing with JSON data from external APIs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"httparty"&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"active_support"&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"active_support/core_ext"&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;HTTParty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http://api.stackexchange.com/2.2/questions?site=stackoverflow'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;questions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s2"&gt;"items"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;questions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# =&amp;gt; [&lt;/span&gt;
&lt;span class="c1"&gt;# "JavaScript to Python - Interpreting JavasScript .filter() to a Python user",&lt;/span&gt;
&lt;span class="c1"&gt;# "Nuxt generate and firebase gives timer warning",&lt;/span&gt;
&lt;span class="c1"&gt;# "Variable expected error when I increment the value of a map",&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="c1"&gt;# ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;While &lt;code&gt;pluck&lt;/code&gt; is most often used with Hashes, you can use it with any object that responds to the message you pass in ‚Äì including regular Ruby objects or Structs.&lt;/p&gt;

&lt;p&gt;Next time you find yourself calling &lt;code&gt;map&lt;/code&gt; to get back a single value, see if your code might be improved by switching to &lt;code&gt;pluck&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-resources" class="anchor"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;p&gt;Rails API Docs: &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-pluck"&gt;ActiveRecord#pluck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rails API Docs: &lt;a href="https://edgeguides.rubyonrails.org/active_support_core_extensions.html#pluck"&gt;Enumerable#pluck&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/_swanson"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0llgMsYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://boringrails.com/images/twitter-banner.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How To Build an SMTP Mail Server with Express, Node, and Gmail</title>
      <author>Michael R.</author>
      <pubDate>Fri, 26 Feb 2021 12:07:36 +0000</pubDate>
      <link>https://dev.to/killshot13/how-to-build-an-smtp-mail-server-with-express-node-and-gmail-aof</link>
      <guid>https://dev.to/killshot13/how-to-build-an-smtp-mail-server-with-express-node-and-gmail-aof</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview" class="anchor"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;Recently I had the opportunity to develop and integrate an SMTP Email Server into a more extensive full-stack application. Today we will reference the code from my solution for this tutorial. &lt;/p&gt;

&lt;p&gt;We'll primarily be using Express and Node to create this server. We‚Äôll also integrate Nodemailer to construct a mailable object and Gmail SMTP Server to deliver our emails free of charge.&lt;/p&gt;

&lt;p&gt;The full codebase can be viewed here:&lt;/p&gt;





&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/killshot13"&gt;
        killshot13
      &lt;/a&gt; / &lt;a href="https://github.com/killshot13/express-smtp-mailer"&gt;
        express-smtp-mailer
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A production-ready Node backend with an Express SMTP mail server configurable for use with contact forms, subscriptions, etc.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#features" class="anchor"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;Before we start coding, we should quantify the expected functionality of our Express mail server. We can always refer back to this list later if confusion develops.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Establish API routes&lt;/em&gt; to a contact form on the frontend.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Receive user data&lt;/em&gt; from these routes upon form submission.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Format a mailable JSON object&lt;/em&gt; with the data received.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Construct a transport function&lt;/em&gt; with Nodemailer in preparation for delivery.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Obtain authorization&lt;/em&gt; from Gmail using credentials stored in the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Call the transport function,&lt;/em&gt; prompting Nodemailer to handoff the email object to the Gmail SMTP Server for delivery.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Request confirmation&lt;/em&gt; of successful delivery and return an error message if not received.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Upon completion, we will have the perfect backend for processing contact forms. Alternatively, our server will also provide a solid base to build a full-stack MERN app with plenty of functionality.&lt;/p&gt;

&lt;p&gt;The production version of the server we are building today powers the backend of &lt;a href="https://ormica.com"&gt;Ormica&lt;/a&gt;, a real estate investment firm in S. Florida.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o0jQDtd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6lgbz7trbzbw34ris8jb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o0jQDtd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6lgbz7trbzbw34ris8jb.jpg" alt="Screenshot of the source code on GitHub"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A basic understanding of fundamental programming concepts and familiarity with at least one server-side programming language such as [&lt;code&gt;Node&lt;/code&gt;, &lt;code&gt;Python&lt;/code&gt;, &lt;code&gt;Ruby&lt;/code&gt;, &lt;code&gt;PHP&lt;/code&gt;].&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A code editor such as &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nodejs.org/en/download"&gt;Node.js&lt;/a&gt; and &lt;a href="https://www.npmjs.com/get-npm"&gt;npm&lt;/a&gt; locally installed. (Current LTS version preferred)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Some developers, including myself, prefer to use &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; or &lt;a href="https://github.com/coreybutler/nvm-windows"&gt;nvm-windows&lt;/a&gt; to simplify Node version management, which is perfectly fine. For further reference you can check out also &lt;a href="https://daily.dev/posts/how-to-use-multiple-node-versions-with-nvm-on-macos-node-version-manager"&gt;How To Use Multiple Node Versions With NVM On MacOS - Node Version Manager&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#development" class="anchor"&gt;
  &lt;/a&gt;
  Development
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#part-1-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Part 1. &lt;em&gt;Dependencies&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#the-moment-has-arrived-time-to-write-some-code" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;The moment has arrived! Time to write some code.&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Begin with these terminal commands to make an empty directory wherever you wish to store your server's local version and create the first file using npm.&lt;/p&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir smtp-email-server
cd smtp-email-server
npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Follow the terminal prompts from npm to create a package.json file. In most cases, the default values will suffice, but be sure to change the entry point to &lt;code&gt;server.js&lt;/code&gt; instead of the proposed &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we need to add the required dependencies (npm packages) to our project. Run the following command and notice that npm automatically creates a new directory called &lt;code&gt;node_modules&lt;/code&gt;. This is normal, so don't change or configure anything in this folder.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express nodemailer morgan dotenv
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Let's glance at a brief overview of each package.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Express&lt;/em&gt; is a minimal and flexible Node.js web application framework that provides a robust set of features.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Nodemailer&lt;/em&gt; is a module designed to allow Node.js applications to send emails securely and efficiently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Morgan&lt;/em&gt; is named after Dexter (a show you should not watch until completion) and provides HTTP request logger middleware for Node.js.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;dotenv&lt;/em&gt; is a zero-dependency module that loads environment variables from a &lt;code&gt;.env&lt;/code&gt; file into &lt;code&gt;process.env&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#part-2-routes" class="anchor"&gt;
  &lt;/a&gt;
  Part 2. &lt;em&gt;Routes&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Let's begin by creating a &lt;code&gt;routes&lt;/code&gt; folder containing &lt;code&gt;routes.js&lt;/code&gt;.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir routes &amp;amp;&amp;amp; cd routes &amp;amp;&amp;amp; touch routes.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Open &lt;code&gt;routes.js&lt;/code&gt; in your code editor and establish a baseline by requiring the dependencies at the top of the file.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require('dotenv').config()

// routes.js
const router = require('express').Router()
const path = require('path')
const nodemailer = require('nodemailer')
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;As you can see, Express has its own built-in router. I have opted to use this option instead of a separate npm package. This helps keep our application lightweight and efficient.&lt;/p&gt;

&lt;p&gt;Our next order of work will involve setting up authentication using our Gmail account credentials. Don't forget to add the &lt;code&gt;.env&lt;/code&gt; file in the root directory rather than our current location.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const transport = {
    //this is the authentication for sending email.
host: 'smtp.gmail.com',
port: 465,
secure: true, // use TLS
//create a .env file and define the process.env variables 
    with your credentials.
auth: {
    user: process.env.SMTP_TO_EMAIL,
    pass: process.env.SMTP_TO_PASSWORD,
},
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Remember the transport function we mentioned earlier? In this step, we will construct that same function. Let's have a look!&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const transporter = nodemailer.createTransport(transport)
    transporter.verify((error, success) =&amp;gt; {
if (error) {
    //if error happened code ends here
    console.error(error)
} else {
    //this means success
    console.log('Ready to send mail!')
}
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now let's build the API routes. We will simultaneously define the schema for our JSON object (email).&lt;/p&gt;

&lt;p&gt;In simple terms, we are telling Nodemailer about the form data it will be receiving from the front-end and how it should translate said data into a structured email.&lt;/p&gt;

&lt;p&gt;Finally, we call the &lt;code&gt;transporter.sendMail&lt;/code&gt; function, Nodemailer works its magic, and the email goes on its merry way to the recipient's inbox.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.get('/', (req, res, next) =&amp;gt; {
res.status(200).json({ msg: 'Working' })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/', (req, res, next) =&amp;gt; {
    //make mailable object
    const mail = {
    from: process.env.SMTP_FROM_EMAIL,
    to: process.env.SMTP_TO_EMAIL,
    subject: 'New Contact Form Submission',
    text: `
      from:
      ${req.body.name}

      contact details
      email: ${req.body.email}
      phone: ${req.body.tel}

      message:
      ${req.body.message}`,
    }
    transporter.sendMail(mail, (err, data) =&amp;gt; {
        if (err) {
            res.json({
                status: 'fail',
            })
        } else {
            res.json({
                status: 'success',
            })
        }
    })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;The last block of code in this file instructs Express to use the routes we have established; finally, we export the entire router to the Node server.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Answer API requests.
router.use('/api', function (req, res) {
    res.set('Content-Type', 'application/json')
    res.send('{"message":"Hello from the custom 
server!"}')
})

// All remaining requests return the React app, so it can 
handle routing.
router.use('*', function (request, response) {
    response.sendFile(path.resolve(__dirname, '/react- 
ui/build', 'index.html'))
})

module.exports = router
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;NOTE: &lt;em&gt;If you are unfamiliar with &lt;code&gt;process.env&lt;/code&gt; or merely need a &amp;gt; refresher, this Codeburst article provides a splendid reference point.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="https://codeburst.io/process-env-what-it-is-and-why-when-how-to-use-it-effectively-505d0b2831e7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HgcFPi4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AF8McfmaeJ6Hxyn-qhUgrAg.jpeg" alt="Joseph Matthias Goh"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://codeburst.io/process-env-what-it-is-and-why-when-how-to-use-it-effectively-505d0b2831e7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;process.env: What it is and why/when/how to use it effectively | by Joseph Matthias Goh | codeburst&lt;/h2&gt;
      &lt;h3&gt;Joseph Matthias Goh „Éª &lt;time&gt;Jun 20, 2018&lt;/time&gt; „Éª 5 min read
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ze5yh_2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        codeburst.io
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#part-3-server" class="anchor"&gt;
  &lt;/a&gt;
  Part 3. &lt;em&gt;Server&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Let's create a &lt;code&gt;server.js&lt;/code&gt; file in the root directory and open it with the editor.&lt;/p&gt;

&lt;p&gt;Here we are just ensuring everything runs smoothly. I could write an entire article about each of the parameters defined here, but the template is pretty standard. &lt;/p&gt;

&lt;p&gt;Let's start by defining some initial requirements.&lt;/p&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express')
const cluster = require('cluster')
const numCPUs = require('os').cpus().length
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now we should check the environment to see if we are running in production. If so, we use a &lt;a href="https://nodejs.org/api/cluster.html"&gt;cluster of Node processes&lt;/a&gt; to distribute the stress of running the application as evenly as possible across the server cores.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const isDev = process.env.NODE_ENV !== 'production'

// Multi-process to utilize all CPU cores.
if (!isDev &amp;amp;&amp;amp; cluster.isMaster) {
    console.error(`Node cluster master ${process.pid} is 
running`)

    // Fork workers.
    for (let i = 0; i &amp;lt; numCPUs; i++) {
        cluster.fork()
    }

    cluster.on('exit', (worker, code, signal) =&amp;gt; {
        console.error(
            `Node cluster worker 
${worker.process.pid} exited: code ${code}, signal ${signal}`
        )
    })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;We will then connect to the frontend, priority serve our static HTML files, define some middleware for AJAX parsing, and finally call the routes we are importing from the &lt;code&gt;routes.js&lt;/code&gt; file, all in that order.&lt;/p&gt;

&lt;p&gt;We wrap it up with some error logging for the development environment, and voila! Our Express mail server is humming along.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;else {
     const app = express()
 const morgan = require('morgan')
 const path = require('path')

 const PORT = process.env.PORT || 5000

 // Priority serve any static files.
 // Replace the example to connect to your frontend.
 app.use(express.static(path.join(__dirname, 
     '/example/frontend.js')))

 // dev middleware
 app.use(morgan('dev'))

 // configure body parser for AJAX requests
 app.use(express.urlencoded({ extended: false }))
 app.use(express.json())

 const routes = require('./routes/routes')

 // after all middleware functions
 app.use('/', routes)

 app.listen(PORT, function () {
    console.error(
        `Node ${
            isDev ? 'dev server' : 'cluster 
     worker ' + process.pid
        }: listening on port ${PORT}`
    )
 })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#smtp-email-server-is-complete-congratulations" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;SMTP Email Server is complete! Congratulations!&lt;/em&gt;
&lt;/h3&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE: &lt;em&gt;If you encounter difficulty with the authentication&lt;br&gt;
process, read this Google Support documentation! It will save&lt;br&gt;
you hours of debugging and Excedrin.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3fG2wrfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1323252806623678465/sOjADzZF_normal.jpg" alt="Michael R profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Michael R
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @killsh0t13
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Some well-hidden tips to keep in mind when setting up an SMTP server. I learned the hard way to do better research! üòÖ&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/JSwbDjWqSE"&gt;support.google.com/accounts/answe‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      00:58 AM - 18 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1350970875835777026" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1350970875835777026" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1350970875835777026" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We‚Äôve successfully created an SMTP Email Server using Express and Node. We also learned how to integrate Nodemailer and Gmail to streamline the mailing process.&lt;/p&gt;




&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/killshot13"&gt;
        killshot13
      &lt;/a&gt; / &lt;a href="https://github.com/killshot13/express-smtp-mailer"&gt;
        express-smtp-mailer
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A production-ready Node backend with an Express SMTP mail server configurable for use with contact forms, subscriptions, etc.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;Feel free to clone the source code and explore your own methods of implementation. I hope you have found this tutorial useful, and thank you for taking the time to follow along!&lt;/p&gt;

&lt;p&gt;Please don't forget to üíñ this article and leave a üí≠. If you're feeling extra generous, click my name below so I get that üéÜsubscribeüéá notification!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;-- killshot13&lt;/p&gt;
&lt;/blockquote&gt;





&lt;div class="ltag__user ltag__user__id__497515"&gt;
  
    .ltag__user__id__497515 .follow-action-button {
      background-color: #1d2630 !important;
      color: #baeda5 !important;
      border-color: #1d2630 !important;
    }
  
    &lt;a href="/killshot13" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WbYY2jsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jjPTR9c8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497515/85abf111-5f97-462e-8e83-fe46b3be008b.jpeg" alt="killshot13 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/killshot13"&gt;Michael R.&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/killshot13"&gt;Web/App Developer, Data Analyst, Beta Tester, Entrepreneur, Small Business Owner, Blogger, Security &amp;amp; Privacy Advocate&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>tutorial</category>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Debug Why React (Re-)Renders a Component</title>
      <author>Michael Hoffmann</author>
      <pubDate>Fri, 26 Feb 2021 07:18:50 +0000</pubDate>
      <link>https://dev.to/mokkapps/debug-why-react-re-renders-a-component-3i8e</link>
      <guid>https://dev.to/mokkapps/debug-why-react-re-renders-a-component-3i8e</guid>
      <description>&lt;p&gt;&lt;small&gt;&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@flowforfrank?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ferenc Almasi&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/small&gt;  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; is known for its performance by using the Virtual DOM (VDOM). It only triggers an update for the parts of the real DOM that have changed. In my opinion, it is important to know when React triggers a re-rendering of a component to be able to debug performance issues and develop fast and efficient components.&lt;/p&gt;

&lt;p&gt;After reading this article, you should have a good understanding of how React rendering mechanism is working and how you can debug re-rendering issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents&lt;a href="#table-of-contents"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-rendering"&gt;What is rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#virtual-dom"&gt;Virtual DOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-causes-a-render-in-react"&gt;What causes a render in React?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#debug-why-a-component-rendered"&gt;Debug why a component rendered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-rendering" class="anchor"&gt;
  &lt;/a&gt;
  What is rendering?&lt;a href="#what-is-rendering"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;First, we need to understand what rendering in the context of a web application means.&lt;/p&gt;

&lt;p&gt;If you open a website in the browser, what you see on your screen is described by the &lt;a href="https://www.w3.org/DOM/Overview"&gt;DOM (Document Object Model)&lt;/a&gt; and represented through &lt;a href="https://en.wikipedia.org/wiki/HTML"&gt;HTML (Hypertext Markup Language)&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;DOM nodes are created by React if the JSX code is converted. We should be aware that real DOM updates are slow as they cause a re-drawing of the UI. This becomes a problem if React components become too big or are nested on multiple levels. Each time a component is re-rendered its JSX is converted to DOM nodes which takes extra computation time and power. This is where React‚Äôs Virtual DOM comes into the game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-dom" class="anchor"&gt;
  &lt;/a&gt;
  Virtual DOM&lt;a href="#virtual-dom"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;React uses a Virtual DOM (VDOM) as an additional abstraction layer on top of the DOM which reduces real DOM updates. If we change the state in our application, these changes are first applied to the VDOM. The &lt;a href="https://www.npmjs.com/package/react-dom"&gt;React DOM library&lt;/a&gt; is used to efficiently check what parts of the UI &lt;strong&gt;really&lt;/strong&gt; need to be visually updated in the real DOM. This process is called &lt;strong&gt;diffing&lt;/strong&gt; and is based on these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;VDOM gets updated by a state change in the application.&lt;/li&gt;
&lt;li&gt;New VDOM is compared against a previous VDOM snapshot.&lt;/li&gt;
&lt;li&gt;Only the parts of the real DOM are updated which have changed. There is no DOM update if nothing has changed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="///static/8df0ed845cf2b0009d454a1faa31c0a2/e6f81/react-vdom-dom.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M7k8ZUxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mokkapps.de/static/8df0ed845cf2b0009d454a1faa31c0a2/15ec7/react-vdom-dom.jpg" alt="React VDOM DOM" title="React VDOM DOM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More details about this mechanism can be found in &lt;a href="https://reactjs.org/docs/reconciliation.html"&gt;React‚Äôs documentation about reconciliation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-causes-a-render-in-react" class="anchor"&gt;
  &lt;/a&gt;
  What causes a render in React?&lt;a href="#what-causes-a-render-in-react"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A rendering in React is caused by&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;changing the state&lt;/li&gt;
&lt;li&gt;passing props&lt;/li&gt;
&lt;li&gt;using &lt;a href="https://reactjs.org/docs/context.html"&gt;Context API&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;React is extremely careful and re-renders ‚Äúeverything all the same time‚Äù. Losing information by not rendering after a state change could be very dramatic this is why re-rendering is the safer alternative.&lt;/p&gt;

&lt;p&gt;I created a demo project on &lt;a href="https://stackblitz.com/edit/react-when-does-component-render-demo"&gt;StackBlitz&lt;/a&gt; which I will use in this article to demonstrate React‚Äôs rendering behavior:&lt;/p&gt;

&lt;p&gt;The project contains a parent component, which basically consists of two child components where one component receives props and the other not:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RENDERED -&amp;gt; Parent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, we log a warning message in the console each time the component‚Äôs &lt;code&gt;render&lt;/code&gt; function is called. In our example, we use functional components and therefore the execution of the whole function is similar to the &lt;code&gt;render&lt;/code&gt; function of class components.&lt;/p&gt;

&lt;p&gt;If you take a look at the console output of the &lt;a href="https://stackblitz.com/edit/react-when-does-component-render-demo"&gt;StackBlitz demo&lt;/a&gt;, you can see that the render method is called &lt;strong&gt;three&lt;/strong&gt; times:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Render &lt;code&gt;Parent&lt;/code&gt; component&lt;/li&gt;
&lt;li&gt;Render &lt;code&gt;Child&lt;/code&gt; even if it has no props&lt;/li&gt;
&lt;li&gt;Render &lt;code&gt;Child&lt;/code&gt; with &lt;code&gt;name&lt;/code&gt; value from state as prop&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you now modify the name in the input field we trigger a state change for each new value. Each state change in the parent component triggers a re-rendering of the child components even if they did not receive any props.&lt;/p&gt;

&lt;p&gt;Does it mean that React re-renders the real DOM each time we call the &lt;code&gt;render&lt;/code&gt; function? No, React only updates the part of the UI that changed. A render is scheduled by React each time the state of a component is modified. For example, updating state via the &lt;code&gt;setState&lt;/code&gt;hook will not happen immediately but React will execute it at the best possible moment.&lt;/p&gt;

&lt;p&gt;But calling the &lt;code&gt;render&lt;/code&gt; function has some side-effects even if the real DOM is not re-rendered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the code inside the render function is executed each time, which can be time-consuming depending on its content&lt;/li&gt;
&lt;li&gt;the diffing algorithm is executed for each component to be able to determine if the UI needs to be updated&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#visualize-rendering" class="anchor"&gt;
  &lt;/a&gt;
  Visualize rendering&lt;a href="#visualize-rendering"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is possible to visualize React‚Äôs VDOM as well as the native DOM rendering in the web browser.&lt;/p&gt;

&lt;p&gt;To show the React‚Äôs &lt;strong&gt;virtual&lt;/strong&gt; render you need to install &lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi"&gt;React DevTools&lt;/a&gt; in your browser. You can then enable this feature under &lt;code&gt;Components -&amp;gt; View Settings -&amp;gt; Highlight updated when component render&lt;/code&gt;. This way we can see when React calls the render method of a component as it highlights the border of this component. This is similar to the console logs in my demo application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8FRBVj_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.mokkapps.de/476b6d2ea7d66c174055a24a3cbe54e4/react-devtools-rendering.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FRBVj_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.mokkapps.de/476b6d2ea7d66c174055a24a3cbe54e4/react-devtools-rendering.gif" alt="React DevTools Highlight component render GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we want to see what gets updated in the real DOM, therefore we can use the Chrome DevTools. Open it via &lt;code&gt;F12&lt;/code&gt;, go to the three-dot menu on right and select &lt;code&gt;More tools -&amp;gt; Rendering -&amp;gt; Paint flashing&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ixG-5QKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.mokkapps.de/1a839dd3a27d4c8ceec36e2f53e707f0/react-chrome-devtools-rendering-paint-flashing.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ixG-5QKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.mokkapps.de/1a839dd3a27d4c8ceec36e2f53e707f0/react-chrome-devtools-rendering-paint-flashing.gif" alt="Chrome DevTools render paint flashing GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debug-why-a-component-rendered" class="anchor"&gt;
  &lt;/a&gt;
  Debug why a component rendered&lt;a href="#debug-why-a-component-rendered"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In our small example, it was quite easy to analyze what action caused a component to render. In larger applications, this can be more tricky as components tend to be more complex. Luckily, we can use some tools which help us to debug what caused a component to render.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-devtools" class="anchor"&gt;
  &lt;/a&gt;
  React DevTools&lt;a href="#react-devtools"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We can again use the Profiler of the &lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi"&gt;React DevTools&lt;/a&gt;. This feature records why each component rendered while the profiling was active. You can enable it in the React DevTools Profiler tab:&lt;/p&gt;

&lt;p&gt;&lt;a href="///static/3c521cf404877bd3d4152f10ef3c88ee/0f98f/react-devtools-profiler.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K7wr_26G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mokkapps.de/static/3c521cf404877bd3d4152f10ef3c88ee/15ec7/react-devtools-profiler.jpg" alt="React DevTools Profiler" title="React DevTools Profiler"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we now start the profiling, trigger a state change, and stop the profiling we can see that information:&lt;/p&gt;

&lt;p&gt;&lt;a href="///static/0171c9f204f5166e835e668c44d7d851/0f98f/react-devtools-profiler-result.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZAjsXm2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mokkapps.de/static/0171c9f204f5166e835e668c44d7d851/15ec7/react-devtools-profiler-result.jpg" alt="React DevTools Profiler Result" title="React DevTools Profiler Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But as you can see, we only get the information that the component rendered because of a state change triggered by hook but we still don‚Äôt know why this hook caused a rendering.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-did-you-render" class="anchor"&gt;
  &lt;/a&gt;
  Why did you render?&lt;a href="#why-did-you-render"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;To debug why a hook caused a React component to render we can use the npm package &lt;a href="https://github.com/welldone-software/why-did-you-render"&gt;Why Did You Render&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It monkey patches React to notify you about avoidable re-renders.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So it is very useful to track when and why a certain component re-renders.&lt;/p&gt;

&lt;p&gt;I included the npm package in my demo project on &lt;a href="https://stackblitz.com/edit/react-when-does-component-render-demo"&gt;StackBlitz&lt;/a&gt;, to enable it you need to enable it inside the &lt;code&gt;Parent.jsx&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;whyDidYouRender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we now trigger a parent re-rendering by toggling the ‚ÄúToggle Context API‚Äù checkbox we can see additional console logs from the library:&lt;/p&gt;

&lt;p&gt;&lt;a href="///static/9626b1d20c8254e59601315bb38bfaa5/0f98f/react-wdyr.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6gIrF_4j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mokkapps.de/static/9626b1d20c8254e59601315bb38bfaa5/15ec7/react-wdyr.jpg" alt="Why did you render?" title="Why did you render?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The console output is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{Parent: ∆í}
Re-rendered because the props object itself changed but its values are all equal.
This could have been avoided by making the component pure, or by preventing its father from re-rendering.
More info at http://bit.ly/wdyr02

prev props: {} !== {} :next props

{App: ∆í}
Re-rendered because of hook changes:
different objects. (more info at http://bit.ly/wdyr3)
{prev : false} !== {next : true}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see from the output we get detailed information on what caused the re-rendering (for example if it was a prop or hook change) and which data were compared, for example, which props and state were used for the diffing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion&lt;a href="#conclusion"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In this article, I explained why React re-renders a component and how you can visualize and debug this behavior. I learned a lot while writing this article and building the demo application. I also hope that you got a better understanding of how React rendering works and that you now know how to debug your re-rendering issues.&lt;/p&gt;

&lt;p&gt;In the future, I will write more about React, so follow me on &lt;a href="https://twitter.com/mokkapps"&gt;Twitter&lt;/a&gt; to get notified about the latest articles.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The Mystery of Rotate Method in HTML Canvas
</title>
      <author>Kaho Shibuya</author>
      <pubDate>Fri, 26 Feb 2021 06:22:38 +0000</pubDate>
      <link>https://dev.to/shivchan/the-mystery-of-rotate-method-in-html-canvas-2aoa</link>
      <guid>https://dev.to/shivchan/the-mystery-of-rotate-method-in-html-canvas-2aoa</guid>
      <description>&lt;p&gt;Following &lt;a href="https://www.w3schools.com/graphics/canvas_clock.asp"&gt;this w3school's tutorial&lt;/a&gt;, I created an analog clock with HTML canvas.&lt;/p&gt;

&lt;p&gt;In the process of creating it, I encountered the mystery of canvas and it puzzled me a lot!&lt;br&gt;
However, thanks to &lt;a href="https://stackoverflow.com/questions/66347245/why-are-multiple-rotate-needed-to-place-every-number-on-the-right-spot-canv/66347497#66347497"&gt;Stack Overflow&lt;/a&gt; (I mean thanks to &lt;a href="https://stackoverflow.com/users/3702797/kaiido"&gt;Kaiido&lt;/a&gt; who answered my question), I think I understand how HTML canvas works.&lt;/p&gt;

&lt;p&gt;Now, I share my understanding.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-is-the-problem" class="anchor"&gt;
  &lt;/a&gt;
  What is the problem?
&lt;/h1&gt;

&lt;p&gt;There are five steps in the tutorial and &lt;a href="https://www.w3schools.com/graphics/canvas_clock_numbers.asp"&gt;"Clock Numbers"&lt;/a&gt; was the Chinese Wall for me.&lt;br&gt;
In this section, you place each number upright in the right position of the clock.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;drawNumbers&lt;/code&gt;, the following, makes it happen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawClock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;drawFace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;drawNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ang&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.15&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;px arial&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textBaseline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;middle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textAlign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;ang&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ang&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.85&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ang&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ang&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.85&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ang&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the for-loop in the function, you can see there are a bunch of &lt;code&gt;rotate&lt;/code&gt; methods.&lt;br&gt;&lt;br&gt;
They look like rotating and rotating back several times and it confused me.&lt;/p&gt;

&lt;p&gt;Since there was no detailed explanation on w3school's tutorial, I had no clues! (&lt;strong&gt;Please add it!&lt;/strong&gt;)&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#whats-happening-in-this-for-loop-is" class="anchor"&gt;
  &lt;/a&gt;
  What's happening in this for loop is...
&lt;/h1&gt;

&lt;p&gt;First, let's see how &lt;code&gt;1&lt;/code&gt; will be placed and break it down to see what happens on each line of the code. (only inside of for-loop)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ang&lt;/code&gt; is œÄ/6 radian that is equal to 30 degrees.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ctx.rotate(ang)&lt;/code&gt; rotates the entire canvas 30 degrees clockwise.&lt;br&gt;
Since the rotation center point is changed from the origin to the center of the clock by using &lt;code&gt;ctx.translate(radius, radius);&lt;/code&gt; (see the final code &lt;a href="https://codepen.io/ShivChan/pen/LYbOMYJ"&gt;here&lt;/a&gt;), it rotates like the image below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ckqkqOjU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkvj0heccg7bw0xhu4jf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ckqkqOjU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkvj0heccg7bw0xhu4jf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The yellow square shows the original position while the gray square shows the position at the moment.&lt;br&gt;
Assume the gray one as being on the yellow one and gets rotated 30 degrees.&lt;br&gt;
Plus, the green circle is the rotation center point set as a reference.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ctx.translate(0, -radius * 0.85);&lt;/code&gt; moves the entire canvas its y-direction.  The value is negative, so it goes up.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yiDc9CvN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utva9k7wotdg41pt4218.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yiDc9CvN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utva9k7wotdg41pt4218.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Since the canvas now is rotated 30 degrees, the y-direction looks going diagonal way.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ctx.rotate(-ang)&lt;/code&gt; rotates the entire canvas 30 degrees counter-clockwise.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YRDqsZM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjl245fwxunxkpp67p5d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YRDqsZM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjl245fwxunxkpp67p5d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ctx.fillText(num.toString(), 0, 0);&lt;/code&gt; shows the number, which is &lt;code&gt;1&lt;/code&gt; this time.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iDv8D_Mr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2koh8b3zvulbxkit5sb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iDv8D_Mr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2koh8b3zvulbxkit5sb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The number is upright and positions in the right place.&lt;br&gt;
However, if you "fillText" at the wrong timing, the number would look different.  Take a look at the example below.&lt;br&gt;
Assuming you "fillText" before rotating the entire canvas back.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nx"&gt;ang&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ang&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.85&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//"fillText" before rotating back.&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ang&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ang&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.85&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ang&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hmWpfzjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2i0pb0m1lpktf6ibqa0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hmWpfzjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2i0pb0m1lpktf6ibqa0.png" alt="Alt Text"&gt;&lt;/a&gt; The number is on the tilt.&lt;br&gt;
Be careful and make sure when to use which method!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Again, &lt;code&gt;ctx.rotate(ang)&lt;/code&gt; rotates the entire canvas 30 degrees clockwise.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wl567qCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/300wug3t648mf9m9buf1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wl567qCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/300wug3t648mf9m9buf1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ctx.translate(0, radius * 0.85);&lt;/code&gt; moves the entire canvas its y-direction.  This time, the value is positive, so it goes down.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HxzzR1EB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lsg6xifznf7angsjtuq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HxzzR1EB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lsg6xifznf7angsjtuq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ctx.rotate(-ang)&lt;/code&gt; rotates the entire canvas 30 degrees couter-clockwise.  It comes back to the original position.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_qBnw6qC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wagrnj4ctpqjsuhmvycs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_qBnw6qC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wagrnj4ctpqjsuhmvycs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's all process for one number.  After getting back the position to the original, the same thing happens in turn till it gets to number 12.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ShivChan/embed/LYbOMYJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You cannot actually see how the canvas transforms, so it was hard for me to understand what's going on, especially &lt;code&gt;rotate&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;This is my understanding and an attempt to visualize the process, so if you notice something wrong here please leave a comment and point them out.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>canvas</category>
      <category>html</category>
      <category>javascript</category>
      <category>w3school</category>
    </item>
    <item>
      <title>You Need to Try These 10 NPM Packages as a React Developer</title>
      <author>Nitin Ranganath</author>
      <pubDate>Fri, 26 Feb 2021 05:33:05 +0000</pubDate>
      <link>https://dev.to/itsnitinr/you-need-to-try-these-10-npm-packages-as-a-react-developer-3okg</link>
      <guid>https://dev.to/itsnitinr/you-need-to-try-these-10-npm-packages-as-a-react-developer-3okg</guid>
      <description>&lt;p&gt;As web developers, we tend to make use of several NPM packages on a daily basis for different reasons, from simple ones like adding colors to the &lt;code&gt;console.log()&lt;/code&gt; statements on our terminal to fully-fledged front-end libraries such as React. These packages increase our productivity and save us a lot of time by not having to rewrite things that have been implemented several times by tons of users. &lt;/p&gt;

&lt;p&gt;In this post, I'll introduce you to 10 NPM packages that you should check out if you're learning React or already are an experienced user. We'll be going over multiple domains such as UI frameworks to utility-based packages. Without further ado, let's get started.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#material-ui" class="anchor"&gt;
  &lt;/a&gt;
  Material UI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wcORLxgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/CX3G0nA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wcORLxgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/CX3G0nA.png" alt="Material UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://material-ui.com/"&gt;Material UI&lt;/a&gt; is probably one of the best UI frameworks built for React, allowing you to build a consistent design system while leveraging Google's Material Design. Material UI helps you in building and designing by providing over 50+ components such as cards, progress bars, modals, and a lot more, which you can further theme as per your requirements. If I had to recommend a UI framework to a React developer, Material UI would surely be my first choice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@material-ui/core"&gt;Link to NPM Package&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redux-toolkit" class="anchor"&gt;
  &lt;/a&gt;
  Redux Toolkit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QFWh-4fE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/IcoYJoU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QFWh-4fE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/IcoYJoU.png" alt="Redux Toolkit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although the &lt;code&gt;useContext&lt;/code&gt; and &lt;code&gt;useReducer&lt;/code&gt; hooks have reduced the need of using Redux in modern applications, it's not uncommon to see a lot of codebases still Redux for global state management. Redux is still a valuable skill to learn in my opinion and does have its own use cases. However, the amount of boilerplate it takes to set up Redux in your React application can be overwhelming, especially for beginners.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://redux-toolkit.js.org/"&gt;Redux Toolkit&lt;/a&gt; aims to solve just that! It is advertised as the official, opinionated, batteries-included toolset for efficient Redux development and is also highly recommended by the official Redux team to write your Redux logic. Do yourself and your codebase a favor by choosing Redux Toolkit over regular Redux next time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@reduxjs/toolkit"&gt;Link to NPM Package&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-icons" class="anchor"&gt;
  &lt;/a&gt;
  React Icons
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwGJFNwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/ArZU8of.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwGJFNwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/ArZU8of.png" alt="React Icons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://react-icons.github.io/react-icons/"&gt;React Icons&lt;/a&gt; is a marvelous package that consolidates icons from over a dozen of popular icon sets such as Font Awesome, Material Icons, Ant Design Icons, and more. This makes it extremely easy to have access to all your favorite icons just by installing a single package without having to install each of them individually. Through ES6 imports, you can make sure that you import only those icons which you intend to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/react-icons"&gt;Link to NPM Package&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-google-login" class="anchor"&gt;
  &lt;/a&gt;
  React Google Login
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1kAAj9Sz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/gWEg0b7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1kAAj9Sz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/gWEg0b7.png" alt="React Google Login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OAuth or Open Authorization enables users to sign up or log in to your website through other providers such as Google, Facebook, Twitter, GitHub, and more. You must've noticed the 'Login with Google' button on lots of popular websites. &lt;a href="https://anthonyjgrove.github.io/react-google-login/"&gt;React Google Login&lt;/a&gt; allows you to accomplish the same functionality and makes the authorization process easy for you. All you need is an API key from Google and you're set to implement Google OAuth in your website using this simple package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/react-google-login"&gt;Link to NPM Package&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#formik" class="anchor"&gt;
  &lt;/a&gt;
  Formik
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aCs3uWoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/jbXAB0o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aCs3uWoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/jbXAB0o.png" alt="Formik"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://formik.org/"&gt;Formik&lt;/a&gt; makes the painstaking job of building forms in React easier by taking care of all the repetitive stuff such as keeping track of value state, change handlers, submit handlers, validation, and more. This form library is small, simple and encourages you to spend less time writing form code and focus on building your big thing. It is well documented and has a dedicated tutorial for you to get familiar with it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/formik"&gt;Link to NPM Package&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-query" class="anchor"&gt;
  &lt;/a&gt;
  React Query
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V8nxfGly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/oXQ82Ic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V8nxfGly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/oXQ82Ic.png" alt="React Query"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An essential part of a full-stack web application is fetching the data from your backend API or server state and loading them into your component or global state. If you're using Redux, this process might be firing an action in your &lt;code&gt;useEffect&lt;/code&gt; hook to fetch data from your backend when the component is mounted. Well, what if there could be a better alternative to this approach?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://react-query.tanstack.com/"&gt;React Query&lt;/a&gt; is an excellent data-fetching library that is the perfect candidate for this use case. Not only fetching, but React Query is also capable of caching, synchronizing, updating server state, paginating, and even lazy loading. Everything you need to make your interactions with the backend more fruitful is baked into this library and I highly encourage you to give it a try. Alongside performance improvements, it will help you make your codebase cleaner and more maintainable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/react-query"&gt;Link to NPM Package&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styled-components" class="anchor"&gt;
  &lt;/a&gt;
  Styled Components
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E1jgiNhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/mQx4kBV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E1jgiNhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/mQx4kBV.png" alt="Styled Components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://styled-components.com/"&gt;Styled Components&lt;/a&gt; is a CSS-in-JS library which JavaScipt's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;tagged template literals&lt;/a&gt; to create styled HTML components. Why should you consider this over the regular CSS approach? Good question! Styled Components provides a component-like structure to your custom styled elements and saves you from typing &lt;code&gt;className&lt;/code&gt; a bunch of times. Furthermore, it has some valuable features like automatic vendor prefixing and automatic critical CSS. Since Styled Components use the regular CSS syntax, you can transition pretty quickly to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/styled-components"&gt;Link to NPM Package&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#axios" class="anchor"&gt;
  &lt;/a&gt;
  Axios
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aa3FcCAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/wpnP302.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aa3FcCAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/wpnP302.png" alt="Axios"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/axios/axios"&gt;Axios&lt;/a&gt; is a promise-based HTTP client based on the &lt;code&gt;XMLHttpRequest&lt;/code&gt; interface which helps you make HTTP requests in order to fetch some data. But wait, isn't that what the native &lt;code&gt;fetch()&lt;/code&gt; is used for. Well, yes. Just like other packages, the goal of this package is the simplify the process and provide more features such as automatic JSON data transformation, intercept request and response data, protect against XSRF, cancel requests and provide you a simpler API to work with for making HTTP requests. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/axios"&gt;Link to NPM Package&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#framer-motion" class="anchor"&gt;
  &lt;/a&gt;
  Framer Motion
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HjnoW7qh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/dZwFPXJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HjnoW7qh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/dZwFPXJ.png" alt="Framer Motion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.framer.com/motion/"&gt;Framer Motion&lt;/a&gt; is an amazing animation and motion library for React to make your websites more interactive and fun to look at. Just visit their landing page, and you'll be blown off by the sheer ease to use and the number of features they provide ranging from general animations, gesture-based animations, drag animations, scroll animations and so much more.  Let me put it this way: if you were on the lookout for animation libraries, look no further than Framer Motion.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://npmjs.com/package/framer-motion"&gt;Link to NPM Package&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reselect" class="anchor"&gt;
  &lt;/a&gt;
  Reselect
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QFWh-4fE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/IcoYJoU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QFWh-4fE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/IcoYJoU.png" alt="Reselect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This particular package is especially useful if you're Redux and are trying to improve the performance by avoiding unwanted expensive calculations. In a nutshell, &lt;a href="https://github.com/reduxjs/reselect"&gt;Reselect&lt;/a&gt; is a selector library that allows you to efficiently compute derived data from the Redux store through &lt;a href="https://en.wikipedia.org/wiki/Memoization"&gt;memoization&lt;/a&gt; and by memoized selectors. If performance is key to your React-Redux application, definitely check out Reselect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/reselect"&gt;Link to NPM Package&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;So that was my list of 10 NPM packages that I think you should have a look at if you're working with React. Let me what packages do you use to make your workflow simpler and more productive, I'd love to hear them. Until then, happy coding!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Automatically Start Scripts On Launch In VSCode</title>
      <author>Stephanie Eckles</author>
      <pubDate>Fri, 26 Feb 2021 03:46:08 +0000</pubDate>
      <link>https://dev.to/5t3ph/automatically-start-scripts-on-launch-in-vscode-6ak</link>
      <guid>https://dev.to/5t3ph/automatically-start-scripts-on-launch-in-vscode-6ak</guid>
      <description>&lt;p&gt;VSCode comes with the ability to &lt;a href="https://code.visualstudio.com/docs/editor/tasks#vscode"&gt;create tasks&lt;/a&gt; that operate off of a variety of things. One option is to run one of your package scripts upon opening your project in VSCode.&lt;/p&gt;

&lt;p&gt;For myself, I create a lot of sites with &lt;a href="https://11ty.rocks"&gt;Eleventy&lt;/a&gt; so my &lt;code&gt;npm start&lt;/code&gt; command runs Eleventy in &lt;code&gt;--serve&lt;/code&gt; mode which means it includes creating a local server with Browsersync. Opening any of my Eleventy projects quite likely means I want to make edits and have that server running. So let's learn how to launch it automatically!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-task" class="anchor"&gt;
  &lt;/a&gt;
  Create A Task
&lt;/h2&gt;

&lt;p&gt;To add the launch task, add the directory &lt;code&gt;.vscode&lt;/code&gt; to the root of your project if it doesn't already exist.&lt;/p&gt;

&lt;p&gt;Then, create the file &lt;code&gt;tasks.json&lt;/code&gt;. &lt;em&gt;This is the required name&lt;/em&gt; to enable detection by VSCode.&lt;/p&gt;

&lt;p&gt;Add the following as the content of that file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;See&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;https://go.microsoft.com/fwlink/?LinkId=&lt;/span&gt;&lt;span class="mi"&gt;733558&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;documentation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;about&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;tasks.json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;format&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"tasks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"script"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Launch Site"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"group"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"none"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"presentation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"reveal"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"panel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"new"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"runOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"runOn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"folderOpen"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Configure the following if needed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;script&lt;/code&gt; - update to the name of your script if it's not &lt;code&gt;start&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;label&lt;/code&gt; - this can be whatever you want!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Leave the other options as-is. The &lt;code&gt;runOptions&lt;/code&gt; enables running the command on start (&lt;code&gt;folderOpen&lt;/code&gt;), and the &lt;code&gt;presentation&lt;/code&gt; set of options means that a new Terminal will be opened to reveal the task running.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#allow-the-task-to-run" class="anchor"&gt;
  &lt;/a&gt;
  Allow The Task To Run
&lt;/h2&gt;

&lt;p&gt;There's one more step before this will work which is to manually run it once and allow permission for the auto run behavior.&lt;/p&gt;

&lt;p&gt;To do this, use the VSCode menu for &lt;code&gt;Terminal&lt;/code&gt; and select &lt;code&gt;Run Task&lt;/code&gt;, then select "Launch Site" (or your custom name if you updated it). You will be prompted to make a selection on the type of scan (if unsure, choose the top option).&lt;/p&gt;

&lt;p&gt;The task will then run. When the launch task completes, end it with &lt;code&gt;Ctrl + C&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;You will receive one final popup message asking for your permission to run the task on open of the folder. Select "Allow and run".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tiy17O0m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi37pm8nt3qf37jy1k2x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tiy17O0m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi37pm8nt3qf37jy1k2x.png" alt="The previously described popup including the action of Allow and run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, completely close and restart VSCode and your task should now run right after it opens!&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>vscode</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Implement Dark Mode On Your Website.</title>
      <author>Matthew Marquise</author>
      <pubDate>Thu, 25 Feb 2021 19:59:36 +0000</pubDate>
      <link>https://dev.to/mattmarquise/implement-dark-mode-on-your-website-5c5a</link>
      <guid>https://dev.to/mattmarquise/implement-dark-mode-on-your-website-5c5a</guid>
      <description>&lt;p&gt;Dark Mode is an extremely popular feature to implement into your website using basic HTML, CSS and JS. So why don't you have it on yours yet? In three easy steps you can enhance your site to incorporate dark mode! Let's get started.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#Step1"&gt;Step 1&lt;/a&gt;&lt;br&gt;
&lt;a href="#Step2"&gt;Step 1&lt;/a&gt;&lt;br&gt;
&lt;a href="#Step3"&gt;Step 3&lt;/a&gt;&lt;br&gt;
&lt;a href="#demo"&gt;Demo On CodePen&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you don't already have a website, simply create an HTML file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- index.html --&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Dark Mode Feature&amp;lt;/title&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="Content-type" content="text/html; charset=UTF-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    ...
  &amp;lt;body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once you have that lets implement the HTML and CSS&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In the basic HTML form lets now input everything we will need. Start by connecting your JS and CSS file. add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- index.html --&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Dark Mode Feature&amp;lt;/title&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="Content-type" content="text/html; charset=UTF-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;

    &amp;lt;!-- ADD CSS FILE --&amp;gt;
    &amp;lt;link rel="stylesheet" href="main.css"&amp;gt;

    &amp;lt;!-- ADD JS FILE --&amp;gt;
    &amp;lt;script src="main.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    ...
  &amp;lt;body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we need to create those two files. Feel free to change the name of your css and&lt;/p&gt;

&lt;p&gt;In the CSS file we'll add these lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* main.css */
body {
  background-color: white;
  color: black;
}

.dark-mode {
  background-color: black;
  color: white;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Within the body we have specified that we want our default background to be white with black text. Then in the dark-mode class we've specified that we want want to change the background to black with white text.&lt;/p&gt;

&lt;p&gt;Now we need to create the main.js file, the brain of our dark mode feature.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//main.js

function darkmode() {
  const wasDarkmode = localStorage.getItem('darkmode') === 'true';
  localStorage.setItem('darkmode', !wasDarkmode);
  const element = document.body;
  element.classList.toggle('dark-mode', !wasDarkmode);
}

function onload() {
  document.body.classList.toggle('dark-mode', localStorage.getItem('darkmode') === 'true');
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once you've successfully created both the main.css and main.js files there's one last thing.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-3" class="anchor"&gt;
  &lt;/a&gt;
  Step 3: &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Though you may think you're done, you aren't. Ask yourself this very question. What if my website has multiple pages? how will each page stay in dark mode without returning to the default white background? The answer is far simpler than you think. In the initial body tag on each page add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;onload="onload()"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it. Hope this was helpful! Thanks for reading!&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#demo-on-codepen" class="anchor"&gt;
  &lt;/a&gt;
  Demo On CodePen &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://codepen.io/mattmarquise/details/MWbrNWe"&gt;https://codepen.io/mattmarquise/details/MWbrNWe&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>JavaScript Got You Down? Go Learn ReactJS! </title>
      <author>Ashley Randall</author>
      <pubDate>Thu, 25 Feb 2021 19:57:39 +0000</pubDate>
      <link>https://dev.to/xoshly/javascript-got-you-down-go-learn-reactjs-5fjg</link>
      <guid>https://dev.to/xoshly/javascript-got-you-down-go-learn-reactjs-5fjg</guid>
      <description>&lt;p&gt;Learning &lt;strong&gt;React and Redux&lt;/strong&gt; have made JavaScript &lt;strong&gt;FUN!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are struggling while learning JavaScript, &lt;em&gt;hang in there!&lt;/em&gt; Depending on how you are learning JavaScript, it may seem very strange due to the fact that you can't see any outcome. To me, learning JS reminded me of learning math all over again. Hence, all of the data structures and algorithms. &lt;/p&gt;

&lt;p&gt;But once I stepped into the land of React, I was like... &lt;strong&gt;"Yeeeeaaaaaahhhh buddy!"&lt;/strong&gt; I can finally see what the hell I am doing with this JavaScript mess LOL. And it was very fun!&lt;/p&gt;

&lt;p&gt;I have completed the FCC's React and Redux course and I can say that it was, &lt;em&gt;interesting.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;I'm honestly excited to start building apps with these frameworks because I had a lot of fun learning them. &lt;/p&gt;

&lt;p&gt;This is just a quick inspiration article for those who are struggling with JavaScript and need a boost or something to look forward to. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now, JS doesn't seem so scary anymore.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now Disclaimer:&lt;/strong&gt; &lt;em&gt;You must have a good understanding of JS and ES6 to learn React and Redux. If you don't have a good understanding of JS, learning React and Redux will be very frustrating and it's just gonna piss you off.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>9 ways to be kinder to trans people</title>
      <author>Noƒçnica Fee</author>
      <pubDate>Thu, 25 Feb 2021 19:26:34 +0000</pubDate>
      <link>https://dev.to/nocnica/9-ways-to-be-kind-to-trans-people-2l9e</link>
      <guid>https://dev.to/nocnica/9-ways-to-be-kind-to-trans-people-2l9e</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover image of the Trans-Australia railway by &lt;a href="https://commons.wikimedia.org/w/index.php?curid=54322986"&gt;Pavel ≈†pindler&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article is for everyone who loves trans people and wants some guidance in treating trans friends and co-workers with kindness and respect.&lt;/p&gt;

&lt;p&gt;Of course, trans people aren't all of one mind, this is just one trans woman's list of the things I wish every cis person knew.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-dont-forward-my-hate-mail" class="anchor"&gt;
  &lt;/a&gt;
  1. Don't forward my hate mail
&lt;/h1&gt;

&lt;p&gt;I work on camera. And in my voice and face are both immediately identifiable as gender-non-conforming. That means I get hateful messages in my stream chat. I get them during conferences and as comments on my video. Sometimes it's extremely rough to deal with.&lt;/p&gt;

&lt;p&gt;What definitely doesn't help is sending me a screenshot and asking if I saw it. If I have or I haven't seen it, it's not going to cheer me up to see it. This is doubly true if the commenter is anonymous or works at another company. In those cases there's generally nothing to be done, so all that forwarding can do is ruin my day.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-do-learn-the-word-cis" class="anchor"&gt;
  &lt;/a&gt;
  2. Do learn the word 'cis'
&lt;/h1&gt;

&lt;p&gt;Did the word 'cis' in the intro trip you up? Learn it and use it! Based on the latin root that's the opposite of 'trans,' 'cis' is used to refer to anyone who isn't trans. It's not an insult or a derogatory term, no more than being called trans is an insult. &lt;/p&gt;

&lt;p&gt;I use the term 'cis' it because, absent a term to describe a way of being, it defaults to just 'normal.' There's nothing more normal about cis people!&lt;/p&gt;

&lt;p&gt;One side note: if someone is telling you that being called 'cis' is offensive, or some variation of the statement that "'cis' is a slur," be aware that you are probably talking to someone who's getting their talking points straight from websites and communities dedicated to excluding trans people from society.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-dont-assume-transphobia-is-isolated-or-rare" class="anchor"&gt;
  &lt;/a&gt;
  3. Don't assume transphobia is isolated or rare
&lt;/h1&gt;

&lt;p&gt;When a trans person talks to you about being excluded, discriminated against, or otherwise being the victim of transphobia; often it can feel natural to respond with something like:&lt;/p&gt;

&lt;p&gt;"oh gosh that's awful! I never heard of anything like that! I'm shocked!!!" &lt;/p&gt;

&lt;p&gt;And while it's clear that the intent is to be sympathetic, there's an underlying assumption to these comments that transphobia, while awful, is unusual and unexpected.&lt;/p&gt;

&lt;p&gt;I'm not asking you to read every report by the Southern Poverty Law Center or read every transphobic article in The Guardian. I don't do that and neither should you! But realize that discrimination and hate for trans people is becoming the norm in our society.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-do-talk-behind-my-back" class="anchor"&gt;
  &lt;/a&gt;
  4. Do talk behind my back
&lt;/h1&gt;

&lt;p&gt;I don't want to have to tell people my pronouns. I don't want to explain that I have a deep voice but, yes, I am a woman. I want you to tell people that.&lt;/p&gt;

&lt;p&gt;If you want to become my star ally of the year, send at least two people the following message on Slack&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey! Our next meeting is with Noƒçnica (Nica to her friends), one of our best Dev Advocates. She had the number one partner talk at Re:Invent last year! Reminder that her pronouns are she/her. Hit me up if you want any background!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This little check in with people keeps me from having to have the same conversation. I appreciate it to no end! Some things about this script:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I'd rather be introduced as 'a woman' than 'a trans woman'&lt;/li&gt;
&lt;li&gt;What I do and how good I am at it are more important than my gender&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#5-dont-talk-to-me-about-drag-race" class="anchor"&gt;
  &lt;/a&gt;
  5. Don't talk to me about Drag Race
&lt;/h1&gt;

&lt;p&gt;As popular culture has commodified queerness into something anyone can consume from their living room, awareness of drag has spread beyond the queer community. That might be a good thing, but it's led to some confusion.&lt;/p&gt;

&lt;p&gt;Some drag performers may be trans, and many trans people do drag, but the two terms aren't synonymous. Add to that the fact that many of the catchphrases and terms used in shows like Queer Eye and Drag Race are AAVE that sound &lt;em&gt;deeply&lt;/em&gt; odd when said by a white person (looking at you Jonathan Van Ness), and it's just, a mess tbh.&lt;/p&gt;

&lt;p&gt;I really can't simplify the issue beyond this analogy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your jewish friend doesn't want to hear your rendition of tunes from 'Fiddler on the Roof'&lt;/li&gt;
&lt;li&gt; your friend who grew up in the foster care system doesn't want to read 'Oliver Twist' with you&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#6-do-put-your-pronouns-in-your-bio" class="anchor"&gt;
  &lt;/a&gt;
  6. Do put your pronouns in your bio
&lt;/h1&gt;

&lt;p&gt;This is just a courtesy thing that I appreciate from cis people. it means that it's not just trans people who are doing the work of communicating about gender.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-dont-ask-me-to-put-my-pronouns-in-my-bio" class="anchor"&gt;
  &lt;/a&gt;
  7. Don't ask me to put my pronouns in my bio
&lt;/h1&gt;

&lt;p&gt;Whose job is it to end transphobia? Is it trans peoples' job? I would suggest no. I try to put my pronouns out there, but doing so, especially when almost no cis people have, outs me as trans to strangers in a way that isn't always comfortable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-if-you-make-a-mistake-apologize-and-move-on" class="anchor"&gt;
  &lt;/a&gt;
  8. If you make a mistake: apologize and move on
&lt;/h1&gt;

&lt;p&gt;Are you worried that you've insulted someone trans? In these situations it's common to feel some embarrassment. If you want to get in touch with me to apologize, that's fine and I might even appreciate that you noticed.&lt;/p&gt;

&lt;p&gt;But if we do have a conversation and you want to apologize, I cannot emphasize this enough: &lt;em&gt;keep it short.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;I get misgendered almost every day. If I had to have a whole conversation every time, it would bum me out! I don't want to spend all day talking about being trans. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-do-talk-to-me-about-your-feelings-about-your-gender" class="anchor"&gt;
  &lt;/a&gt;
  9. Do talk to me about your feelings about your gender
&lt;/h1&gt;

&lt;p&gt;In point 4 above I said I didn't want to be the one who had to explain my gender to everybody. It's a drain on my time and energy and I'd rather not talk about gender all day.&lt;/p&gt;

&lt;p&gt;But there is a big exception to that rule: If you have questions about your gender, of &lt;em&gt;course&lt;/em&gt; I want to talk about it.&lt;/p&gt;

&lt;p&gt;Feeling like your gender doesn't "fit" can be such a lonely experience. And I feel a responsibility to make sure that others don't go through it alone. So if you have questions, of course reach out.&lt;/p&gt;




&lt;p&gt;Thank you for taking the time to read this list. If you have questions, or if you're trans and want to add to this list, add a comment below! &lt;/p&gt;

</description>
      <category>trans</category>
      <category>discuss</category>
      <category>lgbtq</category>
      <category>diversity</category>
    </item>
  </channel>
</rss>
