<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How I create a nice Github profile page in 5 min!</title>
      <author>CodeOz</author>
      <pubDate>Fri, 17 Sep 2021 08:19:41 +0000</pubDate>
      <link>https://dev.to/codeoz/how-i-create-a-nice-github-profile-page-in-5-min-1m12</link>
      <guid>https://dev.to/codeoz/how-i-create-a-nice-github-profile-page-in-5-min-1m12</guid>
      <description>&lt;p&gt;I will show you how create my profile github page in &lt;strong&gt;5 min!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's check my current profile page&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://twitter.com/Code__oz"&gt;https://twitter.com/Code__oz&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(And follow me on github 👀)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-i-create-profile-on-github"&gt;
  &lt;/a&gt;
  How I create profile on github
&lt;/h3&gt;

&lt;p&gt;Before custom it, we need to create it!&lt;/p&gt;

&lt;p&gt;It's very easy.&lt;/p&gt;

&lt;p&gt;Go to github and create a new repository&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/new"&gt;https://github.com/new&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create the repository with your &lt;strong&gt;own github name!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vrbyZGDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clgq2ufp0t2kspyaagy6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vrbyZGDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clgq2ufp0t2kspyaagy6.png" alt="Screenshot 2021-09-16 at 23.24.51"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will have a special event from github page!&lt;/p&gt;

&lt;p&gt;Make you repository public &amp;amp; click on &lt;code&gt;Add a README file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Go back to your profil and you can see that you have a profile page!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4JPxlsY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmexy17nw1sqcjr64xfu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4JPxlsY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmexy17nw1sqcjr64xfu.png" alt="Screenshot 2021-09-16 at 23.26.19"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-your-profil"&gt;
  &lt;/a&gt;
  Custom your profil
&lt;/h3&gt;

&lt;p&gt;Ok so now it's the moment of fun!&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://rahuldkjain.github.io/gh-profile-readme-generator/"&gt;https://rahuldkjain.github.io/gh-profile-readme-generator/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;After you fill all information that you need, click to &lt;code&gt;Generate README&lt;/code&gt; at the bottom page.&lt;/p&gt;

&lt;p&gt;Edit &lt;code&gt;README&lt;/code&gt; on your repository and paste the code above!&lt;/p&gt;

&lt;p&gt;And yes we did it in 5min!&lt;/p&gt;




&lt;p&gt;I hope you like this reading!&lt;/p&gt;

&lt;p&gt;If you want to have a nice article to read about web dev, you can subscribe to my FREE newsletter &amp;amp; get a &lt;strong&gt;cheatlist about Javascript&lt;/strong&gt; at this URL 👇&lt;/p&gt;

&lt;p&gt;🎁 &lt;a href="https://www.getrevue.co/profile/code__oz"&gt;MY NEWSLETTER&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;☕️ You can &lt;a href="https://www.buymeacoffee.com/CodeoZ"&gt;SUPPORT MY WORKS&lt;/a&gt; 🙏&lt;/p&gt;

&lt;p&gt;🏃‍♂️ You can follow me on 👇&lt;/p&gt;

&lt;p&gt;🕊 Twitter : &lt;a href="https://twitter.com/code__oz"&gt;https://twitter.com/code__oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👨‍💻 Github: &lt;a href="https://github.com/Code-Oz"&gt;https://github.com/Code-Oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can mark 🔖 this article!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>github</category>
      <category>node</category>
    </item>
    <item>
      <title>How to generate a random unique identifier with UUID</title>
      <author>Anton Paliakou</author>
      <pubDate>Fri, 17 Sep 2021 08:15:42 +0000</pubDate>
      <link>https://dev.to/toni777772/how-to-generate-a-random-unique-identifier-with-uuid-cbo</link>
      <guid>https://dev.to/toni777772/how-to-generate-a-random-unique-identifier-with-uuid-cbo</guid>
      <description>&lt;p&gt;UUID is a universally unique identifier. UUID can be used to identify types, interfaces, and other items.&lt;br&gt;
Creating an object or some entity with an unique identifier is a common task for developers. UUID structure created for to do this and to do it best, do not need create "bicycle".&lt;br&gt;
&lt;strong&gt;UUID is guaranteed to be unique&lt;/strong&gt;. When initializing the structure, a new UUID is created with RFC 4122 version 4 random bytes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Foundation&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uuidString&lt;/span&gt;
&lt;span class="kt"&gt;Swift&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Result: "6A967474-8672-4ABC-A57B-52EA809C5E6D" &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Available iOS 6.0+, macOS 10.8+, tvOS 9.0+, watchOS 2.0+.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#whats-uuid-from-a-code-perspective"&gt;
  &lt;/a&gt;
  What's UUID from a code perspective?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.apple.com/documentation/foundation/uuid"&gt;UUID&lt;/a&gt; is a simple structure and is a part of Foundation framework.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ReferenceConvertible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Hashable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Equatable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;CustomStringConvertible&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;/// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;UUID conforms 4 protocols: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/documentation/foundation/referenceconvertible"&gt;ReferenceConvertible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/documentation/swift/hashable"&gt;Hashable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/documentation/swift/equatable"&gt;Equatable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.toCustomStringConvertible"&gt;CustomStringConvertible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, the structure has some properties:&lt;/p&gt;

&lt;p&gt;1 &lt;code&gt;uuid&lt;/code&gt; - Returns the UUID as bytes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UInt8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2 &lt;code&gt;uuidString&lt;/code&gt; - Returns a string created from the UUID, such as “E621E1F8-C36C-495A-93FC-0C247A3E6E5F”&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;uuidString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Articles comes to devto portal with delay 1-2 week, if you want read my articles without delay you can visit &lt;a href="https://tonidevblog.com/"&gt;ToniDevBlog&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Article originally published at &lt;a href="https://tonidevblog.com/posts/how-to-generate-a-random-unique-identifier-with-uuid/"&gt;ToniDevBlog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for reading! See you soon. 👋&lt;/p&gt;

</description>
      <category>swift</category>
      <category>ios</category>
      <category>uuid</category>
      <category>apple</category>
    </item>
    <item>
      <title>Foobar: Please Pass the Coded Messages</title>
      <author>Gangbaolede Li</author>
      <pubDate>Fri, 17 Sep 2021 08:06:42 +0000</pubDate>
      <link>https://dev.to/itepsilon/foobar-please-pass-the-coded-messages-4dhn</link>
      <guid>https://dev.to/itepsilon/foobar-please-pass-the-coded-messages-4dhn</guid>
      <description>&lt;p&gt;You need to pass a message to the bunny workers, but to avoid detection, the code you agreed to use is... obscure, to say the least. The bunnies are given food on standard-issue plates that are stamped with the numbers 0-9 for easier sorting, and you need to combine sets of plates to create the numbers in the code. The signal that a number is part of the code is that it is divisible by 3. You can do smaller numbers like 15 and 45 easily, but bigger numbers like 144 and 414 are a little trickier. Write a program to help yourself quickly create large numbers for use in the code, given a limited number of plates to work with.&lt;/p&gt;

&lt;p&gt;You have L, a list containing some digits (0 to 9). Write a function solution(L) which finds the largest number that can be made from some or all of these digits and is divisible by 3. If it is not possible to make such a number, return 0 as the solution. L will contain anywhere from 1 to 9 digits.  The same digit may appear multiple times in the list, but each element in the list may only be used once.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#languages"&gt;
  &lt;/a&gt;
  Languages
&lt;/h1&gt;

&lt;p&gt;To provide a Java solution, edit Solution.java&lt;br&gt;
To provide a Python solution, edit solution.py&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#test-cases"&gt;
  &lt;/a&gt;
  Test cases
&lt;/h1&gt;

&lt;p&gt;Your code should pass the following test cases.&lt;br&gt;
Note that it may also be run against hidden test cases not shown here.&lt;/p&gt;

&lt;p&gt;Input:&lt;br&gt;
solution.solution([3, 1, 4, 1])&lt;br&gt;
Output:&lt;br&gt;
    4311&lt;/p&gt;

&lt;p&gt;Input:&lt;br&gt;
solution.solution([3, 1, 4, 1, 5, 9])&lt;br&gt;
Output:&lt;br&gt;
    94311&lt;/p&gt;

&lt;p&gt;Solution:&lt;br&gt;
python&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# already divisible by 3 =&amp;gt; use all digits
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;to_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# check backward if there is a digit that is 1 mod 3
&lt;/span&gt;        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;to_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# there must be two digits that each of them is 2 mod 3
&lt;/span&gt;        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;to_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# check backward if there is a digit that is 2 mod 3
&lt;/span&gt;        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;to_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# there must be two digits that each of them is 1 mod 3
&lt;/span&gt;        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;to_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>google</category>
      <category>foobar</category>
      <category>python</category>
    </item>
    <item>
      <title>Ecommerce and Next.js on the Jamstack — with Colby Fayock</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Fri, 17 Sep 2021 07:47:04 +0000</pubDate>
      <link>https://dev.to/whitep4nth3r/ecommerce-and-next-js-on-the-jamstack-with-colby-fayock-5bbb</link>
      <guid>https://dev.to/whitep4nth3r/ecommerce-and-next-js-on-the-jamstack-with-colby-fayock-5bbb</guid>
      <description>&lt;p&gt;I sat down with &lt;a href="https://twitter.com/colbyfayock"&gt;Colby Fayock&lt;/a&gt; to talk about &lt;a href="https://nextjs.org/docs"&gt;Next.js&lt;/a&gt;, how all of its features help enable developers to build great experiences on the web, and how it can help solve the many challenges of building e-commerce sites on the Jamstack.&lt;/p&gt;

&lt;p&gt;In this video, we cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Next.js?&lt;/li&gt;
&lt;li&gt;Is Next.js a static site generator?&lt;/li&gt;
&lt;li&gt;What does server-side rendering mean?&lt;/li&gt;
&lt;li&gt;What makes Next.js a strong framework?&lt;/li&gt;
&lt;li&gt;What are some e-commerce challenges that Next.js helps to solve?&lt;/li&gt;
&lt;li&gt;How is performance important to e-commerce?&lt;/li&gt;
&lt;li&gt;How does Next.js help with performance?&lt;/li&gt;
&lt;li&gt;How is SEO important to e-commerce?&lt;/li&gt;
&lt;li&gt;How does Next.js help with SEO?&lt;/li&gt;
&lt;li&gt;What's the most overlooked, yet oddly difficult part of e-commerce?&lt;/li&gt;
&lt;li&gt;Accessibility, internationalisation and personalisation in e-commerce&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Colby is a super-nice host and I can't wait to hang out with him again. Thanks for having me, Colby!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GyXyygeC2RE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__186511"&gt;
  
    .ltag__user__id__186511 .follow-action-button {
      background-color: #692ba8 !important;
      color: #ffffff !important;
      border-color: #692ba8 !important;
    }
  
    &lt;a href="/colbyfayock" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xlv1dTkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VO7FWp_z--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/186511/c8cb9a0a-e3bb-4f6e-a332-c45617c1455a.png" alt="colbyfayock image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/colbyfayock"&gt;Colby Fayock&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/colbyfayock"&gt;I help others learn by doing through articles, videos, and courses about Javascript, React, and the static web. https://colbyfayock.com/newsletter&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>nextjs</category>
      <category>webdev</category>
      <category>ecommerce</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Google Play Kafkaesque Experience</title>
      <author>Shai Almog</author>
      <pubDate>Fri, 17 Sep 2021 07:23:09 +0000</pubDate>
      <link>https://dev.to/codenameone/google-play-kafkaesque-experience-mp3</link>
      <guid>https://dev.to/codenameone/google-play-kafkaesque-experience-mp3</guid>
      <description>&lt;p&gt;It seems that every other week someone else writes in &lt;a href="https://reddit.com/r/androiddev/"&gt;/r/AndroidDev&lt;/a&gt; complaining that Google unjustly removed his app. This happened to us with a few apps but usually it was because of changing policy or just stupid policy. Never anything as ludicrous as what we've experienced for the past few weeks.&lt;/p&gt;

&lt;p&gt;A few weeks ago we got a threatening email from Google Play:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n4cXW9sp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb0q2zaje2ktmozdtw6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n4cXW9sp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb0q2zaje2ktmozdtw6u.png" alt="Letter From Google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those guys collecting user phone numbers sound like pretty bad people right... Only we don't collect any phone numbers. Never did and don't care about them at all. Wouldn't know what to do with them.&lt;/p&gt;

&lt;p&gt;Notice the lack of any technical information in the email. How was this determined, how can this be fixed other than by saying we collect phone numbers (which again, we don't). &lt;/p&gt;

&lt;p&gt;Nothing. &lt;/p&gt;

&lt;p&gt;Also one week? What company can get anything done in one week? &lt;/p&gt;

&lt;p&gt;That's insane.&lt;/p&gt;

&lt;p&gt;So we instantly appealed the process then tried to go through all the libraries we used. Maybe something was in violation. We couldn't find anything.&lt;/p&gt;

&lt;p&gt;In desperation I decompiled the APK: bingo!&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; of the APK we had a &lt;code&gt;READ_PHONE_STATE&lt;/code&gt; permission. We didn't add it though...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-was-googles-fault"&gt;
  &lt;/a&gt;
  It was Googles Fault
&lt;/h2&gt;

&lt;p&gt;Turns out &lt;a href="https://stackoverflow.com/a/49561996/2935174"&gt;Firebase had a bug&lt;/a&gt; in the version we used. Updating to a newer version removed the phone permission. Jackpot.&lt;/p&gt;

&lt;p&gt;So we built a new bundle, verified the decompiled APK didn't include that permission and chugged this down to Google being stupid about phrasing their emails and packaging their own libraries. &lt;/p&gt;

&lt;p&gt;But no. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-app-got-removed-anyway"&gt;
  &lt;/a&gt;
  Our App Got Removed Anyway
&lt;/h2&gt;

&lt;p&gt;Same reason, no further explanation or anything. The appeal I sent was returned with the response that our case was reviewed and we're still at fault. No further helpful information was provided.&lt;/p&gt;

&lt;p&gt;Then it started happening to our customers: &lt;a href="https://stackoverflow.com/questions/68921544/google-play-recent-review-notification-apk-has-a-prominent-disclosure-but-the"&gt;https://stackoverflow.com/questions/68921544/google-play-recent-review-notification-apk-has-a-prominent-disclosure-but-the&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means there's something seriously problematic in Codename One and we can't find it. We spent weeks pouring over every single thing that might impact Googles review process. We resubmitted the app with minor changes dozens of times, to no avail. Unfortunately, every submit meant two days of waiting period until we got rejected again.&lt;/p&gt;

&lt;p&gt;The rejection system didn't even indicate if there was any "improvement". Are we on the right track? Is anyone there?&lt;/p&gt;

&lt;p&gt;I won't go into all the things we tried but we tried a lot of variations on the solving the problem... Nothing worked.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-support"&gt;
  &lt;/a&gt;
  Google Support
&lt;/h2&gt;

&lt;p&gt;So the obvious thing would be "write to support", surely the can help?&lt;/p&gt;

&lt;p&gt;There's a support button that in my case literally leads you in a constant redirect loop back to Google play. Maybe it's because I have multiple Google Accounts and multiple play accounts. I still have no idea. But Steve was able to get an email chain going. It was 30 emails deep by the time we solved the issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infuriating-solution"&gt;
  &lt;/a&gt;
  Infuriating Solution
&lt;/h2&gt;

&lt;p&gt;So early on I had a suspicion that this was due to one of our old beta/test tracks. They are all disabled and haven't been used since we originally created the app a few years back. So naturally I updated the version in all the beta/testing tracks and then proceeded to pause all of these tracks. &lt;/p&gt;

&lt;p&gt;It turns out that this wasn't enough. We had to literally submit an alpha, go through the process. Graduate it to beta and then to production. This was the only way to "clear" the old broken version that we had.&lt;/p&gt;

&lt;p&gt;Originally a few years ago a phone permission was a part of the app (which was a valid case back then to handle Android bugs, not collect phones or anything). This was in a paused unused old alpha channel... Instead of suspending the alpha channel or just writing to us that we have a problem in that old unused channel our entire app got suspended with no support!&lt;/p&gt;

&lt;p&gt;Amazingly this same thing happened to our customers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apple-is-better"&gt;
  &lt;/a&gt;
  Apple is Better
&lt;/h2&gt;

&lt;p&gt;I had my share of run-ins with Apples review process. It isn't pleasant. But there's a human being on the other side. They answer, they communicate, they use technical terms to explain the problem. Hell, they even called me over the phone twice to discuss my problem.&lt;/p&gt;

&lt;p&gt;Google used to be better, flawed but better. It seems that in its zeal to copy Apple they copied all the bad stuff without the good stuff. &lt;/p&gt;

&lt;p&gt;This latest experience has really soured me further on Google. I used to be such a fan of the company, but things like &lt;a href="https://hackernoon.com/why-and-how-we-left-app-engine-after-it-almost-destroyed-us-40ac2fc0b1a8?1"&gt;this&lt;/a&gt; make me want to completely &lt;a href="https://github.com/tycrek/degoogle"&gt;degoogle&lt;/a&gt; my life. I'm still an Android user but with every incident like this I feel a strong urge to move back to iOS. It's a shame we have so little choice here...&lt;/p&gt;

</description>
      <category>android</category>
      <category>java</category>
      <category>kotlin</category>
      <category>startup</category>
    </item>
    <item>
      <title>How to deploy your Django app with PostgreSQL on AWS</title>
      <author>Tomi Tokko</author>
      <pubDate>Fri, 17 Sep 2021 07:19:48 +0000</pubDate>
      <link>https://dev.to/tomitokko3/how-to-deploy-your-django-app-with-postgresql-on-aws-3012</link>
      <guid>https://dev.to/tomitokko3/how-to-deploy-your-django-app-with-postgresql-on-aws-3012</guid>
      <description>&lt;p&gt;If you want to deploy a Django project to AWS, then Qovery is the right platform for you. In this post, you will learn how to deploy your Django application to AWS using Qovery.&lt;/p&gt;

&lt;p&gt;The first thing you need to do is to make sure that you have an &lt;a href="https://aws.com"&gt;AWS&lt;/a&gt; account and a Qovery account. To create a Qovery account, just go to &lt;a href="https://qovery.com"&gt;qovery.com&lt;/a&gt; and signup with either your Github or Gitlab account. Once you have these two ready, you can move on with the tutorial.&lt;/p&gt;

&lt;p&gt;To be able to use AWS with Qovery, you need to connect these two together. The first step to connecting your AWS account to Qovery is by creating your AWS credentials with the right IAM permissions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-aws-credentials"&gt;
  &lt;/a&gt;
  Create AWS Credentials
&lt;/h2&gt;

&lt;p&gt;We need to get two credentials from our AWS account, which are &lt;code&gt;access key id&lt;/code&gt; and &lt;code&gt;secret access key&lt;/code&gt;. To get these credentials, you need to go into your AWS console, and search for IAM. The first result that comes up is &lt;code&gt;IAM&lt;/code&gt;, and it has a subtitle of &lt;code&gt;Manage access to AWS resources&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CVgriqPX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zupqmr42zmqprufha4sr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CVgriqPX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zupqmr42zmqprufha4sr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on IAM, and it should take you to the IAM (Identity and Access Management) dashboard. In there, navigate to the left corner of the page and click on User groups&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CIUr_MOE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/etnrjm7vkijf84uxt8xi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CIUr_MOE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/etnrjm7vkijf84uxt8xi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In User groups, head over to the top-right corner of the page and click on Create group. Under user group name, input Admins (NOTE: You must input &lt;b&gt;Admins&lt;/b&gt; as the name of the group. If another name is used instead, it will not work). Ignore where you see 'Add users to the group' and 'Attach permissions policies', then scroll down and click on Create group. You should get a green confirmation that the group has been successfully created, and you should also see the Admins group now listed in the list of groups. This step is visualized with the images below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WWd3lsG7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68bklt4um3azfd2pdd3j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WWd3lsG7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68bklt4um3azfd2pdd3j.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6i-mgcy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ytjd6a34ol8jek4whaw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6i-mgcy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ytjd6a34ol8jek4whaw.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WjHuEfS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2bhz3j2zzccwy2rxqu4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WjHuEfS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2bhz3j2zzccwy2rxqu4.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cQ7viOI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qt2c6mxx6cbn0722mb4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cQ7viOI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qt2c6mxx6cbn0722mb4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next thing we need to do is to create a new user. To do this, head over to the left corner of the page and click on 'Users'&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKryPBgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ow4kvspyh16xs87envk5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKryPBgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ow4kvspyh16xs87envk5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, head to the top right corner and click on 'Add users'. Then input qovery as the User name, and under 'Select AWS access type', tick the option that says 'Access key - Programmatic access', then click on Next.&lt;/p&gt;

&lt;p&gt;In permissions, it will automatically select the option 'Add user to group', under that, tick the Admins group we created earlier. After that, click on Next twice, and then hit Create user.&lt;/p&gt;

&lt;p&gt;Once you have these done, you should now have your &lt;code&gt;Access key ID&lt;/code&gt; and &lt;code&gt;Secret access key&lt;/code&gt;. Make sure you download this information as a csv file so that you don't loose it, because, when you go away from that page or close that tab, you will not be able to access the Secret access key again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gUF_xHPE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fe0uzp6ycpvyli30ryc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gUF_xHPE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fe0uzp6ycpvyli30ryc.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQk0EQ7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqyq4x5xz03uj4aqdi14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQk0EQ7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqyq4x5xz03uj4aqdi14.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bbInnNb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anxqqd43owcxc8wtzs1p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bbInnNb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anxqqd43owcxc8wtzs1p.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXSfS2g7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0jngr6nm2e068tzvk86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXSfS2g7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0jngr6nm2e068tzvk86.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next thing we need to do is to setup IAM permissions to the 'qovery' user we created earlier.&lt;/p&gt;

&lt;p&gt;Under the list of users, click on qovery. When you click on it, it will take you to a page which contains the summary of that user. In there you will see a text that says 'Add inline policy', click on it, and it should take you to a page that says 'Create Policy'. In that page, switch over to the JSON section. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aXS94CW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jp77y5yn10e8lo3fvyw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aXS94CW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jp77y5yn10e8lo3fvyw.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--91ZsRsoU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48fehjh46n1w4arzrf5t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--91ZsRsoU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48fehjh46n1w4arzrf5t.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5vGlbD7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ihh8in0970veksouh9or.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5vGlbD7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ihh8in0970veksouh9or.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the JSON tab, you need to replace the code in there with the code below:&lt;br&gt;
&lt;code&gt;{&lt;br&gt;
  "Version": "2012-10-17",&lt;br&gt;
  "Statement": [&lt;br&gt;
    {&lt;br&gt;
      "Effect": "Allow",&lt;br&gt;
      "Action": [&lt;br&gt;
        "iam:*",&lt;br&gt;
        "s3:*",&lt;br&gt;
        "cloudwatch:*",&lt;br&gt;
        "autoscaling:*",&lt;br&gt;
        "application-autoscaling:*",&lt;br&gt;
        "elasticloadbalancing:*",&lt;br&gt;
        "organizations:DescribeAccount",&lt;br&gt;
        "organizations:DescribeOrganization",&lt;br&gt;
        "organizations:DescribeOrganizationalUnit",&lt;br&gt;
        "organizations:DescribePolicy",&lt;br&gt;
        "organizations:ListChildren",&lt;br&gt;
        "organizations:ListParents",&lt;br&gt;
        "organizations:ListPoliciesForTarget",&lt;br&gt;
        "organizations:ListRoots",&lt;br&gt;
        "organizations:ListPolicies",&lt;br&gt;
        "organizations:ListTargetsForPolicy",&lt;br&gt;
        "dynamodb:*",&lt;br&gt;
        "ecr:*",&lt;br&gt;
        "ec2:*",&lt;br&gt;
        "elasticache:*",&lt;br&gt;
        "cloudtrail:LookupEvents",&lt;br&gt;
        "kms:DescribeKey",&lt;br&gt;
        "kms:ListAliases",&lt;br&gt;
        "dynamodb:*",&lt;br&gt;
        "tag:GetResources",&lt;br&gt;
        "rds:*",&lt;br&gt;
        "ecs:*",&lt;br&gt;
        "eks:*",&lt;br&gt;
        "logs:*",&lt;br&gt;
        "events:DescribeRule",&lt;br&gt;
        "events:DeleteRule",&lt;br&gt;
        "events:ListRuleNamesByTarget",&lt;br&gt;
        "events:ListTargetsByRule",&lt;br&gt;
        "events:PutRule",&lt;br&gt;
        "events:PutTargets",&lt;br&gt;
        "es:AddTags",&lt;br&gt;
        "es:RemoveTags",&lt;br&gt;
        "es:ListTags",&lt;br&gt;
        "es:DeleteElasticsearchDomain",&lt;br&gt;
        "es:DescribeElasticsearchDomain",&lt;br&gt;
        "es:CreateElasticsearchDomain",&lt;br&gt;
        "events:RemoveTargets",&lt;br&gt;
        "kms:*"&lt;br&gt;
      ],&lt;br&gt;
      "Resource": "*"&lt;br&gt;
    }&lt;br&gt;
  ]&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you have that JSON code in there, click on 'Review Policy'&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--01UgAO4F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhvnnb5fl6tlfihbq0g1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--01UgAO4F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhvnnb5fl6tlfihbq0g1.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Then in the name field, input qovery_permissions, and now click on 'Create policy'&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f1iiXPK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wz3vdsjq6b3cjij0u1ia.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f1iiXPK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wz3vdsjq6b3cjij0u1ia.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m9ccLAYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xp8j05x2ujkjgrxbjgm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9ccLAYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xp8j05x2ujkjgrxbjgm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have successfully created your AWS credentials. The next step is to connect it with Qovery&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-aws-to-qovery"&gt;
  &lt;/a&gt;
  Connect AWS to Qovery
&lt;/h2&gt;

&lt;p&gt;Qovery is a platform that helps in deploying web apps. Before following along it this tutorial, make sure that you are signed up to Qovery. To do that, heaad over to &lt;a href="https://qovery.com"&gt;qovery.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first thing to do here is to create a new organisation. Go to the top-right corner and click on New organization&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sf8LBEla--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3v6io2r9o4cem9b4pnc6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sf8LBEla--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3v6io2r9o4cem9b4pnc6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose your plan&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QH49oNym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5psjjmnf795fd0tkozql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QH49oNym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5psjjmnf795fd0tkozql.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then input a name for your organization, and click 'Create'&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YUYBjb3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99rct55mhw5cwi5ygtpa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YUYBjb3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99rct55mhw5cwi5ygtpa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that your new organization is created, go into the settings of that organization by clicking the gear icon at the top-right corner of the organization page, and then click on 'Clusters' which is located in the left corner of the Settings page.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r7r9vfGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rg32lg56b9lpmc8d3rs6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r7r9vfGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rg32lg56b9lpmc8d3rs6.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--696A5laQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv1u74yezyjfq5h90pg4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--696A5laQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv1u74yezyjfq5h90pg4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the cluster section, click on 'Add Cluster'. Then input a name for the cluster, and under cloud provider, select 'Amazon Web Services' and also select a region the best suites you. Then click on Create. Your new cluster has now been created successfully.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DuMuD5sq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrivsdtgfk20yg6u0uvc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DuMuD5sq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrivsdtgfk20yg6u0uvc.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mar8m4zU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6shhitzpkdw9lmse3tyx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mar8m4zU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6shhitzpkdw9lmse3tyx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next thing to do is to input our AWS credentials into this cluster. To do this, first click on 'Edit'&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MU74AiUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sd1vd6qxclgorygu9p82.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MU74AiUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sd1vd6qxclgorygu9p82.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then head over to credentials and click on Add&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LnM_Nfbi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xdr4miv1ef4h2xnoa78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LnM_Nfbi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xdr4miv1ef4h2xnoa78.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you need to enter a name for the new credential, and input your AWS Access Key ID and also your Secret Access Key, then click on save.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p32J60lX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/etty7gslr2jw6j586xaf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p32J60lX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/etty7gslr2jw6j586xaf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, on your cluster, click on install. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---hvPLrQZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuultcbzyd4ss5w3ci1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---hvPLrQZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuultcbzyd4ss5w3ci1c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will go ahead and install your cluster fully. This usually takes 30 minutes, but you will be notified when this process is done. Now, you have successfully installed Qovery on AWS!&lt;/p&gt;

&lt;p&gt;The next thing to do now is to deploy our Django application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-a-django-app"&gt;
  &lt;/a&gt;
  Deploy A Django App
&lt;/h2&gt;

&lt;p&gt;Now that we have everything setup, the next step is to deploy our Django app.&lt;/p&gt;

&lt;p&gt;Before we start deploying, make sure that you have pushed your django project to the github account that you used to sign up to Qovery. Your django project must contain a 'requirements.txt' file and also two other files which are 'Dockerfile' and 'entrypoint.sh'. These files are used by Qovery to run and manage our application. &lt;/p&gt;

&lt;p&gt;For the Dockerfile, just paste the code below into it:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM python:3.8.0-alpine

WORKDIR /usr/src/app

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

RUN apk update &amp;amp;&amp;amp; apk add postgresql-dev gcc python3-dev musl-dev

RUN pip install --upgrade pip
COPY ./requirements.txt /usr/src/app/requirements.txt
RUN pip install -r requirements.txt

COPY djangofollow /usr/src/app/
COPY entrypoint.sh /usr/src/app

EXPOSE 8000

ENTRYPOINT ["./entrypoint.sh"]`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In the 'entrypoint.sh' file, input this code in it:&lt;br&gt;
    #!/bin/sh&lt;br&gt;
    set -euo pipefail&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py migrate

exec python manage.py runserver 0.0.0.0:8000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now that we have these done, we are good to go.&lt;/p&gt;

&lt;p&gt;In the organization page, click on 'Create Project' and a new project will be created, now click on 'Create Environment' and input the name of the environment, and a new environment will be created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PmoMCsK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5jddudiv4tlj4zahnk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PmoMCsK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5jddudiv4tlj4zahnk9.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WDb2ErJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itwatj2xbavw35whxskt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WDb2ErJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itwatj2xbavw35whxskt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's create a new application by clicking on the 'Add my first app' button. Then input the name of the app and then choose the Github repository of the app and also the Branch. Then click on 'Create'&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--emljS2KU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5bwyrj25w01uei7jmd5w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--emljS2KU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5bwyrj25w01uei7jmd5w.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see a confirmation message that says that your app has been created&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T4qGcLiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28y3nhykkl4k0bqdbkyt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4qGcLiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28y3nhykkl4k0bqdbkyt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, click on settings in the app and head over to the General section, in there, under Build mode, change the option from Buildpacks to Dockerfile, then click on save. Also go into port, and add a port of 8000, and click save again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Osw7fryh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7wyp74nm2knk4uns1y5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Osw7fryh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7wyp74nm2knk4uns1y5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQWkctBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0u9jt2gwoijcjcq624qc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQWkctBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0u9jt2gwoijcjcq624qc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---AbIiv3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzbzfuo3fq08sf9boo8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---AbIiv3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzbzfuo3fq08sf9boo8r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next thing to do is to create a new postgresql database. To do this, head over to the environment, and at the top-right corner, click on Add, and under it click on Database&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--INkq6-tE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kafj6gchbohf8wz0yj1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--INkq6-tE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kafj6gchbohf8wz0yj1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, choose a database name, and under Type, choose POSTGRESQL and version 11.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nFVyPAne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sj4qtrvzbvckultgtyh4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nFVyPAne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sj4qtrvzbvckultgtyh4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you click create, it will create a new postgresql database and it will redirect you to the database page. In there, got to the top-right corner and click on settings, under settings, click Deploy&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FPCp3-si--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l78gbj3st02chcj68i6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FPCp3-si--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l78gbj3st02chcj68i6x.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will deploy your posgresql database.&lt;/p&gt;

&lt;p&gt;Once your database is deployed and running, the database page should look like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bCC2T01S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhjbcitcocnlaqwrf4f5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCC2T01S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhjbcitcocnlaqwrf4f5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our app created and our postgresql database deployed, let's connect them together using environment and secret variables.&lt;/p&gt;

&lt;p&gt;Go into the app, at the left part, head over to 'Environment Variables'. Now what you need to do is to got into the 'settings.py' file of your django project and set the database using this format: &lt;br&gt;
&lt;code&gt;DATABASES = {&lt;br&gt;
  'default': {&lt;br&gt;
    'ENGINE': 'django.db.backends.postgresql_psycopg2',&lt;br&gt;
    'NAME': os.environ.get('QOVERY_POSTGRESQL_Z5B5DF0B7_DEFAULT_DATABASE_NAME', 'postgres'),&lt;br&gt;
    'USER': os.environ.get('QOVERY_POSTGRESQL_Z5B5DF0B7_LOGIN', 'postgres'),&lt;br&gt;
    'PASSWORD': os.environ.get('QOVERY_POSTGRESQL_Z5B5DF0B7_PASSWORD'),&lt;br&gt;
    'HOST': os.environ.get('QOVERY_POSTGRESQL_Z5B5DF0B7_HOST', 'z5b5df0b7-postgresql.||Q_DOMAIN||'),&lt;br&gt;
    'PORT': os.environ.get('QOVERY_POSTGRESQL_Z5B5DF0B7_PORT', 5432),&lt;br&gt;
  }&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All you need to do is to replace all the QOVERY_POSTGRESQL_XYXYXYX with the values in your Environment Variable.&lt;/p&gt;

&lt;p&gt;Once you have done this, the final thing to do is to deploy your django app. Now, go into your app and click on Actions, under Actions, click Deploy&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1O9ylRBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxqfnn8a3j6vnz8rc7js.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1O9ylRBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxqfnn8a3j6vnz8rc7js.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congrats! You have successfully deployed your Django app with PostgreSQL On AWS using Qovery. &lt;/p&gt;

&lt;p&gt;You can also watch the video version of this tutorial &lt;a href="https://www.youtube.com/watch?v=Qlwv7FzHADM"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>qovery</category>
      <category>postgres</category>
      <category>aws</category>
    </item>
    <item>
      <title>Debugging in Production-How to move fast without breaking things</title>
      <author>Shai Almog</author>
      <pubDate>Fri, 17 Sep 2021 06:56:17 +0000</pubDate>
      <link>https://dev.to/codename_one/debugging-in-production-how-to-move-fast-without-breaking-things-3hnl</link>
      <guid>https://dev.to/codename_one/debugging-in-production-how-to-move-fast-without-breaking-things-3hnl</guid>
      <description>&lt;p&gt;Mark Zuckerberg famously quipped that Facebook works under the "Move fast and break things" motto. We can write all the unit tests in the world, have the largest QA pipeline but still bugs slither into production. That's just a fact of life which he chose to celebrate. &lt;/p&gt;

&lt;p&gt;When dealing with an incredibly complex system like we have in &lt;a href="https://www.codenameone.com"&gt;Codename One&lt;/a&gt; this can be the difference between releasing an update and doing nothing. &lt;/p&gt;

&lt;p&gt;If you are a visual learner check out the following video:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/X92BW_v3ZhE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disaster-strikes"&gt;
  &lt;/a&gt;
  Disaster Strikes
&lt;/h2&gt;

&lt;p&gt;The problem with this approach becomes apparent when we have a bug in production. Normally, a bug that would go through staging, QA and tests wouldn't be too horrible... But since it's a production only bug you're often faced with two options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Revert - That might not be an option for all cases&lt;/li&gt;
&lt;li&gt;Find/Implement a Fix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that I left out "reproduce it locally". This is often not an option for production bugs which work on a separate DB in "real world" conditions. In our case local debugging is very difficult due to the multiple separate servers that hand off tasks to one another.&lt;br&gt;
The second option is usually best but it includes a huge risk: what if the fix fails?&lt;/p&gt;

&lt;p&gt;Since production deployment is often a slow process that requires a QA cycle this compounds the problem. You make a fix then have to wait for hours only to find out that you got it wrong... This used to be us.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enter-lightrun"&gt;
  &lt;/a&gt;
  Enter Lightrun
&lt;/h2&gt;

&lt;p&gt;So a couple of years ago I met two young founders who had an idea on how to solve this problem. Essentially, it's a new kind of debugger that works very differently from a regular debugger. &lt;br&gt;
The gist of this is that your app constantly runs in a production debugging mode, the overhead is barely noticeable. A secure agent connects the app to the cloud and lets you debug in a special way. &lt;br&gt;
E.g. instead of breakpoints you have snapshots. They don't "break". They provide you with a stack trace of the thread and the variable state at the given time. You can also inject log statements, count executions and even do simple profiling on methods or blocks of code.&lt;/p&gt;

&lt;p&gt;I was so impressed by this idea that I decided to join the team and now hold two jobs (at &lt;a href="https://www.codenameone.com/"&gt;Codename One&lt;/a&gt; and at &lt;a href="https://www.lightrun.com"&gt;Lightrun&lt;/a&gt;). The cool thing is that my job at Codename One is now much easier thanks to Lightrun.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bugs-in-production"&gt;
  &lt;/a&gt;
  Bugs in Production...
&lt;/h2&gt;

&lt;p&gt;90% of my work at Codename One is putting out fires. A subscriber writes to our support complaining about a failure of a build or push servers etc. This used to be very hard to debug. We would spend hours reading huge logs and guessing&lt;br&gt;
Then we'd deploy additional logs, ask the user to send a new build and then reread the logs to figure out what the hell went wrong. Some of the guessing is always there but with Lightrun the whole process is practically instant.&lt;br&gt;
With Lightrun we can just set a conditional snapshot e.g.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4u1vPWeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6ik4ha6b8cxbzhfpyno.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4u1vPWeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6ik4ha6b8cxbzhfpyno.png" alt="Debugging a failure in push"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the case above I can grab a snapshot when a specific user sends a push. This is a conditional breakpoint, that's a useful tool when debugging locally. It's an indispensable tool when debugging in production. We only want to see the information related to a specific user and not all users...&lt;/p&gt;

&lt;p&gt;When the snapshot hits we end up with a stack trace similar to this one (I blacked out private information in the image).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xgraXoih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w29e7l9922xohoj7q5gm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xgraXoih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w29e7l9922xohoj7q5gm.png" alt="Snapshot Stack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that a Snapshot looks just like a regular breakpoint. It's missing the threads and you can't step over. But you can walk the stack and inspect the values of fields/variables etc. when the application is still running... &lt;br&gt;
Pretty darn useful!&lt;br&gt;
Instead of stepping over you can just add multiple snapshots or even inject logs to print information when hitting a specific line. Including simple expressions such as: &lt;code&gt;"The value is {obj.getValue()}"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My immediate thought was "won't this be expensive?". &lt;br&gt;
It isn't. If we have a very complex/expensive expressions that prints too much per second or uses problematic (e.g. recursive) logic,  Lightrun is smart enough to limit itself so the expression won't take too much CPU. It protects you from shooting yourself in the foot... &lt;br&gt;
As a result of that there's no noticeable performance overhead and you can work without worrying. But I digress, lets go back to the push server example above.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#unexpected-bug"&gt;
  &lt;/a&gt;
  Unexpected Bug
&lt;/h2&gt;

&lt;p&gt;When I started this post I wanted to reproduce a debugging session for a user problem but as I was grabbing the screenshots for the session I noticed something weird in the stack. The value of &lt;code&gt;subscriptionLevel&lt;/code&gt; was gibberish. It was way too large.&lt;/p&gt;

&lt;p&gt;Turns out we had a bug in reading the user subscription level when sending push messages. That meant that quotas and rate limits weren't applied at all in our push server!&lt;br&gt;
I'm sure we lost income because of this bug, users whose subscription elapsed could still send push messages at volume without a problem. Ugh!&lt;br&gt;
This is one of the coolest benefits of Lightrun, it lets you see clearly into the running system and verify your expectations. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#expected-user%C2%A0problem"&gt;
  &lt;/a&gt;
  Expected User Problem
&lt;/h2&gt;

&lt;p&gt;The real problem I debugged relates to that line above. A user stopped getting iOS push messages. I just placed a Snapshot (AKA breakpoint) with his token, then inspected the values sent to the push server.&lt;br&gt;
I could then see the URL of the push certificate and could instantly verify that it expired. This was easier to do than debugging locally!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-deeper%C2%A0pipeline"&gt;
  &lt;/a&gt;
  The Deeper Pipeline
&lt;/h2&gt;

&lt;p&gt;User issues are very important but issues that no one is aware of are possibly even more important...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qx1MiW0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n0f8mwsfdz0nl36uv00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qx1MiW0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n0f8mwsfdz0nl36uv00.png" alt="Exception Monitoring"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lightrun also provides a way to detect exceptions (caught or uncaught). We can review the stack traces periodically to see if there are errors that we didn't detect. This isn't a unique feature to Lightrun, but it fits perfectly as you can easily trace a problem you saw in the stack traces.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#metrics"&gt;
  &lt;/a&gt;
  Metrics
&lt;/h2&gt;

&lt;p&gt;Lightrun also includes metrics such as counters, tictocs and method duration measurements. This is super useful for micro-benchmarks in production but we don't need this as much in Codename One. Our backend is relatively simple and these never came up.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-lightrun%C2%A0"&gt;
  &lt;/a&gt;
  Installing Lightrun 
&lt;/h2&gt;

&lt;p&gt;So, there has to be a downside right?&lt;/p&gt;

&lt;p&gt;Installing the plugin in the IDE and signing up is very easy... But agent setup is still challenging. I spent a lot of time trying to get it to work on all our servers. Admittedly the Codename One architecture is pretty complex filled with a lot of legacy and pre-docker deployment choices. Prepare yourself for a bit of work. It might be trivial but you might need some help from the web chat support channel (which is super responsive)...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ewR_hL20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3ud1agmx6ve69acifel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ewR_hL20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3ud1agmx6ve69acifel.png" alt="Signup Page on app.lightrun.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you sign up at &lt;a href="https://app.lightrun.com/"&gt;https://app.lightrun.com/&lt;/a&gt; you get a wizard that verifies you performed the steps correctly:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Og6cBuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9kitutrdqb1dkxk33q1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Og6cBuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9kitutrdqb1dkxk33q1.png" alt="Install the Plugin and Login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To pass the first step you need to install the IntelliJ plugin from the marketplace &lt;a href="https://plugins.jetbrains.com/plugin/16477-lightrun"&gt;https://plugins.jetbrains.com/plugin/16477-lightrun&lt;/a&gt;. You then need to restart the IDE, open the Lightrun tool window on the right hand side and press the login button.&lt;br&gt;
Once logged in, the Next button in the wizard will become enabled and you could move on to the agent installation step. This is the hard part...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cIH1Rz94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptpd7riteorb5quzisn3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cIH1Rz94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptpd7riteorb5quzisn3.jpeg" alt="Agent Install instructions, notice I erased private information"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The agent is typically installed on your server and not on your local machine. So when I reached this page "Mac" was selected. I had to explicitly select the Linux page and copy the script that installs the agent on Linux machines.&lt;br&gt;
 &lt;br&gt;
The next step is to SSH to the machine and run the script. It creates an "agent" directory which we'll use when binding the agent. The gist of this is that we need to add the &lt;code&gt;-agentpath&lt;/code&gt; argument to the JVM. That's very simple if your deployment has a "java" command invocation at some point but if your running as a service or within a container that might not be so simple.&lt;/p&gt;

&lt;p&gt;Once you do that the "Next" option will be enabled and you would be able to use Lightrun. &lt;br&gt;
But there are more complex cases, I would recommend reviewing the list &lt;a href="https://docs.lightrun.com/"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;One example is our older Tomcat server used for push. I had to edit &lt;code&gt;catalina.sh&lt;/code&gt; and add something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;JAVA_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$JAVA_OPTS&lt;/span&gt;&lt;span class="s2"&gt; -agentpath:/home/username/agent/lightrun_agent.so= - lightrun_extra_class_path=/home/username/apache-tomcat/webapps/myapp.war"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the extra option of &lt;code&gt;--lightrun_extra_class_path&lt;/code&gt; (that's 2 minus signs) which we use to explicitly state the classpath. You might need that if things aren't auto-detected properly.&lt;br&gt;
This let the agent run but I got no variables in my stack traces... Turns out I had to recompile the code with full debug options turned on (&lt;code&gt;-g&lt;/code&gt;). This was a bit of a challenge in Maven. The solution was to add these properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
 ...
 &lt;span class="nt"&gt;&amp;lt;maven.compiler.debug&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/maven.compiler.debug&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;debug&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/debug&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;debugLevel&amp;gt;&lt;/span&gt;lines,vars,source&lt;span class="nt"&gt;&amp;lt;/debugLevel&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;maven.compiler.debuglevel&amp;gt;&lt;/span&gt;lines,vars,source&lt;span class="nt"&gt;&amp;lt;/maven.compiler.debuglevel&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can test that &lt;code&gt;-g&lt;/code&gt; is missing using code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;javap &lt;span class="nt"&gt;-classpath&lt;/span&gt; Project/target/classes &lt;span class="nt"&gt;-v&lt;/span&gt; pkg.ClassName | &lt;span class="nb"&gt;grep &lt;/span&gt;LocalVariableTable
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this prints nothing then the class doesn't contain debug information.&lt;br&gt;
Again, this is an involved process. I strongly suggest engaging support while going through it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;The reason we don't rush to production is the tedious and slow process of fixing production issues. But this creates an overly complex multi-branch support structure that ends up making matters worse. &lt;br&gt;
If we can debug quickly in the production and fix right away our overall stability increases while keeping a low overhead. IMO Deploying a server today without debugging tools is akin to coding without an IDE. You can do that but you're missing out on modern advancements in our field.&lt;br&gt;
At &lt;a href="https://www.codenameone.com/"&gt;Codename One&lt;/a&gt; our user support tasks are resolved much faster and more effectively thanks to &lt;a href="https://www.lightrun.com/"&gt;Lightrun&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>java</category>
      <category>cloud</category>
      <category>tooling</category>
    </item>
    <item>
      <title>"Web Components will replace Frontend Frameworks"</title>
      <author>Marius Bongarts</author>
      <pubDate>Fri, 17 Sep 2021 06:43:25 +0000</pubDate>
      <link>https://dev.to/mariusbongarts/web-components-will-replace-frontend-frameworks-19l5</link>
      <guid>https://dev.to/mariusbongarts/web-components-will-replace-frontend-frameworks-19l5</guid>
      <description>&lt;p&gt;In the 2nd part of our series, we will implement our Blog portfolio and have a deeper look at how to handle the data flow within Web Components.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="https://medium.com/@mariusbongarts11/build-your-own-blog-portfolio-with-web-components-data-flow-6c1a8f09c252" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LfpZ9m70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/56/56/1%2AtHDAGXmHWPWPSCMJyPPvQg.png" alt="Marius Bongarts"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/@mariusbongarts11/build-your-own-blog-portfolio-with-web-components-data-flow-6c1a8f09c252" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build Your Own Blog Portfolio with Web Components: Data Flow | by Marius Bongarts | Sep, 2021 | Medium&lt;/h2&gt;
      &lt;h3&gt;Marius Bongarts ・ &lt;time&gt;Sep 17, 2021&lt;/time&gt; ・ 
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ze5yh_2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Layered Gradient Playground</title>
      <author>Mads Stoumann</author>
      <pubDate>Fri, 17 Sep 2021 06:43:20 +0000</pubDate>
      <link>https://dev.to/madsstoumann/layered-gradient-playground-102j</link>
      <guid>https://dev.to/madsstoumann/layered-gradient-playground-102j</guid>
      <description>&lt;p&gt;A while ago, I saw &lt;a href="https://twitter.com/argyleink/status/1233406753892515847"&gt;this tweet&lt;/a&gt; by Adam Argyle. It's a clever way of layering gradients, using CSS &lt;code&gt;mask-image&lt;/code&gt;. For a new project I'm working on, I want a timeline, where layered background-gradients will change the site’s “look and feel” during the day.&lt;/p&gt;

&lt;p&gt;To help me create all these gradients, I built a small tool, based on Adam’s idea:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/eYRyqXY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I hope it's as useful for you, as it's been for me!&lt;br&gt;
The CSS code is rendered at the bottom.&lt;/p&gt;

</description>
      <category>css</category>
      <category>codepen</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Introduction to Git: Part 2</title>
      <author>Aaron McCollum</author>
      <pubDate>Fri, 17 Sep 2021 06:28:56 +0000</pubDate>
      <link>https://dev.to/aaronmccollum/introduction-to-git-part-2-50me</link>
      <guid>https://dev.to/aaronmccollum/introduction-to-git-part-2-50me</guid>
      <description>&lt;p&gt;This is part 2 of the introduction to Git. You can &lt;a href="https://codingwithaaron.wordpress.com/2021/08/31/an-introduction-to-git-part-1/"&gt;check out Part 1 of the Introduction to Git here&lt;/a&gt;, which goes over the history of Git and the theoretical way it works. In this post, it will be more brief with a step-by-step process on using Git.&lt;/p&gt;

&lt;p&gt;As a quick note: anything inside these symbols (&amp;lt; and &amp;gt;) is meant to convey unique inputs, and the &amp;lt; and &amp;gt; symbols are not to be actually typed in the terminal.&lt;/p&gt;

&lt;p&gt;Git’s main syntax is as follows: &lt;strong&gt;program | action | destination&lt;/strong&gt; (&lt;code&gt;git add &amp;lt;FILE NAME&amp;gt;&lt;/code&gt; as an example). You will see below this syntax play out in real time. &lt;code&gt;Git&lt;/code&gt; is the program, &lt;code&gt;add&lt;/code&gt; is the action, and the destination of the action is on the &lt;code&gt;&amp;lt;FILE NAME&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started-on-a-project"&gt;
  &lt;/a&gt;
  Getting Started on a project
&lt;/h3&gt;

&lt;p&gt;When you create a new repository in Github, it will provide the SSH key for you to link to your local disk’s Git program. You can copy the link, then use:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git clone &amp;lt;URL Link&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will clone your program onto your local computer for you to work on. You can then use the &lt;code&gt;cd&lt;/code&gt; command to change to the project’s directory and start adding files, and then you can use the code command to open the files up in VS Code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;cd &amp;lt;REPO NAME&amp;gt;
&amp;gt;touch index.html
&amp;gt;touch style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#making-changes-and-committing"&gt;
  &lt;/a&gt;
  Making Changes and Committing
&lt;/h3&gt;

&lt;p&gt;Once files are added to your project in Git, they are either staged or not staged. Not staged means they will not be committed when you start your next commit push, while staged means they are ready to be committed. If a file is not staged, it will by default show up as red in your console, and files that are staged will show up as green. You can check the status of each file by typing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If a file is not staged but is ready to be staged, you can type the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git add &amp;lt;FILE NAME&amp;gt;&lt;/code&gt; (you can list multiple file names separated by spaces)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you are ready to commit your staged files, you can use the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git commit -m "COMMIT MESSAGE"&lt;/code&gt; (the -m flag is a message flag for note-taking)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At any point, if you would like to see a record of what you did, you can use the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#a-few-other-odds-and-ends"&gt;
  &lt;/a&gt;
  A Few Other Odds and Ends
&lt;/h3&gt;

&lt;p&gt;When you change a file you are working on that is part of your local project in Git, it will automatically change to the “modified” status when you use the git status command, since it’s being tracked by Git.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git add &amp;lt;FILE&amp;gt;&lt;/code&gt; will stage the individual file&lt;br&gt;
&lt;code&gt;git add .&lt;/code&gt; will stage everything in the current directory&lt;br&gt;
&lt;code&gt;git add -A&lt;/code&gt; will stage everything that’s unstaged in the entire project&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#pushing-to-github"&gt;
  &lt;/a&gt;
  Pushing to Github
&lt;/h3&gt;

&lt;p&gt;When you are ready to push your changes and commits to Github, you can use the following command. This one is a little slower since you are connecting with a remote server:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git push origin main&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#source-of-learning"&gt;
  &lt;/a&gt;
  Source of Learning
&lt;/h3&gt;

&lt;p&gt;I have been learning &lt;a href="https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/git-basics"&gt;Git on The Odin Project&lt;/a&gt; and have really enjoyed it. Their explanations are far better than mine and that’s a great resource if you are like me and starting out.&lt;/p&gt;

&lt;p&gt;Also the Git website features a &lt;a href="https://git-scm.com/book/en/v2"&gt;full version of the book “Pro Git”&lt;/a&gt; by Scott Chacon and Ben Straub, which I found very useful for a lot of information.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>learning</category>
      <category>git</category>
      <category>github</category>
    </item>
    <item>
      <title>Responsive Restaurant Website 🍔.</title>
      <author>Aman Singh</author>
      <pubDate>Fri, 17 Sep 2021 06:26:23 +0000</pubDate>
      <link>https://dev.to/aman2221/responsive-restaurant-website-26mf</link>
      <guid>https://dev.to/aman2221/responsive-restaurant-website-26mf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#responsive-restaurant-website-built-using-html-css-react"&gt;
  &lt;/a&gt;
  Responsive Restaurant Website built using html, css, react.
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#features-"&gt;
  &lt;/a&gt;
  Features :
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Color customization.&lt;/li&gt;
&lt;li&gt;Developed first with the Mobile First methodology, then for desktop.&lt;/li&gt;
&lt;li&gt;Compatible with all mobile devices and with a beautiful and pleasant user interface.&lt;/li&gt;
&lt;li&gt;Optimized SEO.&lt;/li&gt;
&lt;li&gt;Search Items.&lt;/li&gt;
&lt;li&gt;Categorize items.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FV6XBAOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vw746q22dz0r1cb9hr6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FV6XBAOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vw746q22dz0r1cb9hr6w.png" alt="restro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-repository-"&gt;
  &lt;/a&gt;
  GitHub Repository :
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Aman2221"&gt;
        Aman2221
      &lt;/a&gt; / &lt;a href="https://github.com/Aman2221/RESTAURANT_APP"&gt;
        RESTAURANT_APP
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Responsive Restaurant Website built using html, css, react.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Getting Started with Create React App&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/33525ea4d61eb73986276b48579de1aba040020c4af52285a1dc57fd0d57d78f/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f7677373436713232647a307231636239687236772e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/33525ea4d61eb73986276b48579de1aba040020c4af52285a1dc57fd0d57d78f/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f7677373436713232647a307231636239687236772e706e67" alt="Landing page"&gt;&lt;/a&gt;&lt;/p&gt;
This project was bootstrapped with [Create React App](&lt;a href="https://github.com/facebook/create-react-app"&gt;https://github.com/facebook/create-react-app&lt;/a&gt;)
&lt;h2&gt;
Available Scripts&lt;/h2&gt;
&lt;p&gt;In the project directory, you can run:&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm start&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;Runs the app in the development mode.&lt;br&gt;
Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; to view it in the browser.&lt;/p&gt;
&lt;p&gt;The page will reload if you make edits.&lt;br&gt;
You will also see any lint errors in the console.&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm test&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;Launches the test runner in the interactive watch mode.&lt;br&gt;
See the section about &lt;a href="https://facebook.github.io/create-react-app/docs/running-tests" rel="nofollow"&gt;running tests&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm run build&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;Builds the app for production to the &lt;code&gt;build&lt;/code&gt; folder.&lt;br&gt;
It correctly bundles React in production mode and optimizes the build for the best performance.&lt;/p&gt;
&lt;p&gt;The build is minified and the filenames include the hashes.&lt;br&gt;
Your app is ready to be deployed!&lt;/p&gt;
&lt;p&gt;See the section about &lt;a href="https://facebook.github.io/create-react-app/docs/deployment" rel="nofollow"&gt;deployment&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm run eject&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Note: this is a one-way operation. Once you &lt;code&gt;eject&lt;/code&gt;, you can’t go back!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Aman2221/RESTAURANT_APP"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#thank-you-%EF%B8%8F"&gt;
  &lt;/a&gt;
  Thank you ❤️️
&lt;/h2&gt;

</description>
      <category>react</category>
      <category>html</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Electron Adventures: Episode 54: Notebook state management with useImmer</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Fri, 17 Sep 2021 06:07:06 +0000</pubDate>
      <link>https://dev.to/taw/electron-adventures-episode-54-notebook-state-manegement-with-useimmer-b5l</link>
      <guid>https://dev.to/taw/electron-adventures-episode-54-notebook-state-manegement-with-useimmer-b5l</guid>
      <description>&lt;p&gt;For most of this series we used Svelte, which is extremely flexible at managing complex state. You can modify whatever you want wherever you want, and at most you'll just need to ping the component with &lt;code&gt;foo = foo&lt;/code&gt; to let it know that &lt;code&gt;foo&lt;/code&gt; changed in some unusual way. Usually you don't even need that.&lt;/p&gt;

&lt;p&gt;React is a lot more strict, and for what we need we cannot leave the state in individual components, we need to pull it up to the &lt;code&gt;App&lt;/code&gt; component. Making modifications to deeply nested state is a lot of nasty code, fortunately React world has a solution - &lt;a href="https://github.com/immerjs/immer"&gt;&lt;code&gt;immer&lt;/code&gt;&lt;/a&gt; and its hooks version &lt;a href="https://github.com/immerjs/use-immer"&gt;&lt;code&gt;useImmer&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So first we &lt;code&gt;npm install use-immer&lt;/code&gt;, and then we can start!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-srcindexcss-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/index.css&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;We'll be adding some buttons so we need to add just a small entry for buttons. Here's the whole file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.command&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.command&lt;/span&gt; &lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#666&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.command&lt;/span&gt; &lt;span class="nc"&gt;.output&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#666&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#666&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-srccommandjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/Command.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This component has handles a piece of code, its associated output, and a few buttons related to it.&lt;/p&gt;

&lt;p&gt;The interesting thing is &lt;code&gt;updateEntry&lt;/code&gt; code, which gets part of an &lt;code&gt;useImmer&lt;/code&gt;-managed draft, and can do deep modifications to it.&lt;/p&gt;

&lt;p&gt;I was wondering if this component should also manage &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;deleteThis&lt;/code&gt;, and &lt;code&gt;addNew&lt;/code&gt; - and with &lt;code&gt;useImmer&lt;/code&gt; it's actually quite fine. I ended up not doing this, as &lt;code&gt;App&lt;/code&gt; also needs &lt;code&gt;Run All&lt;/code&gt; button, and having &lt;code&gt;Run&lt;/code&gt; in the &lt;code&gt;App&lt;/code&gt;, but &lt;code&gt;Delete&lt;/code&gt; and &lt;code&gt;Add New&lt;/code&gt; managed in the &lt;code&gt;Command&lt;/code&gt; component felt weird.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateEntry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteThis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addNew&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;updateEntry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;handleKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;metaKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;command&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;textarea&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleKey&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Run&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;deleteThis&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Delete&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;addNew&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-srcappjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/App.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;App&lt;/code&gt; component is pretty big, so let's cover it piece by piece.&lt;/p&gt;

&lt;p&gt;The template is easy enough. The most unobvious way is that we do &lt;code&gt;run={run(index)}&lt;/code&gt; instead of more usual &lt;code&gt;run={(event) =&amp;gt; run(index, event)}&lt;/code&gt;. I think this is clearer, as template is already very busy, and too many &lt;code&gt;=&amp;gt;&lt;/code&gt; there make it very difficult to read.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useImmer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use-immer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CommandBox&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./CommandBox.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Notebook&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;notebook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CommandBox&lt;/span&gt;
          &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;updateEntry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;updateEntry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="nx"&gt;deleteThis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;deleteThis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="nx"&gt;addNew&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;addNew&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;runAll&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Run&lt;/span&gt; &lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But first we need to create the state. I just added some random Python snippets. &lt;code&gt;useImmer&lt;/code&gt; has very similar API to &lt;code&gt;useState&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;notebook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateNotebook&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useImmer&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;print('Hello')&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;print('World')&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;print(f'2+2={2+2}')&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now here's the fun one - &lt;code&gt;updateEntry&lt;/code&gt;. It's a curried function, which we take full advantage of by doing &lt;code&gt;updateEntry={updateEntry(index)}&lt;/code&gt; in the template.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;CommandBox&lt;/code&gt; component only modifies the first argument of its callback. I also sent it &lt;code&gt;draft&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; because I thought &lt;code&gt;addNew&lt;/code&gt; and &lt;code&gt;deleteThis&lt;/code&gt; are going to be managed there, then I ended up not doing that, but I think it's fine to leave the API a bit more flexible. It's similar to how a lot of JavaScript callbacks pass extra &lt;code&gt;index&lt;/code&gt; argument that's usually ignored. For example &lt;code&gt;.map(element =&amp;gt; ...)&lt;/code&gt; is really &lt;code&gt;.map((element, index, array) =&amp;gt; ...)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;updateEntry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;updateNotebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;draft&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;draft&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;draft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the buttons follow similar curried pattern, and have fairly simple handlers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;notebook&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;runScript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;python3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;updateNotebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;draft&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;draft&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;addNew&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;updateNotebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;draft&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;draft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;deleteThis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;updateNotebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;draft&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;draft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;draft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;draft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;runAll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;notebook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h3&gt;

&lt;p&gt;Here's the results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZMqe6Mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq1fi5x95r196tcn0fxh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZMqe6Mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq1fi5x95r196tcn0fxh.png" alt="Episode 54 Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As usual, &lt;a href="https://github.com/taw/electron-adventures/tree/master/episode-54-notebook-state-management-with-useimmer"&gt;all the code for the episode is here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h3&gt;

&lt;p&gt;We made the frontend good enough for a simple notebook, but every code box is still running as an unconnected script.&lt;/p&gt;

&lt;p&gt;There's also a bit of a race condition that if code is taking a while to finish, and user deletes or adds boxes while the code is running, the output is going to go to the wrong place, but let's not worry too much about it for now.&lt;/p&gt;

&lt;p&gt;The next step is using simple HTTP backend to run various code bits we send to it, in shared context.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>electron</category>
      <category>python</category>
    </item>
  </channel>
</rss>
