<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Find Open Source Project to Contribute</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Mon, 31 May 2021 05:18:00 +0000</pubDate>
      <link>https://dev.to/basecampxd/find-open-source-project-to-contribute-m4o</link>
      <guid>https://dev.to/basecampxd/find-open-source-project-to-contribute-m4o</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;One of the main hectic things in open source is to find a good repository to contribute especially issues that fall under your skill sets. It becomes more painful with beginners as I went through the process of finding projects to contribute.&lt;/p&gt;

&lt;p&gt;To help you in finding good issues to solve on GitHub, we are going to look into websites and tips.  It will help you in finding good issues according to your skillset.&lt;/p&gt;

&lt;p&gt;So let's get started.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#github-issue-tab"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/issues"&gt;GitHub Issue Tab&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;GitHub Issue tab is not only for tracking your issue that you are assigned but also for finding issues. You can search issue through various term few prominent among them are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;is&lt;/strong&gt;: You can filtered issue on the basis of state i.e., open/closed and issues/pull request&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;&lt;span class="kd"&gt;is&lt;/span&gt;&lt;span class="nl"&gt;:open&lt;/span&gt; &lt;span class="kd"&gt;is&lt;/span&gt;&lt;span class="nl"&gt;:issue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;label&lt;/strong&gt;: You can search issue on the basis of label that are given i.e., help wanted/fronted/good first issue/etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;&lt;span class="nb"&gt;label&lt;/span&gt;:&lt;span class="s2"&gt;"good first issue"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;language&lt;/strong&gt;: Filtered the issue according to your preferred language i.e., javascript, java, dart&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;&lt;span class="kd"&gt;language&lt;/span&gt;&lt;span class="nl"&gt;:java&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All together will look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;&lt;span class="kd"&gt;is&lt;/span&gt;&lt;span class="nl"&gt;:open&lt;/span&gt; &lt;span class="kd"&gt;is&lt;/span&gt;&lt;span class="nl"&gt;:issue&lt;/span&gt; &lt;span class="nb"&gt;label&lt;/span&gt;:&lt;span class="s2"&gt;"good first issue"&lt;/span&gt; &lt;span class="kd"&gt;language&lt;/span&gt;&lt;span class="nl"&gt;:java&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---UoA61sF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo7mpgnmw34rjc8rnqtd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---UoA61sF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo7mpgnmw34rjc8rnqtd.PNG" alt="Issue search"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To know more about searching issue by different term click &lt;a href="https://docs.github.com/en/github/searching-for-information-on-github/searching-on-github/searching-issues-and-pull-requests#search-by-label"&gt;here&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#good-first-issue"&gt;
  &lt;/a&gt;
  &lt;a href="https://goodfirstissue.dev/"&gt;Good First Issue&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;They have a curated list of the popular open-source project for beginners to make their first contribution to open source. The list can be filtered through different languages. They have 20+ language support.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DLsdV2f6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qs8gyr0xdoxf7u8sgeh6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLsdV2f6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qs8gyr0xdoxf7u8sgeh6.png" alt="Good First Issue_ Issues for your first open-source contribution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the description, language, stars, and last activity of every repository.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#code-triage"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codetriage.com/"&gt;Code Triage&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Code triage delivers you best open issue to your inbox according to your preference. you can do it by clicking on the triage issue in any repository. They also have a great list of repositories for beginners to contribute. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ElYgckUW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1po30k44o8tioowurc9u.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ElYgckUW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1po30k44o8tioowurc9u.PNG" alt="Code Triage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The list can be filtered through language. It has 90+ language support. It also shows open issues and descriptions of the repository.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#awesome-open-source"&gt;
  &lt;/a&gt;
  &lt;a href="https://awesomeopensource.com/"&gt;Awesome Open Source&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This website is recommended by my friend &lt;a href="https://dev.to/mindninjax"&gt;Rishabh Singh&lt;/a&gt;. Awesome Open Source will help you in searching, browsing, and combining 7k topics across 59 categories and 371,159 projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FPYDC5ru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aytbu91vrmfgc1rgrljg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FPYDC5ru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aytbu91vrmfgc1rgrljg.png" alt="Find Open Source By Searching, Browsing and Combining 7,000 Topics"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;They have categorized every project according to their area of implementation such as security, networking, framework, graphics, etc.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  üîó Connect with me:
&lt;/h1&gt;

&lt;p&gt;Currently, on Twitter, I am posting about "How to write and grow blog?". If you want to write a more effective blog with tips, consider the follow button on Twitter.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Resources to make beautiful header images for your blog postüéÅüöÄ&lt;br&gt;&lt;br&gt;A Threadüßµ&lt;/p&gt;‚Äî Suraj Vishwakarma (&lt;a href="https://twitter.com/surajondev/"&gt;@surajondev&lt;/a&gt;) &lt;a href="https://twitter.com/surajondev/status/1398876227973222401?ref_src=twsrc%5Etfw"&gt;May 30, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;&lt;a href="https://twitter.com/surajondev"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-note"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;I hope this will help you in finding a good open source project according to your preference for contribution. &lt;/p&gt;

&lt;p&gt;Thank you for reading the blog post. &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
      <category>watercooler</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Berry Pro React Admin Released</title>
      <author>Rakesh S Nakrani</author>
      <pubDate>Mon, 31 May 2021 05:11:30 +0000</pubDate>
      <link>https://dev.to/rakesh_nakrani/berry-react-pro-released-3lj1</link>
      <guid>https://dev.to/rakesh_nakrani/berry-react-pro-released-3lj1</guid>
      <description>&lt;p&gt;Finally, The day is here. Berry Pro is released and available to purchase from Material-UI &lt;a href="https://material-ui.com/store/items/berry-react-material-admin/"&gt;store&lt;/a&gt;. Berry is a beautiful react admin template made using Material-UI v5 component library. You can build anything from a User Management panel to any complex backend project with power of fully structured code style and minimal User Interface.&lt;/p&gt;

&lt;p&gt;Berry is meant to be built for faster development with flexibility. In terms of development &amp;amp; easing work flow, we‚Äôve made the standard folder structure and prettier code style that cut down your development time and money.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To know more about Berry here is our post - &lt;a href="https://dev.to/rakesh_nakrani/all-you-need-to-know-about-berry-react-li6"&gt;Everything About Berry&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post, I do focusing more in depth about Berry's concern UI framework, why you choose Berry over other and what challenges we face while working on Berry project.&lt;br&gt;
Table of content&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Why Material-UI?&lt;/li&gt;
&lt;li&gt;What makes Berry different?&lt;/li&gt;
&lt;li&gt;While working on the Berry Project.&lt;/li&gt;
&lt;li&gt;Future plans &amp;amp; RoadMap&lt;/li&gt;
&lt;li&gt;Important links&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#why-materialui-a-preferred-choice-for-berry"&gt;
  &lt;/a&gt;
  Why Material-UI a preferred choice for Berry?
&lt;/h4&gt;

&lt;p&gt;When you think about Reactjs UI library, your might have 3 top choices for choosing reliable component library i.e. React Bootstrap, Ant design, and &lt;a href="https://material-ui.com/"&gt;Material-UI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Well, Here we detailed the Material-UI‚Äôs best features &lt;a href="https://dev.to/kylehunter/6-six-reasons-to-use-material-ui-for-react-1anh"&gt;compared to others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Strictly follow Material design guidelines.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It provides utility components, hooks, helpers and the theme customization engine.&lt;/li&gt;
&lt;li&gt;Designed for server-side rendering.&lt;/li&gt;
&lt;li&gt;CSS in JS solution combined with styled-components.&lt;/li&gt;
&lt;li&gt;Aesthetically brilliant with its animations and design styles.&lt;/li&gt;
&lt;li&gt;Each component functions independently.&lt;/li&gt;
&lt;li&gt;Extensive support for issues and bugs.&lt;/li&gt;
&lt;li&gt;Regularly updated library.&lt;/li&gt;
&lt;li&gt;Useful Documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In terms of appearance, Material-UI is a lot more dynamic and appealing when compared to React Bootstrap‚Äôs standard design.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-makes-berry-unique-in-crowd"&gt;
  &lt;/a&gt;
  What makes Berry unique in Crowd?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQPKMo_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1occxodqlmtq7vb6az4s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQPKMo_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1occxodqlmtq7vb6az4s.jpg" alt="Berry react admin template"&gt;&lt;/a&gt;&lt;br&gt;
Firstly, Berry‚Äôs refreshed design makes a significant difference from others. Secondly, Berry‚Äôs optimized code standard &amp;amp; easy to use folder structure opens the gate of easing development.&lt;/p&gt;

&lt;p&gt;For that we have made the Berry in a way that saves your thousands of dollars on development.&lt;/p&gt;

&lt;p&gt;Reasons to choose Berry&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code Performance&lt;/li&gt;
&lt;li&gt;Custom Components&lt;/li&gt;
&lt;li&gt;Over 90+ pages to choose on.&lt;/li&gt;
&lt;li&gt;Highly responsive and fully tested design.&lt;/li&gt;
&lt;li&gt;Video Tutorials and Easy Documentation Guide.&lt;/li&gt;
&lt;li&gt;Theme variants with predefined customization options like Font Family selection, Border Radius settings, and dark - light options.&lt;/li&gt;
&lt;li&gt;5+ fully configured Applications.&lt;/li&gt;
&lt;li&gt;2+ conceptual Dashboards.&lt;/li&gt;
&lt;li&gt;And lots more features.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#while-making-berry"&gt;
  &lt;/a&gt;
  While making Berry
&lt;/h4&gt;

&lt;p&gt;Before making Berry - we have made a pre-plan that makes sense for our final product. We are continuously on track to overcome the pain points of our users. For that we have made lots of iteration processes with agile methodology.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#design-phase"&gt;
  &lt;/a&gt;
  Design Phase
&lt;/h5&gt;

&lt;p&gt;Design is the most crucial part of Berry. You just ‚Äúwow‚Äù when you see the Berry for the first time. We know it better that the user's first interaction is Design instead of looking further into code.  So we got our first pain point - ‚ÄúThe Design‚Äù or you may say ‚ÄúUser Interface‚Äù.  Now it's time to re-think upon our past experience &amp;amp; make some fresh interface which is out of the box in the current market.&lt;/p&gt;

&lt;p&gt;In this phase, &lt;a href="https://twitter.com/olivtassinari"&gt;Mr. Olivier&lt;/a&gt; (Co-founder of Material-UI) helps us a lot to finalize the overall design aesthetics of Berry. We are also very much thankful to Mr. Olivier for supporting us in the whole project.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#development-phase"&gt;
  &lt;/a&gt;
  Development Phase
&lt;/h5&gt;

&lt;p&gt;It‚Äôs magic time to turn design into reality, Skin needs a hard skeleton for standing in a crowd. For that Material-UI serves the role of Skeleton. It has everything you demand for your next backend project. From UI components to design engine Material-UI is out of the box for faster development.&lt;br&gt;
Firstly, Berry is develop in Material-UI v4 version and while working version 5 is out with drastic changes in Performance. We have decided to migrate v4 to v5. Version 5 is our best decision to migrate Berry into it.&lt;/p&gt;

&lt;p&gt;It takes us almost 3 months of time to develop Berry from scratch. Each line of code is written carefully with proper style &amp;amp; formatting.&lt;/p&gt;

&lt;p&gt;You surely love the well commented code and easy navigation flow while using Berry for your next project.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#testing-phase"&gt;
  &lt;/a&gt;
  Testing Phase
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B9tkptG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrhe88on3vnga5095lej.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B9tkptG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrhe88on3vnga5095lej.jpg" alt="berry react testing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúMaking a Dashboard Template is a big thing‚Äù - You need to take care of each aspect of Design rendering, Code Performance, Speed, Validation, Device &amp;amp; Browser compatibility.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For Berry - Our past experience plays a significant role in the Testing Phase. We have a huge portfolio in &lt;a href="https://codedthemes.com/item/category/templates/admin-templates/"&gt;Admin Templates&lt;/a&gt; and know the process for the best practices for smooth testing flow.&lt;/p&gt;

&lt;p&gt;Our main challenge is for Dark layout and Responsive testing in modern devices.&lt;/p&gt;

&lt;p&gt;Each of our member from our team really worked hard to make Berry a high performance product. For responsive tests we have used the real devices that cover iPad, iPhone, iMac &amp;amp; Android devices. So you get a smooth interface in every corner of your project.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#roadmap"&gt;
  &lt;/a&gt;
  RoadMap
&lt;/h4&gt;

&lt;p&gt;Considering Berry as our long-run project - we do continuous work on the following activities for future plans.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Knowledge Base for more easing help&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtube.com/playlist?list=PLknn3jaIuWiDKKEy3EO-p5-MP1nSOgUr1"&gt;Video tutorial series&lt;/a&gt; - Guided Installation videos, detailed setup process that makes less burden to work with Berry&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codedthemes.gitbook.io/berry/roadmap"&gt;Roadmap&lt;/a&gt; for future releases&lt;/li&gt;
&lt;li&gt;Focus on detailing the &lt;a href="https://codedthemes.gitbook.io/berry/"&gt;Documentation&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#important-links"&gt;
  &lt;/a&gt;
  Important Links
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.producthunt.com/posts/berry-react-admin"&gt;Product Hunt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Live Preview - &lt;a href="https://berrydashboard.io/"&gt;https://berrydashboard.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Get Berry - &lt;a href="https://material-ui.com/store/items/berry-react-material-admin/"&gt;https://material-ui.com/store/items/berry-react-material-admin/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Free version - &lt;a href="https://github.com/codedthemes/berry-free-react-admin-template/"&gt;https://github.com/codedthemes/berry-free-react-admin-template/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How do you store your blog posts ideas?</title>
      <author>Siddharth</author>
      <pubDate>Mon, 31 May 2021 04:12:12 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/how-do-you-store-your-blog-posts-ideas-nn8</link>
      <guid>https://dev.to/siddharthshyniben/how-do-you-store-your-blog-posts-ideas-nn8</guid>
      <description>&lt;p&gt;Recently, I discovered a huge number of blog post ideas scattered all over my todo list, my notes app, and on paper.&lt;/p&gt;

&lt;p&gt;Since I rarely check these apps, I took all of my ideas and turned them into draft blog posts.&lt;/p&gt;

&lt;p&gt;I just wanna know, how do you store your ideas?&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Using Ansible</title>
      <author>Santhosh Balasa</author>
      <pubDate>Mon, 31 May 2021 03:54:46 +0000</pubDate>
      <link>https://dev.to/sbalasa/using-ansible-amf</link>
      <guid>https://dev.to/sbalasa/using-ansible-amf</guid>
      <description>&lt;p&gt;-&amp;gt; Command to validate Ansible playbook syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ansible-playbook &amp;lt;playbook.yml&amp;gt; --syntax-check
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Sample playbook to run command in localhost:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---

- name:Sample Ansible playbook 
  hosts: 127.0.0.1
  connection: local

  tasks:
    - name: Display hostname
      command: hostname
      register: out

    - debug: var=out.stdout_lines
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Run a playbook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ansible-playbook &amp;lt;playbook.yml&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Run multiple commands using playbook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---

- name: Run multiple commands
  hosts: 127.0.0.1
  connection: local

  vars:
    unix_command: ls

  tasks:
    - name: Display name of the host
      command: hostname
      register: task1

    - name: Execute {{ unix_command }}
      command: {{ unix_command }}
      register: task2

    - debug: var=task1.stdout_lines
    - debug: var=task2.stdout_lines
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>ansible</category>
    </item>
    <item>
      <title>Using Redis in iPython</title>
      <author>Santhosh Balasa</author>
      <pubDate>Mon, 31 May 2021 03:52:19 +0000</pubDate>
      <link>https://dev.to/sbalasa/using-redis-in-ipython-1fph</link>
      <guid>https://dev.to/sbalasa/using-redis-in-ipython-1fph</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;In [1]: import redis

In [2]: r = redis.Redis(host='localhost', port=6379, db=0)

In [3]: re = [
   ...:         {
   ...:             "cpu_util": "18",
   ...:             "mem_size": 4194303.9990234375,
   ...:             "mem_util": 0.0,
   ...:             "model": None,
   ...:             "re_temp": None,
   ...:             "reboot_reason": None,
   ...:             "role": "master",
   ...:             "serial":None,
   ...:             "slot": "0",
   ...:             "state": "OK",
   ...:             "status": 0,
   ...:             "id": "306f2fd7-229f-4aa8-b2c0-e420c85dcc3a",
   ...:             "cpu_temp": "",
   ...:             "cpu_temp_dgr": "",
   ...:             "load": 0,
   ...:             "re_temp_dgr": "",
   ...:             "role_priority": "",
   ...:             "up_datetime": "",
   ...:             "up_datetime_sec": "",
   ...:             "uptime": ""
   ...:         }
   ...:     ]

In [4]: re
Out[4]:
[{'cpu_util': '18',
  'mem_size': 4194303.9990234375,
  'mem_util': 0.0,
  'model': None,
  're_temp': None,
  'reboot_reason': None,
  'role': 'master',
  'serial': None,
  'slot': '0',
  'state': 'OK',
  'status': 0,
  'id': '306f2fd7-229f-4aa8-b2c0-e420c85dcc3a',
  'cpu_temp': '',
  'cpu_temp_dgr': '',
  'load': 0,
  're_temp_dgr': '',
  'role_priority': '',
  'up_datetime': '',
  'up_datetime_sec': '',
  'uptime': ''}]

In [5]: hostname = 'at-vie05d-rt1'

In [6]: hostname
Out[6]: 'at-vie05d-rt1'

In [7]: r.hset(f'router:{hostname}', 're', str(re))
Out[7]: 1

In [8]: v = r.hget(f'router:{hostname}', 're')

In [9]: import yaml

In [10]: re_from_redis = yaml.load(v)

In [11]: re_from_redis
Out[11]:
[{'cpu_util': '18',
  'mem_size': 4194303.9990234375,
  'mem_util': 0.0,
  'model': 'None',
  're_temp': 'None',
  'reboot_reason': 'None',
  'role': 'master',
  'serial': 'None',
  'slot': '0',
  'state': 'OK',
  'status': 0,
  'id': '306f2fd7-229f-4aa8-b2c0-e420c85dcc3a',
  'cpu_temp': '',
  'cpu_temp_dgr': '',
  'load': 0,
  're_temp_dgr': '',
  'role_priority': '',
  'up_datetime': '',
  'up_datetime_sec': '',
  'uptime': ''}]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;In [43]: redis_client.hmset(f'router:{hostname}', {'data': str(data)})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Redis on windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;winpty docker exec -it 8e76eea66688 redis-cli GET cnt:iface:72e76f51-1d54-4742-9462-1e29d0e88edb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>redis</category>
    </item>
    <item>
      <title>Sample Dtrace in Linux</title>
      <author>Santhosh Balasa</author>
      <pubDate>Mon, 31 May 2021 03:49:56 +0000</pubDate>
      <link>https://dev.to/sbalasa/sample-dtrace-in-linux-2pp3</link>
      <guid>https://dev.to/sbalasa/sample-dtrace-in-linux-2pp3</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/sbin/dtrace -s
#pragma D option quiet

BEGIN
{
¬† ¬† ¬† ¬† printf("Starting vxdisk resize analysis at %lu", timestamp);
¬† ¬† ¬† ¬† printf("\n");
}

END
{
¬† ¬† ¬† ¬† printf("Ending vxdisk resize analysis at %lu", timestamp);
¬† ¬† ¬† ¬† printf("\n");
}


#!/usr/sbin/dtrace -s
#pragma D option quiet

fbt:vxio:volsp_strategy:entry
{
¬† ¬† ¬† ¬† printf("%Y vm issued IO buf %p\n", walltimestamp, arg0);
¬† ¬† ¬† ¬† self-&amp;gt;buf=arg0;
}

fbt::ldi_strategy:entry
/self-&amp;gt;buf == arg0/
{
¬† ¬† ¬† ¬† printf(" %Y ldi_strategy received vm buf %p\n", walltimestamp, arg0);
}

fbt::ldi_strategy:return
/self-&amp;gt;buf == arg1/
{
¬† ¬† ¬† ¬† printf(" %Y ldi_strategy returned vm buf %p\n", walltimestamp, arg1);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>dtrace</category>
      <category>linux</category>
    </item>
    <item>
      <title>Toggle üåí dark and üîÜ sunny mode using AlpineJS, TailwindCSS and localStorage</title>
      <author>Rinas</author>
      <pubDate>Mon, 31 May 2021 03:46:11 +0000</pubDate>
      <link>https://dev.to/onerinas/toggle-dark-and-sunny-mode-using-alpinejs-tailwindcss-and-localstorage-7fo</link>
      <guid>https://dev.to/onerinas/toggle-dark-and-sunny-mode-using-alpinejs-tailwindcss-and-localstorage-7fo</guid>
      <description>&lt;p&gt;Hey üëã&lt;/p&gt;

&lt;p&gt;Rinas here.&lt;/p&gt;

&lt;p&gt;This is done using some Alpine JS magic ü™Ñ and I really enjoyed implementing it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%8F%8E-lets-start"&gt;
  &lt;/a&gt;
  üèé Let's start
&lt;/h2&gt;

&lt;p&gt;Update your Tailwind config to let it know you can dark mode toggle based on class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will let you write &lt;code&gt;bg-gray-50 dark:bg-black&lt;/code&gt; and show background colours based on current mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-gray-100 dark:bg-gray-600"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's try to remove that hard coded &lt;code&gt;dark&lt;/code&gt; class in &lt;code&gt;html&lt;/code&gt; tag and grab the value from &lt;code&gt;localStorage&lt;/code&gt; using Alpine&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt;
  &lt;span class="na"&gt;x-data=&lt;/span&gt;&lt;span class="s"&gt;"{ darkMode: localStorage.getItem('dark') === 'true'} "&lt;/span&gt;
  &lt;span class="na"&gt;x-init=&lt;/span&gt;&lt;span class="s"&gt;"$watch('darkMode', val =&amp;gt; localStorage.setItem('dark', val))"&lt;/span&gt;
  &lt;span class="na"&gt;x-bind:class=&lt;/span&gt;&lt;span class="s"&gt;"{ 'dark': darkMode }"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#wait-whats-going-on-here"&gt;
  &lt;/a&gt;
  ü§î Wait, what's going on here?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x-data="{ darkMode: localStorage.getItem('dark') === 'true' "
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;x-data&lt;/code&gt; tells the framework to initialize a new component with the following data object.  In our case, the object is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think of it as a simple variable and setting &lt;code&gt;darkMode&lt;/code&gt;'s value to either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; based on the localStorage item &lt;code&gt;dark&lt;/code&gt;'s value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x-init="$watch('darkMode', val =&amp;gt; localStorage.setItem('dark', val))"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;$watch&lt;/code&gt; is a magic property (yup, that's the official terminology üòÅ) in Alpine used to watch a data we have and trigger a function.&lt;br&gt;
&lt;code&gt;x-init&lt;/code&gt; You might have already guessed it. It runs an expression when a component is initialized.&lt;/p&gt;

&lt;p&gt;So good so far? If not, let me know. I'll try to clarify in comments and update this post accordingly&lt;/p&gt;

&lt;p&gt;Let's add the button to toggle the theme now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"darkMode = !darkMode"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Toggle Theme
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#yup-thats-all-you-need"&gt;
  &lt;/a&gt;
  üèÅ Yup, that's all you need üòé
&lt;/h2&gt;




&lt;p&gt;Here is the polished version I used in &lt;a href="https://highscore.domains"&gt;HIGHSCORE.domains&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U0CFfU81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n70adi4dfmajrkb62bgk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U0CFfU81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n70adi4dfmajrkb62bgk.gif" alt="toggle"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This is my first time using AlpineJS and got featured in &lt;a href="https://buttondown.email/alpinejs/archive/alpinejs-weekly-61/"&gt;Alpine.js Weekly #61&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/hugo__df"&gt;@hugo__df&lt;/a&gt;
 &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://highscore.domains"&gt;highscore.domains&lt;/a&gt; got a darkmode toggled powered by Alpine and TailwindUI by &lt;a class="mentioned-user" href="https://dev.to/onerinas"&gt;@onerinas&lt;/a&gt;
 &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---QnZBza1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajtov32kq6dye84orslu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---QnZBza1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajtov32kq6dye84orslu.png" alt="Screenshot 2021-05-31 at 8.07.54 AM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Leaving few links here which might be useful if you want to try this out in your project:&lt;/p&gt;

&lt;p&gt;TailwindCSS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tailwindcss.com/docs/installation"&gt;https://tailwindcss.com/docs/installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwindcss.com/docs/dark-mode#toggling-dark-mode-manually"&gt;https://tailwindcss.com/docs/dark-mode#toggling-dark-mode-manually&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AlpineJS:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x-init&lt;/code&gt;&lt;br&gt;
Runs an expression when a component is initialized.&lt;br&gt;
&lt;a href="https://github.com/alpinejs/alpine#x-init"&gt;https://github.com/alpinejs/alpine#x-init&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x-data&lt;/code&gt;&lt;br&gt;
Declares a new component scope.&lt;br&gt;
&lt;a href="https://github.com/alpinejs/alpine#x-data"&gt;https://github.com/alpinejs/alpine#x-data&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;x-bind&lt;/code&gt;&lt;br&gt;
Sets the value of an attribute to the result of a JS expression.&lt;br&gt;
&lt;a href="https://github.com/alpinejs/alpine#x-bind"&gt;https://github.com/alpinejs/alpine#x-bind&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$watch&lt;/code&gt;&lt;br&gt;
Will fire a provided callback when a component property you "watched" gets changed.&lt;br&gt;
&lt;a href="https://github.com/alpinejs/alpine#watch"&gt;https://github.com/alpinejs/alpine#watch&lt;/a&gt;&lt;/p&gt;

</description>
      <category>alpinejs</category>
      <category>tailwindcss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Confluent Kafka Python Client</title>
      <author>Santhosh Balasa</author>
      <pubDate>Mon, 31 May 2021 03:45:26 +0000</pubDate>
      <link>https://dev.to/sbalasa/confluent-kafka-python-client-1pdi</link>
      <guid>https://dev.to/sbalasa/confluent-kafka-python-client-1pdi</guid>
      <description>&lt;p&gt;-&amp;gt; Download kafka and untar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget http://mirrors.estointernet.in/apache/kafka/2.1.0/kafka_2.11-2.1.0.tgz 
tar -xvf ./kafka_2.11-2.1.0.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Start Zookeeper service&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bin/zookeeper-server-start.sh config/zookeeper.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Start Kafka service&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bin/kafka-server-start.sh config/server.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Create a topic named obs_parser&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; bin/kafka-topics.sh --zookeeper localhost:2181 --create --topic obs3-meta --partitions 2 --replication-factor 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Start a Producer to send messages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bin/kafka-console-producer.sh --broker-list localhost:9092 --topic obs3-meta
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Start a Consumer to receive messages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic obs3_meta
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; &lt;code&gt;Ingest&lt;/code&gt;: To write into the queue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"""
Routines to write router info into Kafka Message Queue through resource uuid.

"""
from confluent_kafka import Producer
import logging

from settings import kafka_host, kafka_port, kafka_topic

logger = logging.getLogger(__name__)


def ingest(parsed_json):
    def delivery_msg(err, msg):
        if err:
            logger.error(f'obs3-meta kafka message failed delivery: {err}\n')

    p = Producer({'bootstrap.servers': f'{kafka_host}:{kafka_port}'})
    p.poll(0)
    p.produce(kafka_topic, str(msg), callback=delivery_msg)
    p.flush()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; &lt;code&gt;Egest&lt;/code&gt;: To read from the queue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from confluent_kafka import Consumer, KafkaError
import sys
import logging

from settings import kafka_host, kafka_port, kafka_topic

logger = logging.getLogger(__name__)


def egest(uuid):
    c = Consumer({
        'bootstrap.servers': f'{kafka_host}:{kafka_port}',
        'group.id': 'console-consumer-8436',
        'auto.offset.reset': 'earliest'
    })

    c.subscribe([kafka_topic])

    while True:
        msg = c.poll(1.0)
        if msg is None:
            continue
        if msg.error():
            print(f'Consumer error: {msg.error()}')
            continue
        if uuid in msg.value().decode('utf-8'):
            parsed_json = msg_value().decode('utf-8')
            break
    c.close()


if __name__ == '__main__':
    try:
        uuid = 'f70ab2e6-ca07-43b4-9586-de1c9fb45584'
        egest(uuid)
    except Exception as e:
        logger.error(f'Processor exit with: {e}', exc_info=True)
        sys.exit(1)  # exit with error
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>kafka</category>
    </item>
    <item>
      <title>SqlAlchemy Python ORM</title>
      <author>Santhosh Balasa</author>
      <pubDate>Mon, 31 May 2021 03:42:55 +0000</pubDate>
      <link>https://dev.to/sbalasa/sqlalchemy-python-orm-1bee</link>
      <guid>https://dev.to/sbalasa/sqlalchemy-python-orm-1bee</guid>
      <description>&lt;p&gt;-&amp;gt; Display the list of databases available&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sqlalchemy import create_engine
from pprint import pprint

db_user = 'debian-sys-maint'
db_passwd = 'WaVmczV8FotWsoAV'
db_host = 'localhost'

def main():
    engine = create_engine(f'mysql://{db_user}:{db_passwd}@{db_host}')
    pprint(engine.execute('SHOW DATABASES').fetchall())

if __name__ == '__main__':
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Display the list of tables in a db&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sqlalchemy import create_engine
from pprint import pprint

db_user = 'debian-sys-maint'
db_passwd = 'WaVmczV8FotWsoAV'
db_host = 'localhost'

def main():
    engine = create_engine(f'mysql://{db_user}:{db_passwd}@{db_host}/{db}')
    pprint(engine.execute('SHOW TABLES').fetchall())

if __name__ == '__main__':
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Add a Table&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, DateTime
from sqlalchemy.orm import relationship
from pprint import pprint


Base = declarative_base()


db_user = 'debian-sys-maint'
db_passwd = 'WaVmczV8FotWsoAV'
db = 'obs-parser'
db1 = 'mysql'
db_host = 'localhost'

class Sample(Base):
    __tablename__ = 'Sample'
    id = Column(String(50), primary_key=True)
    name = Column(String(50))
    age = Column(Integer)
    utc_timestamp = Column(DateTime)


def main():
    engine = create_engine(f'mysql://{db_user}:{db_passwd}@{db_host}/{db1}')
    pprint(engine.execute('SHOW TABLES').fetchall())
    Base.metadata.create_all(engine)
    pprint(engine.execute('SHOW TABLES').fetchall())


if __name__ == '__main__':
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Delete a Table&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;engine.execute('DROP TABLE IF EXISTS &amp;lt;Table_name&amp;gt;')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Add and show Data from the Table Eg: JSON&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, DateTime, JSON
from sqlalchemy.orm import relationship, sessionmaker
from pprint import pprint


Base = declarative_base()
db_user = 'root'
db_passwd = 'root'
db = 'mysql'
db_host = 'localhost'


#SQL Enigne
engine = create_engine(f'mysql://{db_user}:{db_passwd}@{db_host}/{db}', echo=True)


def add_data(class_name, data):
    # create a Session
    Session = sessionmaker(bind=engine)
    session = Session()
    session.add(Sample(**data))
    session.commit()


def show_data(class_name):
    # create a Session
    Session = sessionmaker(bind=engine)
    session = Session()
    for sample in session.query(class_name).order_by(class_name.id):
        pprint(vars(sample))


class Sample(Base):
    __tablename__ = 'Sample'


    id = Column(String(50), primary_key=True)
    name = Column(String(50))
    age = Column(Integer)
    utc_timestamp = Column(String(20))
    lacp_info = Column(JSON)



def main():
    engine.execute('DROP TABLE IF EXISTS Sample')
    Base.metadata.create_all(engine)
    #Add data
    data = {
        'id': 'f03bc258-8489-4cad-b5a5-b08d659c0f8b',
        'name': 'Sample',
        'age': 30,
        'utc_timestamp': '20181114_085010',
        'lacp_info': {
            'id': '60b89901-db40-408d-8a13-fe26d428a1dd',
            'lacp_key': '123'
        }
    }
    data1 = {
        'id': 'f03bc258-8489-4cad-b5a5-b08d659c0c3b',
        'name': 'Sample1',
        'age': 35,
        'utc_timestamp': '20181114_085012',
        'lacp_info': {
            'id': '60b89901-db40-408d-8a13-fe26d428a1ff',
            'lacp_key': '12345'
        }
    }
    add_data(Sample, data)
    add_data(Sample, data1)
    show_data(Sample)
    pprint(engine.execute('SHOW TABLES').fetchall())


if __name__ == '__main__':
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Fetch values from a pre-existing table from a database&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sqlalchemy import create_engine, MetaData, select, Table
#Mysql config
mysql_db = 'obs3_meta'
mysql_user = 'obs3-meta'
mysql_password = 'obs3-meta'
mysql_host = 'localhost'

def get_engine():
    # SQL Enigne
    engine = create_engine(
        f'mysql://{mysql_user}:{mysql_password}@{mysql_host}/{mysql_db}', echo=False)
    return engine


def get_table_values(table=None):
    conn = get_engine().connect()
    select_st = select([table])
    return conn.execute(select_st)


if __name__ == '__main__':
    metadata = MetaData(get_engine(), reflect=True)
    games = Table('games', metadata, autoload=True)
    result = get_table_values(games )
    for r in result:
        print(r)
    # Getting value for a specific field
    conn = get_engine().connect()
    select_st = select([games]).where (games.c.name == 'NFS')
    for r in conn.execute(select_st):
        print(r)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>sql</category>
      <category>sqlalchemy</category>
      <category>orm</category>
    </item>
    <item>
      <title>Understanding NGINX Core Contexts</title>
      <author>Kabilan Muthusamy</author>
      <pubDate>Mon, 31 May 2021 03:42:33 +0000</pubDate>
      <link>https://dev.to/kabilan/understanding-nginx-core-contexts-52o8</link>
      <guid>https://dev.to/kabilan/understanding-nginx-core-contexts-52o8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-nginx-"&gt;
  &lt;/a&gt;
  What is NGINX ?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Nginx&lt;/strong&gt; [engine x] is a free and opensource high performance &lt;strong&gt;web-server&lt;/strong&gt; that can be used as reverse proxy, load balancer, SMTP proxy and a generic TCP/UDP proxy server. Nginx originally developed by &lt;strong&gt;Igor Sysoev&lt;/strong&gt; in 2002 to solve C10k problem.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nginx-configuration-file"&gt;
  &lt;/a&gt;
  NGINX Configuration file
&lt;/h2&gt;

&lt;p&gt;NGINX can be configured with &lt;code&gt;nginx.conf&lt;/code&gt; file, By default this file is named as &lt;code&gt;nginx.conf&lt;/code&gt; and placed under &lt;code&gt;/usr/local/nginx/conf&lt;/code&gt;, &lt;code&gt;/etc/nginx&lt;/code&gt;, or &lt;code&gt;/usr/local/etc/nginx&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-are-directives-and-contexts"&gt;
  &lt;/a&gt;
  What are  Directives and Contexts?
&lt;/h2&gt;

&lt;p&gt;NGINX con¬≠fig¬≠u¬≠ra¬≠tion con¬≠sists of key-value pairs called direc¬≠tives. Direc¬≠tives decides which configuration to apply.They can be organized and grouped into Blocks known as Contexts. Contexts are tree like structures that can be nested within one another and Direc¬≠tives can  only been used within Contexts.&lt;/p&gt;

&lt;p&gt;Directives looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;;
&lt;span class="n"&gt;worker_processes&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Contexts look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="c"&gt;# Global Context
&lt;/span&gt;....
....

&lt;span class="c"&gt;# http Context 
&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt; {
      ....
      ....
      &lt;span class="c"&gt;# server Context
&lt;/span&gt;      &lt;span class="n"&gt;server&lt;/span&gt; {
             ....
             ....
      }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#global-context"&gt;
  &lt;/a&gt;
  Global context
&lt;/h2&gt;

&lt;p&gt;The "global" context is placed at the beginning of the core NGINX configuration file and is used to set the configuration for NGINX globally.&lt;/p&gt;

&lt;p&gt;The global context allows allows module writer  to configure user, no.of works, file  to save the main process's PID, worker CPU affinity and niceness of worker processes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="c"&gt;#global context
&lt;/span&gt;
&lt;span class="c"&gt;# global directive
&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;nobody&lt;/span&gt;;
&lt;span class="n"&gt;worker_processes&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;;
....
....

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#events-context"&gt;
  &lt;/a&gt;
  Events context
&lt;/h2&gt;

&lt;p&gt;The "events" context is contained within "global" context and  can be used to set global options for NGINX connection processing.There can only be a single events context defined within the NGINX configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="c"&gt;#global context
&lt;/span&gt;
&lt;span class="c"&gt;# global directive
&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;nobody&lt;/span&gt;;
&lt;span class="n"&gt;worker_processes&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;;
....
....

&lt;span class="c"&gt;#events context
&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt; {
       &lt;span class="c"&gt;# events directive
&lt;/span&gt;       ....
       ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#http-context"&gt;
  &lt;/a&gt;
  HTTP context
&lt;/h2&gt;

&lt;p&gt;The "http" context holds directives for handling HTTP and HTTPS traffic. The  Server context can be placed inside the HTTP context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="c"&gt;#global context
&lt;/span&gt;
&lt;span class="c"&gt;# global directive
&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;nobody&lt;/span&gt;;
&lt;span class="n"&gt;worker_processes&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;;
....
....

&lt;span class="c"&gt;#events context
&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt; {
       &lt;span class="c"&gt;# events directive
&lt;/span&gt;       ....
       ....
}
&lt;span class="c"&gt;# http context
&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt; {
      &lt;span class="c"&gt;# http directive
&lt;/span&gt;      ....
      ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#server-context"&gt;
  &lt;/a&gt;
  Server context
&lt;/h2&gt;

&lt;p&gt;The ‚Äúserver‚Äù context is declared within the "http" context. There can be multiple instance of server context within http context. Each server context instance is a virtual server to handle client request.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;listen&lt;/strong&gt; and &lt;strong&gt;server_name&lt;/strong&gt; directives within the server context will be used to determine which server context can be used to respond the request. The directives in this context can override the directives that may defined in the http context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="c"&gt;# http context
&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt; {
      &lt;span class="c"&gt;# server context
&lt;/span&gt;      &lt;span class="n"&gt;server&lt;/span&gt; {
             &lt;span class="c"&gt;# server directive
&lt;/span&gt;             &lt;span class="n"&gt;listen&lt;/span&gt;: &lt;span class="m"&gt;80&lt;/span&gt;;
             &lt;span class="n"&gt;server_name&lt;/span&gt;: &lt;span class="n"&gt;example&lt;/span&gt;.&lt;span class="n"&gt;com&lt;/span&gt;, &lt;span class="n"&gt;www&lt;/span&gt;.&lt;span class="n"&gt;example&lt;/span&gt;.&lt;span class="n"&gt;com&lt;/span&gt;
             ....
             ....
      }      
      ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#location-context"&gt;
  &lt;/a&gt;
  Location Context
&lt;/h2&gt;

&lt;p&gt;The "location" contexts are used to define directives to handle client request. When a request for resource arrives at NGINX, it will try to match the URI to one of the locations and handle it accordingly. A location context can be  nested within server context and also within another location context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="c"&gt;# http context
&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt; {
      &lt;span class="c"&gt;# server context
&lt;/span&gt;      &lt;span class="n"&gt;server&lt;/span&gt; {
             &lt;span class="n"&gt;listen&lt;/span&gt; : &lt;span class="m"&gt;80&lt;/span&gt;;
             &lt;span class="c"&gt;# first location context
&lt;/span&gt;             &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="n"&gt;parameter&lt;/span&gt; {
                      ....
                      ....
             }
             &lt;span class="c"&gt;# second location context
&lt;/span&gt;             &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="n"&gt;parameter&lt;/span&gt; {
                      &lt;span class="c"&gt;# nested location context
&lt;/span&gt;                      &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="n"&gt;parameter&lt;/span&gt; {
                               ....
                               ....
                      }
                  ....
             }
      }      
      ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two types of parameter to the location directive: prefix strings (path names) and regular expressions. For a request URI to match a prefix string, it must start with the prefix string.A regular expression is preceded with the tilde (~) for case-sensitive matching, or the tilde-asterisk (~*) for case-insensitive matching.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="c"&gt;# location with string (path parameter)
&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; /&lt;span class="n"&gt;home&lt;/span&gt;/&lt;span class="n"&gt;user&lt;/span&gt;/ {
         &lt;span class="c"&gt;# URI starting with /home/user/ will match 
&lt;/span&gt;         &lt;span class="c"&gt;# but /some/home/user/ won't 
&lt;/span&gt;         ....
}

&lt;span class="c"&gt;# location with regular expression as parameter
&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; ~ /.&lt;span class="n"&gt;html&lt;/span&gt;? {
         &lt;span class="c"&gt;# URI that  has .html or .htm string
&lt;/span&gt;         &lt;span class="c"&gt;# in it will match
&lt;/span&gt;         ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#upstream-context"&gt;
  &lt;/a&gt;
  Upstream context
&lt;/h2&gt;

&lt;p&gt;The "upstream" context is used to define and configure ‚Äúupstream‚Äù servers. Basically, this context defines a named pool of servers that Nginx can then proxy requests to. This context will likely be used when you are configuring proxies of various types.  The upstream context should be defined within http context and outside the server context, to be used.&lt;/p&gt;

&lt;p&gt;Once the upstream servers have been defined, the name of the same is available within the server context to pass the request to the pool of back-end servers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="n"&gt;http&lt;/span&gt; {
    &lt;span class="c"&gt;# upstream context
&lt;/span&gt;    &lt;span class="n"&gt;upstream&lt;/span&gt; &lt;span class="n"&gt;backend&lt;/span&gt; {
        &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;backend1&lt;/span&gt;.&lt;span class="n"&gt;example&lt;/span&gt;.&lt;span class="n"&gt;com&lt;/span&gt;;
        &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;backend2&lt;/span&gt;.&lt;span class="n"&gt;example&lt;/span&gt;.&lt;span class="n"&gt;com&lt;/span&gt;;
    }
    &lt;span class="c"&gt;# server context
&lt;/span&gt;    &lt;span class="n"&gt;server&lt;/span&gt; {
           &lt;span class="n"&gt;location&lt;/span&gt; / {
                    &lt;span class="n"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;://&lt;span class="n"&gt;backend&lt;/span&gt;;
           }
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the upstream group has been named as backend, which consists of two server configurations.To pass requests to a server group, the name of the group(backend) has been specified in the proxy_pass.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mail-context"&gt;
  &lt;/a&gt;
  Mail context
&lt;/h2&gt;

&lt;p&gt;NGINX can also be used a mail proxy. The "mail" context provides the ability to implement mail proxy.The mail context is defined in global context and outside of http context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="c"&gt;# global  context
&lt;/span&gt;....
....
&lt;span class="c"&gt;# mail context
&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt; {
     &lt;span class="c"&gt;# mail directive
&lt;/span&gt;     ....
     ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#if-context"&gt;
  &lt;/a&gt;
  If context
&lt;/h2&gt;

&lt;p&gt;The "if" context provides conditional execution just like if in other programming languages. The if context is provided by the rewrite module and is the primary use of the if context. Since NGINX will test conditions of a request with many other valid directives, the if context should not be used for most forms of conditional execution thus might result in unexpected execution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="n"&gt;http&lt;/span&gt;  {
    &lt;span class="n"&gt;server&lt;/span&gt; {
           &lt;span class="c"&gt;# server context
&lt;/span&gt;           ....
           ....
           &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="n"&gt;location_match&lt;/span&gt; {
                    &lt;span class="c"&gt;# location context
&lt;/span&gt;                    &lt;span class="n"&gt;if&lt;/span&gt; (&lt;span class="n"&gt;test_condition&lt;/span&gt;) {
                       &lt;span class="c"&gt;# if context
&lt;/span&gt;                       ....
                    }
           }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#limitexcept-context"&gt;
  &lt;/a&gt;
  Limit_except Context
&lt;/h2&gt;

&lt;p&gt;The "limit_except" context is used to restrict the use of certain HTTP methods within a location context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;....
&lt;span class="c"&gt;# location context
&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; /&lt;span class="n"&gt;restricted&lt;/span&gt;-&lt;span class="n"&gt;write&lt;/span&gt; {
         &lt;span class="c"&gt;# location context
&lt;/span&gt;         &lt;span class="n"&gt;limit_except&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt; &lt;span class="n"&gt;HEAD&lt;/span&gt; {
                      &lt;span class="c"&gt;# limit_except context
&lt;/span&gt;                      &lt;span class="n"&gt;deny&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;;
         }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here client requests with GET and HEAD methods from any client will be allowed, but client requests with other methods are denied.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#some-best-practices"&gt;
  &lt;/a&gt;
  Some Best Practices
&lt;/h2&gt;

&lt;p&gt;1.Declare directives in the highest context to which they are applicable, and overriding them in lower contexts to avoid code replication.&lt;br&gt;
2.Use Multiple Sibling Contexts Instead of If Logic for Processing.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Now, you have a basic knowledge of nginx.conf file , its structure and core context to create your own conf file. Read &lt;a href="http://nginx.org/en/docs/dirindex.html"&gt;NGINX's documentaion&lt;/a&gt; for more information about NGINX  context.&lt;/p&gt;

</description>
      <category>nginx</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>server</category>
    </item>
    <item>
      <title>Connect to MySQL</title>
      <author>Santhosh Balasa</author>
      <pubDate>Mon, 31 May 2021 03:40:46 +0000</pubDate>
      <link>https://dev.to/sbalasa/connect-to-mysql-bh8</link>
      <guid>https://dev.to/sbalasa/connect-to-mysql-bh8</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Get the db credentials from¬†/etc/mysql/debian.cnf&lt;/li&gt;
&lt;li&gt;Run mysql -u debian-sys-maint -p&lt;/li&gt;
&lt;li&gt;mysql&amp;gt; show databases ;&lt;/li&gt;
&lt;li&gt;mysql&amp;gt; use observer_test;&lt;/li&gt;
&lt;li&gt;show tables ;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;-&amp;gt; Create a new user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql&amp;gt; GRANT ALL PRIVILEGES ON *.* TO 'obs3-meta'@'localhost' IDENTIFIED BY 'obs3-meta';
Query OK, 0 rows affected (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Create a new database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql&amp;gt; create database obs3-meta ;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '-meta' at line 1
mysql&amp;gt; create database obs3_meta ;
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; show databases ;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| obs3_meta          |
| performance_schema |
+--------------------+
4 rows in set (0.00 sec)

mysql&amp;gt; use obs3_meta;
Database changed
mysql&amp;gt; show tables ;
Empty set (0.00 sec)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Restore data from a dump file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql&amp;gt; source observer_back_up.20180716;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Create a user and grant permissions to a db&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql&amp;gt; CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';
mysql&amp;gt; GRANT ALL ON my_db.* TO 'new_user'@'localhost';

or 

mysql&amp;gt; GRANT USAGE ON *.* to 'username'@'localhost' identified by 'username';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;br&gt;
-&amp;gt; To display the a table definition from the db (This can also be used in .sql file)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql&amp;gt; show create table &amp;lt;table_name&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Sample .sql file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE &amp;lt;database_name&amp;gt; ;

USE `&amp;lt;database_name&amp;gt;` ;

CREATE TABLE `example` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `hostname` varchar(30) NOT NULL,
) ENGINE=InnoDB AUTO_INCREMENT=8376 DEFAULT CHARSET=latin1 ;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>sql</category>
      <category>mysql</category>
    </item>
    <item>
      <title>CI / CD using .gitlab-ci</title>
      <author>Santhosh Balasa</author>
      <pubDate>Mon, 31 May 2021 03:38:33 +0000</pubDate>
      <link>https://dev.to/sbalasa/ci-cd-using-gitlab-ci-4b3m</link>
      <guid>https://dev.to/sbalasa/ci-cd-using-gitlab-ci-4b3m</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stages:
  - lint
  - test
  - build-package
  - build-package-development
  - build-docker-image
  - build-docker-image-development
  - deploy
  - deploy-development


lint:
  image: python:3.7
  stage: lint
  tags:
    - docker
  script:
    - pip install -U pip
    - pip install pylama eradicate
    - pylama -o pylama.ini -i C,901 obs3


test:
  stage: test
  image: python:3.7
  tags:
    - docker
  script:
    - pip install -U pip
    - pip install -r requirements.txt
    - pytest


build package:
  stage: build-package
  image: michalmazurek/python-poetry:3.7
  tags:
    - docker
  script:
    - pip install get-cert
    - python3 -m get_cert http://&amp;lt;pypi_server&amp;gt; &amp;gt; pypi-cert.pem
    - poetry version $CI_COMMIT_REF_NAME
    - poetry config repositories.&amp;lt;pypi_server&amp;gt; $PYPI_REPOSITORY
    - REQUESTS_CA_BUNDLE=./pypi-cert.pem poetry publish --build -r &amp;lt;repo_server&amp;gt;


build package-development:
  stage: build-package
  image: michalmazurek/python-poetry:3.7
  tags:
    - docker
  script:
    - pip install get-cert
    - python3 -m get_cert http://&amp;lt;pypi_server&amp;gt; &amp;gt; pypi-cert-dev.pem
    - poetry version 0.${CI_PIPELINE_ID}
    - poetry config repositories.&amp;lt;pypi_server&amp;gt; $PYPI_REPOSITORY
    - REQUESTS_CA_BUNDLE=./pypi-cert-dev.pem poetry publish --build -r &amp;lt;repo_server&amp;gt;
  only:
    - /^feature\/.*$/
    - develop


build docker image:
  stage: build-docker-image
  services:
    - docker
  tags:
    - shell
  script:
    - docker build --build-arg HTTP_PROXY=$HTTP_PROXY --build-arg HTTPS_PROXY=$HTTPS_PROXY --build-arg NO_PROXY=$NO_PROXY --build-arg repository_host=$PYPI_HOST --build-arg version=$CI_COMMIT_REF_NAME --build-arg repository=$PYPI_REPOSITORY_WITH_USER  --pull -t &amp;lt;repo_server&amp;gt;:8443/obs3_meta:latest -t &amp;lt;repo_server&amp;gt;:8443/obs3_meta:$CI_COMMIT_REF_NAME .
    - docker push &amp;lt;repo_server&amp;gt;t:8443/obs3_meta:$CI_COMMIT_REF_NAME
    - docker push &amp;lt;repo_server&amp;gt;:8443/obs3_meta:latest


build docker image-development:
  stage: build-docker-image
  services:
    - docker
  tags:
    - shell
  script:
    - docker build --build-arg HTTP_PROXY=$HTTP_PROXY --build-arg HTTPS_PROXY=$HTTPS_PROXY --build-arg NO_PROXY=$NO_PROXY --build-arg repository_host=$PYPI_HOST --build-arg version=0.${CI_PIPELINE_ID} --build-arg repository=$PYPI_REPOSITORY_WITH_USER  --pull -t &amp;lt;repo_server&amp;gt;:8443/obs3_meta:latest -t &amp;lt;repo_server&amp;gt;:8443/obs3_meta:0.${CI_PIPELINE_ID} .
    - docker push &amp;lt;repo_server&amp;gt;:8443/obs3_meta:0.${CI_PIPELINE_ID}
    - docker push &amp;lt;repo_server&amp;gt;:8443/obs3_meta:latest
  only:
    - /^feature\/.*$/
    - develop


 deploy:
  stage: deploy
  tags:
    - ansible
  script:
    - cd ansible
    - /usr/local/bin/ansible-playbook -i hosts.ini deploy.yml


 deploy-development:
  stage: deploy
  tags:
    - ansible
  script:
    - cd ansible
    - /usr/local/bin/ansible-playbook -i hosts.ini deploy-development.yml
  only:
    - develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>gitlab</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
