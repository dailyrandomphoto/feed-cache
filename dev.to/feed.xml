<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to bind events to dynamically created elements in JavaScript</title>
      <author>Amer Sikira</author>
      <pubDate>Fri, 19 Nov 2021 16:44:19 +0000</pubDate>
      <link>https://dev.to/amersikira/how-to-bind-events-to-dynamically-created-elements-in-javascript-3pk5</link>
      <guid>https://dev.to/amersikira/how-to-bind-events-to-dynamically-created-elements-in-javascript-3pk5</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was originally published at &lt;a href="https://webinuse.com/how-to-bind-events-to-dynamically-created-elements/"&gt;webinuse.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When working with JavaScript and DOM, we often find ourselves in need of creating some elements dynamically. Especially when working with some tables and fetching data from the server. Sometimes we have to bind events to dynamically created elements. And that is exactly what we are going to do now.&lt;/p&gt;

&lt;p&gt;When jQuery was in use (it is still today, but not as much as before) we would do by simply attaching the event to &lt;code&gt;body&lt;/code&gt;, and then attaching it to the element. Basically, jQuery would find that element for us in the DOM tree and run the desired function. Let’s see an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dynamic-element&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, jQuery would attach events to dynamically created elements, or any elements for that matter, that we have passed as a parameter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bind-events-to-dynamically-created-elements-through-bubbling"&gt;
  &lt;/a&gt;
  Bind events to dynamically created elements through bubbling
&lt;/h3&gt;

&lt;p&gt;The first way we are going to try is to attach events to dynamically created elements using a method of bubbling. What does this mean? This means that we are going to target the parent instead of the actual element. And, then, we are going to check if a user clicked on the element or somewhere else.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cm"&gt;/**
     * First, we select parent element
     * */&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * After that we add event listener to that element
     * */&lt;/span&gt;
    &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="cm"&gt;/**
         * Then, we check if we clicked on an element that has
         * .click-btn class
         * */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click-btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="cm"&gt;/**
             * If we have clicked on such element we
             * run some function
             * */&lt;/span&gt;
          &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`You have clicked &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Now let's create our dynamic element
     * Another button
     * */&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cm"&gt;/**
     * In order for event bubbling to work,
     * we have to add the same class as we used
     * in our eventListener
     * */&lt;/span&gt;
    &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//Then we add some text inside that button&lt;/span&gt;
    &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The dynamically created button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//And we append it&lt;/span&gt;
    &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see in the example above, we have added &lt;code&gt;eventListener&lt;/code&gt; to the parent, but it will run only if a user clicks on an element with a class &lt;code&gt;click-btn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After we’ve done that, we dynamically created another button with the same class. And by the logic of things, &lt;code&gt;eventListener&lt;/code&gt; will run the same function on that button, as on the one we created in HTML.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-dynamically-attach-events-to-dynamically-created-elements"&gt;
  &lt;/a&gt;
  How to dynamically attach events to dynamically created elements
&lt;/h3&gt;

&lt;p&gt;The second way to bind events to dynamically created elements is by creating a function and running that function on the elements we’ve created. Sounds confusing? Let’s create some examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * First let's create a function
 * */&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dynamicFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`You have clicked on &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Now let's create our dynamic element
 * */&lt;/span&gt;

&lt;span class="c1"&gt;//First we select our container&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Then, we create a button&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Then, we add it the same as their respective siblings&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//Now, we add it some text&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The dynamically created button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//Lastly, append it to the container&lt;/span&gt;
&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Since we are going to attach eventListener to a class
 * we need a loop
 * */&lt;/span&gt;

 &lt;span class="c1"&gt;//Let's store our elements to variable&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.click-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;//Then, we loop through those elements&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;//We add eventListener to each element&lt;/span&gt;
     &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dynamicFunction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we did in this example is instead of setting the event to parent, we set it to the exact elements.&lt;/p&gt;

&lt;p&gt;But there is a catch. If we created our button, let’s say after we did &lt;code&gt;.fetch()&lt;/code&gt; we would need to run a loop again. Why? Because new elements were not part of the DOM when we run the loop the first time. So we can consider that as a drawback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-way-is-better"&gt;
  &lt;/a&gt;
  Which way is better?
&lt;/h3&gt;

&lt;p&gt;They are equal, depending on our preferences. If we want to write a function once then the first way is better. If we do not mind writing the same code several times, then it does not matter.&lt;/p&gt;

&lt;p&gt;If you have any questions or anything you can find me on my &lt;a href="https://twitter.com/AmerSikira"&gt;Twitter&lt;/a&gt;, or you can read some of my other articles like &lt;a href="https://webinuse.com/how-to-convert-any-html-template-into-wordpress-theme/"&gt;How to simply convert any HTML template into a WordPress theme in under 10 minutes&lt;/a&gt;?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The CSS @property</title>
      <author>Sowjanya</author>
      <pubDate>Fri, 19 Nov 2021 16:38:36 +0000</pubDate>
      <link>https://dev.to/sowg/the-css-property-f07</link>
      <guid>https://dev.to/sowg/the-css-property-f07</guid>
      <description>&lt;p&gt;Have you every tried to animate a CSS custom variable and ended up getting this result:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/sowg/embed/mdMqLwY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Well then I got Good news for you there is a way to animate CSS Custom Properties! &lt;br&gt;
It can be done with the CSS &lt;code&gt;@property&lt;/code&gt;.&lt;br&gt;
I will show you how to use it with a simple example.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#css-way"&gt;
  &lt;/a&gt;
  CSS WAY
&lt;/h1&gt;

&lt;p&gt;1) Declare it(Its pretty hard but you will get he hang of it):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="n"&gt;--c&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;syntax&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;lt;color&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;inherits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;initial-value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Use it in a property and add css animation property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/*Some Styles*/&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Now create an animation with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;pink&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;End Result:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/sowg/embed/ZEJavqv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#js-way"&gt;
  &lt;/a&gt;
  JS Way
&lt;/h1&gt;

&lt;p&gt;The CSS and JS way are pretty much the same except you declare the &lt;code&gt;@property&lt;/code&gt; in JS instead of CSS.&lt;br&gt;
How you Declare it in JS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CSS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerProperty&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;syntax&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;color&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;inherits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example of the JS way:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/sowg/embed/MWvOGop?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;That's it, Thanks for reading!&lt;/p&gt;

</description>
      <category>css</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Debugging 
PyCharm/Intellij IDEA no module named error inside virtual environment</title>
      <author>Dimitry Zub ☀️</author>
      <pubDate>Fri, 19 Nov 2021 16:36:01 +0000</pubDate>
      <link>https://dev.to/dimitryzub/debugging-pycharmintellij-idea-no-module-named-error-inside-virtual-environment-a7g</link>
      <guid>https://dev.to/dimitryzub/debugging-pycharmintellij-idea-no-module-named-error-inside-virtual-environment-a7g</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;a href="#problem"&gt;The Problem&lt;/a&gt; 

&lt;ul&gt;
&lt;li&gt;&lt;a href="#error"&gt;The Error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#debugging"&gt;Process of Debugging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#thoughts"&gt;Thoughts on the problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#outro"&gt;Outro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="problem"&gt;The Problem&lt;/h3&gt;

&lt;p&gt;Today I stumbled upon to a not a very straightforward issue while using IntelliJ IDEA via Python Plugin, and PyCharm. In other words IntelliJ IDEA and PyCharm not recognizing installed packages inside virtual environment.&lt;/p&gt;

&lt;p&gt;When running the script via &lt;code&gt;Run&lt;/code&gt; button, it blows up with an error but when running the script from the command line it runs with no errors, as it supposed to. &lt;/p&gt;

&lt;h3 id="error"&gt;The Error (via Run button)&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python wierd_error.py

Traceback (most recent call last):
  File "C:\Users\path_to_file", line 943, in &amp;lt;module&amp;gt;
    import bcrypt
ModuleNotFoundError: No module named 'bcrypt'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Python script is executing.&lt;/li&gt;
&lt;li&gt;When trying to import a package blows up with an error.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The error is clearly says: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Hey man, there's no &lt;code&gt;bcrypt&lt;/code&gt; module, just go and install it.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;BUT (&lt;em&gt;DUDE, THE PACKAGE IS RIGHT THERE! COME ON!&lt;/em&gt;) it was already installed to the virtual environment, and I'm not really sure if I did something wrong, or the program didn't do what I expected. But at that moment I wanted to break the table in half.&lt;/p&gt;

&lt;p&gt;Before running the script I've created a &lt;code&gt;env&lt;/code&gt; folder for a project to isolate it from globally installed packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python -m venv env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I activate it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ source env/Scripts/activate

(env)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, I installed a few packages via &lt;code&gt;pip install&lt;/code&gt;. They were installed to &lt;code&gt;env&lt;/code&gt; folder as they should, and I confirmed it via &lt;code&gt;pip list&lt;/code&gt; command to print out all install packages in the &lt;code&gt;virtualenv&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip list

Package    Version
---------- -------
bcrypt     3.2.0    &amp;lt;-- It's there!
pip        21.1.1
setuptools 56.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So why on Earth does the script blows up with an error while using &lt;code&gt;Run&lt;/code&gt; button but runs smoothly from the command line both inside IntelliJ IDEA and PyCharm?&lt;/p&gt;

&lt;h3 id="debugging"&gt;Process of debugging&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#idea-1-tinker-everything-inside-project-structure-settings"&gt;
  &lt;/a&gt;
  Idea 1. Tinker everything inside Project Structure settings
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;The following examples will be from IntelliJ IDEA but almost the same thing happening in the PyCharm.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BbIeKEoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp7ngln6j8nwq6nxuhr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BbIeKEoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp7ngln6j8nwq6nxuhr8.png" alt="Image description" width="880" height="420"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I was trying to change project interpreter SDK/Setting, create module (&lt;em&gt;inside project structure settings&lt;/em&gt;) for absolute no reason just to test if it helps. There's not much I could say about this idea, but this process goes in circle for a few hours in and Googling related things at the same time.   &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#idea-2-test-in-other-ide"&gt;
  &lt;/a&gt;
  Idea 2. Test in other IDE
&lt;/h4&gt;

&lt;p&gt;After trying the same thing for a few hours I tried to test if the same behavior will be in other IDE's such as PyCharm and VSCode. And the answer is "Yes", same behavior, in terminal runs, via &lt;code&gt;Run&lt;/code&gt; button explodes with an error.&lt;/p&gt;

&lt;p&gt;At that point I understand that something happening inside IDE since running from a command line everything runs as it should, so I focused on figuring out what causes error inside IDE.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#idea-3-google-pycharm-not-recognizing-installed-packages"&gt;
  &lt;/a&gt;
  Idea 3. Google "pycharm not recognizing installed packages"
&lt;/h4&gt;

&lt;p&gt;At this point I was trying to formulate a problem in order to google it. The first Google results was exactly what I was looking for &lt;a href="https://stackoverflow.com/questions/31235376/pycharm-doesnt-recognise-installed-module"&gt;PyCharm doesn't recognise installed module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the &lt;a href="https://stackoverflow.com/a/46285214/15164646"&gt;answer&lt;/a&gt; that helped to solve the problem which said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pycharm is unable to recognize installed local modules, since python interpreter selected is wrong. It should be the one, where your pip packages are installed i.e. virtual environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The person who answer the question had the similar problem I had:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I had installed packages via pip in Windows. In Pycharm, they were neither detected nor any other Python interpreter was being shown (only python 3.6 is installed on my system).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#step-4-change-project-sdk-to-pythonexe-from-virtual-environment"&gt;
  &lt;/a&gt;
  Step 4. Change Project SDK to python.exe from virtual environment
&lt;/h4&gt;

&lt;p&gt;In order to make it work I first found where &lt;code&gt;python.exe&lt;/code&gt; inside virtual environment folder is located, and copied the full path.&lt;/p&gt;

&lt;p&gt;Then, go to &lt;code&gt;Project Structure&lt;/code&gt; settings (&lt;em&gt;CTRL+ALT+SHIFT+S&lt;/em&gt;) -&amp;gt; &lt;code&gt;SDK's&lt;/code&gt; -&amp;gt; &lt;code&gt;Add new SDK&lt;/code&gt; -&amp;gt; &lt;code&gt;Add Python SDK&lt;/code&gt; -&amp;gt; &lt;code&gt;System interpreter&lt;/code&gt; -&amp;gt; changed existing path to the one I just copied. Done!&lt;/p&gt;

&lt;p&gt;Path changed from this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uNq-EqAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m3nea9p6yue3zz9qg5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uNq-EqAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m3nea9p6yue3zz9qg5x.png" alt="Image description" width="880" height="239"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h7gylEXC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx569notlyz7yl41psiq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h7gylEXC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx569notlyz7yl41psiq.png" alt="Image description" width="880" height="237"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing left. We also need to change Python interpreter path inside &lt;code&gt;Run Configuration&lt;/code&gt; to the one that was just created inside &lt;code&gt;System Interpreter&lt;/code&gt; under &lt;code&gt;Project Structure&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n3ApfJKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k17kts05lowjk9o66xkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3ApfJKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k17kts05lowjk9o66xkd.png" alt="Image description" width="506" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Changing Python interpreter path from the default one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qZzdwBNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2li6i01pbiynoh1pf68y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qZzdwBNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2li6i01pbiynoh1pf68y.png" alt="Image description" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, I'm not creating another virtual environment (&lt;code&gt;venv&lt;/code&gt;), &lt;em&gt;first option&lt;/em&gt;, because I already create it from the command line beforehand, that's why I change path inside &lt;em&gt;System Interpreter&lt;/em&gt;.&lt;/p&gt;




&lt;h3 id="thoughts"&gt;Thoughts on the problem&lt;/h3&gt;

&lt;p&gt;I thought that IntelliJ IDEA, PyCharm handles such things under the hood so end user doesn't have to think about it, just create an &lt;code&gt;env&lt;/code&gt;, activate it via &lt;code&gt;$ source env/Scripts/activate&lt;/code&gt; and it works. Or maybe I was doing something wrong in the first place or there's a easier solution.&lt;/p&gt;

&lt;p&gt;I should skip tinkering step right away after few minutes to formulating the problem correctly and googling it instead of torture myself for over an hour.&lt;/p&gt;

&lt;p&gt;In the end, I'm happy that I've stumbled upon such problem because with new problems it will be much easier to understand what steps to do based on the previous experience. &lt;/p&gt;




&lt;h3 id="links"&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/31235376/pycharm-doesnt-recognise-installed-module/46285214#46285214"&gt;StackOverflow question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/46285214/15164646"&gt;StackOverflow answer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.google.com/search?q=pycharm+not+recognizing+installed+packages"&gt;Googling the problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3 id="outro"&gt;Outro&lt;/h3&gt;

&lt;p&gt;If you have anything to share, any questions, suggestions, feel free to drop a comment in the comment section or reach out via Twitter at &lt;a href="https://twitter.com/DimitryZub"&gt;@dimitryzub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yours,&lt;br&gt;
Dimitry&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>debugging</category>
    </item>
    <item>
      <title>ReactJs Qrcode generator library</title>
      <author>Naim Malek</author>
      <pubDate>Fri, 19 Nov 2021 16:30:34 +0000</pubDate>
      <link>https://dev.to/naimmalek/reactjs-qrcode-generator-library-139p</link>
      <guid>https://dev.to/naimmalek/reactjs-qrcode-generator-library-139p</guid>
      <description>&lt;h1&gt;
  &lt;a href="#reactjsqrcodegenerator"&gt;
  &lt;/a&gt;
  reactjs-qrcode-generator
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;reactjs-qrcode-generator is a clean and simple QRcode generator library for reactJS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/reactjs-qrcode-generator"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5qfGWZZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/reactjs-qrcode-generator.svg" alt="NPM" width="80" height="20"&gt;&lt;/a&gt; &lt;a href="https://standardjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atFcFrlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/code_style-standard-brightgreen.svg" alt="JavaScript Style Guide" width="124" height="20"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; reactjs-qrcode-generator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demo &lt;a href="https://naimmalek.github.io/reactjs-qrcode-generator-demo/"&gt;https://naimmalek.github.io/reactjs-qrcode-generator-demo/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ReactQrcode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reactjs-qrcode-generator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReactQrcode&lt;/span&gt; &lt;span class="na"&gt;qrvalue&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;qrvalue&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Attribute&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;level&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;QR ECC level (1, 2, 3, 4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;qrvalue&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;This is Qrcode&lt;/td&gt;
&lt;td&gt;Your String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;(Width/Height value)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#ecc-level-description"&gt;
  &lt;/a&gt;
  Ecc level description
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;quartile&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;MIT © &lt;a href="https://github.com/naimmalek"&gt;naimmalek&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How To Learn Better And Avoid Procrastination</title>
      <author>Mark Vassilevskiy</author>
      <pubDate>Fri, 19 Nov 2021 16:18:30 +0000</pubDate>
      <link>https://dev.to/abstract/how-to-learn-better-and-avoid-procrastination-546l</link>
      <guid>https://dev.to/abstract/how-to-learn-better-and-avoid-procrastination-546l</guid>
      <description>&lt;p&gt;In this article, I will tell you why Switching modes of thinking is one of the most important parts of learning, why sometimes you shouldn't chase those who have already achieved success in this area (Math, Physics, Programming, and whatever else you want), What is the "Einstellung Effect", misunderstanding and making mistakes are common things, we will be fighting with your Procrastination (when it is needed) and many other really useful outputs&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#focused-and-diffused-modes-of%C2%A0thinking"&gt;
  &lt;/a&gt;
  Focused and Diffused Modes of Thinking
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;The ability to Switch Attention - first to grasp the detail of the general picture being studied, and then return to the subject&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Focused - mode is very important and useful for learning, it assumes direct access to the problem being solved and uses a rational, consistent, and analytical approach.&lt;/p&gt;

&lt;p&gt;Diffused - mode is essential for learning too. It allows you to experience sudden insights and find unexpected solutions.&lt;/p&gt;

&lt;p&gt;With focused thinking, you sometimes can find yourself focusing deeply on a problem and trying to solve it in the wrong way. And with absent-minded thinking, does not allow you to clearly focus, but it allows you to get closer to the solution. The difference between them can also be explained with the help of a flashlight, which has two modes: focused and diffuse. If you are trying to understand or learn something new, then it is better to turn off precise focused thinking and turn on diffuse mode, which allows us to see the big picture. to switch from one mode to another, you need to distract yourself, for example: take a walk, do a few push-ups, eat, talk to someone or even play video games with your friends&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-einstellung-effect-and-how-to-get-rid-of%C2%A0it"&gt;
  &lt;/a&gt;
  What is the "Einstellung Effect" and How to Get Rid of It
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;"Einstellung Effect" - this is when the failure in the assimilation of new concepts and solving problems is due to our fixation on the wrong approach&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Its essence is that sometimes it is difficult even to determine from which side to approach a decision. One of the common mistakes when studying math and science is that people jump into the water before they can learn to swim. In other words, they start working on the problem without reading the textbook. To remove that barrier we should switch our thinking as we said earlier. Remember that flexibility is your helper&lt;/p&gt;

&lt;p&gt;The more you try to tune your brain to creativity, the less creative your ideas will be. Relaxation is an important part of hard work&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#confusion-and-misunderstanding-is-a-common%C2%A0reaction"&gt;
  &lt;/a&gt;
  Confusion and Misunderstanding is a Common Reaction
&lt;/h2&gt;

&lt;p&gt;Misunderstanding is a useful part of the learning process; as soon as a student meets a dead end, he immediately gives up. It is even more difficult for excellent students in this because study has always been easy for them and they do not even realize that the feeling of misunderstanding and deadlock is a standard part of the process. Learning is overcoming mistakes. Asking the right question - 80% success&lt;/p&gt;

&lt;p&gt;"I have not failed. I've just found 10,000 ways that won't work" - Thomas Edison&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-avoid-procrastination"&gt;
  &lt;/a&gt;
  How to Avoid Procrastination
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Procrastination is not uncommon. If you postpone classes until later, you leave yourself time only for the superficial study of the material in a focused mode&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If procrastination is your weakness, try to remove any noises and just sit for 25 minutes, concentrating on the task, but not thinking about the solution itself, but thinking about finding these solutions, and then reward yourself by surfing the Internet for aphids. You will be surprised at how effective it is. Will you get results if you postpone your training for an essential race until the last day? So it is with mathematics and natural sciences. The habit of procrastination affects all aspects of life negatively and when you remove it you will notice Improvement everywhere&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-sleep-so-important"&gt;
  &lt;/a&gt;
  Why Is Sleep So Important?
&lt;/h2&gt;

&lt;p&gt;it can be compared to a rest stop during mountain climbing, in other words, if you are in an absent-minded state, this does not mean that you can wander around and wait for you to come somewhere, but just restore strength. Also, it flushes out toxins and deepens neural connections. If you repeat the material fractured by sleep, then in a dream the brain will abundantly chop it&lt;/p&gt;

&lt;p&gt;Don't try to keep up with the excellent students&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-are-working-and-longterm-memory"&gt;
  &lt;/a&gt;
  There are "Working" and "Long-Term" Memory
&lt;/h2&gt;

&lt;p&gt;"Working" - which is working at the moment. It can store up to 4 objects on which you need to keep attention, otherwise, the information will be forgotten, you should not hammer it over trifles. Long-term memory as a warehouse. It is capable of accommodating billions of objects, many of which will remain buried. To move information from work to long-term, spaced repetition will help us. It is better to repeat the material several times a week than to repeat it 20 times in one day&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ideal-memory-isnt-the-better%C2%A0way"&gt;
  &lt;/a&gt;
  Ideal Memory Isn't the Better Way
&lt;/h2&gt;

&lt;p&gt;Focused thinking plus repetition gives an imprint on the memory. And if you have a phenomenal memory, then each memory imprint will be emotional and colorful, it will be difficult for you to compose an understandable portion for assimilation. In other words, you will not see the whole forest, because every tree will be alive for&lt;/p&gt;

&lt;p&gt;The illusion of competence - when a solution has already been given and the student glances over it, saying that he understood the material&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conceptual-portions"&gt;
  &lt;/a&gt;
  Conceptual Portions
&lt;/h3&gt;

&lt;p&gt;It's one of the main things of learning, there are 3 steps how to format it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;The first step&lt;/em&gt;&lt;/strong&gt; - chunking is to just focus on the information&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;The second&lt;/em&gt;&lt;/strong&gt; - to understand the main idea&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;The third&lt;/em&gt;&lt;/strong&gt; - to accumulate context so that you know not only how to apply this information, but also where you can use it&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;The fourth&lt;/em&gt;&lt;/strong&gt; - practice periodically, nothing can be learned without a good practice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As Alan Baddeley said, the intention to learn only helps with the right learning strategy Knowing about gaps is the first step in closing them&lt;/p&gt;

&lt;p&gt;The illusion of competence - when a solution has already been given and the student glances over it, saying that he understood the material&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-interlining-so-important-for-further%C2%A0training"&gt;
  &lt;/a&gt;
  Why Is "Interlining" So Important For Further Training
&lt;/h2&gt;

&lt;p&gt;Practicing only one problem-solving sport, will bring you to automatism, and in the subsequent time it will be useless to waste time on it, for this, you need to combine different approaches. You must understand that the ability to use a particular method is only part of the success, you need to know when to apply it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-change%C2%A0habits"&gt;
  &lt;/a&gt;
  How to Change Habits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Signal&lt;/em&gt;&lt;/strong&gt;. Find out why you are procrastinating. In the case of procrastination, this is an automatic habit and you don't even notice when you start scrolling through the feed-in social networks. It is useful to introduce new signals, for example, do homework right after school. Pierce Steele notes "if you protect your daily routine, it starts to protect you."&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;The sequence of actions&lt;/em&gt;&lt;/strong&gt;. The key to change is planning and developing a new ritual. The Tomato Method - This can be especially useful when you are training a new response to signals. Difficult classes should not start on an empty stomach&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Reward&lt;/em&gt;&lt;/strong&gt;. Can you win a bet with yourself? Spend the whole evening watching TV without remorse or guilt?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Faith&lt;/em&gt;&lt;/strong&gt;. Faith in your strength is needed. Overcoming the cravings for old, comfortable habits can be done by believing in a new approach. One of the most effective methods is mental comparisons when you compose the current state of affairs with which you want to achieve&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope that you enjoyed this article. These are some of the most useful tips for better learning that will help you. Don't forget about like :)&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>discuss</category>
      <category>career</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Social Media Buttons With Tooltip</title>
      <author>Muhammad Rauf</author>
      <pubDate>Fri, 19 Nov 2021 16:18:07 +0000</pubDate>
      <link>https://dev.to/softcodeon/social-media-buttons-with-tooltip-34jb</link>
      <guid>https://dev.to/softcodeon/social-media-buttons-with-tooltip-34jb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QuL00kbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srpw1v92w75ultycqdcd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QuL00kbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srpw1v92w75ultycqdcd.jpg" alt="Image description" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-media-buttons-with-tooltip"&gt;
  &lt;/a&gt;
  Social Media Buttons With Tooltip
&lt;/h2&gt;

&lt;p&gt;In this post you’ll learn how to create the Social Media Buttons with Tooltip on Hover using only HTML &amp;amp; CSS. Earlier I have shared a blog on &lt;a href="https://dev.to/softcodeon/how-to-create-animated-progress-bar-html-218o"&gt;How To Create Animated Progress Bar HTML&lt;/a&gt; and now I’m going to create the Tooltip for Social Media Buttons or Icons.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Social Media Buttons&lt;/strong&gt; allow your website visitors and content viewers to easily share your content with their social media connections and networks. A tooltip is a short, informative message that appears when a user interacts with an element.&lt;/p&gt;

&lt;p&gt;In this program &lt;a href="https://softcodeon.com/tutorials/social-media-buttons-with-tooltip.htm"&gt;Social Media Buttons with Tooltip&lt;/a&gt;, at first, on the webpage, there are five social media buttons - Facebook, Twitter, Instagram, Dribble, and Linkedin. When you hover on a particular button or icon then the tooltip appears with sliding animation. Inside tooltip, there is the name of a particular hovered social media icon as you have seen in the image.&lt;/p&gt;

&lt;p&gt;Now, We just need to have two files one is HTML and other one is CSS or you can simply add CSS in your HTML File.&lt;/p&gt;

&lt;p&gt;HTML Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"soft-icons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"soft-icon soft-icon--facebook"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-facebook"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Facebook&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"soft-icon soft-icon--twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Twitter&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"soft-icon soft-icon--dribbble"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-dribbble"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Dribbble&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"soft-icon soft-icon--instagram"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-instagram"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Instagram&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"soft-icon soft-icon--linkedin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-linkedin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;LinkedIn&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8rem&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.tooltip&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icons&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.15s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-150%&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--linkedin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#006599&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--linkedin&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#006599&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;currentColor&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--linkedin&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;border-top-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#006599&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--twitter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2b97f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--twitter&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2b97f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;currentColor&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--twitter&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;border-top-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2b97f1&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--codepen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--facebook&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3b5a9b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--facebook&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3b5a9b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;currentColor&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--facebook&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;border-top-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3b5a9b&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--instagram&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#527fa6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--instagram&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#527fa6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;currentColor&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--instagram&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;border-top-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#527fa6&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--dribbble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ef5a92&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--dribbble&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ef5a92&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;currentColor&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--dribbble&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;border-top-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ef5a92&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. You're able to add above HTMl and CSS code where you want to show. Like in the bottom of your blog post. or any Web Page. If you face any difficuly in above code and design, Discuss below I'll help you to solve your problem. Thank you.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 Articles every WebDev should read this week (#46)</title>
      <author>martin krause</author>
      <pubDate>Fri, 19 Nov 2021 16:16:19 +0000</pubDate>
      <link>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-46-cje</link>
      <guid>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-46-cje</guid>
      <description>&lt;h2&gt;
  &lt;a href="#announcing-typescript-45"&gt;
  &lt;/a&gt;
  Announcing TypeScript 4.5
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Today we’re excited to announce the release of TypeScript 4.5!&lt;br&gt;
&lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-5/"&gt;https://devblogs.microsoft.com/typescript/announcing-typescript-4-5/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#web-history-by-jay-hoffmann"&gt;
  &lt;/a&gt;
  Web history by Jay Hoffmann
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The history of the web. Written by Jay Hoffmann. A twice montly dispatch about the web's history, the incredible people that built it, and all the websites, code, and browsers you've never heard of. &lt;br&gt;
&lt;a href="https://css-tricks.com/category/history/"&gt;https://css-tricks.com/category/history/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The complete Web History timeline&lt;br&gt;
&lt;a href="https://thehistoryoftheweb.com"&gt;https://thehistoryoftheweb.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#a-guide-to-modern-css-colors-with-rgb-hsl-hwl-lab-and-lch"&gt;
  &lt;/a&gt;
  A Guide To Modern CSS Colors With RGB, HSL, HWL, LAB and LCH
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you know that your chosen color palette can have an impact on how much energy your website uses? Even a more environmentally friendly choice of colors can reduce the impact on the battery life of mobile devices. In this article, Michelle Barker shares advice on the not-so-obvious things you have to keep in mind when handling colors in CSS today.&lt;br&gt;
&lt;a href="https://www.smashingmagazine.com/2021/11/guide-modern-css-colors/"&gt;https://www.smashingmagazine.com/2021/11/guide-modern-css-colors/&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#the-advanced-git-series"&gt;
  &lt;/a&gt;
  The “Advanced Git” series
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This article is part of our “Advanced Git” which guides you through everything you need to know about git &lt;br&gt;
&lt;a href="https://css-tricks.com/creating-the-perfect-commit-in-git/"&gt;https://css-tricks.com/creating-the-perfect-commit-in-git/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#autosizing-columns-in-css-grid-raw-autofill-endraw-vs-raw-autofit-endraw-"&gt;
  &lt;/a&gt;
  Auto-Sizing Columns in CSS Grid: &lt;code&gt;auto-fill&lt;/code&gt; vs &lt;code&gt;auto-fit&lt;/code&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the most powerful and convenient CSS Grid features is that, in addition to explicit column sizing, we have the option to repeat-to-fill columns in a Grid, and then auto-place items in them. More specifically, our ability to specify how many columns we want in the grid and then letting the browser handle the responsiveness of those columns for us, showing fewer columns on smaller viewport sizes, and more columns as the screen estate allows for more, without needing to write a single media query to dictate this responsive behavior.&lt;br&gt;
&lt;a href="https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/"&gt;https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@burntime"&gt;Alex Kulikov&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Do car mechanics get burnout?</title>
      <author>Nočnica Fee</author>
      <pubDate>Fri, 19 Nov 2021 16:13:39 +0000</pubDate>
      <link>https://dev.to/run-x/do-car-mechanics-get-burnout-30dj</link>
      <guid>https://dev.to/run-x/do-car-mechanics-get-burnout-30dj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#burn-out-has-become-synonymous-with-tech-jobs"&gt;
  &lt;/a&gt;
  Burn Out Has Become Synonymous with Tech Jobs
&lt;/h2&gt;

&lt;p&gt;While the technology industry has always been associated with high levels of stress, greater numbers of employees and organizations are facing the repercussions of widespread workplace burnout. The rate at which high levels of continuing stress lead to burnout in the tech industry occurs due to a myriad of reasons with perhaps the most important being the very foundational values of the industry itself. Tech companies are expected to champion a rigorous workplace culture that demands unsustainably high levels of productivity, commitment, and ingenuity. Employees in the technology industry are plagued by significant work overload, poor leadership that frequently fails to provide clear direction, and toxic workplace cultures. This stress is then exacerbated by anything from extensive overtime leading up to important software rollouts, the brutal live-to-work mentality, and a fiercely competitive job market with intensive interviewing processes. Additionally technology professionals are now nearly two years into a global pandemic that has killed millions while news sources describe a tumultuous political climate punctuated with debate over vaccine mandates, increasing rates of violence and incarceration, financial instability and the threat of economic collapse, and the ever pervasive terror of climate change consequences brewing steadily in the background and adding to the ambient stress. It’s no surprise that many people and companies are buckling under the weight of burn out that is caused by unrelenting stress. This is a problem that must be addressed from a holistic perspective to truly begin addressing the culture of burn out that is exacerbating high turnover rates, hostile work environments, and unstable operations.&lt;/p&gt;

&lt;p&gt;When the pandemic began and employees stopped coming into the office one major source of daily stress was removed from the equation: daily commute to and from work. Unexpectedly the stress from working at home has further increased burnout instead of helping to alleviate it. According to the most recent survey in October 2020 by the anonymous workplace chat app Blind, 68% of technology workers experience more burn out than they did when they worked at an office. While the ability to work from home reduced stress caused by commuting, there are many aspects of working at home that worsened employee mental health. &lt;/p&gt;

&lt;p&gt;An employee working from home is frequently interrupted by daily life. This includes interactions with pets and children and conflicts with family members. There is often a perceived or expressed pressure to work longer hours in order to be seen as productive which hastens the erosion of boundaries between work and life. Zoom exhaustion is another ongoing source of stress in which continuous meetings and the need to be on camera at all times further allows the infiltration of work into employees' homes. The need to always be available to your boss and team is already exhausting, but when being trapped in a barrage of endless webcam meetings are what defines your work day instead of the time to actually focus on your tasks is overwhelming.&lt;/p&gt;

&lt;p&gt;Workplace burnout negatively impacts not just job performance but also employee health. We can begin to remedy this issue by acknowledging and addressing the cause of work-related stressors collaboratively within our workplace cultures. When companies address employee burnout they have the ability to improve not just on an operational level, but a humane one as well. The work over life mentality of the technology industry cannot be sustained. We work with machines day in and day out, but we are not machines.&lt;/p&gt;

&lt;p&gt;Let me know if you've experienced burnout in another industry, and how you feel tech compares!&lt;/p&gt;

&lt;p&gt;Sources&lt;br&gt;
1.&lt;a href="https://thenewstack.io/this-cant-be-normal-the-tech-industry-after-a-year-of-burnout/"&gt;https://thenewstack.io/this-cant-be-normal-the-tech-industry-after-a-year-of-burnout/&lt;/a&gt;&lt;br&gt;
2.&lt;a href="https://www.theburnoutgamble.com/blog/how-does-the-tech-industry-contribute-to-burnout#:%7E:text=However%2C%20it%20seems%20to%20be,unreasonably%20high%20levels%20of%20productivity.&amp;amp;text=Additionally%2C%20the%20industry's%20top%20stress,and%20a%20toxic%20work%20culture"&gt;https://www.theburnoutgamble.com/blog/how-does-the-tech-industry-contribute-to-burnout#:~:text=However%2C%20it%20seems%20to%20be,unreasonably%20high%20levels%20of%20productivity.&amp;amp;text=Additionally%2C%20the%20industry's%20top%20stress,and%20a%20toxic%20work%20culture&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>burnout</category>
      <category>softskills</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Aliases - Using Linux made easier</title>
      <author>Ayush Agarwal</author>
      <pubDate>Fri, 19 Nov 2021 15:54:34 +0000</pubDate>
      <link>https://dev.to/ayushdev_24/aliases-using-linux-made-easier-3j49</link>
      <guid>https://dev.to/ayushdev_24/aliases-using-linux-made-easier-3j49</guid>
      <description>&lt;p&gt;It is a lovely day, you are sitting in front of your laptop on your work desk writing some excellent code, and your terminal is full of some scripts or commands.&lt;/p&gt;

&lt;p&gt;Now you realize I need to navigate to a directory inside another directory that is inside another. The chain continues for about 4-5 directories until you reach the required folder.&lt;/p&gt;

&lt;p&gt;Such a mood spoiler, right! This potential move has the tendency to force you to get up from your desk and take a 5-minute break which can very quickly turn into a long break. &lt;/p&gt;

&lt;p&gt;See, the damaging domino effect it can have? Now you will argue, ah! You don't know, I can keep pressing the "up" arrow and find the command I need because I used it just about a few hours ago. &lt;/p&gt;

&lt;p&gt;But is that the most efficient way or the best we can do?&lt;/p&gt;

&lt;p&gt;Of course not, and this is where the magic of Aliases come in.&lt;/p&gt;

&lt;p&gt;To understand things better, let's assume you have to go to a folder named "test," inside 5 folders A,B,C,D, and E.&lt;/p&gt;

&lt;p&gt;Most people will do either of the below two:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd A/B/C/D/E/test&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#or"&gt;
  &lt;/a&gt;
  or
&lt;/h4&gt;



&lt;p&gt;&lt;code&gt;cd A&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;cd B&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;cd C&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;cd D&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;cd E&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;cd test&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Now let's do the same task using Aliases. (The reason for all the build-up until now,)&lt;/p&gt;

&lt;p&gt;In simple terms, Aliases are one-word replacements of those types of long commands you see above. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aliases-in-action-"&gt;
  &lt;/a&gt;
  Aliases in Action :
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create a ".bashrc" file. Now let us create an alias for the task we did above. In the file, write :
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;alias test="cd /users/$USER/A/B/C/D/E/test"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$USER will be replaced by your system username.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, to have this working, you will have to run this .bashrc file every time the system starts. Sounds redundant, right? &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is a simple solution to it. You must have a file named ".zshenvuser." This is the file that runs every time your system starts. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In that file, just put:&lt;br&gt;
&lt;br&gt;
&lt;code&gt;~/.bashrc&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will ensure the .bashrc file runs on every system too. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you don't have the ".zshenvuser" file, create a ".bash_profile" and put the below code in it:
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;if [ -r ~/.bashrc ]; &lt;br&gt;
    then&lt;br&gt;
    source ~/.bashrc&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;These are the two ways to automate the running of bashrc. If you know of any other, please comment below. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, after all, this, what have we achieved. &lt;/p&gt;

&lt;p&gt;Go to your Linux terminal and just type "test." It will take you to the test directory exactly what&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;cd A/B/C/D/E/test&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 does. &lt;/p&gt;

&lt;p&gt;Similarly, you can create different aliases for all the commands you use frequently and make your coding session more productive. &lt;/p&gt;

&lt;p&gt;To create more alias, just add another line with the same name alias="."&lt;/p&gt;

&lt;p&gt;That's it for this tech Friday blog. I would love your feedback, even negative ones. &lt;/p&gt;

&lt;p&gt;Comment below if you feel I have missed something. After we are all learning. &lt;/p&gt;

</description>
      <category>linux</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Check Internet Speed with Apple Network Responsiveness</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Fri, 19 Nov 2021 15:50:18 +0000</pubDate>
      <link>https://dev.to/qainsights/check-internet-speed-with-apple-network-responsiveness-2n9</link>
      <guid>https://dev.to/qainsights/check-internet-speed-with-apple-network-responsiveness-2n9</guid>
      <description>&lt;p&gt;There are umpteen tools available to check the internet speed. SpeedTest, &lt;a href="https://qainsights.com/deep-dive-into-cloudflares-speed-test/" rel="noreferrer noopener"&gt;Speed from Cloudflare&lt;/a&gt;, Netflix's &lt;a href="https://fast.com" rel="noreferrer noopener"&gt;Fast&lt;/a&gt;, or if you use &lt;a href="https://www.google.com/search?q=internet+speed" rel="noreferrer noopener"&gt;Google search&lt;/a&gt;, you can test the internet speed and its analytics. In macOS Monterey, Apple has released a command line tool called &lt;code&gt;networkQuality&lt;/code&gt;. In this blog article we will deep dive into networkQuality and its usage.&lt;/p&gt;

&lt;h2&gt;Launching networkQuality&lt;/h2&gt;

&lt;p&gt;The only prerequisite to launch &lt;code&gt;networkQuality&lt;/code&gt; is macOS Monterey. Launch the &lt;code&gt;terminal&lt;/code&gt; from the &lt;code&gt;Finder&lt;/code&gt;. In the terminal, type &lt;code&gt;networkQuality&lt;/code&gt; and hit enter.&lt;/p&gt;

&lt;p&gt;The tool will display the download and upload capacity for every second as shown below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/11/image-2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hUniC0Lu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/11/image-2-1024x87.png" alt="Testing" width="880" height="75"&gt;&lt;/a&gt;Testing&lt;/p&gt;

&lt;p&gt;Once the test is done after ~15 seconds, you can see the summary of your internet performance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/11/image-3.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H6MZi7d_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/11/image-3.png" alt="" width="638" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Responsiveness&lt;/code&gt; in the above summary is in roundtrips completed per minute (RPM). Responsiveness measures the quality of the network by the number of roundtrips per minute.&lt;/p&gt;

&lt;p&gt;There are three categories in Responsiveness. &lt;strong&gt;Low, Medium, and High&lt;/strong&gt;. High means there is a reliable network connection. Low means, you can see the issues while on a call or downloading a huge document or media file. Medium means, you can see a brief delay in the network.&lt;/p&gt;

&lt;p&gt;To view the manual page, enter &lt;code&gt;man networkQuality&lt;/code&gt; and hit enter.&lt;/p&gt;

&lt;p&gt;By default, networkQuality tests with parallel upload/download. If you want to test in sequential order add &lt;code&gt;-s&lt;/code&gt; option to the command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/11/image-4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G_O4V4St--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/11/image-4-1024x68.png" alt="Download Stats" width="880" height="58"&gt;&lt;/a&gt;Download Stats&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/11/image-5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xvo_AJG4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/11/image-5-1024x87.png" alt=" Upload Stats " width="880" height="75"&gt;&lt;/a&gt; Upload Stats &lt;/p&gt;

&lt;p&gt;To view the output in JSON format, enter &lt;code&gt;networkQuality -c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/11/image-7.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4yJ2ghJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/11/image-7-470x1024.png" alt="JSON output" width="470" height="1024"&gt;&lt;/a&gt;JSON output&lt;/p&gt;

&lt;p&gt;To view the verbose output, enter &lt;code&gt;networkQuality -v&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/11/image-6.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7VrYnoTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/11/image-6.png" alt="Summary" width="756" height="368"&gt;&lt;/a&gt;Summary&lt;/p&gt;

&lt;p&gt;To test other interface in the network, enter &lt;code&gt;networkQuality -I &amp;lt;interface_name&amp;gt;&lt;/code&gt;. This will bind the interface and run the tests.&lt;/p&gt;

&lt;p&gt;By default, networkQuality uses the below configuration for testing.If you want to configure, you can use &lt;code&gt;the -C&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;In the JSON file, there are three different URLs to test the network speed. Small and Large are for GET requests. The Upload URL is for POST request.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  "version": 1,
  "urls": {
    "small_https_download_url": "https://mensura.cdn-apple.com/api/v1/gm/small",
    "large_https_download_url": "https://mensura.cdn-apple.com/api/v1/gm/large",
    "https_upload_url": "https://mensura.cdn-apple.com/api/v1/gm/slurp"
  },
  "test_endpoint": "usqas2-edge-bx-023.aaplimg.com"
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example of a &lt;a href="https://github.com/QAInsights/networkQuality/blob/main/config.json" rel="noreferrer noopener"&gt;custom configuration file&lt;/a&gt;. But it is not properly working; If you find a solution, please share it in the comments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/QAInsights/networkQuality" rel="noreferrer noopener"&gt;networkQuality Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;!-- /wp:button --&amp;gt;&lt;/p&gt;

&lt;p&gt;Using the &lt;a href="https://qainsights.com/jump-start-with-fiddler-everywhere/" rel="noreferrer noopener"&gt;Fiddler Everywhere&lt;/a&gt;, I captured the traffic when the test was running. Here is the screenshot. Totally, there were around 40+ requests made to conclude the testing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/11/image-8.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwKUI88D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/11/image-8-1024x573.png" alt="" width="880" height="492"&gt;&lt;/a&gt;Fiddler Capture during the test&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Apple's &lt;code&gt;networkQuality&lt;/code&gt; is not a full-fledged solution to test the network speed. There are many matured solutions that are available for free. But if you are in the Apple ecosystem and love being a fan of Apple, you can add &lt;code&gt;networkQuality&lt;/code&gt; in your shell file.&lt;/p&gt;

</description>
      <category>performance</category>
      <category>tooling</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>PlanetScale integrates with Arctype's MySQL GUI</title>
      <author>etnoctua</author>
      <pubDate>Fri, 19 Nov 2021 15:47:58 +0000</pubDate>
      <link>https://dev.to/planetscale/planetscale-integrates-with-arctypes-mysql-gui-3mc4</link>
      <guid>https://dev.to/planetscale/planetscale-integrates-with-arctypes-mysql-gui-3mc4</guid>
      <description>&lt;p&gt;Check out our exclusive integration with &lt;a href="https://arctype.com/"&gt;Arctype&lt;/a&gt;, our favorite database GUI for developers. &lt;/p&gt;

&lt;p&gt;Arctype features a fast, modern interface with &lt;a href="https://docs.arctype.com/keyboard-shortcuts"&gt;keyboard shortcuts&lt;/a&gt;, a &lt;a href="https://docs.arctype.com/getting-started/quick-find"&gt;command bar&lt;/a&gt; to quickly find objects, and the best support for JSON in a SQL client. It’s also free to use. You can already &lt;a href="https://arctype.com/mysql/setup/planetscale-mac"&gt;connect to the main branch&lt;/a&gt; of your PlanetScale database in Arctype, but today it’s possible to connect to development branches, switch between them, and even create deploy requests. The power of PlanetScale is experienced within a beautiful GUI! &lt;/p&gt;

&lt;p&gt;For a full walk through, check out the &lt;a href="https://planetscale.com/blog/planetscale-free-sql-gui-with-arctype"&gt;demo video&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>mysql</category>
      <category>devops</category>
      <category>database</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Bluetooth Low Energy (BLE) Tutorial for Arduino using BleuIO</title>
      <author>Bleuio tech</author>
      <pubDate>Fri, 19 Nov 2021 15:44:02 +0000</pubDate>
      <link>https://dev.to/bleuiot/bluetooth-low-energy-ble-tutorial-for-arduino-using-bleuio-1dom</link>
      <guid>https://dev.to/bleuiot/bluetooth-low-energy-ble-tutorial-for-arduino-using-bleuio-1dom</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AalPVydb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnuztvnm88rp0ej0vtyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AalPVydb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnuztvnm88rp0ej0vtyh.png" alt="Arduino with BleuIO Dongle." width="800" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-introduction"&gt;
  &lt;/a&gt;
  1. Introduction
&lt;/h2&gt;

&lt;p&gt;The project is a simple example showcasing a quick way to setup an Arduino with a USB Host Shield as a USB CDC Host capable of communicating with the BleuIO Dongle.&lt;/p&gt;

&lt;p&gt;When a BleuIO Dongle is connected to the USB port, the BleuIO Dongle will start advertising. It will then act as a terminal, taking input and sending data to the Arduino Virtual Com Port.&lt;/p&gt;

&lt;p&gt;We have used an Arduino Uno Rev. 3 with SparkFun's USB Host Shield (DEV-09947) for this example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-about-the-code"&gt;
  &lt;/a&gt;
  2. About the Code
&lt;/h2&gt;

&lt;p&gt;You can get project &lt;a href="https://github.com/smart-sensor-devices-ab/arduino_bleuio_example"&gt;&lt;strong&gt;HERE&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/smart-sensor-devices-ab/arduino_bleuio_example"&gt;https://github.com/smart-sensor-devices-ab/arduino_bleuio_example&lt;/a&gt;&lt;br&gt;&lt;br&gt;
This project based on the 'acm_terminal' example in the &lt;a href="https://felis.github.io/USB_Host_Shield_2.0/"&gt;Host USB Shield Library 2.0&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dqh5Of9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2d696ulrdw7bnta7ks6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dqh5Of9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2d696ulrdw7bnta7ks6p.png" alt="acm example" width="465" height="491"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;The largest possible max.packet size for the function Acm.RcvData() is 64 bytes, so to accommodate the amount of data we will receive, we are using three buffers to receive the data from the BleuIO Dongle.&lt;/p&gt;

&lt;p&gt;If the buffers have received any data, we print it out to the serial terminal connected to the Virtual COM Port.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Usb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Acm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isReady&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;rcode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;rcode2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;rcode3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

       &lt;span class="cm"&gt;/* reading the keyboard */&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="cm"&gt;/* sending to the BleuIO Dongle */&lt;/span&gt;
         &lt;span class="n"&gt;rcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Acm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SndData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ErrorMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PSTR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SndData"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rcode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;//if(Serial.available()...&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_flag&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;rcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Acm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SndData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;START_CMDS&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;START_CMDS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ErrorMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PSTR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SndData"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rcode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="n"&gt;start_flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x01&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="cm"&gt;/* reading the BleuIO Dongle */&lt;/span&gt;
        &lt;span class="kt"&gt;uint8_t&lt;/span&gt;  &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;rcvd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;uint8_t&lt;/span&gt;  &lt;span class="n"&gt;buf2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;rcvd2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;uint8_t&lt;/span&gt;  &lt;span class="n"&gt;buf3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;rcvd3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;uint8_t&lt;/span&gt;  &lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;input_indx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="n"&gt;rcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Acm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RcvData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rcvd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;rcode2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Acm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RcvData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rcvd2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;rcode3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Acm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RcvData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rcvd3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rcode&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;rcode&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;hrNAK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ErrorMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PSTR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Ret"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rcode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;

         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rcode2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;rcode2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;hrNAK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="n"&gt;ErrorMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PSTR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Ret"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rcode2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;

         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rcode3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;rcode3&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;hrNAK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="n"&gt;ErrorMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PSTR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Ret"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rcode3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;


            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rcvd&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//more than zero bytes received&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;rcvd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//printing on the screen&lt;/span&gt;
                &lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;input_indx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;input_indx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rcvd2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//more than zero bytes received&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;rcvd2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buf2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//printing on the screen&lt;/span&gt;
                &lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;input_indx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buf2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;input_indx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rcvd3&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//more than zero bytes received&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;rcvd3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buf3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//printing on the screen&lt;/span&gt;
                &lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;input_indx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buf3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;input_indx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;input_indx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;// Example on a way for the Arduino to react to BleuIO events&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strstr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"handle_evt_gap_connected"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;&amp;lt;CONNECTION DETECTED!&amp;gt;&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strstr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"handle_evt_gap_disconnected"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;&amp;lt;CONNECTION LOST!&amp;gt;&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;//if( Usb.getUsbTaskState() == USB_STATE_RUNNING..&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;We also store the latest data from the dongle into the dongle_input buffer and run it through a simple "parser" to showcase an easy way of how you can react to events and have the Arduino do something.&lt;/p&gt;

&lt;p&gt;In this example, we are explicitly looking for BLE connection or disconnect events. When found, we just print out "&amp;lt;&amp;gt;" or "&amp;lt;&amp;gt;" to the terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-using-the-example-project"&gt;
  &lt;/a&gt;
  3. Using the example project
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#31-what-you-will-need"&gt;
  &lt;/a&gt;
  3.1 What you will need
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A BleuIO dongle with firmware version 2.1.0 or later (&lt;a href="https://www.bleuio.com/getting_started/docs/release_history/#release-v210"&gt;https://www.bleuio.com/getting_started/docs/release_history/#release-v210&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;An Arduino Uno Rev. 3 (&lt;a href="https://store.arduino.cc/products/arduino-uno-rev3"&gt;https://store.arduino.cc/products/arduino-uno-rev3&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;An USB Host Shield (&lt;a href="https://www.sparkfun.com/products/9947"&gt;https://www.sparkfun.com/products/9947&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The Arduino IDE (&lt;a href="https://www.arduino.cc/en/software"&gt;https://www.arduino.cc/en/software&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#32-requirments-for-the-sparkfun-board"&gt;
  &lt;/a&gt;
  3.2 Requirments for the SparkFun board
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;With the SparkFun board, it seems like you MUST supply external power on Vin or the barrel jack. 5V from the USB cable did not work.&lt;/li&gt;
&lt;li&gt;You must also apply a jumper from pin D7 to RESET.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-how-to-setup-project"&gt;
  &lt;/a&gt;
  4. How to setup project
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#41-downloading-the-project-from-github"&gt;
  &lt;/a&gt;
  4.1 Downloading the project from GitHub
&lt;/h3&gt;

&lt;p&gt;Get project &lt;a href="https://github.com/smart-sensor-devices-ab/arduino_bleuio_example"&gt;HERE&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/smart-sensor-devices-ab/arduino_bleuio_example"&gt;https://github.com/smart-sensor-devices-ab/arduino_bleuio_example&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Either clone the project, or download it as a zip file and unzip it, into your Arduino folder.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#42-downloading-the-usb-host-shield-library-20"&gt;
  &lt;/a&gt;
  4.2 Downloading the USB Host Shield Library 2.0
&lt;/h3&gt;

&lt;p&gt;Either download the Library from Here (&lt;a href="https://felis.github.io/USB_Host_Shield_2.0/"&gt;https://felis.github.io/USB_Host_Shield_2.0/&lt;/a&gt;) and place the folder into your libraries folder inside your Arduino folder.&lt;br&gt;
(For information on installing libraries, see: &lt;a href="http://www.arduino.cc/en/Guide/Libraries"&gt;http://www.arduino.cc/en/Guide/Libraries&lt;/a&gt;)&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Or download it through the Arduino IDE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In Arduino IDE choose Sketch&amp;gt;Include Library&amp;gt;Manage Library
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UH3ad7n2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oxzs0zrz74yv2kclf27b.png" alt="Import BleuIO Arduino project" width="593" height="273"&gt;

&lt;/li&gt;
&lt;li&gt;Search for USB Host Shield Library 2.0 and click 'Install'
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l4_gdj3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v04f3b4licwkv2u8pfk.png" alt="Existing Projects." width="786" height="443"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-running-the-example"&gt;
  &lt;/a&gt;
  5. Running the example
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In Arduino IDE click the upload button to upload the project to your Arduino.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xgH7rbYT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzze6y5fgv5zwqirkrwu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xgH7rbYT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzze6y5fgv5zwqirkrwu.png" alt="BleuIO Arduino Projects." width="203" height="46"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open up the 'Arduino Uno Viritual COM Port' with a serial terminal emulation program like TeraTerm, Putty or CoolTerm.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Serial port Setup:&lt;br&gt;&lt;br&gt;
Baudrate: 115200&lt;br&gt;&lt;br&gt;
Data Bits: 8&lt;br&gt;&lt;br&gt;
Parity: None&lt;br&gt;&lt;br&gt;
Stop Bits: 1&lt;br&gt;&lt;br&gt;
Flow Control: None&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Or inside the Arduino IDE open up Arduino Monitor and in the bottom right corner select 'Carriage Return' and '115200 baud'&lt;br&gt;
&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oB25zvMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzqgtcowt3f3fvy1y4l0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oB25zvMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzqgtcowt3f3fvy1y4l0.png" alt="BleuIO Arduino Projects." width="326" height="73"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should see the word 'Start' and then see the dongle running two commands: setting response data and starting the advertising. You can now type commands to the dongle.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AkjKbIfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1i89nv7zvclqxc8bg0n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AkjKbIfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1i89nv7zvclqxc8bg0n.png" alt="BleuIO Arduino Projects." width="681" height="171"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
  </channel>
</rss>
