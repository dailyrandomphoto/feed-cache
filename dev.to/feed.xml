<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Laravel Tutorial - Create a new page and list the users from the database using Livewire</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Sat, 28 Aug 2021 11:37:21 +0000</pubDate>
      <link>https://dev.to/themesberg/laravel-tutorial-create-a-new-page-and-list-the-users-from-the-database-using-livewire-fkd</link>
      <guid>https://dev.to/themesberg/laravel-tutorial-create-a-new-page-and-list-the-users-from-the-database-using-livewire-fkd</guid>
      <description>&lt;p&gt;In this tutorial, I am going to show you how to start building interactive web applications starting from scratch using a &lt;strong&gt;Laravel Admin Dashboard&lt;/strong&gt; and the latest version of &lt;strong&gt;Livewire&lt;/strong&gt;. At the end of this, you will know how to create pages, use and create Laravel components, and customize the appearance of the application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fTpq88fj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themesberg.s3.us-east-2.amazonaws.com/public/posts/laravel/dashboard-tutorial/laravel-dashboard-tutorial.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fTpq88fj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themesberg.s3.us-east-2.amazonaws.com/public/posts/laravel/dashboard-tutorial/laravel-dashboard-tutorial.jpg" alt="Laravel Admin Dashboard Tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me give you a brief introduction to the two main technologies that we will be using in this guide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laravel"&gt;
  &lt;/a&gt;
  Laravel
&lt;/h2&gt;

&lt;p&gt;Laravel is a web application framework with expressive, elegant syntax. A web framework provides a structure and starting point for creating your application, allowing you to focus on creating something amazing while we sweat the details.&lt;/p&gt;

&lt;p&gt;Laravel strives to provide an amazing developer experience while providing powerful features such as thorough dependency injection, an expressive database abstraction layer, queues and scheduled jobs, unit and integration testing, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#livewire"&gt;
  &lt;/a&gt;
  Livewire
&lt;/h2&gt;

&lt;p&gt;Livewire is a full-stack framework for Laravel that makes building dynamic interfaces simple, without leaving the comfort of Laravel.&lt;/p&gt;

&lt;p&gt;Here’s the table of contents for this tutorial:&lt;/p&gt;

&lt;p&gt;In order to save time setting up the project we will use a free and open-source Laravel admin dashboard interface that we’ve built here at Themesberg. It’s based on the Bootstrap 5 CSS framework and uses Laravel and Livewire.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#download-and-install-volt-laravel-dashboard"&gt;
  &lt;/a&gt;
  Download and install Volt Laravel Dashboard
&lt;/h2&gt;

&lt;p&gt;Depending on your personal preferences you can either download the Volt Laravel Dashboard directly from &lt;a href="https://themesberg.com/product/laravel/volt-admin-dashboard-template"&gt;Themesberg for free&lt;/a&gt;, or just clone the project from the &lt;a href="https://github.com/themesberg/volt-laravel-dashboard"&gt;public repository on Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://themesberg.com/product/laravel/volt-admin-dashboard-template"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kbegHFub--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themesberg.s3.us-east-2.amazonaws.com/public/posts/laravel/dashboard-tutorial/volt-laravel-admin-dashboard-min.png" alt="Volt Free Admin Laravel Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you’ve unzipped the file (if you’ve downloaded it), use the terminal and go to the root project folder and follow the instructions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the project’s zip then copy and paste volt-dashboard-master folder in your projects folder. Rename the folder to your project’s name;&lt;/li&gt;
&lt;li&gt;Make sure you have Node and Composer locally installed;&lt;/li&gt;
&lt;li&gt;Run the following command in order to download all the project dependencies: &lt;code&gt;composer install&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; in your terminal;&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;.env.example&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; and update the configurations (mainly the database configuration);&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;php artisan key:generate&lt;/code&gt; in your terminal;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;php artisan migrate --seed&lt;/code&gt; to create the database tables and seed the roles and users tables;&lt;/li&gt;
&lt;li&gt;Finally, run &lt;code&gt;php artisan storage:link&lt;/code&gt; to create the storage symlink (if you are using Vagrant with Homestead for development, remember to ssh into your virtual machine and run the command from there).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#learn-the-project-structure"&gt;
  &lt;/a&gt;
  Learn the project structure
&lt;/h2&gt;

&lt;p&gt;It’s always a good idea to have a good overview and understanding of the folder structure before starting to code. Allow me to explain some of the folders and what they are for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;public/&lt;/code&gt;: this folder contains the compiled Javascript and CSS files. You can also add assets such as images here;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;resources/&lt;/code&gt;: this folder contains the blade files, the SCSS, CSS and Javascript files that are not compiled;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;node_modules/&lt;/code&gt;: this is the folder where all dependencies will be installed after running npm install;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.gitignore&lt;/code&gt;: here you can add files or folders to be ignored by the git version control system, such as the node_modules folder;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app/Http/&lt;/code&gt;: here are all the Laravel classes corresponding to the blade files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we’ve broken down the folder structure, let’s start by exploring some of the UI components that you can use with the freshly installed project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explore-the-bootstrap-ui-components"&gt;
  &lt;/a&gt;
  Explore the Bootstrap UI components
&lt;/h2&gt;

&lt;p&gt;One of the reasons why I chose Volt Laravel Dashboard is because of the vast amount of UI components, sections, and pages that you can choose from to customize and build a good user interface to show the data and actions for your users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://volt-laravel-admin-dashboard.updivision.com/documentation/components/accordions/index.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IDJQdw89--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themesberg.s3.us-east-2.amazonaws.com/public/posts/laravel/dashboard-tutorial/laravel-ui-components-bootstrap.png" alt="Laravel UI components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can explore the components of the project by going to the &lt;a href="https://volt-laravel-admin-dashboard.updivision.com/documentation/components/accordions/index.html"&gt;online documentation&lt;/a&gt; and select components such as buttons, accordions, alerts, modals, navbars, and many more.&lt;/p&gt;

&lt;p&gt;This set of UI elements will be very helpful down the line when you will face unique challenges and features that you want to integrate into your application and you can’t find a similar page already built for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-new-page-in-laravel"&gt;
  &lt;/a&gt;
  Building a new page in Laravel
&lt;/h2&gt;

&lt;p&gt;After you have explored the UI components, it’s time to show you how you can create a brand new page, add new components to it, register it as a route and add it to the sidebar. You’ll build a page which will show a list of users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-a-new-page"&gt;
  &lt;/a&gt;
  Step 1: create a new page
&lt;/h3&gt;

&lt;p&gt;The first step is to create a new page using Livewire, which makes things a lot easier. Just enter the command &lt;code&gt;php artisan make:livewire UserManagement&lt;/code&gt; and Livewire will make sure to create everything you need, from a migration to blade file and a Laravel class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-declare-and-register-it-a-route"&gt;
  &lt;/a&gt;
  Step 2: declare and register it a route
&lt;/h3&gt;

&lt;p&gt;Now go to the &lt;code&gt;web.php&lt;/code&gt; in the &lt;code&gt;/routes&lt;/code&gt; directory and register the new page as a route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('/user-management', Users::class)-&amp;gt;name('user-management');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then go in the &lt;code&gt;app.blade.php&lt;/code&gt; file and enter the name of the route in the first array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@if(in_array(request()-&amp;gt;route()-&amp;gt;getName(), ['dashboard','user-management', etc]))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you now go to the page at &lt;code&gt;http://localhost:3000/#/user-management&lt;/code&gt; you will see a blank new page with a sidebar, the navigation, and the footer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-build-the-page-using-bootstrap-5-components"&gt;
  &lt;/a&gt;
  Step 3: build the page using Bootstrap 5 components
&lt;/h3&gt;

&lt;p&gt;Great job! Now that you have created a new page, you’re free to build it however you want it using the UI elements that are provided with the Volt Laravel Dashboard project. The page needs a title, a description, and some breadcrumb elements.&lt;/p&gt;

&lt;p&gt;Add the following block of code in order to create the breadcrumb component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="d-block mb-4 mb-md-0"&amp;gt;
    &amp;lt;nav aria-label="breadcrumb" class="d-none d-md-inline-block"&amp;gt;
        &amp;lt;ol class="breadcrumb breadcrumb-dark breadcrumb-transparent"&amp;gt;
            &amp;lt;li class="breadcrumb-item"&amp;gt;
                &amp;lt;a href="#"&amp;gt;
                    &amp;lt;svg class="icon icon-xxs" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg"&amp;gt;
                        &amp;lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"&amp;gt;
                        &amp;lt;/path&amp;gt;
                    &amp;lt;/svg&amp;gt;
                &amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li class="breadcrumb-item"&amp;gt;&amp;lt;a href="#"&amp;gt;Volt&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li class="breadcrumb-item active" aria-current="page"&amp;gt;{{__('Users List')}}&amp;lt;/li&amp;gt;
        &amp;lt;/ol&amp;gt;
    &amp;lt;/nav&amp;gt;
    &amp;lt;h2 class="h4"&amp;gt;{{__('User Management')}}&amp;lt;/h2&amp;gt;
    &amp;lt;p class="mb-0"&amp;gt;{{__('Your user management dashboard template.')}}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you now head back to the browser, you’ll see that a breadcrumb component, title, and a description has been added to the page.&lt;/p&gt;

&lt;p&gt;Let’s continue by adding a few elements that will let you to search, update, or add new users to the list:&lt;/p&gt;

&lt;p&gt;Add the following block of code in order to create the breadcrumb component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="table-settings mb-4"&amp;gt;
    &amp;lt;div class="row justify-content-between align-items-center"&amp;gt;
        &amp;lt;div class="col-9 col-lg-8 d-md-flex"&amp;gt;
            &amp;lt;div class="input-group me-2 me-lg-3 fmxw-300"&amp;gt;
                &amp;lt;span class="input-group-text"&amp;gt;&amp;lt;svg class="icon icon-xs"
                        x-description="Heroicon name: solid/search" xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"&amp;gt;
                        &amp;lt;path fill-rule="evenodd"
                            d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                            clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;
                    &amp;lt;/svg&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
                &amp;lt;input wire:model="search" type="text" class="form-control" placeholder="Search users"&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-3 d-flex"&amp;gt;
                &amp;lt;select wire:model="entries" class="form-select fmxw-100 d-none d-md-inline" id="entries"
                    aria-label="Entries per page"&amp;gt;
                    &amp;lt;option value="10"&amp;gt;10&amp;lt;/option&amp;gt;
                    &amp;lt;option value="25"&amp;gt;25&amp;lt;/option&amp;gt;
                    &amp;lt;option value="50"&amp;gt;50&amp;lt;/option&amp;gt;
                    &amp;lt;option value="100"&amp;gt;100&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great job! Now you’ve added all of the essential elements for the top side of this page. The result should look like the following image in your browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-making-use-of-laravel-and-livewire"&gt;
  &lt;/a&gt;
  Step 4: Making use of Laravel and Livewire
&lt;/h3&gt;

&lt;p&gt;Our next step is to implement the table, a very easy task using the already made Livewire component for a table. We will be adding our table heading like this:&lt;/p&gt;

&lt;p&gt;Add the following block of code in order to create the breadcrumb component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;x-slot name="head"&amp;gt;
    &amp;lt;x-table.heading sortable wire:click="sortBy('first_name')"
        :direction="$sortField === 'first_name' ? $sortDirection : null"&amp;gt;{{__('Name')}}
    &amp;lt;/x-table.heading&amp;gt;
    &amp;lt;x-table.heading sortable wire:click="sortBy('role_id')"
        :direction="$sortField === 'role_id' ? $sortDirection : null"&amp;gt;{{__('Role')}}
    &amp;lt;/x-table.heading&amp;gt;
    &amp;lt;x-table.heading sortable wire:click="sortBy('created_at')"
        :direction="$sortField === 'created_at' ? $sortDirection : null"&amp;gt;{{__('Date created')}}
    &amp;lt;/x-table.heading&amp;gt;
    &amp;lt;x-table.heading sortable wire:click="sortBy('status')"
        :direction="$sortField === 'status' ? $sortDirection : null"&amp;gt;{{__('Status')}}
    &amp;lt;/x-table.heading&amp;gt;
    @can('manage-users', auth()-&amp;gt;user())
    &amp;lt;x-table.heading&amp;gt;{{__('Action')}}&amp;lt;/x-table.heading&amp;gt;
    @endcan
&amp;lt;/x-slot&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The sorting functionality is taken care of in the &lt;code&gt;Users.php&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;In the body section of the table, instead of hard coding every row and cell, we will be going through each entry of the users table from our database and show our data in a dynamic way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;x-slot name="body"&amp;gt;
    @foreach ($users as $user)
    &amp;lt;x-table.row&amp;gt;
        &amp;lt;x-table.cell&amp;gt;
            &amp;lt;a href="#" class="d-flex align-items-center"&amp;gt;
                &amp;lt;img src="{{$user-&amp;gt;avatarUrl()}}" class="avatar rounded-circle me-3" alt="Avatar"&amp;gt;
                &amp;lt;div class="d-block"&amp;gt;
                    &amp;lt;span class="fw-bold"&amp;gt;{{ $user-&amp;gt;first_name . ' ' . $user-&amp;gt;last_name }}&amp;lt;/span&amp;gt;
                    &amp;lt;div class="small text-gray"&amp;gt;{{ $user-&amp;gt;email }}&amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/x-table.cell&amp;gt;
        &amp;lt;x-table.cell&amp;gt;{{ $user-&amp;gt;role-&amp;gt;name }}&amp;lt;/x-table.cell&amp;gt;
        &amp;lt;x-table.cell&amp;gt;{{ $user-&amp;gt;date_for_humans }}&amp;lt;/x-table.cell&amp;gt;
        &amp;lt;x-table.cell&amp;gt;&amp;lt;span class="fw-normal text-{{ $user-&amp;gt;status_color }}"&amp;gt; {{ $user-&amp;gt;status }} &amp;lt;/span&amp;gt;
        &amp;lt;/x-table.cell&amp;gt;
        @can('manage-users', auth()-&amp;gt;user())
        &amp;lt;x-table.cell&amp;gt;
            @can('update', $user)
            @if($user-&amp;gt;id !=1 &amp;amp;&amp;amp; auth()-&amp;gt;user()-&amp;gt;can('update', $user) || auth()-&amp;gt;user()-&amp;gt;can('delete',
            $user))
            @if($user-&amp;gt;id != auth()-&amp;gt;user()-&amp;gt;id)
            &amp;lt;x-button.link&amp;gt;
                @can('update', $user)
                &amp;lt;a class="dropdown-item d-flex align-items-center"
                    href="{{ route('edit-user', ['id' =&amp;gt; $user-&amp;gt;id]) }}"&amp;gt;&amp;lt;span
                        class="fas fa-user-shield me-2"&amp;gt;&amp;lt;/span&amp;gt; {{__('Edit user')}}&amp;lt;/a&amp;gt;
                @endcan
                @can('delete', $user)
                &amp;lt;a onclick="confirm('Are you sure you want to remove the user from this group?') || event.stopImmediatePropagation()"
                    wire:click="delete({{ $user-&amp;gt;id }})"
                    class="dropdown-item text-danger rounded-bottom"&amp;gt;&amp;lt;span
                        class="fas fa-user-times me-2"&amp;gt;&amp;lt;/span&amp;gt;{{__('Delete user')}}&amp;lt;/a&amp;gt;
                @endcan
            &amp;lt;/x-button.link&amp;gt;
            @endif
            @endif
            @endcan
        &amp;lt;/x-table.cell&amp;gt;
        @endcan
    &amp;lt;/x-table.row&amp;gt;
    @endforeach
&amp;lt;/x-slot&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---bOjFq_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themesberg.s3.us-east-2.amazonaws.com/public/posts/laravel/dashboard-tutorial/volt-laravel-dashboard-tutorial-result.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---bOjFq_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themesberg.s3.us-east-2.amazonaws.com/public/posts/laravel/dashboard-tutorial/volt-laravel-dashboard-tutorial-result.png" alt="Laravel dashboard tutorial result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! Now you’ve learned how to build a new page, a data source, and show multiple users using Laravel components and from a data source.&lt;/p&gt;

&lt;p&gt;In the next section I’ll show you how easy it is to change the appearance of the dashboard using Sass variables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#customize-using-sass-variables"&gt;
  &lt;/a&gt;
  Customize using Sass variables
&lt;/h2&gt;

&lt;p&gt;Another useful feature of this dashboard is that you can easily customize the appearance of the user interface by changing the Sass variables for the colors, fonts, spacings, shadows, container, and many more.&lt;/p&gt;

&lt;p&gt;For example, you can go to the &lt;code&gt;resources/scss/volt/_variables.scss&lt;/code&gt; and update the following values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$primary : #1F2937 !default;
$secondary: #fb503b !default;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then you have to run the command npm run scss in order to compile all the scss files into one new css file that you can then use to style your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You’ve learned how to install a Laravel project, build a new page, customize the appearance using Sass variables and build the final production files. I hope you learned a lot and that the dashboard will help you with your project and career.&lt;/p&gt;

&lt;p&gt;Before you go, I’d like to introduce you to the premium version of the Volt Laravel Dashboard, which has twice as many components, pages, plugins and a few more features compared to the open source version of it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://themesberg.com/product/laravel/volt-pro-admin-dashboard-template"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kbegHFub--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themesberg.s3.us-east-2.amazonaws.com/public/posts/laravel/dashboard-tutorial/volt-laravel-admin-dashboard-min.png" alt="Volt Pro Admin Laravel Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://themesberg.com/product/laravel/volt-pro-admin-dashboard-template"&gt;Volt Dashboard PRO Laravel&lt;/a&gt; is a powerful, versatile dashboard which comes with the most commonly used CRUDs in any app: #users, #roles, #items, #categories, #tags. Add in a clean design with over 800 handcrafted UI components and you`ve got an awesome starter pack for building web apps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://volt-pro-laravel-admin-dashboard.updivision.com/"&gt;Live Preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://themesberg.com/product/laravel/volt-admin-dashboard-template"&gt;Free version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://themesberg.com/product/laravel/volt-pro-admin-dashboard-template"&gt;Pro version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>laravel</category>
      <category>livewire</category>
      <category>opensource</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Let, Run, Apply, &amp; Also di Kotlin</title>
      <author>alfianandinugraha</author>
      <pubDate>Sat, 28 Aug 2021 11:15:51 +0000</pubDate>
      <link>https://dev.to/alfianandinugraha/let-run-apply-also-di-kotlin-2inb</link>
      <guid>https://dev.to/alfianandinugraha/let-run-apply-also-di-kotlin-2inb</guid>
      <description>&lt;p&gt;Fungsi dari scope function adalah untuk mengelola object menggunakan lambda / fungsi ekstensi. Kegunaan ini adalah agar kode mudah dibaca karena memiliki scope masing-masing. Buat kode class terlebih dahulu untuk nanti dipakai lagi :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#jenisjenis"&gt;
  &lt;/a&gt;
  Jenis-jenis
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#let"&gt;
  &lt;/a&gt;
  Let
&lt;/h2&gt;

&lt;p&gt;Let lambda memungkinkan untuk mengelola object sekaligus mengembalikan sesuatu. Let juga memiliki satu parameter yang nantinya juga bisa dialiaskan dengan keyword &lt;code&gt;it&lt;/code&gt;. Contoh kode :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;asus&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Asus"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6_000_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="s"&gt;"Name ${product.name}, Price: Rp${product.price}"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hasil output :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q6hLeuvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpezjoibbsc5qrybzqxi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q6hLeuvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpezjoibbsc5qrybzqxi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#run"&gt;
  &lt;/a&gt;
  Run
&lt;/h2&gt;

&lt;p&gt;Lambda ini hampir mirip dengan let yang membedakan adalah lambda ini tidak memiliki parameter jadi untuk mengakses objectnya menggunakan keyword &lt;code&gt;this&lt;/code&gt;. Contoh kode :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;lenovo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Lenovo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3_000_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lenovo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="s"&gt;"Name ${this.name}, Price: Rp${this.price}"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hasil output :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bVBuvmhD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yji06ov3l42wp4i4jo6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bVBuvmhD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yji06ov3l42wp4i4jo6b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#also"&gt;
  &lt;/a&gt;
  Also
&lt;/h2&gt;

&lt;p&gt;Also memiliki 1 parameter dan mengembalikan nilai object itu sendiri. Contoh :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;msi&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MSI"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5_000_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;newMsi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;also&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hasil Output :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y0yKAZ8e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6amd1cmayg2ljthx3g9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0yKAZ8e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6amd1cmayg2ljthx3g9.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#apply"&gt;
  &lt;/a&gt;
  Apply
&lt;/h2&gt;

&lt;p&gt;Berbeda dengan sebelumnya, apply hanya mengembalikan nilai Object itu sendiri saja dan tidak memiliki paramater. Jadi untuk mengakses properti nya menggunakan keyword &lt;code&gt;this&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;hp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"HP"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4_000_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;newHp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hasil Output :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cfXmMpgs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7ye0qyltgsimgmxldy4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cfXmMpgs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7ye0qyltgsimgmxldy4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>basic</category>
      <category>oop</category>
    </item>
    <item>
      <title>Git Merge: The Final Guide</title>
      <author>ZigRazor</author>
      <pubDate>Sat, 28 Aug 2021 11:08:43 +0000</pubDate>
      <link>https://dev.to/zigrazor/git-merge-the-final-guide-ldn</link>
      <guid>https://dev.to/zigrazor/git-merge-the-final-guide-ldn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#merging"&gt;
  &lt;/a&gt;
  Merging
&lt;/h2&gt;

&lt;p&gt;Having multiple branches is extremely convenient to keep new changes separated from each other, and to make sure you don't accidentally push unapproved or broken changes to production. Once the changes have been approved, we want to get these changes in our &lt;em&gt;main&lt;/em&gt; branch!&lt;/p&gt;

&lt;p&gt;One way to get the changes from one branch to another is by performing a &lt;code&gt;git merge&lt;/code&gt;! There are two types of merges &lt;em&gt;Git&lt;/em&gt; can perform: a &lt;strong&gt;fast-forward&lt;/strong&gt;, or a &lt;strong&gt;no-fast-forward&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fastforward"&gt;
  &lt;/a&gt;
  Fast-forward
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git merge --ff 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;strong&gt;fast-forward&lt;/strong&gt; merge can happen when the current branch has no extra commits compared to the branch we’re merging. Git is... lazy and will first try to perform the easiest option: the fast-forward! This type of merge doesn’t create a new commit, but rather merges the commit(s) on the branch we’re merging right in the current branch &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nofastfoward"&gt;
  &lt;/a&gt;
  No-fast-foward
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git merge --no-ff 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not ever your current branch doesn't have any extra commits compared to the branch that you want to merge. If we committed changes on the current branch that the branch we want to merge doesn't have, git will perform a &lt;strong&gt;no-fast-forward&lt;/strong&gt; merge.&lt;/p&gt;

&lt;p&gt;With a &lt;strong&gt;no-fast-forward&lt;/strong&gt; merge, Git creates a new merging commit on the active branch. The commit's parent commits point to both the active branch and the branch that we want to merge!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#merge-conflicts"&gt;
  &lt;/a&gt;
  Merge Conflicts
&lt;/h3&gt;

&lt;p&gt;Although &lt;em&gt;Git&lt;/em&gt; is good at deciding how to merge branches and add changes to files, it cannot always make this decision all by itself. This can happen when the two branches we're trying to merge have changes on the same line in the same file, or if one branch deleted a file that another branch modified, and so on.&lt;/p&gt;

&lt;p&gt;In that case, &lt;em&gt;Git&lt;/em&gt; will ask you to help decide which of the two options we want to keep! Let's say that on both branches, we edited the nineth line of &lt;em&gt;file.txt&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If we want to merge &lt;em&gt;dev&lt;/em&gt; into &lt;em&gt;master&lt;/em&gt;, this will end up in a merge conflict: which is the correct line? Git can't knows this.&lt;/p&gt;

&lt;p&gt;When trying to merge the branches, &lt;em&gt;Git&lt;/em&gt; will show you where the conflict happens. We can manually remove the changes we don't want to keep, save the changes, add the changed file again, and commit the changes.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>git</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Github 101</title>
      <author>rkganeshan</author>
      <pubDate>Sat, 28 Aug 2021 10:13:17 +0000</pubDate>
      <link>https://dev.to/rkganeshan/github-101-hda</link>
      <guid>https://dev.to/rkganeshan/github-101-hda</guid>
      <description>&lt;p&gt;Hey, if you are absolute beginner or just started to code recently, and have seen your peers showcasing their projects and works in platforms like GitHub, then you are at the right spot!&lt;/p&gt;

&lt;p&gt;I'll let you know some quick easy peasy tools online where in you can code and "PUSH" your code to github by just a click.&lt;br&gt;
Also, I will let you know how to push your entire codebase from your system to GitHub.&lt;/p&gt;

&lt;p&gt;(Now here I am assuming that you have created an account on GitHub, if not - do it first, it's simple , create an account directly from your Google Account.)&lt;/p&gt;

&lt;p&gt;01 ) If you are quite new to web dev and just trying your hands on experimenting a few stuffs here and there, then try using platforms such as CodeSandbox and Repl.&lt;br&gt;
All you need to is , go to the github icon, connect your sandbox to your github by providing your credentials and after authorization(this is just a one time step) you just need to type out your repository name, a few words about your project and hit the Create button. Similar steps for Repl too. Isn't that easy?&lt;br&gt;
Now you are all set to show case your project.&lt;br&gt;
Bonus here is: You can copy the URL from the output sample browser in your sandbox, go to your Github repo, and in the about section,paste this link under the wesite input field.&lt;br&gt;
So, now your work is all set, pushed into github and your peers can also directly view your project up and running from the URL that you had provided from the Sandbox!&lt;/p&gt;

&lt;p&gt;02) If you want to push your project from your System to Github, download GitBash terminal, it helps you to do this in no time.&lt;br&gt;
Now follow the steps:&lt;br&gt;
Step 0: Open the GitBash terminal in the directory wherein your desired project folder(s) exists.&lt;br&gt;
Now type the following commands.&lt;br&gt;
Step 01:git init&lt;br&gt;
Step 02:git add   &lt;br&gt;
Step 03:git commit -m "Your message about the commit"&lt;br&gt;
(Now go to GitHub, under repositories create a new Repo by hitting the New button and provide the name of your repository and give some description about it, and you may also set you repo to private or public)&lt;br&gt;
Step 04:git remote add origin &lt;a href="https://github.com/yourUsername/yourRepository.git"&gt;https://github.com/yourUsername/yourRepository.git&lt;/a&gt;&lt;br&gt;
Step 05:git push -u origin master&lt;br&gt;
Step 06:git push origin master&lt;br&gt;
That's it, now you can check your repo(give a refresh maybe), and in the master branch you would be able to see the changes.&lt;br&gt;
Similar to 01) if you want to host it live, we'll that's for some other day , for sure!&lt;/p&gt;

</description>
      <category>github</category>
      <category>beginners</category>
      <category>opensource</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Terraform Modules: Atomic Design</title>
      <author>Matheus Cunha</author>
      <pubDate>Sat, 28 Aug 2021 10:10:48 +0000</pubDate>
      <link>https://dev.to/macunha/terraform-modules-atomic-design-3i7m</link>
      <guid>https://dev.to/macunha/terraform-modules-atomic-design-3i7m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Following &lt;a href="https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/"&gt;The Pragmatic Programmer&lt;/a&gt; mantra, I do my best to ...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Learn at least one new language every year.&lt;/strong&gt; Different languages solve the same problems in different ways. By learning several different approaches, you can help broaden your thinking and avoid getting stuck in a rut.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not necessarily to show it off or to be capable of talking about random technologies, but to expand and train my problem-solving skills, to get new perspectives when approaching a challenge.&lt;/p&gt;

&lt;p&gt;We might not notice it but when we learn (or have learned) to code we aren't just learning to type some characters that a compiler/interpreter can understand, it is a new way of thinking, a new way of breaking down solutions (into sequential steps).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It doesn't matter whether you ever use any of these technologies on a project, or even whether you put them on your resume. The process of learning will expand your thinking, opening you to new possibilities and new ways of doing things.&lt;br&gt;
The cross-pollination of ideas is important;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As someone who works intensively with infrastructure components (servers, databases, Kubernetes, CI/CD, etc) I aimed for something completely different this year. Something that stands on &lt;em&gt;a whole different spectrum&lt;/em&gt; of the system, this year I decided to learn &lt;a href="https://flutter.dev/"&gt;Flutter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In-a-nutshell, Flutter is a better React Native. A framework that enables implementation of GUI applications for multiple platforms with a single code base.&lt;/p&gt;

&lt;p&gt;Then it reminded me a discussion I had with a friend in the past about React components and the &lt;a href="https://bradfrost.com/blog/post/atomic-web-design/"&gt;Atomic Design&lt;/a&gt; methodology, which helps to structure web components into modules.&lt;/p&gt;

&lt;p&gt;In the Atomic Design methodology, the granularity of modules is distinguished by using chemistry inspired names: atoms, molecules and organisms.&lt;/p&gt;

&lt;p&gt;Then the connection of the ideas from&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pragmatic Programmer's cross-pollination to&lt;/li&gt;
&lt;li&gt;Atomic Design (on Flutter components) to&lt;/li&gt;
&lt;li&gt;Terraform modules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;came almost like a thunderbolt, striking me with this insight when I was working with a huge legacy Terraform code base refactoring with lots of code duplication (read: copy+paste, "we fix it later", then the author quits the company and&lt;br&gt;
never fix anything).&lt;/p&gt;

&lt;p&gt;Although initially proposed as a Web UI methodology, Infrastructure as Code tools such as Terraform that makes heavy usage of modules can benefit from Atomic Design to improve its code reusability and massively reduce duplication.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#details"&gt;
  &lt;/a&gt;
  Details
&lt;/h2&gt;

&lt;p&gt;The Atomic Design methodology proposes five distinct levels, listed from the finest to the thickest:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Atom;&lt;/li&gt;
&lt;li&gt; Molecules;&lt;/li&gt;
&lt;li&gt; Organisms;&lt;/li&gt;
&lt;li&gt; Templates;&lt;/li&gt;
&lt;li&gt; Pages.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, to extract the gist, we'll only be focusing on Atoms, Molecules, and Organisms (from 1. to 3.). Templates and Pages are too domain-specific focused on Web UI development.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#atoms"&gt;
  &lt;/a&gt;
  Atoms
&lt;/h3&gt;

&lt;p&gt;Atoms represent the finest grain in terms of granularity in the design. When referring specifically to its implementation in Terraform a &lt;code&gt;resource&lt;/code&gt; and a small scoped single-purpose &lt;code&gt;module&lt;/code&gt; could be used interchangeably.&lt;/p&gt;

&lt;p&gt;Sometimes the idea of turning a simple resource into a module makes sense to ease parameterization and reusability, especially when it is necessary to parse inputs. Although, due to its extreme limited scope it might not look attractive&lt;br&gt;
to convert the &lt;code&gt;resource&lt;/code&gt; into a &lt;code&gt;module&lt;/code&gt; at first sight, on the long run it pays off to do so in order to achieve scalability and reproducibility.&lt;/p&gt;

&lt;p&gt;e.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="s2"&gt;"aws_route53_zone"&lt;/span&gt; &lt;span class="s2"&gt;"default"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;zone_id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zone_id&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zone_name&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_route53_record"&lt;/span&gt; &lt;span class="s2"&gt;"default"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;zone_id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aws_route53_zone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zone_id&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;

  &lt;span class="nx"&gt;ttl&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ttl&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;record_type&lt;/span&gt;

  &lt;span class="nx"&gt;records&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;records&lt;/span&gt;

  &lt;span class="nx"&gt;dynamic&lt;/span&gt; &lt;span class="s2"&gt;"alias"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;for_each&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
      &lt;span class="nx"&gt;zone_id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;try&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zone_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aws_route53_zone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zone_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;evaluate_target_health&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"evaluate_target_health"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, even though &lt;code&gt;aws_route53_record&lt;/code&gt; is a simple resource that might feel too narrow in scope to write a module, the implementation of the module allows to bundle the AWS Route53 Zone data source together, which helps to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; provide a simpler contract by allowing the usage of &lt;code&gt;zone_name&lt;/code&gt; alone;&lt;/li&gt;
&lt;li&gt; validate the &lt;code&gt;zone_name&lt;/code&gt; input, ensuring that a given &lt;code&gt;zone_name&lt;/code&gt; corresponds to an actual &lt;strong&gt;existing and valid&lt;/strong&gt; AWS resource;&lt;/li&gt;
&lt;li&gt; same goes to &lt;code&gt;zone_id&lt;/code&gt;, which will feel (and oftentimes, be) redundant, &lt;em&gt;when&lt;/em&gt; specified as an input Terraform will read the data from AWS API ensuring consistency.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;e.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s2"&gt;"awesome_dns_fqdn"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"path/to/modules/atoms/aws_route53_record"&lt;/span&gt;
  &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~&amp;gt; 1.0"&lt;/span&gt;

  &lt;span class="nx"&gt;name&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"record.example.com"&lt;/span&gt;
  &lt;span class="nx"&gt;zone_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"example.com."&lt;/span&gt;

  &lt;span class="nx"&gt;record_type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"A"&lt;/span&gt;
  &lt;span class="nx"&gt;records&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"1.2.3.4"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hence, resources and modules are sometimes interchangeable as they deliver the same outcome for the finest resources' granularity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#molecules"&gt;
  &lt;/a&gt;
  Molecules
&lt;/h3&gt;

&lt;p&gt;When groups of atoms are bounded together, they create a molecule which is the smallest fundamental unit of a compound.&lt;/p&gt;

&lt;p&gt;Contrary to the original Atomic Design for Web UI, in Terraform, Atoms are useful on their own. However, the usage of atoms comes with a high price on scalability: code duplication. Actually, duplication is an understatement, it is more like code exponentiation (more on this later).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#implementation-example"&gt;
  &lt;/a&gt;
  Implementation example
&lt;/h4&gt;

&lt;p&gt;Suppose we are creating a public facing API Gateway that needs a DNS record.&lt;/p&gt;

&lt;p&gt;Let's compose it with the previous example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="s2"&gt;"aws_route53_zone"&lt;/span&gt; &lt;span class="s2"&gt;"default"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zone_name&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s2"&gt;"awesome_api_gateway_certificate"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"terraform-aws-modules/acm/aws"&lt;/span&gt;
  &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~&amp;gt; v3.0"&lt;/span&gt;

  &lt;span class="nx"&gt;domain_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain_name&lt;/span&gt;
  &lt;span class="nx"&gt;zone_id&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aws_route53_zone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zone_id&lt;/span&gt;

  &lt;span class="nx"&gt;wait_for_validation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s2"&gt;"awesome_api_gateway"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"terraform-aws-modules/apigateway-v2/aws"&lt;/span&gt;
  &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~&amp;gt; 1.0"&lt;/span&gt;

  &lt;span class="nx"&gt;name&lt;/span&gt;          &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api_gateway_name&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt;   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api_gateway_description&lt;/span&gt;
  &lt;span class="nx"&gt;protocol_type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"HTTP"&lt;/span&gt;

  &lt;span class="nx"&gt;cors_configuration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;allow_headers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;"content-type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"x-amz-date"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"authorization"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"x-api-key"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"x-amz-security-token"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"x-amz-user-agent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;allow_methods&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;allow_origins&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;# Custom domain&lt;/span&gt;
  &lt;span class="nx"&gt;domain_name&lt;/span&gt;                 &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain_name&lt;/span&gt;
  &lt;span class="nx"&gt;domain_name_certificate_arn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;awesome_api_gateway_certificate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;acm_certificate_arn&lt;/span&gt;

  &lt;span class="c1"&gt;# Routes and integrations&lt;/span&gt;
  &lt;span class="nx"&gt;integrations&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api_gateway_integrations&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s2"&gt;"awesome_dns_fqdn"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"path/to/modules/atoms/aws_route53_record"&lt;/span&gt;
  &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~&amp;gt; 1.0"&lt;/span&gt;

  &lt;span class="nx"&gt;name&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain_name&lt;/span&gt;
  &lt;span class="nx"&gt;zone_id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aws_route53_zone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zone_id&lt;/span&gt;

  &lt;span class="nx"&gt;record_type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"CNAME"&lt;/span&gt;
  &lt;span class="nx"&gt;alias&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;awesome_api_gateway&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apigatewayv2_domain_name_configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;target_domain_name&lt;/span&gt;
    &lt;span class="nx"&gt;zone_id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;awesome_api_gateway&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apigatewayv2_domain_name_configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;hosted_zone_id&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This helps illustrating an example in which the &lt;code&gt;aws_route53_record&lt;/code&gt; atom could be easily replaced with its equivalent resource and it would still provide the &lt;strong&gt;same&lt;/strong&gt; outcome.&lt;/p&gt;

&lt;p&gt;Commonly it is possible to use &lt;code&gt;module&lt;/code&gt; and &lt;code&gt;resource&lt;/code&gt; interchangeably as Atoms, the decision of whether or not to implement a &lt;code&gt;module&lt;/code&gt; is ultimately defined by the need of parsing and/or validating the inputs (variables).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#usage-example"&gt;
  &lt;/a&gt;
  Usage example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s2"&gt;"awesome_lambda"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"path/to/modules/molecules/aws_lambda_function"&lt;/span&gt;
  &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~&amp;gt; 1.0"&lt;/span&gt;

  &lt;span class="nx"&gt;function_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"awesome"&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt;   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"An Awesome lambda function for the Awesome API Gateway"&lt;/span&gt;
  &lt;span class="nx"&gt;handler&lt;/span&gt;       &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"index.lambda_handler"&lt;/span&gt;
  &lt;span class="nx"&gt;runtime&lt;/span&gt;       &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"python3.8"&lt;/span&gt;

  &lt;span class="c1"&gt;# Incomplete implementation, don't use this on production&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s2"&gt;"another_awesome_lambda"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"path/to/modules/molecules/aws_lambda_function"&lt;/span&gt;
  &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~&amp;gt; 1.0"&lt;/span&gt;

  &lt;span class="nx"&gt;function_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"awesome"&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt;   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"An Awesome lambda function for the Awesome API Gateway"&lt;/span&gt;
  &lt;span class="nx"&gt;handler&lt;/span&gt;       &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"index.lambda_handler"&lt;/span&gt;
  &lt;span class="nx"&gt;runtime&lt;/span&gt;       &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"python3.8"&lt;/span&gt;

  &lt;span class="c1"&gt;# Incomplete implementation, don't use this on production&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s2"&gt;"awesome_api_gateway"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"path/to/modules/molecules/aws_api_gateway"&lt;/span&gt;
  &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~&amp;gt; 1.0"&lt;/span&gt;

  &lt;span class="nx"&gt;domain_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"record.example.com"&lt;/span&gt;
  &lt;span class="nx"&gt;zone_name&lt;/span&gt;   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"example.com."&lt;/span&gt;

  &lt;span class="nx"&gt;api_gateway_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"awesome-api-gateway"&lt;/span&gt;
  &lt;span class="nx"&gt;api_gateway_description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"An Awesome API Gateway"&lt;/span&gt;

  &lt;span class="nx"&gt;api_gateway_integrations&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"POST /"&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;lambda_arn&lt;/span&gt;             &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;awesome_lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;function_arn&lt;/span&gt;
      &lt;span class="nx"&gt;payload_format_version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"2.0"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;default"&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;lambda_arn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;another_awesome_lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;function_arn&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you probably have already realized, when the level of abstraction goes up (e.g. from atom to molecule) the module implementation is in itself a good implementation example (i.e. as in &lt;a href="https://github.com/terraform-aws-modules/terraform-aws-lambda/blob/master/main.tf"&gt;community modules examples&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;They help to self-document the usage and implementation of a given module and through generic implementations it allows us to have multiple molecules implementing multiple distinct use-cases. e.g.:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Public API Gateway with DNS record + TLS certificate;&lt;/li&gt;
&lt;li&gt; Public API Gateway v1, no DNS record;&lt;/li&gt;
&lt;li&gt; Private API Gateway.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Why would we chose to implement multiple times the Atom modules in order to create multiple distinct use-cases? We are getting closer to the &lt;em&gt;code exponentiation&lt;/em&gt; problem and solution proposal. Can you feel it?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#organisms"&gt;
  &lt;/a&gt;
  Organisms
&lt;/h3&gt;

&lt;p&gt;Going further, the &lt;a href="#usage-example"&gt;example of composition for molecules&lt;/a&gt; can have its hard-coded values turned into variables in order to compose an Organism, which can facilitate the implementation of the same definition across different environments. Thus, achieving reproducibility as well as the &lt;a href="https://12factor.net/dev-prod-parity"&gt;Factor X.&lt;/a&gt; of the Twelve Factor App.&lt;/p&gt;

&lt;p&gt;However, it is important to note that the level of abstraction between Organisms and Molecules can be easily confused or misunderstood. Generally speaking, as a&lt;br&gt;
rule of thumb an Organism is the composition of Molecules that allow parameterization for business or domain-specific logic (e.g. the actual &lt;code&gt;awesome_api&lt;/code&gt; configuration).&lt;br&gt;
Therefore, in comparison with the previous, Organisms (usually) have a lower level of generalization since they are business-specialized modules.&lt;/p&gt;

&lt;p&gt;Iterating over our implementation example, the Organism would implement the &lt;code&gt;awesome_api&lt;/code&gt;, creating the following resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS Lambda function;&lt;/li&gt;
&lt;li&gt;AWS API Gateway;&lt;/li&gt;
&lt;li&gt;TLS Certificate on AWS ACM;&lt;/li&gt;
&lt;li&gt;DNS record on AWS Route53.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By implementing the previous examples as organisms we:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; reduce the amount of boilerplate code;&lt;/li&gt;
&lt;li&gt; foster reusability of modules;&lt;/li&gt;
&lt;li&gt; provide a simple interface for non-operators to manage TF code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When you sum it all up, you will notice that it is &lt;strong&gt;all about autonomy&lt;/strong&gt; and "DevOps" through encouragement of self-service Ops. One wouldn't need to know a lot about Terraform to grab a module and pass some parameters to it, followed by&lt;br&gt;
a code review process Operators and Software Developers can manage the Infrastructure in harmony, &lt;strong&gt;together&lt;/strong&gt;. (:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-exponentiation-what"&gt;
  &lt;/a&gt;
  Code Exponentiation? What?
&lt;/h3&gt;

&lt;p&gt;Read that as a dramatization of the &lt;a href="https://en.wikipedia.org/wiki/Duplicate%5Fcode"&gt;"code duplication"&lt;/a&gt; term.&lt;/p&gt;

&lt;p&gt;When it comes to Infrastructure as Code, there is no easy way around the jungle of resources that grows over time. Fast pacing tech companies are "moving fast and breaking things", oftentimes the Operators are worried about a massive&lt;br&gt;
amount of challenges at once: keep the servers up and running, with a consistent response time, low error rate, and all that &lt;a href="https://sre.google/sre-book/table-of-contents/"&gt;playbook from Google's SRE wisdom&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All things considered, a good Infrastructure as Code design is generally a first-world problem. However, as the time passes it evolves into a real issue that slows down the implementation of resources as code. Either that or there&lt;br&gt;
will be a &lt;strong&gt;huge ton&lt;/strong&gt; of copy+paste to keep up with the pace, followed by a routine of find+replace when changes are applied, &lt;em&gt;then&lt;/em&gt; harder to track pull requests and slower code reviews.&lt;/p&gt;

&lt;p&gt;Lets take our &lt;code&gt;awesome_api&lt;/code&gt; example and scale it up to multiple environments followed by a second &lt;code&gt;awesome_api&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── development
│   ├── an-awesome-api
│   │   └── main.tf
│   └── another-awesome-api
│       └── main.tf
├── staging
│   ├── an-awesome-api
│   │   └── main.tf
│   └── another-awesome-api
│       └── main.tf
└── production
    ├── an-awesome-api
    │   └── main.tf
    └── another-awesome-api
        └── main.tf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to replicate the configuration and ensure consistency, the following is way simpler to implement (and review) than copy+paste huge chunks of Terraform definitions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s2"&gt;"awesome_api"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"path/to/modules/organisms/aws_lambda_with_api_gateway"&lt;/span&gt;
  &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~&amp;gt; 1.0"&lt;/span&gt;

  &lt;span class="nx"&gt;domain_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"record.example.com"&lt;/span&gt;
  &lt;span class="nx"&gt;zone_name&lt;/span&gt;   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"example.com."&lt;/span&gt;

  &lt;span class="nx"&gt;lambda_functions&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;# Index 0 -- An Awesome Lambda Function, used for POST&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"an-awesome"&lt;/span&gt;
      &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"An Awesome lambda function for the Awesome API Gateway"&lt;/span&gt;
      &lt;span class="nx"&gt;handler&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"an_awesome.lambda_handler"&lt;/span&gt;
      &lt;span class="nx"&gt;runtime&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"python3.8"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;# Index 1 -- Another Awesome Lambda Function, used as $default&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"another-awesome"&lt;/span&gt;
      &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Another Awesome lambda function for the Awesome API Gateway"&lt;/span&gt;
      &lt;span class="nx"&gt;handler&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"another_awesome.lambda_handler"&lt;/span&gt;
      &lt;span class="nx"&gt;runtime&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"python3.8"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nx"&gt;api_gateway_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"awesome-api-gateway"&lt;/span&gt;
  &lt;span class="nx"&gt;api_gateway_description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"An Awesome API Gateway"&lt;/span&gt;

  &lt;span class="nx"&gt;api_gateway_integrations&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"POST /"&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;lambda_function_index&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
      &lt;span class="nx"&gt;payload_format_version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"2.0"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;default"&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;lambda_function_index&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;At the end of the day we get an ugly Terraform state containing many&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.something.module.something_else.module.yet_another_thing...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the productivity boost gained by merging modules based on context is a worth investment. Especially for huge Terraform repositories with multiple teams collaborating and managing a lot of resources.&lt;/p&gt;

&lt;p&gt;Cross-team collaboration is fostered by applying the Atomic Design methodology for Terraform modules, code reusability becomes an important factor over copy+paste and the repository gravitates towards the &lt;a href="https://en.wikipedia.org/wiki/Don%27t%5Frepeat%5Fyourself"&gt;DRY principle&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#same-post-different-places"&gt;
  &lt;/a&gt;
  Same post, different places
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.reddit.com/r/Terraform/comments/pd708z/terraform_modules_atomic_design/"&gt;Reddit r/Terraform post: Terraform Modules: Atomic Design&lt;/a&gt;&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>devops</category>
      <category>infrastructureascode</category>
      <category>design</category>
    </item>
    <item>
      <title>Traits are not inherited</title>
      <author>Doeke Norg</author>
      <pubDate>Sat, 28 Aug 2021 09:56:41 +0000</pubDate>
      <link>https://dev.to/doekenorg/traits-are-not-inherited-32h</link>
      <guid>https://dev.to/doekenorg/traits-are-not-inherited-32h</guid>
      <description>&lt;p&gt;I recently saw this tweet by &lt;a href="https://jessarcher.com"&gt;Jess Archer&lt;/a&gt;, which showed some &lt;code&gt;Trait&lt;/code&gt; behavior that might not make sense at first glance. I thought it could be fun to explain why this happens.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8vBu3bAk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9hEvnpUYAQUdJe.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--QrHfL-wu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1149493363470585858/2aa3eHfK_normal.png" alt="Jess Archer profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jess Archer
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jessarchercodes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      This behaviour surprised me!&lt;br&gt;&lt;br&gt;(Also love saying "enableable") 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      00:53 AM - 24 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1429970207871623176" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1429970207871623176" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1429970207871623176" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;While saying &lt;code&gt;Enableable&lt;/code&gt; is cool and all; how in the world is it possible that the &lt;code&gt;TimeCircuits::$enabled&lt;/code&gt; variable is still &lt;code&gt;false&lt;/code&gt;, when it was clearly updated on the &lt;code&gt;Enableable&lt;/code&gt; trait? The answer is: a trait is not inherited.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#single-inheritance-vs-composition"&gt;
  &lt;/a&gt;
  Single Inheritance vs. composition
&lt;/h2&gt;

&lt;p&gt;PHP is a so called &lt;a href="https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)#Types"&gt;Single Inheritance language&lt;/a&gt; meaning any &lt;code&gt;class&lt;/code&gt; can inherit context from only &lt;strong&gt;one&lt;/strong&gt; parent. In most cases this works out fine, but sometimes you have code in a class you want to re-use. This is impossible if the class you want to use this on already &lt;code&gt;extends&lt;/code&gt; another class. This is why PHP introduced &lt;em&gt;traits&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A trait is a kind of mini-class that can be used inside multiple classes. It can have methods, parameters, static methods and static variables, just like a class. Even the visibility like &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt; works the same. But instead inheriting from these traits by using &lt;code&gt;extends&lt;/code&gt;, you have to &lt;code&gt;use&lt;/code&gt; the trait inside a class. You actually &lt;strong&gt;have&lt;/strong&gt; to &lt;code&gt;use&lt;/code&gt; a trait inside a class, because you cannot instantiate it on its own. A class can also &lt;code&gt;use&lt;/code&gt; multiple traits. This way you compose a new class made up of small re-usable pieces of code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#traits-are-copypasted"&gt;
  &lt;/a&gt;
  Traits are copy-pasted
&lt;/h2&gt;

&lt;p&gt;While a trait looks like any other class, this &lt;code&gt;use&lt;/code&gt;-ing instead of extending makes a big difference. When you &lt;code&gt;use&lt;/code&gt; a trait, the &lt;em&gt;current&lt;/em&gt; state of the trait is &lt;em&gt;copied&lt;/em&gt; to the class. And this copying is the reason why &lt;code&gt;TimeCircuits&lt;/code&gt; is unaffected by the change on the &lt;code&gt;Enableable&lt;/code&gt; trait. It is not inheriting this variable; it has it's &lt;em&gt;own&lt;/em&gt; copy of it. And because the parameter was set to &lt;code&gt;true&lt;/code&gt; before the &lt;code&gt;FluxCapacitor&lt;/code&gt; class was created, this class has a copy of &lt;em&gt;that&lt;/em&gt; state. Resetting &lt;code&gt;Enableable::$enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; at the end will therefore still have no impact on either &lt;code&gt;TimeCircuits&lt;/code&gt; or &lt;code&gt;FluxCapacitor&lt;/code&gt;. They are completely separate parameters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#classes-inherit"&gt;
  &lt;/a&gt;
  Classes inherit
&lt;/h2&gt;

&lt;p&gt;So let's see how a class would react to a similar situation. We'll create a &lt;code&gt;Base&lt;/code&gt; class that has a &lt;code&gt;static $enabled&lt;/code&gt; parameter, and an &lt;code&gt;Extended&lt;/code&gt; class that &lt;code&gt;extends&lt;/code&gt; (and therefore inherits from) &lt;code&gt;Base&lt;/code&gt;. Then check out what happens when we change the value of this variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Extended&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;$enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;$enabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Extended&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;$enabled&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// (bool) true, (bool) true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here you see the inheritance in action. When we update the parameter on the &lt;code&gt;Base&lt;/code&gt; class, it's extending classes are affected by this update, because they are actually referencing the same parameter, and &lt;em&gt;not&lt;/em&gt; a copy. And to prove that they are referencing the same parameter you can change &lt;code&gt;Extended::$enabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; &lt;em&gt;instead&lt;/em&gt; of &lt;code&gt;Base::$enabled&lt;/code&gt; and the result will still be the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;I'm not sure if Jess wanted a way to enable all classes that used this trait at the same time. If that is the case, I see 2 alternatives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Let those classes extend from an intermediate class that has this parameter: for example a &lt;code&gt;Model&lt;/code&gt; could extend a &lt;code&gt;EnableableModel&lt;/code&gt; that has this parameter. In that case you could update &lt;code&gt;EnableableModel::$enabled&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Register an interface on all the classes that use this trait, and put them in a container. Then retrieve all classes from the container that have this interface, and update every one separately.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;You might also be interested in my blog post on &lt;a href="https://doeken.org/blog/testing-traits-in-phpunit"&gt;Testing Traits in PHPUnit&lt;/a&gt;. In this post I'll show you some handy tips and tricks for testing traits.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>php</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How different is CommonJs require from ES6 import?</title>
      <author>Mike Mwanje</author>
      <pubDate>Sat, 28 Aug 2021 09:28:36 +0000</pubDate>
      <link>https://dev.to/mwanjemike/how-different-is-commonjs-require-from-es6-import-hh1</link>
      <guid>https://dev.to/mwanjemike/how-different-is-commonjs-require-from-es6-import-hh1</guid>
      <description>&lt;p&gt;In JavaScript, you can use either ECMAScript 6(ES6) modules or CommonJs modules in your project and there are a few differences between these that do affect how your program modules are loaded. In this article, I explore how each works and how it may affect your program execution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commonjs-modules"&gt;
  &lt;/a&gt;
  CommonJs modules.
&lt;/h3&gt;

&lt;p&gt;CommonJs is the original and default module system of Node.js which uses require and module.exports. Below is an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Importing modules&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileDelete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./fileDeleter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./fileNamer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;writeFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Exporting writeFile module&lt;/span&gt;
&lt;span class="nx"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With require, you can’t selectively load only the modules you need. This means even the fileDelete module from the example above will be imported even if it is not needed or used anywhere. Additionally, importing of the modules is synchronous which means that fileName module can’t be imported before fs and fileDelete modules are imported, and a failure to import fileDelete will cause run-time errors even if it is not used anywhere in our program. CommonJS modules are the choice for the node.js server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ecmascript-modules"&gt;
  &lt;/a&gt;
  ECMAScript modules
&lt;/h3&gt;

&lt;p&gt;ECMAScript modules are relatively newer and use import and export. Below is the transformation of our CommonJs example from above to ESM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Importing modules&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fileDelete&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./fileDeleter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./fileNamer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;writeFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Exporting writeFile module&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With import, you load only the modules you need. For example, the fileDelete module from the above will not be imported since it is not used anywhere. Additionally, the importing of the modules is asynchronous which means that both fs and fileName are imported at the same time. You generally want to use ESM for your new projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;…how about .cjs and .mjs?&lt;/strong&gt;&lt;br&gt;
.cjs is a file extension for CommonJS modules while .mjs is a file extension for ECMAScript module. Node.js by default treats .js files as CommonJS modules. You can change this by adding "type": "module"to your package.json file so you can use ECMAScript modules (in your .mjs files) within a Node.js environment. This is what Google Chrome &lt;a href="https://v8.dev/"&gt;V8&lt;/a&gt; recommends.&lt;/p&gt;

&lt;p&gt;I hope this was helpful to you and for further reading, do checkout &lt;a href="https://v8.dev/features/modules"&gt;JavaScript modules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy coding!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>es6modules</category>
      <category>commonjs</category>
    </item>
    <item>
      <title>C# For Beginners - Lesson 10: Methods</title>
      <author>Kristina (Coding Mama)</author>
      <pubDate>Sat, 28 Aug 2021 09:18:15 +0000</pubDate>
      <link>https://dev.to/coding_mama/c-for-beginners-lesson-10-methods-3e01</link>
      <guid>https://dev.to/coding_mama/c-for-beginners-lesson-10-methods-3e01</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;At the end of this lesson, you should be able to answer the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is a method? What is it used for?&lt;/li&gt;
&lt;li&gt;How do I declare a method? How do I call it?&lt;/li&gt;
&lt;li&gt;What is a method parameter?&lt;/li&gt;
&lt;li&gt;What is a return statement?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;p&gt;In our final lesson, we will learn about methods, C#'s equivalent to functions or subroutines in other programming languages.&lt;/p&gt;

&lt;p&gt;As our programs get bigger and more complex, we can organise our code into more manageable chunks by grouping related statements together. A &lt;em&gt;method&lt;/em&gt; is a group of statements that can be called to perform a single task.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-declaration-and-invocation"&gt;
  &lt;/a&gt;
  Method declaration and invocation
&lt;/h3&gt;

&lt;p&gt;Let's go back to our very first program, Hello World. Instead of just printing the message, perhaps we want to make it fancier by adding an &lt;a href="https://www.asciiart.eu/art-and-design/patterns"&gt;ASCII art border&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below we've used a &lt;a href="https://dev.to/coding_mama/c-for-beginners-lesson-8-loops-3mf0"&gt;for loop&lt;/a&gt; to make a string that repeats &lt;code&gt;+-&lt;/code&gt; 20 times. We then use this string as our border.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates a border like this: +-+-+-+-+-+-&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"+-"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Prints the message with the border&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Suppose we wanted to display this message at various times in our program. To do that, we would have to keep repeating these lines. A better way would be to group them first into a method called &lt;code&gt;ShowMessage&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...steps go here!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To declare a method in C#, we specify the method's &lt;em&gt;return type&lt;/em&gt;, followed by the name of the method, and round brackets. The curly brackets contains the method's body - the statements that we want to run when the method is called. We'll explain return type later in this lesson.&lt;/p&gt;

&lt;p&gt;Once the method is declared, we can call &lt;code&gt;ShowMessage&lt;/code&gt; every time we want to display the message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Displays the message twice&lt;/span&gt;
&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To call or &lt;em&gt;invoke&lt;/em&gt; a method in C#, we use the name of the method followed by round brackets. A method call by itself is a valid statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kspIB2Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rsi6mnpg3wb769bpvr5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kspIB2Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rsi6mnpg3wb769bpvr5.png" alt="Methods calls are valid statements"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-parameters-and-arguments"&gt;
  &lt;/a&gt;
  Method parameters and arguments
&lt;/h3&gt;

&lt;p&gt;Suppose we wanted to display a different message, but we still want a fancy border. We can't use &lt;code&gt;ShowMessage&lt;/code&gt; because it would say "Hello, World!". But the steps are pretty much the same, so can we reuse it somehow?&lt;/p&gt;

&lt;p&gt;Instead of duplicating then varying it slightly, we could make our method more generic by adding &lt;em&gt;parameters&lt;/em&gt;. A method parameter is a variable that can be used in the method to alter its behaviour. &lt;/p&gt;

&lt;p&gt;In our method declaration, we put parameters in the round brackets. First, we specify the type of the parameter, then the name of the parameter. It's similar to how we declare a variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Creates a border like this: +-+-+-+-+-+-&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"+-"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Prints the message with the border&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// The parameter is used here!&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we call a method, we can supply values (also called &lt;em&gt;arguments&lt;/em&gt;) inside the round brackets. If a parameter is defined for that method, that argument gets passed in as the value of the parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Display a different message&lt;/span&gt;
&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Greetings, human!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Display another message&lt;/span&gt;
&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"こんにちは、世界！"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JPa8XHTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zn57pn77dtzwei7om0o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JPa8XHTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zn57pn77dtzwei7om0o.png" alt="Passing arguments to methods"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We can have more than one parameter in a method. For example, we could change the border by supplying the pattern to repeat. Below, we have added a &lt;code&gt;string&lt;/code&gt; parameter called &lt;code&gt;borderPattern&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;borderPattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Creates a border&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;borderPattern&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// borderPattern is used here!&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Prints the message with the border&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// message is used here!&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Call the ShowMessage method&lt;/span&gt;
&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hey, you. You're finally awake."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"-&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we call &lt;code&gt;ShowMessage&lt;/code&gt; with multiple arguments, the order matters. For example, if we do this, can you guess what will happen?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Hey, you. You're finally awake."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0excHw4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tla085y1bkmqis7ac5d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0excHw4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tla085y1bkmqis7ac5d.png" alt="Not the output we wanted!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The order of the arguments need to match the parameter order!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#named-arguments"&gt;
  &lt;/a&gt;
  Named arguments
&lt;/h3&gt;

&lt;p&gt;If a method accepts many parameters, it can be hard to keep track of the order. Fortunately, C# allows us to name the arguments as we pass them in the method. Replace Line 17 of the previous program with the line below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;borderPattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"-&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hey, you. You're finally awake."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though we supplied the border pattern first, C# knows to assign this value to the &lt;code&gt;borderPattern&lt;/code&gt; parameter.  The same goes with the &lt;code&gt;message&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--te3ujgz_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yy36idr99emrh4zd3o2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--te3ujgz_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yy36idr99emrh4zd3o2.png" alt="Using named parameters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-parameters"&gt;
  &lt;/a&gt;
  Optional parameters
&lt;/h3&gt;

&lt;p&gt;We've made our method more flexible. However, when we invoke the &lt;code&gt;ShowMessage&lt;/code&gt; method, we can no longer just supply a message - we will need to include the border pattern as well.&lt;/p&gt;

&lt;p&gt;If we don't supply a border pattern, we want the method to default to our original pattern. To do this, in our parameter declaration we need to assign a value to the parameter. Add &lt;code&gt;= "+-"&lt;/code&gt; next to the &lt;code&gt;borderPattern&lt;/code&gt; parameter in the declaration, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;borderPattern&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"+-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Call the ShowMessage method&lt;/span&gt;
&lt;span class="nf"&gt;ShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hey, you. You're finally awake."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can call &lt;code&gt;ShowMessage&lt;/code&gt; again with just the message!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-return-type"&gt;
  &lt;/a&gt;
  Method return type
&lt;/h3&gt;

&lt;p&gt;Aside from performing a task, methods can also return a value after the task has been completed. Our method &lt;code&gt;ShowMessage&lt;/code&gt; displays a message for us, but it doesn't really return a value we can use. That's why its return type is &lt;code&gt;void&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above is an example method that returns a value. Can you guess what the method does?&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Double&lt;/code&gt; method takes a number of type &lt;code&gt;int&lt;/code&gt; and returns the number multiplied by 2, effectively doubling it. The value that is returned is of type &lt;code&gt;int&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;We use the &lt;code&gt;return&lt;/code&gt; keyword to specify the value that is returned by the method. If the method return type is not &lt;code&gt;void&lt;/code&gt;, the &lt;code&gt;return&lt;/code&gt; statement is &lt;strong&gt;required&lt;/strong&gt; to be present in the method's body.&lt;/p&gt;

&lt;p&gt;We can add more statements before the &lt;code&gt;return&lt;/code&gt; statement if needed, and they will be executed before the method finishes and returns the expression &lt;code&gt;number * 2&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;When the method has either returned a value or reached the end of its body, program execution will go back to the statement that called the method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Calling the method Double"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"And we're back here!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0AA5TDHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvinkn1wpudny9oorihu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0AA5TDHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvinkn1wpudny9oorihu.png" alt="Returning a value from a method"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Methods with a return value can be used in expressions, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Prints 24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Questions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;True or False:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To declare a method, we specify the return type and method name, followed by square brackets.&lt;/li&gt;
&lt;li&gt;The order of the arguments passed in a method must match the order of the parameters.&lt;/li&gt;
&lt;li&gt;To make a parameter optional, we mark it with the keyword &lt;code&gt;optional&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;void&lt;/code&gt; method cannot be used in expressions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Console.WriteLine()&lt;/code&gt; is a method.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You are a human compiler. Can you find all the errors in this code?&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Adding {x} and {y}"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is the difference between a method parameter and a method argument?&lt;/p&gt;
&lt;/blockquote&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Challenges&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a &lt;code&gt;Multiply&lt;/code&gt; method similar to the &lt;code&gt;Double&lt;/code&gt; method in the lesson. Calling &lt;code&gt;Multiply(10,12)&lt;/code&gt; should return &lt;code&gt;120&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Convert the code in &lt;a href="https://dev.to/coding_mama/c-for-beginners-lesson-7-conditionals-2e07"&gt;Lesson 7&lt;/a&gt; into a method called &lt;code&gt;IsAllowedToDrive&lt;/code&gt;. The method should have two parameters, &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;hasLicence&lt;/code&gt; . The return type should be &lt;code&gt;bool&lt;/code&gt;. &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>3 Toast Libraries You Can Use in your React Projects</title>
      <author>Abdullah Furkan Özbek</author>
      <pubDate>Sat, 28 Aug 2021 08:58:58 +0000</pubDate>
      <link>https://dev.to/afozbek/3-toast-libraries-you-can-use-in-your-react-projects-2i42</link>
      <guid>https://dev.to/afozbek/3-toast-libraries-you-can-use-in-your-react-projects-2i42</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-toast"&gt;
  &lt;/a&gt;
  what is toast
&lt;/h2&gt;

&lt;p&gt;A toast is a non-modal dialog that appears and disappears in the span of a few seconds. ... Typically, toast messages display one or two-line non-critical messages that do not require user interaction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-reacttoastify"&gt;
  &lt;/a&gt;
  1. react-toastify
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/fkhadra/react-toastify"&gt;GitHub&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://fkhadra.github.io/react-toastify/introduction/"&gt;Website&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;react-toastify&lt;/strong&gt; one of the most useful toast libraries out there. It has tons of cool features like;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Swipe to close&lt;/li&gt;
&lt;li&gt;Display a &lt;strong&gt;React element&lt;/strong&gt; inside the toast&lt;/li&gt;
&lt;li&gt;Can remove a toast programmatically&lt;/li&gt;
&lt;li&gt;much more..&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-reacthottoast"&gt;
  &lt;/a&gt;
  2. react-hot-toast
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/timolins/react-hot-toast"&gt;Github&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://react-hot-toast.com/docs"&gt;Website&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;react-hot-toast is small, accessible and easily customizable toast library which has;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Promise API&lt;/li&gt;
&lt;li&gt;Headless Hooks&lt;/li&gt;
&lt;li&gt;Lighweight (&lt;em&gt;less than 5kb - including the styles&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-reacttoastnotifications"&gt;
  &lt;/a&gt;
  3. react-toast-notifications
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/jossmac/react-toast-notifications"&gt;GitHub&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jossmac.github.io/react-toast-notifications/"&gt;Website&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;react-toast-notifications is also cool library to get work with but unfortunately it is no longer maintained.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-links"&gt;
  &lt;/a&gt;
  4. Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/fkhadra/react-toastify-v8-is-live-4bal"&gt;React-toastify v8 is live&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blog.logrocket.com/top-react-toast-libraries-compared/"&gt;Top React toast libraries compared - LogRocket Blog&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>toast</category>
      <category>library</category>
      <category>tutorials</category>
    </item>
    <item>
      <title>4 Difficulties You Might Encounter When Using vue-i18n</title>
      <author>Ivan Demchuk</author>
      <pubDate>Sat, 28 Aug 2021 08:50:31 +0000</pubDate>
      <link>https://dev.to/demivan/4-difficulties-you-might-encounter-when-using-vue-i18n-4nhn</link>
      <guid>https://dev.to/demivan/4-difficulties-you-might-encounter-when-using-vue-i18n-4nhn</guid>
      <description>&lt;p&gt;After few months of frustration with trying to use the "de-facto" internationalization library for Vue.js - &lt;code&gt;vue-i18n&lt;/code&gt;, I've decided it is time to replace it. And that is why I have created &lt;a href="https://fluent-vue.demivan.me"&gt;fluent-vue&lt;/a&gt;. I will write more about it and &lt;a href="https://projectfluent.org/"&gt;Fluent syntax&lt;/a&gt; it uses in my following blog posts.&lt;/p&gt;

&lt;p&gt;In this blog post, I try to explain what problems I have encountered when trying to use the &lt;code&gt;vue-i18n&lt;/code&gt; library in my app, and how fluent-vue and Fluent syntax solve them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vuei18n-good-parts"&gt;
  &lt;/a&gt;
  vue-i18n good parts:
&lt;/h3&gt;

&lt;p&gt;Firstly, this is what I liked in &lt;code&gt;vue-i18n&lt;/code&gt;:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-component-interpolation"&gt;
  &lt;/a&gt;
  1. Component interpolation
&lt;/h4&gt;

&lt;p&gt;Component interpolation allows using components inside translation messages. Nice way of reducing &lt;code&gt;v-html&lt;/code&gt; directive usages.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-sfc-custom-blocks"&gt;
  &lt;/a&gt;
  2. SFC custom blocks
&lt;/h4&gt;

&lt;p&gt;Keeping translations for the component in the same file as template and js code is really convenient.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-tooling"&gt;
  &lt;/a&gt;
  3. Tooling
&lt;/h4&gt;

&lt;p&gt;Being the most used Vue.js internationalization library, it has a heap of useful packages and extensions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vuei18ns-issues"&gt;
  &lt;/a&gt;
  vue-i18n's issues:
&lt;/h3&gt;

&lt;p&gt;And this is what I didn't like in &lt;code&gt;vue-i18n&lt;/code&gt; or what didn't work for my project:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-complicated-api-for-developers"&gt;
  &lt;/a&gt;
  1. Complicated API for developers
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;vue-i18n&lt;/code&gt; has 5 different methods: (&lt;code&gt;$t&lt;/code&gt;, &lt;code&gt;$tc&lt;/code&gt;, &lt;code&gt;$te&lt;/code&gt;, &lt;code&gt;$d&lt;/code&gt;, &lt;code&gt;$n&lt;/code&gt;). It has separate methods for formatting simple text, pluralized text, date, and numbers.&lt;br&gt;&lt;br&gt;
&lt;code&gt;fluent-vue&lt;/code&gt; has only 2 methods and one of them is rarely used.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-leaky-localizations"&gt;
  &lt;/a&gt;
  2. "Leaky" localizations
&lt;/h4&gt;

&lt;p&gt;Grammar of source language limits what features translators can use and leaks into app code and translations messages of other languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Example (pluralization):&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want translators to be able to use pluralization, you need to use &lt;code&gt;$tc&lt;/code&gt; method. Even if you don't need it for your source language. You cannot just write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;copy-n-files&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Copy {count} files&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;$t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;copy-n-files&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;filesCount&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to use &lt;code&gt;$tc&lt;/code&gt; method with additional parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$tc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;copy-n-files&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filesCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;filesCount&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And translators still have no way of knowing, without checking application code, whether translation that uses the following format would be pluralized.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;copy-n-files&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Copy {count} file | Copy {count} files&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On top of that, if translator tries to use this syntax and developer did not use &lt;code&gt;$tc&lt;/code&gt; method, it will not be pluralized and you will see both choice variants displayed in your app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;fluent-vue solution:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;copy-n-files = { $count -&amp;gt; 
    [one] Copy file
   *[other] Copy {$count} files
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;copy-n-files&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This syntax can be used in any translation message to choose an option based on plural category, or even a concrete value.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-translators-do-not-have-control-over-translations"&gt;
  &lt;/a&gt;
  3. Translators do not have control over translations
&lt;/h4&gt;

&lt;p&gt;Developers are forced to make choices that translators should make: "should translation message be pluralized?", "what date and number format to use?".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Example (date format):&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vue-i18n&lt;/code&gt; has a fixed number of developer-predefined date formats and developer decides what format to use in each case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dateTimeFormats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;short&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;short&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;long&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;last-online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User was last online at {date}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;$t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;last-online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;short&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Translators cannot change date formatting for a particular translation, for example, if it does not fit into UI in some language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;fluent-vue solution:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fluent syntax allows translators to call custom function in translation messages. There is built in &lt;code&gt;DATETIME&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;last-online = User was last online at { DATETIME($date, year: "numeric", month: "short", month: "short") }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;last-online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to have predefined date formats it can easily be implemented using a custom function. But translators will still be able to choose what format to use in each case.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-syntax-is-not-powerful-enough"&gt;
  &lt;/a&gt;
  4. Syntax is not powerful enough
&lt;/h4&gt;

&lt;p&gt;Even with &lt;code&gt;$tc&lt;/code&gt; method there is no way to have pluralization that depends on counts of 2 or more objects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$tc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apples-and-bananas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* what should go here? */&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;appleCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;bananaCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apples-and-bananas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{appleCount} apples and {bananaCount} bananas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One possible solution for this issue is splitting translation into three different ones. But is does not look particularly good:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apples-and-bananas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;appleCountText&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$tc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apples&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;appleCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="na"&gt;bananaCountText&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$tc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;bananaCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apples-and-bananas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{appleCountText} and {bananaCountText}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apples&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{appleCount} apple | {appleCount} apples&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bananas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{bananaCount} banana | {bananaCount} bananas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;fluent-vue solution:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Fluent syntax you can write translation, without splitting it, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apples-and-bananas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;appleCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;bananaCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apples-and-bananas = {$appleCount -&amp;gt; 
    [one] An apple
   *[other] {$appleCount} apples
} and {$bananaCount -&amp;gt; 
    [one] a banana
   *[other] {$bananaCount} bananas
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>vue</category>
      <category>i18n</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>localhost Discord Server</title>
      <author>Krypton</author>
      <pubDate>Sat, 28 Aug 2021 08:48:42 +0000</pubDate>
      <link>https://dev.to/kkrypt0nn/localhost-discord-server-378j</link>
      <guid>https://dev.to/kkrypt0nn/localhost-discord-server-378j</guid>
      <description>&lt;p&gt;Hey!&lt;/p&gt;

&lt;p&gt;I am happy to announce that there is a new &lt;a href="https://discord.gg/Be4f9q4tNX"&gt;Discord server&lt;/a&gt; for you, developers, to join and talk about anything you want to talk about: computer science, programming, networking, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#channels"&gt;
  &lt;/a&gt;
  Channels
&lt;/h2&gt;

&lt;p&gt;We have a multitude of channel for you to talk in and share your passion or learn even more about it.&lt;/p&gt;

&lt;p&gt;Of course these are only the &lt;strong&gt;existing&lt;/strong&gt; channels, and we are open to any suggestions of channels!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#languages-channels"&gt;
  &lt;/a&gt;
  Languages Channels
&lt;/h3&gt;

&lt;p&gt;We have a text channel for &lt;strong&gt;a lot&lt;/strong&gt; of languages for you to talk about, take a look at this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NMylxP-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fxvwez1n7un5mftw48z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NMylxP-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fxvwez1n7un5mftw48z.png" alt="Our per-languages channels"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technologies-amp-other-channels"&gt;
  &lt;/a&gt;
  Technologies &amp;amp; Other Channels
&lt;/h3&gt;

&lt;p&gt;There are some topics and technologies that are very specific, so we made a channel for these:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--myIamiKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m75jfpkf6xvsh2knw4sk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--myIamiKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m75jfpkf6xvsh2knw4sk.png" alt="Channels where you can talk about technologies and more"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#help-channels"&gt;
  &lt;/a&gt;
  Help Channels
&lt;/h3&gt;

&lt;p&gt;What would be a server about programming without help channels?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CE75Yb7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yptlogfake2797yyrhqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CE75Yb7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yptlogfake2797yyrhqa.png" alt="I think you will find a channel where you can get help..."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#podcasts"&gt;
  &lt;/a&gt;
  Podcasts
&lt;/h2&gt;

&lt;p&gt;We have planned to create &lt;strong&gt;podcasts&lt;/strong&gt; for you to take part of. We have created a &lt;strong&gt;Stage channel&lt;/strong&gt; for when we will organize these podcasts. We also have a podcast announcement channel so that you will get &lt;strong&gt;informed&lt;/strong&gt; when we will start a new podcast and what it's all about.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oM9-tv42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2g6nkyme4wl8tlg1us3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oM9-tv42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2g6nkyme4wl8tlg1us3.png" alt="Our podcast section"&gt;&lt;/a&gt;&lt;br&gt;
Podcasts will have many subjects so that we can satisfy everyone and so that everyone can share their opinion or simply share a story they had.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#emotes"&gt;
  &lt;/a&gt;
  Emotes
&lt;/h2&gt;

&lt;p&gt;Yes we do have emotes, and we are planning on adding some more. For now we mainly have emotes for each language channel we have and some awesome &lt;strong&gt;blob emotes&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rw3dsHra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjnbuq7fcof52h8pgh6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rw3dsHra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjnbuq7fcof52h8pgh6x.png" alt="Take a look at our awesome emotes!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can't wait to see you joining our server and talk about your favorite hobbies!&lt;br&gt;
Here is a permanent invite link to the server: &lt;a href="https://discord.gg/Be4f9q4tNX"&gt;https://discord.gg/Be4f9q4tNX&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discord</category>
      <category>server</category>
      <category>programming</category>
      <category>coding</category>
    </item>
    <item>
      <title>Code with Codespaces and deploy with Qovery</title>
      <author>Romaric Philogène</author>
      <pubDate>Sat, 28 Aug 2021 08:40:58 +0000</pubDate>
      <link>https://dev.to/rphilogene/code-with-codespaces-and-deploy-with-qovery-4lbo</link>
      <guid>https://dev.to/rphilogene/code-with-codespaces-and-deploy-with-qovery-4lbo</guid>
      <description>&lt;p&gt;12 years ago, when I started to work as a Developer, I would not have bet that I will write software and manage infrastructure right from my browser one day. At the time, web IDE did not exist. And managing infrastructure from the browser was super early. Today, it is all possible, and the future looks bright!&lt;/p&gt;

&lt;p&gt;I am proud to show how you can edit your code via GitHub Codespaces right from Qovery.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3KYa4dnY5ps"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;One question for you, do you use or plan to use Github Codespaces? 🤔&lt;/p&gt;

</description>
      <category>github</category>
      <category>codespaces</category>
      <category>qovery</category>
    </item>
  </channel>
</rss>
