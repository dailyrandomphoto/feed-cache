<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Computer Vision Startups Enhancing Security &amp; Surveillance</title>
      <author>SiaSearch</author>
      <pubDate>Mon, 13 Sep 2021 07:55:47 +0000</pubDate>
      <link>https://dev.to/siasearch/computer-vision-startups-enhancing-security-surveillance-m7h</link>
      <guid>https://dev.to/siasearch/computer-vision-startups-enhancing-security-surveillance-m7h</guid>
      <description>&lt;p&gt;From common CCTV cameras to autonomous security drones, visual monitoring devices are everywhere. These security systems continuously produce high volumes of footage, much of which sits unused once it's been captured. It's nearly impossible for humans to monitor multiple live security feeds and take proactive action.&lt;/p&gt;

&lt;p&gt;This is where AI comes in - computer vision technology leverages the abundance of visual data to identify what data is useful, what can be ignored, and what demands immediate attention.&lt;/p&gt;

&lt;p&gt;In this article, we at &lt;a href="https://www.siasearch.io/"&gt;SiaSearch&lt;/a&gt; have put together the most promising AI applications for security, as well as the most innovative computer vision startups within each.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-surveillance"&gt;
  &lt;/a&gt;
  Video Surveillance
&lt;/h2&gt;

&lt;p&gt;Unlike human personnel, computer vision-based security systems are able to watch security footage tirelessly, monitor everyone in view, identify patterns and any suspicious activity. In recent years, a large number of startups have stepped up to provide AI-powered video surveillance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://umbocv.ai/"&gt;Umbo&lt;/a&gt; is a Taiwan and San Francisco-based startup that provides cloud-based video security systems for businesses. Umbo's smart security cameras, in combination with proprietary computer vision-based software, autonomously detect and identify suspicious events, such as intrusion, tailgating, and wall-scaling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.deepsentinel.com/"&gt;Deep Sentinel&lt;/a&gt; has built a similar solution for home security. Whenever a threat is detected, Deep Sentinel streams live video to real human security personnel to remotely intervene via microphone.&lt;/p&gt;

&lt;p&gt;In response to the uptick in mass shootings events, &lt;a href="https://actuate.ai/"&gt;Actuate&lt;/a&gt; (formerly known as Aegis AI) integrates with existing camera feeds to automatically identify anyone who's brandishing a firearm. Once the model identifies a weapon, it alerts security teams and law enforcement.&lt;/p&gt;

&lt;p&gt;"We can detect a weapon before a trigger is pulled," said Ben Ziomek, Actuate co-founder and CTO. "In some instances we can enable a security response before any bullets are fired."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A9AutWwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34y1cvyy6978ug3vesfv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A9AutWwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34y1cvyy6978ug3vesfv.png" alt="Actuate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#access-control"&gt;
  &lt;/a&gt;
  Access Control
&lt;/h2&gt;

&lt;p&gt;A number of computer vision startups offer innovative solutions to restrict or allow access to certain areas or facilities.&lt;/p&gt;

&lt;p&gt;San Francisco-based &lt;a href="https://www.swiftlane.com/"&gt;Swiftlane&lt;/a&gt;, for instance, uses facial recognition to allow or deny access to offices, apartment complexes, and other physical spaces. The solution employs deep learning and computer vision techniques to provide a single-sign-on using a mobile phone or video intercom. After signing up, users only need to look at the face reading terminal to unlock the doors to areas they are authorized to enter.&lt;/p&gt;

&lt;p&gt;Similarly, &lt;a href="https://www.paravision.ai/"&gt;Paravision's&lt;/a&gt; platform is designed to be used by global security device manufacturers, solution providers, systems integrators, and financial services firms in situations where an error could have profound negative consequences.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checkpoint-security"&gt;
  &lt;/a&gt;
  Checkpoint Security
&lt;/h2&gt;

&lt;p&gt;Computer vision technology has also made great strides in detecting and identifying threats at security screening checkpoints.&lt;/p&gt;

&lt;p&gt;For example, Silicon Valley's &lt;a href="https://www.synapsetechnology.com/"&gt;Synapse Technology&lt;/a&gt; automates security screening, enabling checkpoints worldwide to catch more threats while reducing operating costs and increasing throughput. Their platform, Syntech ONE®, integrates with new and existing checkpoint machines at airports, courthouses, federal buildings, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.evolvtechnology.com/"&gt;Evolv Technology's&lt;/a&gt; Edge system uses a combination of camera, facial recognition and millimetre-wave technologies to scan people walking through portable security gates at airports. Machine learning models automatically check for threats, including explosives and firearms, while ignoring non-dangerous items.&lt;br&gt;
Inspecting vehicles can be a challenge for checkpoint security teams. &lt;/p&gt;

&lt;p&gt;Difficult to access, the undercarriage is an ideal spot for adversaries to hide illicit materials such as explosives, weapons, and drugs. &lt;a href="https://www.uveye.com/"&gt;UVeye&lt;/a&gt; is an Israeli startup that provides an automated under vehicle inspection scanner that captures high-resolution images as it scans passing vehicles. Using advanced deep learning algorithms, the scanner is able to detect and flag anomalies in seconds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theft-detection"&gt;
  &lt;/a&gt;
  Theft Detection
&lt;/h2&gt;

&lt;p&gt;Computer vision can also help retailers react to theft and threats as they happen. With roots in MIT's artificial intelligence labs, &lt;a href="https://www.stoplift.com/"&gt;StopLift&lt;/a&gt; analyzes security video and POS data to distinguish between legitimate and fraudulent behavior at checkout. By applying advanced computer vision algorithms to existing camera feeds, StopLift's ScanItAll system tracks items that pass through the checkout lane, associate them with POS, and flag any suspicious activity.&lt;/p&gt;

&lt;p&gt;Developed by Japanese telecommunications company NTT East and startup Earth Eyes, AI Guardman is an automated security camera designed to catch shoplifters in the act. Based on open-source technology developed at Carnegie Mellon University, AI Guardman scans live video streams from cameras in convenience stores and supermarkets, tracking every customer inside. When a threat is detected, the system sends an alert to shop staff in real time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NnaaAq77--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rsp0hhvu20g2sqnu2tn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NnaaAq77--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rsp0hhvu20g2sqnu2tn.png" alt="AI Guardman"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#public-health-amp%C2%A0safety"&gt;
  &lt;/a&gt;
  Public Health &amp;amp; Safety
&lt;/h2&gt;

&lt;p&gt;Advances in computer vision technology can also be used to address common public safety concerns, from cutting crime rates to slowing down the spread of infectious diseases.&lt;/p&gt;

&lt;p&gt;Atlanta-based startup &lt;a href="https://www.flocksafety.com/"&gt;Flock Safety&lt;/a&gt; aims to reduce crime in America by 25% by using computer vision to improve public safety in neighborhoods. Their automated license plate reader (ALPR) software, FlockOS, combines character recognition with computer vision and machine learning to provide real-time insights to crime prevention authorities in over 1200 US cities. It uses patented Vehicle Fingerprint™ technology that identifies a vehicle even if it's modified or if its license plate is missing or covered.&lt;/p&gt;

&lt;p&gt;Furthermore, in the wake of the COVID-19 pandemic, many public facilities have equipped existing security cameras with AI-based software that can track compliance with health guidelines.&lt;/p&gt;

&lt;p&gt;Reducing the risk of infection in stores is a major priority for brick-and-mortar retailers in particular. Retail analytics platform &lt;a href="https://auravision.ai/covid-solutions/"&gt;Aura Vision&lt;/a&gt; provides a suite of COVID-focused solutions to promote in-store safety, from features that monitor face mask compliance to heat maps to visualize high traffic areas since the last clean.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9iFBLXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tobb2i8qkaatfhwiajpf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9iFBLXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tobb2i8qkaatfhwiajpf.png" alt="Aura Vision"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#homeland-security"&gt;
  &lt;/a&gt;
  Homeland Security
&lt;/h2&gt;

&lt;p&gt;Not only has computer vision proven its practical value for physical security on private property and public spaces, it has also demonstrated value on a national scale, with applications ranging from environmental monitoring to use in military systems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://shield.ai/"&gt;Shield AI&lt;/a&gt; is a company that works with federal, state, and local departments and agencies to deliver next generation surveillance systems. Their first product, Nova, is a Hivemind-powered drone that searches buildings while simultaneously streaming video and generating maps.&lt;/p&gt;

&lt;p&gt;Finally, &lt;a href="https://orbitalinsight.com/"&gt;Orbital Insight&lt;/a&gt; specializes in applying computer vision to geo-analytics. The company uses satellites, drones, balloons, UAV footage, and geolocation data from mobile phones to analyze human activities and provide businesses and governments with key behavioral insights and address security concerns.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h7eNyW_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uw65ywm6sq3eplatd7v6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h7eNyW_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uw65ywm6sq3eplatd7v6.png" alt="Infographic: Computer Vision Startups in Security"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visual-data-management-for-the-security%C2%A0industry"&gt;
  &lt;/a&gt;
  Visual Data Management for the Security Industry
&lt;/h2&gt;

&lt;p&gt;In the security sector, the challenge is not data acquisition, but effective data management. The majority of security camera recordings aren't useful for the relevant business or computer vision functions, causing extremely high redundancy and low information density.&lt;br&gt;
SiaSearch makes it easy to select subsets of highly quality training data, helping you build better ML models at lower costs.&lt;/p&gt;

&lt;p&gt;With SiaSearch's lightweight API, users can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automatically index, structure, and evaluate raw data captured by security cameras and sensors&lt;/li&gt;
&lt;li&gt;Visualize data and analyze model performance&lt;/li&gt;
&lt;li&gt;Search and access all security footage across all events and attributes&lt;/li&gt;
&lt;li&gt;Identify rare edge cases and curate training datasets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interested in learning more? &lt;a href="https://www.siasearch.io/request-a-demo"&gt;Reach out to SiaSearch&lt;/a&gt; for a free proof of concept.&lt;/p&gt;

</description>
      <category>security</category>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>AWS open source news and updates #81</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 13 Sep 2021 07:49:44 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-81-2okb</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-81-2okb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#september-13th-2021-instalment-81"&gt;
  &lt;/a&gt;
  September 13th, 2021 - Instalment #81
&lt;/h2&gt;

&lt;p&gt;Newsletter #81.&lt;/p&gt;

&lt;p&gt;Welcome new and existing readers of this newsletter to another edition with plenty to excite you. This weeks brand new open source projects include some great new AWS CDK constructs to help you with things such as Apache Airflow, a tool to help you with your IAM policies, a really nice tool to explore and interact with AWS SQS and something for Minecraft fans. If that was not enough, the AWS and community blog posts cover all the news from last weeks GA for EKS Anywhere and other Kubernetes related articles. For those interested in the topic of big data, we have a bumper lot of content including posts covering Apache Airflow, Apache Spark, Apache Kafka, PartiQL, Apache Nifi and more. On top of that we have posts covering AWS CDK, open source file systems, the announcement last week of the latest HPC open source tool from AWS and more. There are also a few new events in the Events section, so check those out and put them in your diary. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Job of the week&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ur"&gt;Principal Developer Advocate - Java Specialist&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In case you missed this last week, we have a new opening in my team for anyone in the Cambridge/Boston area in the US. As a Principal Developer Advocate in the AWS Developer Relations organisation, you will work to earn trust with Enterprise developers and the broader Java community through your technical leadership and expertise. This is a high-impact role that's well-suited to someone with domain-specific technical experience that enjoys sharing what they have learned in order to help users solve their technical issues and overcome any challenges they face. You will have the ability to influence and educate customers at every stage of their experience with technologies such as OpenJDK, Serverless, Containers, DevOps tools and more.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href="https://aws-oss.beachgeek.co.uk/ur"&gt;job description&lt;/a&gt; for more details, and please feel free to DM or email me with any questions you might have. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Harinder Seera, Roshani Nagmote, Aditya Bindal, Khaled ElGalaind, Rajesh Parangi Sharabhalingappa, Nicolas Weil, Nagesh Subrahmanyam,  Arun A K, Hari Rongali, Wayne R. Vincent, Swapna Chawhan, Justin Garrison, Channy Yun, Frank Munz, Ali Spittel, Matt Coles, Yihui Han, Ray Gibson, Pahud Hsieh, Shakeel Ahmad, Evgeny Vaganov, Darius Januskis, Keerti Shah, Ray Zaman, David Desroches, Ameer Hakme, Brandon Rubadou, Ravi Menon, and John O'Donnell.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-open-source-projects"&gt;
  &lt;/a&gt;
  Latest open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;serverless-airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/w8"&gt;serverless-airflow&lt;/a&gt; two of my favourite things combined in this open source project, an AWS CDK construct that provisions AWS resources to build an Apache Airflow environment. You can use Python or Typescript. Nice job Yihui Han.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cQTmiz6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/readybuilderone/serverless-airflow/main/assets/01-serverless-airflow-on-aws-architecture.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cQTmiz6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/readybuilderone/serverless-airflow/main/assets/01-serverless-airflow-on-aws-architecture.svg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;minecraft-ondemand&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/w9"&gt;minecraft-ondemand&lt;/a&gt; Ray Gibson's open sourced project that helps you provision resources on AWS to deploy Minecraft servers frugally will delight lots of you. Clean and easy to follow docs, together with some cost estimates provide everything you need to get going. Where was this at the beginning of the lockdown :-)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JGO6nSth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/doctorray117/minecraft-ondemand/blob/main/diagrams/aws_architecture.drawio.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JGO6nSth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/doctorray117/minecraft-ondemand/blob/main/diagrams/aws_architecture.drawio.png%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sqs-workbench&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/wc"&gt;sqs-workbench&lt;/a&gt; this is a fantastic tool from AWS Community Builder Harinder Seera, that helps you easily explore AWS SQS through this gui based interface. What is more, you can see how to get started by reading his post, &lt;a href="https://aws-oss.beachgeek.co.uk/wd"&gt;AWS SQS Workbench - A Simple &amp;amp; Non-Technical Tool To Interact With AWS SQS&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GYCEB0Lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/hseera/aws-python-utilities/blob/main/images/sqs-playa.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GYCEB0Lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/hseera/aws-python-utilities/blob/main/images/sqs-playa.png%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWSXenos&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/AirWalk-Digital/AWSXenos"&gt;AWSXenos&lt;/a&gt; if you are looking for open source tools to help you understand and then tighten up your IAM policies and permissions, then check this tool out from AirWalk. AWSXenos will list all the trust relationships in all the IAM roles, and S3 buckets, in an AWS account and give you a breakdown of all the accounts that have trust relationships to your account. If you are thinking that AWS Access Analyser does this, then you are no wrong, however, they have put together some reasons why this project might help you address additional features not available in Access Analyser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6HEErv3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/AirWalk-Digital/AWSXenos/blob/main/screenshots/report.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6HEErv3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/AirWalk-Digital/AWSXenos/blob/main/screenshots/report.png%3Fraw%3Dtrue" alt="report"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cdktf-aws-eks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/wb"&gt;cdktf-aws-eks&lt;/a&gt; Pahud Hsieh has put together another CDK construct, this time providing an cdktf construct library for Amazon EKS. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;eks-anywhere&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/wa"&gt;eks-anywhere&lt;/a&gt; Amazon EKS Anywhere is a new deployment option for Amazon EKS that enables you to easily create and operate Kubernetes clusters on-premises with your own virtual machines. Read more about this below, but this is the project home page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CDK - RFC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/we"&gt;RFC for CDK&lt;/a&gt; Have your say in this Request for Comment (RFC) in the AWS CDK GitHub project page. This is a request for comments about Integration testing for CDK apps. Read about the current proposal, the discussion in the commands and then share your thoughts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-community-blog-posts"&gt;
  &lt;/a&gt;
  AWS and Community blog posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week, we announced the general availability of a new deployment option for Amazon Elastic Kubernetes Service (Amazon EKS) called Amazon EKS Anywhere.&lt;/p&gt;

&lt;p&gt;In the officinal announcement post, &lt;a href="https://aws-oss.beachgeek.co.uk/vp"&gt;Amazon EKS Anywhere – Now Generally Available to Create and Manage Kubernetes Clusters on Premises&lt;/a&gt;, Channy Yun takes a closer look at what this means, compares this offering against other choices customers have for running their Kubernetes clusters, provides a quick start and some things you will find helpful to know around the security model, support and more. [hands on]&lt;/p&gt;

&lt;p&gt;We also had Justin Garrison put together &lt;a href="https://aws-oss.beachgeek.co.uk/vo"&gt;Getting started with Amazon EKS Anywhere&lt;/a&gt; which will take you through how to get your first Amazon EKS Anywhere Kubernetes cluster running on your local machine. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ojCJWeOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/09/08/hello-eks-a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ojCJWeOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/09/08/hello-eks-a.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I believe Justin will be streaming live about Amazon EKS Anywhere in more detail later today, so head on over to the &lt;a href="https://www.twitch.tv/aws/schedule?seriesID=11b10057-6345-4982-95ca-670f769f5faf"&gt;Containers from the Couch&lt;/a&gt; You Tube channel.&lt;/p&gt;

&lt;p&gt;Rancher is a popular open-source container management tool utilized by many organizations that provides an intuitive user interface for managing and deploying the Kubernetes clusters on Amazon Elastic Kubernetes Service (Amazon EKS) or Amazon Elastic Compute Cloud (Amazon EC2). This post &lt;a href="https://aws-oss.beachgeek.co.uk/wi"&gt;Collect, Aaggregate, and analyze Rancher Kubernetes Cluster logs with Amazon CloudWatch&lt;/a&gt; from Darius Januskis and Keerti Shah  demonstrates how to send logs from your Rancher Kubernetes environment on Amazon EC2 to Amazon CloudWatch Logs. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2--1uiWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/09/Figure-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2--1uiWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/09/Figure-1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To finish up the Kubernetes updates this week, we have Nagesh Subrahmanyam who writes, &lt;a href="https://aws-oss.beachgeek.co.uk/vy"&gt;Implementing the Saga Orchestration pattern with Amazon EKS and Amazon SNS&lt;/a&gt; described the Saga Orchestration pattern for coordinating. This was new to me, Saga patterns are used to bring multiple microservices together for concluding an end-to-end business process. The Saga patterns can be applied for all business processes that span across multiple microservices. In this particular post, he looks at Orders, Orders Rollback, and Inventory microservices with Amazon SNS passing messages between microservices. This pattern can be applied in digital transformation projects where features are implemented as microservices. Source code repository is linked to so you can try this out for yourself. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nUMaIFXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/09/01/Saga-Orchestrator_img2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nUMaIFXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/09/01/Saga-Orchestrator_img2.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Amplify&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another great post last week was Ali Spittel's &lt;a href="https://aws-oss.beachgeek.co.uk/w4"&gt;10 New AWS Amplify Features to Check Out&lt;/a&gt; which is a must read to keep up with the new features you have available to you when using AWS Amplify. From Next.js support, Apple pay integration, cool stuff if you need to work with location or maps, make sure you check out these cool new capabilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/w6"&gt;Reference and import existing assets into AWS CDK&lt;/a&gt; Matt Coles has put together this excellent resource and guide for anyone who is building CDK applications to deploy their cloud infrastructure, and wants to reference or import existing resources. The post covers most of the use cases you might expect to come across (some of which I have had to figure out, so this post would have saved me quite a bit of time/effort). [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Spark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Posts from Gary Stafford are always something to look forward to, so grab a cup of your favourite beverage and take in his latest post, &lt;a href="https://aws-oss.beachgeek.co.uk/w7"&gt;Getting Started with Spark Structured Streaming and Kafka on AWS using Amazon MSK and Amazon EMR&lt;/a&gt;. Following on from a previous post which I shared in this newsletter, in this post Gary's shows how to use Apache Spark and Spark Structured Streaming with Apache Kafka. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0pUfzrgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/4800/1%2A8bK_UDwA6HOn6FUCJcuROg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0pUfzrgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/4800/1%2A8bK_UDwA6HOn6FUCJcuROg.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Brandon Rubadou, Ravi Menon, and John O'Donnell have collaborated on this post, &lt;a href="https://aws-oss.beachgeek.co.uk/wk"&gt;Hybrid Cloud Architectures Using Self-hosted Apache Kafka and AWS Glue&lt;/a&gt;. In it they share an architecture that provides hybrid cloud data integration and analytics capability, leveraging AWS services along with Apache Kafka that ensures that your on-premises workloads are tightly integrated with your larger data lake solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hIIEzXnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/09/09/Fig1-etljob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hIIEzXnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/09/09/Fig1-etljob.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I try and spend as much time as I can lurking in the Apache Airflow slack channels, a great source of inspiration. As part of some stuff I worked on to help a customer, I wrote how to use Amazon Managed Workflows for Apache Airflow (MWAA) when wanting to read/write data across different AWS accounts. Check out the whole post in &lt;a href="https://aws-oss.beachgeek.co.uk/wf"&gt;Reading and writing data across different AWS accounts with Amazon Managed Workflows for Apache Airflow v2.x&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delta Sharing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I love reading about new open source projects, and last week it was &lt;a href="https://aws-oss.beachgeek.co.uk/w3"&gt;delta sharing&lt;/a&gt;, an open protocol for secure data sharing. A former colleague Frank Munz (DevRel over at Databricks) put together a great walk through on how to use this project. Find out more by reading his blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/w2"&gt;Share Large Amounts of Live Data With Delta Sharing and Docker&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D4yYc0VS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hackernoon.com/images/DLEi5kpJlfcjqct1t5onzRmuWy83-jq4f35lm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D4yYc0VS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hackernoon.com/images/DLEi5kpJlfcjqct1t5onzRmuWy83-jq4f35lm.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache NiFi&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apache NiFi is a very cool open-source site-to-site data transfer tool that abstracts writing code by providing a simple drag-and-drop interface of predefined processor modules, which you can use to connect a variety of data sources and targets and perform lightweight data transformations. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/vz"&gt;Stream time series data into Amazon Timestream using Apache NiFi&lt;/a&gt;, Arun A K, Hari Rongali, and Wayne R. Vincent discuss how Apache NiFi users can ingest time series data into Timestream without explicitly writing code. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u09jyicG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/08/30/DBBLOG-1635-ingestion_dataflow_architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u09jyicG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/08/30/DBBLOG-1635-ingestion_dataflow_architecture.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PartiQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/w1"&gt;PartiQL&lt;/a&gt; is a SQL-compatible query language that makes it easy to efficiently query data, regardless of where or in what format it’s stored. In the post &lt;a href="https://aws-oss.beachgeek.co.uk/w0"&gt;A PartiQL deep dive: Understand the language and bring SQL queries to AWS non-relational database services&lt;/a&gt;, Swapna Chawhan explains some of the important PartiQL features and basics so you can effectively use the language to explore databases that require PartiQL knowledge. Unlike traditional SQL, the PartiQL query language also meets the needs of NoSQL and non-relational databases. PartiQL is fully open sourced under the Apache2.0 license and the open-source implementation provides an interactive shell that allows you to write and evaluate PartiQL queries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hIJLGwON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/08/31/DBBLOG-1209-IMG2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hIJLGwON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/08/31/DBBLOG-1209-IMG2.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PyTorch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon S3 plugin for PyTorch is an open-source library which is built to be used with the deep learning framework PyTorch for streaming data from Amazon Simple Storage Service (Amazon S3). With this feature available in PyTorch Deep Learning Containers, you can take advantage of using data from S3 buckets directly with PyTorch dataset and dataloader APIs without needing to download it first on local storage. To see how this works, Roshani Nagmote, Aditya Bindal, Khaled ElGalaind, and Rajesh Parangi Sharabhalingappa have put together &lt;a href="https://aws-oss.beachgeek.co.uk/vv"&gt;Announcing the Amazon S3 plugin for PyTorch&lt;/a&gt; which will walk you through a couple of examples. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPEKE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Secure Packager and Encoder Key Exchange (SPEKE) defines the standard for communication between encryptors and packagers or encoders of media content and digital rights management (DRM) key providers. The &lt;a href="https://aws-oss.beachgeek.co.uk/vw"&gt;SPEKE Reference Server&lt;/a&gt; is an implementation of the SPEKE API and minimal implementation of back-end software to generate AES keys for an encoder or packager. The Reference Server has been donated to open source by Amazon and is available from GitHub for installation, use and customisation. Nicolas Weil shares the latest updates in this specification (SPEKE v2) in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/vx"&gt;Improve streaming content security with SPEKE v2.0 and AWS Elemental MediaPackage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FhnlpyEr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fb644351560d8296fe6da332236b1f8d61b2828a/2021/09/07/spekev2-mediapackage002-1024x437.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FhnlpyEr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fb644351560d8296fe6da332236b1f8d61b2828a/2021/09/07/spekev2-mediapackage002-1024x437.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS ParallelCluster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Brendan Bouffler and Rye Robinson introduced an important announcement for AWS ParallCluster users last week. In &lt;a href="https://aws-oss.beachgeek.co.uk/wl"&gt;New: Introducing AWS ParallelCluster 3&lt;/a&gt; dives into the key features of the new release, including enhancements to the API, integration with EC2 Imagebuilder, the new configuration file format, simpler network configuration, fine grain IAM permissions and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BeeGFS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://aws-oss.beachgeek.co.uk/wj"&gt;Enabling parallel file systems in the cloud with Amazon EC2 (Part I: BeeGFS)&lt;/a&gt; Ray Zaman, David Desroches, and Ameer Hakme show you how to deploy the popular open source parallel file system, BeeGFS, using AWS D3en and I3en EC2 instances. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nUKjs-Mz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/09/10/BeeGFS-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nUKjs-Mz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/09/10/BeeGFS-architecture.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are a few quick updates this week from the ever increasingly active OpenSearch community.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Elasticsearch Service has a new name: Amazon OpenSearch Service. This change, which was previously announced here, coincides with the addition of support for OpenSearch 1.0. You can now run and scale both OpenSearch and Elasticsearch (until version 7.10) clusters on Amazon OpenSearch Service and get all of the same benefits you have enjoyed so far from Amazon Elasticsearch Service. Read more in the announcement, &lt;a href="https://aws-oss.beachgeek.co.uk/vr"&gt;Amazon Elasticsearch Service is now Amazon OpenSearch Service; adds support for OpenSearch 1.0&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Amazon OpenSearch Service (successor to Amazon Elasticsearch Service) now supports index transforms that enables customers to extract significant information from large data sets and store summarised views in new indices. Customers can derive new insights, further analyse, and visualise trends from the new summary index. Index transforms are similar to “materialized views” in databases and provide an interactive way to aggregate and store summarised views from large data sets so that you can visualise and analyse the data more easily. For example, you can summarise the annual sales index with multiple fields using transforms to organise the data by region, quarter, and then revenue. Using OpenSearch Dashboards or the transforms API, customers can schedule and run index transforms jobs to create the summarised indices for analysing trends and patterns. Read more in the announcement, &lt;a href="https://aws-oss.beachgeek.co.uk/vs"&gt;Amazon OpenSearch Service (successor to Amazon Elasticsearch Service) now supports Index Transforms&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Amazon OpenSearch Service now supports OpenSearch Dashboards Notebooks, a new feature that enables OpenSearch users to interactively and collaboratively develop rich reports backed by live data and queries. A notebook is a document made up of cells or paragraphs that can combine markdown, SQL and Piped Processing Language (PPL) queries, and visualizations with support for multi-timelines so that users can easily tell a story. Notebooks can be developed, shared as an OpenSearch Dashboards link, PDF or PNG, and refreshed directly from OpenSearch Dashboards to foster data driven exploration and collaboration among OpenSearch users and their stakeholders. Common use cases for notebooks includes creating postmortem reports, designing run books, building live infrastructure reports, or even documentation. Read more in, &lt;a href="https://aws-oss.beachgeek.co.uk/vt"&gt;OpenSearch Dashboards Notebooks, a new visual reporting feature, now available on Amazon OpenSearch Service (successor to Amazon Elasticsearch Service)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Suricata&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Suricata is an open source threat detection engine that provides capabilities including intrusion detection, intrusion prevention and network security monitoring. AWS Network Firewall uses Suricata to provide network protections for all of your Amazon Virtual Private Clouds (VPCs). AWS Network Firewall is now a HIPAA eligible service. This means you can use AWS Network Firewall to secure and inspect protected health information (PHI) stored in your accounts. If you have a HIPAA Business Associate Addendum (BAA) in place with AWS, you can now start using AWS Network Firewall for your HIPAA-regulated workloads.&lt;/p&gt;

&lt;p&gt;Also, incase you missed it, there was a new blog post last week covering some additional deployment options and use cases you might have. Check out the post from Shakeel Ahmad and Evgeny Vaganov &lt;a href="https://aws-oss.beachgeek.co.uk/wg"&gt;Deployment models for AWS Network Firewall with VPC routing enhancements&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now launch RabbitMQ 3.8.22 brokers on Amazon MQ. This release includes a fix for an issue with queues using per-message TTL (time to live), identified in the previously supported version, RabbitMQ 3.8.17, and we recommend upgrading to RabbitMQ 3.8.22.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon EC2 now supports Hibernation for On-Demand Nitro-based instances running Red Hat Enterprise Linux (RHEL) version 8, CentOS version 8, and Fedora version 34 onwards. Hibernation allows you to pause your EC2 Instances and resume them at a later time, rather than fully terminating and restarting them. Resuming your instance lets your applications continue from where they left off so that you don’t have to restart your OS and application from scratch. Hibernation is useful for cases where rebuilding application state is time-consuming (e.g., developer desktops) or an application’s start-up steps can be prepared in advance of a scale-out. For RHEL version 8, CentOS version 8, and Fedora version 34 onwards, Hibernation is supported for On-Demand Instances running on Nitro-based instances (C5, C5d, M5, M5a, M5ad, M5d, R5, R5a, R5ad, R5d, T3, and T3a) with up to 150 GB of RAM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;During August, 2021, 4 new versions of the AWS Cloud Development Kit (CDK) for JavaScript, TypeScript, Java, Python, .NET and Go were released (v1.117.0 through v1.120.0). These releases include multiple additions to the Kinesis Firehose Construct Library, including compression and prefixes on S3 delivery stream destinations, delivery stream metrics, S3 source backups, AWS Lambda-based data processors and more. Additionally, CloudFront Construct Library now supports Origin Shield, CloudWatch supports defining alarms across AWS accounts, and Cognito User Pools support Device Tracking. These releases resolve 28 issues and introduce 37 new features that span 30 different modules across the library. Many of these changes were contributed by the developer community. Read more in &lt;a href="https://aws-oss.beachgeek.co.uk/vu"&gt;AWS CDK releases v1.117.0 - v1.120.0&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Data in Motion: Combining the strengths of AWS and Confluent&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;September 22nd, 11am MDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this webinar, Big Compass, Confluent, and AWS will come together to explore the strengths of Confluent and AWS, and how each technology can complement one another for various use cases. The webinar covers ways to combine AWS and Confluent in a hybrid platform, how to build your serverless applications with AWS and Confluent, and a look at real-world use cases for AWS and Confluent.&lt;/p&gt;

&lt;p&gt;To find out more and &lt;a href="https://aws-oss.beachgeek.co.uk/vq"&gt;register, click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;23rd September, Bern Switzerland&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is this, an in person event returning? A stellar line up including our own Michael Hausenblas, an event looking at CNCF projects and the future of IT. Find out more and to view prices/register, by clicking &lt;a href="https://cloudnativeday.ch/en/#speakers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GraphQL API security best practices with AWS AppSync and AWS Amplify&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;14th October, 11am AEST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a developer, the most important parts of managing your applications should always include enhancing performance while strengthening security. In this webinar, we take you through security best practices for your GraphQL API’s with AWS AppSync and AWS Amplify, providing you with an understanding of how these can be applied to your applications. In this session, you will learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GraphQL Protocol and how to configure a schema&lt;/li&gt;
&lt;li&gt;Possible ways to authenticate and authorise access to GraphQL APIs&lt;/li&gt;
&lt;li&gt;How to configure network security for your API&lt;/li&gt;
&lt;li&gt;How to enable observability for your API with logging, tracing or auditing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To &lt;a href="https://aws-oss.beachgeek.co.uk/ue"&gt;register for this event, use this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flink Forwards Global 2021&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;October 26th/27th&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flink Forward Global 2021 is a 2-day virtual conference for the Apache Flink and stream processing communities. Apache Flink is an open-source distributed engine for processing data streams that can support both streaming and batch workloads. Flink Forward has keynote presentations and talks on production Flink use cases, technical deep dive sessions, and the growth of the Flink ecosystem. You can meet core Flink committers, new and experienced users, and thought leaders who share experiences and best practices in stream processing, real-time analytics, and the management of mission-critical Flink deployments in production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/wh"&gt;Read more and sign up here.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>How To: Manage Containers at the Edge with #Portainer</title>
      <author>Wilfried</author>
      <pubDate>Mon, 13 Sep 2021 07:44:37 +0000</pubDate>
      <link>https://dev.to/wcanirinka/how-to-manage-containers-at-the-edge-with-portainer-1mn2</link>
      <guid>https://dev.to/wcanirinka/how-to-manage-containers-at-the-edge-with-portainer-1mn2</guid>
      <description>&lt;p&gt;In this session, (the 6th of our PortaiNerd series), you'll learn how to manage #containers at the Edge with &lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/portainerio"&gt;@portainerio&lt;/a&gt;
&lt;br&gt;
.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cloud-edujobs"&gt;
  &lt;/a&gt;
  Cloud #edujobs
&lt;/h1&gt;

&lt;p&gt;Register using the link belowDown pointing backhand indexDown pointing backhand index to learn&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3AkWzKt"&gt;https://bit.ly/3AkWzKt&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 Awesome Web Design Trends for 2021</title>
      <author>Chris Fowler</author>
      <pubDate>Mon, 13 Sep 2021 07:33:11 +0000</pubDate>
      <link>https://dev.to/dsvdeveloper88/10-awesome-web-design-trends-for-2021-2og9</link>
      <guid>https://dev.to/dsvdeveloper88/10-awesome-web-design-trends-for-2021-2og9</guid>
      <description>&lt;p&gt;The ignorance of the latest design models can thwart people’s frequent visits and then make companies lose much of the potential segment. In this article, we’ll summarize the top possibly dominant website design trends. However awash with challenges induced by the Covid-19 pandemic, the interminable year 2020 still anticipated the emergence of outstanding web design trends 2021.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-top-web-design-trend-3d"&gt;
  &lt;/a&gt;
  1. Top Web Design Trend: 3D
&lt;/h2&gt;

&lt;p&gt;3D technology has a growing permeation in numerous spheres, and web design is no exception. Although 2D design still accounts for some certain shares, the high application of its 3D counterpart cannot be overlooked and seemingly thrives in subsequent years.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---1Ek0TJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ycnmx0mkz5flqglfor1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---1Ek0TJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ycnmx0mkz5flqglfor1.jpeg" alt="web design trends 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even various &lt;a href="https://www.designveloper.com/blog/ecommerce-website-design-services/"&gt;eCommerce websites&lt;/a&gt; build 3D simulated products to help customers know how their products look in real life. In addition to rendering them more responsive, this future technology motivates user participation in websites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-neumorphism"&gt;
  &lt;/a&gt;
  2. Neumorphism
&lt;/h2&gt;

&lt;p&gt;Following its predecessor, Skeuomorphism, this design approach aims at both pursuing the minimalism style and imitating physicality by overlaying drop shadows.&lt;/p&gt;

&lt;p&gt;In other words, this trend applies embossed and debossed patterns to websites, subsequently producing the semi-flat design that looks more realistic than the traditional minimalist trend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-parallax-animation"&gt;
  &lt;/a&gt;
  3. Parallax Animation
&lt;/h2&gt;

&lt;p&gt;By definition, parallax refers to the faster movement of foreground objects than background ones when users scroll up and down. When visitors navigate, the depth induced by this method makes them feel like being immersed in the great performance of websites and turns pages into something partly pragmatic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-scrolling-transformations"&gt;
  &lt;/a&gt;
  4. Scrolling Transformations
&lt;/h2&gt;

&lt;p&gt;Therefore, those changes allow users to have more intriguing experiences but collect key information from websites. In 2021, this ongoing trend continues standing out with the evolution of Horizontal Scrolling, Scroll Animations, and Scrollytelling.&lt;/p&gt;

&lt;p&gt;Websites become more interactive and accessible rather than merely functioning as the bland machine to connect users with online activities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-illustrations"&gt;
  &lt;/a&gt;
  5. Illustrations
&lt;/h2&gt;

&lt;p&gt;It comes as a little surprise that cartoon and hand-drawn illustrations have lately evolved and ridden a wave of public interest. Accordingly, designers have leeway to craft unique characters or items that make their brands more personable and consequently leave a lasting impression on visitors.&lt;/p&gt;

&lt;p&gt;Conventional websites are filled with words, numerals, and stock photographs, which are occasionally considered monotonous and generic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-comfortable-colors"&gt;
  &lt;/a&gt;
  6. Comfortable Colors
&lt;/h2&gt;

&lt;p&gt;The digital advancement undoubtedly accompanies the increased time of gluing eyes to screens, albeit large or compact. This is one of the &lt;a href="https://www.designveloper.com/blog/web-design-trends-in-2021/"&gt;web design trends&lt;/a&gt; in 2021 we are anticipating.&lt;/p&gt;

&lt;p&gt;To buffer repercussions from this harmful act, web designers aim at comforting the user’s sight with soft color palettes such as warm browns, wholesome greens, or pastel hues instead of dramatic color schemes like dark mode which was an overwhelming trend of the previous year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-minimalism"&gt;
  &lt;/a&gt;
  7. Minimalism
&lt;/h2&gt;

&lt;p&gt;Staying away from the hustling life, various people are seeking a more peaceful and simpler lifestyle that is reflected in minimalist designs.&lt;/p&gt;

&lt;p&gt;Though, this minimalist style is anticipated to expand to other colors but adheres to several certain design principles. It’s not a novel design tendency, yet has so far been associated with much of the whiteness, typically Apple’s website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-gradient-color-scheme"&gt;
  &lt;/a&gt;
  8. Gradient Color Scheme
&lt;/h2&gt;

&lt;p&gt;The trend adds more intrigues and visual synergy by creating immersive overlays or backgrounds and building textures for illustrations. The new gradient logo of Instagram received mixed success right after its rebrand in 2016.&lt;/p&gt;

&lt;p&gt;Until now, gradient themes have gained popularity and become a new inspiration among web designers and other creatives. Gradient &lt;a href="https://www.designveloper.com/blog/web-design-and-development/"&gt;web designs&lt;/a&gt; might go with bold typography to emphasize the major content of websites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-videoembedded-design"&gt;
  &lt;/a&gt;
  9. Video-Embedded Design
&lt;/h2&gt;

&lt;p&gt;Visitors to the website can see the positive aspects of the company culture and track available services. Prevalently used for the website homepage, videos showcase how the company operates or staff members interact.&lt;/p&gt;

&lt;p&gt;The combination of graphics, photos, and illustrations is a traditional fashion to convey different messages of brands visually. In addition, companies now tend to integrate pre-recorded videos to the website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-organic-and-fluid-shapes"&gt;
  &lt;/a&gt;
  10. Organic and Fluid Shapes
&lt;/h2&gt;

&lt;p&gt;Some web designers could incorporate those abstract shapes with motion effects to produce vivid animations and bring websites to life. This year welcomes the explosion of organic and fluid shapes that topple the impregnable position of geometric shapes.&lt;/p&gt;

&lt;p&gt;Going beyond familiar lines or angles, they are tellingly asymmetric and give visitors an extra sense of excitement. Such graphics and shapes might resemble a hill, a leaf, a lava lamp, or any imaginable item.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>computerscience</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>15 Must-Have Browser Extensions for Web Developers</title>
      <author>Coder</author>
      <pubDate>Mon, 13 Sep 2021 07:10:39 +0000</pubDate>
      <link>https://dev.to/thesamrtcoderzz/15-must-have-browser-extensions-for-web-developers-28k0</link>
      <guid>https://dev.to/thesamrtcoderzz/15-must-have-browser-extensions-for-web-developers-28k0</guid>
      <description>&lt;p&gt;Browsers are increasingly incorporating more &lt;span&gt;&lt;a href="#"&gt;extensions, plugins and add-ons&lt;/a&gt;&lt;/span&gt;, which are often developed by their users, making the browser more powerful, and helping us increase our productivity. Here at Awwwards, our mission is to share with you the best resources and tools on the web, so we're writing a series of blog articles on &lt;span&gt;the best extensions and plugins for major browsers&lt;/span&gt;. To kick-off, we're focusing on extensions that are offered in the Chrome Web Store, available for free and easy to install.&lt;/p&gt;
&lt;p&gt;Among the tools, we'll highlight those that are&lt;span&gt; most useful for web designers and developers&lt;/span&gt;. We hope you find them useful and get you better results. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/chrome-extensions-for-web-developers/&amp;amp;ved=2ahUKEwjNobWsr-fyAhX_yzgGHYoACLUQFnoECAMQBQ&amp;amp;usg=AOvVaw3LrSRSp_yMsQU7StlCW8qG"&gt;15 Must-Have Browser Extensions for Web Developers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Create Custom Form Validation in React with Yup</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 13 Sep 2021 07:08:37 +0000</pubDate>
      <link>https://dev.to/alexdevero/how-to-create-custom-form-validation-in-react-with-yup-59ln</link>
      <guid>https://dev.to/alexdevero/how-to-create-custom-form-validation-in-react-with-yup-59ln</guid>
      <description>&lt;p&gt;When building forms you have to make sure all fields are filled correctly. There are multiple solutions for this, aside to the basic HTML form validation. One of these options is a library called Yup. This tutorial will show you how to use Yup to create custom form validation for forms build with React.&lt;/p&gt;

&lt;p&gt;You can find demo for this tutorial on my &lt;a href="https://codesandbox.io/s/react-form-with-yup-validation-l1scz"&gt;Codesandbox&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-word-on-form-validation"&gt;
  &lt;/a&gt;
  A word on form validation
&lt;/h2&gt;

&lt;p&gt;There are multiple ways to solve the problem with form validation. The most basic and also most accessible is the native way. This is the validation provided by browsers. This validation works well if you use correct &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input#input_types"&gt;field types&lt;/a&gt; and don't need any customization. Then, there are bigger, all-in-one solutions, such as &lt;a href="https://formik.org"&gt;Formik&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These solutions offer a lot of flexibility and customization. They are often also more developer-friendly. The downside is that they are also heavier, or bigger, and often require deep implementation. If all you need is just one thing, such as validation, it may not be a reason to rewrite your solution to some framework.&lt;/p&gt;

&lt;p&gt;The fact is, you don't have to do that. There is also the third option. There are libraries focused on helping with just one thing, such as form validation, and won't interfere with other things. One of these libraries is &lt;a href="https://github.com/jquense/yup"&gt;Yup&lt;/a&gt;. This library helps with validation of any kind, including forms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#validation-with-yup"&gt;
  &lt;/a&gt;
  Validation with Yup
&lt;/h2&gt;

&lt;p&gt;The way Yups works is simple. You start by defining a schema. This is an object that specifies all values you want to check. It also specifies characteristics of each of these values. For example, you can define that you want to check a value for an email address. In schema, you can call this value &lt;code&gt;email&lt;/code&gt;. This will be the key on the schema object.&lt;/p&gt;

&lt;p&gt;Next, you can specify that this &lt;code&gt;email&lt;/code&gt; value must be a string. Besides that, you can also specify that it should be "type" of an &lt;code&gt;email&lt;/code&gt;. This means that Yup will, as part of validation, test that string if it is in an actual email format. Since you may really need that email, for whatever reason, you can also specify that it is required.&lt;/p&gt;

&lt;p&gt;There are many other options. You can also specify that something is a URL, or that the value can contain only numbers, or that it has to contain at least eight characters. Whatever custom validation rule you need chances are Yup will be able to help you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-introduction"&gt;
  &lt;/a&gt;
  A quick introduction
&lt;/h2&gt;

&lt;p&gt;This tutorial will show you two things. First, it will show you how to create a simple form in React. Second, it will show you how to use Yup library to put together custom validation for custom React form. The form we will build will use &lt;a href="https://blog.alexdevero.com/react-usestate-hook-in-action/"&gt;useState hook&lt;/a&gt; for state management. We will also use &lt;a href="https://reactjs.org/docs/react-api.html#reactmemo"&gt;memo&lt;/a&gt; and &lt;a href="https://blog.alexdevero.com/react-usecallback-hook/"&gt;useCallback&lt;/a&gt; hooks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-note-on-dependencies"&gt;
  &lt;/a&gt;
  A note on dependencies
&lt;/h2&gt;

&lt;p&gt;This tutorial uses the &lt;a href="https://create-react-app.dev"&gt;create-react-app&lt;/a&gt; as the starting template. The &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; dependencies are both version &lt;code&gt;17.0.2&lt;/code&gt;. The &lt;code&gt;react-scripts&lt;/code&gt; is version &lt;code&gt;4.0.0&lt;/code&gt;. The &lt;code&gt;yup&lt;/code&gt; library is the fourth dependency and it is version &lt;code&gt;0.32.9&lt;/code&gt;. The fifth and last dependency is &lt;a href="https://github.com/kolodny/immutability-helper"&gt;immutability-helper&lt;/a&gt;, version &lt;code&gt;3.1.1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This dependency helps to mutate a copy of data without changing the original source. You will use this dependency to update form states for values and errors. That's it. Now, let's get to the tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-form-field-component"&gt;
  &lt;/a&gt;
  The form field component
&lt;/h2&gt;

&lt;p&gt;The first component we need to build is a form field. This will be a simple component. It will render fieldset that will contain label and input, and simple error message. Each field will receive some data through props: &lt;code&gt;onFieldChange&lt;/code&gt;, &lt;code&gt;labelText&lt;/code&gt;, &lt;code&gt;fieldType&lt;/code&gt;, &lt;code&gt;fieldName&lt;/code&gt;, &lt;code&gt;fieldValue&lt;/code&gt; and &lt;code&gt;hasError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;onFieldChange&lt;/code&gt; is handler for input change event. To avoid using &lt;a href="https://reactjs.org/docs/faq-functions.html#arrow-function-in-render"&gt;arrow function in render&lt;/a&gt;, we will create new handler for change event in the field component. This handler will call the &lt;code&gt;onFieldChange&lt;/code&gt; function passed through props with the &lt;code&gt;fieldName&lt;/code&gt; of the current field component and onChange event from the input passed as arguments.&lt;/p&gt;

&lt;p&gt;Next, it will use the &lt;code&gt;labelText&lt;/code&gt; to render custom input label and the &lt;code&gt;hasError&lt;/code&gt; to show error message when appropriate. The &lt;code&gt;fieldType&lt;/code&gt; will specify the type of input we want to render. The &lt;code&gt;fieldName&lt;/code&gt; will specify the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; attributes and help us pair the input with values and errors state. The &lt;code&gt;fieldValue&lt;/code&gt; will pass the input value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import memo and useCallback hooks:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create the Field component:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create handler for change event:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onFieldChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onFieldChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onFieldChange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Render all HTML components:&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;fieldset&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fieldName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;labelText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fieldType&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fieldName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fieldName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onFieldChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fieldValue&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasError&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Please fill in correct value for "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;labelText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;".`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;fieldset&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-form-component"&gt;
  &lt;/a&gt;
  The form component
&lt;/h2&gt;

&lt;p&gt;The form component will be just a wrapper that renders individual &lt;code&gt;&amp;lt;Field /&amp;gt;&lt;/code&gt; components. It will accept &lt;code&gt;values&lt;/code&gt; and &lt;code&gt;errors&lt;/code&gt; states (objects) and &lt;code&gt;onSubmit&lt;/code&gt; handler through props. Properties of &lt;code&gt;values&lt;/code&gt; and &lt;code&gt;errors&lt;/code&gt; states will be appropriately spread between individual &lt;code&gt;&amp;lt;Field /&amp;gt;&lt;/code&gt; components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import memo hook:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Import Field component:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Field&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./form-field&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create the Field component:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;noValidate&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt;
      &lt;span class="na"&gt;labelText&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"First name"&lt;/span&gt;
      &lt;span class="na"&gt;fieldType&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="na"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"firstName"&lt;/span&gt;
      &lt;span class="na"&gt;fieldValue&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onFieldChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onFieldChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt;
      &lt;span class="na"&gt;labelText&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Last name"&lt;/span&gt;
      &lt;span class="na"&gt;fieldType&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="na"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"lastName"&lt;/span&gt;
      &lt;span class="na"&gt;fieldValue&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onFieldChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onFieldChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt;
      &lt;span class="na"&gt;labelText&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Email"&lt;/span&gt;
      &lt;span class="na"&gt;fieldType&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
      &lt;span class="na"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
      &lt;span class="na"&gt;fieldValue&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onFieldChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onFieldChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt;
      &lt;span class="na"&gt;labelText&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Password (+8 characters)"&lt;/span&gt;
      &lt;span class="na"&gt;fieldType&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;
      &lt;span class="na"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;
      &lt;span class="na"&gt;fieldValue&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onFieldChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onFieldChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt;
      &lt;span class="na"&gt;labelText&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Personal website"&lt;/span&gt;
      &lt;span class="na"&gt;fieldType&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt;
      &lt;span class="na"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt;
      &lt;span class="na"&gt;fieldValue&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;website&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;website&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onFieldChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onFieldChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Send&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-app-component"&gt;
  &lt;/a&gt;
  The App component
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;App&lt;/code&gt; component will be the most complex. It will contain all the logic for the form.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-schema"&gt;
  &lt;/a&gt;
  The schema
&lt;/h3&gt;

&lt;p&gt;First, we will create new schema object with &lt;code&gt;Yup&lt;/code&gt;. This schema will define all values (form fields) we want to validate. These values will be &lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;website&lt;/code&gt;. We will want all these values to be &lt;code&gt;string()&lt;/code&gt; and &lt;code&gt;required()&lt;/code&gt;. We will specify the &lt;code&gt;email&lt;/code&gt; value to match email format, with &lt;code&gt;email()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will also specify that &lt;code&gt;password&lt;/code&gt; has to be at least 8 characters long with &lt;code&gt;min(8)&lt;/code&gt;. Lastly, we will specify that the &lt;code&gt;website&lt;/code&gt; has match URL format, with &lt;code&gt;url()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create validation schema:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;website&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#states"&gt;
  &lt;/a&gt;
  States
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;App&lt;/code&gt; component will contain two states, one for form values and one for form errors. Both states will be objects with keys that match keys in &lt;code&gt;formSchema&lt;/code&gt; and &lt;code&gt;fieldName&lt;/code&gt; property on &lt;code&gt;&amp;lt;Field /&amp;gt;&lt;/code&gt; components. Initial values for form values will be empty strings. Initial values for form errors will be &lt;code&gt;false&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... previous code&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create state for form values:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValues&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;website&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="c1"&gt;// Create state for form errors:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setErrors&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;website&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="c1"&gt;// ... rest of the code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#input-field-change-event-handler"&gt;
  &lt;/a&gt;
  Input field change event handler
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;App&lt;/code&gt; component will also define the change handler function that will be passed through the &lt;code&gt;&amp;lt;Form /&amp;gt;&lt;/code&gt; component to individual &lt;code&gt;&amp;lt;Field /&amp;gt;&lt;/code&gt; components. This handler will use setter method for &lt;code&gt;values&lt;/code&gt; state and &lt;code&gt;update&lt;/code&gt; method from &lt;code&gt;immutability-helper&lt;/code&gt; to update value of a specific state key (field name).&lt;/p&gt;

&lt;p&gt;The function will accept both, key (field name) and value to save in the state, as parameters. The &lt;code&gt;immutability-helper&lt;/code&gt; will ensure we are not updating any value directly and working with copies, not originals.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ... previous code&lt;/span&gt;

  &lt;span class="c1"&gt;// Create handler for input change event:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onFieldChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setValues&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevValues&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="c1"&gt;// ... rest of the code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#form-submit-event-handler"&gt;
  &lt;/a&gt;
  Form submit event handler
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Yup&lt;/code&gt; library works with promises. This means that we can either use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then"&gt;then()&lt;/a&gt; handler methods or &lt;a href="https://blog.alexdevero.com/javascript-async-await/"&gt;async/await&lt;/a&gt; syntax to work with validation results. For now, we will use the &lt;code&gt;async/await&lt;/code&gt; syntax to avoid unnecessary nesting with &lt;code&gt;then()&lt;/code&gt; methods. First, we will declare the &lt;code&gt;onSubmit&lt;/code&gt; function as &lt;code&gt;async&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will allow us to use the &lt;code&gt;await&lt;/code&gt; keyword inside this function when we will work with promises. The first thing the &lt;code&gt;onSubmit&lt;/code&gt; function will do is to prevent form submission with &lt;code&gt;event.preventDefault()&lt;/code&gt;. Next, we will check if form is valid by calling &lt;code&gt;isValid()&lt;/code&gt; method on schema for our form, assigned to &lt;code&gt;formSchema&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;We will pass two arguments to the &lt;code&gt;isValid()&lt;/code&gt; method. The first will be the values state, object with all form fields and corresponding values. Second will be options object where we will set the &lt;code&gt;abortEarly&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt;. This means that if Yup encounters any error during validation it will not stop the process.&lt;/p&gt;

&lt;p&gt;It will stop only after all form values are validated. Only then will it return the status for all specified values (form fields). Without this option, Yup would stop after first error and return only that. So, if there were multiple fields with errors, we would not know about it. We would know only about the first error Yup found.&lt;/p&gt;

&lt;p&gt;We will assign the call to &lt;code&gt;isValid()&lt;/code&gt; method to a variable. This method returns a promise. So, we will use the &lt;code&gt;await&lt;/code&gt; keyword to pause the execution and wait for the promise to resolve and return some value. Next, we will check if the resolved value is &lt;code&gt;true&lt;/code&gt;. If it is, it means the form is valid. You can do whatever you need to submit the values.&lt;/p&gt;

&lt;p&gt;If the resolved value is &lt;code&gt;false&lt;/code&gt; it can mean one of two things. It can mean that some value is missing, that some field is empty. Or it can mean that some value is in a wrong format. For example, password contains less than 8 characters or URL is not in a correct format. Thing is, we need to know what field has some error.&lt;/p&gt;

&lt;p&gt;In order to get these errors we will call &lt;code&gt;validate()&lt;/code&gt; method on the schema object assigned to &lt;code&gt;formSchema&lt;/code&gt; variable. We will pass the same two arguments as to the &lt;code&gt;isValid()&lt;/code&gt; method: values state object and &lt;code&gt;abortEarly&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt;. This method also returns a promise. However, this promise doesn't resolve with errors, but rejects.&lt;/p&gt;

&lt;p&gt;This means we will need the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch"&gt;catch()&lt;/a&gt; handler function to get those errors. The error object returned by the promise contains property &lt;code&gt;inner&lt;/code&gt;. The value of this property is an array with all errors and details about them. We don't need all those details. We need just the name of the field so we know for which field we should show an error.&lt;/p&gt;

&lt;p&gt;To reduce the amount of information for every error we will use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"&gt;reduce()&lt;/a&gt; method. We will reduce each error object to a simple object where field name will be the key and &lt;code&gt;true&lt;/code&gt; will be its value. After this, we will use the &lt;code&gt;immutability-helper&lt;/code&gt; to update the &lt;code&gt;errors&lt;/code&gt; state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ... previous code&lt;/span&gt;

  &lt;span class="c1"&gt;// Create handler for form submit event:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Prevent form from submitting:&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

      &lt;span class="c1"&gt;// Check the schema if form is valid:&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFormValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;formSchema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;abortEarly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Prevent aborting validation after first error&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFormValid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// If form is valid, continue submission.&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Form is legit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// If form is not valid, check which fields are incorrect:&lt;/span&gt;
        &lt;span class="nx"&gt;formSchema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;abortEarly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Collect all errors in { fieldName: boolean } format:&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;

          &lt;span class="c1"&gt;// Update form errors state:&lt;/span&gt;
          &lt;span class="nx"&gt;setErrors&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevErrors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevErrors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// ... rest of the code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#putting-the-app-component-together"&gt;
  &lt;/a&gt;
  Putting the App component together
&lt;/h3&gt;

&lt;p&gt;Now, we can put all these pieces for the logic together, add the render part with &lt;code&gt;&amp;lt;Form /&amp;gt;&lt;/code&gt; component, and we are done, almost.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import memo, useCallback and useState hooks:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Import update method and yup:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;immutability-helper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Import Form component:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create validation schema:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;website&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Create the App component:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create state for form values:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValues&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;website&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="c1"&gt;// Create state for form errors:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setErrors&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;website&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="c1"&gt;// Create handler for input change event:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onFieldChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setValues&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevValues&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="c1"&gt;// Create handler for form submit event:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Prevent form from submitting:&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

      &lt;span class="c1"&gt;// Check the schema if form is valid:&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFormValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;formSchema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;abortEarly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Prevent aborting validation after first error&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFormValid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// If form is valid, continue submission.&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Form is legit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// If form is not valid, check which fields are incorrect:&lt;/span&gt;
        &lt;span class="nx"&gt;formSchema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;abortEarly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Collect all errors in { fieldName: boolean } format:&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;

          &lt;span class="c1"&gt;// Update form errors state:&lt;/span&gt;
          &lt;span class="nx"&gt;setErrors&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevErrors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevErrors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Render the form:&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;
      &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onFieldChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onFieldChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-main-component-index"&gt;
  &lt;/a&gt;
  The main component (index)
&lt;/h2&gt;

&lt;p&gt;There is one last thing to do. We need to create the component that will render everything we've built so far. This main component will import the &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; component and render it in a &lt;code&gt;rootElement&lt;/code&gt;, which will be div in the main HTML file. Now we are done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import React StrictMode and ReactDOM:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StrictMode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Import App component:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Import any CSS styles:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Render the React app in the DOM:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;rootElement&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-how-to-create-custom-form-validation-in-react-with-yup"&gt;
  &lt;/a&gt;
  Conclusion: How to create custom form validation in React with Yup
&lt;/h2&gt;

&lt;p&gt;Creating custom form validation doesn't have to be hard. Nor does it require using frameworks and all-in-one solutions. There are also smaller libraries, such as Yup, that will help you create custom validation for your forms easily and quickly. I hope that this tutorial helped you understand how to do this.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top 12 Color Palette Tools | Best Color Picker Tools</title>
      <author>Stacksjar</author>
      <pubDate>Mon, 13 Sep 2021 07:04:43 +0000</pubDate>
      <link>https://dev.to/stacksjar/top-12-color-palette-tools-best-color-picker-tools-4egn</link>
      <guid>https://dev.to/stacksjar/top-12-color-palette-tools-best-color-picker-tools-4egn</guid>
      <description>&lt;p&gt;In this post we are going to check top 12 color palettes tools available in the market for free. You can use this color picket tool for free for your next project.&lt;/p&gt;

&lt;p&gt;Html Color Codes&lt;/p&gt;

&lt;p&gt;Get HTML color codes, Hex color codes, RGB and HSL values with our color picker, color chart and HTML color names. Let's go!&lt;/p&gt;

&lt;p&gt;Website: &lt;a href="https://htmlcolorcodes.com/"&gt;HTML Color Codes&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F0LM6HvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yifrzpxckg67k5zswriw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0LM6HvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yifrzpxckg67k5zswriw.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pros and Cons of HTML Color Codes&lt;br&gt;
...&lt;/p&gt;

&lt;p&gt;HueSnap&lt;/p&gt;

&lt;p&gt;HueSnap is a color sharing community for creatives, focused on allowing users to create palettes through snapping colors from images or now, using our color tool.&lt;/p&gt;

&lt;p&gt;Website: &lt;a href="https://www.huesnap.com/"&gt;HueSnap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dzqr_wBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fisyczrejba4su1emkq7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dzqr_wBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fisyczrejba4su1emkq7.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pros and Cons of HTML Color Codes&lt;br&gt;
Pros&lt;/p&gt;

&lt;p&gt;Create Customized Palettes: &lt;br&gt;
Snap colors from your uploaded images or use the color wheel to create a customized palette.&lt;br&gt;
Share Your Creations&lt;br&gt;
Share your created palettes with the community and find color inspirations for projects.&lt;br&gt;
Sync between devices&lt;br&gt;
Access your color palettes through Desktop or your devices on iOS or Android.&lt;/p&gt;

&lt;p&gt;ColourLovers&lt;br&gt;
Share Your Color Ideas &amp;amp; Inspiration. COLOURlovers is a creative community where people from around the world create and share colors, palettes and patterns, discuss the latest trends and explore colorful articles... All in the spirit of love.&lt;/p&gt;

&lt;p&gt;Website: &lt;a href="https://www.colourlovers.com/"&gt;ColourLovers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ghPmHDc7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74gemeo0q5zqo7rg3w96.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ghPmHDc7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74gemeo0q5zqo7rg3w96.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pros and Cons of  Colour Lovers&lt;br&gt;
...&lt;/p&gt;

&lt;p&gt;Colormind&lt;br&gt;
Colormind is a color scheme generator that uses deep learning. It can learn color styles from photographs, movies, and popular art.Different datasets are loaded each day, check back tomorrow for even more color inspiration. Visit the blog for tech info or have a look at our API&lt;/p&gt;

&lt;p&gt;Website: &lt;a href="http://colormind.io/"&gt;Colormind&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1GVij1Ms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57m19micpee7fwlbt1x9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1GVij1Ms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57m19micpee7fwlbt1x9.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pros and Cons of Colormind:&lt;br&gt;
Colormind has a REST API. The API allows you to access all the features that you see on Colormind.io.&lt;br&gt;
The API is free for personal and non-commercial use.&lt;/p&gt;

&lt;p&gt;ColorHunt&lt;br&gt;
Color Hunt provides Color Palettes for Designers and Artists. Discover the newest hand-picked palettes of Color Hunt&lt;/p&gt;

&lt;p&gt;Website: &lt;a href="https://www.colorhunt.co/"&gt;ColorHunt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ONkGsKwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejdj4m724od9zjcxo2uv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ONkGsKwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejdj4m724od9zjcxo2uv.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pros and Cons of Color Hunt&lt;br&gt;
...&lt;/p&gt;

&lt;p&gt;Eggradients&lt;br&gt;
Eggradient is a color collection tool. The collection builds to make designer life easy. Generating the cool gradients is time-consuming. In this collection, the designer finds what exactly they want.&lt;/p&gt;

&lt;p&gt;Website: &lt;a href="https://www.eggradients.com/"&gt;Eggradients&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--feTF8D2F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9o0khf9cdlrbw34u9x00.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--feTF8D2F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9o0khf9cdlrbw34u9x00.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pros and Cons of Eggradients&lt;br&gt;
...&lt;/p&gt;

&lt;p&gt;Khroma&lt;br&gt;
Khroma is an AI-based color tool built specifically for designers. With Khroma, you get to train an AI algorithm by choosing 50 colours that you like. These colours are then used to train a neural network that can recognise thousands of other similar colours. Based on your preferences, the model generates an endless combination of color palettes.&lt;/p&gt;

&lt;p&gt;Website: &lt;a href="http://khroma.co/"&gt;Khroma&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--abHJKsfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4h7052zklk32pmedch1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--abHJKsfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4h7052zklk32pmedch1.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pros and Cons of Khroma&lt;br&gt;
...&lt;/p&gt;

&lt;p&gt;Read Complete Article Here:- &lt;a href="https://stacksjar.com/post/top-12-color-palette-tools-best-color-picker-tools"&gt;Top 12 Color Palette Tools | Best Color Picker Tools&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>uiweekly</category>
      <category>productivity</category>
      <category>design</category>
    </item>
    <item>
      <title>The rules of corporate life!</title>
      <author>Faieq Hamim</author>
      <pubDate>Mon, 13 Sep 2021 06:59:01 +0000</pubDate>
      <link>https://dev.to/faieqhamim/welcome-1p47</link>
      <guid>https://dev.to/faieqhamim/welcome-1p47</guid>
      <description>&lt;p&gt;1) Don't trust everyone.&lt;br&gt;
2) What happens in the office remains in the office. Never take office gossips to home &amp;amp; vice versa.&lt;br&gt;
3) Enter office on time, leave on time; your desktop is not helping improve your health.&lt;br&gt;
4) Never make GF/BF or Brothers/Sisters in office. It will always backfire on you.&lt;br&gt;
5) Expect nothing. If somebody helps, feel thankful. If not, it’s still fine; you will learn to know things on your own.&lt;br&gt;
6) Never rush for the position. If you get promoted, congratulations. If not, it doesn't matter. You will always be remembered for your knowledge and politeness, not for your designation.&lt;br&gt;
7) Never run behind office stuff always; you have better things to do in life.&lt;br&gt;
8) Avoid taking everything in your ego and personal; your salary matters, you are being paid. Use your assets to get happiness.&lt;br&gt;
9) It doesn’t matter how people treat you. Be humble and help others. Remember, you are not everyone’s cup of tea.&lt;br&gt;
10) In the end, nothing matters except family, friends, home, inner peace, and the most important being Healthy.&lt;/p&gt;

</description>
      <category>corporatelife</category>
    </item>
    <item>
      <title>CentOS 8 Depoların Düzenlenmesi, Depoların Erişilebilir Hale Getirilmesi</title>
      <author>Turan Kılıç</author>
      <pubDate>Mon, 13 Sep 2021 06:43:40 +0000</pubDate>
      <link>https://dev.to/aciklab/centos-8-depolarin-duzenlenmesi-depolarin-erisilebilir-hale-getirilmesi-1hd1</link>
      <guid>https://dev.to/aciklab/centos-8-depolarin-duzenlenmesi-depolarin-erisilebilir-hale-getirilmesi-1hd1</guid>
      <description>&lt;p&gt;Merhabalar, bugün CentOS makinelerde update işlemi sırasında karşılaşılan hatadan ve çözümünden bahsedeceğiz. Hadi başlayalım :)&lt;/p&gt;

&lt;p&gt;CentOS makinelerde, yükleme ve güncelleme için tutulan Repository'ler &lt;code&gt;/etc/yum.repos.d&lt;/code&gt; dizini altında yer almaktadır.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e-D5UqtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20dui46bvjmad2jqgi2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e-D5UqtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20dui46bvjmad2jqgi2y.png" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bu repo'lar sayesinde makine update edilir ve makineye uygulamalar yüklenir. Bu depolara erişim, makine internete açıksa oldukça basittir fakat makine iç ağda ise (yani internete çıkamıyorsa) erişimde hata alınabilmektedir. Alınan hata şu şekilde olabilir: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;[Operation too slow. Less than 1000 bytes/sec transferred the last 30 seconds]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Depolara erişilemediği için bu hata ile karşılaşılabilir ve gerekli güncellemeler gerçekleştirilemez ya da askıda kalır. Tekrar tekrar update işlemini gerçekleştirmeye çalışmak da herhangi bir işe yaramaz.&lt;/p&gt;

&lt;p&gt;Bu sorunun üstesinden gelmek için repo dosyalarının içerisindeki bazı satırların değiştirilmesi gerekmektedir. Çalıştığınız kurumun size sağlamış olduğu CentOS repo adresine giderek (örnek olarak: &lt;a href="http://depofiles.turan.lab.tr/centos/8/"&gt;http://depofiles.turan.lab.tr/centos/8/&lt;/a&gt; gibi bir adres) gerekli repo dosyalarının bulunduğundan emin olun.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--17kxmF-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcwtqnfcmt331m8u7lns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--17kxmF-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcwtqnfcmt331m8u7lns.png" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Görüldüğü üzere adreste bulunan çoğu dizin, makinemizde bulunan repo dosyalarımızın adları ile uyuşmakta. (AppStream, BaseOS, FastTrack vb.)&lt;/p&gt;

&lt;p&gt;Temel güncellemeler genelde &lt;strong&gt;BaseOS.repo&lt;/strong&gt; dosyası üzerinden gerçekleştiği için sadece &lt;strong&gt;BaseOS.repo&lt;/strong&gt; dosyasının içeriğini değiştirmek yeterlidir fakat spesifik uygulamaların kurulumu ve güncellenmesi için diğer repo dosyalarının içeriğinin de değiştirilmesi gerekmektedir.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#baseosrepo-dosyas%C4%B1n%C4%B1n-d%C3%BCzenlenmesi"&gt;
  &lt;/a&gt;
  BaseOS.repo dosyasının düzenlenmesi
&lt;/h2&gt;

&lt;p&gt;Öncelikle &lt;strong&gt;nano&lt;/strong&gt; komutu ile BaseOS.repo dosyasını açalım.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano /etc/yum.repos.d/CentOS-Linux-BaseOS.repo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Daha sonra &lt;strong&gt;mirrorlist&lt;/strong&gt; satırını yorum satırı olarak işaretleyelim ve &lt;strong&gt;baseurl&lt;/strong&gt; satırını yorum satırı olmaktan çıkarıp bize verilen adrese göre düzenleyelim:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BsViBvzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lbppfvf5n7brggitutd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsViBvzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lbppfvf5n7brggitutd.png" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;baseurl satırında düzenleme yaparken, &lt;code&gt;kurum_tarafından_size_verilen_adres/centos/8/BaseOS/$basearch/os/&lt;/code&gt; olduğundan emin olun.&lt;/p&gt;

&lt;p&gt;Bu işlemi gerçekleştirdikten sonra dosyayı kaydedip çıkın ve tekrar update işlemini gerçekleştirin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yum update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu sefer karşınıza erişim hatasının çıkmaması gerekiyor, eğer farklı uygulamalar ve güncellemeleri gerekiyorsa diğer repo dosyalarının da içeriklerini değiştirebilirsiniz.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#powertoolsrepo-dosyas%C4%B1n%C4%B1n-d%C3%BCzenlenmesi"&gt;
  &lt;/a&gt;
  PowerTools.repo dosyasının düzenlenmesi
&lt;/h2&gt;

&lt;p&gt;Örnek olarak benim powertools reposu içerisindeki paketlere ihtiyacım var. İlk olarak dosyayı düzenliyorum.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano /etc/yum.repos.d/CentOS-Linux-PowerTools.repo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dosyanın ilk hali:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cu0HPwHZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1nwwlzz0lu3184p92z3y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cu0HPwHZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1nwwlzz0lu3184p92z3y.png" alt="4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yapılan işlemler:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mirrorlist satırı yorum satırı olarak işaretlendi,&lt;/li&gt;
&lt;li&gt;Baseurl satırı yorum satırı olmaktan çıkarıldı,&lt;/li&gt;
&lt;li&gt;Baseurl satırındaki url kısmı kurumun vermiş olduğu adrese göre düzenlendi.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dosyanın son hali:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9HVPfIFP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gws6vb3t70hb37pmny04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9HVPfIFP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gws6vb3t70hb37pmny04.png" alt="5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Update işlemi:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yum update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7dnuUcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2we13fbeugcsz5ecl31s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7dnuUcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2we13fbeugcsz5ecl31s.png" alt="6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Makinem hali hazırda güncel olduğu için &lt;strong&gt;Nothing to do&lt;/strong&gt; yazmakta böylelikle herhangi bir update işlemi gerçekleşmeyecek. Sizin makinenizde ise update işlemi başarıyla başlayacaktır.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to choose the right website designing company?</title>
      <author>Purpleno</author>
      <pubDate>Mon, 13 Sep 2021 06:24:40 +0000</pubDate>
      <link>https://dev.to/purpleno_inc/how-to-choose-the-right-website-designing-company-ec8</link>
      <guid>https://dev.to/purpleno_inc/how-to-choose-the-right-website-designing-company-ec8</guid>
      <description>&lt;p&gt;Are you looking for a distinct web interface which is good enough to enhance the user experience of your target web visitors? Well, to get the mission accomplished what you need in the first place is a bespoke &lt;a href="https://www.purpleno.in/website-designing-services.html"&gt;website designing company&lt;/a&gt; by your side. &lt;br&gt;
However, getting any web design entity will not serve your purpose. You need to have a company that provides optimal performance and ensures your profitability. That's where website designing company Kolkata will be of great assistance. &lt;/p&gt;

&lt;p&gt;Important factors behind selecting website design at Kolkata&lt;/p&gt;

&lt;p&gt;So, without much ado, we should now venture into the most vital aspects which every conscious business owner must mull over before he or she contacts as well as selects a &lt;a href="https://www.purpleno.in/website-designing-services.html"&gt;website designing company in Kolkata&lt;/a&gt; to shape up their digital presence.  &lt;/p&gt;

&lt;p&gt;Estimates of the cost factors &lt;/p&gt;

&lt;p&gt;Cost factors come to the forefront above every other point of consideration. When you decide on the services for your web interface,  you happen to give a careful thought to this aspect in the first place. Web design costs tend to vary depending on whether you are going to opt for a static interface or a dynamic interface. You need to be very cautious in this aspect. If you think that a service provider is plopping additional expenses on you, then it's a good idea to check your references.  One note of advice: a genuine service provider is never going to be on your nerves and hackle you with unjustified designing costs. &lt;/p&gt;

&lt;p&gt;Trusted communication processes &lt;/p&gt;

&lt;p&gt;The communication process which you intend to carry out with the service provider should be a pristine one. There is no place for misconduct as well as non-transparent dealings. You should judge the true value of the web design service provider depending on how translucent and upright they choose to be with you.  &lt;/p&gt;

&lt;p&gt;Figure out their core area of expertise&lt;/p&gt;

&lt;p&gt;Before you start teaming up with the service provider, it's important to check their work portfolio. A quick look at their portfolio will help you delve deep into their core areas of expertise. &lt;/p&gt;

&lt;p&gt;Samples of responsive designs &lt;/p&gt;

&lt;p&gt;Check out the samples and get to know how they deal with the fundamentals such as the content of the website, visual enhancements, and aesthetics as well as usability aspects. &lt;/p&gt;

&lt;p&gt;Promotion strategies &lt;/p&gt;

&lt;p&gt;When you intend to shop for solutions in the fringe of low cost website designing company Kolkata, you should clench onto the leverage of a proficient team to cater perfect remedies for your complex issues. The entity should be able to stop by the right admixture of creative marketing support for the web interface which you had them design for you.    A true designing professional should be through with promotional activities which should be carried out on social media platforms and via other digital podiums. i&lt;/p&gt;

&lt;p&gt;Hope we could share some inscrutable and effective insight that would add colors in your efforts of touching base with the apt &lt;a href="https://www.purpleno.in/"&gt;low cost website designing company Kolkata&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>websitedesig</category>
    </item>
    <item>
      <title>Re-architecting authentication with Service Workers</title>
      <author>Gaurav Behere</author>
      <pubDate>Mon, 13 Sep 2021 06:06:42 +0000</pubDate>
      <link>https://dev.to/gauravbehere/re-architecting-authentication-with-service-workers-4j6j</link>
      <guid>https://dev.to/gauravbehere/re-architecting-authentication-with-service-workers-4j6j</guid>
      <description>&lt;p&gt;A use case of changing the authentication mechanism of a web application without touching a lot of legacy codebase&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
Many times you would encounter situations where you have a legacy codebase in front of you which has been in the market for quite a while. It may be written in a technology that is seeing a downward trend in terms of popularity. You cannot make a change very easily in the architecture of such applications as the amount of risk, testing efforts &amp;amp; impact is huge.&lt;br&gt;
Let me run you through such a use case where we recently had to change the authentication mechanism of an existing legacy web application from a JSP session &amp;amp; a cookie-based authentication mechanism to an MSAL (Microsoft Authentication Library) token-based authentication method.&lt;br&gt;
What this essentially means is the login should grant a token to the web application acquiring the token using MSAL (react-msal) in our case &amp;amp; the same token should be used for making further calls to the server.&lt;br&gt;
Read more about MSAL tokens here:&lt;br&gt;
&lt;a href="https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/acquire-token.md"&gt;https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/acquire-token.md&lt;/a&gt;&lt;br&gt;

&lt;h2&gt;
  &lt;a href="#challenges"&gt;
  &lt;/a&gt;
  Challenges
&lt;/h2&gt;

&lt;p&gt;There are two challenges we are looking at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;Changes to the webserver&lt;/b&gt;: The web server should be able to authenticate our requests with the token that the client application is going to send as a bearer token.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Changes to the legacy UI code written in JSP&lt;/b&gt;: The amount of legacy code which is an amalgamation of many UI technologies where there are requests like POST from FORM submits, XHR calls, calls through native JS fetch, Jquery’s $.ajax &amp;amp; a bit of axios too. It becomes very hard to avoid changes in almost every part of the code &amp;amp; still get the new authentication mechanism working where every call to our server should have a bearer token attached to the HTTP header.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lpyqzQBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AkFSS6PQtTtxIG66AVRJOwQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lpyqzQBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AkFSS6PQtTtxIG66AVRJOwQ.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding to the complexity of the application, the code base grew up with a lot of acquisitions of companies adding to the integrations in the existing codebase. Thus the application grew horizontally in terms of technology over the last 10 years.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NSdAYvqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/0%2A6knY-qVrAJOBwvx1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NSdAYvqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/0%2A6knY-qVrAJOBwvx1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also when you have such a legacy codebase, it becomes hard to keep the knowledge fresh. There are pieces of the code that developers might not have even looked at for a long long time. Touching such code may result in unaccounted for side effects as the application has a significant number of customers who are using different versions &amp;amp; flows of the application.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#how-can-we-have-a-centralized-solution-which-avoids-making-changes-to-a-lot-of-files"&gt;
  &lt;/a&gt;
  How can we have a centralized solution which avoids making changes to a lot of files?
&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;Service workers &amp;amp; promises to the rescue.&lt;/b&gt;&lt;br&gt;
We try to avoid changes in the front-end code updating the APIs to authenticate based on the incoming MSAL token.&lt;br&gt;
The solution is to capture all the network calls originated from the web application &amp;amp; append a bearer token in the HTTP header in the request.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FPwiGkNS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AQpmgo07lva2ft-0iMFMusA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FPwiGkNS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AQpmgo07lva2ft-0iMFMusA.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take a hold of all the network calls generated by your web application using a service worker registered at the root of your web application.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;some dummy token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// This needs to be requested from MSAL library&lt;/span&gt;

  &lt;span class="c1"&gt;// Responding with a custom promise&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// edit event.request &amp;amp; respond with a fetch of a new request with new headers&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sourceHeaders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pair&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;sourceHeaders&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newHeaders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;sourceHeaders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Authorization&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bearer: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newHeaders&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;respondWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;In the fetch event we need to respond with a new request that has HTTP headers we need. In the gist above, we are just adding a dummy auth token to the request. Here we do a couple of things:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a. We copy all the headers of the incoming request.
b. We create a new request with incoming headers &amp;amp; a new authorization header containing a token.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;b&gt;Now let us get the right token.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Here comes the tricky part. A service worker comes with its own limitations, it has no access to DOM &amp;amp; it can’t access shared storage between the page &amp;amp; itself. Somehow we need to get the token from the main thread &amp;amp; the container app.&lt;br&gt;
Here is a good article explaining how to establish communication between a service worker &amp;amp; the container page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://felixgerschau.com/how-to-communicate-with-service-workers/"&gt;https://felixgerschau.com/how-to-communicate-with-service-workers/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We choose the Broadcast API to get away with the need of the two parties to remember the ports to have a 1:1 communication channel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4V4FlL-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2ANFN2uS3PocIlm9Y0R6Xvrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4V4FlL-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2ANFN2uS3PocIlm9Y0R6Xvrg.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a channel for communication&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BroadcastChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TOKEN_EXCHANGE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getAToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Listen to token response&lt;/span&gt;
    &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="c1"&gt;// Send a token request to the main thread&lt;/span&gt;
    &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TOKEN_REQUEST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#changes-in-the-container-app"&gt;
  &lt;/a&gt;
  Changes in the container app
&lt;/h3&gt;

&lt;p&gt;The container app now needs to listen to the messages on the same broadcast channel &amp;amp; respond with a token.&lt;br&gt;
This allows up to keep the front end legacy code as-is &amp;amp; at the same time have a new authentication mechanism.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#things-to-note"&gt;
  &lt;/a&gt;
  Things to note
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;As our solution is based on service workers, promises &amp;amp; Broadcast API, browser compatibility can be a limitation.&lt;/li&gt;
&lt;li&gt;We still had to re-factor the APIs to honor tokens in the request for authentication.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>architecture</category>
      <category>authentication</category>
    </item>
    <item>
      <title>Which one learn first, React.js or Node.js?</title>
      <author>Al Hasan Dhali</author>
      <pubDate>Mon, 13 Sep 2021 06:04:11 +0000</pubDate>
      <link>https://dev.to/alhasandhali/which-one-learn-first-react-js-or-node-js-1jii</link>
      <guid>https://dev.to/alhasandhali/which-one-learn-first-react-js-or-node-js-1jii</guid>
      <description></description>
      <category>javascript</category>
      <category>react</category>
      <category>node</category>
    </item>
  </channel>
</rss>
