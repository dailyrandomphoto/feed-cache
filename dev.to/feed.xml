<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How CSS pseudo-elements work a ridiculously simple explanation for beginners

</title>
      <author>Peter</author>
      <pubDate>Tue, 04 May 2021 09:58:25 +0000</pubDate>
      <link>https://dev.to/peterlunch/how-css-pseudo-elements-work-a-ridiculously-simple-explanation-for-beginners-49gk</link>
      <guid>https://dev.to/peterlunch/how-css-pseudo-elements-work-a-ridiculously-simple-explanation-for-beginners-49gk</guid>
      <description>&lt;p&gt;Pseudo-elements especially &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; are so hot right now. Amazing sites like &lt;a href="https://www.cyberpunk.net/us/en/"&gt;Cyberpunk.net&lt;/a&gt; use them to create amazing affects. However, lots of beginners don’t fully grasp their power. So, before you can harness their power you first need to understand how they work.&lt;/p&gt;

&lt;p&gt;When I first started working with pseudo-elements, I had no idea what I was doing or how they actually work. I was just copying and pasting other people's code and not really understanding why it was or wasn’t working.&lt;/p&gt;

&lt;p&gt;If you want to harness the power of CSS and get good at it then understanding pseudo-elements is a must. By the end of this post you will have a strong grasp of what pseudo-elements are and how to use them to create stylish elements yourself.&lt;/p&gt;

&lt;p&gt;But first, let’s explore what they are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-pseudoelements"&gt;
  &lt;/a&gt;
  What are Pseudo-Elements
&lt;/h2&gt;

&lt;p&gt;In CSS pseudo-elements are a keyword that you add to &lt;a href="https://www.w3schools.com/cssref/css_selectors.asp"&gt;selectors&lt;/a&gt;. These pseudo elements let you style specific parts of the element you selected. CSS denotes them using two colons &lt;code&gt;::&lt;/code&gt; which helps you tell them apart from CSS pseudo-classes as they have only one colon &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at the general syntax for CSS pseudo-elements before we get into specific pseudo-elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="nd"&gt;::pseudo-element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, you put the CSS selector before the double colon. Next, inside the curly braces you write CSS property value pairs, like you would for any other element you are styling.&lt;/p&gt;

&lt;p&gt;As a real example, we could do something like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.second&lt;/span&gt;&lt;span class="nd"&gt;::selection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;mediumspringgreen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example uses the &lt;code&gt;::selection&lt;/code&gt; pseudo-element on the &lt;code&gt;second&lt;/code&gt; CSS class selector. Now, when you highlight the paragraph text it is a different color and background.&lt;/p&gt;

&lt;p&gt;We’ll explore the &lt;code&gt;::selection&lt;/code&gt; pseudo element some more later. For now I want you to focus on the two major pseudo-elements &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-before-and-after-pseudoelements"&gt;
  &lt;/a&gt;
  What are the before and after pseudo-elements?
&lt;/h2&gt;

&lt;p&gt;The before and after pseudo-elements let you insert content onto a web page. They allow you to do this without the need for it to be in the HTML. Essentially you can insert content through CSS.&lt;/p&gt;

&lt;p&gt;One important thing to note when it comes to the before and after pseudo-elements is that when they are created they are not actually on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction"&gt;DOM&lt;/a&gt;. In other words, they are fake elements, this is why they are call &lt;em&gt;“pseudo&lt;/em&gt; elements as the word pseudo means fake. So, the name fits because these elements don’t actually change anything in the document. They are hidden elements that are only visible to the user and not the DOM.&lt;/p&gt;

&lt;p&gt;What this looks like in practice is this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result would be something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
  before
    &lt;span class="c"&gt;&amp;lt;!--actual h1 element --&amp;gt;&lt;/span&gt;
  after
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Knowing that these elements are fake it’s time to look at the first fake element you will use a lot in web development, the before pseudo-element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-before-pseudoelement"&gt;
  &lt;/a&gt;
  The before pseudo-element
&lt;/h3&gt;

&lt;p&gt;In CSS, &lt;code&gt;::before&lt;/code&gt; creates a pseudo-element that is the first child of the selected element. To put it another way, it is a pseudo-element that comes before the content of the CSS selector. So if you have a paragraph element it would look like this &lt;code&gt;p::before&lt;/code&gt; with &lt;code&gt;p&lt;/code&gt; being the selector and &lt;code&gt;::before&lt;/code&gt; being the pseudo-element.&lt;/p&gt;

&lt;p&gt;With this in mind let’s look at some examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Mr. and Mrs. Dursley of number four, Privet Drive, were proud to say that they were perfectly normal, thank you very much.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7f0909&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffc500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"the boy who lived"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;130%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#5BC8F8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pprhb53f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ilm1imtlvnlryw0qskp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pprhb53f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ilm1imtlvnlryw0qskp.png" alt="::before pseudo-element result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the code above, we have added the content &lt;em&gt;'the boy who lived'&lt;/em&gt; before the CSS selector which in this case is the &lt;code&gt;p&lt;/code&gt; tag and its content.&lt;/p&gt;

&lt;p&gt;We were then able to style the content before the selector however we wanted.&lt;/p&gt;

&lt;p&gt;If we check the developer tools in the &lt;a href="https://codepen.io/pin0s/pen/dyNxvXZ"&gt;codepen&lt;/a&gt;, you will see that there is no element &lt;em&gt;'the boy who lived'&lt;/em&gt; There is just a pseudo-element &lt;code&gt;::before&lt;/code&gt;. As it isn't really on the DOM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ytx2LfGK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hghwiq4cytiba8sbh6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ytx2LfGK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hghwiq4cytiba8sbh6x.png" alt="pseudo-element before showing in dev tools but not on the dom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's look at another example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;harry potter and the sorcerer's stone&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffc500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vQ3LpF5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9zwqoyqvhj1uxu5kvlz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vQ3LpF5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9zwqoyqvhj1uxu5kvlz.png" alt="before pseudo-element with block styling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, the before pseudo-element is using the &lt;code&gt;display&lt;/code&gt; property with the value &lt;code&gt;block&lt;/code&gt;. This then moves the background with a width of 5px above and before the &lt;code&gt;h1&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;Now you know what the before pseudo-element does let's look at the after pseudo-element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-after-pseudoelement"&gt;
  &lt;/a&gt;
  The After pseudo-element
&lt;/h3&gt;

&lt;p&gt;In CSS, &lt;code&gt;::after&lt;/code&gt; creates a pseudo-element this is the last child of the selected element. So much like the &lt;code&gt;::before&lt;/code&gt;, it is a pseudo-element that comes after the content of the CSS selector.&lt;/p&gt;

&lt;p&gt;Keeping that in mind let’s use the second example from the before section and add a line underneath with the after pseudo-element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffc500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ayKP3Iz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bi16jjzusd8ju3i6izei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayKP3Iz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bi16jjzusd8ju3i6izei.png" alt="before &amp;amp; after pseudo-element with block styling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We now have a line under the &lt;code&gt;h1&lt;/code&gt;. How cool is that, we can make our own little styling elements to create great looking elements.&lt;/p&gt;

&lt;p&gt;By now, you should now have a good understanding of how the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo-elements work. To further improve our knowledge we need to understand what the &lt;code&gt;content&lt;/code&gt; property is and what it is doing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-property"&gt;
  &lt;/a&gt;
  Content property
&lt;/h2&gt;

&lt;p&gt;Did you notice the use of the &lt;code&gt;content&lt;/code&gt; property, with the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo-elements? Objects that are inserted using the &lt;code&gt;content&lt;/code&gt; property are anonymous replaced &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element"&gt;elements&lt;/a&gt;. Put in simpler terms, it is an element whose content is not affected by the current documents styles.&lt;/p&gt;

&lt;p&gt;Thus, when using the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo-elements, you &lt;b&gt;must&lt;/b&gt; use the &lt;code&gt;content&lt;/code&gt; property to make your styles visible. Did you also notice that the content is inside the element? In spite of the fact that the naming of &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; make it feel like the content should come before or after the element. But, it is definitely before or after the content inside the element.&lt;/p&gt;

&lt;p&gt;Next, to better understand the content property let’s look at what values it takes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#content-property-accepted-values"&gt;
  &lt;/a&gt;
  Content Property Accepted Values
&lt;/h3&gt;

&lt;p&gt;The content property takes many types of values. The default value is &lt;code&gt;normal&lt;/code&gt;. It means 'normally' nothing will be visible to the user. Thus, you give the content property one of the values below.&lt;/p&gt;

&lt;p&gt;The other values content can be are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;string&lt;/strong&gt; - this sets the content to be the string you specify.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;counter&lt;/strong&gt; - used to style lists.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;image&lt;/strong&gt; - this sets the content to be an image you specify with a &lt;code&gt;url()&lt;/code&gt; or &lt;code&gt;gradient&lt;/code&gt; data type. The image is inserted at its exact dimensions, meaning you cannot resize the image.

&lt;ul&gt;
&lt;li&gt;please note that to insert alt text you use a &lt;code&gt;/&lt;/code&gt; after the &lt;code&gt;url()&lt;/code&gt; and a string description of the image. For example: &lt;code&gt;content: url("https://www.example.com/test.png") / "This is the alt text";&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nothing&lt;/strong&gt; - Useful for inserting images as background-images (set width and height, and can even resize with background-size), or making other cool styling features (link to dev.to post).&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;attr()&lt;/strong&gt; value - Sets the content as the string value of the selected elements attribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-awesome-pseudoelements"&gt;
  &lt;/a&gt;
  Other awesome pseudo-elements
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#selection"&gt;
  &lt;/a&gt;
  Selection
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;::selection&lt;/code&gt; - This, CSS pseudo-element applies styles to the part of a document that has been highlighted by the user. To put it another way, it makes the highlighter on your page look pretty when people highlight text to copy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::selection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;cyan&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#firstletter"&gt;
  &lt;/a&gt;
  First-letter
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;::first-letter&lt;/code&gt; - CSS pseudo-element applies styles to the first letter of the first line of a block-level element, but only when not preceded by other content (such as images or inline tables).&lt;/p&gt;

&lt;p&gt;To rephrase the above, this pseudo-element lets you style the first letter of the first line of the element you select. This only happens on elements that are categorized as &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements"&gt;block-level elements&lt;/a&gt; check that link out for a list of block level elements.&lt;/p&gt;

&lt;p&gt;As a result, we can use this pseudo-element to make awesome drop caps for our paragraphs, see the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::first-letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;117&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;212&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;173&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;81&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pin0s/embed/BapXWOg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firstline"&gt;
  &lt;/a&gt;
  First-line
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;::first-line&lt;/code&gt; - CSS pseudo-element applies styles to the first line of a block-level element.&lt;/p&gt;

&lt;p&gt;In plain English the above means, this pseudo-element lets you style the the first line of the element you select. Again like with first letter this only happens to block level elements.&lt;/p&gt;

&lt;p&gt;Let's add the below code to the &lt;code&gt;first-letter&lt;/code&gt; example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::first-line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RT2_NA9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvj64lldpoe8kmz176d1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RT2_NA9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvj64lldpoe8kmz176d1.png" alt="first-letter and first-line pseudo-elements effects on p element"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;code&gt;p&lt;/code&gt; now has drop caps and red text for the first line. Play around with width in the pen above to see what happens as you increase and decrease the width.&lt;/p&gt;

&lt;p&gt;Did you notice how if the text moves lines the color changes? You have to be careful taking into consideration things like the width of the element and how it will respond on different screens when styling the first line.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#marker"&gt;
  &lt;/a&gt;
  Marker
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;::marker&lt;/code&gt; CSS pseudo-element selects the marker box of a list item, which typically contains a bullet or number.&lt;/p&gt;

&lt;p&gt;The marker pseudo-element will allow you to replace the counter content value. For an example on how a counter works I encourage you to check out this &lt;a href="https://www.freecodecamp.org/news/css-before-and-after-how-to-use-the-content-property/"&gt;post&lt;/a&gt;. That said, a counter is just the bullet point of number in front of a list item (&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;) and the &lt;code&gt;::marker&lt;/code&gt;pseudo-element lets you style them.&lt;/p&gt;

&lt;p&gt;Let's look at an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Nintendo Hero's&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Mario&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Link&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Samus&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;::marker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e4000f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pin0s/embed/ExZqWBo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The above example is pretty simple, we have just changed the bullet point color to red. But, you can do lot's of things like change the style or even use emoji's.&lt;/p&gt;

&lt;p&gt;Finally, it is important to note that the ::marker pseudo-element is not fully supported at the time of writing this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rcPjH5Bc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx48djtc2wfdd3ml9dsw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rcPjH5Bc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx48djtc2wfdd3ml9dsw.png" alt="browser support for marker pseudo element"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Now you should have a good understanding of pseudo-elements. Let’s recap on a few important notes.&lt;/p&gt;

&lt;p&gt;Firstly, pseudo elements let you style specific parts of the element you selected. Pseudo-elements are denoted by double colons.&lt;/p&gt;

&lt;p&gt;Next, remember that pseudo-elements do not appear in the DOM as they are fake elements. The way you make them visible to the user is to utilize the &lt;code&gt;content&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Lastly, if you learnt something from this post then checkout the rest of my posts &lt;a href="https://bit.ly/2Re6Vdf"&gt;here&lt;/a&gt; or &lt;a href="https://mailchi.mp/4fb2a2723574/peter-lunch-link"&gt;sign up to my newsletter&lt;/a&gt; to get ridiculously good and super exclusive newbie content.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>20 Linux System Administrator Interview Questions - Land the Job in 2021</title>
      <author>Course Probe</author>
      <pubDate>Tue, 04 May 2021 09:42:06 +0000</pubDate>
      <link>https://dev.to/courseprobe/20-linux-system-administrator-interview-questions-land-the-job-in-2021-1ak</link>
      <guid>https://dev.to/courseprobe/20-linux-system-administrator-interview-questions-land-the-job-in-2021-1ak</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Find below a collection of Questions &amp;amp; Answers for Linux System Administrator updated in May 2021. Also I’ve included a collection of resources to help you better prepare for your next job interview in 2021. Best of Luck landing your new Job!!&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5W51uYrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/340/1%2AqQqS2gMOOtb7AwBVckEYqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5W51uYrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/340/1%2AqQqS2gMOOtb7AwBVckEYqg.png" alt="SysAdmin Interview Questions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leanpub.com/sysadmin-interview-questions"&gt;SysAdmin Interview Questions&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;1 &lt;strong&gt;What is the difference between rm and rm -rf?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The rm command by itself only deletes the named files (and not directories). With -rf you add two additional features: The -r, -R, or --recursive flag recursively deletes the directory’s contents, including hidden files and subdirectories, and the -f, or --force, flag makes rm ignore nonexistent files, and never prompt for confirmation.&lt;/p&gt;

&lt;p&gt;2 &lt;strong&gt;How do you make a process run in the background, and what are the advantages of doing so?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can make a process run in the background by adding the special character &amp;amp; at the end of the command. Generally, applications that take too long to execute, and don’t require user interaction are sent to the background so that we can continue our work in the terminal.&lt;/p&gt;

&lt;p&gt;3 &lt;strong&gt;What are the first five commands you type on a *nix server after login?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;lsblk to see information on all block devices&lt;br&gt;
who to see who is logged into the server&lt;br&gt;
top to get a sense of what is running on the server&lt;br&gt;
df -khT to view the amount of disk space available on the server&lt;br&gt;
netstat to see what TCP network connections are active&lt;/p&gt;

&lt;p&gt;4 &lt;strong&gt;Is running these commands as root a good or bad idea?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Running (everything) as root is bad due to two major issues. The first is risk. Nothing prevents you from making a careless mistake when you are logged in as root. If you try to change the system in a potentially harmful way, you need to use sudo, which introduces a pause (while you’re entering the password) to ensure that you aren’t about to make a mistake.&lt;/p&gt;

&lt;p&gt;The second reason is security. Systems are harder to hack if you don’t know the admin user’s login information. Having access to root means you already have one half of the working set of admin credentials.&lt;/p&gt;

&lt;p&gt;5 &lt;strong&gt;Compress.tgz has a file size of approximately 15GB. How can you list its contents, and how do you list them only for a specific file?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To list the file’s contents:&lt;/p&gt;

&lt;p&gt;tar tf archive.tgz&lt;/p&gt;

&lt;p&gt;To extract a specific file:&lt;/p&gt;

&lt;p&gt;tar xf archive.tgz filename&lt;/p&gt;

&lt;p&gt;6 &lt;strong&gt;Which port is used for the ping command?&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;The ping command uses ICMP. Specifically, it uses ICMP echo requests and ICMP echo reply packets.&lt;/p&gt;

&lt;p&gt;ICMP does not use either UDP or TCP communication services: Instead, it uses raw IP communication services. This means that the ICMP message is carried directly in an IP datagram data field.&lt;/p&gt;

&lt;p&gt;7 &lt;strong&gt;What is the difference between a router and a gateway? What is the default gateway?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Router describes the general technical function (layer 3 forwarding), or a hardware device intended for that purpose, while gateway describes the function for the local segment (providing connectivity to elsewhere). You could also state that you "set up a router as a gateway." Another term is hop, which describes forwarding between subnets.&lt;/p&gt;

&lt;p&gt;The term default gateway is used to mean the router on your LAN, which has the responsibility of being the first point of contact for traffic to computers outside the LAN.&lt;/p&gt;

&lt;p&gt;8 &lt;strong&gt;Explain the boot process for Linux.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;BIOS -&amp;gt; Master Boot Record (MBR) -&amp;gt; GRUB -&amp;gt; the kernel -&amp;gt; init -&amp;gt; runlevel&lt;/p&gt;

&lt;p&gt;9 &lt;strong&gt;How do you check the error messages while the server is booting up?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kernel messages are always stored in the kmsg buffer, visible via the dmesg command.&lt;/p&gt;

&lt;p&gt;Boot issues and errors call for a system administrator to look into certain important files, in conjunction with particular commands, which are each handled differently by different versions of Linux:&lt;/p&gt;

&lt;p&gt;/var/log/boot.log is the system boot log, which contains all that unfolded during the system boot.&lt;br&gt;
/var/log/messages stores global system messages, including the messages logged during system boot.&lt;br&gt;
/var/log/dmesg contains kernel ring buffer information.&lt;/p&gt;

&lt;p&gt;10 &lt;strong&gt;How do you change kernel parameters? What kernel options might you need to tune?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To set the kernel parameters in Unix-like systems, first edit the file /etc/sysctl.conf. After making the changes, save the file and run the sysctl -p command. This command makes the changes permanent without rebooting the machine&lt;/p&gt;

&lt;p&gt;11 &lt;strong&gt;How do you run a script as another user without their password?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For example, if you were editing the sudoers file (such as /private/etc/sudoers), you might use visudo to add the following:&lt;/p&gt;

&lt;p&gt;user1 ALL=(user2) NOPASSWD: /opt/scripts/bin/generate.sh&lt;/p&gt;

&lt;p&gt;12 &lt;strong&gt;What is the UID 0 toor account? Have you been compromised?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The toor user is an alternative superuser account, where toor is root spelled backward. It is intended to be used with a non-standard shell, so the default shell for root does not need to change.&lt;/p&gt;

&lt;p&gt;This purpose is important. Shells which are not part of the base distribution, but are instead installed from ports or packages, are installed in /usr/local/bin; which, by default, resides on a different file system. If root’s shell is located in /usr/local/bin and the file system containing /usr/local/bin is not mounted, root could not log in to fix a problem, and the sysadmin would have to reboot into single-user mode to enter the shell’s path.&lt;/p&gt;

&lt;p&gt;13 &lt;strong&gt;How does tracert work and what protocol does it use?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The command tracert—or traceroute depending on the operating system—allows you to see exactly what routers you touch as you move through the chain of connections to your final destination. If you end up with a problem where you can’t connect to or ping your final destination, a tracert can help in that you can tell exactly where the chain of connections stops.&lt;/p&gt;

&lt;p&gt;14 &lt;strong&gt;How do you protect your system from getting hacked?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By following the principle of least privileges and these practices:&lt;/p&gt;

&lt;p&gt;Encrypt with public keys, which provides excellent security.&lt;br&gt;
Enforce password complexity.&lt;br&gt;
Understand why you are making exceptions to the rules above.&lt;br&gt;
Review your exceptions regularly.&lt;br&gt;
Hold someone to account for failure.&lt;/p&gt;

&lt;p&gt;15 &lt;strong&gt;What is LVM, and what are the advantages of using it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;LVM, or Logical Volume Management, uses a storage device management technology that gives users the power to pool and abstract the physical layout of component storage devices for easier and flexible administration. Using the device mapper Linux kernel framework, the current iteration (LVM2) can be used to gather existing storage devices into groups and allocate logical units from the combined space as needed.&lt;/p&gt;

&lt;p&gt;16 &lt;strong&gt;What are sticky ports?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sticky ports are one of the network administrator’s best friends and worst headaches. They allow you to set up your network so that each port on a switch only permits one (or a number that you specify) computer to connect on that port, by locking it to a particular MAC address.&lt;/p&gt;

&lt;p&gt;17 &lt;strong&gt;What is a false positive and false negative in the case of IDS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When the Intrusion Detection System (IDS) device generates an alert for an intrusion which has actually not happened, this is false positive. If the device has not generated any alert and the intrusion has actually happened, this is the case of a false negative.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Comment Below what would be your answers to the following questions ... Help others by commenting additional questions you think are important !!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;18 What is the difference between local and remote port forwarding?&lt;/p&gt;

&lt;p&gt;19 What is the difference between local and remote port forwarding?&lt;/p&gt;

&lt;p&gt;20 How do you catch a Linux signal on a script?&lt;/p&gt;




&lt;p&gt;Additional Resources that might come handy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=NcMZU1aTATA&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flinux-foundation-ceritifed-system-administrator-lfcs%2F"&gt;Linux Foundation Certified System Administrator (LFCS)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coursesim.com/course/red-hat-certified-system-administrator-prep-course/"&gt;Red Hat Certified System Administrator Prep Course&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;If you are thinking about starting your career as a Linux System Administrator or Sysadmin and you would like to know more about System Administration then keep reading below:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-does-a-linux-system-administrator-do"&gt;
  &lt;/a&gt;
  What does a Linux system administrator do?
&lt;/h2&gt;

&lt;p&gt;As a Linux system Administrator you will have to deal with tasks like making sure all files and systems have the proper backup in place, you will be restoring information, recovering from data corruption and other disasters like security attacks. &lt;/p&gt;

&lt;p&gt;You will also have to deal with maintenance, applications and configurations in the servers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-prepare-for-a-system-administrator-interview"&gt;
  &lt;/a&gt;
  How do I prepare for a system administrator interview?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Learn about Linux and System Administration in general&lt;/li&gt;
&lt;li&gt;Review the different systems and how they are used by different businesses.&lt;/li&gt;
&lt;li&gt;Learn about &lt;a href="https://leanpub.com/devops-engineer"&gt;Role of a DevOps Engineer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Get a System administrator certification.&lt;/li&gt;
&lt;li&gt;Be ready to talk about any previous IT experience with examples.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-should-a-linux-administrator-know"&gt;
  &lt;/a&gt;
  What should a Linux administrator know?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;User Management in the system (Linux/Win)&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;Hardware setup including routers, vpns and firewalls&lt;/li&gt;
&lt;li&gt;Remote system administration&lt;/li&gt;
&lt;li&gt;Managing Scheduled Data Backups&lt;/li&gt;
&lt;li&gt;Software Installation and Updates&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-long-does-it-take-to-learn-system-administration"&gt;
  &lt;/a&gt;
  How long does it take to learn system administration?
&lt;/h2&gt;

&lt;p&gt;It takes at least 1 year studying and getting your certifications, it's a good idea during this time to also get an intern position. Then it will take an additional 2 years for you to build good experience and to progress into a senior position within your company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-linux-administration-jobs-in-demand-"&gt;
  &lt;/a&gt;
  Are Linux Administration jobs in demand ?
&lt;/h2&gt;

&lt;p&gt;According to the US Bureau of Labor Statistics, there will be a growth rate of 6% between the years 2016 to 2026, this means more roles will open since technologies will evolve and companies will expand business. Apart from this there's an expected increase in salary for the roles of Linux System Administrator.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>devops</category>
    </item>
    <item>
      <title>VSCode tips: commit characters</title>
      <author>Siddharth</author>
      <pubDate>Tue, 04 May 2021 09:36:41 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/vscode-tips-commit-characters-e2a</link>
      <guid>https://dev.to/siddharthshyniben/vscode-tips-commit-characters-e2a</guid>
      <description>&lt;p&gt;VSCode is a really powerful editor, so powerful that there are a lot of features which we might never use. I want to highlight one of these tips here.&lt;/p&gt;

&lt;p&gt;I'll show you this feature called commit characters. Commit characters are a set of characters, which are different for every language, which trigger autocomplete &lt;em&gt;and&lt;/em&gt; add the character to the end of the autocompleted value. &lt;/p&gt;

&lt;p&gt;In english: Commit characters are a bunch of characters which we use instead of enter when selecting an option from the autocomplete. What is special about these characters are that the commit character chosen will be added to the end of the autocompleted value.&lt;/p&gt;

&lt;p&gt;If that doesn't make too much sense, don't worry, there's a gif coming up.&lt;/p&gt;

&lt;p&gt;In Javascript, the commit characters are "&lt;code&gt;;&lt;/code&gt;", "&lt;code&gt;.&lt;/code&gt;", "&lt;code&gt;(&lt;/code&gt;" etc.&lt;/p&gt;

&lt;p&gt;Here's how commit characters work:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJzDBiwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb7n6ezs2l6x6e7hju21.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJzDBiwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb7n6ezs2l6x6e7hju21.gif" alt="vscode-commit-chars"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It saves you that one extra keystroke which I think editors should autofill anyways.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Solution: Non-decreasing Array</title>
      <author>seanpgallivan</author>
      <pubDate>Tue, 04 May 2021 09:31:47 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-non-decreasing-array-1m5c</link>
      <guid>https://dev.to/seanpgallivan/solution-non-decreasing-array-1m5c</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/non-decreasing-array/discuss/1190763"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-665-medium-nondecreasing-array"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/non-decreasing-array/"&gt;Leetcode Problem #665 (&lt;em&gt;Medium&lt;/em&gt;): Non-decreasing Array&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; with &lt;code&gt;n&lt;/code&gt; integers, your task is to check if it could become non-decreasing by modifying &lt;strong&gt;at most one element&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We define an array is non-decreasing if &lt;code&gt;nums[i] &amp;lt;= nums[i + 1]&lt;/code&gt; holds for every &lt;code&gt;i&lt;/code&gt; (&lt;strong&gt;0-based&lt;/strong&gt;) such that (&lt;code&gt;0 &amp;lt;= i &amp;lt;= n - 2&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [4,2,3]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;You could modify the first 4 to 1 to get a non-decreasing array.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [4,2,1]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;You can't get a non-decreasing array by modify at most one element.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n == nums.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 10^4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10^5 &amp;lt;= nums[i] &amp;lt;= 10^5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This problem seems easy at first read. If we iterate through the nums array (&lt;strong&gt;N&lt;/strong&gt;), count the number of instances in which an element is lower than the one preceeding (&lt;strong&gt;err&lt;/strong&gt;), and then see that count go above &lt;strong&gt;1&lt;/strong&gt;, then we should be able to &lt;strong&gt;return false&lt;/strong&gt;. The problem becomes more difficult, however, once we realize that we're allowed to modify one element, which will naturally impact its relationship with the surrounding elements.&lt;/p&gt;

&lt;p&gt;With that in mind, we can think of the different possible scenarios faced when we find an incidence of decreasing value. Consider the base scenario, with &lt;strong&gt;N[i-1] = a&lt;/strong&gt; and &lt;strong&gt;N[i] = b&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IzvJ280h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3tVUgNt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IzvJ280h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3tVUgNt.png" alt="Visual 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, we can see that there are three possible scenarios for each of the surrounding elements (&lt;strong&gt;N[i-2]&lt;/strong&gt; and &lt;strong&gt;N[i+1]&lt;/strong&gt;). They can either be larger than &lt;strong&gt;a&lt;/strong&gt; (&lt;strong&gt;x &amp;gt;= a&lt;/strong&gt;), in between &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt; (&lt;strong&gt;b &amp;lt; y &amp;lt; a&lt;/strong&gt;) or smaller than &lt;strong&gt;b&lt;/strong&gt; (&lt;strong&gt;z &amp;lt;= b&lt;/strong&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wx_5UCtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K99nyd7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wx_5UCtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K99nyd7.png" alt="Visual 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scenarios &lt;strong&gt;XAB&lt;/strong&gt; and &lt;strong&gt;ABZ&lt;/strong&gt; can quickly be determined to trigger a &lt;strong&gt;return&lt;/strong&gt; of &lt;strong&gt;false&lt;/strong&gt; because in both cases the &lt;strong&gt;err&lt;/strong&gt; count will increment to &lt;strong&gt;2&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--meqnLOS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rR1I59s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--meqnLOS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rR1I59s.png" alt="Visual 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Things get more complicated, however, once the values are staggered. In the case of &lt;strong&gt;ZABX&lt;/strong&gt;, we either move &lt;strong&gt;a&lt;/strong&gt; down or &lt;strong&gt;b&lt;/strong&gt; up in order to achieve increasing values, while in &lt;strong&gt;YABX&lt;/strong&gt; we can only move &lt;strong&gt;b&lt;/strong&gt; up and in &lt;strong&gt;ZABY&lt;/strong&gt; we can only move &lt;strong&gt;a&lt;/strong&gt; down:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U0eytFpp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sEIQIu4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U0eytFpp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sEIQIu4.png" alt="Visual 4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the final scenario, &lt;strong&gt;YABY&lt;/strong&gt;, there is no possible way to fix the array, even though there's only one incidence of a descending value:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oDT2yfYt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ikfi44d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDT2yfYt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ikfi44d.png" alt="Visual 5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this all in mind, we can write our function to &lt;strong&gt;return false&lt;/strong&gt; if we see &lt;strong&gt;err &amp;gt; 1&lt;/strong&gt; or if we see the &lt;strong&gt;YABY&lt;/strong&gt; scenario. If we reach the end without triggering either condition, we can &lt;strong&gt;return true&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N)&lt;/strong&gt; where N is the length of N&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(1)&lt;/strong&gt; with no modification of inputs&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;There are only minor differences in the code of all four languages.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;checkPossibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;checkPossibility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
                &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;checkPossibility&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]))&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;checkPossibility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Background Toggle with clip path only HTML and CSS</title>
      <author>Nikhil Chandra Roy</author>
      <pubDate>Tue, 04 May 2021 09:22:56 +0000</pubDate>
      <link>https://dev.to/nikhilroy2/background-toggle-with-clip-path-only-html-css-edl</link>
      <guid>https://dev.to/nikhilroy2/background-toggle-with-clip-path-only-html-css-edl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background-toggle-with-clip-path-only-html-css"&gt;
  &lt;/a&gt;
  Background Toggle with clip path only html css
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8Mcbzz2lhxs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this tutorial, I have used only HTML and CSS.&lt;br&gt;
for background transition effect I have used &lt;a href="https://bennettfeely.com/clippy/"&gt; clip-path generator &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.1.1/css/all.css"&amp;gt;
    &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;input type="checkbox" name="" id="check"&amp;gt;
    &amp;lt;label for="check"&amp;gt;
        &amp;lt;i class="fas fa-sun"&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;i class="fas fa-moon"&amp;gt;&amp;lt;/i&amp;gt;
    &amp;lt;/label&amp;gt;
    &amp;lt;main&amp;gt;&amp;lt;/main&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for icon I have used font-awesome icons.&lt;br&gt;
when toggling it will show sun and moon with black background.&lt;br&gt;
&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*{
    box-sizing: border-box;
    margin: 0;
}
label{
    position: fixed;
    top: 50%;
    left: 50%;
    width: 80px;
    height: 35px;
    background: #7d68ee;
    transform: translate(-50%, -50%);
    border-radius: 25px;
    cursor: pointer;
}
label .fas{
    position: absolute;
    top: 50%;
    left: 10%;
    transform: translateY(-50%);
    transition: .5s;
    color: white;
}
label .fa-moon{
    opacity: 0;
}
input:checked ~ label .fas{
    left: 70%;
}
input:checked ~ label .fa-sun{
    opacity: 0;
}
input:checked ~ label .fa-moon{
    opacity: 1;
}
input{
    display: none;
}
main{
    background: #000;
    position: relative;
    z-index: -1;
    width: 100%;
    height: 100vh;
    transition: 1s;
    clip-path: polygon(80% 0, 100% 0, 100% 12%, 100% 20%, 98% 3%, 82% 0, 65% 0);

}
input:checked ~ main{
    clip-path: polygon(0 0, 100% 0, 100% 12%, 100% 100%, 0 100%, 0 89%, 0 38%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you like my tutorial, don't forget to share your thought.&lt;br&gt;
Thanks.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>background</category>
      <category>animation</category>
    </item>
    <item>
      <title>Music player using python.</title>
      <author>MarianVelani</author>
      <pubDate>Tue, 04 May 2021 09:13:31 +0000</pubDate>
      <link>https://dev.to/marianvelani/music-player-using-python-373d</link>
      <guid>https://dev.to/marianvelani/music-player-using-python-373d</guid>
      <description>&lt;p&gt;In this Project, we will create a Music Player Application in Python.&lt;br&gt;
using Tkinter and Pygame module. where they can play their favorite songs. And we have to install this music player on our computer, based the Operating system &lt;br&gt;
    i.e Windows, Macintosh, Android, Linux, etc. Then we can listen to our favorite songs.&lt;/p&gt;

&lt;p&gt;Screenshot of actual music player python program output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eCC4UOqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9juggpy7951nm3bvfcz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eCC4UOqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9juggpy7951nm3bvfcz.png" alt="How to make music player using python"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/I5xbxzji7f4"&gt;https://youtu.be/I5xbxzji7f4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source code:&lt;br&gt;
&lt;a href="http://compileto.blogspot.com/2021/05/music-player-application-using-tkinter.html"&gt;http://compileto.blogspot.com/2021/05/music-player-application-using-tkinter.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>60 tips and questions for .net backend developer interview in 2021</title>
      <author>Stefan Ionel</author>
      <pubDate>Tue, 04 May 2021 08:59:38 +0000</pubDate>
      <link>https://dev.to/istef94/60-tips-and-questions-for-net-backend-developer-interview-in-2021-3o35</link>
      <guid>https://dev.to/istef94/60-tips-and-questions-for-net-backend-developer-interview-in-2021-3o35</guid>
      <description>&lt;p&gt;Hey guys, &lt;br&gt;
Below is a list of questions that any back-end .net developer should know in 2021 interviews.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Benefits of microservices?&lt;/li&gt;
&lt;li&gt;How would you design microservice? (what would be your ideas on how to split the monolith?)&lt;/li&gt;
&lt;li&gt;How can microservices communicate? (orchestration vs. choreography)&lt;/li&gt;
&lt;li&gt;How to track problems? (distributed tracing, CorrelationID)&lt;/li&gt;
&lt;li&gt;Lifecycle of the request (middlewares, attributes, registered implementation in Startup) - ActionFilters (before, after, namespace level?)&lt;/li&gt;
&lt;li&gt;Authentication, authorization (tokens, deserialization, how to add)&lt;/li&gt;
&lt;li&gt;System designs / architecture (monolith design, microservices advantages/disadvantages, scaling vertically/horizontally)&lt;/li&gt;
&lt;li&gt;Distributed tracing, logging between microservices&lt;/li&gt;
&lt;li&gt;VMWare vs Docker (do I need an operating system?)&lt;/li&gt;
&lt;li&gt;API Communications (how the microservices should communicate?)&lt;/li&gt;
&lt;li&gt;.NET Core experience?&lt;/li&gt;
&lt;li&gt;Dependency injection (any 3rd party library?, transient vs scoped, why to use transient?)&lt;/li&gt;
&lt;li&gt;EF (default objects lifestyle?, how to convert to transient, how to initialize CS?, replace on-the-fly?, code-first migration), what happens when there is a context change, lazy-loading vs. eager-loading)&lt;/li&gt;
&lt;li&gt;Delegate?&lt;/li&gt;
&lt;li&gt;Func vs regular function? Reason to have delegates?&lt;/li&gt;
&lt;li&gt;SignalR? How it works? (how to differentiate between two tabs?)&lt;/li&gt;
&lt;li&gt;Securing WebAPI? (something token based?, accessToken vs. refreshToken (what I am sending to get each?), which one has larger expiration?, slidin experience?)&lt;/li&gt;
&lt;li&gt;HTTP status codes (+ POST vs PUT ) &lt;/li&gt;
&lt;li&gt;Best practices when building API, what should you consider&lt;/li&gt;
&lt;li&gt;Security of microservices (authentication, authorization)&lt;/li&gt;
&lt;li&gt;Domain Driven Design&lt;/li&gt;
&lt;li&gt;JWT (refresh/access token)&lt;/li&gt;
&lt;li&gt;What is CORS?&lt;/li&gt;
&lt;li&gt;Redis (what is special about that? distributed cache?)&lt;/li&gt;
&lt;li&gt;Task/Thread&lt;/li&gt;
&lt;li&gt;DBs - Indexes (clustered/non-clustered, index vs unique index)&lt;/li&gt;
&lt;li&gt;Which ORM? (EF, Dapper, lazy/eager loading)&lt;/li&gt;
&lt;li&gt;Locks on the DB&lt;/li&gt;
&lt;li&gt;How to switch the context based on the requests? (middlewares)&lt;/li&gt;
&lt;li&gt;IDisposable&lt;/li&gt;
&lt;li&gt;IQueryable vs IEnumerable&lt;/li&gt;
&lt;li&gt;IList vs List (difference, where to use it?)&lt;/li&gt;
&lt;li&gt;Using keyword&lt;/li&gt;
&lt;li&gt;Explicit conversion&lt;/li&gt;
&lt;li&gt;Int16 vs Int32 vs Int64&lt;/li&gt;
&lt;li&gt;unsigned vs signed int&lt;/li&gt;
&lt;li&gt;Paging (how it works, DB level, LINQ)&lt;/li&gt;
&lt;li&gt;Lazy loading vs eager loading&lt;/li&gt;
&lt;li&gt;Microservices (structure, how it works)&lt;/li&gt;
&lt;li&gt;RESTful vs SOAP (verbs)&lt;/li&gt;
&lt;li&gt;Difference between horizontal and vertical scaling&lt;/li&gt;
&lt;li&gt;What is long polling?&lt;/li&gt;
&lt;li&gt;Microservices (synchronous IO pattern, orchestration vs. choreography)&lt;/li&gt;
&lt;li&gt;Message vs. Event&lt;/li&gt;
&lt;li&gt;API Gateway&lt;/li&gt;
&lt;li&gt;Out vs. Ref parameter&lt;/li&gt;
&lt;li&gt;InnerJoin vs OuterJoin&lt;/li&gt;
&lt;li&gt;GroupBy and Having SQL statements&lt;/li&gt;
&lt;li&gt;Clustered vs. Non-clustered index&lt;/li&gt;
&lt;li&gt;Auto reset events vs. manual reset events&lt;/li&gt;
&lt;li&gt;Semaphore vs mutex&lt;/li&gt;
&lt;li&gt;Preflight requests&lt;/li&gt;
&lt;li&gt;Index scan vs Index seek&lt;/li&gt;
&lt;li&gt;DB examples (selects, indexes, order by)&lt;/li&gt;
&lt;li&gt;AutoMapper&lt;/li&gt;
&lt;li&gt;Dapper&lt;/li&gt;
&lt;li&gt;Show that you are able to work with blurry requirements&lt;/li&gt;
&lt;li&gt;Show that you are proactive, you are asking additional questions&lt;/li&gt;
&lt;li&gt;Show you are able to do tradeoffs&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This list of questions was created using the platform &lt;a href="https://www.wearehiring.top/"&gt;We are hiring top&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Say in a comment what question should be added for .net developer interviews.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>docker</category>
      <category>microservices</category>
    </item>
    <item>
      <title>#21-23 of 100DaysOfCode</title>
      <author>atulit023</author>
      <pubDate>Tue, 04 May 2021 08:56:05 +0000</pubDate>
      <link>https://dev.to/icecoffee/21-23-of-100daysofcode-809</link>
      <guid>https://dev.to/icecoffee/21-23-of-100daysofcode-809</guid>
      <description>&lt;p&gt;Another three days passed by, &lt;br&gt;
Well, I am here to tell you what did I learned and how it all went.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-highlights"&gt;
  &lt;/a&gt;
  The Highlights:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I learned how to make a virtual environment of python using &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pipenv&lt;/li&gt;
&lt;li&gt;venv&lt;/li&gt;
&lt;li&gt;virtualenv&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What's the difference between them and how does it works.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I'm back to javascript i.e. node
Till a couple of days back I was so determined to learn Django and then use React with it to create super optimized and secure web apps.
But then again I don't have much experience with React or node and I want to make a strong foundation, So I started learning more about server-side stuff.
How does the web work? 
Express.js 
You know the whole nine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are just my first thoughts. Thanks for joining me.&lt;br&gt;
Have a beautiful day.😀😀&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How To Make A SlideShow Using OpenCV</title>
      <author>Siddharth Chandra</author>
      <pubDate>Tue, 04 May 2021 08:03:59 +0000</pubDate>
      <link>https://dev.to/siddharth2016/how-to-make-a-slideshow-using-opencv-5ge7</link>
      <guid>https://dev.to/siddharth2016/how-to-make-a-slideshow-using-opencv-5ge7</guid>
      <description>&lt;p&gt;We have been making slideshows for most of our college/office presentations to look great while presenting using Microsoft PowerPoint, let's take this as an image processing activity and see how we can achieve slide show utility using Python's OpenCV library in this article.&lt;/p&gt;

&lt;p&gt;It could be a pass time activity or something new to learn or just to show off your friends or juniors, so without any further ado, let's get started!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: If you do not have OpenCV installed, I suggest you visit &lt;a href="https://blog.codekaro.info/lets-draw-opencv-logo-using-opencv"&gt;here&lt;/a&gt; and check **Prerequisites&lt;/em&gt;* steps on the process of installation.*&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#necessary-imports"&gt;
  &lt;/a&gt;
  Necessary Imports
&lt;/h3&gt;

&lt;p&gt;First, create a python file, name it whatever you like, for this article let's say &lt;code&gt;slideshow.py&lt;/code&gt;. Now add the following imports to the file created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./slideshow.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We import &lt;code&gt;cv2&lt;/code&gt; for all image processing tasks, &lt;code&gt;numpy&lt;/code&gt; with alias &lt;code&gt;np&lt;/code&gt; to create an initial window for display (all things in OpenCV works with numpy under the hood), &lt;code&gt;ceil&lt;/code&gt; from &lt;code&gt;math&lt;/code&gt; to satisfy a future condition (how do I know if need it or not?, well you don't, during the process of making an app there would be times when you will have to continuously improve your program and it's fine, but for this article, I want to keep everything at one place from starting, so don't worry just know that we will need this import) and lastly we import &lt;code&gt;os&lt;/code&gt; to extract all image files that we need in a slideshow.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: You also need a set of images you would want to view as a slideshow. Collect them and keep them in the &lt;code&gt;./images&lt;/code&gt; folder and don't worry about the size of images.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#variables-image-window-and-alphabeta"&gt;
  &lt;/a&gt;
  Variables, Image Window and Alpha-Beta
&lt;/h3&gt;

&lt;p&gt;Add the following code to the same file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;dst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"./images/"&lt;/span&gt;       &lt;span class="c1"&gt;# Images destination
&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# Get their names in a list
&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c1"&gt;# Image window of size (360, 360)
&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;     &lt;span class="c1"&gt;# alpha
&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;     &lt;span class="c1"&gt;# beta
&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;First 3 lines find out the image name of all the images present in the &lt;code&gt;./images&lt;/code&gt; folder. We use the &lt;code&gt;os.listdir&lt;/code&gt; method to list all the contents of a directory and then keep them in the &lt;code&gt;images&lt;/code&gt; variable and also we keep the length as a measure for total available images.&lt;/li&gt;
&lt;li&gt;Next, we create an image window of size &lt;code&gt;(360, 360, 3)&lt;/code&gt;, which is a 3 channel image. Initially, it will all be black (filled with zeros).&lt;/li&gt;
&lt;li&gt;Then we define some more constants, &lt;code&gt;i&lt;/code&gt; to be used to loop over images, &lt;code&gt;a&lt;/code&gt; to keep initial alpha value and &lt;code&gt;b&lt;/code&gt; for initial beta value, we will see how these are used for image transition that ultimately will give the slideshow effect.&lt;/li&gt;
&lt;li&gt;At last, we take the first image from the list of images, resize it to fit the window, this will be the first image to appear on the slideshow.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#slideshow-loop"&gt;
  &lt;/a&gt;
  SlideShow Loop
&lt;/h3&gt;

&lt;p&gt;Let's create our slideshow, add the following code to the same file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="c1"&gt;# Slide Show Loop
&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;    &lt;span class="c1"&gt;# Getting new image from directory
&lt;/span&gt;        &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;

    &lt;span class="c1"&gt;# Image Transition from one to another
&lt;/span&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWeighted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Slide Show"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'q'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destroyAllWindows&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now, we create a while infinite loop. Inside it, there is a conditional that checks for &lt;code&gt;ceil(a)&lt;/code&gt; if it reaches &lt;code&gt;0&lt;/code&gt; (zero) then we reset the &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; values, update &lt;code&gt;i&lt;/code&gt; in a circular fashion using modulus operator &lt;code&gt;%&lt;/code&gt; on the length of the list of images to get the index of next image, and update &lt;code&gt;img&lt;/code&gt; variable to contain a new image and resize it.&lt;/li&gt;
&lt;li&gt;Outside of the conditional, we use &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; to decrease and increase alpha and beta values respectively. This variation will give us the transition effect that seems to be smooth. We will use these with the &lt;code&gt;cv2.addWeighted&lt;/code&gt; method that just overlaps one image over another depending on the weight of the given images.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;result&lt;/code&gt; stores the new updated image that we will display using the &lt;code&gt;cv2.imshow&lt;/code&gt; method of the OpenCV. At last, we wait for a key event and breaks out of the while loop if it happens and destroy all windows created during execution using the &lt;code&gt;cv2.destroyAllWindow&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;cv2.addWeighted&lt;/code&gt; method is what helps us to achieve the slideshow effect that we wanted. Here, the alpha &lt;code&gt;a&lt;/code&gt; value is the weight for the resulting image (that was initially a black window) and the beta &lt;code&gt;b&lt;/code&gt; value is for a new image that will overlap the &lt;code&gt;result&lt;/code&gt; window. Make sure that sum of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; remains equal to&lt;code&gt;1&lt;/code&gt; (one). For more information on this, please visit &lt;a href="https://docs.opencv.org/3.4/d5/dc4/tutorial_adding_images.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#demo-how-it-looks"&gt;
  &lt;/a&gt;
  Demo - How It Looks
&lt;/h3&gt;

&lt;p&gt;The images I took are logos of my favourite programming languages - Python, Scala and ReactJS (currently learning).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YAiMHCtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619347152591/cjuu6ZS_W.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YAiMHCtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619347152591/cjuu6ZS_W.gif" alt="demo.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For complete script, visit &lt;a href="https://github.com/siddharth2016/Opencv-Python-Computer-Vision/blob/master/imageSlideShow.py"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What Next?
&lt;/h3&gt;

&lt;p&gt;Well, that's it from me. If you followed this, you might be seeing a wonderful slideshow of your collection of images. As for the next steps, you can enhance this application by adding the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add buttons to change the type of slideshow. Currently, it is only doing a smooth transition, try to implement a different animated transition.&lt;/li&gt;
&lt;li&gt;Add a utility to select a number of images and not all, as we did, we just took every image. Also, you can try to handle exception like what if a non-image comes from the folder.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>python</category>
      <category>opencv</category>
      <category>computervision</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to move from WordPress to Jamstack using our Gatsby WordPress Starter</title>
      <author>andrzejwp</author>
      <pubDate>Tue, 04 May 2021 07:59:17 +0000</pubDate>
      <link>https://dev.to/flotiq/how-to-move-from-wordpress-to-jamstack-using-our-gatsby-wordpress-starter-aa2</link>
      <guid>https://dev.to/flotiq/how-to-move-from-wordpress-to-jamstack-using-our-gatsby-wordpress-starter-aa2</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article originally appeared as a blog post on &lt;a href="https://flotiq.com/blog/how-to-move-from-wordpress-to-jamstack-using-our-gatsby-wordpress-starter"&gt;Flotiq.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Let’s say that you are the owner of a WordPress site and you have heard about Jamstack, the “modern way” to build websites. You want to check if this approach is good for a WordPress replacement. Using Gatsby WordPress starter and migration tools you can test it in just a few minutes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you have a WordPress site with data, you could be worried about the migration, creating a new Gatsby template, and deploying your new site. These things can stop you from deciding to check the Jamstack way of developing your project. Let’s see how to move your WordPress to a Gatsby template without pain, in 2 simple steps.&lt;/p&gt;

&lt;p&gt;Next, optionally, we set up the project live via Netlify, and configure Netlify Plugin in Flotiq, to simplify the build process to one-click action.&lt;/p&gt;

&lt;p&gt;In the next steps, we assume that you have an account in Flotiq (&lt;a href="https://editor.flotiq.com/register.html"&gt;click here to register for free&lt;/a&gt;).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-1-migrate-data-to-headlesscms"&gt;
  &lt;/a&gt;
  Step 1: Migrate data to HeadlessCMS
&lt;/h1&gt;

&lt;p&gt;The first step is to migrate your data to Headless CMS. We recommend using our migration tool. Go to the &lt;a href="https://flotiq.com/services/migrate-wordpress-to-flotiq-headless-cms/"&gt;WordPress to Flotiq migration service&lt;/a&gt;, fill in the required data and start the import. This process will import your media, posts, pages, authors, tags and categories.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSUAq55w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-7e6ab218-c302-404b-a314-342c50e04927.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSUAq55w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-7e6ab218-c302-404b-a314-342c50e04927.png" alt="WordPress to Flotiq migration service"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check your Flotiq Account after the migration is done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DhMzsS6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-6391f3bd-fe36-47e4-b68d-f3ef032827b7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DhMzsS6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-6391f3bd-fe36-47e4-b68d-f3ef032827b7.png" alt="Content Types in Flotiq"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now your data is stored in the Headless CMS and you can manage it in Flotiq. But we want to achieve more - let’s set up a brand new site based on this data.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-2-setup-starter-locally"&gt;
  &lt;/a&gt;
  Step 2: Setup starter locally
&lt;/h1&gt;

&lt;p&gt;Now we can use our Gatsby Starter - WordPress Blog. For detailed instructions &lt;a href="https://github.com/flotiq/gatsby-starter-wordpress-blog"&gt;check the project’s GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Run the project from a template using Flotiq CLI. Type the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g flotiq-cli
flotiq start [flotiqApiKey] [yourProjectName] https://github.com/flotiq/gatsby-starter-wordpress-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;flotiqApKey&lt;/em&gt; is your &lt;code&gt;Read and write API key&lt;/code&gt; to your Flotiq account, and &lt;em&gt;yourProjectName&lt;/em&gt; is your custom project name.&lt;/p&gt;

&lt;p&gt;This script will download the starter, add the required configuration to the &lt;code&gt;.env&lt;/code&gt; file, install dependencies and run gatsby.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wait a moment, and that’s it! Your site is now running at &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;.&lt;/strong&gt; To exit the process type Ctrl+C.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kAAiEpl---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-9a724e06-463a-4e19-ab3d-29091c48d9a7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kAAiEpl---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-9a724e06-463a-4e19-ab3d-29091c48d9a7.png" alt="Gatsby WordPress Starter is working!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next - start developing. Use your favourite IDE to edit project files. There are commands you would use to develop a project&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gatsby develop - build again your site and expose it on the localhost:8000&lt;/li&gt;
&lt;li&gt;gatsby clean - clear cached data (like posts, media)&lt;/li&gt;
&lt;li&gt;gatsby build - build the site for production environment&lt;/li&gt;
&lt;li&gt;gatsby serve - view the production site locally&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn more about Gatsby development process &lt;a href="https://www.gatsbyjs.com/docs/tutorial/part-zero/"&gt;check this tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now you can develop and test your site, learn Gatsby and check the Flotiq features.&lt;/strong&gt; You can also take the next extra steps to publish your site on the Internet.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#step-3-deploy-your-site-to-netlify-optional"&gt;
  &lt;/a&gt;
  Step 3: Deploy your site to Netlify (optional)
&lt;/h1&gt;

&lt;p&gt;You can go live with your site in multiple ways. One way is to simply copy your files from the public directory (created after running Gatsby build) to your server. This fully static page will serve your content without a backend.&lt;/p&gt;

&lt;p&gt;Another way is to use a deploy solution like Netlify. The benefit of this solution is that you can configure automatically build after pushing to the repository or even rebuilding directly from the Flotiq dashboard (using Netlify Plugin).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-your-project-repository-in-github"&gt;
  &lt;/a&gt;
  1. Create your project repository in GitHub
&lt;/h2&gt;

&lt;p&gt;Netlify will use your repository to fetch files, run build commands and publish your website. Create an empty repository for your project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIgb5FXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-d1b43559-7b05-4757-9b13-7ca4fb965f56.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIgb5FXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-d1b43559-7b05-4757-9b13-7ca4fb965f56.png" alt="Create an empty repository for your project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-push-your-project-to-the-newly-created-repository"&gt;
  &lt;/a&gt;
  2. Push your project to the newly created repository.
&lt;/h2&gt;

&lt;p&gt;GitHub will show you tips to quickly set up your repository - follow the part &lt;code&gt;…or push an existing repository from the command line&lt;/code&gt;. In projects directory type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin git@github.com:[accountName]/[projectName].git
git branch -M main
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now your files are stored in GitHub with all benefits of using version control.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-setup-netlify-site"&gt;
  &lt;/a&gt;
  3. Setup Netlify site
&lt;/h2&gt;

&lt;p&gt;Now let’s publish our site. We will use Netlify for this step. To create a site go to the &lt;a href="https://netlify.com/"&gt;Netlify&lt;/a&gt; dashboard. We will create a site from the Git repository.&lt;/p&gt;

&lt;p&gt;Click the &lt;code&gt;New Site from Git&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nMcrdrVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-60081a11-4bbc-4cda-b669-5f2e86ce1a60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nMcrdrVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-60081a11-4bbc-4cda-b669-5f2e86ce1a60.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose &lt;code&gt;GitHub&lt;/code&gt; as the project source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kxqrg65m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-6448593f-f1d8-4203-a1f1-46cf2e848069.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kxqrg65m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-6448593f-f1d8-4203-a1f1-46cf2e848069.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find your new repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n9E2FuwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-b9323571-a37e-469c-8b81-45cc64c392a5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n9E2FuwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-b9323571-a37e-469c-8b81-45cc64c392a5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add variable &lt;code&gt;GATSBY_FLOTIQ_API_KEY&lt;/code&gt; with your &lt;code&gt;flotiqApiKey&lt;/code&gt; (like we do in local setup, in the &lt;code&gt;.env&lt;/code&gt; file).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FNOCjNuL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-0b9320f1-5f7b-46f8-aafe-b84a273a690a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FNOCjNuL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-0b9320f1-5f7b-46f8-aafe-b84a273a690a.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, click the &lt;code&gt;Deploy site&lt;/code&gt; button, and wait 2-3 minutes. When the status change, click on your new automatically generated address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It’s your site, live on the Web. Congratulations!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can change your site URL, or even bind your domain - for further information check the &lt;a href="https://docs.netlify.com/domains-https/custom-domains"&gt;Netlify Docs&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-4-use-the-netlify-plugin-in-flotiq-to-deploy-your-site-automatically-optional"&gt;
  &lt;/a&gt;
  Step 4: Use the Netlify plugin in Flotiq to deploy your site automatically (optional)
&lt;/h1&gt;

&lt;p&gt;For now, every time when you push to the main branch, your site will rebuild automatically. That’s a convenient solution. But what if we want to rebuild the site every time when creating data in Flotiq? Follow these steps to enable the &lt;code&gt;Build Site&lt;/code&gt; button in Flotiq.&lt;/p&gt;

&lt;p&gt;Go back to the Netlify dashboard. Add a build hook in the Build &amp;amp; Deploy settings. The name of this webhook is up to you:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZK43zyMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-671c4bf0-2abc-4dff-a317-177521a6ecf9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZK43zyMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-671c4bf0-2abc-4dff-a317-177521a6ecf9.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the hook is created, you get your custom website hook.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kftM6ven--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-148227cb-a346-4355-8090-ff7519d6702b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kftM6ven--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-148227cb-a346-4355-8090-ff7519d6702b.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After these steps, you can not only manage your data in Flotiq Headless CMS. You can also trigger a rebuild of your site by clicking &lt;code&gt;Build site&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FUj7mDRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-96121528-8671-4874-8985-4eb66bf2a084.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUj7mDRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.flotiq.com/image/0x0/_media-96121528-8671-4874-8985-4eb66bf2a084.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now your site is live, and you can easily manage the site content. You can take the benefits of Headless CMS and the Gatsby ecosystem.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h1&gt;

&lt;p&gt;Use the data stored and managed in Flotiq in multiple ways, building other websites or &lt;a href="https://flotiq.com/docs/Deep-Dives/mobile-expo-product-showcase/"&gt;mobile applications&lt;/a&gt;. Extend your project scope by adding new functionalities like &lt;a href="https://flotiq.com/docs/Deep-Dives/node-js-ecommerce-snipcart-gatsby-demo/"&gt;e-commerce&lt;/a&gt; or a &lt;a href="https://flotiq.com/docs/Deep-Dives/storing-location-data-headless-cms/"&gt;map with a store locator&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>wordpress</category>
      <category>flotiq</category>
    </item>
    <item>
      <title>Types Of Aircrafts In Aerospace Industry</title>
      <author>Sunith</author>
      <pubDate>Tue, 04 May 2021 07:50:59 +0000</pubDate>
      <link>https://dev.to/sunith573/types-of-aircrafts-in-aerospace-industry-3li7</link>
      <guid>https://dev.to/sunith573/types-of-aircrafts-in-aerospace-industry-3li7</guid>
      <description>&lt;p&gt;Introduction&lt;br&gt;
The future of aerospace engineering looks bright, particularly as developments in space exploration and space flight become a reality. Aerospace engineering is a profession that focuses on the construction and research of aircraft, spacecraft, and related technologies using engineering principles. &lt;/p&gt;

&lt;p&gt;Classification Of Aircraft&lt;br&gt;
When it comes to aircraft classifications, we're talking about classes of planes that have identical flying characteristics.&lt;br&gt;
The way they land, as well as their propulsion and in-flight handling. Airman certificate categories are even more closely related to classifications than aircraft categories.&lt;/p&gt;

&lt;p&gt;Lighter Than Air&lt;br&gt;
Balloons, non-rigid airships (blimps), and dirigibles are built to have a sufficient volume within their structure that, when filled with a gas lighter than air, they can fly.&lt;br&gt;
(heated air, hydrogen, or helium) displaces the ambient air and floats, similar to how a cork floats on water.&lt;/p&gt;

&lt;p&gt;Heavier Than Air&lt;br&gt;
This type of aircraft requires a power source to generate the thrust needed for lift. Kites are a simple heavier-than-air craft.&lt;/p&gt;

&lt;p&gt;Civil Aircraft&lt;br&gt;
Civil flights are all nonmilitary planes. Private and corporate jets, as well as commercial airliners, are among them.&lt;br&gt;
Private planes are single-engine monoplanes with non-retractable landing gear that are used for pleasure flying.&lt;/p&gt;

&lt;p&gt;Business Aircraft&lt;br&gt;
These flights are used to produce income for their owners and range from small single-engine planes used for pilot training or transporting small parcels over short distances to four-engine executive jets capable of crossing continents and oceans.&lt;/p&gt;

&lt;p&gt;Classification Of Spacecraft&lt;br&gt;
Spacecraft are specially developed and built structures capable of operating in hostile environments. Their capacities and sophistication differ greatly, as do their purposes.&lt;/p&gt;

&lt;p&gt;Flyby Spacecraft&lt;br&gt;
The initial reconnaissance phase of solar system exploration was carried out by flyby spacecraft. They maintain a constant solar orbit or escape trajectory, never entering planetary orbit.&lt;/p&gt;

&lt;p&gt;Orbiter Spacecraft&lt;br&gt;
A spacecraft designed to fly to a distant planet and enter into orbit around it must be able to decelerate quickly enough to achieve orbit insertion.&lt;/p&gt;

&lt;p&gt;Atmospheric Spacecraft&lt;br&gt;
Atmospheric satellites are planned for a brief mission to collect data on a planet's or satellite's atmosphere. A spacecraft's subsystem complement is usually reduced.&lt;/p&gt;

&lt;p&gt;Lander Spacecraft&lt;br&gt;
Lander spacecraft are intended to enter a planet's surface and stay long enough to transmit data back to Earth.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Simplest Way to Include Icons in Your Project: Using Unpkg</title>
      <author>Shubham Jain</author>
      <pubDate>Tue, 04 May 2021 07:44:44 +0000</pubDate>
      <link>https://dev.to/shubhamjain/simplest-way-to-include-icons-in-your-project-using-unpkg-53op</link>
      <guid>https://dev.to/shubhamjain/simplest-way-to-include-icons-in-your-project-using-unpkg-53op</guid>
      <description>&lt;p&gt;The web has come a long way in the past years, but there are still things that aren't straightforward. Using icons is one of them.&lt;/p&gt;

&lt;p&gt;Icon fonts, inline SVGs, &lt;a href="https://css-tricks.com/svg-symbol-good-choice-icons/"&gt;SVG Symbols&lt;/a&gt;—all have their own issues. Inline SVGs are great, for example, but they make the code messy, and can't be cached. Additionally, copy-pasting the SVG itself is pretty time-consuming and a PITA. &lt;/p&gt;

&lt;p&gt;Using icons should be simpler. Here's what I always wanted: I see an icon I want to use and I am able to use it right away. No copy-paste; only have to know the name of the icon. No struggling to make the Webpack/Grunt pipeline work. No creating a new SVG file/component for every icon I want to use. &lt;/p&gt;

&lt;p&gt;Luckily, I have found a way. Follow along! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#svgloader-load-svgs-from-a-cdn"&gt;
  &lt;/a&gt;
  svg-loader: Load SVGs from a CDN
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/shubhamjain/svg-loader"&gt;svg-loader&lt;/a&gt; is a simple library that allows you to inline SVGs hosted on an external source. Here's a more &lt;a href="https://dev.to/shubhamjain/a-better-way-to-use-svgs-1mg9"&gt;detailed article&lt;/a&gt; I wrote about it, but to put it simply, you use it this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/external-svg-loader@1.0.0/svg-loader.min.js"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;data-src=&lt;/span&gt;&lt;span class="s"&gt;"https://s2.svgbox.net/assets/logo-white.svg"&lt;/span&gt; 
    &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt;
    &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; 
    &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"purple"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The library will fetch the SVG using XHR and inject it inline. The benefit? You can now customize the fill, inherit the colors, and use states like hover, which wouldn't have been possible with &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;

&lt;p&gt;The concept isn't new as &lt;a href="https://github.com/iconfu/svg-inject"&gt;svg-inject&lt;/a&gt; does something similar. However, svg-loader makes this ultra-convenient. You only have to worry about including the script somewhere in the code. Rest everything is handled. And it's framework-agnostic, too (works with React/Vue/Angular...).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#svgloader-unpkg-killer-combo"&gt;
  &lt;/a&gt;
  svg-loader + unpkg = killer combo
&lt;/h2&gt;

&lt;p&gt;Recently, I discovered that I can use the library and &lt;a href="http://unpkg.com/"&gt;unpkg&lt;/a&gt; to quickly include an icon available on Github. &lt;/p&gt;

&lt;p&gt;Take, for instance, &lt;a href="https://github.com/Templarian/MaterialDesign"&gt;MDI repository&lt;/a&gt;. To my knowledge, it's the most extensive icon repository on Github that has 5k+ icons. &lt;/p&gt;

&lt;p&gt;Since the repo has an NPM package, we can browse it on unpkg: &lt;a href="https://unpkg.com/@mdi/svg/"&gt;https://unpkg.com/@mdi/svg/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5N-U3vXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4ym8ggdvd4d0gxazzzz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5N-U3vXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4ym8ggdvd4d0gxazzzz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click any file and use "View Raw" you'll see that the permalink to any icon is something like this: &lt;code&gt;https://unpkg.com/@mdi/svg@5.9.55/svg/__ICON__.svg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use this to start using the icon in our project. Example:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shubhamjainco/embed/rNyBVmY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hurray! Now, if you need to use the &lt;code&gt;cog&lt;/code&gt; icon, you don't have to hunt for the SVG code, or download it, you can just use &lt;code&gt;cog.svg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The first load can have a slight delay because Unpkg fetches the package and extracts the file, but after the first request, the file is cached and served from Cloudflare CDN.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qampa-about-this-approach"&gt;
  &lt;/a&gt;
  Q&amp;amp;A About this Approach
&lt;/h2&gt;

&lt;p&gt;There might fair amount of questions about this approach, so I will try to answer the most common of them. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-if-there-are-changes-in-the-repo-like-renaming-files-wont-it-break-my-icons"&gt;
  &lt;/a&gt;
  What if there are changes in the repo (like, renaming files)? Won't it break my icons?
&lt;/h3&gt;

&lt;p&gt;No. With unpkg, you'll most likely be using versioned URLs (instead of &lt;code&gt;@latest&lt;/code&gt;), which will make sure that the contents remain the same regardless of changes in the repository. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#isnt-it-inefficient-to-fire-xhr-for-every-icon-instead-of-bundling-them"&gt;
  &lt;/a&gt;
  Isn't it inefficient to fire XHR for every icon, instead of bundling them?
&lt;/h3&gt;

&lt;p&gt;No. With HTTP2, the cost of making is incredibly low. For non-blocking resources loaded asynchronously, it's almost irrelevant. Here is me loading 50 icons using the same approach.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shubhamjainco/embed/BaWBowd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Besides, the icons are also cached when loaded first-time, so the subsequent loads are incredibly fast. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-if-unpkg-goes-away"&gt;
  &lt;/a&gt;
  What if unpkg goes away?
&lt;/h3&gt;

&lt;p&gt;It won't. It's a project &lt;a href="https://developers.cloudflare.com/sponsorships"&gt;supported officially&lt;/a&gt; by Cloudflare and serves 3B+ requests per day. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-if-i-want-to-use-an-icon-set-that-doesnt-have-an-npm-package"&gt;
  &lt;/a&gt;
  What if I want to use an icon set that doesn't have an npm package?
&lt;/h3&gt;

&lt;p&gt;You can use &lt;a href="https://www.jsdelivr.com/"&gt;jsDeliver&lt;/a&gt; that has a similar API and &lt;a href="https://www.jsdelivr.com/features"&gt;supports raw Github repos&lt;/a&gt; as well. &lt;/p&gt;




&lt;p&gt;I feel this is a pretty nifty approach for icons. You can use icons from &lt;a href="https://unpkg.com/browse/font-awesome-svg-png@1.2.2/black/svg/"&gt;Font Awesome&lt;/a&gt;, &lt;a href="https://unpkg.com/browse/@primer/octicons@13.0.0/build/svg/"&gt;Octicons&lt;/a&gt;, or any of the awesome icon sets hosted on Github.&lt;/p&gt;

&lt;p&gt;It's fast, very reliable, and keeps the code clean. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
      <category>svg</category>
    </item>
  </channel>
</rss>
