<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>First post</title>
      <author>Dima Gashuk</author>
      <pubDate>Tue, 19 Oct 2021 21:31:12 +0000</pubDate>
      <link>https://dev.to/damfler/first-post-2gk</link>
      <guid>https://dev.to/damfler/first-post-2gk</guid>
      <description>&lt;p&gt;Hi, my name is Dima. I'm a Web developer and I'm starting my own blog!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>The "new" Nullpointer Exception in Java 17</title>
      <author>Hrn Svnc„Éè„É´„É≥ –•–∞—Ä—É–Ω –°–µ–≤–∏–Ω–¥–∂</author>
      <pubDate>Tue, 19 Oct 2021 20:54:09 +0000</pubDate>
      <link>https://dev.to/harsvnc/the-new-nullpointer-exception-in-java-17-4bcb</link>
      <guid>https://dev.to/harsvnc/the-new-nullpointer-exception-in-java-17-4bcb</guid>
      <description>&lt;p&gt;As a java developer everyone should know the &lt;strong&gt;Nullpointer Exception&lt;/strong&gt; or NPE. It is that one thing, you always should try to prevent from happening. In some cases it means that you need to debug your code to find the little mistake that happened. &lt;br&gt;
The NPE is a runtime exception which is thrown when your code wants to use an object or an object reference that has a null value. That can be if simply no value is assigned or a object is without reference.&lt;/p&gt;

&lt;p&gt;Before the newest version of the openJdk (version 17) the common Nullpointer Exception looked something like this in your stack-trace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java.lang.NullPointerException: null
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Probably theres much more on you stack-trace going on but this is it.&lt;br&gt;
As you can see it does not indicate where or why your npe occurred.&lt;/p&gt;

&lt;p&gt;Help is on the way!&lt;br&gt;
Watch how Java 17 Handles this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Exception in thread "main" java.lang.NullPointerException:
Cannot assign field "i" because "a" is null
at Prog.main(Prog.java:5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example the exception pinpoints out &lt;strong&gt;where&lt;/strong&gt; and &lt;strong&gt;what&lt;/strong&gt; our null object reference is.&lt;/p&gt;

&lt;p&gt;Just that simple! &lt;/p&gt;

&lt;p&gt;As all of my posts this was also written on my &lt;a href="https://www.harun-sevinc.com"&gt;private blog&lt;/a&gt; where i try to write useful posts for developers.&lt;/p&gt;

&lt;p&gt;Or just follow me on &lt;a href="https://twitter.com/harsvnc"&gt;twitter&lt;/a&gt; or dm me &lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>java</category>
      <category>news</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Upgrade to Stimulus 3, say bye to IE11, and celebrate üéâ</title>
      <author>Matou≈° Bor√°k</author>
      <pubDate>Tue, 19 Oct 2021 20:53:23 +0000</pubDate>
      <link>https://dev.to/nejremeslnici/upgrade-to-stimulus-3-say-bye-to-ie11-and-celebrate-b7g</link>
      <guid>https://dev.to/nejremeslnici/upgrade-to-stimulus-3-say-bye-to-ie11-and-celebrate-b7g</guid>
      <description>&lt;p&gt;Most of our application JavaScript code is already written as &lt;a href="https://stimulus.hotwired.dev"&gt;Stimulus&lt;/a&gt; controllers, the rest being slowly assimilated or removed. Recently, we wanted to upgrade the Stimulus framework to &lt;strong&gt;version 3&lt;/strong&gt; to gain access to the new cool features, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/hotwired/stimulus/pull/354"&gt;debug mode&lt;/a&gt;&lt;/strong&gt; that greatly helps understanding what exactly your controllers are doing and why,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://stimulus.hotwired.dev/reference/controllers#cross-controller-coordination-with-events"&gt;dispatching events among controllers&lt;/a&gt;&lt;/strong&gt; - previously, communication between controllers required various ‚Äùhacks‚Äú, not any more as it is now official and straightforward,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://stimulus.hotwired.dev/reference/actions#action-parameters"&gt;action parameters&lt;/a&gt;&lt;/strong&gt; for even more flexibility when calling controller actions,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://stimulus.hotwired.dev/reference/values#default-values"&gt;default values&lt;/a&gt;&lt;/strong&gt; no more need to be specified in HTML , they can reside in the controller itself,&lt;/li&gt;
&lt;li&gt;and &lt;a href="https://world.hey.com/hotwired/stimulus-3-c438d432"&gt;more&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we began by fixing all deprecation warnings, then updated the Stimulus package and all imports to the &lt;a href="https://www.npmjs.com/package/@hotwired/stimulus"&gt;new package name&lt;/a&gt;. Since we are still using Webpacker (not for long, you bet‚Ä¶), we added the ‚Äì now separate ‚Äì &lt;a href="https://www.npmjs.com/package/@hotwired/stimulus-webpack-helpers"&gt;stimulus-webpack-helpers package&lt;/a&gt; and updated the &lt;a href="https://stimulus.hotwired.dev/handbook/installing#using-webpack-helpers"&gt;controllers initialization&lt;/a&gt;. All easy and clear, right?&lt;/p&gt;

&lt;p&gt;Well, not so fast. We did not read the &lt;em&gt;whole&lt;/em&gt; release notes properly enough and did not notice at first that &lt;strong&gt;&lt;a href="https://stimulus.hotwired.dev/handbook/installing#browser-support"&gt;Stimulus 3 drops support for IE11&lt;/a&gt;&lt;/strong&gt;. This made us stop for a while and do some browser usage analyses.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ie11-measures"&gt;
  &lt;/a&gt;
  IE11 measures
&lt;/h3&gt;

&lt;p&gt;Luckily, we‚Äôve had most of the work done from almost a year ago, when we &lt;a href="https://dev.to/nejremeslnici/migrating-tachyons-to-tailwind-css-part-i-ich"&gt;adopted Tailwind&lt;/a&gt; in our project. Tailwind 2.0 also dropped official support for IE11 and we made an important decision at that time: while the IE11 usage numbers were small, we could not afford making our web totally unusable for these users. So we employed a few polyfills, added a few styling fixes specific to IE11 so that our web was still ‚Äì somehow ‚Äì accessible via this old browser. Also, we put up an alert that tried to persuade people to switch. And we waited‚Ä¶ until today.&lt;/p&gt;

&lt;p&gt;So now we looked at the numbers again and found that all seemed very good! The usage numbers, both absolute and relative, decreased steadily, our providers didn‚Äôt use IE almost at all, our customers a bit more but still negligibly. Who knows whether our pop up, Microsoft or a general innovation pressure contributed to the effect, the important thing was that we were ready to make the next step.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JHGa_dL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clp3lqo97w4x8nf6qucm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JHGa_dL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clp3lqo97w4x8nf6qucm.png" alt="IE11 analytics stats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, we decided to continue freely with the Stimulus upgrade and we also added our site to the &lt;strong&gt;&lt;a href="https://docs.microsoft.com/en-us/microsoft-edge/web-platform/ie-to-microsoft-edge-redirection"&gt;Need Microsoft Edge list&lt;/a&gt;&lt;/strong&gt;. Being listed here will automatically redirect IE11 users to Edge when they visit our site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#not-ie-11"&gt;
  &lt;/a&gt;
  ‚ÄùNot IE 11‚Äú
&lt;/h3&gt;

&lt;p&gt;To our surprise, we hit a weird and at first confusing error during  the Stimulus upgrade process: &lt;em&gt;Uncaught (in promise) TypeError: class constructors must be invoked with 'new'"&lt;/em&gt;. No controllers worked at all. We double-, triple-checked the configs and all seemed OK. The solution clicked after we read &lt;a href="https://stackoverflow.com/a/51860850/1544012"&gt;this response&lt;/a&gt; on Stack Overflow. Our JS code was transpiled to ES5 but Stimulus itself now &lt;a href="https://github.com/hotwired/stimulus/releases/tag/v3.0.0-beta.1"&gt;uses ES6&lt;/a&gt; as the compile target. So our ES5 controllers could not extend ES6 Stimulus classes.&lt;/p&gt;

&lt;p&gt;We found the cause in the &lt;code&gt;browserslist&lt;/code&gt; section of our &lt;code&gt;package.json&lt;/code&gt; file. This setting is &lt;a href="https://babeljs.io/docs/en/babel-preset-env#browserslist-integration"&gt;used by Babel&lt;/a&gt; to transpile various modern JS features to their safer alternatives according to &lt;a href="https://github.com/browserslist/browserslist"&gt;browsers usage&lt;/a&gt;, and we needed to explicitly &lt;strong&gt;exclude IE11 support&lt;/strong&gt; to compile our JS code to ES6 and the error disappeared.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  "browserslist": [
&lt;span class="gd"&gt;-    "defaults"
&lt;/span&gt;&lt;span class="gi"&gt;+    "defaults",
+    "not IE 11"
&lt;/span&gt;  ],
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By the way, targeting our JavaScript code to ES6 alone &lt;strong&gt;decreased our production bundle size by about 15%&lt;/strong&gt; (unzipped). Nice!&lt;/p&gt;

&lt;p&gt;We also quickly checked with &lt;a href="https://caniuse.com/es6"&gt;Can I Use&lt;/a&gt; that we are OK with ES6 considering our browser usage pattern, and yes, sure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nrsKMpNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8gnr7r3rghfzc6azhqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nrsKMpNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8gnr7r3rghfzc6azhqs.png" alt="Can I use ES6 for our site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, as we recently &lt;a href="https://dev.to/nejremeslnici/migrating-selenium-system-tests-to-cuprite-42ah#ajax-fetch-issues-due-to-cuprite-being-too-fast"&gt;added&lt;/a&gt; the &lt;a href="https://github.com/stimulus-use/stimulus-use"&gt;Stimulus-Use library&lt;/a&gt; to our project, we made sure to upgrade it to current beta which supports Stimulus 3. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Our tests show that everything works nicely under Stimulus 3. We enjoy the lovely debug mode and other new features. Stimulus has grown to a mature framework, perfectly usable in &lt;a href="https://twitter.com/jaredcwhite/status/1450281146139348995"&gt;HTML-first application&lt;/a&gt; stacks.&lt;/p&gt;

&lt;p&gt;While for the few remaining IE11 users it will be increasingly difficult to use our site, we are quite OK with it as we have tried to reduce the harm before and continue to do so to some (lesser and lesser) extent. You can‚Äôt stop progress. Bye IE! üëã&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you like reading stuff like this, you might want to &lt;a href="https://twitter.com/boramacz"&gt;follow us&lt;/a&gt; on Twitter.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>stimulus</category>
      <category>rails</category>
      <category>javascript</category>
      <category>ie11</category>
    </item>
    <item>
      <title>Lessons Learned from Building a React Component Library with TypeScript</title>
      <author>Neil Chaudhuri</author>
      <pubDate>Tue, 19 Oct 2021 20:47:56 +0000</pubDate>
      <link>https://dev.to/realneilc/lessons-learned-from-building-a-react-component-library-with-typescript-3bkb</link>
      <guid>https://dev.to/realneilc/lessons-learned-from-building-a-react-component-library-with-typescript-3bkb</guid>
      <description>&lt;p&gt;Component libraries are all the rage. Shopify, Salesforce, IBM, and even the &lt;a href="https://designsystem.digital.gov/components/overview/"&gt;United States government&lt;/a&gt; have joined countless other organizations and businesses in building component libraries. They're the subject of blog posts, podcasts, and YouTube tutorials. All that's left is a &lt;a href="https://kenburns.com/the-films/"&gt;Ken Burns documentary&lt;/a&gt; on the subject.&lt;/p&gt;

&lt;p&gt;In fact, I am a software architect and senior engineer, and I currently lead the development of a React component library that will be the basis for the UIs for a prominent US government agency. I want to share with you my lessons learned in project management, communications, accessibility, engineering, and testing to build something that will impact the lives of millions. And the ups and downs of it all.&lt;/p&gt;

&lt;p&gt;So what's the big deal with component libraries?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-design-system"&gt;
  &lt;/a&gt;
  The Design System
&lt;/h2&gt;

&lt;p&gt;It doesn't start with a component library; it starts with a design system. The Nielsen Norman Group defines design systems &lt;a href="https://www.nngroup.com/articles/design-systems-101/"&gt;this way&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A design system is a complete set of standards intended to manage design at scale using reusable components and patterns.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A design system enumerates the standards and practices that comprise the premier UX for consumers of your brand. It expresses the nomenclature every team should use in communications to break down silos and avoid the impulse from &lt;a href="https://www.melconway.com/Home/Conways_Law.html"&gt;Conway's Law&lt;/a&gt;. There are basic rules about colors, typography, spacing, and so on. All of these core principles become the basis for larger components--explicit ones like buttons and date pickers and subtler ones like grid systems.&lt;/p&gt;

&lt;p&gt;Our UX team develops and maintains our design system. Like software, it evolves; it's versioned; and it's collaborative. There are conversations among the UX designers and with me and other architects and engineers on the program about what makes sense and what is feasible. Are nested dropdowns necessary? Do we have time to create our own perfect &lt;code&gt;Datepicker&lt;/code&gt;? Or do we try to customize something open source? How do we feel about disabled buttons, and if we think they make sense, how can we overcome common pitfalls like poor &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Perceivable/Color_contrast"&gt;contrast ratios&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Stuff like that. We use the language of &lt;a href="https://bradfrost.com/blog/post/atomic-web-design/"&gt;Atomic Design&lt;/a&gt;, which deconstructs web interfaces into entities ranging from "atoms" to "pages," as a common nomenclature to describe the goals of the design system.&lt;/p&gt;

&lt;p&gt;The challenge, and probably the hardest part of building a component library for us, is the tooling. Partly because of the preferences of the UX team and partly because of constraints on our development environment due to the sensitive nature of our work, we have not been able to streamline automation for versioning UX wireframes or translating them into artifacts engineers can use to build. As a result, we work with wireframes that are cumbersome to understand. In order to even view them, we either need to install the tool on our machines, which costs more licenses and imposes a burden on developer experience (DX), or we need to wade through literally hundreds of static asset files with a custom browser plugin. Neither is an optimal experience. Beyond that, it's a manual process to track consistency between the design system and the component library as both evolve.&lt;/p&gt;

&lt;p&gt;I never said it was pretty, but it isn't all bad either.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-value-of-a-component-library"&gt;
  &lt;/a&gt;
  The Value of a Component Library
&lt;/h2&gt;

&lt;p&gt;The design system is a set of core principles independent of implementation details. You can choose to implement these principles and make them real for UI engineers with whatever technology you choose.&lt;/p&gt;

&lt;p&gt;For us, that's React. Our React components generate a lot of value for the program.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consistency"&gt;
  &lt;/a&gt;
  Consistency
&lt;/h3&gt;

&lt;p&gt;Our component library enforces our design system across our development teams. Using the components all but guarantees a UI will be consistent with our brand and provide our users the best, most intuitive experience. Developers can feel confident they are using components vetted with the UX team, which frees them up to work on the specific use cases of their services rather than cross-cutting concerns like consistency with the design system.&lt;/p&gt;

&lt;p&gt;The library also maximizes the likelihood that our UIs pass visual testing by our UX team. This is important as violations slow down our delivery cadence and ability to get feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h3&gt;

&lt;p&gt;Related to consistency is accessibility, which is a first-class priority for our component library. Accessibility, commonly known as &lt;a href="https://www.a11yproject.com/"&gt;#a11y&lt;/a&gt;, is more than just empowering the visually impaired. It also means empowering people who experience difficulty with hearing, motion, dexterity, or anything else. It means empowering &lt;em&gt;everyone&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The program is required by contract and &lt;a href="https://www.access-board.gov/law/ra.html#section-508-federal-electronic-and-information-technology"&gt;by law&lt;/a&gt; to produce UIs that &lt;br&gt;
are accessible--specifically &lt;a href="https://www.section508.gov/tools/playbooks/technology-accessibility-playbook-intro/"&gt;508 compliance&lt;/a&gt;. That said, accessibility is far more than a professional obligation; it is my personal priority. It is very important to me that everything I build is intuitive for every user. &lt;/p&gt;

&lt;p&gt;I will elaborate on this shortly, but our component library is built for accessibility. Development teams can trust the accessibility of the individual components, and as I said before, focus on their own use cases. Of course you are probably thinking in terms of accessible dropdowns and autocompletes and datepickers, which we have, but we also provide helper &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Semantics#semantics_in_html"&gt;Semantic HTML&lt;/a&gt; components. For example, the library features &lt;code&gt;Section&lt;/code&gt;, which represents the &lt;code&gt;section&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section"&gt;HTML element&lt;/a&gt; as you would imagine, and &lt;code&gt;SectionGrid&lt;/code&gt;, which is a &lt;code&gt;section&lt;/code&gt; element endowed with our design system grid.&lt;/p&gt;

&lt;p&gt;Of course, the component library can only take developers part of the way to full accessibility, but it's nice not to have to start from 0.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reusability"&gt;
  &lt;/a&gt;
  Reusability
&lt;/h3&gt;

&lt;p&gt;We have worked very hard to provide intuitive APIs for our components, but the task is trickier than you might think. The APIs need to impose enough opinion so that consumers don't violate the design system but allow enough freedom for the components to support a wide range of use cases. For our &lt;code&gt;Button&lt;/code&gt; component, that is easy enough. For layout components like &lt;code&gt;Card&lt;/code&gt; and &lt;code&gt;Page&lt;/code&gt;, it's tougher. The reusability that results has made individual teams and the entire program so much more productive.&lt;/p&gt;

&lt;p&gt;We also go out of our way to endow our components with as little functionality as possible. Component APIs offer props that enable library consumers on the development teams to supply behavior. For an obvious example, developers supply &lt;code&gt;onClick&lt;/code&gt; behavior to the &lt;code&gt;Button&lt;/code&gt; component. We have more complex components that need to maintain their own state,&lt;br&gt;
but we try to minimize that where possible. This provides a clean separation of concerns, which makes testing our components much easier, and anyone who has been in the game long enough knows that strong testability makes for strong reusability.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#encapsulation"&gt;
  &lt;/a&gt;
  Encapsulation
&lt;/h3&gt;

&lt;p&gt;There will be more about this shortly, but we do not build our components from scratch. Rather, we customize existing open source components and map our APIs to theirs. This abstracts the implementation details of the component from our development teams. For example, we use &lt;a href="https://github.com/Hacker0x01/react-datepicker"&gt;react-datepicker&lt;/a&gt; as the basis for our own &lt;code&gt;DatePicker&lt;/code&gt;, but if we decide to swap it out for a different one, our consumers will be none the wiser.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#component-stack"&gt;
  &lt;/a&gt;
  Component Stack
&lt;/h2&gt;

&lt;p&gt;As I mentioned, we build our component library with React, which is what we recommended but is also, for our risk-averse government customer, the safe choice given its backing by Facebook, &lt;a href="https://insights.stackoverflow.com/survey/2021#section-most-popular-technologies-web-frameworks"&gt;its market penetration&lt;/a&gt;, and &lt;a href="https://insights.stackoverflow.com/survey/2021#most-loved-dreaded-and-wanted-webframe-want"&gt;its popularity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But React is the easy part. Let's look at other parts of the component stack.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  TypeScript
&lt;/h3&gt;

&lt;p&gt;When we started building the component library, I considered TypeScript essential for two reasons. By enforcing type safety during development and at build time, we catch bugs much faster, which from a project management standpoint is much cheaper. More importantly, building our APIs in TypeScript is a huge help to library consumers on application development teams by facilitating code completion in their IDEs and type checking in &lt;em&gt;their&lt;/em&gt; builds.&lt;/p&gt;

&lt;p&gt;Let me also mention that some of our TypeScript APIs require &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA"&gt;ARIA&lt;/a&gt; values to promote accessibility if we can't derive them ourselves from other props.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#chakra-ui"&gt;
  &lt;/a&gt;
  Chakra UI
&lt;/h3&gt;

&lt;p&gt;I mentioned earlier that our components are built on open source components, and most of them are built on &lt;a href="https://chakra-ui.com/"&gt;Chakra UI&lt;/a&gt;. There are many other open source component libraries out there, but Chakra UI is my favorite by far. The primary reasons are its first-class commitment to accessibility and the intuitive APIs of its components built with TypeScript. As you can probably infer, Chakra UI is an inspiration to me when building our own &lt;br&gt;
component library on top of it.&lt;/p&gt;

&lt;p&gt;Chakra UI also offers a powerful &lt;a href="https://chakra-ui.com/docs/theming/customize-theme"&gt;theme customization API&lt;/a&gt; we leverage heavily to apply the principles of our design system to Chakra components via dedicated theme files that separate the styling from functionality. This separation of concerns makes it easier to reason about our code and makes the files themselves a lot lighter.&lt;/p&gt;

&lt;p&gt;Chakra UI also features with some helpful hooks like &lt;a href="https://chakra-ui.com/docs/hooks/use-disclosure"&gt;useDisclosure&lt;/a&gt; that come in handy. &lt;/p&gt;

&lt;p&gt;If you use Chakra UI for your own component library, you will probably need some alias imports to deal with name collisions. For example, we call our button components, to no one's surprise, &lt;code&gt;Button&lt;/code&gt;, but so does Chakra UI. So we do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Button as ChakraButton } from "@chakra-ui/react"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#engineering"&gt;
  &lt;/a&gt;
  Engineering
&lt;/h2&gt;

&lt;p&gt;Of course the fun part is building a React component library. This post is long enough, so I can't get into every detail. But I do want to address some of the key aspects you might want to consider when you build your own.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workflow"&gt;
  &lt;/a&gt;
  Workflow
&lt;/h3&gt;

&lt;p&gt;When we first began building the component library, we needed to move quickly because development teams were waiting on us &lt;br&gt;
to start building their UIs. Our management tasked me and several developers to get something done in a few sprints at nearly a full time commitment.&lt;/p&gt;

&lt;p&gt;We got the initial design system specification from the UX team and got to work. After those first few sprints, we had built enough components to allow teams to get going. The problem is that all of us resumed our normal duties with no time allocation for the library. This meant that whenever the UX team designed new components or developers found bugs in existing components, there was a bottleneck because no one was dedicated to upgrading the library. I and others got to it when we could, but the absence of a dedicated team was a problem.&lt;/p&gt;

&lt;p&gt;Another problem is the initial lack of communication within the UX team itself and among the UX team, developers, and me. In their creative zeal, far too often they provided wireframes to some developers inconsistent with wireframes provided to others, or they provided wireframes featuring components that weren't in the library. Development teams assumed they &lt;em&gt;were&lt;/em&gt; in the library and estimated accordingly. As you might expect, they were unhappy when they discovered the components didn't exist, which impacted their ability to deliver on schedule. They let me know it, and frankly they had every right to be unhappy. I knew we had to improve our process.&lt;/p&gt;

&lt;p&gt;To that end, we made some changes. We established a Microsoft Teams channel to encourage communication by eliminating the ceremony of meetings and even E-mails. We also decided that development teams will build new components initially, and if other teams will benefit, the library will absorb them, with tweaks as needed to APIs or implementations, to support broader applicability across the program. Then the team that built the component first will replace their implementation with the library's when ready. While this means teams have to devote more time to developing components, it's transparent, and there is no bottleneck. &lt;/p&gt;

&lt;p&gt;This is an evolving workflow. There is always room for improvement.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#component-structure"&gt;
  &lt;/a&gt;
  Component structure
&lt;/h3&gt;

&lt;p&gt;Our components in TypeScript take three forms.&lt;/p&gt;

&lt;p&gt;The simplest components look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const TimePicker = (p: TimePickerProps) =&amp;gt; {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;TimePicker&lt;/code&gt; component has no children, so it's as straightforward as it gets. It's just a function!&lt;/p&gt;

&lt;p&gt;If the component has children, it still isn't too bad:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const Card: React.FC&amp;lt;CardProps&amp;gt; = p =&amp;gt; {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React's &lt;code&gt;FC&lt;/code&gt; type (for &lt;code&gt;FunctionComponent&lt;/code&gt;) includes a &lt;code&gt;children&lt;/code&gt; prop implicitly. We could also declare it just as we do &lt;code&gt;TimePicker&lt;/code&gt; but explicitly add a &lt;code&gt;children&lt;/code&gt; prop of type &lt;code&gt;ReactNode&lt;/code&gt; to &lt;code&gt;CardProps&lt;/code&gt;. I prefer &lt;code&gt;FC&lt;/code&gt; because it very clearly signifies the presence of &lt;code&gt;children&lt;/code&gt; to library consumers and because the type parameter lets me enjoy some type inference. Notice how I don't have to specify the type of &lt;code&gt;p&lt;/code&gt; because it's implicit from the type parameter &lt;code&gt;CardProps&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Still, not too bad, right?&lt;/p&gt;

&lt;p&gt;The last kind of component is a little complicated--form components. Our developers use &lt;a href="https://react-hook-form.com/"&gt;React Hook Form&lt;/a&gt;, and like every other form library I've used, it uses &lt;code&gt;ref&lt;/code&gt;s to maintain form state. This means our components need to provide a way to accept a &lt;code&gt;ref&lt;/code&gt; and delegate it to their children. &lt;/p&gt;

&lt;p&gt;Most React engineers don't know this because they don't have to, but React provides a function for exactly this purpose called &lt;code&gt;forwardRef&lt;/code&gt;, and we use it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const Button = React.forwardRef&amp;lt;HTMLButtonElement, ButtonProps&amp;gt;(function Button(p, ref) {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me try to break this down.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://www.oreilly.com/library/view/functional-programming-in/9781492048633/ch04.html"&gt;higher-order function&lt;/a&gt; is a function that takes functions as parameters or returns a function. Here &lt;code&gt;forwardRef&lt;/code&gt; takes that &lt;code&gt;Button&lt;/code&gt; function that renders the component as a parameter. Thanks to &lt;code&gt;forwardRef&lt;/code&gt;, development teams can pass refs to the form components in our library, which we pass along though that function parameter to our rendered implementation. The type parameters to &lt;code&gt;forwardRef&lt;/code&gt; provide type safety and inference. The type of &lt;code&gt;p&lt;/code&gt; is &lt;code&gt;ButtonProps&lt;/code&gt;, and the &lt;code&gt;ref&lt;/code&gt; will be hooked onto a &lt;code&gt;HTMLButtonElement&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the end, it's a little complicated and a fair bit of ceremony, but the result is pretty simple--a form component that accepts a &lt;code&gt;ref&lt;/code&gt; from the caller so form libraries can work with it as needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#directory-structure"&gt;
  &lt;/a&gt;
  Directory Structure
&lt;/h3&gt;

&lt;p&gt;When considering how to lay out your source code, it comes down to your team's preference, but as I tweeted recently:&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;There is a lot of commentary on how we should lay out source code in &lt;a href="https://twitter.com/hashtag/React?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#React&lt;/a&gt;. If you take two "things" (functions, classes, &lt;a href="https://twitter.com/hashtag/TypeScript?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#TypeScript&lt;/a&gt; interfaces, etc.), the higher the frequency that changing one changes the other, the closer they should be together&lt;/p&gt;‚Äî Neil Chaudhuri (&lt;a class="mentioned-user" href="https://dev.to/realneilc"&gt;@realneilc&lt;/a&gt;
) &lt;a href="https://twitter.com/RealNeilC/status/1443309713584689154?ref_src=twsrc%5Etfw"&gt;September 29, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;What does that really mean in practice?&lt;/p&gt;

&lt;p&gt;Simple. When it comes to our component library, this means organizing code dedicated to a particular component in the same directory and even in some cases the same file. This is how we do it at a high level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwmIU-ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wicbqeb6ki290b7lmgm1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwmIU-ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wicbqeb6ki290b7lmgm1.png" alt="Button component directory layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;Button.tsx&lt;/code&gt; contains the &lt;code&gt;ButtonProps&lt;/code&gt; interface, related types, and of course the component itself. Meanwhile, I love how Chakra UI allows us to separate theming from behavior, so the colors, spacing, font family, icon sizes, focus behavior, and other button details defined by our design system are in &lt;code&gt;ButtonTheme.ts&lt;/code&gt;, a different file in the same directory.&lt;/p&gt;

&lt;p&gt;Finally, although we could keep our tests and stories (more on these later) in the same directory, we prefer organizing them in their own subdirectories. I guess I've seen too much Marie Kondo.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#typescript-config"&gt;
  &lt;/a&gt;
  TypeScript Config
&lt;/h3&gt;

&lt;p&gt;I come from a background in &lt;a href="https://stackoverflow.com/questions/2690544/what-is-the-difference-between-a-strongly-typed-language-and-a-statically-typed"&gt;statically and strongly typed programming languages&lt;/a&gt; like Java and Scala. While I understand longtime JavaScript engineers balk at types, I find types make me extremely productive. As a result, our TypeScript config is very strict. In particular from our &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
...
  "compilerOptions": {
    ...
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    ...
  },
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As for building the library for application development teams, we scope our &lt;code&gt;tsconfig.json&lt;/code&gt; this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
...
  "include": [
    "src/**/*"
  ],
  "exclude": [
    "**/__stories__/*",
    "**/__test__/*"
  ],
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All our components, stories, and tests are in the &lt;code&gt;src&lt;/code&gt; directory, but we only want the components when we build the library. This is why we exclude the &lt;code&gt;__stories__&lt;/code&gt; and &lt;code&gt;__test__&lt;/code&gt; directories inside each component directory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-analysis-and-code-formatting"&gt;
  &lt;/a&gt;
  Static Analysis and Code Formatting
&lt;/h3&gt;

&lt;p&gt;Like everyone else, we rely on eslint and Prettier, and we don't do anything particularly special. Still, I do want to mention a couple of things.&lt;/p&gt;

&lt;p&gt;First is &lt;code&gt;eslint-plugin-jsx-a11y&lt;/code&gt;. We use &lt;a href="https://github.com/jsx-eslint/eslint-plugin-jsx-a11y"&gt;this eslint plugin&lt;/a&gt; to automate verification of the accessibility of our component library. It checks the JSX of our components for obvious violations. This is as far as we can go with automation, but we complement &lt;code&gt;eslint-plugin-jsx-a11y&lt;/code&gt; with manual auditing in Storybook I will discuss shortly.&lt;/p&gt;

&lt;p&gt;There might be something gnawing at the experienced engineers reading this. In the &lt;code&gt;tsconfig.json&lt;/code&gt; above, we exclude our stories and tests because they don't belong in the build. Still, you know we should apply the same quality standards to story code and test code as we do to production code. Code is code.&lt;/p&gt;

&lt;p&gt;To do this, we &lt;a href="https://www.typescriptlang.org/tsconfig#extends"&gt;extend&lt;/a&gt; &lt;code&gt;tsconfig.json&lt;/code&gt; in a file called &lt;code&gt;tsconfig.eslint.json&lt;/code&gt;,&lt;br&gt;
replacing the &lt;code&gt;exclude&lt;/code&gt; field with an empty array, and configure &lt;code&gt;eslint&lt;/code&gt; to use &lt;em&gt;that&lt;/em&gt;. This tells &lt;code&gt;eslint&lt;/code&gt; (and therefore Prettier) to include &lt;em&gt;everything&lt;/em&gt; in the &lt;code&gt;src&lt;/code&gt; folder in its analysis with identical TypeScript configuration. This means, for example, we can't cheat by using an implicit &lt;code&gt;any&lt;/code&gt; in our stories or tests either.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#builds"&gt;
  &lt;/a&gt;
  Builds
&lt;/h3&gt;

&lt;p&gt;We run our builds with &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt;. That may seem counterintuitive since Vite is the build tool for &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt; while our library is built with React, but Vite is actually agnostic. In fact, it amazed me how little configuration we needed. It basically just worked. Our Vite config is almost identical to the &lt;a href="https://vitejs.dev/guide/build.html#library-mode"&gt;example in the documentation&lt;/a&gt;. Just like the example, our build produces two bundle formats--&lt;code&gt;es&lt;/code&gt; and &lt;code&gt;umd&lt;/code&gt;--and it works fast.&lt;/p&gt;

&lt;p&gt;As you may know, TypeScript builds feature two phases, type checking and transpilation to JavaScript. Type checking by &lt;code&gt;tsc&lt;/code&gt;, the TypeScript compiler, is &lt;em&gt;very&lt;/em&gt; slow, so while it is very important, you should do it rarely. We only do it via the IDE in real time as we code or when we build the library for production--and break the build if type checking fails.&lt;/p&gt;

&lt;p&gt;We have a dedicated &lt;code&gt;typecheck&lt;/code&gt; script in our &lt;code&gt;package.json&lt;/code&gt; that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "scripts": {
    ...
    "typecheck": "tsc --p tsconfig.eslint.json --skipLibCheck --sourceRoot src --noEmit",
    ...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we use &lt;code&gt;tsconfig.eslint.json&lt;/code&gt; to typecheck everything.&lt;/p&gt;

&lt;p&gt;Meanwhile, transpiling your TypeScript source code to JavaScript is faster than type checking, but so is reading Tolstoy. Transpiling with &lt;code&gt;tsc&lt;/code&gt; or Babel is still not fast. However, the transpiler &lt;a href="https://esbuild.github.io/"&gt;esbuild&lt;/a&gt; is written in Go, a language &lt;a href="https://www.vidyasource.com/blog/scala-go"&gt;built for speed&lt;/a&gt;, and Vite uses it under the hood. Because we are transpiling constantly to see what's happening in Storybook, it's crucial that the process be fast. Thanks to esbuild, Vite does exactly what we need.&lt;/p&gt;

&lt;p&gt;Our production build, versioned with &lt;a href="https://semver.org/"&gt;Semantic Versioning&lt;/a&gt;, includes &lt;a href="https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html"&gt;declaration files&lt;/a&gt; for each component and an &lt;code&gt;index.d.ts&lt;/code&gt; file enumerating all components. These improve DX by enabling developers' IDEs to perform fast code completion. We also provide the &lt;a href="https://chakra-ui.com/docs/theming/customize-theme"&gt;theme file&lt;/a&gt; we use for our own components so that developers can apply the same theme to theirs. Our CI/CD pipeline publishes the library to a private NPM registry, which allows appropriately configured &lt;code&gt;npm&lt;/code&gt; installations on developer machines to fetch the library with a conventional &lt;code&gt;npm install&lt;/code&gt;. The &lt;code&gt;package.json&lt;/code&gt; file accompanying the library contains all the peer dependencies they will need to use the library so &lt;code&gt;npm&lt;/code&gt; can grab them, and for convenience it also contains the version of the design system it is built with for developers to track.&lt;/p&gt;

&lt;p&gt;It also contains configurations to define which files to package in the library and how consumers can import modules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
...  
  "files": [
    "dist"
  ],
  "types": "./dist/index.d.ts",
  "main": "./dist/components.umd.js",
  "module": "./dist/components.es.js",
  "exports": {
    ".": {
      "import": "./dist/components.es.js",
      "require": "./dist/components.umd.js"
    }
  }
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One last thing to note about the build. Although Vite of course provides minifying and other production readiness capabilities, we don't use them. We bundle the component library completely "raw." We find this helps developers debug their applications and report bugs (in those rare cases we make mistakes) with specificity. When they run their own builds, their tooling will apply minifying, tree shaking, and all other production processing to all their code and dependencies including the component library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;As I mentioned before, we limit the functionality of our components to the bare minimum necessary to add value. Still, components are code, and our consumers have expectations of our code. This means we need to test our components as much as we can and where it makes sense.&lt;/p&gt;

&lt;p&gt;Testing is a controversial topic. On Tech Twitter, engineers are more than happy to let you know why you are wrong to test your code in a different way than they do. I can only describe what works for us and why we think so while also stipulating that our methods are subject to change as we get better at this.&lt;/p&gt;

&lt;p&gt;Our approach is heavily inspired by this &lt;a href="https://storybook.js.org/blog/how-to-actually-test-uis/"&gt;Storybook blog post&lt;/a&gt;. In it, &lt;a href="https://twitter.com/winkerVSbecks"&gt;Varun Cachar&lt;/a&gt; describes different types of testing, when each is appropriate, and which tools make sense for which types based on the experiences of several large-scale engineering teams. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#storybook"&gt;
  &lt;/a&gt;
  Storybook
&lt;/h3&gt;

&lt;p&gt;Storybook is crucial to the development and testing of the component library for us, and it's indispensable documentation for our users.&lt;/p&gt;

&lt;p&gt;During development, we use it in a couple of ways. If the component is simple, then it's nice to have your code and Storybook side by side and watch your changes render as you make them with hot reload. On the other hand, when we aren't clear on what the API for a component should be, it's nice to write a few &lt;a href="https://storybook.js.org/docs/react/get-started/whats-a-story"&gt;stories&lt;/a&gt; to work out the DX for it. Experienced engineers might recognize this approach as analogous to &lt;br&gt;
&lt;a href="https://www.agilealliance.org/glossary/tdd/"&gt;Test-Driven Development (TDD)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We apply our design system custom theme in Chakra UI to every story in &lt;code&gt;preview.jsx&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const decorators = [Story =&amp;gt; &amp;lt;ChakraProvider theme={theme}&amp;gt;{Story()}&amp;lt;/ChakraProvider&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;During testing, we also use Storybook in multiple ways. For example, because we take a mobile first approach to our components, which matters for &lt;a href="https://bradfrost.com/blog/post/atomic-web-design/#organisms"&gt;organisms&lt;/a&gt; in particular like modals, we configure custom breakpoints like this in &lt;code&gt;preview.jsx&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const parameters = {
    viewport: {
        viewports: {
            xs: {
                name: "XS",
                styles: {
                    height: "568px",
                    width: "320px",
                },
                type: "mobile",
            },
            sm: {
                name: "SM",
                styles: {
                    height: "896px",
                    width: "480px",
                },
                type: "mobile",
            },
            md: {...},
            lg: {...},
            xl: {...},
        defaultViewport: "xs",
    },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I mentioned a CI/CD pipeline that builds the library and publishes it to a private registry. It turns out the pipeline also publishes our component Storybook to an &lt;a href="https://hub.docker.com/_/nginx"&gt;Nginx container&lt;/a&gt; so that the UX team can conduct visual testing on the components, and the ability to toggle among viewport sizes is extremely helpful. &lt;/p&gt;

&lt;p&gt;It's also helpful for development teams who use our components to interact with them. Thanks to &lt;a href="https://storybook.js.org/docs/react/essentials/controls"&gt;Storybook Controls&lt;/a&gt;, they can configure components themselves to see what happens. Thanks to &lt;a href="https://storybook.js.org/addons/@storybook/addon-docs"&gt;Storybook Docs&lt;/a&gt;, they can see the code and API props that generate each story. So Storybook provides a profound documentation benefit throughout the program.&lt;/p&gt;

&lt;p&gt;We also use Storybook for &lt;a href="https://storybook.js.org/blog/how-to-actually-test-uis/"&gt;composition testing&lt;/a&gt; occasionally though not as often as the Storybook team may prefer. For example, we have stories that demonstrate how to integrate our form components with React Hook Form, and this exposed issues we had with our &lt;code&gt;ref&lt;/code&gt;s. Generally though, we don't do a lot of composition testing until we need to &lt;a href="https://www.vidyasource.com/blog/code-coverage-is-killing-you"&gt;reproduce a scenario to fix a bug&lt;/a&gt; (and prove we've fixed it eventually).&lt;/p&gt;

&lt;p&gt;We make heavy use of &lt;a href="https://storybook.js.org/addons/@storybook/addon-a11y"&gt;storybook-addon-a11y&lt;/a&gt; to test for accessibility. As you can see from another post by &lt;a href="https://twitter.com/winkerVSbecks"&gt;Varun Cachar&lt;/a&gt;, who is definitely earning his paycheck, &lt;a href="https://storybook.js.org/blog/accessibility-testing-with-storybook/"&gt;Storybook offers a lot of features for accessibility testing&lt;/a&gt;. We make use of all of them. As I mentioned before, even though we do our best with &lt;code&gt;jsx-a11y&lt;/code&gt; in the build and Storybook visually to test for accessibility, it is still incumbent upon teams to add &lt;a href="https://www.npmjs.com/package/@axe-core/react"&gt;@axe-core/react&lt;/a&gt; to &lt;em&gt;their&lt;/em&gt; builds and perform their own visual tests in order to feel as confident as we can that we are providing the best possible experience to all our users.&lt;/p&gt;

&lt;p&gt;Finally, while Storybook has been invaluable for us and I recommend it strongly, I would be remiss if I didn't mention some gotchas. Storybook uses a lot of the same libraries we all use for theming, Markdown, and other things. When there are library conflicts between your version and theirs, bad things happen. For example, we got hit with the same conflict on &lt;a href="https://emotion.sh/docs/introduction"&gt;Emotion&lt;/a&gt; as this &lt;a href="https://github.com/storybookjs/storybook/issues/15879"&gt;issue on GitHub&lt;/a&gt;. To its credit, the Storybook team releases frequently. If nothing else, make sure you use identical versions of Storybook and all its addons and that you upgrade as soon as possible when updates are available. &lt;/p&gt;

&lt;p&gt;Storybook is also well aware of the "DivOps" revolution in JavaScript build tooling &lt;a href="https://storybook.js.org/blog/storybook-for-webpack-5/"&gt;and is positioning itself accordingly&lt;/a&gt;. This is exciting since Webpack had a good run but feels more and more like the past, and we wanted to use Vite with Storybook. We installed &lt;a href="https://storybook.js.org/blog/storybook-for-vite/"&gt;storybook-builder-vite&lt;/a&gt; knowing it's experimental to see how it would work for us. Overall, it makes our Storybook builds fast just as we hoped. Still, when you consider &lt;code&gt;storybook-builder-vite&lt;/code&gt; is raw, community-led by great engineers who have already given the community so much with their limited time and can't address every issue, and the general brittleness of Storybook I mentioned, your mileage may vary. Here is our Vite-related Storybook configuration in &lt;code&gt;main.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
    ...
    core: {
        builder: "storybook-builder-vite"
    },
    viteFinal: async config =&amp;gt; {
        return {
            ...config,
            plugins: ...,
            optimizeDeps: {
                ...config.optimizeDeps,
                entries: [`${path.relative(config.root, path.resolve(__dirname, "../src"))}/**/__stories__/*.stories.@(ts|tsx)`],
            },
        }
    },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#react-testing-library"&gt;
  &lt;/a&gt;
  React Testing Library
&lt;/h3&gt;

&lt;p&gt;If you have read any of my posts on testing, you know that I think our industry writ large gets testing wrong. We test some things too much. We test other things too little. We don't always know the purpose of our tests. And worst of all, because of perverse incentives, &lt;a href="https://www.vidyasource.com/blog/code-coverage-is-killing-you"&gt;we write tests to check a box&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I mentioned earlier that it has been a priority to endow our components with as little behavior as possible. Aside from the fact simpler code is easier to maintain and understand, this approach means fewer surprises for our consumers and less for us to test.&lt;/p&gt;

&lt;p&gt;Or so I thought.&lt;/p&gt;

&lt;p&gt;Our program has a mandatory minimum of 80% code coverage for our applications, and for reasons that don't make a lot of sense to me, that also applies to the component library. In my view, only components that maintain internal state offer the complexity that demands the ceremony of formal tests beyond Storybook, but alas, I don't make the rules.&lt;/p&gt;

&lt;p&gt;React Testing Library has become the &lt;em&gt;de facto&lt;/em&gt; standard for &lt;a href="https://storybook.js.org/blog/how-to-actually-test-uis/"&gt;interaction testing&lt;/a&gt; in React, and of course we use it for our own tests. But how could we write tests as quickly as possible to limit the impact of the code coverage standard?&lt;/p&gt;

&lt;p&gt;If you have written tests in any programming language, you understand the concept of "&lt;a href="https://stackoverflow.com/questions/12071344/what-are-fixtures-in-programming"&gt;test fixtures&lt;/a&gt;," the setup for your tests. For us, that means test fixtures are simply components configured with different props.&lt;/p&gt;

&lt;p&gt;But isn't that exactly what stories in Storybook are?&lt;/p&gt;

&lt;p&gt;Storybook offers a feature I love--the ability to import stories into tests written with React Testing Library as fixtures using&lt;br&gt;
&lt;a href="https://storybook.js.org/addons/@storybook/testing-react"&gt;@storybook/testing-react&lt;/a&gt;. Without it, we would need to duplicate &lt;br&gt;
the same code as stories in Storybook and fixtures in tests. The autocompletion is great too thanks to the TypeScript support built into &lt;code&gt;@storybook/testing-react&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Aside from all that, our tests work exactly as you would expect if you know React Testing Library.&lt;/p&gt;




&lt;p&gt;I know this is a lot, and it might have been slightly more entertaining as an audiobook. Still, I hope I conveyed the value in design systems and component libraries and the lessons we learned in project management, communications, accessibility, engineering, and testing to build something that will impact the lives of millions. I hope you can do the same...but better.&lt;/p&gt;

&lt;p&gt;Now go take a nap. You earned it.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>a11y</category>
    </item>
    <item>
      <title>Guia e recursos open source para participar do Hacktoberfest 2021</title>
      <author>Thalles Augusto</author>
      <pubDate>Tue, 19 Oct 2021 20:25:24 +0000</pubDate>
      <link>https://dev.to/theslladev/guia-e-recursos-open-source-para-participar-do-hacktoberfest-2021-562d</link>
      <guid>https://dev.to/theslladev/guia-e-recursos-open-source-para-participar-do-hacktoberfest-2021-562d</guid>
      <description>&lt;p&gt;Ol√° mundo! Estou fazendo meu primeiro post para divulgar o evento do &lt;em&gt;Hacktoberfest&lt;/em&gt; 2021 e compartilhar conte√∫dos sobre o &lt;em&gt;open source&lt;/em&gt;, com o principal objetivo de atrair mais pessoas e ajudar quem est√° come√ßando.&lt;br&gt;
Com esse guia e recursos voc√™ conseguir√° dar seus primeiros passos no mundo open source.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-opensource"&gt;
  &lt;/a&gt;
  O que √© Open-Source?
&lt;/h2&gt;

&lt;p&gt;O open source ou ‚Äúc√≥digo aberto‚Äù significa que o c√≥digo fonte de um site, sistema ou aplicativo √© aberto ao p√∫blico. √â um √≥timo movimento para o desenvolvimento de softwares pois ele possibilita o acesso e a modifica√ß√£o ao c√≥digo fonte desses sistemas. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;‚ÄúO c√≥digo aberto permite um m√©todo de desenvolvimento de software que aproveita o poder da revis√£o por pares distribu√≠da e a transpar√™ncia do processo. A promessa do c√≥digo aberto √© de maior qualidade, melhor confiabilidade, maior flexibilidade, menor custo e o fim do aprisionamento predat√≥rio de fornecedores.‚Äù&lt;/em&gt;&lt;/strong&gt;, &lt;a href="https://opensource.org/about"&gt;Open Source Initiative(OSI)&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Isso √© muito bom para a participa√ß√£o e colabora√ß√£o ativa da comunidade de usu√°rios e desenvolvedores para dar seus feedbacks, sugerir mudan√ßas, realizar testes, corrigir erros e fazer com que esses sistemas tenham uma melhora cont√≠nua e de qualidade.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exemplos-de-projetos-open-source"&gt;
  &lt;/a&gt;
  Exemplos de projetos open source
&lt;/h2&gt;

&lt;p&gt;Lista com alguns reposit√≥rios open source conhecidos :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sistema Operacional &lt;a href="https://github.com/torvalds/linux"&gt;Linux&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Navegador &lt;a href="https://github.com/mozilla/gecko-dev"&gt;Firefox&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Editor de sprite &lt;a href="https://github.com/aseprite/aseprite"&gt;Aseprite&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Editor de c√≥digo &lt;a href="https://github.com/microsoft/vscode"&gt;VSCode&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Linguagens e Framework/Libs:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vuejs/vue"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/react"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir"&gt;Elixir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/flutter/flutter"&gt;Flutter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twbs/bootstrap"&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Kit de ferramentas de √≠cones &lt;a href="https://github.com/FortAwesome/Font-Awesome"&gt;FontAwesome&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Sistema de Versionamento de c√≥digo &lt;a href="https://github.com/git/git"&gt;GIT&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Grava√ß√£o de tela e streaming &lt;a href="https://github.com/obsproject/obs-studio"&gt;OBS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Aplicativo de voz &lt;a href="https://github.com/discordjs/discord.js"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/godotengine/godot"&gt;Game Engine Godot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para saber mais sobre como contribuir para o Open Source, veja este guia sobre como fazer contribui√ß√µes, para novatos e veteranos: &lt;a href="https://opensource.guide/pt/how-to-contribute/"&gt;Guias de c√≥digo aberto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recomendo tamb√©m esse √≥timo &lt;a href="https://www.udemy.com/course/git-e-github-para-iniciantes/"&gt;curso de Git e Github&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-hacktoberfest-2021"&gt;
  &lt;/a&gt;
  O que √© Hacktoberfest 2021?
&lt;/h2&gt;

&lt;p&gt;√â um &lt;a href="https://pt.wikipedia.org/wiki/Hackathon"&gt;Hackathon&lt;/a&gt; que est√° na sua 8¬∞ edi√ß√£o, apoiado pela DigitalOcean, Intel, Dev.to, GitHub/GitLab e outros. Esse evento acontece durante todo o m√™s de outubro celebrando e apoiando os projetos e softwares e de c√≥digo aberto. Nesse per√≠odo seu objetivo √© fazer contribui√ß√µes, convidar e incentivar a comunidade a fazer colabora√ß√µes para o mundo open source. Existe v√°rias formas de se fazer isso:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Prepare e compartilhe seu projeto para receber colabora√ß√µes&lt;/li&gt;
&lt;li&gt;Contribua com feedback, sugest√µes, tradu√ß√µes, relatando bugs ou melhorias no c√≥digo para um projeto&lt;/li&gt;
&lt;li&gt;Organize um evento sobre open-source e hacktoberfest&lt;/li&gt;
&lt;li&gt;Ajude a comunidade com mentoria, criando e compartilhando conte√∫dos&lt;/li&gt;
&lt;li&gt;Doe diretamente para projetos de c√≥digo aberto&lt;/li&gt;
&lt;li&gt;De uma ‚Äústar‚Äù / ‚Äúestrela‚Äù no reposit√≥rio do projeto&lt;/li&gt;
&lt;li&gt;Se voluntarie como mantenedor do reposit√≥rio para ajudar no que for poss√≠vel &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#vantagens-de-participar"&gt;
  &lt;/a&gt;
  Vantagens de participar
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;√ìtima forma de aprender&lt;/li&gt;
&lt;li&gt;Fazer networking com pessoas do mundo todo&lt;/li&gt;
&lt;li&gt;Apoiar o movimento open source&lt;/li&gt;
&lt;li&gt;Ao concluir o desafio voc√™ tem as op√ß√µes de escolher uma camisa exclusiva do evento ou plantar √°rvores em seu nome e ajudar a tornar o Hacktoberfest 2021 mais neutro em carbono.(&lt;strong&gt;OBS&lt;/strong&gt;: apenas os primeiros 50,000 participantes que conclu√≠rem o desafio ganharam a camiseta e os adesivos)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AbZt5zBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7qpy5pui8ka9a8id4wy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AbZt5zBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7qpy5pui8ka9a8id4wy.png" alt="Camiseta exclusiva do evento Hacktoberfest 2020 e adesivos das marcas apoiadoras"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#como-isso-funciona"&gt;
  &lt;/a&gt;
  Como isso funciona?
&lt;/h2&gt;

&lt;p&gt;Os mantenedores determinam se seus projetos de c√≥digo aberto participam adicionando o t√≥pico ‚Äòhacktoberfest‚Äô no reposit√≥rio.&lt;br&gt;
Pull Requests(ou tamb√©m conhecidos como PR para abreviar) de qualidade enviadas no GitHub e GitLab s√£o recompensadas. &lt;br&gt;
A manuten√ß√£o envolvida dos reposit√≥rios marcados do Hacktoberfest √© recompensada. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#regras"&gt;
  &lt;/a&gt;
  Regras
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;As solicita√ß√µes pull podem ser feitas em qualquer reposit√≥rio/projetos hospedados no GitHub ou GitLab. Procure o &lt;a href="https://github.com/topics/hacktoberfest"&gt;t√≥pico 'hacktoberfest'&lt;/a&gt; para saber se um projeto est√° participando do Hacktoberfest.&lt;/li&gt;
&lt;li&gt;A pull request deve conter commits que voc√™ mesmo fez.&lt;/li&gt;
&lt;li&gt;Se um mantenedor relatar sua solicita√ß√£o de pull como spam, isso n√£o ser√° contabilizado para sua participa√ß√£o no Hacktoberfest.&lt;/li&gt;
&lt;li&gt;Se um mantenedor relatar um comportamento que n√£o esteja de acordo com o c√≥digo de conduta do projeto, voc√™ n√£o poder√° participar.&lt;/li&gt;
&lt;li&gt;Um pull request √© considerado aprovado quando t√™m uma revis√£o geral de aprova√ß√£o dos mantenedores, ou foi merged(mesclada) pelos mantenedores, ou recebeu o r√≥tulo de 'hacktoberfest-accepted.&lt;/li&gt;
&lt;li&gt;Para obter a premia√ß√£o, voc√™ deve ter quatro solicita√ß√µes de pull (PR) aprovadas em projetos aceitos entre 1 e 31 de outubro em qualquer fuso hor√°rio.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;O que n√£o fazer!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Em linha com o valor do Hacktoberfest ‚Äúquantidade √© divertido, qualidade √© a chave‚Äù, aqui est√£o alguns exemplos de PRs que √© considerado contribui√ß√µes de baixa qualidade e que s√£o desencorajadas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;PRs que s√£o automatizados (por exemplo, PRs de abertura com script para remover espa√ßos em branco/otimizar imagens)&lt;/li&gt;
&lt;li&gt;PRs que s√£o perturbadores (por exemplo, tomar a branch/commit de outra pessoa e fazer um PR)&lt;/li&gt;
&lt;li&gt;PRs que s√£o considerados por um mantenedor do projeto como um obst√°culo em vez de ajudar&lt;/li&gt;
&lt;li&gt;Algo que √© claramente uma tentativa de simplesmente marcar com +1 sua contagem de PR&lt;/li&gt;
&lt;li&gt;Por √∫ltimo, mas n√£o menos importante, um PR para corrigir um erro de digita√ß√£o est√° bem. 5 PRs para remover espa√ßos em branco perdidos ... n√£o √©.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#como-participar"&gt;
  &lt;/a&gt;
  Como participar?
&lt;/h3&gt;

&lt;p&gt;Basta fazer login com sua conta do GitHub ou GitLab no &lt;a href="https://hacktoberfest.digitalocean.com/register"&gt;site oficial do hacktoberfest&lt;/a&gt;, ap√≥s ter feito o login voc√™ j√° est√° participando do evento!&lt;/p&gt;

&lt;p&gt;Ainda n√£o conhece o Git e GitHub? De uma olhada nesses &lt;a href="https://docs.github.com/pt/get-started/quickstart/git-and-github-learning-resources"&gt;recursos de aprendizagem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8xNsv-rR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94dokfniqdh5fy05pjhk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8xNsv-rR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94dokfniqdh5fy05pjhk.png" alt="P√°gina de login do evento Hacktoberfest 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O pr√≥ximo passo ent√£o √© buscar por projetos que contenham o &lt;a href="https://github.com/topics/hacktoberfest"&gt;t√≥pico ‚Äòhacktoberfest‚Äô&lt;/a&gt; e enviar as pull request.&lt;br&gt;
&lt;strong&gt;Aten√ß√£o!&lt;/strong&gt; Certifique-se de se inscrever no site oficial do Hacktoberfest para que suas solicita√ß√µes de pull sejam contabilizadas. &lt;/p&gt;

&lt;p&gt;Selecionei alguns projetos com maneiras simples de contribuir:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-contributions"&gt;
  &lt;/a&gt;
  First Contributions
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Reposit√≥rio feito para ajudar iniciantes a contribuir para projetos de c√≥digo aberto.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/firstcontributions/first-contributions"&gt;Reposit√≥rio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/firstcontributions/first-contributions/blob/master/translations/README.pt_br.md"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#filosofunk"&gt;
  &lt;/a&gt;
  Filosofunk
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Projeto feito para juntar frases engra√ßadas, divertidas, filos√≥ficas ou criativas de m√∫sicas de funk. Voc√™ pode adicionar uma nova frase apenas editando um arquivo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/IgorRozani/filosofunk"&gt;Reposit√≥rio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/IgorRozani/filosofunk#sugerir-mudan%C3%A7as"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#canvaz"&gt;
  &lt;/a&gt;
  Canvaz
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Use o elemento HTML canvas para fazer uma arte para o desafio de celebra√ß√£o do hacktoberfest&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/zero-to-mastery/Canvaz"&gt;Reposit√≥rio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zero-to-mastery/Canvaz#%EF%B8%8F-how-to-contribute"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#free-it-courses"&gt;
  &lt;/a&gt;
  Free IT Courses
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Reposit√≥rio com os melhores cursos de TI de gra√ßa&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/alinebastos/free-courses"&gt;Reposit√≥rio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Como contribuir: se aprova e conhece algum curso que n√£o esteja na lista adicione o link e o nome do curso na se√ß√£o correta.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#open-pixel-art"&gt;
  &lt;/a&gt;
  Open Pixel Art
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Um projeto colaborativo de pixel art para ensinar as pessoas a contribuir com o c√≥digo aberto.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/twilio-labs/open-pixel-art/tree/master/docs/br"&gt;Reposit√≥rio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twilio-labs/open-pixel-art/blob/master/docs/br/CONTRIBUTING.md"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hacktoberfest-animations"&gt;
  &lt;/a&gt;
  Hacktoberfest Animations
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Crie uma anima√ß√£o do t√≠tulo no seletor de anima√ß√µes para o Hacktoberfest&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/NiallEccles/Hacktoberfest-animations"&gt;Reposit√≥rio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NiallEccles/Hacktoberfest-animations/blob/master/CONTRIBUTING.md"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#simple-icons"&gt;
  &lt;/a&gt;
  Simple Icons
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Projeto free com mais de 2000 √≠cones SVG de marcas populares, voc√™ pode requisitar um novo √≠cone que ainda n√£o tem e adicion√°-lo ou escolher um √≠cone j√° solicitado e apenas adicionar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/simple-icons/simple-icons"&gt;Reposit√≥rio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/simple-icons/simple-icons/blob/develop/CONTRIBUTING.md"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cloud-haiku"&gt;
  &lt;/a&gt;
  Cloud Haiku
&lt;/h3&gt;

&lt;p&gt;Este projeto com uma simples edi√ß√£o voc√™ consegue adicionar um poema em forma de &lt;a href="https://pt.wikipedia.org/wiki/Haiku"&gt;‚Äúhaiku‚Äù&lt;/a&gt; e se divertir enquanto o faz.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/do-community/cloud_haiku"&gt;Reposit√≥rio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/do-community/cloud_haiku#contributing"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sabe ingl√™s ou quer praticar? Ajude contribuindo com esses e outros projetos fazendo corre√ß√µes e tradu√ß√µes:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elixir-school"&gt;
  &lt;/a&gt;
  Elixir School
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Elixir School √© uma escola para aprender e dominar a linguagem de programa√ß√£o Elixir.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/elixirschool/elixirschool"&gt;Reposit√≥rio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixirschool/elixirschool/blob/master/CONTRIBUTING.md"&gt;Como contribuir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voc√™ pode acompanhar seu progresso no &lt;a href="https://hacktoberfest.digitalocean.com/profile"&gt;perfil&lt;/a&gt; do site oficial do evento e ver mais informa√ß√µes sobre cada uma das solicita√ß√µes.&lt;/p&gt;

&lt;p&gt;Acesse o &lt;a href="https://discord.com/invite/hacktoberfest"&gt;discord&lt;/a&gt; oficial do Hacktoberfest para fazer networking, tirar d√∫vidas e compartilhar e procurar por projetos&lt;/p&gt;

&lt;p&gt;Veja a lista de todos os &lt;a href="https://hacktoberfest.digitalocean.com/events"&gt;eventos&lt;/a&gt; que est√£o acontecendo durante o todo o m√™s de outubro&lt;/p&gt;

&lt;p&gt;Caso ainda tenha alguma d√∫vida voc√™ pode perguntar nos coment√°rios abaixo, me mandar uma mensagem no meu &lt;a href="https://www.linkedin.com/in/thalles-augusto/"&gt;linkedin&lt;/a&gt; ou consultar as &lt;a href="https://hacktoberfest.digitalocean.com/faq"&gt;perguntas mais frequentes respondidas aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Muito obrigado e espero que voc√™s tenham entendido o conte√∫do e as vantagens de fazer parte do open source! E n√£o pare por aqui continue buscando mais conhecimento.&lt;/p&gt;

&lt;p&gt;O conte√∫do foi √∫til para voc√™ de alguma forma? Contribua compartilhando-o com suas conex√µes, nas redes sociais e/ou dando um ‚Äúlike‚Äù, isso ajudaria muito.&lt;/p&gt;

&lt;p&gt;Fique a vontade para dar seu feedback e sugest√µes!&lt;/p&gt;

&lt;p&gt;Conhece e indica algum projeto open source ou recurso que n√£o foi citado no post? Compartilha a√≠ nos coment√°rios&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>braziliandevs</category>
      <category>opensource</category>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>How to make comical visualizations in Python: Explained using Netflix Movie and TV Show¬†dataset</title>
      <author>Paridhi Agarwal</author>
      <pubDate>Tue, 19 Oct 2021 20:18:12 +0000</pubDate>
      <link>https://dev.to/paridhi/how-to-make-comical-visualizations-in-python-explained-using-netflix-movie-and-tv-show-dataset-4418</link>
      <guid>https://dev.to/paridhi/how-to-make-comical-visualizations-in-python-explained-using-netflix-movie-and-tv-show-dataset-4418</guid>
      <description>&lt;p&gt;After you‚Äôre done watching a &lt;a href="https://www.youtube.com/watch?v=3sxg1xXmd0I"&gt;brilliant show&lt;/a&gt; or &lt;a href="https://www.youtube.com/watch?v=prwUFBsDRLk&amp;amp;t=10s"&gt;movie&lt;/a&gt; on Netflix, does it ever occur to you just how awesome Netflix is for giving you access to this amazing plethora of content? Surely, I‚Äôm not alone in this, am I?&lt;/p&gt;

&lt;p&gt;One thought leads to another, and before you know it, you‚Äôve made up your mind to do an exploratory data analysis to find out more about who the most popular actors are and which country prefers which genre.&lt;/p&gt;

&lt;p&gt;Now, I‚Äôve spent my fair share of time making regular bar plots and pie plots using Python, and while they do a perfect job in conveying the results, I wanted to add a little fun element to this project.&lt;/p&gt;

&lt;p&gt;I recently learned that you can create &lt;a href="https://matplotlib.org/stable/gallery/showcase/xkcd.html"&gt;XKCD-like plots&lt;/a&gt; in Matplotlib, Python‚Äôs most popular data viz library, and decided that I should &lt;em&gt;comify&lt;/em&gt; all my plots in this project just to make things a little more interesting.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at what the data has to say!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-data"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The data&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I used &lt;a href="https://www.kaggle.com/shivamb/netflix-shows"&gt;this dataset&lt;/a&gt;, that‚Äôs available on Kaggle. It contains 7,787 movie and TV show titles available on Netflix as of 2020.&lt;/p&gt;

&lt;p&gt;To start off, I installed the required libraries and read the CSV file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pandas as pd
import matplotlib.pyplot as plt
plt.rcParams['figure.dpi'] = 200

df = pd.read_csv("../input/netflix-shows/netflix_titles.csv")
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bbRYNRzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyuz5q0e5enupbwbxqp3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bbRYNRzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyuz5q0e5enupbwbxqp3.png" alt="The raw dataset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also added new features to the dataset that will be used later on in the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df["date_added"] = pd.to_datetime(df['date_added'])
df['year_added'] = df['date_added'].dt.year.astype('Int64')
df['month_added'] = df['date_added'].dt.month

df['season_count'] = df.apply(lambda x : x['duration'].split(" ")[0] if "Season" in x['duration'] else "", axis = 1)
df['duration'] = df.apply(lambda x : x['duration'].split(" ")[0] if "Season" not in x['duration'] else "", axis = 1)
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sesgIFsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9lywia58wdj73aqa9d0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sesgIFsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9lywia58wdj73aqa9d0.png" alt="Dataset after adding a few other features"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can get to the interesting stuff!&lt;/p&gt;

&lt;p&gt;Let me also add that, to XKCDify plots in matplotlib, you just need to engulf all your plotting code within the following block and you‚Äôll be all set:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;with plt.xkcd():
    # all your regular visualization code goes in here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G_Q8hmzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eou2ytvnu2w0li1fcbvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G_Q8hmzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eou2ytvnu2w0li1fcbvw.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-netflix-through-the%C2%A0years"&gt;
  &lt;/a&gt;
  1. Netflix through the¬†years
&lt;/h3&gt;

&lt;p&gt;First, I thought it would be worth looking at a timeline that depicts the evolution of Netflix over the years.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from datetime import datetime
## these go on the numbers below
tl_dates = [
    "1997\nFounded",
    "1998\nMail Service",
    "2003\nGoes Public",
    "2007\nStreaming service",
    "2016\nGoes Global",
    "2021\nNetflix &amp;amp; Chill"
]
tl_x = [1, 2, 4, 5.3, 8,9]
## the numbers go on these
tl_sub_x = [1.5,3,5,6.5,7]
tl_sub_times = [
    "1998","2000","2006","2010","2012"
]
tl_text = [
    "Netflix.com launched",
    "Starts\nPersonal\nRecommendations","Billionth DVD Delivery","Canadian\nLaunch","UK Launch"]
with plt.xkcd():
# Set figure &amp;amp; Axes
    fig, ax = plt.subplots(figsize=(15, 4), constrained_layout=True)
    ax.set_ylim(-2, 1.75)
    ax.set_xlim(0, 10)
# Timeline : line
    ax.axhline(0, xmin=0.1, xmax=0.9, c='deeppink', zorder=1)
# Timeline : Date Points
    ax.scatter(tl_x, np.zeros(len(tl_x)), s=120, c='palevioletred', zorder=2)
    ax.scatter(tl_x, np.zeros(len(tl_x)), s=30, c='darkmagenta', zorder=3)
    # Timeline : Time Points
    ax.scatter(tl_sub_x, np.zeros(len(tl_sub_x)), s=50, c='darkmagenta',zorder=4)
# Date Text
    for x, date in zip(tl_x, tl_dates):
        ax.text(x, -0.55, date, ha='center', 
                fontfamily='serif', fontweight='bold',
                color='royalblue',fontsize=12)
# Stemplot : vertical line
    levels = np.zeros(len(tl_sub_x))    
    levels[::2] = 0.3
    levels[1::2] = -0.3
    markerline, stemline, baseline = ax.stem(tl_sub_x, levels, use_line_collection=True)    
    plt.setp(baseline, zorder=0)
    plt.setp(markerline, marker=',', color='darkmagenta')
    plt.setp(stemline, color='darkmagenta')
# Text
    for idx, x, time, txt in zip(range(1, len(tl_sub_x)+1), tl_sub_x, tl_sub_times, tl_text):
        ax.text(x, 1.3*(idx%2)-0.5, time, ha='center', 
                fontfamily='serif', fontweight='bold',
                color='royalblue', fontsize=11)
ax.text(x, 1.3*(idx%2)-0.6, txt, va='top', ha='center', 
            fontfamily='serif',color='royalblue')

# Spine
    for spine in ["left", "top", "right", "bottom"]:
        ax.spines[spine].set_visible(False)
# Ticks    
    ax.set_xticks([]) 
    ax.set_yticks([])
# Title
    ax.set_title("Netflix through the years", fontweight="bold", fontfamily='serif', fontsize=16, color='royalblue')
    ax.text(2.4,1.57,"From DVD rentals to a global audience of over 150m people - is it time for Netflix to Chill?", fontfamily='serif', fontsize=12, color='mediumblue')
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vehYkN9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48s7g44k21wm6s536ys8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vehYkN9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48s7g44k21wm6s536ys8.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This plot paints a pretty decent picture of Netflix‚Äôs journey. Also, the plot looks hand-drawn because of the &lt;code&gt;plt.xkcd()&lt;/code&gt; function. Wicked stuff.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-movies-vs-tv%C2%A0shows"&gt;
  &lt;/a&gt;
  2. Movies vs TV¬†Shows
&lt;/h3&gt;

&lt;p&gt;Next, I decided to take a look at the ratio of Movies vs TV Shows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;col = "type"
grouped = df[col].value_counts().reset_index()
grouped = grouped.rename(columns = {col : "count", "index" : col})
with plt.xkcd():
    explode = (0, 0.1)  # only "explode" the 2nd slice (i.e. 'TV Show')
fig1, ax1 = plt.subplots(figsize=(5, 5), dpi=100)
    ax1.pie(grouped["count"], explode=explode, labels=grouped["type"], autopct='%1.1f%%',
        shadow=True, startangle=90)
    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_EYEcT-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33xm9mfhe747u2gwahex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_EYEcT-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33xm9mfhe747u2gwahex.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The number of TV shows on the platform is less than a third of the total content. So probably, both you and I have better chances of finding a relatively good movie than a TV Show on Netflix. &lt;em&gt;*sighs*&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-countries-with-the-most%C2%A0content"&gt;
  &lt;/a&gt;
  3. Countries with the most¬†content
&lt;/h3&gt;

&lt;p&gt;For my third visualization, I wanted to make a horizontal bar graph that represented the top 25 countries with the most content. The &lt;code&gt;country&lt;/code&gt; column in the dataframe had a few rows that contained more than 1 country (separated by commas).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oDI945zb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emv3gmyjtmb204h13xbj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDI945zb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emv3gmyjtmb204h13xbj.jpeg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To handle this, I split the data in the country column with &lt;code&gt;", ‚Äú&lt;/code&gt; as the separator and then put all the countries into a list called &lt;code&gt;categories&lt;/code&gt;¬†:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from collections import Counter
col = "country"
categories = ", ".join(df[col].fillna("")).split(", ")
counter_list = Counter(categories).most_common(25)
counter_list = [_ for _ in counter_list if _[0] != ""]
labels = [_[0] for _ in counter_list]
values = [_[1] for _ in counter_list]
with plt.xkcd():
    fig, ax = plt.subplots(figsize=(10, 10), dpi=100)
    y_pos = np.arange(len(labels))
    ax.barh(y_pos, values, align='center')
    ax.set_yticks(y_pos)
    ax.set_yticklabels(labels)
    ax.invert_yaxis()  # labels read top-to-bottom
    ax.set_xlabel('Content')
    ax.set_title('Countries with most content')
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ryf8T8sn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u6njf6ovk5fmkqst3a6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ryf8T8sn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u6njf6ovk5fmkqst3a6.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some overall thoughts after looking at the plot above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The vast majority of content on Netflix is from the United States (quite obvious).&lt;/li&gt;
&lt;li&gt;Even though Netflix launched quite late in India (in 2016), it‚Äôs already in the second position right after the US. So, India is a big market for Netflix.&lt;/li&gt;
&lt;li&gt;I‚Äôm going to look for content from Thailand on Netflix, now that I know that it‚Äôs there on the platform, brb.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-popular-directors-and%C2%A0actors"&gt;
  &lt;/a&gt;
  4. Popular directors and¬†actors
&lt;/h3&gt;

&lt;p&gt;To take a look at the popular directors and actors, I decided to plot a figure (each) with six subplots from the top six countries with the most content and make horizontal bar charts for each subplot. Take a look at the plots below and read that first line again. üòõ&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-popular-directors"&gt;
  &lt;/a&gt;
  a. Popular directors:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from collections import Counter
from matplotlib.pyplot import figure
import math
colours = ["orangered", "mediumseagreen", "darkturquoise", "mediumpurple", "deeppink", "indianred"]
countries_list = ["United States", "India", "United Kingdom", "Japan", "France", "Canada"]
col = "director"
with plt.xkcd():
    figure(num=None, figsize=(20, 8)) 
    x=1
    for country in countries_list:
        country_df = df[df["country"]==country]
        categories = ", ".join(country_df[col].fillna("")).split(", ")
        counter_list = Counter(categories).most_common(6)
        counter_list = [_ for _ in counter_list if _[0] != ""]
        labels = [_[0] for _ in counter_list][::-1]
        values = [_[1] for _ in counter_list][::-1]
        if max(values)&amp;lt;10:
            values_int = range(0, math.ceil(max(values))+1)
        else:
            values_int = range(0, math.ceil(max(values))+1, 2)
        plt.subplot(2, 3, x)
        plt.barh(labels,values, color = colours[x-1])
        plt.xticks(values_int)
        plt.title(country)
        x+=1
    plt.suptitle('Popular Directors with the most content')
    plt.tight_layout()
    plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpuQr3fM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkgbfri13l0nhhh84u8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpuQr3fM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkgbfri13l0nhhh84u8v.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#b-popular%C2%A0actors"&gt;
  &lt;/a&gt;
  b. Popular¬†actors:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;col = "cast"
with plt.xkcd():
    figure(num=None, figsize=(20, 8)) 
    x=1
    for country in countries_list:
        df["from_country"] = df['country'].fillna("").apply(lambda x : 1 if country.lower() in x.lower() else 0)
        small = df[df["from_country"] == 1]
        cast = ", ".join(small['cast'].fillna("")).split(", ")
        tags = Counter(cast).most_common(11)
        tags = [_ for _ in tags if "" != _[0]]
        labels, values = [_[0]+"  " for _ in tags][::-1], [_[1] for _ in tags][::-1]
        if max(values)&amp;lt;10:
            values_int = range(0, math.ceil(max(values))+1)
        elif max(values)&amp;gt;=10 and max(values)&amp;lt;=20:
            values_int = range(0, math.ceil(max(values))+1, 2)
        else:
            values_int = range(0, math.ceil(max(values))+1, 5)
        plt.subplot(2, 3, x)
        plt.barh(labels,values, color = colours[x-1])
        plt.xticks(values_int)
        plt.title(country)
        x+=1
    plt.suptitle('Popular Actors with the most content')
    plt.tight_layout()
    plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LSH7qt7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r4floab1c821ytqnsrx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LSH7qt7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r4floab1c821ytqnsrx.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-some-of-the-oldest-movies-and-tv%C2%A0shows"&gt;
  &lt;/a&gt;
  5. Some of the oldest movies and TV¬†shows
&lt;/h3&gt;

&lt;p&gt;I thought it would  be quite interesting to look at the oldest movies and TV shows that are available on Netflix and how long back they‚Äôre dated.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-oldest%C2%A0movies"&gt;
  &lt;/a&gt;
  a. Oldest¬†movies:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;small = df.sort_values("release_year", ascending = True)
#small.duration stores empty values if the content type is 'TV Show'
small = small[small['duration'] != ""].reset_index()
small[['title', "release_year"]][:15]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3jBF7yGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hdo47l71cfv06rykkfc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3jBF7yGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hdo47l71cfv06rykkfc.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#b-oldest-tv%C2%A0shows"&gt;
  &lt;/a&gt;
  b. Oldest TV¬†shows:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;small = df.sort_values("release_year", ascending = True)
#small.season_count stores empty values if the content type is 'Movie'
small = small[small['season_count'] != ""].reset_index()
small = small[['title', "release_year"]][:15]
small
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YfAPQRrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdnfbqynuk0jlldzyr8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YfAPQRrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdnfbqynuk0jlldzyr8t.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Woah, Netflix has some &lt;em&gt;realllyyy&lt;/em&gt; old movies and TV shows, some even released more than 80 years ago. Have you watched any of these?&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;Fun fact&lt;/strong&gt;: When he began implementing Python, Guido van Rossum was also reading the published scripts from &lt;a href="https://en.wikipedia.org/wiki/Monty_Python"&gt;‚ÄúMonty Python‚Äôs Flying Circus‚Äù&lt;/a&gt;, a BBC comedy series from the 1970s (that was added on Netflix in 2018). Van Rossum thought he needed a name that was short, unique, and slightly mysterious, so he decided to call the language Python.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-does-netflix-have-the-latest%C2%A0content"&gt;
  &lt;/a&gt;
  6. Does Netflix have the latest¬†content?
&lt;/h3&gt;

&lt;p&gt;Yes, Netflix is cool and all for having content from a century ago, but does it also have the latest movies and TV shows? To find this out, first I calculated the difference between the date on which the content was added on Netflix and the release year of that content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df["year_diff"] = df["year_added"]-df["release_year"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I created a scatter plot with x-axis as the &lt;em&gt;year difference&lt;/em&gt; and y-axis as the &lt;em&gt;number of movies/TV shows&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;col = "year_diff"
only_movies = df[df["duration"]!=""]
only_shows = df[df["season_count"]!=""]
grouped1 = only_movies[col].value_counts().reset_index()
grouped1 = grouped1.rename(columns = {col : "count", "index" : col})
grouped1 = grouped1.dropna()
grouped1 = grouped1.head(20)
grouped2 = only_shows[col].value_counts().reset_index()
grouped2 = grouped2.rename(columns = {col : "count", "index" : col})
grouped2 = grouped2.dropna()
grouped2 = grouped2.head(20)
with plt.xkcd():
    figure(num=None, figsize=(8, 5)) 
    plt.scatter(grouped1[col], grouped1["count"], color = "hotpink")
    plt.scatter(grouped2[col], grouped2["count"], color = '#88c999')
    values_int = range(0, math.ceil(max(grouped1[col]))+1, 2)
    plt.xticks(values_int)
    plt.xlabel("Difference between the year when the content has been\n added on Netflix and the realease year")
    plt.ylabel("Number of Movies/TV Shows")
    plt.legend(["Movies", "TV Shows"])
    plt.tight_layout()
    plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--olyW1w0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54g5bcww2motog4f4y1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--olyW1w0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54g5bcww2motog4f4y1u.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the majority of the content on Netflix has been added within a year of its release date. So, Netflix does have the latest content most of the time!&lt;/p&gt;

&lt;p&gt;If you‚Äôre still here, here‚Äôs an xkcd comic for you, you‚Äôre welcome.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j5H2gICb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AuYPz0xku_bVeAWVV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j5H2gICb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AuYPz0xku_bVeAWVV.png" alt="https://cdn-images-1.medium.com/max/1600/0*uYPz0xku_bVeAWVV.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-what-kind-of-content-is-netflix-focusing%C2%A0upon"&gt;
  &lt;/a&gt;
  7. What kind of content is Netflix focusing¬†upon?
&lt;/h3&gt;

&lt;p&gt;I also wanted to explore the &lt;code&gt;rating&lt;/code&gt; column and compare the amount of content that Netflix has been producing for kids, teens, and adults and if their focus has shifted from one group to the other over the years.&lt;/p&gt;

&lt;p&gt;To achieve this, first I took a look at the unique ratings in the dataframe:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(df['rating'].unique())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['TV-MA' 'R' 'PG-13' 'TV-14' 'TV-PG' 'NR' 'TV-G' 'TV-Y' nan 'TV-Y7' 'PG' 'G' 'NC-17' 'TV-Y7-FV' 'UR']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I classified the ratings according to the groups (namely‚Ää‚Äî‚Ää&lt;em&gt;Little Kids&lt;/em&gt;, &lt;em&gt;Older Kids&lt;/em&gt;, &lt;em&gt;Teens,&lt;/em&gt; and &lt;em&gt;Mature&lt;/em&gt;) they fall into and changed their values in the &lt;code&gt;rating&lt;/code&gt; column to their group names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ratings_group_list = ['Little Kids', 'Older Kids', 'Teens', 'Mature']
ratings_dict={
    'TV-G': 'Little Kids',
    'TV-Y': 'Little Kids',
    'G': 'Little Kids',
    'TV-PG': 'Older Kids',
    'TV-Y7': 'Older Kids',
    'PG': 'Older Kids',
    'TV-Y7-FV': 'Older Kids',
    'PG-13': 'Teens',
    'TV-14': 'Teens',
    'TV-MA': 'Mature',
    'R': 'Mature',
    'NC-17': 'Mature'
}
for rating_val, rating_group in ratings_dict.items():
    df.loc[df.rating == rating_val, "rating"] = rating_group
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, I made line plots with &lt;em&gt;year&lt;/em&gt; on the x-axis and &lt;em&gt;content count&lt;/em&gt; on the y-axis.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df['rating_val']=1
x=0
labels=['kinda\nless', 'not so\nbad', 'holy shit\nthat\'s too\nmany']
with plt.xkcd():
    for r in ratings_group_list:
        grouped = df[df['rating']==r]
        year_df = grouped.groupby(['year_added']).sum()
        year_df.reset_index(level=0, inplace=True)
        plt.plot(year_df['year_added'], year_df['rating_val'], color=colours[x], marker='o')
        values_int = range(2008, math.ceil(max(year_df['year_added']))+1, 2)
        plt.yticks([200, 600, 1000], labels)
        plt.xticks(values_int)
        plt.title('Count of shows and movies that Netflix\n has been producing for different audiences', fontsize=12)
        plt.xlabel('Year', fontsize=14)
        plt.ylabel('Content Count', fontsize=14)
        x+=1
    plt.legend(ratings_group_list)
    plt.tight_layout()
    plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rAckInAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ARFPCcXrWcHaeEIsKNxZkLg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rAckInAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ARFPCcXrWcHaeEIsKNxZkLg.png" alt="https://cdn-images-1.medium.com/max/1600/1*RFPCcXrWcHaeEIsKNxZkLg.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, so the content count for mature audiences on Netflix is way more than the other groups. Another interesting observation is that there was a surge in the count of content produced for &lt;em&gt;Little Kids&lt;/em&gt; from &lt;em&gt;2019‚Äì2020&lt;/em&gt; whereas the content for &lt;em&gt;Older Kids&lt;/em&gt;, &lt;em&gt;Teens,&lt;/em&gt; and &lt;em&gt;Mature Audiences&lt;/em&gt; decreased during that time period.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-top-genres-countrywise"&gt;
  &lt;/a&gt;
  8. Top Genres (Countrywise)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;col = "listed_in"
colours = ["violet", "cornflowerblue", "darkseagreen", "mediumvioletred", "blue", "mediumseagreen", "darkmagenta", "darkslateblue", "seagreen"]
countries_list = ["United States", "India", "United Kingdom", "Japan", "France", "Canada", "Spain", "South Korea", "Germany"]
with plt.xkcd():
    figure(num=None, figsize=(20, 8)) 
    x=1
    for country in countries_list:
        df["from_country"] = df['country'].fillna("").apply(lambda x : 1 if country.lower() in x.lower() else 0)
        small = df[df["from_country"] == 1]
        genre = ", ".join(small['listed_in'].fillna("")).split(", ")
        tags = Counter(genre).most_common(3)
        tags = [_ for _ in tags if "" != _[0]]
        labels, values = [_[0]+"  " for _ in tags][::-1], [_[1] for _ in tags][::-1]
        if max(values)&amp;gt;200:
            values_int = range(0, math.ceil(max(values)), 100)
        elif max(values)&amp;gt;100 and max(values)&amp;lt;=200:
            values_int = range(0, math.ceil(max(values))+50, 50)
        else:
            values_int = range(0, math.ceil(max(values))+25, 25)
        plt.subplot(3, 3, x)
        plt.barh(labels,values, color = colours[x-1])
        plt.xticks(values_int)
        plt.title(country)
        x+=1
    plt.suptitle('Top Genres')
    plt.tight_layout()
    plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HW65HGex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2A7mgX4bEYkVf8JLEP1qQBRg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HW65HGex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2A7mgX4bEYkVf8JLEP1qQBRg.png" alt="https://cdn-images-1.medium.com/max/2400/1*7mgX4bEYkVf8JLEP1qQBRg.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Key takeaways from this plot:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dramas and Comedies are the most popular genres in almost every country.&lt;/li&gt;
&lt;li&gt;Japan watches a LOT of anime!&lt;/li&gt;
&lt;li&gt;Romantic TV Shows and TV Dramas are big in South Korea. (I‚Äôm addicted to K-Dramas too, btw üòç)&lt;/li&gt;
&lt;li&gt;Children and Family Movies are the third most popular genre in Canada.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#9-wordclouds"&gt;
  &lt;/a&gt;
  9. Wordclouds
&lt;/h3&gt;

&lt;p&gt;I finally ended the project with two word clouds‚Ää‚Äî‚Ääfirst, a word cloud for the &lt;code&gt;description&lt;/code&gt; column and a second one for the &lt;code&gt;title&lt;/code&gt; column.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-wordcloud-for-description"&gt;
  &lt;/a&gt;
  a. Wordcloud for Description:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from wordcloud import WordCloud
import random
from PIL import Image
import matplotlib
# Custom colour map based on Netflix palette
cmap = matplotlib.colors.LinearSegmentedColormap.from_list("", ['#221f1f', '#b20710'])
text = str(list(df['description'])).replace(',', '').replace('[', '').replace("'", '').replace(']', '').replace('.', '')
mask = np.array(Image.open('../input/finallogo/New Note.png'))
wordcloud = WordCloud(background_color = 'white', width = 500,  height = 200,colormap=cmap, max_words = 150, mask = mask).generate(text)
plt.figure( figsize=(5,5))
plt.imshow(wordcloud, interpolation = 'bilinear')
plt.axis('off')
plt.tight_layout(pad=0)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bziu7gBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AoifDFya692J-7Q3bFnX-og.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bziu7gBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AoifDFya692J-7Q3bFnX-og.png" alt="https://cdn-images-1.medium.com/max/1600/1*oifDFya692J-7Q3bFnX-og.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Live, love, life, friend, family, world,&lt;/em&gt; and &lt;em&gt;find&lt;/em&gt; are some of the most frequent words to appear in the descriptions of movies and shows. Another interesting thing is that the words‚Ää‚Äî‚Ää&lt;em&gt;one, two, three,&lt;/em&gt; and &lt;em&gt;four&lt;/em&gt;‚Ää‚Äî‚Ääall appear in the word cloud.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#b-wordcloud-for%C2%A0title"&gt;
  &lt;/a&gt;
  b. Wordcloud for¬†Title:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cmap = matplotlib.colors.LinearSegmentedColormap.from_list("", ['#221f1f', '#b20710'])
text = str(list(df['title'])).replace(',', '').replace('[', '').replace("'", '').replace(']', '').replace('.', '')
mask = np.array(Image.open('../input/finallogo/New Note.png'))
wordcloud = WordCloud(background_color = 'white', width = 500,  height = 200,colormap=cmap, max_words = 150, mask = mask).generate(text)
plt.figure( figsize=(5,5))
plt.imshow(wordcloud, interpolation = 'bilinear')
plt.axis('off')
plt.tight_layout(pad=0)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iJqX80lo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ABRbwBF9rIUO1F8OvvQjiVw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iJqX80lo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ABRbwBF9rIUO1F8OvvQjiVw.png" alt="https://cdn-images-1.medium.com/max/1600/1*BRbwBF9rIUO1F8OvvQjiVw.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you see &lt;em&gt;Christmas&lt;/em&gt; right at the center of this word cloud? Seems like there is an abundance of Christmas movies on Netflix. Other popular words are‚Ää‚Äî‚Ää&lt;em&gt;Love, World, Man, Life, Story, Live, Secret, Girl, Boy, American, Game, Night, Last, Time,&lt;/em&gt; and &lt;em&gt;Day.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-thats%C2%A0it"&gt;
  &lt;/a&gt;
  And that‚Äôs¬†it!
&lt;/h3&gt;

&lt;p&gt;Working on projects like these is what makes Data Science fun!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you want to add unique projects like this to your resume, join &lt;a href="https://buildtolearn.club/"&gt;Build To Learn Club&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôm building it to help aspiring Data professionals build a ‚Äúdangerously good‚Äù resume. It‚Äôs for Python enthusiasts who are tired of doing online courses.&lt;/p&gt;

&lt;p&gt;If you have any questions/feedback or would just like to chat, you can reach out to me on &lt;a href="https://twitter.com/paridhitweets"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/paridhi-agarwal-23789b165/"&gt;LinkedIn&lt;/a&gt;.¬†:)&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Watching the Requests Go By: Reconstructing an API Spec with APIClarity</title>
      <author>Michael Bogan</author>
      <pubDate>Tue, 19 Oct 2021 20:02:44 +0000</pubDate>
      <link>https://dev.to/mbogan/watching-the-requests-go-by-reconstructing-an-api-spec-with-apiclarity-31h8</link>
      <guid>https://dev.to/mbogan/watching-the-requests-go-by-reconstructing-an-api-spec-with-apiclarity-31h8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#reconstructing-an-openapi-specification-through-observation"&gt;
  &lt;/a&gt;
  Reconstructing an OpenAPI Specification through Observation
&lt;/h3&gt;

&lt;p&gt;APIs are ubiquitous in modern microservice architectures. They make it easy to consume data from external apps and reduce the amount of code developers need to write. The general result is easier delivery of useful software products. However, the prevalence of APIs means they represent a large attack surface. In fact, &lt;a href="https://www.gartner.com/en/webinars/4002323/api-security-protect-your-apis-from-attacks-and-data-breaches"&gt;Gartner predicts&lt;/a&gt; that by 2022, API attacks will be the most common attack vector for enterprise web applications. Similarly, an &lt;a href="https://siliconangle.com/2021/09/16/ibm-report-finds-two-thirds-cloud-breaches-traced-misconfigured-apis/"&gt;IBM report&lt;/a&gt; found that two-thirds of data breaches could be traced to misconfigured APIs.&lt;/p&gt;

&lt;p&gt;Clearly, enterprises need to take a proactive approach to ensure their use of APIs is secure. Unfortunately, with the complexity of modern apps, third-party code dependencies, and a lack of documentation, &lt;strong&gt;API observability is a huge challenge&lt;/strong&gt;. Often, enterprises simply don‚Äôt have any API specifications for their production apps. As a result, security-related misconfigurations go undetected, and apps use a variety of deprecated ‚Äúzombie APIs‚Äù and undocumented ‚Äúshadow APIs‚Äù in production. &lt;/p&gt;

&lt;p&gt;The fundamental first step to solving this problem is to create an API spec and use it to audit and document the APIs your apps use. Ideally, we would create an API spec simply by observing API traffic in real-world applications. In the past, there was no simple, scalable, and open-source tooling capable of doing this. Now, we have &lt;a href="https://apiclarity.io/"&gt;APIClarity&lt;/a&gt;‚Äîan open-source API traffic visibility tool for Kubernetes (K8s) clusters. It‚Äôs purpose-built to address the gap and enable API reconstruction through observation. &lt;/p&gt;

&lt;p&gt;In this post, we‚Äôre going to look at what API reconstruction is and how APIClarity solves the API observability problem. Then, we‚Äôll walk through a practical example of using APIClarity with a microservices-based app running on K8s.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-importance-of-api-reconstruction"&gt;
  &lt;/a&gt;
  The Importance of API Reconstruction
&lt;/h3&gt;

&lt;p&gt;Put simply, API reconstruction is the building of an API specification simply by observing traffic to and from that API. Done right, API reconstruction gives you visibility into the APIs your microservices use and enables you to assess your API security risks. Once the spec is built, the same tooling can compare runtime traffic against the specification to detect deviations. &lt;/p&gt;

&lt;p&gt;Key components of an API specification include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Parameter detection&lt;/strong&gt; (paths, header parameters, query parameters, request body parameters, and cookies) &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object references&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;File transfer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security definitions&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally, an API reconstruction tool needs to quantify these components in an OpenAPI Specification (OAS) compliant format without introducing unnecessary overhead or complexity to an app. Before APIClarity, there were several tools that &lt;em&gt;partially&lt;/em&gt; addressed API reconstruction use cases, but there were no comprehensive open-source solutions. Some of these other tools for API visibility include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Optic‚Äî&lt;/strong&gt;an extensible, language-agnostic, and open-source tool. It‚Äôs useful for documenting, reviewing, and approving API prior to deployment.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SwaggerHub‚Äî&lt;/strong&gt;a popular tool for converting API traffic to OAS.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CloudVector API Shark‚Äî&lt;/strong&gt;can monitor multi-service environments and generate an OAS specification from runtime traffic.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Imvision‚Äî&lt;/strong&gt;a robust API visibility and documentation tool for multi-service environments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Optic wasn‚Äôt built for monitoring multi-service environments, and SwaggerHub doesn‚Äôt integrate with runtime environments. Neither API Shark nor Imvision are open source. None of the above tools fully met the needs for API reconstruction. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-apiclarity-solves-the-api-reconstruction-and-visibility-challenge"&gt;
  &lt;/a&gt;
  How APIClarity Solves the API Reconstruction and Visibility Challenge
&lt;/h3&gt;

&lt;p&gt;APIClarity fills the gaps left by other tools and provides a robust, open-source, and scalable multi-service API visibility and reconstruction solution. It easily integrates into existing environments using a service mesh framework. With APIClarity, developers can import an API spec or reconstruct one based on observation. Developers can also monitor all API traffic in real-time with no code or workload changes required.&lt;/p&gt;

&lt;p&gt;So, how does it work?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7xUfW9sq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kk4wkxldz59zq9vqyth3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7xUfW9sq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kk4wkxldz59zq9vqyth3.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/apiclarity/apiclarity/blob/master/diagram.jpg"&gt;Image source&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;APIClarity is deployed in existing K8s clusters&lt;/li&gt;
&lt;li&gt;API traffic is mirrored from pods in the cluster to APIClarity‚Äôs OpenAPI Spec Engine&lt;/li&gt;
&lt;li&gt;The spec engine monitors internal and external traffic and records API events&lt;/li&gt;
&lt;li&gt;APIClarity learns specifications based on API traffic and builds an API spec&lt;/li&gt;
&lt;li&gt;Users review, edit, and approve specifications &lt;/li&gt;
&lt;li&gt;APIClarity alerts users to security issues or if there is any deviation between an observed API and the approved API spec&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#apiclarity-in-action-a-walkthrough"&gt;
  &lt;/a&gt;
  APIClarity in Action: A Walkthrough
&lt;/h3&gt;

&lt;p&gt;Now that we know what APIClarity is, let‚Äôs dive into our tutorial to see it in action with a K8s cluster and microservices-based application. Here, we will:&lt;/p&gt;

&lt;p&gt;1) Deploy the &lt;a href="https://microservices-demo.github.io/"&gt;Sock Shop app&lt;/a&gt; in our K8s cluster. While we‚Äôll use Sock Shop as our example application, you can deploy your own app to your cluster and still follow along.&lt;br&gt;
2) Deploy APIClarity in our K8s cluster and configure monitoring&lt;br&gt;
3) Observe API traffic on the APIClarity dashboard&lt;br&gt;
4) Review and create an API specification and view the generated OpenAPI spec in Swagger format.&lt;br&gt;
5) Identify deviations from an API spec along with usage of shadow and zombie APIs.&lt;br&gt;
6) View and filter API events&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h4&gt;

&lt;p&gt;To follow along, you‚Äôll need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes cluster with a default &lt;code&gt;StorageClass&lt;/code&gt; defined&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Istio 1.10 or above, installed on the cluster&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your K8s cluster can be deployed on any platform you prefer, including minikube. While APIClarity supports multiple integrations for proxying API traffic, you need to &lt;a href="https://istio.io/latest/docs/setup/getting-started/#download"&gt;download and install Istio&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#deploy-the-sock-shop-app-in-your-k8s-cluster"&gt;
  &lt;/a&gt;
  Deploy the Sock Shop app in your K8s cluster
&lt;/h4&gt;

&lt;p&gt;We‚Äôll use the popular &lt;a href="https://microservices-demo.github.io/"&gt;Sock Shop microservices application&lt;/a&gt; as our test app. With 14 different microservices and an interactive front-end, it is a great way to test API traffic in a K8s cluster.&lt;/p&gt;

&lt;p&gt;1) Create the &lt;code&gt;sock-shop&lt;/code&gt; namespace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl create namespace sock-shop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Enable Istio injection for the &lt;code&gt;sock-shop&lt;/code&gt; namespace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl label namespaces sock-shop istio-injection=enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Deploy the Sock Shop demo app in your cluster.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/microservices-demo/microservices-demo/master/deploy/kubernetes/complete-demo.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4) Get the NodePort for the &lt;code&gt;front-end&lt;/code&gt; service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl describe svc front-end -n sock-shop | grep NodePort:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NodePort:                 &amp;lt;unset&amp;gt;  30001/TCP
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5) Connect to &lt;code&gt;http://&amp;lt;node_IP&amp;gt;:&amp;lt;NodePort&amp;gt;&lt;/code&gt; in your browser. Using our example above, if our node‚Äôs IP is 192.168.49.2, browse to &lt;code&gt;http://192.168.49.2:30001&lt;/code&gt;. If you don‚Äôt know your node‚Äôs IP, you can verify with &lt;code&gt;kubectl get nodes -o yaml&lt;/code&gt; or &lt;code&gt;minikube ip&lt;/code&gt;. If everything is working, the Sock Shop demo app should load.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jIMz4a9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j7x31smldimx0jsmypx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jIMz4a9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j7x31smldimx0jsmypx.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deploy-apiclarity-in-our-k8s-cluster-and-configure-monitoring"&gt;
  &lt;/a&gt;
  Deploy APIClarity in our K8s cluster and configure monitoring
&lt;/h4&gt;

&lt;p&gt;First, we need to deploy APIClarity in our cluster.&lt;/p&gt;

&lt;p&gt;1) We‚Äôll start by cloning the GitHub repository to our home directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~
git clone https://github.com/apiclarity/apiclarity
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Next, navigate to the &lt;code&gt;apiclarity&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd apiclarity
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Use &lt;code&gt;kubectl&lt;/code&gt; to deploy APIClarity. Using the default apiclarity.yaml, the namespace will be &lt;code&gt;apiclarity&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f deployment/apiclarity.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4) Confirm the pods are running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl get pods -n apiclarity
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NAME                          READY   STATUS    RESTARTS   AGE
apiclarity-679949b687-x25pb   1/1     Running   0          16m
apiclarity-postgresql-0       1/1     Running   0          16m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5) Initialize and update the &lt;code&gt;wasm-filters&lt;/code&gt; submodule:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git submodule init wasm-filters
git submodule update wasm-filters
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;6) Navigate to the &lt;code&gt;wasm-filters&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd wasm-filters
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;7) Run the wasm &lt;code&gt;./deploy.sh&lt;/code&gt; script so the Envoy Wasm filter can capture traffic from our Sock Shop. The script accepts multiple namespaces as input parameters, e.g. &lt;code&gt;./deploy.sh &amp;lt;namespace_one&amp;gt; &amp;lt;namespace_two&amp;gt; &amp;lt;namespace_three&amp;gt;&lt;/code&gt;, but for this demo, we only need to specify the &lt;code&gt;sock-shop&lt;/code&gt; namespace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./deploy.sh sock-shop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;8) Configure port forwarding for the APIClarity.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl port-forward -n apiclarity svc/apiclarity 9999:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;9) Use a web browser to connect to the APIClarity GUI at &lt;code&gt;http://localhost:9999&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJD-7Mgb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uv45gak2sr5s4jicuwl7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJD-7Mgb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uv45gak2sr5s4jicuwl7.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#observe-api-traffic-on-the-apiclarity-dashboard"&gt;
  &lt;/a&gt;
  Observe API traffic on the APIClarity dashboard
&lt;/h4&gt;

&lt;p&gt;Now, it‚Äôs time to generate traffic. Start by clicking through the different buttons and menus in the Sock Shop app. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;üí°Pro-tip: The more API traffic, the better! More traffic = more observations = deeper visibility. For this portion of our demo, we just need a little bit of traffic, but keep this principle in mind for production.&lt;strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After you‚Äôve generated some API traffic in Sock Shop, head back to the APIClarity dashboard. You‚Äôll notice that APIClarity has recorded all the different API calls that have been made. In our example below, we can see 17 calls to the &lt;code&gt;catalogue&lt;/code&gt; endpoint, eight calls to &lt;code&gt;carts&lt;/code&gt;, and three calls to &lt;code&gt;user&lt;/code&gt;. We can also see how APIClarity begins to graph API usage. Those graphs will get even more interesting‚Äîand useful‚Äîafter we generate more traffic and create our API specifications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PsYIGsP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td9dv6d0s636wlpkl2cd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PsYIGsP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td9dv6d0s636wlpkl2cd.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#review-and-create-an-api-specification-and-view-docs-in-swagger"&gt;
  &lt;/a&gt;
  Review and create an API specification and view docs in Swagger
&lt;/h4&gt;

&lt;p&gt;Now, let‚Äôs create an API specification based on the relatively small amount of traffic we have.&lt;/p&gt;

&lt;p&gt;1) Click on one of the ‚ÄúMost used APIs.‚Äù I‚Äôll use &lt;code&gt;catalogue&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dvkZbu9y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ez52c4am5kxa2wf4znu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvkZbu9y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ez52c4am5kxa2wf4znu.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Click the‚Äù Reconstructed‚Äù tab and then click ‚ÄúReview.‚Äù &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uGSNMVQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/289hfi5aobsin0udw9o0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uGSNMVQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/289hfi5aobsin0udw9o0.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_DU_7SB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z18nmazksiwabnyfecci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_DU_7SB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z18nmazksiwabnyfecci.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Here, we can review API paths, add parameters, and merge entries. I‚Äôll add an &lt;code&gt;example_param&lt;/code&gt; and review and approve the paths. Feel free to experiment with your choices here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qm0LrAsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpa4nfdey5xh0byrkt2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qm0LrAsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpa4nfdey5xh0byrkt2n.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zirC2hgi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/absws7ghyvwvdus338ck.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zirC2hgi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/absws7ghyvwvdus338ck.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ijKMXfGv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvg9f26k4j4v122ayjl4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ijKMXfGv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvg9f26k4j4v122ayjl4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) Now, we have an OAS API specification. We can view the API docs in Swagger directly from the APIClarity GUI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u2QXgrcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyvl99qp35jjaojo64u1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2QXgrcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyvl99qp35jjaojo64u1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh9Yjglt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4211llp7xdf9rvl8e9j.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh9Yjglt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4211llp7xdf9rvl8e9j.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#identify-deviations-from-an-api-spec"&gt;
  &lt;/a&gt;
  Identify deviations from an API spec
&lt;/h4&gt;

&lt;p&gt;Now that we have an API specification as a baseline, APIClarity can flag deviations from the spec to help detect security issues and shadow APIs. To see how that works, go back to the Sock Shop GUI and experiment some more. Click on some features or filters you did not use last time. If you created an order, delete it. The key here is performing some actions that are not in the spec. Those will be identified as ‚Äúdiffs.‚Äù &lt;/p&gt;

&lt;p&gt;For example, here I made multiple calls to the &lt;code&gt;catalogue&lt;/code&gt; endpoint that don‚Äôt match my spec:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h8dtbbZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wv65lhfipevcgcuil4gl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h8dtbbZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wv65lhfipevcgcuil4gl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can drill down by clicking a specific diff and view exactly what is different from the spec. Here we can see the deviation was detected because my API call was missing some parameters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gwRJLAW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb2i950oba3i4egtbwc2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gwRJLAW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb2i950oba3i4egtbwc2.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That‚Äôs an example of a documented API call with different parameters than the specification. But, what if the API call isn‚Äôt documented in the specification at all? In that case, APIClarity will flag it as a shadow API. &lt;/p&gt;

&lt;p&gt;That‚Äôs exactly what happened for this API call to the &lt;code&gt;carts&lt;/code&gt; path. At the time we created the spec, we only observed a GET and a POST, so that is what was documented. Therefore, a DELETE call was outside of the spec and flagged as a &lt;strong&gt;shadow API&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BKHP9oSP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuyvn4gcr45mvx8omisr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BKHP9oSP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuyvn4gcr45mvx8omisr.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you might expect, this is a legitimate API call that I should have documented. This scenario provides us with a practical example of why it‚Äôs useful to let APIClarity capture a large amount of traffic before creating your API specification.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#view-and-filter-api-events"&gt;
  &lt;/a&gt;
  View and filter API events
&lt;/h4&gt;

&lt;p&gt;We can also view and filter API events with APIClarity. &lt;/p&gt;

&lt;p&gt;To view events, click on the events icon:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--atSCh_O0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbi1yh6shtb1n1oh94hz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atSCh_O0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbi1yh6shtb1n1oh94hz.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you will see a detailed list of all the API events over a given period of time (‚ÄúLast day‚Äù is the default). We can also drill down to review individual events as we did from the dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YihE04ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48xut1i4kjq9424v0y89.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YihE04ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48xut1i4kjq9424v0y89.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally, you can apply advanced filters to search for specific API events. For example, we can create a list of all the shadow API calls APIClarity has observed by applying the &lt;code&gt;Spec of type is shadow&lt;/code&gt;filter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HcXit93Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fvg8qut8akgctxesan1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HcXit93Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fvg8qut8akgctxesan1.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Detection of zombie APIs is similar. We would modify the filter to look for &lt;code&gt;Spec of type is zombie&lt;/code&gt;. If one of our calls was to a deprecated API from our spec, we'd then see it here.&lt;/p&gt;

&lt;p&gt;You can mix and match filters and sort results to achieve a variety of different views. That way, you can take deep dives on API events in your app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h3&gt;

&lt;p&gt;As an &lt;a href="https://github.com/apiclarity/apiclarity"&gt;open-source project&lt;/a&gt;, APIClarity continues to evolve and receive contributions from the developer community.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this walkthrough! We‚Äôve only scratched the surface here, and there are several interesting use cases for API reconstruction and traffic monitoring with APIClarity. In addition to improving API visibility and security, it enables use cases like fuzzing tests, client/server code generation, and improving internal and user-facing documentation.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I built my first DApp!</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Tue, 19 Oct 2021 20:00:48 +0000</pubDate>
      <link>https://dev.to/nickytonline/i-built-my-first-dapp-3pbm</link>
      <guid>https://dev.to/nickytonline/i-built-my-first-dapp-3pbm</guid>
      <description>&lt;p&gt;This past weekend I completed a &lt;a href="https://www.freecodecamp.org/news/what-is-web3/"&gt;web3&lt;/a&gt; project from the awesome folks at &lt;a href="https://buildspace.so"&gt;buildspace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The project was building out a &lt;a href="https://ethereum.org/en/developers/docs/dapps/"&gt;dapp&lt;/a&gt; that allows you to send messages and store them on the blockchain. Under the hood, it was Solidity for the Smart contract, TypeScript, &lt;a href="https://nextjs.org/"&gt;NEXT.js&lt;/a&gt;, &lt;a href="https://theme-ui.com/"&gt;Theme UI&lt;/a&gt;, good old semantic markup, and a splash of ARIA in the frontend. Shoutout to the &lt;code&gt;&amp;lt;details /&amp;gt;&lt;/code&gt; element! Aside from that, some other web3 goodies like &lt;a href="https://hardhat.org"&gt;hardhat&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The buildspace projects have really straightforward instructions. I did go a bit rogue though. I recently created a web3 starter, and decided to use that as the base for my project for my first foray into dapp development.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nickytonline"&gt;
        nickytonline
      &lt;/a&gt; / &lt;a href="https://github.com/nickytonline/web3-starter"&gt;
        web3-starter
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An opinionated web3 starter
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Web3 Starter&lt;/h1&gt;
&lt;p&gt;The goal of this project is to give you an opinionated boilerplate to start a web3 project.&lt;/p&gt;
&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;p&gt;If you are interested in contributing to the project, first read our
&lt;a href="https://github.com/nickytonline/web3-starter./CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt;. Take a look at our
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/issues"&gt;existing issues&lt;/a&gt;
or if you come across an issue
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/issues/new/choose"&gt;create an issue&lt;/a&gt;
For feature requests,
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/discussions"&gt;start a discussion&lt;/a&gt;
first.&lt;/p&gt;
&lt;h2&gt;
Getting Started (Local Development)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the dependencies&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the project&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm run dev
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn dev&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; with your browser to see the
result.&lt;/p&gt;
&lt;h2&gt;
Getting Started (Gitpod)&lt;/h2&gt;
&lt;p&gt;The project can be run in Gitpod. Navigate to
&lt;a href="https://gitpod.io/#https://github.com/nickytonline/hello-edge-and-node" rel="nofollow"&gt;https://gitpod.io/#https://github.com/nickytonline/hello-edge-and-node&lt;/a&gt;. If you
wish to load it in Gitpod as an external contributor, you will need to fork the
project first, then open the fork in Gitpod, e.g.
&lt;a href="https://gitpod.io/#https://github.com/some_user_that_forked_the_repository/hello-edge-and-node" rel="nofollow"&gt;https://gitpod.io/#https://github.com/some_user_that_forked_the_repository/hello-edge-and-node&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gitpod will take a minute or two to load.&lt;/li&gt;
&lt;li&gt;If this is the first time‚Ä¶&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nickytonline/web3-starter"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I also decided to make the project my own and made some modifications. For one, the contract allowed for storing one more field, a URL. I was doing this quickly, so just opted to use images from a funny site I love, &lt;a href="https://http.cat"&gt;http.cat&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l6EtCMC3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws3vxp6om97qsn2yqwqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l6EtCMC3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws3vxp6om97qsn2yqwqw.png" alt="An open message on pics.iamdeveloper.com showing a picture of a cat in the message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is still a bit scrappy as it really was a weekend project, but I'm still happy with how it turned out. I've made some tweaks since then, but there's still a bunch of refactoring to do. üòÖ&lt;/p&gt;

&lt;p&gt;If you're into TypeScript, there's a couple examples of declaration merging &lt;a href="https://github.com/nickytonline/picture-portal/blob/main/@types/global.d.ts#L3-L10"&gt;like this one to get the &lt;code&gt;&amp;lt;marquee /&amp;gt;&lt;/code&gt; element in JSX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The dapp is live running the contract off the &lt;a href="https://www.rinkeby.io/"&gt;Rinkeby network&lt;/a&gt;. Feel free to check out the dapp's source code.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nickytonline"&gt;
        nickytonline
      &lt;/a&gt; / &lt;a href="https://github.com/nickytonline/picture-portal"&gt;
        picture-portal
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Picture Portal&lt;/h1&gt;
&lt;p&gt;A project to learn about web3 following a Buildspace walkthrough. The initial
code is based off of my starter, &lt;a href="https://github.com/nickytonline/web3-starter"&gt;https://github.com/nickytonline/web3-starter&lt;/a&gt;
which I thought would be fun to do for Hacktoberfest 2021 and potentially be
helpful for others.&lt;/p&gt;
&lt;p&gt;There is a lot to improve as this was just have fun building something, but I'm
still pretty happy with what I cranked out.&lt;/p&gt;
&lt;p&gt;The latest is deployed at &lt;a href="https://pics.iamdeveloper.com" rel="nofollow"&gt;https://pics.iamdeveloper.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;p&gt;If you are interested in contributing to the project, first read our
&lt;a href="https://github.com/nickytonline/picture-portal./CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt;. Take a look at our
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/issues"&gt;existing issues&lt;/a&gt;
or if you come across an issue
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/issues/new/choose"&gt;create an issue&lt;/a&gt;.
For feature requests,
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/discussions"&gt;start a discussion&lt;/a&gt;
first.&lt;/p&gt;
&lt;h2&gt;
Getting Started (Local Development)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the dependencies&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the project&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm run dev
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn dev&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; with your browser to see the
result.&lt;/p&gt;
&lt;h2&gt;
Getting Started (Gitpod)&lt;/h2&gt;
&lt;p&gt;The project can‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nickytonline/picture-portal"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And while you're here, check out the live app at &lt;a href="https://pics.iamdeveloper.com"&gt;pics.iamdeveloper.com&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iYtIdmdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsmhsmo18sfdtji14ydw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iYtIdmdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsmhsmo18sfdtji14ydw.png" alt="The picture portal site"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dapp</category>
      <category>web3</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>How to Install MongoDB on Ubuntu 20.04</title>
      <author>Suresh Ramani</author>
      <pubDate>Tue, 19 Oct 2021 19:57:35 +0000</pubDate>
      <link>https://dev.to/sureshramani/how-to-install-mongodb-on-ubuntu-2004-55kk</link>
      <guid>https://dev.to/sureshramani/how-to-install-mongodb-on-ubuntu-2004-55kk</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-mongodb"&gt;
  &lt;/a&gt;
  What is MongoDB?
&lt;/h3&gt;

&lt;p&gt;MongoDB is a free and open-source document database. It belongs to a family of databases called NoSQL, which is different from the traditional table-based SQL databases like MySQL and PostgreSQL.&lt;/p&gt;

&lt;p&gt;In MongoDB, data is stored in flexible, JSON-like documents where fields can vary from document to document. It does not require a predefined schema, and the data structure can be changed over time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-advantages-of-mongodb"&gt;
  &lt;/a&gt;
  Features and Advantages of MongoDB
&lt;/h3&gt;

&lt;p&gt;-&amp;gt; Offers high scalability and flexibility; automatic failover and data redundancy&lt;br&gt;
-&amp;gt; Offers an expressive query language that is simple to learn and use&lt;br&gt;
Ad-hoc queries for real-time analytics&lt;br&gt;
-&amp;gt; It supports arrays and nested objects as values and allows for flexible and dynamic schemas.&lt;br&gt;
It is easy to compose queries that allow sorting and filtering, no matter how nested and supports aggregation, geo-location, time-series, graph search, and more.&lt;br&gt;
-&amp;gt; Supports sharding which enables splitting of large datasets across multiple distributed collections which then eases querying.&lt;br&gt;
-&amp;gt; Supports multiple storage engines&lt;/p&gt;

&lt;p&gt;This tutorial describes how to install and configure MongoDB Community Edition on Ubuntu 20.04.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1-import-mongodb-public-key"&gt;
  &lt;/a&gt;
  Step 1: Import MongoDB public key
&lt;/h3&gt;

&lt;p&gt;MongoDB is available in the Ubuntu repository. But it's not maintained by MongoDB Inc. If you already installed the MongoDB package, uninstall it first. Then proceed with the following steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To verify the added GPG key, type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-key list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-add-mongodb-repository-to-the-source-list"&gt;
  &lt;/a&gt;
  Step 2: Add MongoDB repository to the source list
&lt;/h3&gt;

&lt;p&gt;Let's add the official MongoDB repository to the source list file - this will allow us to fetch the latest official mongodb-org package.&lt;/p&gt;

&lt;p&gt;To create a source list file, type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo touch /etc/apt/sources.list.d/mongodb-org-5.0.list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, add the repository source for Ubuntu 20.04:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the packages again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, you‚Äôre finally ready to install MongoDB.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-install-mongodb-on-ubuntu-2004"&gt;
  &lt;/a&gt;
  Step 3: Install MongoDB on Ubuntu 20.04
&lt;/h3&gt;

&lt;p&gt;Now that the MongoDB repository is enabled, you can install the latest stable version by running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install -y mongodb-org
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-run-mongodb"&gt;
  &lt;/a&gt;
  Step 4: Run MongoDB
&lt;/h3&gt;

&lt;p&gt;To run MongoDB, start the mongod service (daemon for MongoDB) using the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl start mongod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the service does not start or you encounter an error like ‚Äúservice not found‚Äù, issue the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl daemon-reload
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After starting the mongod service, check its status to verify if it is running fine. Use the command below to do so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl status mongod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To start the MongoDB automatically at each boot, the command is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl enable mongod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to start the mongo shell from the same system running the mongod process, the command is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mongod

//or

mongosh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you for reading this blog.&lt;/p&gt;

</description>
      <category>ubuntu</category>
      <category>mongodb</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Delete Dead Code in TypeScript Projects</title>
      <author>Cameron McHenry</author>
      <pubDate>Tue, 19 Oct 2021 19:09:25 +0000</pubDate>
      <link>https://dev.to/camchenry/how-to-delete-dead-code-in-typescript-projects-1i89</link>
      <guid>https://dev.to/camchenry/how-to-delete-dead-code-in-typescript-projects-1i89</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-dead-code"&gt;
  &lt;/a&gt;
  What is dead code?
&lt;/h2&gt;

&lt;p&gt;"Dead code" is code that is never used. It is not referenced by any other code, it is not imported, it is not used in the final build in any way.&lt;/p&gt;

&lt;p&gt;Refactoring a project to make certain types, methods, or properties obsolete without removing that obsolete code will create dead code. Changing the direction of a project, like choosing to use a different API or library can also produce dead code. On large projects with many different teams and shifting priorities, &lt;strong&gt;the occurrence of dead code is inevitable&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-you-delete-dead-code"&gt;
  &lt;/a&gt;
  Why should you delete dead code?
&lt;/h2&gt;

&lt;p&gt;There are many reasons why you should delete dead code. There are many effects that dead code can have on a large project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dead code must be compiled, which slows down the compilation time. It may be included in the final output too, increasing the total executable size.&lt;/li&gt;
&lt;li&gt;Dead code must be downloaded, which increase the project size.&lt;/li&gt;
&lt;li&gt;Dead code may reference other dead code and make it appear important.&lt;/li&gt;
&lt;li&gt;Dead code must be understood, which makes the project harder to maintain and work on.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When you delete dead code, you:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make it easier to understand and maintain a project.&lt;/li&gt;
&lt;li&gt;Speed up compilation time.&lt;/li&gt;
&lt;li&gt;Decrease the project size.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a result of removing dead code, a program will be faster to download and compile, and its output executable will be smaller and faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-find-dead-code"&gt;
  &lt;/a&gt;
  How to find dead code
&lt;/h2&gt;

&lt;p&gt;First, you will need to be using TypeScript in your projects for these tools to work. TypeScript simplifies the difficult task of determining whether any given piece of code is actually used or not.&lt;/p&gt;

&lt;p&gt;Second, you will want to install &lt;a href="https://github.com/nadeesha/ts-prune"&gt;&lt;code&gt;ts-prune&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/pzavolinsky/ts-unused-exports"&gt;&lt;code&gt;ts-unused-exports&lt;/code&gt;&lt;/a&gt; globally, so they can be used for any project. Run these commands in a terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; ts-prune ts-unused-exports
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my experience, no single tool will give perfect results for identifying dead code. So, I recommend alternating between both of these tools to find dead code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-raw-tsprune-endraw-"&gt;
  &lt;/a&gt;
  How to use &lt;code&gt;ts-prune&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;To run &lt;code&gt;ts-prune&lt;/code&gt;, run the following command in a terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ts-prune &lt;span class="nt"&gt;--project&lt;/span&gt; tsconfig.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see some output like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;\src\components\Avatar\index.ts:18 - STYLE_CLASSES
\src\components\BulkActions\index.ts:26 - BulkAction
\src\components\CheckableButton\index.ts:13 - CheckableButtonProps
\src\components\Choice\index.ts:9 - ChoiceProps
\src\components\Combobox\index.ts:2 - ComboboxTextField
\src\components\DataTable\utilities.ts:34 - isEdgeVisible (used in module)
\src\components\DropZone\index.ts:38 - DropZoneFileType
\src\components\IndexTable\index.ts:6 - CellProps
\src\components\IndexTable\index.ts:11 - Cell
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The left-hand side is the file and line number of where the potential dead code occurs. The right-hand side is the name of the export that appears to be unused. If the export is only used internally, it will have the text &lt;code&gt;(used in module)&lt;/code&gt; appended to it. If the default export is unused, the right-hand side will say &lt;code&gt;default&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I'm OK with unused exports as long as the export is used internally, so I recommend filtering out the lines with &lt;code&gt;(used in module)&lt;/code&gt; in them. You can do that by piping the output into &lt;code&gt;grep&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ts-prune &lt;span class="nt"&gt;--project&lt;/span&gt; tsconfig.json | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="s1"&gt;'(used in module)'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-use-raw-tsunusedexports-endraw-"&gt;
  &lt;/a&gt;
  How to use &lt;code&gt;ts-unused-exports&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;To run &lt;code&gt;ts-unused-exports&lt;/code&gt;, run these commands in a terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ts-unused-exports tsconfig.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which should create some output like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src\utilities\features\index.ts: Features, useFeatures
src\utilities\focus-manager\index.ts: FocusManagerContextType
src\utilities\frame\index.ts: FrameContextType
src\utilities\index-table\index.ts: useRowHovered
src\utilities\listbox\index.ts: ListboxContextType
src\utilities\media-query\index.ts: MediaQueryContextType
src\utilities\portals\index.ts: PortalsManager
src\utilities\resource-list\index.ts: ResourceListContextType
src\utilities\theme\index.ts: ProcessedThemeConfig
src\utilities\theme\types.ts: ThemeLogo, Role, AppThemeConfig
src\utilities\theme\utils.ts: buildCustomPropertiesNoMemo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The left-hand side lists the file that contains unused exports. The right-hand side lists the names of unused exports in the file. If the default module export is unused, the right-hand side will include &lt;code&gt;default&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I will often ignore unused types, since it is typically not much of an issue. In many cases, it is indicative of work that&lt;br&gt;
is in progress. It is also not included in the compiled JavaScript (since types don't exist in JavaScript), so leaving it in the project won't affect the build size. To do that, add the &lt;code&gt;--allowUnusedTypes&lt;/code&gt; flag to the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ts-unused-exports tsconfig.json &lt;span class="nt"&gt;--allowUnusedTypes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-delete-dead-code"&gt;
  &lt;/a&gt;
  How to delete dead code
&lt;/h2&gt;

&lt;p&gt;Unfortunately, you will have to manually go through each result and determine whether to keep it or delete it. There is often a moderate false positive rate when it comes to finding dead code. &lt;strong&gt;Not all unused code is dead code, but all dead code is unused code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If any patterns emerge while identifying dead code, I recommend automating the process. Create scripts to combine the results from these tools. Filter it to remove any false positives. Then, automatically generate diffs to remove dead code. For small projects, this is probably overkill (and that's OK). For large projects, this is a &lt;a href="https://en.wikipedia.org/wiki/Force_multiplication"&gt;force multiplier&lt;/a&gt; that will make everyone on your team more productive.&lt;/p&gt;

&lt;p&gt;When deleting dead code, there are a couple exceptions that I always keep in mind:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Exported component prop types are OK. These may not be "used," but they will likely be used by consumers of the module to create derivative types.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;   &lt;span class="c1"&gt;// OK:&lt;/span&gt;
   &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ComponentProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Exported default values are OK. These allow consumers of a module to access the implicit default values of objects and functions, which are otherwise inaccessible programmatically.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;   &lt;span class="c1"&gt;// OK:&lt;/span&gt;
   &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultFadeTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fadeTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultFadeTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Recently added code (less than a month old) is probably OK. Sometimes in-progress work will appear unused because it is incomplete.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;   &lt;span class="c1"&gt;// Probably OK:&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserTable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="cm"&gt;/* TODO: Going to implement this next week */&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="c1"&gt;// NOT OK:&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserTable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="cm"&gt;/* TODO: Going to implement this next week ... 2015-06-01 (6 years ago) */&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Metadata and specific code may be OK. If there are pieces of code that serve a special purpose (e.g. preprocessed by another tool, expected by a framework, etc.) then it may not be unused or dead code. For example, server-side rendered frameworks may export functions that are not used in the client output, but are rendered on the server instead.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;   &lt;span class="c1"&gt;// OK: special function used by the Next.js framework&lt;/span&gt;
   &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Deleting dead code is a worthwhile effort that can make working in a project faster and easier. Using the &lt;code&gt;ts-prune&lt;/code&gt; and &lt;code&gt;ts-unused-export&lt;/code&gt; tools, we can simplify the process of identifying dead code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you are a junior developer&lt;/strong&gt;, automating the process of finding dead code and deleting it is a great senior-level task to learn how to do. Everyone on your team will appreciate having less code to download, compile, and understand. And it will help you understand your codebase better. You'll probably learn many other useful skills along the way too.&lt;/p&gt;

&lt;p&gt;Good luck and happy hunting!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Guide to replacing a laptop with Android: Part 1</title>
      <author>Nicholas Synovic</author>
      <pubDate>Tue, 19 Oct 2021 18:59:46 +0000</pubDate>
      <link>https://dev.to/nicholassynovic/guide-to-replacing-a-laptop-with-android-part-1-2o6o</link>
      <guid>https://dev.to/nicholassynovic/guide-to-replacing-a-laptop-with-android-part-1-2o6o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-traditional-desktop-software"&gt;
  &lt;/a&gt;
  What is traditional desktop software?
&lt;/h2&gt;

&lt;p&gt;It depends on who you ask. To me, it is simply:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Audio and video editing&lt;/li&gt;
&lt;li&gt;Document processing&lt;/li&gt;
&lt;li&gt;Password managers&lt;/li&gt;
&lt;li&gt;Web browsers&lt;/li&gt;
&lt;li&gt;Video games&lt;/li&gt;
&lt;li&gt;Conference software&lt;/li&gt;
&lt;li&gt;Development software&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some might add 3d modeling tools, content streaming tools, or maybe torrenting utilities to this list. But for my day-to-day use on a computer, I interact with these software packages the most.&lt;/p&gt;

&lt;p&gt;For this tutorial, I won't be covering Development software as I will get more involved in setting up and configuring these software packages on Android in a later tutorial. But I will briefly go over a few repositories that contain useful tools that I intend to use.&lt;/p&gt;

&lt;p&gt;I also won't be going over the specific tools that I intend to use &lt;em&gt;for everything but development&lt;/em&gt;. Everyone has their favorite document processor or PDF reader, no point in trying to convince you otherwise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-to-begin-the-tutorial"&gt;
  &lt;/a&gt;
  So to begin the tutorial:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Have the Google Play Store installed on your device.&lt;/li&gt;
&lt;li&gt;Search for any of the keywords listed above in the Google Play Store search bar.&lt;/li&gt;
&lt;li&gt;Profit.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that's it. That is the end of part 1 of this roadmap, which again was to install the "vanilla" software of Android. In the next tutorial, I will go over the development setup that I have done.&lt;/p&gt;

&lt;p&gt;But if you want to jump the gun on what software I intend to use, checkout &lt;a href="https://f-droid.org/en/packages/com.termux/"&gt;Termux on F-Droid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Termux is &lt;strong&gt;the&lt;/strong&gt; killer app that allows for desktop-class development to happen on Android OS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-hope-that-this-is-useful-to-someone"&gt;
  &lt;/a&gt;
  I hope that this is useful to someone.
&lt;/h2&gt;

&lt;p&gt;Signing off,&lt;/p&gt;

&lt;p&gt;Nicholas M. Synovic&lt;/p&gt;

</description>
      <category>android</category>
      <category>linux</category>
      <category>termux</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to learn programming fast</title>
      <author>webcodespace</author>
      <pubDate>Tue, 19 Oct 2021 18:49:56 +0000</pubDate>
      <link>https://dev.to/webcodespace/how-to-learn-programming-fast-1f6b</link>
      <guid>https://dev.to/webcodespace/how-to-learn-programming-fast-1f6b</guid>
      <description>&lt;p&gt;No one will want to learn in 12 months what they can do in 6.&lt;/p&gt;

&lt;p&gt;When it comes to a skill like programming, the only way to get better at it, is by practicing. And I know you must have probably heard this a thousand times, but common knowledge is not common practice. &lt;/p&gt;

&lt;p&gt;So now the question is, how do I practice? &lt;/p&gt;

&lt;p&gt;Here are a few basic tips:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-learn-the-basics"&gt;
  &lt;/a&gt;
  1. Learn the basics:
&lt;/h2&gt;

&lt;p&gt;Irrespective of whatever technology you may want to learn,  it is very essential that you first learn the basics in order to get a solid grasp of how things are done. &lt;/p&gt;

&lt;p&gt;For example, if it is your first time learning a programming language, don't try following along a YouTube video that teaches you how to build a whatsapp clone application or an amazon clone application. &lt;/p&gt;

&lt;p&gt;Now I'm not saying these videos are not helpful, but the truth is they won't do you any good if you are just starting out. &lt;/p&gt;

&lt;p&gt;So if you want to learn javascript for example, you need to start with the little things like how to write a simple hello world program, variables, functions classes..&lt;/p&gt;

&lt;p&gt;Bonus tip: Any concept or thing you come across repeatedly while learning, read about it! Google is your friend. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-follow-a-step-by-step-approach"&gt;
  &lt;/a&gt;
  2. Follow a step by step approach:
&lt;/h2&gt;

&lt;p&gt;Now this step would be really useful especially to anyone who has decided to go down the self-taught path.&lt;/p&gt;

&lt;p&gt;Don't try to learn everything at once, this is only going to slow you down, distract you or seriously hurt your progress. &lt;/p&gt;

&lt;p&gt;You may feel like you're actually getting somewhere by doing this but the truth is, at the end of the day you won't have the required knowledge in any of those skills you were trying to learn at once. &lt;/p&gt;

&lt;p&gt;You really need to discipline your mind and take things one at a time in the right order in which you need to learn them.&lt;/p&gt;

&lt;p&gt;Bonus tip: You can take the list of topics on an online course and look for a way to learn each topic one at a time from whatever source you like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dont-memorize-code"&gt;
  &lt;/a&gt;
  3. Don't memorize code:
&lt;/h2&gt;

&lt;p&gt;I can't emphasize this enough.&lt;/p&gt;

&lt;p&gt;This is one of the mistakes a lot of beginners make and the truth is, the human brain wasn't made to memorize code.&lt;br&gt;
 Do not memory whatever you can just look up. &lt;/p&gt;

&lt;p&gt;I know you did a lot of memorization in school, but that won't help you here. &lt;/p&gt;

&lt;p&gt;The only thing memorization is going to do is slow you down.&lt;/p&gt;

&lt;p&gt;Instead of memorizing, it would be better to learn concepts and also try to understand every code you write/use and as you get better, you will notice that the code you use a lot will automatically stick to your memory. It works like magic!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-be-consistent"&gt;
  &lt;/a&gt;
  4. Be consistent:
&lt;/h2&gt;

&lt;p&gt;Coding is a technical skill.&lt;/p&gt;

&lt;p&gt;And just like every other skill, in order to learn quickly and get better, you need to consistently practice.&lt;/p&gt;

&lt;p&gt;Set out a special time for yourself to learn everyday. &lt;/p&gt;

&lt;p&gt;Stick to your schedule. &lt;/p&gt;

&lt;p&gt;Don't say you're going to miss practice on Thursday then work twice as hard on Friday. &lt;/p&gt;

&lt;p&gt;It doesn't work like that. &lt;/p&gt;

&lt;p&gt;If you feel like you won't be able to commit 30 minutes everyday, you can try 20 minutes everyday. &lt;/p&gt;

&lt;p&gt;Pick a schedule and practice duration that works for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-dont-get-stuck-in-tutorial-hell"&gt;
  &lt;/a&gt;
  5. Don't get stuck in tutorial hell:
&lt;/h2&gt;

&lt;p&gt;This is something a lot of people have problems with and this is because we feel like we are not really ready to start coding. &lt;/p&gt;

&lt;p&gt;I understand this feeling and it can be scary sometimes. &lt;/p&gt;

&lt;p&gt;This feeling is completely normal and that's how it's supposed to feel like when you try something new. &lt;/p&gt;

&lt;p&gt;But once you're done with the basics of whatever technology you may be learning and you have a really good understanding of how that particular technology works, you need to put that knowledge to the test. &lt;/p&gt;

&lt;p&gt;No coding tutorial covers everything you need to know and you don't need to know everything.&lt;/p&gt;

&lt;p&gt;Some things can only be learnt as you code.&lt;/p&gt;

&lt;p&gt;So you just have to push yourself and begin writing code. &lt;/p&gt;

&lt;p&gt;And if you feel like you're becoming too scared to code, you can take it gradually.&lt;/p&gt;

&lt;p&gt;That's it!&lt;/p&gt;

&lt;p&gt;If there is any other tip you know would be helpful, you can leave them in the comments section below.. &lt;/p&gt;

&lt;p&gt;To master any skill, practice is key. I know the learning is usually the boring part for most people but you just need to endure it. &lt;/p&gt;

&lt;p&gt;One day it will be worth it.&lt;/p&gt;

&lt;p&gt;Happy coding!!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
