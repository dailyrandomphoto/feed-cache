<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The confusion between git and GitHub </title>
      <author>Kumar Kalyan </author>
      <pubDate>Sun, 12 Dec 2021 08:07:38 +0000</pubDate>
      <link>https://dev.to/kumarkalyan/the-confusion-between-git-and-github-3aon</link>
      <guid>https://dev.to/kumarkalyan/the-confusion-between-git-and-github-3aon</guid>
      <description>&lt;p&gt;Hi everyone, I am back with a new article of this git and GitHub series, in these series I will discuss about the world's most popular version control system i.e. git, and about the tools and technologies that are associated with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-git-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;git&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;git is basically a version control software for tracking changes in any set of files, mainly used for source code management in open source and agile software development where a team of people coordinating for developing a particular project, to track every single workflow to it. Let's understand it more clearly with an example Suppose there is a team of 3 people A, B,C respectively coordinating to build a webapp. Now while working in a team every team member should know about every single change in the codebase of the project, they are working on. Like A changes a particular file name or B has implemented a new algorithm to a particular function in which C depends, now every single change or workflow will be tracked by git. So, nobody needs to ask each other about a changes and implementation. That's why git is used. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-github-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;GitHub&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;GitHub is a provider of internet hosting for software development and provides version controlling using git, Other than that GitHub also provides some additional feature for collaboration, bug tracking, issue management, etc. Like use have hosted your code to GitHub and no you can server it anywhere in the world. Other than that GitHub is the world most popular as it is used by almost every software developer in the world. GitHub also provides some other tools like and features like, code spaces, GitHub Desktop (a wonderful Gui for git), making organizations and teams, actions for automating workflow, issue tracking and many more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-conclusion-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Conclusion&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;people often think that git and GitHub are same, but I think after reading this blog everyone's confusion is going to be disappeared. &lt;br&gt;
Feel free to comment out if you have any queries. &lt;br&gt;
Stay tuned for next , Happy Coding :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect"&gt;
  &lt;/a&gt;
  Connect
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://linktr.ee/kumarkalyan"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wgrai2sU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/npm/simple-icons%40v3/icons/twitter.svg" width="24" height="24"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>git</category>
      <category>webdev</category>
      <category>github</category>
    </item>
    <item>
      <title>Simple Loader Animation with CSS</title>
      <author>Rohit Sharma</author>
      <pubDate>Sun, 12 Dec 2021 07:00:14 +0000</pubDate>
      <link>https://dev.to/devrohit0/simple-loader-animation-with-css-3e4n</link>
      <guid>https://dev.to/devrohit0/simple-loader-animation-with-css-3e4n</guid>
      <description>&lt;p&gt;Hello everyone, In this article we are going to create &lt;strong&gt;Loading Animation&lt;/strong&gt; with the use of simple CSS. &lt;/p&gt;

&lt;p&gt;Take a look of what we are designing &lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BCJbCkIb7GQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;It's the simplest part of this project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it for HTML.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h1&gt;

&lt;p&gt;To align the loader in center&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt; &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now styling the Loader&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;        &lt;span class="nc"&gt;.loader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#f3f3f3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#3498db&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;spin&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now adding &lt;code&gt;keyframes&lt;/code&gt; to animate the loader&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;spin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;25&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;75&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;270deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our desired Loader Animation is ready.&lt;/p&gt;

&lt;p&gt;If you love it♥ then show some love.&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/devrohit"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gB5HhZkA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-blue.png" alt="Buy Me A Coffee" width="434" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>CSS Practices to avoid as a developer</title>
      <author>Mursal Furqan</author>
      <pubDate>Sun, 12 Dec 2021 06:45:39 +0000</pubDate>
      <link>https://dev.to/mursalfk/css-practices-to-avoid-as-a-developer-3hj2</link>
      <guid>https://dev.to/mursalfk/css-practices-to-avoid-as-a-developer-3hj2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#set-margins-or-padding-and-then-reset-them"&gt;
  &lt;/a&gt;
  Set Margins or Padding and then RESET them
&lt;/h2&gt;

&lt;p&gt;We often see developers coding their CSS margin/padding styles and then resetting them manually. Such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.6rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.item&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of using this extremely unhealthy practice, developers can simply use something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.6rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#set-displayblock-for-flex-items"&gt;
  &lt;/a&gt;
  Set Display:Block for flex items
&lt;/h2&gt;

&lt;p&gt;When using Flexbox, it is important to remember that when you create a flex container (Add Display:Flex), all children (Flex Items) become BLOCKiFIED&lt;br&gt;
Hence, instead of using code like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Developers can simply use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-width100-for-block-elements"&gt;
  &lt;/a&gt;
  Use Width:100% for Block Elements
&lt;/h2&gt;

&lt;p&gt;Since we, the developers already term the element with Display property, we don't need to add an additional width: 100% to it's children. For example, have a look at an example of the practice we need to avoid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 5&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1024px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead, developers can switch to the following approach:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 5&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1024px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More bad practices in next article 😉&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>UX Trends in 2021</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 12 Dec 2021 06:29:35 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/ux-trends-in-2021-19pj</link>
      <guid>https://dev.to/ruppysuppy/ux-trends-in-2021-19pj</guid>
      <description>&lt;p&gt;&lt;em&gt;2021&lt;/em&gt; was a wild year. We had &lt;strong&gt;Facebook&lt;/strong&gt; being renamed to &lt;strong&gt;Meta&lt;/strong&gt;, we also witnessed insane hype around the &lt;strong&gt;Web3&lt;/strong&gt; and the &lt;strong&gt;Metaverse&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's focus on the world of &lt;strong&gt;UX&lt;/strong&gt; and take a look at some of the trends that happened in this year, the &lt;em&gt;new-comers&lt;/em&gt; to the space, the &lt;em&gt;ones that are still relevant&lt;/em&gt; and the ones that existed for a long time, but had a &lt;em&gt;sudden boom&lt;/em&gt;!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dark-mode"&gt;
  &lt;/a&gt;
  Dark Mode
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eMW38KZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghrez19e5e0skp191e8z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eMW38KZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghrez19e5e0skp191e8z.jpg" alt="dark-mode" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dark mode&lt;/strong&gt; had been around for quite some time. More and more websites are using it, even &lt;strong&gt;Google&lt;/strong&gt; and &lt;strong&gt;GitHub&lt;/strong&gt; introduced &lt;strong&gt;Dark Mode&lt;/strong&gt; on their websites.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dark mode&lt;/strong&gt; involves using a &lt;em&gt;dark background&lt;/em&gt; and a &lt;em&gt;contrasting lighter text color&lt;/em&gt; and is very easy to implement. Check out &lt;a href="https://dev.to/ruppysuppy/dark-mode-using-css-variables-1m3"&gt;this article&lt;/a&gt; if you want to know how to implement it on your website.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3d-websites"&gt;
  &lt;/a&gt;
  3d Websites
&lt;/h1&gt;

&lt;p&gt;Although &lt;strong&gt;3D websites&lt;/strong&gt; are not that common, due to the steep learning curve, they are still very popular. More and more technologies are being introduced to ease &lt;strong&gt;3D websites&lt;/strong&gt; creation.&lt;/p&gt;

&lt;p&gt;One of the best &lt;strong&gt;3D websites&lt;/strong&gt; I have ever seen is &lt;a href="https://bruno-simon.com/"&gt;Bruno Simon's Portfolio&lt;/a&gt;. It was made with &lt;strong&gt;three.js&lt;/strong&gt; and &lt;strong&gt;WebGL&lt;/strong&gt;. He also created a &lt;a href="https://threejs-journey.com/"&gt;course&lt;/a&gt; introducing the &lt;strong&gt;three.js&lt;/strong&gt; library and its features.&lt;/p&gt;

&lt;p&gt;Since &lt;strong&gt;3D websites&lt;/strong&gt; have &lt;em&gt;gamified the user interaction&lt;/em&gt;, it results in &lt;em&gt;high engagement&lt;/em&gt; resulting in &lt;strong&gt;huge potential&lt;/strong&gt; in the sphere of &lt;em&gt;marketing&lt;/em&gt; and &lt;em&gt;generating sales&lt;/em&gt;, which is the &lt;em&gt;ultimate goal of any company&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iDS4P01J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syf58qjakpsy2axqeo8g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iDS4P01J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syf58qjakpsy2axqeo8g.png" alt="3d-website" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#minimal-ui"&gt;
  &lt;/a&gt;
  Minimal UI
&lt;/h1&gt;

&lt;p&gt;Who doesn't love using applications with sleek and polished &lt;strong&gt;UI&lt;/strong&gt;? The &lt;strong&gt;Minimal UI&lt;/strong&gt; has become very commonplace in the world of &lt;strong&gt;UX&lt;/strong&gt; and is considered a pillar of modern &lt;strong&gt;UX&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These days, with the low attention span of users, the &lt;strong&gt;Minimal UI&lt;/strong&gt; is one of the &lt;em&gt;easiest ways to get users hooked&lt;/em&gt;. If you decide to go with the &lt;em&gt;old clunky designs&lt;/em&gt;, rest assured that &lt;em&gt;users with refrain from using your application&lt;/em&gt;, no matter how useful it is, so quite evidently it too is on the rise.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RklAmsW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coxrxgvdfq55nhmbj1jt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RklAmsW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coxrxgvdfq55nhmbj1jt.png" alt="minimal-ui" width="880" height="639"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#micro-interactions"&gt;
  &lt;/a&gt;
  Micro interactions
&lt;/h1&gt;

&lt;p&gt;As mentioned in the previous section, with the dwindling attention span among humans, developers are constantly battling to drive up &lt;em&gt;user engagement&lt;/em&gt;. &lt;strong&gt;Micro-interactions&lt;/strong&gt; and &lt;strong&gt;captivating animations&lt;/strong&gt; are a crucial tool to grab &lt;em&gt;user's attention&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The use of &lt;strong&gt;Micro-interactions&lt;/strong&gt; had been on a steady rise for a couple of years! Developers use them as often as possible to retain the &lt;em&gt;user's attention&lt;/em&gt; and keep them coming back for a &lt;em&gt;smooth application experience&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A7evcDo5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1t9h89tom3wc6s8k1ug.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A7evcDo5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1t9h89tom3wc6s8k1ug.gif" alt="interaction" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-various-morphisms"&gt;
  &lt;/a&gt;
  The various morphisms
&lt;/h1&gt;

&lt;p&gt;The various morphisms such as &lt;strong&gt;glassmorphism&lt;/strong&gt; and &lt;strong&gt;neomorphism&lt;/strong&gt; have lost some steam in the popularity game.&lt;/p&gt;

&lt;p&gt;These &lt;em&gt;morphic designs are still relevant&lt;/em&gt;, but since we don't have companies using them in their products, they might end up as a &lt;em&gt;passing fad&lt;/em&gt; 😢&lt;/p&gt;

&lt;p&gt;I personally find these new design styles quite appealing and would love to see them being more widely adopted, but I doubt if that will be the case, especially with &lt;strong&gt;Google&lt;/strong&gt; pushing &lt;strong&gt;Material Design&lt;/strong&gt; on all platforms with &lt;strong&gt;Flutter&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8q7VmJEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rmlmubdr20cvtpmyhf2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8q7VmJEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rmlmubdr20cvtpmyhf2.png" alt="morphism" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Need a &lt;strong&gt;Top Rated Front-End Development Freelancer&lt;/strong&gt; to chop away your development woes? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a &lt;strong&gt;Digital Nomad&lt;/strong&gt; in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for &lt;strong&gt;Weekly new Tidbits&lt;/strong&gt; on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are a few commonly asked questions I get. So, I hope this &lt;strong&gt;FAQ&lt;/strong&gt; section solves your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
Look into the following articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf"&gt;Front End Development Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Sorry, I am already under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you like to collaborate on our site?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As mentioned in the &lt;em&gt;previous question&lt;/em&gt;, I am in a time crunch, so I would have to pass on such opportunities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Connect to me on&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose/"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>ux</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Private Vs Public Cloud Computing</title>
      <author>AK DevCraft</author>
      <pubDate>Sun, 12 Dec 2021 06:15:18 +0000</pubDate>
      <link>https://dev.to/akdevcraft/private-vs-public-cloud-computing-5b74</link>
      <guid>https://dev.to/akdevcraft/private-vs-public-cloud-computing-5b74</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-to-expect-from-this-blog"&gt;
  &lt;/a&gt;
  What to expect from this blog?
&lt;/h2&gt;

&lt;p&gt;You'll find high-level information about different cloud computing models, details are sufficient enough to understand the concept. So let's dive deep in.&lt;/p&gt;

&lt;p&gt;There are different types of computing models such as private cloud, public cloud, hybrid cloud, and multi-cloud. For me, private was the most confusing one, and it took me some time to understand it correctly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#traditional-data-center"&gt;
  &lt;/a&gt;
  Traditional Data Center
&lt;/h2&gt;

&lt;p&gt;To understand it better let's first understand how traditional data center works. To set up a traditional data center, you need to purchase hardware for servers, switches, routers, etc. In other words, you're responsible for the setup and maintenance of hardware where software code will run. Servers are installed on the racks along with network switches, routers, etc. &lt;strong&gt;So why a traditional data center is becoming less popular?&lt;/strong&gt; because it's quite expensive, the resource may not be 100% utilized, you need a lot of capacity planning, any addition of capacity like installing a new server is quite risky, as you may accidentally knock down some network wire or power supply (that may result in an outage). But, it's still in use mostly because of need to keep sensitive data in personal data center and compliance requirement. Below is an illustration of a traditional data center.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8nRAO51g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clpcv0e3nwj2tw2qlbpn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8nRAO51g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clpcv0e3nwj2tw2qlbpn.jpg" alt="Traditional Data Center" width="355" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#private-cloud"&gt;
  &lt;/a&gt;
  Private Cloud
&lt;/h2&gt;

&lt;p&gt;To overcome traditional data center challenges, the private cloud model comes to the rescue (though it has its challenges, it helps to better utilization of resources). And to better understand private cloud, let's see another popular term IaaS (Infrastructure as a Service). &lt;br&gt;
To explain in simple language, IaaS is a model where you won't worry about the underlining hardware layer and only concentrate on the OS, runtime, and code (though you're still relying on the memory and CPU from actual hardware).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DhhkItNA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izqpt45won8s7yos7p86.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DhhkItNA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izqpt45won8s7yos7p86.jpg" alt="IaaS" width="211" height="301"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Hypervisor is a component that creates an abstract on top of the actual hardware that lets you run the virtual machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, from the above illustration, you're responsible from the operating system (OS) layer, and above, that's the virtual machine (VM) box. Coming back to the private cloud, it's a hybrid between traditional and IaaS. In the private cloud model, you still own the hardware but as an application team, you're in control of the virtual machine, which enables you to better utilize the resources, easily scale horizontally (in a micro-service architecture pattern). As an application team, can use decide how much memory and vCPU is required by your application, and easily scale out the application instances.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#public-cloud"&gt;
  &lt;/a&gt;
  Public Cloud
&lt;/h2&gt;

&lt;p&gt;Now, going into a public cloud model, if you take away the hardware, hypervisor, OS, runtime components from the earlier IaaS diagram, you're left with your application and its data, and that is also called as Platform as a Service (PaaS). You're responsible for your application code and its data. So in other words, a public cloud is a cloud model where you don't own any hardware, you pay for services that you use in various pricing models like per request, per hour, etc. Cloud providers like AWS, provide you EC2 as compute instance/server where you can run the code without any hardware operational challenge. In a public cloud provider case, the cloud provider owns the hardware in their physical location. There is a lot of benefits of using the public cloud, not much capacity planning is needed, very easy and quickly capacity can be increased, etc. &lt;strong&gt;What is the disadvantage of using the public cloud?&lt;/strong&gt; as such there is no real downside of it, however, there could be compliance restrictions on storing sensitive data in a public cloud (not because the public is accessible to all, but, because a system that stores data may not be portable to the cloud).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hybrid-and-multi-cloud"&gt;
  &lt;/a&gt;
  Hybrid and Multi Cloud
&lt;/h2&gt;

&lt;p&gt;Once, you understand public and private cloud, hybrid and multi-cloud models are just a piece of cake. &lt;br&gt;
Hybrid cloud means, you're running code on both places, i.e. private cloud in your physical data center and public cloud provider. &lt;strong&gt;Why you'll do that?&lt;/strong&gt; you're still migrating to a public cloud, you need a failover strategy (where failover will happen to the private cloud), and of course sensitive data.&lt;br&gt;
In a multi-cloud model, you want to run the application in multiple cloud providers like AWS, GCP, Azure, etc. &lt;strong&gt;And again why you would do that?&lt;/strong&gt; you don't want to get locked on a single cloud provider and want the flexibility, freedom to move to a different cloud service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you have reached here, then I did a satisfactory effort to keep you reading. Please be kind to leave any comments or ask for any corrections. &lt;strong&gt;Happy Clouding!&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>beginners</category>
      <category>cloudcomputing</category>
    </item>
    <item>
      <title>Prevent costly Amazon DynamoDB operations in AWS Amplify CLI projects</title>
      <author>Wojciech Matuszewski</author>
      <pubDate>Sun, 12 Dec 2021 05:18:52 +0000</pubDate>
      <link>https://dev.to/aws-builders/prevent-costly-amazon-dynamodb-operations-in-aws-amplify-cli-projects-45k</link>
      <guid>https://dev.to/aws-builders/prevent-costly-amazon-dynamodb-operations-in-aws-amplify-cli-projects-45k</guid>
      <description>&lt;p&gt;The &lt;em&gt;serverless revolution&lt;/em&gt; gave birth to a new wave of developers – full-stack AWS serverless developers. Capable both on the frontend and backend, those developers can be very productive, delivering business value in days, not months.&lt;/p&gt;

&lt;p&gt;One tool in their toolbelt might be the &lt;a href="https://docs.amplify.aws/cli/"&gt;&lt;em&gt;AWS Amplify CLI&lt;/em&gt;&lt;/a&gt;, which lives under the &lt;a href="https://aws.amazon.com/amplify/"&gt;&lt;em&gt;AWS Amplify&lt;/em&gt;&lt;/a&gt; umbrella. While very powerful, when misused, it might lead to a large AWS bill at the end of the month.&lt;/p&gt;

&lt;p&gt;This blog post will show you how to ensure that your &lt;em&gt;AWS Amplify CLI&lt;/em&gt; bootstrapped application is not running costly &lt;a href="https://aws.amazon.com/dynamodb/"&gt;&lt;em&gt;Amazon DynamoDB&lt;/em&gt;&lt;/a&gt; operations like the &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html"&gt;&lt;code&gt;Scan&lt;/code&gt; operation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem-with-amazon-dynamodb-scan-operation"&gt;
  &lt;/a&gt;
  The problem with Amazon DynamoDB Scan operation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QRtvuim7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tbe4gtpzp15t253mm2s.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QRtvuim7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tbe4gtpzp15t253mm2s.jpeg" alt="Is it really a problem?" width="640" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before diving into the solution, let us first learn why you might not want to run &lt;em&gt;Amazon DynamoDB&lt;/em&gt; &lt;code&gt;Scan&lt;/code&gt; operations on your &lt;em&gt;Amazon DynamoDB&lt;/em&gt; tables.&lt;/p&gt;

&lt;p&gt;The main issue is that &lt;strong&gt;in most scenarios&lt;/strong&gt;, the &lt;em&gt;Amazon DynamoDB&lt;/em&gt; &lt;code&gt;Scan&lt;/code&gt; is &lt;strong&gt;wildly inefficient and costly&lt;/strong&gt;. The bigger your data set is, both in volume and size, the more problematic the operation can be.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Scan&lt;/code&gt; operation will read &lt;strong&gt;every item&lt;/strong&gt; in your table or &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SecondaryIndexes.html"&gt;&lt;em&gt;secondary index&lt;/em&gt;&lt;/a&gt; (&lt;code&gt;Scan&lt;/code&gt; can retrieve up to 1 MB of data in one request). This rule applies to all &lt;code&gt;Scan&lt;/code&gt; requests, even if you specify filter conditions on top of it!&lt;/p&gt;

&lt;p&gt;Of course, that in of itself would not be a problem. It is &lt;strong&gt;entirely valid to use the &lt;code&gt;Scan&lt;/code&gt; operation for data migrations alike&lt;/strong&gt;. The situation drastically changes when developers expose &lt;strong&gt;the &lt;code&gt;Scan&lt;/code&gt; operation as an API endpoint&lt;/strong&gt; – which is what &lt;em&gt;AWS Amplify CLI&lt;/em&gt; can do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unknowingly-using-amazon-dynamodb-raw-scan-endraw-operations"&gt;
  &lt;/a&gt;
  Unknowingly using Amazon DynamoDB &lt;code&gt;Scan&lt;/code&gt; operations
&lt;/h2&gt;

&lt;p&gt;How might one unknowingly expose a &lt;em&gt;Amazon DynamoDB&lt;/em&gt; &lt;code&gt;Scan&lt;/code&gt; operation as an endpoint while using the &lt;em&gt;AWS Amplify CLI&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Let us take this seemingly harmless-looking, GraphQL as an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AMPLIFY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;globalAuthRule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AuthRule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;# FOR TESTING ONLY!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When deployed according to the instructions &lt;a href="https://docs.amplify.aws/cli/graphql/overview/"&gt;in the documentation&lt;/a&gt;, various GraphQL queries, mutations, and subscriptions will be created in the &lt;a href="https://aws.amazon.com/appsync/"&gt;&lt;em&gt;AWS AppSync&lt;/em&gt;&lt;/a&gt; service.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To deploy the &lt;em&gt;AWS Amplify&lt;/em&gt; applications using &lt;em&gt;AWS Amplify CLI&lt;/em&gt; consult the &lt;a href="https://docs.amplify.aws/cli/start/install/"&gt;Getting started documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the queries is the &lt;code&gt;ListPosts&lt;/code&gt; query. This query &lt;strong&gt;will utilize Amazon DynamoDB &lt;code&gt;Scan&lt;/code&gt; operation for data retrieval&lt;/strong&gt;. Not ideal in most circumstances.&lt;/p&gt;

&lt;p&gt;I have a lot of empathy for the &lt;em&gt;AWS Amplify&lt;/em&gt; team. The idea is to hide as much complexity about AWS as possible while enabling the developers to do their job – this is a challenging problem.&lt;/p&gt;

&lt;p&gt;In my humble opinion, while mostly doing great work, this is an area where they fall a bit short. To my best knowledge, there are &lt;strong&gt;no warnings in the &lt;a href="https://docs.amplify.aws/cli/graphql/overview/"&gt;documentation&lt;/a&gt; about this behavior&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The documentation around various data-modeling-related directives is excellent, though. Give it a read!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#custom-aws-cdk-overrides-to-the-rescue"&gt;
  &lt;/a&gt;
  Custom AWS CDK overrides to the rescue
&lt;/h2&gt;

&lt;p&gt;So how can we use the &lt;em&gt;AWS Amplify CLI&lt;/em&gt; without worrying about using inefficient operations to access our data?&lt;/p&gt;

&lt;p&gt;I was very happily surprised that, in the wave of the announcements before the &lt;a href="https://reinvent.awsevents.com/"&gt;AWS re:Invent 2021&lt;/a&gt; came the &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/aws-amplify-override-amplify-generated-resources-cdk/"&gt;support to override Amplify-generated resources using CDK&lt;/a&gt; – this is just what we need!&lt;/p&gt;

&lt;p&gt;After reading the excellent &lt;a href="https://aws.amazon.com/blogs/mobile/override-amplify-generated-backend-resources-using-cdk/"&gt;introductory blog post&lt;/a&gt;, it did not take me long to make sure all &lt;em&gt;Amazon DynamoDB&lt;/em&gt; &lt;code&gt;Scan&lt;/code&gt; operations are forbidden. And I was able to do it without changing my application code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Z_gxMY---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0fk8abvzjrrxaouxj8v.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Z_gxMY---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0fk8abvzjrrxaouxj8v.jpeg" alt="Simplified flow" width="880" height="840"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#twostep-process"&gt;
  &lt;/a&gt;
  Two-step process
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The first step&lt;/strong&gt; is to run the &lt;em&gt;AWS Amplify CLI&lt;/em&gt; to override the GraphQL API resources. Consult the &lt;a href="https://docs.amplify.aws/cli/graphql/override/"&gt;official documentation&lt;/a&gt; for more information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify override api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The second step&lt;/strong&gt; is to amend the &lt;code&gt;override.ts&lt;/code&gt; file that the &lt;em&gt;AWS Amplify CLI&lt;/em&gt; created for us. The following is the code I've added to the &lt;code&gt;override.ts&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AmplifyApiGraphQlResourceStackTemplate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-amplify/cli-extensibility-helper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;override&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AmplifyApiGraphQlResourceStackTemplate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modelDDBTable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;modelDDBTable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;modelIamRole&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;policies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;policyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AmplifyDenyTest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;policyDocument&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2012-10-17&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Deny&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dynamodb:Scan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
              &lt;span class="c1"&gt;// TIL: Scan can be performed on indexes&lt;/span&gt;
              &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;modelDDBTable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrArn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;modelDDBTable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrArn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/*`&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Despite overriding the &lt;code&gt;policies&lt;/code&gt; property for each model &lt;em&gt;AWS IAM&lt;/em&gt; role, one can still use other &lt;em&gt;Amazon DynamoDB&lt;/em&gt; operations. It is possible because the &lt;code&gt;modelIamRole&lt;/code&gt; has other policies attached to it by default.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pQruegjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyc1585797r6cl1vrgf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pQruegjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyc1585797r6cl1vrgf7.png" alt="Newly added policy" width="880" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Be careful when overriding resources in your applications. You might want to do a test run before deploying anything to production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-words"&gt;
  &lt;/a&gt;
  Closing words
&lt;/h2&gt;

&lt;p&gt;You might be wondering, why bother? I would argue that having such guardrails in place, you are most likely to fall into &lt;a href="https://blog.codinghorror.com/falling-into-the-pit-of-success/"&gt;a pit of success&lt;/a&gt; when it comes to your &lt;em&gt;Amazon DynamoDB&lt;/em&gt; access patterns.&lt;/p&gt;

&lt;p&gt;Striving to hide complexity is an excellent mission, and &lt;em&gt;AWS Amplify CLI&lt;/em&gt; does an excellent job doing that. But it sometimes can shoot us in the foot when we are not careful.&lt;/p&gt;

&lt;p&gt;For more similar content, follow me on Twitter - &lt;a href="https://twitter.com/wm_matuszewski"&gt;@wm_matuszewski&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for your valuable time.&lt;/p&gt;

</description>
      <category>amplify</category>
      <category>dynamodb</category>
      <category>aws</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Art of shit coding</title>
      <author>Gourav Singh Rawat</author>
      <pubDate>Sun, 12 Dec 2021 05:15:32 +0000</pubDate>
      <link>https://dev.to/seek4samurai/art-of-shit-coding-4f5p</link>
      <guid>https://dev.to/seek4samurai/art-of-shit-coding-4f5p</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is Shit Coding?&lt;/strong&gt;&lt;br&gt;
Shit coding is just what the name suggests, it's probably the encrypted code which only you can read. Not using comments, weird variable names are some of the techniques to master it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;How to Master the Art of shit coding&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;---- Don't use Comments&lt;br&gt;
Comments are meant to be avoided, don't use them unless you really have to try continuous writing without any comments and you'll be good.&lt;/p&gt;

&lt;p&gt;---- Variable names and useless variables&lt;br&gt;
How do you name your variables?&lt;br&gt;
Like if you had to make a variable that will store user's ID what do you name it? If you name it 'ID' or 'userID' you're doing it wrong! try naming it as varA, a, dik, or something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dik = res.status(404).send("not found bruh!");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do make useless variables it's important.&lt;/p&gt;

&lt;p&gt;--------- Kill the Indentation&lt;br&gt;
The most stupid thing that ever existed is indentation, to be honest your code is likely to work even without indentations sometimes, so please stop indenting your code.&lt;/p&gt;

&lt;p&gt;--------- DIV Volcano (divcano!)&lt;br&gt;
Stop using different HTML tags like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section&amp;gt;
   &amp;lt;nav&amp;gt;
      &amp;lt;div&amp;gt;
      &amp;lt;/div&amp;gt;
   &amp;lt;/nav&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DON'T DO THIS!&lt;br&gt;
Try doing this instead...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
   &amp;lt;div&amp;gt;
      &amp;lt;div&amp;gt;
         &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
            &amp;lt;/div&amp;gt;
         &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Div volcano looks satisfying who cares about readability anyways?&lt;/p&gt;

&lt;p&gt;--------- Use your native language to write comments (if you have to)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//वाह क्या गांड फाडू कोड लिखा है
&amp;lt;div&amp;gt;
   &amp;lt;div class="what"&amp;gt;
      &amp;lt;div class="da"&amp;gt;
         &amp;lt;div id="dog"&amp;gt;
            &amp;lt;div class="doin?"&amp;gt;
            &amp;lt;/div&amp;gt;
         &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;--------- Don't show your mistakes &amp;lt;3&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;try{
   //Something that works
} catch{
  //Bruh!
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;--------- Don't add node_modules to .gitignore&lt;br&gt;
Stop it let people know what modules you're using...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you do all of these you'll reach new heights, just don't code with me I already dead inside. Hope this guide was helpful. Byeeeee&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>writing</category>
    </item>
    <item>
      <title>I asked GitHub Copilot if it will replace developers!</title>
      <author>Virej Dasani</author>
      <pubDate>Sun, 12 Dec 2021 04:54:09 +0000</pubDate>
      <link>https://dev.to/virejdasani/i-asked-github-copilot-if-it-will-replace-developers-45ka</link>
      <guid>https://dev.to/virejdasani/i-asked-github-copilot-if-it-will-replace-developers-45ka</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/s-XGQOE8E1g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Please consider liking and subscribing &amp;lt;3&lt;/p&gt;

</description>
      <category>github</category>
      <category>javascript</category>
      <category>ai</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Final progress update</title>
      <author>Tue</author>
      <pubDate>Sun, 12 Dec 2021 04:43:41 +0000</pubDate>
      <link>https://dev.to/tuenguyen2911_67/final-progress-update-3ojp</link>
      <guid>https://dev.to/tuenguyen2911_67/final-progress-update-3ojp</guid>
      <description>&lt;p&gt;Last week was fun and quite productive, I finally finished the &lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2541"&gt;backend part&lt;/a&gt; of the &lt;a href="https://github.com/Seneca-CDOT/telescope/issues/2414"&gt;issue&lt;/a&gt; and the &lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2585"&gt;PR&lt;/a&gt; for the front-end is up for review. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-test-for-the-endpoint"&gt;
  &lt;/a&gt;
  Adding a test for the endpoint:
&lt;/h2&gt;

&lt;p&gt;Any new feature should have a test suite for it, I wrote the test below to make sure the data returned is correct. There are a few checks like status of the request, the type of data returned and making sure all keys are correct.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Should return 200 and valid response object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checkKeys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resBody&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;waiting&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;failed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;delayed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;paused&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jobCnt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueInfo&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;allKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;resBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueInfo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/feeds/info&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueInfo&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;checkKeys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-the-job-count-to-the-dashboard"&gt;
  &lt;/a&gt;
  Adding the job count to the dashboard:
&lt;/h2&gt;

&lt;p&gt;The dashboard of &lt;code&gt;telescope&lt;/code&gt; was recently updated using &lt;code&gt;handlebars&lt;/code&gt; template, so it was a good opportunity to brush up my knowledge of it. You can take a look at the dashboard and the job count gets updated when the feed queue starts processing in the backend&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/m3bueTHzWSsIo6SDI8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/m3bueTHzWSsIo6SDI8/giphy.gif" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I simply created function to fetch the endpoint I &lt;code&gt;feeds/info&lt;/code&gt; and  exported it to the &lt;code&gt;render&lt;/code&gt; method of the &lt;code&gt;hbs&lt;/code&gt; template. I have more detailed explanation in this &lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2585"&gt;PR&lt;/a&gt;. For now, I'm waiting for some new fixes to the dashboard to land and fix the fetch url accordingly. &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Week 13 Project Phase 2</title>
      <author>Qzhang125</author>
      <pubDate>Sun, 12 Dec 2021 04:33:35 +0000</pubDate>
      <link>https://dev.to/qzhang125/week-13-project-phase-2-316j</link>
      <guid>https://dev.to/qzhang125/week-13-project-phase-2-316j</guid>
      <description>&lt;p&gt;Hello everyone, welcome to week 13. This blog we are going to pick an open source software and locate the SIMD code from the source code of the software and then determine the SIMD code usage in a certain program.  For my blog, I choose &lt;a href="https://ffmpeg.org/about.html"&gt;FFmpeg&lt;/a&gt;. FFmpeg is a cross-platform framework to record, convert, and stream video and audio, it provides an easy way to convert video and audio to other formats.&lt;br&gt;
FFmpeg is a very active open source package with daily updates and debugging. This is a short log of the recent updates of FFmpeg below, or you can click &lt;a href="https://git.ffmpeg.org/gitweb/ffmpeg.git/shortlog"&gt;here&lt;/a&gt; to catch more updates history. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nato7S25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3101akanaz3jtupg4jk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nato7S25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3101akanaz3jtupg4jk.png" alt="Image description" width="880" height="584"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#single-instruction-multiple-data-units"&gt;
  &lt;/a&gt;
  Single Instruction, Multiple Data Units
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.sciencedirect.com/topics/computer-science/single-instruction-multiple-data"&gt;SIMD&lt;/a&gt;(Single Instruction, Multiple Data) is a kind of high-performance embedded computing. The concept of SIMD is a single instruction which does one operation but we could improve it to process multiple data in parallel. To get more information, you can also check my last blog for &lt;a href="https://dev.to/qzhang125/week11-reflection-1iai"&gt;week 12&lt;/a&gt;.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Mz07kmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6c4my0m235j6pen17epl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Mz07kmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6c4my0m235j6pen17epl.png" alt="The logic of SIMD" width="334" height="212"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simd-code"&gt;
  &lt;/a&gt;
  SIMD code
&lt;/h2&gt;

&lt;p&gt;To get the source code of FFmpeg, you can simply go to &lt;a href="https://github.com/FFmpeg/FFmpeg"&gt;FFmeg’s github&lt;/a&gt; and then clone the git onto AArch64 orx86_64 system. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Remote Development and Debugging Tools </title>
      <author>TrystanCocolatte</author>
      <pubDate>Sun, 12 Dec 2021 03:47:35 +0000</pubDate>
      <link>https://dev.to/trystancocolatte/remote-development-and-debugging-tools-509d</link>
      <guid>https://dev.to/trystancocolatte/remote-development-and-debugging-tools-509d</guid>
      <description>&lt;p&gt;&lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt;&lt;br&gt;
It's a free, open-source code editor developed by Microsoft and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other programming languages and runtimes (such as .NET and Unity).&lt;br&gt;
Advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Develop on the same operating system that you deploy, or use larger, faster, or more specialized hardware than your local machine. &lt;/li&gt;
&lt;li&gt;Quickly switch between separate development environments to apply updates without worrying about impacting your local computer. With easy-to-create and consistent development containers, it helps new team members / contributors become more productive in less time. &lt;/li&gt;
&lt;li&gt;No source code needs to be on your local machine to gain these benefits since Remote Development runs commands and extensions directly on the remote machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Application scenarios:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When encountering very tedious installation and development environment configuration, you need to configure various tools and plug-ins by yourself. The template of VSCRD's remote working area can be easily handled.&lt;/li&gt;
&lt;li&gt;The local machine configuration is low, and some developments with high computing requirements cannot be carried out. In VSCRD, you can directly operate the remote file system and use remote computing resources to complete related development requirements.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.jetbrains.com/remote-development/"&gt;Jet Brains Remote development&lt;/a&gt;&lt;br&gt;
This is a thin client you see after you launch JetBrains Gateway and establish a connection to a remote server. It gets connected to the IDE backend and gives you the ability to do remote development as if it is local.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UUSwzYzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1y3llblmhdlvvruh2uas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UUSwzYzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1y3llblmhdlvvruh2uas.png" alt="Image description" width="880" height="576"&gt;&lt;/a&gt;&lt;br&gt;
In contrast to remote-desktop solutions, JetBrains Client has an advanced editor based on the JetBrains Rider’s RD protocol, which makes typing feel instant. Additionally, the advanced code intelligence implemented on the IntelliJ IDEA server is presented in a way that looks as if it’s running locally.&lt;br&gt;
JetBrains Client is based on the IntelliJ IDEA platform, therefore it imports any local IDE settings found on the local machine (Client). For example, if there is the IntelliJ IDEA 2021.3 version installed on Client, the downloaded and just launched JetBrains Client will import its settings, so the remote development experience will be personalized for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.teamcode.com/products/dcs"&gt;DCS&lt;/a&gt;&lt;br&gt;
DCS is a product in the TeamCode cloud development tool chain that can quickly and automatically build scalable cloud development environments. It can set up a development environment from a Git repository URL in seconds and provide a standardized development environment. It supports mainstream IDEs and browsers, client IDE access, and can connect with TeamCode Cloud-IDE seamlessly. It supports multiple languages, including Java, Python, Go, Typescript, etc. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H6ETqz0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lbyujolz13ve9k7s7wp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H6ETqz0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lbyujolz13ve9k7s7wp.png" alt="Image description" width="880" height="402"&gt;&lt;/a&gt;&lt;br&gt;
Advantages&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Automatically manage the cloud dev environment which can reduce the cost of R&amp;amp;D.&lt;/li&gt;
&lt;li&gt;All development data are stored in the cloud to enhance data security.&lt;/li&gt;
&lt;li&gt;Manage the development process in the cloud, improve data transparency and management efficiency.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RWcx4H2H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftqen5l4f3rxehfgngrb.png" alt="Image description" width="880" height="537"&gt;
Application Scenario&lt;/li&gt;
&lt;li&gt;Develop the project with your team quickly.&lt;/li&gt;
&lt;li&gt;Start the project quickly with DCS;&lt;/li&gt;
&lt;li&gt;Open the project using Cloud-IDE;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start coding&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Efficient remote collaborative development&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Join the team organization;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select projects that need collaboration;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use Cloud-IDE or local IDE to open the project;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start coding.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/desktop/dev-environments/"&gt;Docker Dev Environment&lt;/a&gt;&lt;br&gt;
Docker Dev Environment facilitates collaboration by allowing you to share code in progress with team members. When using a development environment, you can easily set up a repeatable development environment by keeping the environment version along with your code. You can also share your code in progress with your team members with one click without having to deal with  merge conflicts, as you move between Git branches to upload your code to your computer. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kaEEzzP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ko2x9d7gyy3esjc8t96s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kaEEzzP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ko2x9d7gyy3esjc8t96s.png" alt="Image description" width="880" height="499"&gt;&lt;/a&gt;&lt;br&gt;
It supports creating a development environment from:&lt;br&gt;
1\ Git repository URL&lt;br&gt;
2\ Local files&lt;br&gt;
3\ Docker images&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Basic Syntax and Variables</title>
      <author>Vinicius Ithalo</author>
      <pubDate>Sun, 12 Dec 2021 03:19:36 +0000</pubDate>
      <link>https://dev.to/vinic/basic-syntax-and-variables-14np</link>
      <guid>https://dev.to/vinic/basic-syntax-and-variables-14np</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;br&gt;
This is the second post of a series, the main focus is my own growth on PHP. This isn't an informative article and what I say must be taken with a grain of salt. I'm always open for corrections and suggestions.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h2&gt;

&lt;p&gt;Being an embedded inside HTML, PHP has its own tags to mark the start and end of code to interpret, marked by the tags &lt;code&gt;&amp;lt;?php&lt;/code&gt; and &lt;code&gt;?&amp;gt;&lt;/code&gt; respectively. This was the first thing that caught my attention, running functions inside the same file seemed so strange yet so easy to read. It is important to always finish a statement with a semicolon (&lt;code&gt;;&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This will be ignored by the parser and will be printed as is.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; 
    &lt;span class="c1"&gt;// This is a comment and won't affect the code.&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'This will be printed out!'&lt;/span&gt;
  &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6IXFT3iG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdj17r1ejld5gxpce1oe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6IXFT3iG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdj17r1ejld5gxpce1oe.png" alt=";" width="2" height="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#echo"&gt;
  &lt;/a&gt;
  Echo
&lt;/h2&gt;

&lt;p&gt;According to PHP documentation, &lt;code&gt;echo&lt;/code&gt; is a &lt;strong&gt;language construct&lt;/strong&gt;, a term that I researched about, but still would love to receive an explanation, that outputs expressions without additional newlines or spaces. This means that if you print something using it, the next echo will be in the same line without any space.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Lorem ipsum'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'dolor sit amet'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will be outputted as &lt;code&gt;Lorem ipsumdolor sit amet&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#echo-shorthand-tag"&gt;
  &lt;/a&gt;
  Echo Shorthand tag
&lt;/h3&gt;

&lt;p&gt;Echo has a shortened method, by putting an equals sign instead of 'php' on &lt;code&gt;&amp;lt;?php&lt;/code&gt;. It would be the same as using &lt;code&gt;&amp;lt;?php echo '' ?&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?= 'Some random letters' ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#escaping"&gt;
  &lt;/a&gt;
  Escaping
&lt;/h3&gt;

&lt;p&gt;In some situations, it might be necessary to use symbols such as quotes (&lt;code&gt;" '&lt;/code&gt;) or dollar signs without referencing variables or closing strings. You may use a backslash (&lt;code&gt;\&lt;/code&gt;) for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'This isn\'t that hard.'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6IXFT3iG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdj17r1ejld5gxpce1oe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6IXFT3iG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdj17r1ejld5gxpce1oe.png" alt=";" width="2" height="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;Variables in PHP are similar to other languages such as Python, though the way they are represented are a small nuisance for me. Variables must be prefixed with a dollar sign (&lt;code&gt;$&lt;/code&gt;) and are followed by a letter or an underscore, their names can be formed by any number and letter, also, they're case-sensitive. The variable also can't be named as &lt;code&gt;$this&lt;/code&gt;, as it refers to the object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Vinícius'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem for me is that the dollar sign isn't present as a single character on the keyboard, and the keys that I need to press are pretty far from the common position of my hand.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVpbkUSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wg5h975zttkd43pe8ha4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVpbkUSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wg5h975zttkd43pe8ha4.png" alt="Keyboard" width="880" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This probably is just me being too fussy, and to say the truth doesn't even cause that big of a break in the flow of writing. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#variables-inside-text"&gt;
  &lt;/a&gt;
  Variables Inside Text
&lt;/h3&gt;

&lt;p&gt;It's possible to use variables inside strings by just using double quotes (&lt;code&gt;""&lt;/code&gt;) instead of simple ones (&lt;code&gt;''&lt;/code&gt;), it is also recommended to use curly brackets (&lt;code&gt;{}&lt;/code&gt;) for better readability.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Vinícius'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"My name is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#value-and-reference"&gt;
  &lt;/a&gt;
  Value and Reference
&lt;/h3&gt;

&lt;p&gt;By default, variables are assigned by value, so they receive a copy of the value. You may assign by reference, meaning that whenever the base variable changes, the one that makes reference also changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Vinícius'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$newName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"My name is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$newName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;! &amp;lt;br&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Ithalo'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"My name is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$newName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result would be:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qbf4FuoZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61lunmdubjdoh17b2tho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qbf4FuoZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61lunmdubjdoh17b2tho.png" alt="Reference Result" width="169" height="33"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I couldn't really find possible ways of using assignment by reference without making my code harder to read and understand. Almost all the situations I could think of had better workarounds, though I can't really say as I didn't see how functions work exactly here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6IXFT3iG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdj17r1ejld5gxpce1oe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6IXFT3iG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdj17r1ejld5gxpce1oe.png" alt=";" width="2" height="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#questions"&gt;
  &lt;/a&gt;
  Questions
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;What are Language Constructs?&lt;/li&gt;
&lt;li&gt;In what situations assigning by reference is a good idea?&lt;/li&gt;
&lt;li&gt;Is there any tool similar to Codepen that works with PHP?&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>php</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
  </channel>
</rss>
