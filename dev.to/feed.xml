<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The 7 Categories of Engineering Management w/ Ian Nowland of Datadog</title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 22 Jul 2021 14:20:07 +0000</pubDate>
      <link>https://dev.to/linearb/the-7-categories-of-engineering-management-w-ian-nowland-of-datadog-3de1</link>
      <guid>https://dev.to/linearb/the-7-categories-of-engineering-management-w-ian-nowland-of-datadog-3de1</guid>
      <description>&lt;p&gt;You can’t learn to swim by reading a book.&lt;/p&gt;

&lt;p&gt;The same principle applies to coaching engineering managers. In this episode of &lt;a href="https://devinterrupted.com/podcast/7-categories-of-engineering-management/"&gt;Dev Interrupted&lt;/a&gt;, Ian Nowland SVP of Core Engineering at Datadog, discusses how the reality of coaching engineering managers is different from what they tell you during conferences, as well as diving into his 7 categories of engineering management.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/2bTUfObUK2mgtRQYX7yX8h"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The realities of coaching direct reports&lt;/li&gt;
&lt;li&gt;How Ian measures the impact of his teams&lt;/li&gt;
&lt;li&gt;The 7 Categories of Engineering Management&lt;/li&gt;
&lt;li&gt;How to adopt a learning mindset to engineering management&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>engineering</category>
      <category>management</category>
      <category>coaching</category>
      <category>team</category>
    </item>
    <item>
      <title>Getting Started with Jamstack</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 22 Jul 2021 14:17:50 +0000</pubDate>
      <link>https://dev.to/codesphere/getting-started-with-jamstack-341o</link>
      <guid>https://dev.to/codesphere/getting-started-with-jamstack-341o</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Over the past couple of years, one tech stack that has consistently stood out from the crowd in developer conversations is Jamstack. In this article, we're going to go over what makes Jamstack so unique, as well as how you can get started creating your own Jamstack web app.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Let's get right into it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jamstack"&gt;
  &lt;/a&gt;
  What is Jamstack?
&lt;/h2&gt;

&lt;p&gt;Jamstack is an architecture designed to make your web app faster, more secure, and easier to scale. Many people believe Jamstack is the next evolution in modern web development - and here's why.&lt;/p&gt;

&lt;p&gt;Jamstack is arguably the lightest technical stack out there. It eliminates the need to worry about infrastructure and servers, as it requires no real interaction with a database and relies mostly on third-party APIs in order to provide additional functionality, such as authentication and payment.&lt;br&gt;
A Jamstack app consists of static HTML pages, made dynamic using JavaScript and enhanced with third-party services via API and prebuilt Markup. That's where its name comes from &lt;strong&gt;J&lt;/strong&gt;avaScript, &lt;strong&gt;A&lt;/strong&gt;PI, and hypertext &lt;strong&gt;M&lt;/strong&gt;arkup.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-does-jamstack%C2%A0work"&gt;
  &lt;/a&gt;
  How Does Jamstack Work?
&lt;/h2&gt;

&lt;p&gt;Though JAMstack confusingly includes the word "stack", it is more of architecture for web applications that promise to be faster, cheaper, and more secure than the traditional model. The traditional model is the client-server model, where applications are served dynamically from a web server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N9y1vzPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qh2titgxr0ihb1nrl6s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N9y1vzPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qh2titgxr0ihb1nrl6s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The key concept behind Jamstack is to eliminate the need for a backend server for the app, at least in the form with which you may be accustomed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nQ7QyKNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjf20w96cfcw4qugiyma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nQ7QyKNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjf20w96cfcw4qugiyma.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead, Jamstack sites are simply static files that are served by a special type of file-hosting called a CDN (Content Delivery Network). A CDN is actually a network of file servers around the world, all holding a copy of your site's files.&lt;br&gt;
Once your static site has been loaded by a browser, you can use JavaScript to generate HTTP requests to third-party services, including databases, search, identity management, payment processing, and serverless functions.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#jamstack-benefits"&gt;
  &lt;/a&gt;
  Jamstack Benefits
&lt;/h2&gt;

&lt;p&gt;So what are the benefits of Jamstack? Why go through the hassle of transforming your web app architecture?&lt;br&gt;
Jamstack's architecture is faster, cheaper, and more secure, which is made possible by the usage of a CDN and the elimination of a web server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. A CDN is generally faster than a webserver!&lt;/strong&gt;&lt;br&gt;
Since a CDN does not process requests and instead just serves files, the request/response loop is much shorter. And since CDNs can serve on the network edge, closer to the user, the latency of the response is minimized.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. A CDN is most likely less expensive than a webserver!&lt;/strong&gt;&lt;br&gt;
If you use a web server, it must run 24/7 listening for requests. Since cloud computing is charged by the minute, you'll be paying for your server, even when it's idle.&lt;br&gt;
CDN hosting is generally less expensive because a CDN service is only charged by the volume of data served, and therefore it's idle time doesn't cost anything.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. A CDN is generally more secure than a webserver!&lt;/strong&gt;&lt;br&gt;
Finally, unlike a web server, a CDN does not process requests and therefore has limited potentially exposed attack vectors for hackers. A Jamstack site will still connect to services, such as cloud databases, but since these are managed by specialist third parties, security gaps are usually minimal.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#how-do-i-get-started-using-jamstack"&gt;
  &lt;/a&gt;
  How Do I Get Started using Jamstack?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#building-the%C2%A0frontend"&gt;
  &lt;/a&gt;
  Building the Frontend
&lt;/h3&gt;

&lt;p&gt;Let's start with the Jamstack frontend. While the core of a Jamstack website is the static HTML that's delivered to the browser, JavaScript and the UI frameworks that build that experience are what have made its architecture popular.&lt;br&gt;
A common front-end framework for Jamstack is Next.js. The following demonstrates how to get started with Next.js for Jamstack development. The easiest way to get started is by typing the following command in your terminal, and I'll name the project mynextapp:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ npx create next-app mynextapp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which will generate for us a default boilerplate page.&lt;br&gt;
Navigate into the newly made directory we just created by opening the folder in your code editor or by typing in the terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cd mynextapp&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ code .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The following is an example of the default starter Next.js file tree, generated by the create-next-app command:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YmGhxWak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyssryqssnlmgyqwv350.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YmGhxWak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyssryqssnlmgyqwv350.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;node_modules&lt;/code&gt; folder is where all the dependencies are stored.&lt;/li&gt;
&lt;li&gt;The pages folder is where we keep all of our page components. The idea is that each page in Next.js has its own React component. At the moment, the only component we have is the &lt;code&gt;index.js&lt;/code&gt; component, which will be for the homepage.&lt;/li&gt;
&lt;li&gt;The api folder is for API endpoints.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;app.js&lt;/code&gt; file acts as the root component, and all of our different page components are rendered here:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vNV9Nerx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efqruj8zv1i3t1ri1gpb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vNV9Nerx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efqruj8zv1i3t1ri1gpb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The public folder is where all of our public assets are stored, such as images.&lt;/li&gt;
&lt;li&gt;The styles folder contains all of our CSS files and CSS modules.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.gitignore&lt;/code&gt; is for version control.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;package.json&lt;/code&gt; is to keep track of our various dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;code&gt;package.json&lt;/code&gt; file, we have the &lt;code&gt;dev&lt;/code&gt; script, which spins up a local development server for us, to enable us to preview our app in the browser.&lt;/p&gt;

&lt;p&gt;In the terminal, run the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ npm run dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In your browser, type &lt;code&gt;localhost:3000&lt;/code&gt;, and the following will be displayed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AvYWCj7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kitop8xpxvwzt3vx9tsz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AvYWCj7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kitop8xpxvwzt3vx9tsz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The content shown in your browser is defined in the &lt;code&gt;index.js&lt;/code&gt; component. Replace all the content inside the main &lt;/p&gt; with a simple heading:


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now, we can see our new content displayed in the browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g-985Pdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yluedk4i4t9xzr306n0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g-985Pdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yluedk4i4t9xzr306n0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;The &lt;code&gt;index.js&lt;/code&gt; component is being pre-rendered before it even reaches the browser. During development, this is done via server-side rendering. The server renders the component, then sends the HTML file to the browser, which happens on each page request from the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pages-and%C2%A0routes"&gt;
  &lt;/a&gt;
  Pages and Routes
&lt;/h2&gt;

&lt;p&gt;The pages folder is where we create all of our page components. Each page in Next.js is driven by a React component. So for an About page, we'd have an About component, for a Pricing page, we'd have a Pricing component, and so on. Each page component has its own file inside the pages folder. Therefore, the file name and location of each component are tied to the route for that particular page.&lt;/p&gt;

&lt;p&gt;For example, in the pages folder, let's create an &lt;code&gt;about.js&lt;/code&gt; file. Next.js will automatically create a route &lt;code&gt;/about&lt;/code&gt;, which is the name of the file, to serve up this component. The route name is tied to the file name.&lt;/p&gt;

&lt;p&gt;The one exception to the rule is &lt;code&gt;index.js&lt;/code&gt;. Next.js doesn't create a route &lt;code&gt;/index&lt;/code&gt;, it just creates the route /. So all we have to do is go to the root of the domain to see the &lt;code&gt;index.js&lt;/code&gt; component.&lt;br&gt;
In the &lt;code&gt;about.js&lt;/code&gt; file, let's create a stateless functional component and export it:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Go to &lt;code&gt;/about&lt;/code&gt; in the browser to see the About component page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YzQwrLmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uj7o1lb8kiwc11d2otyp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YzQwrLmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uj7o1lb8kiwc11d2otyp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also create subfolders in the pages folder that contain page components.&lt;/p&gt;

&lt;p&gt;Let's create a subfolder called pricing and a file called &lt;code&gt;plan1.js&lt;/code&gt;. In the &lt;code&gt;plan1.js&lt;/code&gt; file, we'll create a stateless functional component called Plan1:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;When we have a subfolder, Next.js will create a route according to the subfolder as well. Therefore, in this case, the route is: localhost:3000/pricing/plan1&lt;br&gt;
And that's how easy it is to make a multi-page website with Next.js.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#building-the%C2%A0backend"&gt;
  &lt;/a&gt;
  Building the Backend
&lt;/h2&gt;

&lt;p&gt;Content is at the heart of any website or application. This may take a variety of forms, such as a blog or an online store. Tools like Auth0 provide user authentication and management, which can present a number of challenges on its own.&lt;/p&gt;

&lt;p&gt;There are additionally a number of cloud projects that make it simple to build serverless functions, from which you can begin developing your own backend service.&lt;/p&gt;

&lt;p&gt;The great thing about Jamstack apps is that they serve as a central point for bringing in any feature or service you require, paving the way for powerful solutions that are focused on addressing your specific challenge.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#deploying-your%C2%A0app"&gt;
  &lt;/a&gt;
  Deploying Your App
&lt;/h2&gt;

&lt;p&gt;Deploying a website and managing CI/CD systems is arguably one of the most difficult aspects of developing a web application.&lt;br&gt;
In the Jamstack world, tools such as Codesphere offer automated DevOps to make deployment easier.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-now"&gt;
  &lt;/a&gt;
  What Now?
&lt;/h2&gt;

&lt;p&gt;Given the advantages of Jamstack, many people in technology are expecting Jamstack's popularity to increase. Jamstack is growing rapidly, and may one day become the most popular architecture on the web.&lt;/p&gt;

&lt;p&gt;If you want to have a go at building your own Jamstack app or a solution to the painful CI/DC system management, go to &lt;a href="https://link.codesphere.com/BO"&gt;Codesphere&lt;/a&gt; provides an online code editor in which you can build, test, and deploy your apps all within a single tab of your browser.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>nextjs</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Writing inclusive job adverts</title>
      <author>Rouan Wilsenach</author>
      <pubDate>Thu, 22 Jul 2021 14:09:36 +0000</pubDate>
      <link>https://dev.to/rouanw/writing-inclusive-job-adverts-1n0c</link>
      <guid>https://dev.to/rouanw/writing-inclusive-job-adverts-1n0c</guid>
      <description>&lt;p&gt;I recently spent some time helping a startup set up their technical hiring process. Diversity and inclusion are important to me and &lt;a href="https://dev.to/rouanw/want-to-be-a-better-developer-work-somewhere-inclusive-3j34"&gt;I love working at inclusive companies&lt;/a&gt;, so I wanted to make sure the hiring process was as inclusive as possible to help us build a diverse team.&lt;/p&gt;

&lt;p&gt;Here are the highlights of what I learned about inclusive job adverts. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-explicit-about-your-desire-to-be-inclusive"&gt;
  &lt;/a&gt;
  Be explicit about your desire to be inclusive
&lt;/h2&gt;

&lt;p&gt;Here's an easy win. Say somewhere in your job advert that you're open to applicants from different backgrounds. This template can get you started:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[Company Name] is an equal opportunity employer. We celebrate diversity and are committed to creating an inclusive environment for all employees. We welcome applications from those typically underrepresented in tech.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don't pretend your company is more inclusive than it is. Don't make any wild claims. Just say you'd love to hear from folks who are underrepresented – it makes a big difference to whether someone reading your job ad is likely to apply.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimise-for-clarity-and-transparency"&gt;
  &lt;/a&gt;
  Optimise for clarity and transparency
&lt;/h2&gt;

&lt;p&gt;What does it take for someone to go from reading your job advert to clicking "Apply"? Turns out that folks from underrepresented groups are less likely to apply for a job when the job description doesn't clearly set expectations. Here are some areas where you want to make sure you provide as much clarity as possible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The job application process. This includes what the steps are, how long they take and how long the applicant will need to wait for feedback.&lt;/li&gt;
&lt;li&gt;What the role entails. What will the successful candidate's average day look like?&lt;/li&gt;
&lt;li&gt;What does the company do? What is the culture like?&lt;/li&gt;
&lt;li&gt;Benefits and compensation&lt;/li&gt;
&lt;li&gt;Constraints or deal-breakers. For example, is the job remote-friendly? Do you need to live in a specific country? &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dont-overspecify-requirements"&gt;
  &lt;/a&gt;
  Don't over-specify requirements
&lt;/h2&gt;

&lt;p&gt;We've all seen the classic bulleted list of requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Master's degree in Computer Science&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;Redux&lt;/li&gt;
&lt;li&gt;Postgres&lt;/li&gt;
&lt;li&gt;Woodwork&lt;/li&gt;
&lt;li&gt;Test-driven development&lt;/li&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;90s Sitcom Trivia&lt;/li&gt;
&lt;li&gt;AWS InfiniDash&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How is a person looking at this list supposed to make sense of it? Do they need to have done all of it in order to be considered? What if they're super-experienced with Node and React but haven't used Redux? Are they a bad hire?&lt;/p&gt;

&lt;p&gt;The problem with exhaustive lists of requirements is that they facilitate self-selection: the process where a candidate says to themselves "I don't meet the requirements" and doesn't apply. Research shows that women are less likely to apply for job adverts where they don't match all the listed requirements. Is Redux experience really something worth losing a great candidate over?&lt;/p&gt;

&lt;p&gt;Rather have a short list of the requirements that really matter. Karen Catlin recommends picking the five skills your candidate truly needs and including only those. She also advises that you avoid extra-curricular requirements like a well-populated GitHub profile, as these unnecessarily filter out great candidates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#describe-experience-instead-of-prescribing-it"&gt;
  &lt;/a&gt;
  Describe experience instead of prescribing it
&lt;/h2&gt;

&lt;p&gt;What makes a software engineer experienced? This question is surprisingly easy to answer wrong. I've worked with self-taught engineers who can code circles around some folks that have an M.Sc. in Computer Science. Ten years of experience could be ten years of doing the same thing repeatedly and learning nothing. Someone else might have learned everything they need to know in a few short years, while working with world-class engineers.&lt;/p&gt;

&lt;p&gt;In the job adverts I put together, I tried an experiment. Instead of prescribing professional experience, I &lt;strong&gt;described&lt;/strong&gt; it. Here's what I mean:&lt;/p&gt;

&lt;p&gt;Traditional prescription of experience:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At least a Bachelor's degree in Computer Science or related field&lt;/li&gt;
&lt;li&gt;5 years of software development experience&lt;/li&gt;
&lt;li&gt;At least 2 years of experience working with relational databases&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#my-experiment-a-description-of-experience-level"&gt;
  &lt;/a&gt;
  My experiment: a description of experience level
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;This example is for what you might call a "mid-level" engineer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;There is a technical stack in which you feel confident delivering features&lt;/li&gt;
&lt;li&gt;You have a broad base of engineering skills and have started to deepen your knowledge in one or two areas&lt;/li&gt;
&lt;li&gt;You're able to contribute to technical conversations about how to solve problems&lt;/li&gt;
&lt;li&gt;You ask questions about whether you're building the right thing, rather than just about how you're building it&lt;/li&gt;
&lt;li&gt;You've made some technical mistakes and learnt from them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way, you're building a clear picture of where a person should be at in their career. You're talking about how you might judge someone's experience, rather than providing a box-ticking experience. This approach lets the candidate see what's important to you. If you've got well-articulated descriptions of your company's job grades or salary bands, you might find something there you can re-purpose. As a bonus, this may make salary negotiation fairer because the job requirements will be aligned with your internal promotion and pay processes.&lt;/p&gt;

&lt;p&gt;It is also worth including some wording that encourages folks to apply even if they don't meet all the listed requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-some-objective-analysis"&gt;
  &lt;/a&gt;
  Use some objective analysis
&lt;/h2&gt;

&lt;p&gt;Turns out people have done some research into the kind of language turns people away from job adverts. For example, the words we use are subtly "gender-coded". The research shows that you'll turn women away if your job description that is full of masculine-coded words.&lt;/p&gt;

&lt;p&gt;There's a great &lt;a href="http://gender-decoder.katmatfield.com/"&gt;online tool&lt;/a&gt; you can use to highlight gender-coded language in your job description. If you have too much masculine language, you can spend a little time rewording things to be more inclusive.&lt;/p&gt;

&lt;p&gt;For the startup I helped, it turned out the job adverts were "strongly masculine-coded". Some example words included: "leading", "competitors" and "decide".  Remember that none of the words are inherently bad. It's just that, once you have enough of them, your description starts to put people off applying for your job. Rather drop them and appeal to a broader audience. As a plus, the research shows the number of "feminine-coded" language in a job description has no impact on the number of male applicants.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ask-for-feedback"&gt;
  &lt;/a&gt;
  Ask for feedback
&lt;/h2&gt;

&lt;p&gt;Okay, so you've spent some time improving your job advert. Now test it. Reach out to your network and find some people who match the demographic you're trying to reach. Show them your job adverts and ask them how it makes them feel. Implement their suggestions. They'll also let you know if you've said something silly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#better-job-adverts-lead-to-better-candidates"&gt;
  &lt;/a&gt;
  Better job  adverts lead to better candidates
&lt;/h2&gt;

&lt;p&gt;Turns out the trick to attracting applicants from underrepresented backgrounds is simply to write a better job description. If you want to attract the many fantastic software engineers from underrepresented backgrounds, you need to put in a bit of work and create a better job advert. Be clear, be concise and be objective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;I'd recommend you read &lt;a href="https://betterallies.com/buy/"&gt;The “Better Allies” Approach to Hiring&lt;/a&gt;. It's a great resource, with practical tips (checklists, even) for making your overall hiring process more inclusive.&lt;/p&gt;

</description>
      <category>inclusion</category>
      <category>hiring</category>
      <category>culture</category>
    </item>
    <item>
      <title>COPYING ELEMENTS FROM ONE ARRAY INTO ANOTHER ARRAY</title>
      <author>saikiran605</author>
      <pubDate>Thu, 22 Jul 2021 14:02:01 +0000</pubDate>
      <link>https://dev.to/saikiran605/copying-elements-from-one-array-into-another-array-5cp6</link>
      <guid>https://dev.to/saikiran605/copying-elements-from-one-array-into-another-array-5cp6</guid>
      <description>&lt;h1&gt;
  &lt;a href="#initialize-array"&gt;
  &lt;/a&gt;
  Initialize array
&lt;/h1&gt;

&lt;p&gt;arr1=[]&lt;br&gt;
l=int(input("enter the length of the list :"))&lt;br&gt;
print("enter list elements")&lt;br&gt;
for i in range(0,l):&lt;br&gt;
    n=int(input(" "))&lt;br&gt;
    arr1.append(n)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-another-array-arr2-with-size-of-arr1"&gt;
  &lt;/a&gt;
  Create another array arr2 with size of arr1
&lt;/h1&gt;

&lt;p&gt;arr2 = [None] * len(arr1);    &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#copying-all-elements-of-one-array-into-another"&gt;
  &lt;/a&gt;
  Copying all elements of one array into another
&lt;/h1&gt;

&lt;p&gt;for i in range(0, len(arr1)):&lt;br&gt;&lt;br&gt;
    arr2[i] = arr1[i];     &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#displaying-elements-of-array-arr1"&gt;
  &lt;/a&gt;
  Displaying elements of array arr1
&lt;/h1&gt;

&lt;p&gt;print("Elements of original array: ");&lt;br&gt;&lt;br&gt;
for i in range(0, len(arr1)):&lt;br&gt;&lt;br&gt;
   print(arr1[i]),    &lt;/p&gt;

&lt;p&gt;print();    &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#displaying-elements-of-array-arr2"&gt;
  &lt;/a&gt;
  Displaying elements of array arr2
&lt;/h1&gt;

&lt;p&gt;print("Elements of new array: ");&lt;br&gt;&lt;br&gt;
for i in range(0, len(arr2)):&lt;br&gt;&lt;br&gt;
   print(arr2[i])&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Mastering Web Scraping in Python: From Zero to Hero</title>
      <author>Ander Rodriguez</author>
      <pubDate>Thu, 22 Jul 2021 14:00:28 +0000</pubDate>
      <link>https://dev.to/anderrv/mastering-web-scraping-in-python-from-zero-to-hero-4fj4</link>
      <guid>https://dev.to/anderrv/mastering-web-scraping-in-python-from-zero-to-hero-4fj4</guid>
      <description>&lt;p&gt;Website scraping is much more than extracting content with some CSS selectors. We summarized years of expertise in this guide. With all these new tricks and ideas, you'll be able to scrape data reliably, faster, and more performant. And get some extra fields that you thought were not present.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;For the code to work, you will need  &lt;a href="https://www.python.org/downloads/"&gt;python3 installed&lt;/a&gt; . Some systems have it pre-installed. After that, install all the necessary libraries by running &lt;code&gt;pip install&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;requests beautifulsoup4 pandas
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Getting the HTML from a URL is easy with the requests library. Then pass the content to BeautifulSoup, and we can start getting data and querying with selectors. We won't go into much detail. In short, you can use  &lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors"&gt;CSS selectors&lt;/a&gt;  to get page elements and content. Some require a different syntax, but we'll discover that later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt; 

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://zenrows.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Web Data Automation Made Easy - ZenRows
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To avoid requesting the HTML every time, we can store it in an HTML file and load BeautifulSoup from there. For a simple demo, we can do this manually. An easy way to do that is to view the page source, copy and paste it into a file. It is essential to visit the page without being logged in, as a crawler would do.&lt;/p&gt;

&lt;p&gt;Getting the HTML in here might look like a simple task, but nothing farther from the truth. We won't cover it in this blog post, but it deserves a complete guide. Our advice is to use this static approach since many websites will redirect you to a login page after a few requests. Some others will show a captcha, and in the worst-case scenario, your IP will get banned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"html.parser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Web Data Automation Made Easy - ZenRows
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we load statically from a file, we can test as many times as possible without any networking or blocking problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explore-before%C2%A0coding"&gt;
  &lt;/a&gt;
  Explore before Coding
&lt;/h2&gt;

&lt;p&gt;Before we start coding, we have to understand the page's content and structure. For that, the easier way we know is to inspect the target page using a browser. &lt;em&gt;We will be using Chrome's DevTools, but other browsers have similar tools.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can open any product page on Amazon, for example, and a quick look will show us the product's name, price, availability, and many other fields. Before copying all those selectors, we recommend taking a couple of minutes to look for hidden inputs, metadata, and network requests.&lt;/p&gt;

&lt;p&gt;Beware of doing this with Chrome DevTools or similar means. You will see the content once the Javascript and network requests have (maybe) modified it. It is tiresome, but sometimes we must explore the original HTML to avoid running Javascript. We won't need to run a headless browser - i.e., Puppeteer - if we find everything, saving time and memory consumption.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: we won't include the URL request in the code snippets for every example. They all look like the first one. And remember, store an HTML file locally if you are going to test it several times.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hidden-inputs"&gt;
  &lt;/a&gt;
  Hidden Inputs
&lt;/h3&gt;

&lt;p&gt;Hidden inputs allow developers to include input fields that end-users cannot see nor modify. Many forms use these to include internal IDs or security tokens.&lt;/p&gt;

&lt;p&gt;In  &lt;a href="https://www.amazon.com/dp/B08F7PTF54"&gt;Amazon products&lt;/a&gt; , we can see that there are many more. Some will be available in other places or formats, but sometimes they are unique. Either way, hidden inputs' names tend to be more stable than classes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_RqZ1Wb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yorwy1i8enylbpffuwte.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_RqZ1Wb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yorwy1i8enylbpffuwte.png" alt="Hidden Inputs on Amazon Products"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metadata"&gt;
  &lt;/a&gt;
  Metadata
&lt;/h3&gt;

&lt;p&gt;While some content is visible via UI, it might be easier to extract using metadata. You can get view count in numeric format and publish date in YYYY-mm-dd format in a  &lt;a href="https://www.youtube.com/watch?v=tmNXKqeUtJM"&gt;YouTube video&lt;/a&gt; . Those two can be obtained with means from the visible part, but there is no need. Spending a few minutes doing these techniques pays off.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;interactionCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'meta'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"interactionCount"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interactionCount&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# 8566042 
&lt;/span&gt;
&lt;span class="n"&gt;datePublished&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'meta'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"datePublished"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datePublished&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# 2014-01-09
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#xhr-requests"&gt;
  &lt;/a&gt;
  XHR Requests
&lt;/h3&gt;

&lt;p&gt;Some other websites decide to load an empty template and bring all the data via XHR requests. In those cases, checking just the original HTML won't be enough. We need to inspect the networking, specifically the XHR requests.&lt;/p&gt;

&lt;p&gt;That's the case for  &lt;a href="https://www.auction.com/"&gt;Auction&lt;/a&gt; . Fill the form with any city and search. That will redirect you to a results page with a skeleton page while it performs some queries for the city you entered.&lt;/p&gt;

&lt;p&gt;That forces us to use a headless browser that can execute Javascript and intercept network requests, but we'll see its upsides also. Sometimes you can call the XHR endpoint directly, but they usually require cookies or other authentication methods. Or they can instantly ban you since that is not a regular user path. Be careful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--crIRBCHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoah8nepgu5ypnhle0ma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--crIRBCHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoah8nepgu5ypnhle0ma.png" alt="Auction.com XHR Requests"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We struck gold. Take another look at the image.&lt;/p&gt;

&lt;p&gt;All the data you can have, already clean and formatted, is ready to be extracted. And then some more. Geolocation, internal IDs, numerical price with no format, year built etcetera.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recipes-and-tricks-to-extract-reliable%C2%A0content"&gt;
  &lt;/a&gt;
  Recipes and Tricks to Extract Reliable Content
&lt;/h2&gt;

&lt;p&gt;Set aside your urges for a second. Getting everything with CSS selectors is an option, but there are many more. Take a look at all these, and then think again before using selectors directly. We are not saying those are bad and ours great. Don't get us wrong.&lt;/p&gt;

&lt;p&gt;We are trying to give you more tools and ideas. Then it will be your decision every time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-internal%C2%A0links"&gt;
  &lt;/a&gt;
  Getting Internal Links
&lt;/h3&gt;

&lt;p&gt;Now, we will start using BeautifulSoup to get meaningful content. This library allows us to get content by IDs, classes, pseudo-selectors, and many more. We will only cover a small subset of its capabilities.&lt;/p&gt;

&lt;p&gt;This example will extract all the internal links from the page. For simplicity's sake, only links starting with a slash will be considered internal. In a completer case, we should check domain and subdomains.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;internalLinks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;internalLinks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have all those links, we could deduplicate and queue them for future scraping. By doing it, we would be building a whole website crawler, not just for one page. Since that is an entirely different problem, we wanted to mention it and prepare a blog post to handle its usage and scalability. The number of pages to crawl can snowball.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Just a note of caution: be prudent while running this automatically. You can get hundreds of links in a few seconds, which would result in too many requests to the same site. If not handled carefully, captchas or bans will probably apply.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extracting-social-links-and%C2%A0emails"&gt;
  &lt;/a&gt;
  Extracting Social Links and Emails
&lt;/h3&gt;

&lt;p&gt;Another common scraping task is to extract social links and emails. There is no exact definition for "social links," so we'll obtain them based on domain. As for emails, there are two options: "mailto" links and checking the whole text.&lt;/p&gt;

&lt;p&gt;We will be using a  &lt;a href="https://www.webscraper.io/test-sites/e-commerce/allinone"&gt;scraping test site&lt;/a&gt;  for this demo.&lt;/p&gt;

&lt;p&gt;This first snippet will get all the links, similar to the previous one. Then loop over all of them, checking if any social domains or "mailto" are present. In that case, add that URL to the list and finally print it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
&lt;span class="n"&gt;to_extract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"facebook.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"twitter.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mailto:"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="n"&gt;social_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;social&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;to_extract&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;social&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="n"&gt;social_links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;social_links&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# ['mailto:****@webscraper.io', 
# 'https://www.facebook.com/webscraperio/', 
# 'https://twitter.com/webscraperio']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This second one is a bit more tricky if you are not familiar with regular expressions. In short, they will try to match any text given a search pattern.&lt;/p&gt;

&lt;p&gt;In this case, it will try to match some characters (mainly letters and numbers), followed by [@], then again chars - the domain - [dot] and finally two to four characters - Internet top-level domains or TLD. It will find, for example, &lt;code&gt;test@example.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that this regex is not a complete one because it won't match composed TLDs such as &lt;code&gt;co.uk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can run this expression in the entire content (HTML) or just the text. We use the HTML for completion, although we will duplicate the email since it's shown in the text and an href.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;emails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
    &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ['****@webscraper.io', '****@webscraper.io']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parse-tables-automatically"&gt;
  &lt;/a&gt;
  Parse Tables Automatically
&lt;/h3&gt;

&lt;p&gt;HTML tables have been around forever, but they are still in use for displaying tabular content. We can take advantage of that since they are usually structured and well-formatted.&lt;/p&gt;

&lt;p&gt;Using  &lt;a href="https://en.wikipedia.org/wiki/List_of_best-selling_albums"&gt;Wikipedia's List of best-selling albums&lt;/a&gt;  as an example, we will extract all the values to an array and a pandas dataframe. It is a simple example, but you should manipulate all the data as if it came from a dataset.&lt;/p&gt;

&lt;p&gt;We start by finding a table and looping through all the rows ("tr"). For each of them, find cells ("td" or "th"). The following lines will remove notes and collapsible content from Wikipedia tables, not strictly necessary. Then, append the cell's stripped text to the row and the row to the final output. Print the result to check that everything looks fine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"table"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"sortable"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tr"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;new_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"td"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"th"&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt; 
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sup&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'sup'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
            &lt;span class="n"&gt;sup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;collapsible&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
                &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mw-collapsible-content"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
            &lt;span class="n"&gt;collapsible&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="n"&gt;new_row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# [ 
#     ['Artist', 'Album', 'Released', ...], 
#     ['Michael Jackson', 'Thriller', '1982', ...] 
# ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another way is to use &lt;code&gt;pandas&lt;/code&gt; and import directly the HTML, as shown below. It will handle everything for us: the first line will match the headers, and the rest will be inserted as content with the right type. &lt;code&gt;read_html&lt;/code&gt; returns an array, so we take the first item and then remove a column that has no content.&lt;/p&gt;

&lt;p&gt;Once into a dataframe, we could do any operation, like ordering by sales, since pandas converted some columns to numbers. Or sum all the claim sales. Not truly useful here, but you get the idea.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt; 

&lt;span class="n"&gt;table_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="n"&gt;table_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table_df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Ref(s)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ['Artist', 'Album', 'Released' ... 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtypes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ... Released int64 ... 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Claimed sales*'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# 422 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
&lt;span class="c1"&gt;# Artist                     Pink Floyd 
# Album                      The Dark Side of the Moon 
# Released                   1973 
# Genre                      Progressive rock 
# Total certified copies...  24.4 
# Claimed sales*             45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extract-from-metadata-instead-of%C2%A0html"&gt;
  &lt;/a&gt;
  Extract from Metadata instead of HTML
&lt;/h3&gt;

&lt;p&gt;As seen before, there are ways to get essential data without relying on visual content. Let's see an example using  &lt;a href="https://www.netflix.com/title/80189685"&gt;Netflix's The Witcher&lt;/a&gt; . We'll try to get the actors. Easy, right? A one-liner will do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;actors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"item-starring"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
    &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title-data-info-item-list"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="c1"&gt;# ['Henry Cavill', 'Anya Chalotra', 'Freya Allan']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What if I told you that there are fourteen actors and actresses? Will you try to get 'em all? Do not scroll further if you want to try it by yourself. I'll wait.&lt;/p&gt;

&lt;p&gt;Nothing yet? Remember, there's more than meets the eye. You know three of them; search for those in the original HTML. To be honest, there's another place down below that shows the whole cast, but try to avoid it.&lt;/p&gt;

&lt;p&gt;Netflix includes a Schema.org snippet with the actor and actress list and many other data. As with the YouTube example, sometimes it is more convenient to use this approach. Dates, for example, are usually displayed in "machine-like" format, which is more helpful while scraping.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oEYF3NmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiel0o92th01fd90c4sw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oEYF3NmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiel0o92th01fd90c4sw.png" alt="Netflix Schema"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt; 

&lt;span class="n"&gt;ldJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"script"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"application/ld+json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;parsedJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ldJson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;actor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;actor&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;parsedJson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'actors'&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; 
&lt;span class="c1"&gt;# [... 'Jodhi May', 'MyAnna Buring', 'Joey Batey' ...]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some other times this is a practical approach if we don't want to render Javascript. We'll show an example using  &lt;a href="https://www.instagram.com/billieeilish/"&gt;Instagram Billie Eilish's profile&lt;/a&gt; . They are known blockers. After visiting a few pages, you will be redirected to a login page. Be careful while scraping Instagram and use local HTML for testing.&lt;/p&gt;

&lt;p&gt;We'll cover how to avoid those blocks or redirects in a future post. Stay tuned!&lt;/p&gt;

&lt;p&gt;The usual way would be to search for a class, in our case "Y8-fY". We advise against using these classes since they will probably change. They look autogenerated. Many modern websites use this kind of CSS, and it gets generated for every change, which means that we cannot rely on them.&lt;/p&gt;

&lt;p&gt;Plan B: &lt;code&gt;"header ul &amp;gt; li"&lt;/code&gt;, right? It will work. But we need Javascript rendering for that since it is not present on the first load. As stated before, we should try to avoid that.&lt;/p&gt;

&lt;p&gt;Take a look at the source HTML: title and description include followers, following, and post numbers. It might be a problem since they are in string format, but we can get over it. If we only want that data, we won't need a headless browser. Great!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;metaDescription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"meta"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'description'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaDescription&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
&lt;span class="c1"&gt;# 87.9m Followers, 0 Following, 493 Posts ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hidden-ecommerce-product-information"&gt;
  &lt;/a&gt;
  Hidden eCommerce Product Information
&lt;/h3&gt;

&lt;p&gt;Combining some of the techniques already seen, we aim to extract product information that is not visible. Our first example is a Shopify eCommerce,  &lt;a href="https://www.spigen.com/collections/tesla/products/tesla-model-3-ta100-sticker?variant=39270568230959"&gt;Spigen&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Take a look on your own first if you want.&lt;/p&gt;

&lt;p&gt;Hint: look for the brand 🤐.&lt;/p&gt;

&lt;p&gt;We'll be able to extract it reliably, not from the product name nor the breadcrumbs, since we cannot say if they are always related.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1hEQiTFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5x58w4pa839j5rswi4v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1hEQiTFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5x58w4pa839j5rswi4v.png" alt="Spigen Schema Metadata"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Did you find them? In this case, they use "itemprop" and include Product and Offer from schema.org. We could probably tell if a product is in stock by looking at the form or the "Add to cart" button. But there is no need, we can trust on &lt;code&gt;itemprop="availability"&lt;/code&gt;. As for the brand, the same snippet as the one used for YouTube but changing the property name to "brand."&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;brand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'meta'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"brand"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Tesla
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another Shopify example:  &lt;a href="https://nomz.com/collections/energy-bites/products/gift-box?variant=31459597090948"&gt;nomz&lt;/a&gt; . We want to extract the rating count and average, accessible in the HTML but somewhat hidden. The average rating is hidden from view using CSS.&lt;/p&gt;

&lt;p&gt;There's a screen reader only tag with the average and the count near it. Those two include text, not a big deal. But we know we can do better.&lt;/p&gt;

&lt;p&gt;It is an easy one if you inspect the source. The Product schema will be the first thing you see. Applying the same knowledge from the Netflix example, get the first "ld+json" block, parse the JSON, and all the content will be available!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;ldJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"script"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"application/ld+json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parsedJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ldJson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsedJson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"aggregateRating"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"ratingValue"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# 4.9
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsedJson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"aggregateRating"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"reviewCount"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# 57
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsedJson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"weight"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# 0.492kg -&amp;gt; extra, not visible in UI
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last but not least, we will take advantage of data attributes, which are also common in eCommerce. While inspecting  &lt;a href="https://maruccisports.com/wood-bats/"&gt;Marucci Sports Wood Bats&lt;/a&gt; , we can see that every product has several data points that will come in handy. Price in numeric format, ID, product name, and category. We have there all the data we might need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 
&lt;span class="n"&gt;cards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cards&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
        &lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'data-entity-id'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
        &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'data-name'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
        &lt;span class="s"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'data-product-category'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
        &lt;span class="s"&gt;'price'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'data-product-price'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;})&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# [ 
#    { 
#         "category": "Wood Bats, Wood Bats/Professional Cuts", 
#         "id": "1945", 
#         "name": "6 Bat USA Professional Cut Bundle", 
#         "price": "579.99" 
#    }, 
#    { 
#         "category": "Wood Bats, Wood Bats/Pro Model", 
#         "id": "1804", 
#          "name": "M-71 Pro Model", 
#          "price": "159.99" 
#    }, 
#    ... 
# ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remaining-obstacles"&gt;
  &lt;/a&gt;
  Remaining Obstacles
&lt;/h2&gt;

&lt;p&gt;All right! You got all the data from that page. Now you have to replicate it to a second and then a third. Scale is important. And so is not getting banned.&lt;/p&gt;

&lt;p&gt;But you also have to convert this data and store it: CSV files or databases, whatever you need. Nested fields are not easy to export to any of those formats.&lt;/p&gt;

&lt;p&gt;We already took enough of your time. Take in all this new information, use it in your everyday work. Meanwhile, we'll be working on the following guides to overcoming all these obstacles!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We'd like you to go with three lessons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;CSS selectors are good, but there are other options.&lt;/li&gt;
&lt;li&gt;Some content is hidden - or not present - but accessible via metadata.&lt;/li&gt;
&lt;li&gt;Try to avoid loading Javascript and headless browsers to boost performance.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each of these has upsides and downsides, different approaches, and many, many alternatives. Writing a complete guide would be, well, a long book, not a blog post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.zenrows.com/contact?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=mastering_scraping"&gt;Contact us&lt;/a&gt;  if you know any more website scraping tricks or have doubts about applying them.&lt;/p&gt;

&lt;p&gt;Remember, we covered scraping, but there is much more: crawling, avoiding being blocked, converting and storing the content, scaling the infrastructure, and more. Stay tuned!&lt;/p&gt;

&lt;p&gt;And if you liked the content, please share it.&lt;/p&gt;




&lt;p&gt;Originally published at  &lt;a href="https://www.zenrows.com/blog/mastering-web-scraping-in-python-from-zero-to-hero?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=mastering_scraping"&gt;https://www.zenrows.com&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My Impressions of Docker Development Containers</title>
      <author>Maina Wycliffe</author>
      <pubDate>Thu, 22 Jul 2021 13:49:54 +0000</pubDate>
      <link>https://dev.to/this-is-learning/my-impressions-of-docker-development-containers-23d4</link>
      <guid>https://dev.to/this-is-learning/my-impressions-of-docker-development-containers-23d4</guid>
      <description>&lt;p&gt;Docker development containers enable developers to set up development environment faster and consistently. With docker development containers, you can configure a container with all required tools and SDKs necessary for a project's development environment, which can easily and consistently be recreated with little to no &lt;strong&gt;hassle&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For instance, take an Angular project, this requires a few things to get started, like Typescript, NodeJS, Angular CLI, etc. This can easily be created using docker and once set up can easily be re-created on demand. As you can imagine, this can have several benefits, which we will look at later.&lt;/p&gt;

&lt;p&gt;On its own, it still leaves much to be desired though. But, a while back the Visual Studio Code team released a pack of extensions for remote development. These extensions enabled you to work with development environment hosted remotely such as docker containers, among others and continue with development workflow as you would if they were on your local PC.&lt;/p&gt;

&lt;p&gt;Combined with VS Code Remote - Container's extension, part of &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers"&gt;Visual Studio Remote extensions pack&lt;/a&gt;, which enables you to use docker as a full-fledged development environment. The Remote Container extension, provides you with tools to connect to a docker container and carry on with your development workflow on the container. &lt;/p&gt;

&lt;p&gt;On top of that, it provides tools to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate Docker Environment Configurations for different environment requirements like Typescript, Golang, etc. This allows you fine-grained control over your development environment with exactly the dependencies you need to enable your development workflow. &lt;/li&gt;
&lt;li&gt;Clone a repository directly to docker containers. You can target different branches and PRs, allowing you to have a development environment per PR if need be.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits-for-development"&gt;
  &lt;/a&gt;
  Benefits For Development
&lt;/h2&gt;

&lt;p&gt;For one, since docker containers are isolated environments, collision between different development environment dependencies is greatly reduced if not entirely eliminated. How many times have you required to have different versions of the same dependency installed, for instance NodeJS? Docker development container would eliminate such collisions entirely, reducing the need for tools such as NVM.&lt;/p&gt;

&lt;p&gt;Secondly, it is easier to onboard developers, as the development environment are already specified and it's a matter of building the containers. This makes it easy to onboard developers as they can set up their environment faster and go straight to understanding what actually matters to the organization. &lt;/p&gt;

&lt;p&gt;On top of on boarding new developers, reviewing PRs is easier, as you can easily and quickly create a new development environment per PR for review purpose. VS Code remote container extension provides you with tools to enable clone repository, branches or PRs into development containers, making this a more viable approach.&lt;/p&gt;

&lt;p&gt;Another key benefit is keeping your development environments up to date across team members becomes easier. When you come back from a vacation, with a single command, you can update your development environment making easy to continue as if you never left with little to no hinderances. &lt;/p&gt;

&lt;p&gt;Fully compatibility with GitHub Code Spaces. GitHub code spaces is a remote development environment that uses docker development containers under the hood. While still in beta and a lot could change, as of the moment of writing, they are fully compatible. This means that you can easily take your development environment on the road without needing to configure anything after the initial configuration. GitHub code spaces will provide you with all the computing power you need while on the road.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h2&gt;

&lt;p&gt;Steep learning curve. While VS Code helps to set up common development environments like NodeJS, Typescript, etc., setting a fine-grained environment will require you to understand docker and dockerfiles. This can be a barrier to people who aren't familiar to docker and adds an extra barrier to getting up to speed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we looked at Docker development containers and the benefits of using them. I am hoping that the benefits we looked at above convinced you to give docker development containers a try. &lt;/p&gt;

&lt;p&gt;If you are looking to get started, here some resources for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/remote/containers"&gt;Developing inside a Container using Visual Studio Code Remote Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/language/nodejs/develop/"&gt;Use containers for development | Docker Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/develop/"&gt;Develop with Docker | Docker Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>docker</category>
      <category>vscode</category>
      <category>tooling</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Integrate Video Conferencing API To Your Platform</title>
      <author>Sagar Kava</author>
      <pubDate>Thu, 22 Jul 2021 13:24:23 +0000</pubDate>
      <link>https://dev.to/sagarkava/how-to-integrate-video-conferencing-to-your-platform-1djm</link>
      <guid>https://dev.to/sagarkava/how-to-integrate-video-conferencing-to-your-platform-1djm</guid>
      <description>&lt;p&gt;Integrate and Embed high quality live Video conferencing API &amp;amp; SDK to your website and easy integration in just 10 minutes! Make Conversations more engaging by integrating 1-Click video platform on your web.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-video-conferencing-api"&gt;
  &lt;/a&gt;
  What are video conferencing API?
&lt;/h3&gt;

&lt;p&gt;Video conferencing API (Application Programmer’s Interface) is basically like a middle-man between a client’s web browser, and some back-end service that you build or use. An API service can read and write information to a database, for example&lt;/p&gt;

&lt;p&gt;If you are using a website that uses some kind of video conferencing, your web browser is getting your inputs, like your microphone, camera, or a stream of your desktop which can be sent through such an API to a video conferencing service. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-whats-the-purpose-of-video-conferencing-api-for-your-business-collaboration"&gt;
  &lt;/a&gt;
  So What’s the Purpose of Video conferencing API for Your Business Collaboration?
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#the-video-conferencing-api-and-offer-several-benefits-where-two-main-bonuses-are-significant"&gt;
  &lt;/a&gt;
  The video conferencing API and offer several benefits where two main bonuses are significant.
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Faster Software Delivery (Time-to-market Value)&lt;/strong&gt; : The robust APIs help businesses in creating video conference platforms with tools and infrastructure that are easy and quick to implement on cross-platforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Saves Quite a Lot of Resources&lt;/strong&gt; : With different features enabled APIs and SDKs, developers or experts can integrate any specific chat functionality on any platform with less time consumption. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#embed-video-conferencing-in-your-application-and-web-in-just-10-minutes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Embed video conferencing in your application and web in just 10 minutes!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Following our announcement on launching the pre-built in the previous blog, we are excited to deliver the manual for the same. This blog will get the readers up and running with the pre-built in no time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-embed-video-callsconferencing-prebuilt"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to embed video callsconferencing pre-built&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Embedding a video conferencing to your application becomes easy with &lt;a href="https://videosdk.live"&gt;Videosdk.live&lt;/a&gt;. With our Pre-built, you can add video conferencing on your website and application with just a few lines of code and nothing could be simpler than this. You can share URLs to the participants for the video calls and accommodate more than &lt;strong&gt;5000 people&lt;/strong&gt; over the same call.&lt;/p&gt;

&lt;p&gt;We provide you with a free set-up to experience how to use our prebuilt so you can make the best of it. We also offer you &lt;strong&gt;10,000 minutes, free every month.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prebuilt SDK enables the opportunity to integrate real-time communication SDK without writing explicit code. It supports all modern javascript frameworks such as React JS, Vue, and Angular including Vanilla JS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-get-started-follow-the-steps"&gt;
  &lt;/a&gt;
  &lt;strong&gt;To get started, follow the steps&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;For better understanding, we have divided the prebuilt setup into few steps. Each step describes the code snippet that one needs to use while constructing integrating the SDK.&lt;/p&gt;

&lt;p&gt;The prebuilt has codes that sometimes become difficult for a fresher or an inexperienced developer. In that case, one can take the help of a developer to configure the setup. In aid, you can always reach us, we provide 24/7 customer support for our clients.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-calls-with-videosdklive-offer-users-amazing-features-with-quality-as-our-prior-most-concern"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Video calls with Videosdk.live offer users amazing features with quality as our prior most concern.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;10,000 minutes free each month&lt;/li&gt;
&lt;li&gt;Participant capacity up to 5,000&lt;/li&gt;
&lt;li&gt;End-to-end encrypted calls&lt;/li&gt;
&lt;li&gt;HIPAA Compliance in enterprise mode&lt;/li&gt;
&lt;li&gt;HD and Full HD Video calls&lt;/li&gt;
&lt;li&gt;Audio support of 16kHz to 48kHz&lt;/li&gt;
&lt;li&gt;360 Spatial Audio&lt;/li&gt;
&lt;li&gt;Intelligence Active Speaker Switch&lt;/li&gt;
&lt;li&gt;Real-time messaging&lt;/li&gt;
&lt;li&gt;Cloud recording&lt;/li&gt;
&lt;li&gt;Whiteboard and poll support&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's begin with the prebuilt setup. Read all the steps carefully before installing one in your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-generate-access-token-in-node-js"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 0:&lt;/strong&gt; Generate access token in Node JS
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Access token generation (server-side code)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An access token is required to authenticate with Videosdk and make any API calls. You can generate one with the _ &lt;strong&gt;API key&lt;/strong&gt; _ and _ &lt;strong&gt;secret&lt;/strong&gt; _ mentioned in your developer portal at the Videosdk console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");
const jwt = require("jsonwebtoken");
const cors = require("cors");
const request = require("request");

const app = express();
const port = 9000;
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.get("/get-token", (req, res) =&amp;gt; {
  const API_KEY = process.env.ZUJONOW_API_KEY;
  const SECRET_KEY = process.env.ZUJONOW_SECRET_KEY;
  const options = { expiresIn: "10m", algorithm: "HS256" };
  const payload = {
    apikey: API_KEY,
    permissions: ["allow_join", "allow_mod", "ask_join"], // Trigger permission.
  };
  const token = jwt.sign(payload, SECRET_KEY, options);
  res.json({ token });
});

app.listen(port, () =&amp;gt; {
  console.log(`Example app listening at http://localhost:${port}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://docs.videosdk.live/docs/tutorials/realtime-communication/prebuilt-sdk/quickstart-prebuilt-js"&gt;Documentation&lt;/a&gt;&lt;br&gt;
The available permissions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;_ &lt;strong&gt;allow_join&lt;/strong&gt; _: A participant will be permitted entry without request&lt;/li&gt;
&lt;li&gt;_ &lt;strong&gt;ask_join&lt;/strong&gt; _: A participant will not be permitted entry without request&lt;/li&gt;
&lt;li&gt;_ &lt;strong&gt;allow_mod&lt;/strong&gt; _: Allow participant to enable/disable other participant’s mic/ webcam&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The generated token must be sent in the _ &lt;strong&gt;Authorization&lt;/strong&gt; _ header for all API calls and it should also be used with the &lt;strong&gt;ZujoSDK.config(token&lt;/strong&gt;) method.&lt;/p&gt;

&lt;p&gt;After the initial step of access token generation, one reaches the next or the first step, creating or joining the meeting.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1-create-or-join-the-meeting"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 1: Create or join the meeting&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Get a meeting ID for a new meeting or validate an existing meeting ID to join a meeting. Below mentioned are two code snippets, where one is for a new meeting and the other one is for an existing meeting for joining.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a new meeting ID&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.post("/create-meeting/", (req, res) =&amp;gt; {
  const token = req.body.token;
  const ZUJONOW_API_ENDPOINT = `${ZUJONOW_API_ENDPOINT}/api/meetings`;

  const options = {
    method: "POST",
    headers: {
      Authorization: token,
    },
  };

  fetch(ZUJONOW_API_ENDPOINT, options)
    .then((response) =&amp;gt; response.json())
    .then((result) =&amp;gt; res.json(result)) // result will contain meetingId
    .catch((error) =&amp;gt; throw error);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Validate existing meeting ID for joining&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get("/validate-meeting/:token", (req, res) =&amp;gt; {
  const token = req.params.token;
  const ZUJONOW_API_ENDPOINT = `${ZUJONOW_API_ENDPOINT}/api/meetings`;

  const options = {
    method: "POST",
    headers: {
      Authorization: token,
    },
  };

  fetch(ZUJONOW_API_ENDPOINT, options)
    .then((response) =&amp;gt; response.json())
    .then((result) =&amp;gt; res.json(result)) // result will contain meetingId
    .catch((error) =&amp;gt; throw error);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://docs.videosdk.live/docs/tutorials/realtime-communication/prebuilt-sdk/quickstart-prebuilt-js"&gt;Documentation&lt;/a&gt;&lt;br&gt;
These two code snippets are the initial ones taking you further to the next part of the prebuilt, where you need to install the prebuilt in the web application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Install prebuilt SDK in your Web app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One can install the prebuilt in your application by using either the &lt;strong&gt;script&lt;/strong&gt; or the &lt;strong&gt;npm package manager.&lt;/strong&gt; Please use the installation method suitable for your project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up prebuilt SDK using&lt;/strong&gt; _ &lt;strong&gt;&lt;/strong&gt; _&lt;/p&gt;

&lt;p&gt;The easiest way to get started is by just adding our prebuilt script to your website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://sdk.videosdk.live/embedded/index.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up prebuilt SDK using NPM package manager&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another way is by installing _ &lt;strong&gt;@videosdk.live/js-prebuilt&lt;/strong&gt; _ in your app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @videosdk.live/js-prebuilt

#OR#

yarn add @videosdk.live/js-prebuilt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Heading towards the final steps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Add script into your application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Initialize _ &lt;strong&gt;VideoSDKMeeting&lt;/strong&gt; _ on the page where you want to start the meeting&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const videoMeeting = new VideoSDKMeeting();

const videoMeetingSpecs = {
  micEnabled: true,
  webcamEnabled: true,
  name: "/* NAME OF PARTICIPANT */",
  meetingId: "/* MEETING ID */",
  redirectOnLeave: "/* REDIRECT ON LEAVE */",
  chatEnabled: true,
  screenShareEnabled: true,
  pollEnabled: true,
  whiteBoardEnabled: true,
  participantCanToggleSelfWebcam: true,
  participantCanToggleSelfMic: true,
  raiseHandEnabled: true,
  token: "/* YOUR TOKEN */",
  containerId: null,
};

videoMeeting.init(videoMeetingSpecs);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just copy the script and paste it into your application on the page where you want the meeting to take place.&lt;/p&gt;

&lt;p&gt;Hold on! There is one final step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Run the Application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once call _ &lt;strong&gt;init&lt;/strong&gt; _ and run the application, you will be able to see the meeting screen.&lt;/p&gt;

&lt;p&gt;Run the application with the prebuilt. Here is the video call API on your application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That’s it. You made it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send the invite code to the participants or just open the same page in multiple tabs to join the meeting and appreciate yourself investing time on worthwhile goals.&lt;/p&gt;

&lt;p&gt;Connect with us. We are happy to serve you!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#find-our-documentation-here-documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Find our documentation here:&lt;/strong&gt;  &lt;strong&gt;&lt;a href="https://docs.videosdk.live/docs/tutorials/realtime-communication/prebuilt-sdk/quickstart-prebuilt-js"&gt;Documentation&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Quickstart for Prebuilt JS | videosdk.live Documentation&lt;/p&gt;

&lt;p&gt;videosdk.live tutorials will help you to deep dive into details of all the SDK and API. We tried to include example of all the possible programming langaguges.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-10000-minutes-free-every-month"&gt;
  &lt;/a&gt;
  🚀Get 10,000 minutes free every month🚀
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J2lZAuF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://blog.videosdk.live/content/images/2021/07/Untitled-design--7--1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J2lZAuF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://blog.videosdk.live/content/images/2021/07/Untitled-design--7--1.gif" alt="Launching: Prebuilt Video SDK for developers 1.0"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
      <category>chat</category>
    </item>
    <item>
      <title>NATO Condemns Cyberattack, Pegasus Cyber Espionage Tool, Steam’s New Console, &amp; more on DevNews!</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 22 Jul 2021 13:23:44 +0000</pubDate>
      <link>https://dev.to/devteam/nato-condemns-cyberattack-pegasus-cyber-espionage-tool-steam-s-new-console-more-on-devnews-kjb</link>
      <guid>https://dev.to/devteam/nato-condemns-cyberattack-pegasus-cyber-espionage-tool-steam-s-new-console-more-on-devnews-kjb</guid>
      <description>&lt;p&gt;Season 5 of the DevNews podcast is here!&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s5-e1-pegasus-cyber-espionage-tool-steam-s-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S5:E1 - Pegasus Cyber Espionage Tool, Steam’s New Console, Gunshot-Detecting Tech, and NATO Condemns a Cyberattack&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s5-e1-pegasus-cyber-espionage-tool-steam-s-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s5-e1-pegasus-cyber-espionage-tool-steam-s-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s5-e1-pegasus-cyber-espionage-tool-steam-s-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s5-e1-pegasus-cyber-espionage-tool-steam-s-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s5-e1-pegasus-cyber-espionage-tool-steam-s-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s5-e1-pegasus-cyber-espionage-tool-steam-s-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack"&gt;
      &lt;img id="episode-profile-image" alt="S5:E1 - Pegasus Cyber Espionage Tool, Steam’s New Console, Gunshot-Detecting Tech, and NATO Condemns a Cyberattack" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/joshpuetz"&gt;@joshpuetz&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guest:&lt;/strong&gt; &lt;a href="https://twitter.com/marcusjcarey"&gt;Marcus Carey&lt;/a&gt;, Enterprise Architect @ ReliaQuest &lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; &lt;em&gt;— or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s5-e1-pegasus-cyber-espionage-tool-steams-new-console/id1525581923?i=1000529678334"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/78vzczaR9YWT1b2b3c4dkJ"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzMz?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjY1ebY4vbxAhUAAAAAHQAAAAAQCA"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s5-e1-pegasus-cyber-espionage-tool-steams-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack-85594899"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews-dev-fH8hvsClkWp/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=164637671"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/174"&gt;DEV Pods website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  &lt;em&gt;Acknowledgements&lt;/em&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Our season five sponsor, &lt;a href="https://scoutapm.com/devnews"&gt;Scout APM&lt;/a&gt; ❤️ &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoy the season premiere of DevNews!&lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>How to Hide Some Chat Messages for Certain Users in a TalkJS Chat</title>
      <author>Sapnesh Naik</author>
      <pubDate>Thu, 22 Jul 2021 13:22:22 +0000</pubDate>
      <link>https://dev.to/talkjs/how-to-hide-some-chat-messages-for-certain-users-in-a-talkjs-chat-23g4</link>
      <guid>https://dev.to/talkjs/how-to-hide-some-chat-messages-for-certain-users-in-a-talkjs-chat-23g4</guid>
      <description>&lt;p&gt;In this tutorial, we’ll learn how to hide specific chat messages for users using the &lt;a href="https://talkjs.com"&gt;TalkJS Chat API&lt;/a&gt; message filters. We will also learn how to combine TalkJS custom message attributes with message filters to implement a wide variety of use cases for filtering chat messages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-message-filters"&gt;
  &lt;/a&gt;
  What Are Message Filters?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://talkjs.com/docs/Reference/JavaScript_Chat_SDK/Chatbox.html#Chatbox.setMessageFilter"&gt;TalkJs message filters&lt;/a&gt; are used to control which messages show up in the Chatbox UI. You can filter messages based on type, origin, sender, and custom attributes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Messages are only filtered in the message list (Chatbox UI). The inbox UI's conversation feed will always show the last message sent to the conversation, regardless of the message filter set.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-message-filters-in-a-chat-ui"&gt;
  &lt;/a&gt;
  Applying Message Filters in a Chat UI
&lt;/h2&gt;

&lt;p&gt;To apply filters to a Chatbox, use the &lt;a href="https://talkjs.com/docs/Reference/JavaScript_Chat_SDK/Chatbox.html#Chatbox.setMessageFilter"&gt;setMessageFilter&lt;/a&gt; method and pass a &lt;a href="https://talkjs.com/docs/Reference/JavaScript_Chat_SDK/Other_interfaces.html#MessagePredicate"&gt;MessagePredicate&lt;/a&gt; to apply filters based on Custom attributes, sender, origin, and type. &lt;/p&gt;

&lt;p&gt;Let’s see different examples of filters that can be applied in a Chat UI using a simple Vanilla Js implementation of TalkJS Chatbox. Here, we create a &lt;a href="https://talkjs.com/docs/Reference/JavaScript_Chat_SDK/User.html"&gt;TalkJs user&lt;/a&gt; and bind that user object to a new &lt;a href="https://talkjs.com/docs/Reference/JavaScript_Chat_SDK/Chatbox.html"&gt;Chatbox&lt;/a&gt; instance using the &lt;a href="https://talkjs.com/docs/Reference/JavaScript_Chat_SDK/Session.html"&gt;TalkJs session&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that, apart from plain JavaScript, TalkJs SDK supports Vue, Angular, and React. And the API will be the same across these frameworks. You can check out our &lt;a href="https://talkjs.com/docs/"&gt;docs&lt;/a&gt; for more information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    Talk.ready.then(function() {
        var me = new Talk.User({
            id: "333333",
            name: "Chris Pratt",
            email: "chris@example.com",
            photoUrl: "https://i.picsum.photos/id/1025/4951/3301.jpg?hmac=_aGh5AtoOChip_iaMo8ZvvytfEojcgqbCH7dzaz-H8Y",
            welcomeMessage: "Hey there! How are you? :-)",
            role: "Accountant"
        });

  window.talkSession = new Talk.Session({
            appId: "&amp;lt;appID&amp;gt;",
            me: me
        });

        var chatbox = talkSession.createChatbox();
        chatbox.mount(document.getElementById("talkjs-container"));
    });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NnpR1El2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/wzK5GUa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NnpR1El2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/wzK5GUa.png" alt="Demo Image" title="image_tooltip"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fig: Demo VanillaJS application&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#only-showing-text-messages"&gt;
  &lt;/a&gt;
  Only Showing Text Messages
&lt;/h3&gt;

&lt;p&gt;A chat can contain text messages, attachments, and locations. To show only text messages in a Chat, you can first add a custom attribute to every message sent using the &lt;strong&gt;&lt;a href="https://talkjs.com/docs/Reference/JavaScript_Chat_SDK/Chatbox.html#Chatbox.on__sendMessage__"&gt;on("sendMessage")&lt;/a&gt;&lt;/strong&gt; method.&lt;/p&gt;

&lt;p&gt;Specifically, we’re adding a custom attribute named “textMessage” to every message sent except for attachments. The value of the custom attribute does not matter here as we’ll not be using it. We just need to have the custom attribute present for all text messages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chatbox.on("sendMessage", function(ev) {
    if (!ev.message.attachment) {
        ev.override({
            custom: {
                textMessage: "true"
            }
        });
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, to show only text messages in a Chatbox, simply filter out messages with the “textMessage'' custom attribute set using the “exists'' check. As an example, I’m adding the filter on the click of a button here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById('filterTextMessages').onclick = function filter() {
    chatbox.setMessageFilter({
        custom: {
            textMessage: "exists"
        }
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HItNrvVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/djygaZq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HItNrvVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/djygaZq.gif" alt="Show only text messages" title="Show only text messages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#only-showing-messages-with-attachments"&gt;
  &lt;/a&gt;
  Only Showing Messages with Attachments
&lt;/h3&gt;

&lt;p&gt;We can use the same custom “textMessage” attribute, but with “!exists” check and filter out just the attachments. This filter will omit all messages with the “textMessage” attribute present, leaving us with only those messages with attachments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById('filterAttachments').onclick = function filter() {
    chatbox.setMessageFilter({
        custom: {
            textMessage: "!exists"
        }
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pSa63cge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/eWFhbvW.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pSa63cge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/eWFhbvW.gif" alt="Show only attachments" title="Show only attachments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#only-showing-admin-messages-filter-based-on-senders-role"&gt;
  &lt;/a&gt;
  Only Showing Admin Messages (Filter Based on Sender's Role)
&lt;/h3&gt;

&lt;p&gt;Every TalkJS user has a role assigned to them during creation, and you can filter the messages based on this role using the “sender” FieldPredicate.&lt;/p&gt;

&lt;p&gt;Let’s take an example and show only those messages sent by users with the role “Admin.”&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById('showAdminMessages').onclick = function filter() {
    chatbox.setMessageFilter({sender: {role: ["==", "Admin"]}})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jgfpRSJe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/okPSixh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jgfpRSJe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/okPSixh.gif" alt="Show only admin messages" title="Show only admin messages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filtering-out-messages-from-banned-users"&gt;
  &lt;/a&gt;
  Filtering out Messages from Banned Users
&lt;/h3&gt;

&lt;p&gt;In your chat application, you will sometimes need to block or filter messages from banned users for various reasons. You can change the user’s role to “Banned” and then filter out messages in a chatbox based on the Sender role.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var me = new Talk.User({
    id: "154721",
    name: "Matt Wong ",
    email: "mattwong@example.com",
    photoUrl: "https://picsum.photos/id/237/200/300",
    welcomeMessage: "Hey there! How are you? :-)",
    role: "Banned",
});

document.getElementById('hideBannerUserMessages').onclick = function banned() {
    chatbox.setMessageFilter({
        sender: {
            role: ["!=", "Banned"]
        }
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---h8QbM-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/T29u2I8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---h8QbM-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/T29u2I8.gif" alt="Hide messages from banned users" title="Hide messages from banned users"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reset-filters"&gt;
  &lt;/a&gt;
  Reset Filters
&lt;/h3&gt;

&lt;p&gt;Finally, to reset or remove all filters, just call the setMessageFilter method again and pass NULL; this should clear all current filters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById('resetFilters').onclick = function reset() {
    chatbox.setMessageFilter(null)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run into any issues, please get in touch via the popup on &lt;a href="https://talkjs.com/"&gt;our website&lt;/a&gt; or send an email to &lt;a href="//mailto:dev@talkjs.com"&gt;dev@talkjs.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>talkjs</category>
      <category>talkjsfilters</category>
    </item>
    <item>
      <title>5 High-Paying Tech Jobs That Don't Require Coding</title>
      <author>Esther Agbaje</author>
      <pubDate>Thu, 22 Jul 2021 13:19:11 +0000</pubDate>
      <link>https://dev.to/estheragbaje/5-high-paying-tech-jobs-that-don-t-require-coding-5eao</link>
      <guid>https://dev.to/estheragbaje/5-high-paying-tech-jobs-that-don-t-require-coding-5eao</guid>
      <description>&lt;p&gt;Do you feel discouraged from pursuing a career in tech because you don't know how to code?&lt;/p&gt;

&lt;p&gt;Quite frankly, learning to code is hard and not for everyone. &lt;/p&gt;

&lt;p&gt;While programming jobs are common, &lt;strong&gt;there are also high-paying tech jobs that DON'T require you to code&lt;/strong&gt; 💃💃💃 .&lt;/p&gt;

&lt;p&gt;If you're considering a no-code tech career, this post is for you...keep reading!&lt;/p&gt;

&lt;p&gt;The skills needed for some of these roles range from writing to design, user research, people management, etc. &lt;/p&gt;

&lt;p&gt;In this article, we'll deep dive into what these roles and highlight:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Their average annual salary &lt;/li&gt;
&lt;li&gt;The role and job descriptions&lt;/li&gt;
&lt;li&gt;A key success metric&lt;/li&gt;
&lt;li&gt;Useful resources for newbies&lt;/li&gt;
&lt;li&gt;Recommendations for getting a job&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's do this!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-user-interface-designer"&gt;
  &lt;/a&gt;
  1. User Interface Designer
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#average-annual-salary-64543"&gt;
  &lt;/a&gt;
  Average Annual Salary: &lt;a href="https://www.payscale.com/research/US/Job=User_Interface_Designer/Salary"&gt;$64,543&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---oKoxzm4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07cyghqrb7b8ddfoi7gf.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---oKoxzm4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07cyghqrb7b8ddfoi7gf.jpeg" alt="UI Design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#role-amp-description"&gt;
  &lt;/a&gt;
  Role &amp;amp; Description
&lt;/h3&gt;

&lt;p&gt;User Interface (UI) Design is one of the fastest-growing career in the tech space. UI designers play an essential role when building any digital product. Lots of companies out there are looking to build their next digital solution and are in need of UI designers.&lt;/p&gt;

&lt;p&gt;User Interface (UI) Designers are responsible for creating the visual elements for web applications and websites.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The primary role of a UI designer is to design all the screens users see and interact with.&lt;/strong&gt; They leverage various visual elements such as icons, colors, buttons, typography, layout, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are typical job descriptions of UI designers:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Execute all visual designs from concept to final hand-off to the engineering team.&lt;/li&gt;
&lt;li&gt;Create prototypes for new product ideas.&lt;/li&gt;
&lt;li&gt;Present and defend designs and key milestone deliverables to peers and executive level stakeholders.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#success-metric"&gt;
  &lt;/a&gt;
  Success Metric
&lt;/h3&gt;

&lt;p&gt;A major success metric for this role is to ensure user interactions are intuitive, delightful, and efficient. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-ui-design-resources"&gt;
  &lt;/a&gt;
  Useful UI Design Resources:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learnui.design/"&gt;Learn UI Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/ui-design"&gt;Introduction to UI Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://careerfoundry.com/en/blog/ui-design/how-to-become-a-ui-designer/"&gt;How to Become a UI Designer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-user-experience-designer"&gt;
  &lt;/a&gt;
  2. User Experience Designer
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#average-annual-salary-74568"&gt;
  &lt;/a&gt;
  Average Annual Salary: &lt;a href="https://www.payscale.com/research/US/Job=UX_Designer/Salary/fea1a08d/User-Experience-UX-Design"&gt;$74,568&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kLcTiQ4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ftxkl3jscdogau2xz51.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kLcTiQ4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ftxkl3jscdogau2xz51.jpeg" alt="UX Designer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#role-amp-description"&gt;
  &lt;/a&gt;
  Role &amp;amp; Description
&lt;/h3&gt;

&lt;p&gt;Unlike UI design, User Experience(UX) design is not focused primarily on visuals. It centers on improving the quality of interaction between a user and the product. &lt;strong&gt;UX designers carry out detailed user research to ensure a user gets an optimal experience when using the digital product.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Here are typical job descriptions of UX designers: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Carry out user research&lt;/li&gt;
&lt;li&gt;Consult with clients to understand their goals and explaining research results&lt;/li&gt;
&lt;li&gt;Conduct usability testing&lt;/li&gt;
&lt;li&gt;Create wireframes, storyboards, sitemaps, and screen flows&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#success-metric"&gt;
  &lt;/a&gt;
  Success Metric
&lt;/h3&gt;

&lt;p&gt;Customer satisfaction is a great way to measure the quality of the user experience provided by your product. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#useful-ux-design-resources"&gt;
  &lt;/a&gt;
  Useful UX Design Resources:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learnui.design/courses/learn-ux-design.html"&gt;Learn UX Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.interaction-design.org/courses"&gt;Learn about UX Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://careerfoundry.com/en/blog/ux-design/how-to-learn-to-be-a-ux-designer/"&gt;How to be a UX Designer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://uxplanet.org/top-10-online-platforms-to-learn-ui-ux-design-dcfb613d097a"&gt;Learn UI/UX Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-product-manager"&gt;
  &lt;/a&gt;
  3. Product Manager
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#average-annual-salary-98468"&gt;
  &lt;/a&gt;
  Average Annual Salary: &lt;a href="https://www.payscale.com/research/US/Job=Product_Manager%2C_Software/Salary"&gt;$98,468&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mKwBCDza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onj02j9m0nzpdc3r3gg0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mKwBCDza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onj02j9m0nzpdc3r3gg0.png" alt="Product Management"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#role-amp-description"&gt;
  &lt;/a&gt;
  Role &amp;amp; Description
&lt;/h3&gt;

&lt;p&gt;Companies stay relevant by creating products that delight users. &lt;strong&gt;The core vision of a product manager is to launch features that make users remain happy and satisfied with the product.&lt;/strong&gt; They define the product vision, understand the business and customer requirements, and work closely with Engineers and Designers to fulfill this vision.&lt;/p&gt;

&lt;p&gt;Common job descriptions of Product Managers include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understand and represent user needs.&lt;/li&gt;
&lt;li&gt;Monitor the market and develop competitive analyses.&lt;/li&gt;
&lt;li&gt;Define a vision for a product.&lt;/li&gt;
&lt;li&gt;Prioritize product features and capabilities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#success-metric"&gt;
  &lt;/a&gt;
  Success Metric
&lt;/h3&gt;

&lt;p&gt;A good way to measure success as a Product Manager is using the customer retention rate of your product. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-product-management-resources"&gt;
  &lt;/a&gt;
  Useful Product Management Resources:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.udacity.com/course/product-manager-nanodegree--nd036"&gt;Udacity Product Management Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC6hlQ0x6kPbAGjYkoz53cvA"&gt;Product School&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.crackingthepminterview.com/"&gt;Cracking the PM Interview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-technical-writer"&gt;
  &lt;/a&gt;
  4. Technical Writer
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#average-annual-salary-61211"&gt;
  &lt;/a&gt;
  Average Annual Salary: &lt;a href="https://www.payscale.com/research/US/Job=Technical_Writer/Salary"&gt;$61,211&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j6RnBlfy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wycbwph1qvyi689drah.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j6RnBlfy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wycbwph1qvyi689drah.jpeg" alt="Technical Writing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you love to break complex ideas into easy-to-understand and straightforward content, then Technical Writing is an excellent role for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical Writers are responsible for creating documentation, instruction manuals, and educational materials.&lt;/strong&gt; They ensure technical "jargon" is communicated in simple terms to their audience. &lt;/p&gt;

&lt;p&gt;Their audience could range from customers, developers, managers, or even technicians.  &lt;/p&gt;

&lt;p&gt;Common job descriptions of Technical writers include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Work with internal teams to obtain an in-depth understanding of the product and the documentation requirements.&lt;/li&gt;
&lt;li&gt;Produce high-quality documentation that meets applicable standards and is appropriate for its intended audience.&lt;/li&gt;
&lt;li&gt;Create tutorials to help end-users use a variety of applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#success-metric"&gt;
  &lt;/a&gt;
  Success Metric
&lt;/h4&gt;

&lt;p&gt;You are a successful Technical Writer if you produce content that's easy to understand, engaging, and logically categorized to draw reader interest. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#useful-technical-writing-resources"&gt;
  &lt;/a&gt;
  Useful Technical Writing Resources:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/technical-writing-is-easy/how-to-learn-technical-writing-for-free-c16d191b3cee"&gt;How to learn Technical Writing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/tech-writing"&gt;Google Technical Writing Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCKsaZMjb3lsLe5YtasDifuA"&gt;Technical Writing Channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instructionalsolutions.com/blog/become-a-technical-writer"&gt;How to Become a Technical Writer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-search-engine-optimization-specialist"&gt;
  &lt;/a&gt;
  5. Search Engine Optimization Specialist
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#average-annual-salary-54000"&gt;
  &lt;/a&gt;
  Average Annual Salary: &lt;a href="https://www.payscale.com/research/AE/Job=Search_Engine_Optimization_(SEO)_Specialist/Salary"&gt;$54,000&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JdJqXtAU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s4t8o3ox6no2r9cvek0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JdJqXtAU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s4t8o3ox6no2r9cvek0.jpeg" alt="SEO Specialist"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#role-amp-description"&gt;
  &lt;/a&gt;
  Role &amp;amp; Description
&lt;/h3&gt;

&lt;p&gt;A Search Engine Optimization (SEO) Specialist analyzes, evaluates, and performs changes to websites to optimize search engines. They carry out keyword research to improve website rankings on major search engines, such as Google, Yahoo, and Bing.&lt;/p&gt;

&lt;p&gt;Common job descriptions of SEO specialists include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reviewing and analyzing client sites for areas that the SEO can be improved and optimized&lt;/li&gt;
&lt;li&gt;Preparing detailed digital marketing strategy reports&lt;/li&gt;
&lt;li&gt;Identifying powerful keywords to drive the most valuable traffic&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#success-metric"&gt;
  &lt;/a&gt;
  Success Metric
&lt;/h3&gt;

&lt;p&gt;You understand SEO strategies and can improve a website's ranking on search engines like Google.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-seo-resources"&gt;
  &lt;/a&gt;
  Useful SEO Resources:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xsVTqzratPs"&gt;SEO Course for Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reliablesoft.net/become-an-seo-expert/"&gt;10 Steps to Become an SEO Expert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.futurelearn.com/career-advice/become-an-seo-expert"&gt;Become an SEO Expert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://brainstation.io/career-guides/how-to-become-an-seo-specialist"&gt;How to Become an SEO Expert&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Have a Strong Online Portfolio: Most employers will ask for a portfolio. If you're going for a UI/UX role, you can start by creating mock projects for yourself or re-creating your favorite app or website. As time goes on, you gain more skills and could even take on freelance clients. &lt;a href="https://www.behance.net/"&gt;Behance&lt;/a&gt; and &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt; are great places to get inspired and also host your online portfolio.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have a properly designed Resume: I recommend taking extra care to format your resume correctly; fonts, colors, spacing, etc. In most cases, I've found out that a 2 column resume layout helps to present all your information excellently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create/Update your LinkedIn Profile: LinkedIn is a great place to find jobs and connect with other professionals. If you don't already have a LinkedIn profile, you should create a LinkedIn profile before applying to your next role. Ensure you fill all the sections correctly, highlighting your best projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have a blog: This is especially useful if you're looking to become a Technical Writer. Potential employers will ask you about articles you've written in the past. You can host your blog on &lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt;, &lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;, or &lt;a href="https://dev.to/"&gt;dev.to&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#whichever-career-you-choose-to-pursue-go-all-out-to-be-an-expert-in-it-never-stop-learning-and-working-on-personal-projects-build-your-confidence-and-apply-for-that-next-tech-role-youve-got-this"&gt;
  &lt;/a&gt;
  Whichever career you choose to pursue, go all out to be an expert in it. Never stop learning and working on personal projects. Build your confidence and apply for that next tech role, you've got this! 💖
&lt;/h4&gt;

</description>
      <category>newbie</category>
      <category>career</category>
      <category>tech</category>
      <category>jobs</category>
    </item>
    <item>
      <title>tmux rotate-window</title>
      <author>Waylon Walker</author>
      <pubDate>Thu, 22 Jul 2021 13:03:28 +0000</pubDate>
      <link>https://dev.to/waylonwalker/tmux-rotate-window-45km</link>
      <guid>https://dev.to/waylonwalker/tmux-rotate-window-45km</guid>
      <description>&lt;p&gt;Rotate window is the main way that I navigated tmux before I learned&lt;br&gt;
&lt;code&gt;select-pane&lt;/code&gt;.  It allows you to change your focused pane, or rotate the&lt;br&gt;
position of the panes easily.&lt;/p&gt;

&lt;p&gt;Default keybindings&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bind-key        C-o rotate-window
bind-key          o &lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="nt"&gt;-pane&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; :.+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;My keybindings look just a bit different than the default ones, I do not like&lt;br&gt;
needing to hit prefix for every command, especially for repeated commands.  I&lt;br&gt;
set a similar keybinding to the default one that uses mod instead of prefix.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-o &lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="nt"&gt;-pane&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; :.+
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-O rotate-window
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;Be sure to check out the full youtube playlist and subscribe if you like it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLTRNG6WIHETB4reAxbWza3CZeP9KL6Bkr"&gt;https://www.youtube.com/playlist?list=PLTRNG6WIHETB4reAxbWza3CZeP9KL6Bkr&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/waylonwalker" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Ukb2PhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Izxe95PY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/271838/95e313ca-39fc-4ee6-bf57-ad52b4dcf0d2.png" alt="waylonwalker"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/waylonwalker/how-i-navigate-tmux-in-2021-2ina" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I navigate tmux in 2021&lt;/h2&gt;
      &lt;h3&gt;Waylon Walker ・ May 12 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#bash&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Also check out this long form post for more about how I use tmux.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>cli</category>
      <category>linux</category>
      <category>tmux</category>
    </item>
    <item>
      <title>Ruby Object Oriented Programming (OOP)</title>
      <author>Ahmed Abdelhamid</author>
      <pubDate>Thu, 22 Jul 2021 12:54:15 +0000</pubDate>
      <link>https://dev.to/ahmedhamid13/ruby-object-oriented-programming-oop-1dlk</link>
      <guid>https://dev.to/ahmedhamid13/ruby-object-oriented-programming-oop-1dlk</guid>
      <description>&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; is a pure object-oriented language and everything appears to Ruby as an &lt;code&gt;object&lt;/code&gt;. Every value in Ruby is an &lt;code&gt;object&lt;/code&gt;, even the most primitive things: strings, numbers and even true and false. Even a &lt;code&gt;class&lt;/code&gt; itself is an &lt;code&gt;object&lt;/code&gt; that is an instance of the Class class. This chapter will take you through all the major functionalities related to Object Oriented Ruby.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#ruby-class-definition"&gt;Ruby Class Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#define-ruby-objects"&gt;Define Ruby Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-initialize-method"&gt;The initialize Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-to_s-method"&gt;The to_s Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#the-instance-variables-and-instance-methods"&gt;The instance Variables and instance Methods&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-instance-variables"&gt;The instance Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-instance-methods"&gt;The instance Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-class-methods-and-variables"&gt;The class Methods and Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#class-constants"&gt;Class Constants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#encapsulation"&gt;Encapsulation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-accessor--setter-methods"&gt;The accessor &amp;amp; setter Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-attr_reader-attr_writer-and-attr_accessor"&gt;The attr_reader, attr_writer, and attr_accessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#access-control"&gt;Access Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#self"&gt;Self&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#inheritance"&gt;Inheritance&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#super"&gt;Super&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#polymorphism"&gt;Polymorphism&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#methods-overriding"&gt;Methods Overriding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#operator-overloading"&gt;Operator Overloading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#freezing-objects"&gt;Freezing Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-object-using-allocate"&gt;Create Object Using Allocate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#class-information"&gt;Class Information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#coding-examples"&gt;Coding Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ruby-class-definition"&gt;
  &lt;/a&gt;
  Ruby Class Definition
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;class&lt;/strong&gt; is used to specify the form of an &lt;code&gt;object&lt;/code&gt; and it combines data representation and methods for manipulating that data into one neat package. The data and methods within a class are called members of the class.&lt;/p&gt;

&lt;p&gt;When you define a &lt;code&gt;class&lt;/code&gt;, you define a blueprint for a data type. This doesn't actually define any data, but it does define what the &lt;code&gt;class&lt;/code&gt; name means, that is, what an object of the &lt;code&gt;class&lt;/code&gt; will consist of and what operations can be performed on such an object.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;class&lt;/code&gt; definition starts with the keyword &lt;code&gt;class&lt;/code&gt; followed by the &lt;code&gt;class&lt;/code&gt; name and is delimited with an end. For example, we defined the Box &lt;code&gt;class&lt;/code&gt; using the keyword &lt;code&gt;class&lt;/code&gt; as follows −&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;The name must begin with a capital letter and by convention names that contain more than one word are run together with each word capitalized and no separating characters (CamelCase).&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#define-ruby-objects"&gt;
  &lt;/a&gt;
  Define Ruby Objects
&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;class&lt;/code&gt; provides the blueprints for objects, so basically an object is created from a &lt;code&gt;class&lt;/code&gt;. We declare objects of a &lt;code&gt;class&lt;/code&gt; using new keyword. Following statements declare two objects of &lt;code&gt;class&lt;/code&gt; Box −&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="n"&gt;box1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
    &lt;span class="n"&gt;box2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-initialize-method"&gt;
  &lt;/a&gt;
  The initialize Method
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;initialize method&lt;/code&gt; is a standard Ruby &lt;code&gt;class&lt;/code&gt; method and works almost same way as constructor works in other object oriented programming languages. The initialize method is useful when you want to initialize some &lt;code&gt;class&lt;/code&gt; variables at the time of object creation. This method may take a list of parameters and like any other ruby method it would be preceded by &lt;code&gt;def&lt;/code&gt; keyword as shown below −&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-tos-method"&gt;
  &lt;/a&gt;
  The to_s Method
&lt;/h2&gt;

&lt;p&gt;Any class you define should have a &lt;code&gt;to_s&lt;/code&gt; instance method to return a string representation of the object. Following is a simple example to represent a Box object in terms of width and height −&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="c1"&gt;#!/usr/bin/ruby -w&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="c1"&gt;# constructor method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="c1"&gt;# define to_s method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_s&lt;/span&gt;
            &lt;span class="s2"&gt;"(w:&lt;/span&gt;&lt;span class="si"&gt;#@width&lt;/span&gt;&lt;span class="s2"&gt; ,h:&lt;/span&gt;&lt;span class="si"&gt;#@height&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;  &lt;span class="c1"&gt;# string formatting of the object.&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# create an object&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# to_s method will be called in reference of string automatically.&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"String representation of box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the above code is executed, it produces the following result −&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;String representation of box is : (w:10 ,h:20)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-instance-variables-and-instance-methods"&gt;
  &lt;/a&gt;
  The instance Variables and instance Methods
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-instance-variables"&gt;The instance Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-instance-methods"&gt;The instance Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-instance-variables"&gt;
  &lt;/a&gt;
  The instance Variables
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;instance variables&lt;/code&gt; are kind of &lt;code&gt;class&lt;/code&gt; attributes and they become properties of objects once objects are created using the &lt;code&gt;class&lt;/code&gt;. Every object's attributes are assigned individually and share no value with other objects. They are accessed using the @ operator within the &lt;code&gt;class&lt;/code&gt; but to access them outside of the &lt;code&gt;class&lt;/code&gt; we use public methods, which are called accessor methods. If we take the above defined &lt;code&gt;class&lt;/code&gt; Box then @width and @height are &lt;code&gt;instance variables&lt;/code&gt; for the &lt;code&gt;class&lt;/code&gt; Box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# assign instance variables&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-instance-methods"&gt;
  &lt;/a&gt;
  The instance Methods
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;instance methods&lt;/code&gt; are also defined in the same way as we define any other method using &lt;code&gt;def&lt;/code&gt; keyword and they can be used using a class instance only as shown below. Their functionality is not limited to access the instance variables, but also they can do a lot more as per your requirement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="c1"&gt;#!/usr/bin/ruby -w&lt;/span&gt;

    &lt;span class="c1"&gt;# define a class&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="c1"&gt;# constructor method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="c1"&gt;# instance method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getArea&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# create an object&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# call instance methods&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Area of the box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the above code is executed, it produces the following result −&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Area of the box is : 200&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-class-methods-and-variables"&gt;
  &lt;/a&gt;
  The class Methods and Variables
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;class variables&lt;/code&gt; is a variable, which is shared between all instances of a class. In other words, there is one instance of the variable and it is accessed by object instances. while the &lt;code&gt;class method&lt;/code&gt; is a method which used with class without need for creating a new instance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;class variables :&lt;/strong&gt; are prefixed with two @ characters (@@). A &lt;code&gt;class variable&lt;/code&gt; must be initialized within the &lt;code&gt;class&lt;/code&gt; definition as shown below.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;class method :&lt;/strong&gt; is defined using &lt;code&gt;def&lt;/code&gt; &lt;code&gt;self.methodname()&lt;/code&gt;, which ends with end delimiter and would be called using the class name as classname.methodname as shown below.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="c1"&gt;#!/usr/bin/ruby -w&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="c1"&gt;# Initialize our class variables&lt;/span&gt;
        &lt;span class="vc"&gt;@@count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# assign instance avriables&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;

            &lt;span class="vc"&gt;@@count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Box count is : &lt;/span&gt;&lt;span class="si"&gt;#@@count&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# create two object&lt;/span&gt;
    &lt;span class="n"&gt;box1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;box2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# call class method to print box count&lt;/span&gt;
    &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the above code is executed, it produces the following result −&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Box count is : 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#class-constants"&gt;
  &lt;/a&gt;
  Class Constants
&lt;/h2&gt;

&lt;p&gt;You can define a constant inside a class by assigning a direct numeric or string value to a variable, which is defined without using either &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;@@&lt;/code&gt;. By convention, we keep constant names in &lt;code&gt;upper-case&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once a constant is defined, you cannot change its value but you can access a constant directly inside a class much like a variable but if you want to access a constant outside of the class then you would have to use &lt;code&gt;classname::constant&lt;/code&gt; as shown in the below example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="c1"&gt;#!/usr/bin/ruby -w&lt;/span&gt;

    &lt;span class="c1"&gt;# define a class&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="no"&gt;BOX_COMPANY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"TATA Inc"&lt;/span&gt;
        &lt;span class="no"&gt;BOXWEIGHT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
        &lt;span class="c1"&gt;# constructor method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="c1"&gt;# instance method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getArea&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# create an object&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# call instance methods&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Area of the box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BOX_COMPANY&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Box weight is: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BOXWEIGHT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the above code is executed, it produces the following result −&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Area of the box is : 200&lt;br&gt;
TATA Inc&lt;br&gt;
Box weight is: 10&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Class constants are inherited and can be overridden like instance methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#encapsulation"&gt;
  &lt;/a&gt;
  Encapsulation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#the-accessor--setter-methods"&gt;The accessor &amp;amp; setter Methods&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-attr_reader-attr_writer-and-attr_accessor"&gt;The attr_reader, attr_writer, and attr_accessor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#access-control"&gt;Access Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#self"&gt;Self&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-accessor-amp-setter-methods"&gt;
  &lt;/a&gt;
  The accessor &amp;amp; setter Methods
&lt;/h3&gt;

&lt;p&gt;To make the variables available from outside the class, they must be defined within &lt;code&gt;accessor methods&lt;/code&gt;, these &lt;code&gt;accessor methods&lt;/code&gt; are also known as a &lt;code&gt;getter methods&lt;/code&gt;. Ruby also provides a way to set the values of variables from outside of the class using &lt;code&gt;setter methods&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Following example shows the usage of &lt;code&gt;accessor methods&lt;/code&gt; and &lt;code&gt;setter methods&lt;/code&gt; −&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="c1"&gt;#!/usr/bin/ruby -w&lt;/span&gt;

    &lt;span class="c1"&gt;# define a class&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="c1"&gt;# constructor method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="c1"&gt;# accessor methods&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getWidth&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getHeight&lt;/span&gt;
            &lt;span class="vi"&gt;@height&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="c1"&gt;# setter methods&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setWidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setHeight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# create an object&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# use accessor methods&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printWidth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printHeight&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Width of the box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Height of the box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="c1"&gt;# use setter methods&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;

    &lt;span class="c1"&gt;# use accessor methods&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getWidth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Width of the box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Height of the box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the above code is executed, it produces the following result −&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Width of the box is : 10&lt;br&gt;
Height of the box is : 20&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Width of the box is : 30&lt;br&gt;
Height of the box is : 50&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#the-attrreader-attrwriter-and-attraccessor"&gt;
  &lt;/a&gt;
  The attr_reader, attr_writer, and attr_accessor
&lt;/h4&gt;

&lt;p&gt;Ruby also provide a helping methods for &lt;code&gt;setter methods&lt;/code&gt; and &lt;code&gt;getter methods&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;attr_reader :&lt;/strong&gt; creates only the reader.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;attr_writer :&lt;/strong&gt; creates only the writer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;attr_accessor :&lt;/strong&gt; creates reader and writer.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="c1"&gt;#!/usr/bin/ruby -w&lt;/span&gt;

    &lt;span class="c1"&gt;# define a class&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="c1"&gt;## Setter and Getter for width and height &lt;/span&gt;
        &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:height&lt;/span&gt;

        &lt;span class="c1"&gt;## Getter for width and height&lt;/span&gt;
        &lt;span class="c1"&gt;# attr_reader :width, :height&lt;/span&gt;

        &lt;span class="c1"&gt;# Setter for width and height&lt;/span&gt;
        &lt;span class="c1"&gt;# attr_writer :width, :height&lt;/span&gt;

        &lt;span class="c1"&gt;# constructor method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# create an object&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# use get width and height&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;width&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;height&lt;/span&gt;

    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Width of the box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Height of the box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="c1"&gt;# use set width and height&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;

    &lt;span class="c1"&gt;# use get width and height&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;width&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;height&lt;/span&gt;

    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Width of the box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Height of the box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the above code is executed, it produces the following result −&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Width of the box is : 10&lt;br&gt;
Height of the box is : 20&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Width of the box is : 30&lt;br&gt;
Height of the box is : 50&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#access-control"&gt;
  &lt;/a&gt;
  Access Control
&lt;/h3&gt;

&lt;p&gt;Ruby gives you three levels of protection at instance methods level, which may be public, private, or protected. Ruby does not apply any access control over instance and class variables.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Public Methods&lt;/strong&gt; − A &lt;code&gt;public&lt;/code&gt; methods can be called by anyone. Methods are &lt;code&gt;public&lt;/code&gt; by default except for initialize, which is always &lt;code&gt;private&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Private Methods&lt;/strong&gt; − A &lt;code&gt;private&lt;/code&gt; methods cannot be accessed, or even viewed from outside the class. Only the class methods can access &lt;code&gt;private&lt;/code&gt; members.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Protected Methods&lt;/strong&gt; − A &lt;code&gt;protected&lt;/code&gt; method can be invoked only by objects of the defining class and its subclasses. Access is kept within the family.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following is a simple example to show the syntax of all the three access modifiers −&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="c1"&gt;#!/usr/bin/ruby -w&lt;/span&gt;

    &lt;span class="c1"&gt;# define a class&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="c1"&gt;# constructor method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="c1"&gt;# instance method by default it is public&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getArea&lt;/span&gt;
            &lt;span class="n"&gt;getWidth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;getHeight&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="c1"&gt;# define private accessor methods&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getWidth&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getHeight&lt;/span&gt;
            &lt;span class="vi"&gt;@height&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="c1"&gt;# make them private&lt;/span&gt;
        &lt;span class="kp"&gt;private&lt;/span&gt; &lt;span class="ss"&gt;:getWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:getHeight&lt;/span&gt;

        &lt;span class="c1"&gt;# instance method to print area&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printArea&lt;/span&gt;
            &lt;span class="vi"&gt;@area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getWidth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;getHeight&lt;/span&gt;
            &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Big box area is : &lt;/span&gt;&lt;span class="si"&gt;#@area&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="c1"&gt;# make it protected&lt;/span&gt;
        &lt;span class="kp"&gt;protected&lt;/span&gt; &lt;span class="ss"&gt;:printArea&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# create an object&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# call instance methods&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Area of the box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="c1"&gt;# try to call protected or methods&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the above code is executed, it produces the following result. Here, first method is called successfully but second method gave a problem.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Area of the box is : 200&lt;br&gt;
test.rb:42: protected method &lt;code&gt;printArea&lt;/code&gt; called for # (NoMethodError)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#self"&gt;
  &lt;/a&gt;
  Self
&lt;/h3&gt;

&lt;p&gt;The reserved word &lt;strong&gt;self&lt;/strong&gt; refers to the calling object, which for us can mean a specific instance of the class, and we use it to call methods or variables within class.&lt;br&gt;
Also &lt;strong&gt;self&lt;/strong&gt; can be refers to the class itself, check &lt;a href="#the-class-methods-and-variables"&gt;The Class Methods&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#inheritance"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#super"&gt;Super&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the most important concepts in object-oriented programming is that of inheritance. &lt;strong&gt;Inheritance&lt;/strong&gt; allows us to define a class in terms of another class, which makes it easier to create and maintain an application. It provides an opportunity to reuse the code functionality and fast implementation time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Unfortunately Ruby does not support multiple levels of inheritances but Ruby supports mixins. A mixin is like a specialized implementation of multiple inheritance in which only the interface portion is inherited&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When creating a class, instead of writing completely new data members and member functions, the programmer can designate that the new class should inherit the members of an existing class. This existing class is called the &lt;strong&gt;base class&lt;/strong&gt; or &lt;strong&gt;superclass&lt;/strong&gt; or &lt;strong&gt;parent class&lt;/strong&gt;, and the new class is referred to as the &lt;strong&gt;derived class&lt;/strong&gt; or &lt;strong&gt;sub-class&lt;/strong&gt; or &lt;strong&gt;child class&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ruby also supports the concept of subclassing, i.e., inheritance and following example explains the concept. The syntax for extending a class is simple. Just add a &lt;code&gt;&amp;lt;&lt;/code&gt; character and the name of the &lt;code&gt;superclass&lt;/code&gt; to your class statement. For example, following define a class BigBox as a &lt;code&gt;subclass&lt;/code&gt; of Box −&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="c1"&gt;#!/usr/bin/ruby -w&lt;/span&gt;

    &lt;span class="c1"&gt;# define a class&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="c1"&gt;# constructor method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="c1"&gt;# instance method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getArea&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# define a subclass&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BigBox&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;

        &lt;span class="c1"&gt;# add a new instance method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printArea&lt;/span&gt;
            &lt;span class="vi"&gt;@area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt;
            &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Big box area is : &lt;/span&gt;&lt;span class="si"&gt;#@area&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# create an object&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;BigBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# print the area&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the above code is executed, it produces the following result −&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Big box area is : 200&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#super"&gt;
  &lt;/a&gt;
  Super
&lt;/h3&gt;

&lt;p&gt;The reserved word &lt;strong&gt;super&lt;/strong&gt; passes any arguments supplied up the method lookup path to the first method of the same name that Ruby finds, which it then invokes. at the next example &lt;strong&gt;super&lt;/strong&gt; will pass arguments from child class's initializer method to parent class's initializer method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="c1"&gt;#!/usr/bin/ruby -w&lt;/span&gt;

    &lt;span class="c1"&gt;# define a class&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="c1"&gt;# constructor method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="c1"&gt;# instance method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getArea&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# define a subclass&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BigBox&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="c1"&gt;# add a new instance method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printArea&lt;/span&gt;
            &lt;span class="vi"&gt;@area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt;
            &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Big box area is : &lt;/span&gt;&lt;span class="si"&gt;#@area&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# create an object&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;BigBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# print the area&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the above code is executed, it produces the following result −&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Big box area is : 200&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#polymorphism"&gt;
  &lt;/a&gt;
  Polymorphism
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#methods-overriding"&gt;&lt;strong&gt;Methods Overriding :&lt;/strong&gt; Dynamic or Runtime polymorphism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#operator-overloading"&gt;&lt;strong&gt;Operator Overloading :&lt;/strong&gt; Static or Compile time polymorphism&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#methods-overriding"&gt;
  &lt;/a&gt;
  Methods Overriding
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dynamic or Runtime polymorphism&lt;/strong&gt;&lt;br&gt;
Though you can add new functionality in a derived class, but sometimes you would like to change the behavior of already defined method in a parent class. You can do so simply by keeping the method name same and overriding the functionality of the method as shown below in the example −&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="c1"&gt;#!/usr/bin/ruby -w&lt;/span&gt;

    &lt;span class="c1"&gt;# define a class&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="c1"&gt;# constructor method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="c1"&gt;# instance method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getArea&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# define a subclass&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BigBox&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;

        &lt;span class="c1"&gt;# change existing getArea method as follows&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getArea&lt;/span&gt;
            &lt;span class="vi"&gt;@area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt;
            &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Big box area is : &lt;/span&gt;&lt;span class="si"&gt;#@area&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# create an object&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;BigBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# print the area using overriden method.&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#operator-overloading"&gt;
  &lt;/a&gt;
  Operator Overloading
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Static or Compile time polymorphism&lt;/strong&gt;&lt;br&gt;
We'd like the &lt;code&gt;+&lt;/code&gt; operator to perform vector addition of two Box objects using &lt;code&gt;+&lt;/code&gt;, the &lt;code&gt;*&lt;/code&gt; operator to multiply a Box width and height by a scalar, and the unary &lt;code&gt;-&lt;/code&gt; operator to do negate the width and height of the Box. Here is a version of the Box class with mathematical operators defined −&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# Initialize the width and height&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;# Define + to do vector addition&lt;/span&gt;
            &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@width&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;-@&lt;/span&gt;           &lt;span class="c1"&gt;# Define unary minus to negate width and height&lt;/span&gt;
            &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="vi"&gt;@height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scalar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;# To perform scalar multiplication&lt;/span&gt;
            &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;scalar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;scalar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#freezing-objects"&gt;
  &lt;/a&gt;
  Freezing Objects
&lt;/h2&gt;

&lt;p&gt;Sometimes, we want to prevent an object from being changed. The freeze method in Object allows us to do this, effectively turning an object into a constant. Any object can be frozen by invoking Object.freeze. A frozen object may not be modified: you can't change its instance variables.&lt;/p&gt;

&lt;p&gt;You can check if a given object is already frozen or not using Object.frozen? method, which returns true in case the object is frozen otherwise a false value is return. Following example clears the concept −&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="c1"&gt;#!/usr/bin/ruby -w&lt;/span&gt;

    &lt;span class="c1"&gt;# define a class&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="c1"&gt;# constructor method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="c1"&gt;# accessor methods&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getWidth&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getHeight&lt;/span&gt;
            &lt;span class="vi"&gt;@height&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="c1"&gt;# setter methods&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setWidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setHeight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# create an object&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# let us freez this object&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;frozen?&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Box object is frozen object"&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Box object is normal object"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# now try using setter methods&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;

    &lt;span class="c1"&gt;# use accessor methods&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getWidth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Width of the box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Height of the box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the above code is executed, it produces the following result −&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Box object is frozen object&lt;br&gt;
test.rb:20:in 'setWidth=': can't modify frozen object (TypeError) from test.rb:39&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#create-object-using-allocate"&gt;
  &lt;/a&gt;
  Create Object Using Allocate
&lt;/h2&gt;

&lt;p&gt;There may be a situation when you want to create an object without calling its constructor initialize i.e. using new method, in such case you can call allocate, which will create an uninitialized object for you as in the following example −&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="c1"&gt;#!/usr/bin/ruby -w&lt;/span&gt;

    &lt;span class="c1"&gt;# define a class&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:height&lt;/span&gt;

        &lt;span class="c1"&gt;# constructor method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="c1"&gt;# instance method&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getArea&lt;/span&gt;
            &lt;span class="vi"&gt;@width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="vi"&gt;@height&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# create an object using new&lt;/span&gt;
    &lt;span class="n"&gt;box1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# create another object using allocate&lt;/span&gt;
    &lt;span class="n"&gt;box2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;allocate&lt;/span&gt;

    &lt;span class="c1"&gt;# call instance method using box1&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;box1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Area of the box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="c1"&gt;# call instance method using box2&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;box2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Area of the box is : &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the above code is executed, it produces the following result −&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Area of the box is : 200&lt;br&gt;
test.rb:14: warning: instance variable @width not initialized&lt;br&gt;
test.rb:14: warning: instance variable @height not initialized&lt;br&gt;
test.rb:14:in 'getArea': undefined method for nil:NilClass (NoMethodError) from test.rb:29&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#class-information"&gt;
  &lt;/a&gt;
  Class Information
&lt;/h2&gt;

&lt;p&gt;If class definitions are executable code, this implies that they execute in the context of some object: self must reference something. Let's find out what it is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="c1"&gt;#!/usr/bin/ruby -w&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt;
        &lt;span class="c1"&gt;# print class information&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Type of self = &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Name of self = &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the above code is executed, it produces the following result −&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Type of self = Class&lt;br&gt;
Name of self = Box&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that a class definition is executed with that class as the current object. This means that methods in the metaclass and its superclasses will be available during the execution of the method definition.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-examples"&gt;
  &lt;/a&gt;
  Coding Examples
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/ahmedhamid13/Ruby-Object-Oriented-Programming-Exercises"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RKX9y7bz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Coding-Examples-grey%3F%26logo%3Dgit" alt="Git"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.tutorialspoint.com/ruby/ruby_object_oriented.htm"&gt;Tutorials Point&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/launch-school/the-basics-of-oop-ruby-26eaa97d2e98"&gt;OOP Basics&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>oop</category>
      <category>rails</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
