<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>8 Machine Learning Questions on K-means to Destroy Your Interview</title>
      <author>Avi Arora</author>
      <pubDate>Wed, 19 Jan 2022 21:25:38 +0000</pubDate>
      <link>https://dev.to/aarora4/8-machine-learning-questions-on-k-means-to-destroy-your-interview-2ef4</link>
      <guid>https://dev.to/aarora4/8-machine-learning-questions-on-k-means-to-destroy-your-interview-2ef4</guid>
      <description>&lt;p&gt;Read the full article here: &lt;a href="https://analyticsarora.com/8-unique-machine-learning-interview-questions-on-k-means/"&gt;https://analyticsarora.com/8-unique-machine-learning-interview-questions-on-k-means/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In preparing for your next Machine Learning Interview, one of the topics you certainly need to be familiar with is K-means. This algorithm is incredibly useful for clustering data points into groups that have not been explicitly labeled! The days of Machine Learning taking over the world are well within their stride, so it is important to have a solid grasp on concepts such as this one. &lt;/p&gt;

&lt;p&gt;Check out my &lt;a href="https://analyticsarora.com/k-means-for-beginners-how-to-build-from-scratch-in-python/"&gt;in-depth tutorial on implementing K-means from scratch in python&lt;/a&gt; if you are not familiar with the algorithm!&lt;br&gt;&lt;br&gt;This series of articles is meant to equip you with the knowledge you need to ace your ML interview and secure a top tier job in the field. &lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Article Overview&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What is K-means clustering?&lt;/li&gt;
&lt;li&gt;How does K-means clustering work?&lt;/li&gt;
&lt;li&gt;Why is K-means clustering important?&lt;/li&gt;
&lt;li&gt;K-means ML Interview Questions and Answers&lt;/li&gt;
&lt;li&gt;Wrap Up&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>machinelearning</category>
      <category>tutorial</category>
      <category>interview</category>
      <category>writing</category>
    </item>
    <item>
      <title>How to Repost Hashnode Articles on Dev.to</title>
      <author>Sean Coughlin</author>
      <pubDate>Wed, 19 Jan 2022 21:15:17 +0000</pubDate>
      <link>https://dev.to/scc33/how-to-repost-hashnode-articles-on-devto-2gi7</link>
      <guid>https://dev.to/scc33/how-to-repost-hashnode-articles-on-devto-2gi7</guid>
      <description>&lt;p&gt;I started my writing journey on Hashnode, but I've been wanting to expand my audience by widely publishing articles across the interwebs. I discovered &lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt; as another great platform to share developer-related content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6fWHZx8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625185890/VXeU-iq6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6fWHZx8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625185890/VXeU-iq6p.png" alt="dev.to screenshot" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dev.to has dedicated support for posting to the community from &lt;a href="https://en.wikipedia.org/wiki/RSS"&gt;RSS&lt;/a&gt;. Additionally, dev.to supports canonical linking to protect SEO rankings. Luckily, Hashnode provides an RSS feed so republishing content from Hashnode onto dev.to is easy and fast.&lt;/p&gt;

&lt;p&gt;You can find your Hashnode RSS feed at &lt;code&gt;https://[your-blog-url]/rss.xml&lt;/code&gt;. For example, my feed is at &lt;a href="https://blog.seancoughlin.me/rss.xml"&gt;blog.seancoughlin.me/rss.xml&lt;/a&gt;. You can also find it linked on your blog page. See the arrow in the screenshot below for the location.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMGeeu12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625917019/9pWwKNFWu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMGeeu12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625917019/9pWwKNFWu.png" alt="Hashnode RSS location" width="880" height="89"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating a dev.to account, open the settings and head to the Extensions tab. Under the Extensions tab, you will find &lt;em&gt;Publishing to DEV Community from RSS&lt;/em&gt;. Simply copy your Hashnode RSS feed into the &lt;em&gt;RSS Feed URL&lt;/em&gt; field and hit &lt;em&gt;Save Feed Settings&lt;/em&gt;. After a few seconds, your Hashnode articles will appear as drafts in the dev.to dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yDFY15Ck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625258250/PXcdU0z6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yDFY15Ck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625258250/PXcdU0z6w.png" alt="Publishing to dev.to from RSS" width="754" height="811"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To publish an article you will need to click edit and then change the &lt;code&gt;published: false&lt;/code&gt; field to be true.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NYBc2pTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625279327/xZ8_exRaOW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NYBc2pTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625279327/xZ8_exRaOW.png" alt="Published field" width="730" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it! Now your articles will be hosted on dev.to in addition to Hashnode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6lk1ped--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642626312677/0dM_6PY1B.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6lk1ped--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642626312677/0dM_6PY1B.jpeg" alt="Celebrating a successful republishing" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@universaleye?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Universal Eye&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/celebrate?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blogging</category>
      <category>hashnode</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>ES6: How to Clone an Object in javascript ?</title>
      <author>deepak-negi-web</author>
      <pubDate>Wed, 19 Jan 2022 21:03:34 +0000</pubDate>
      <link>https://dev.to/deepaknegiweb/es6-how-to-clone-an-object-in-javascript--5dej</link>
      <guid>https://dev.to/deepaknegiweb/es6-how-to-clone-an-object-in-javascript--5dej</guid>
      <description>&lt;p&gt;Hey Folks👋 hope you doing well.&lt;br&gt;
So you must be thinking, "Clone an Object"??? whats the big deal?&lt;br&gt;
Well, i also think this way until i encounter an issue which took me 2 days just to debug that i have done something terrible with cloning an object.&lt;/p&gt;

&lt;p&gt;So lets see how can we clone objects in javascript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// we have a user object
const user = {
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com"
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we want to copy this user object, so? simple!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const copiedUser = user;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy right?... well thats the worst way of copying a user,it is clear that you have some misconceptions of what the statement &lt;code&gt;const copiedUser = user;&lt;/code&gt; does.&lt;/p&gt;

&lt;p&gt;In JavaScript objects are passed and assigned by reference (more accurately the value of a reference), so &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;copiedUser&lt;/code&gt; are both references to the same object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// [Object1]&amp;lt;--------- user

const copiedUser = user;

// [Object1]&amp;lt;--------- user
//         ^ 
//         |
//         ----------- copiedUser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see after the assignment, both references are pointing to the same object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com"
}  
const copiedUser = user;
copiedUser.name = "XYZ"
console.log(copiedUser) // {name:"XYZ",email:"st.deepak15@gmail.com"}
console.log(user) // {name:"XYZ",email:"st.deepak15@gmail.com"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;modifing any of them will change both of them :(&lt;/p&gt;

&lt;p&gt;So then how we can create copy if we need to modify one and not the other?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Spread Operator&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const spreadUser = {...user}
spreadUser.name = "XYZ"
console.log(spreadUser) // {name:"XYZ",email:"st.deepak15@gmail.com"}
console.log(user) // {name:"Deepak Negi",email:"st.deepak15@gmail.com"}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Object.assign()&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const assignUser = Object.assign({}, user);
assignUser.name = "XYZ"
console.log(assignUser) // {name:"XYZ",email:"st.deepak15@gmail.com"}
console.log(user) // {name:"Deepak Negi",email:"st.deepak15@gmail.com"}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yaassss we finally got it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ddHhhUBn25cuQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ddHhhUBn25cuQ/giphy.gif" width="640" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you think thats it.. so no... there much more to know, now we have added some more data in the user object and now lets see what happen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"New Delhi",
    state:"Delhi",
    zipcode: 000000,
    country:"India"
  }
}
const spreadUser = {...user}
spreadUser.address.city = "Pune"
spreadUser.address.state = "Mumbai"

console.log(spreadUser)
// console output 
{
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"Pune",
    state:"Mumbai",
    zipcode: 000000,
    country:"India"
  }
}

console.log(user)
// console output 
{
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"Pune",
    state:"Mumbai",
    zipcode: 000000,
    country:"India"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You see the problem, our actual user object is also changed now and this happens with &lt;code&gt;Object.assign()&lt;/code&gt; method as well.&lt;/p&gt;

&lt;p&gt;But why?&lt;br&gt;
Because of the &lt;strong&gt;shallow copying&lt;/strong&gt; i.e. object spread operator, as well as Object.assign, does not clone the values of nested objects, but copies the reference to the nested object. That's called &lt;strong&gt;shallow copying&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then what should we do? Deep copy?&lt;br&gt;
Yes, Deep copy/Deep clone will copies object, even nested properties, to do so serialize the object to JSON and parse it back to a JS object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"New Delhi",
    state:"Delhi",
    zipcode: 000000,
    country:"India"
  }
}
const deepCopiedUser = JSON.parse(JSON.stringify(user))

deepCopiedUser.address.city = "Pune"
deepCopiedUser.address.state = "Mumbai"

console.log(deepCopiedUser)
// console output 
{
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"Pune",
    state:"Mumbai",
    zipcode: 000000,
    country:"India"
  }
}

console.log(user)
// console output 
{
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"New Delhi",
    state:"Delhi",
    zipcode: 000000,
    country:"India"
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now our original &lt;code&gt;user&lt;/code&gt; object doesn't change when we modify the &lt;code&gt;deepCopiedUser&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Beware using the &lt;code&gt;JSON.parse(JSON.stringify(user))&lt;/code&gt; if you're dealing with date, functions, RegExps, Maps, Sets or other complex types within your object. The JSON method can't handle these types.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So for such cases the &lt;a href="https://lodash.com/docs/4.17.15#cloneDeep"&gt;&lt;strong&gt;lodash clonedeep&lt;/strong&gt;&lt;/a&gt; method is probably the best way to go.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {cloneDeep} from 'lodash'
or
const {cloneDeep} = require('lodash')

const user = {
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"New Delhi",
    state:"Delhi",
    zipcode: 000000,
    country:"India"
  }
}
const deepCloneUser = cloneDeep(user)
deepCloneUser.address.city = "Pune"
deepCloneUser.address.state = "Mumbai"

console.log(deepCloneUser)
// console output 
{
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"Pune",
    state:"Mumbai",
    zipcode: 000000,
    country:"India"
  }
}

console.log(user)
// console output 
{
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"New Delhi",
    state:"Delhi",
    zipcode: 000000,
    country:"India"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally!!&lt;br&gt;
&lt;a href="https://i.giphy.com/media/l0Iyl55kTeh71nTXy/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0Iyl55kTeh71nTXy/giphy.gif" width="480" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know in the comment what do you think the best way for deep cloning the object.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Introducing CodeCast Series ✨</title>
      <author>CodeCast</author>
      <pubDate>Wed, 19 Jan 2022 20:46:42 +0000</pubDate>
      <link>https://dev.to/codecast/introducing-codecast-series-92d</link>
      <guid>https://dev.to/codecast/introducing-codecast-series-92d</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was originally published on &lt;a href="https://info.codecast.io/blog/introducing-series"&gt;CodeCast&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are thrilled to announce that our new feature, Series, is now available for everyone on &lt;a href="//codecast.io"&gt;CodeCast&lt;/a&gt;. We’ve been working on Series behind the scenes for some time, and as one of the devs who worked on it I’m very excited to see it come to life.&lt;/p&gt;

&lt;p&gt;I will preface this article by saying that some features within Series will be coming in later versions, but the core of what Series is now ready for everyone to use.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/d8WRmTqBRjs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As many of us began creating Casts and content on CodeCast, we started to realize we were often creating Casts that were broken up into parts. Suddenly, we wished we had a way to add all of these parts together into a larger playlist where people could watch them easily without having to jump around or search for them. Thus, Series was born.&lt;/p&gt;

&lt;p&gt;Series is the course-style content you’ve come to love. It allows Creators to combine Casts into a single series, broken up by chapters to help separate the Casts. In this article, I’m going to go through exactly how to create your first Series.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-new-series"&gt;
  &lt;/a&gt;
  Creating A New Series
&lt;/h3&gt;

&lt;p&gt;Once you have created an account and are logged in to CodeCast, navigate to your profile. Under the bio portion of your profile, you will see a row of tabs. Click on the tab titled &lt;strong&gt;Series&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On the right-hand side, underneath the tabs, you will see a &lt;strong&gt;New Series&lt;/strong&gt; button. Go ahead and click that. Now we can get started building out our Series!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GEaARj_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95bmefheao3b5j8bq78l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GEaARj_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95bmefheao3b5j8bq78l.png" alt="New Series page" width="880" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fill out the form with as much information as you wish. We recommend you provide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A clear and concise title that quickly explains what the content of your Series includes.&lt;/li&gt;
&lt;li&gt;A description containing all the detailed information regarding what your Series is about. It’s also a great place to provide any external links mentioned within the Series or any relevant pieces of information. The description supports markdown format and we highly recommend you take advantage of that. If you’re not familiar with markdown, I’ve created a quick beginners tutorial!&lt;/li&gt;
&lt;li&gt;A Promo Banner. While this is optional, it's highly recommended. You want to capture people's attention, and images are a fantastic way to do that. A simple way to create a cover is to find a photo on a free website like &lt;a href="//unsplash.com"&gt;Unsplash&lt;/a&gt;, then use a free application to add text over the top of the image! Note the aspect ratio you should use is 3:1.&lt;/li&gt;
&lt;li&gt;Any promo text you provide will go right above the purchase series button. While this also supports markdown, you want this to be concise and simple, while drawing attention. We recommend using bullet points to highlight the main topics you will touch on during the series (example shown below).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VC73Inlj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1m1gu75il9wvm3w3q1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VC73Inlj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1m1gu75il9wvm3w3q1h.png" alt="Studio promo example" width="373" height="686"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, hit &lt;strong&gt;Create Series&lt;/strong&gt;. Congrats! You’ve created your first Series. Now we just need to add some content to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-casts"&gt;
  &lt;/a&gt;
  Adding Casts
&lt;/h3&gt;

&lt;p&gt;Once you hit &lt;strong&gt;Create Series&lt;/strong&gt;, the page will re-route to the Edit Series section, placing you on the Playlist page. This is where you add the Casts that will be included in your Series. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H2YVlBR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsc7j86p3pl46f2oz7z5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H2YVlBR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsc7j86p3pl46f2oz7z5.png" alt="Add Chapter area" width="880" height="172"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that you will need to have Casts published, of course. If you haven’t made your first Cast yet, you should do that first. We have several guides that can help you create your first Cast:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take a &lt;a href="https://info.codecast.io/blog/studio-deep-dive"&gt;Deep Dive into the Studio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Watch our &lt;a href="https://www.youtube.com/watch?v=dzlKc6rr0LU"&gt;Studio tutorial video&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Read our &lt;a href="https://info.codecast.io/blog/how-to-make-your-first-cast"&gt;How To Make Your First Cast&lt;/a&gt; blog&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first step to adding Casts will be to add a Chapter. Chapters are used to break up sections of the Series into natural chunks as shown below!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pb5Snlws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coijux960usp6daa47eo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pb5Snlws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coijux960usp6daa47eo.png" alt="Playlist example" width="759" height="737"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit &lt;strong&gt;Add Chapter&lt;/strong&gt; and name the Chapter according to what the section will contain. A dropdown menu will appear within the Chapter section that will allow you to add as many Casts to that Chapter as you’d like!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1uPsEJ8s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfq61z6ilhef92b1tf8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1uPsEJ8s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfq61z6ilhef92b1tf8e.png" alt="Chapter dropdown menu" width="880" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve added all the Casts you’d like to the Series, there is one last step before you publish it, and that is setting a price! Navigate to the Pricing tab on the side. By default, the price will be set to free, but you can adjust it to what you want. Once that’s done, give everything a look over on the Series Info page, and once you’re happy with it, go ahead and hit &lt;strong&gt;Publish&lt;/strong&gt; in the upper-righthand corner.&lt;/p&gt;

&lt;p&gt;You’ve officially published your first Series! 🎉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#public-vs-private"&gt;
  &lt;/a&gt;
  Public Vs. Private
&lt;/h3&gt;

&lt;p&gt;You will have the option to add public and private Casts alike to a Series. We recommend that if a Series is free, you keep all the Casts public anyways! However, if a Series is going to be priced for a dollar amount, you’ll want to make most of the Casts private, so that only people who have purchased the Series can watch them.&lt;/p&gt;

&lt;p&gt;We recommend keeping one or two Casts public so people can view it as a demo and get a feel for what the Series is like!&lt;/p&gt;

&lt;p&gt;Now all that’s left is sharing your Series with the world! Here are a few of our favourite Series that are currently on CodeCast for free:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.codecast.io/series/61-learn-api-s-building-a-trivia-game-w-javascript?_ga=2.127872782.2060008103.1642441314-1858564538.1631636385"&gt;Learn Api's by Building A Trivia Game&lt;/a&gt; by &lt;a href="https://www.codecast.io/users/amy"&gt;Amy Oulton&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codecast.io/series/58-intro-to-elixir?_ga=2.132443277.2060008103.1642441314-1858564538.1631636385"&gt;Intro to Elixir&lt;/a&gt; by &lt;a href="https://www.codecast.io/users/tam"&gt;Tam Kbeili&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codecast.io/series/60-create-a-portfolio-website?_ga=2.132443277.2060008103.1642441314-1858564538.1631636385"&gt;Create A Portfolio Website&lt;/a&gt; by &lt;a href="https://www.codecast.io/users/amy"&gt;Amy Oulton&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More features are coming to Series soon, so be sure to keep an eye out for those!&lt;/p&gt;

&lt;p&gt;If you have any questions on Series or CodeCast, feel free to email us at &lt;a href="//community@codecast.io"&gt;community@codecast.io&lt;/a&gt;, or leave a comment below!&lt;/p&gt;




&lt;p&gt;Not familiar with CodeCast? Learn more about us by exploring our &lt;a href="//codecast.io"&gt;homepage&lt;/a&gt; or watching the video below! 👇🏻&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/eqehwwFnSoM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Make Your Own NFT</title>
      <author>Corey</author>
      <pubDate>Wed, 19 Jan 2022 20:26:31 +0000</pubDate>
      <link>https://dev.to/coreystevens/how-to-make-your-own-nft-24dn</link>
      <guid>https://dev.to/coreystevens/how-to-make-your-own-nft-24dn</guid>
      <description>&lt;p&gt;Sol address: 4mgnTysrA7kQVYCsE2CJcaJzpX8xPxGPoKPz2LyiN782&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/OfficialCoreyS"&gt;https://twitter.com/OfficialCoreyS&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-overview"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Project overview&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Today we are going to go over the steps on how to generate NFTS by providing image layers into a code.&lt;/p&gt;

&lt;p&gt;I will go over exactly how to get the GitHub repo and how to update the code to make images.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Prerequisites&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Yarn- &lt;a href="https://classic.yarnpkg.com/lang/en/docs/install/#mac-stable"&gt;https://classic.yarnpkg.com/lang/en/docs/install/#mac-stable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NPM-&lt;a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"&gt;https://docs.npmjs.com/downloading-and-installing-node-js-and-npm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solana Tool Suite- &lt;a href="https://docs.solana.com/cli/install-solana-cli-tools"&gt;https://docs.solana.com/cli/install-solana-cli-tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Git: &lt;a href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Atom(Code editor)- &lt;a href="https://atom.io"&gt;https://atom.io&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Getting Started&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;After downloading all the prerequisites, we are ready to get started. &lt;/p&gt;

&lt;p&gt;To start, let's create a folder on our desktop, or wherever you would like the Repo to be saved. I made the file name NFTProject. We are going to be downloading the GitHub Repo into this folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--koxzQHJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9efgh9jinwpiro4dvuih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--koxzQHJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9efgh9jinwpiro4dvuih.png" alt="Image description" width="446" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fork the GitHub Repo here: &lt;a href="https://github.com/HashLips/hashlips_art_engine"&gt;NFT Generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have forked it, we are going to download it. &lt;/p&gt;

&lt;p&gt;Open terminal and change the directory to the folder we created on the desktop(or wherever you have it). You can do this by copying the folder, going to terminal and typing CD and pasting the folder path. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--58W6nuGk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a99c7gtoeu0oyxq33516.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--58W6nuGk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a99c7gtoeu0oyxq33516.png" alt="Image description" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we are going to clone the repo into our folder with this command :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Git Clone https://github.com//hashlips_art_engine
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and of course, add your own Url to that so you download your own fork.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5AMbuY6w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpa7yaxaz4o2wwfjutp7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5AMbuY6w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpa7yaxaz4o2wwfjutp7.png" alt="Image description" width="880" height="510"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, cool. We got it downloaded, now we need to download the dependencies. Let's go into the new directory that we just downloaded by copying the new folder inside the folder we made. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bSorcMFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbcn1dcry7dcjzs4lxik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bSorcMFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbcn1dcry7dcjzs4lxik.png" alt="Image description" width="880" height="488"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Then, go to your terminal window and type in CD and paste the new path. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lWpc8VtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/08y136yb6p485owjyp9q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lWpc8VtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/08y136yb6p485owjyp9q.png" alt="Image description" width="880" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you're in the new folder we downloaded, let's install the dependencies by running a few lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Yarn install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Sudo NPM install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I use Sudo for NPM because sometimes it has authorization issues.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L5SRlZkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4nrjsaun7mp2n28vnz6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L5SRlZkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4nrjsaun7mp2n28vnz6.png" alt="Image description" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, we can actually build the images from the layers already provided! All we have to do is run a simple command in our terminal. &lt;/p&gt;

&lt;p&gt;So, in terminal run this code while in the hashlips_art_engine directory(which you should already be in) :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P-gL2fM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtbgmksimu6s8tbcsjmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P-gL2fM7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtbgmksimu6s8tbcsjmm.png" alt="Image description" width="880" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, if we go back into our Code Editor, you'll notice a Folder named Build was created. If we open that up, you'll see the images that were created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zv_Tt59e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1tu4fz0za3wuw58njs5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zv_Tt59e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1tu4fz0za3wuw58njs5.png" alt="Image description" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's cool and all, but ..let's add our own layers and build it... &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updating-the-configjs-file"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Updating The Config.js File&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;I'm going to be using my own images that's an actual project, so I can't share them. Feel free to create your own. &lt;/p&gt;

&lt;p&gt;Alright, let's open the hashlips_art_engine file in our Code Text Editor (I recommended downloading Atom in the peereqs).&lt;/p&gt;

&lt;p&gt;Go to the SRC Folder and open up the Config.js file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7pk4EF0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4evppybby0qxvz987vo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pk4EF0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4evppybby0qxvz987vo.png" alt="Image description" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
A few things we want to do in this file, so lets go over those..&lt;/p&gt;

&lt;p&gt;First, let's change the name, description. This can be whatever you'd like. Just leave the baseUri as-is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFUaJVni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg8zk5xsp2aebpid7ip1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFUaJVni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg8zk5xsp2aebpid7ip1.png" alt="Image description" width="880" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, lets change the Sol address to our personal one( use your own, or use mine haha). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xajGD1Ud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/je0rkotxzkcrlttbulu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xajGD1Ud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/je0rkotxzkcrlttbulu6.png" alt="Image description" width="880" height="576"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The growEditionSizeTo is the amount of images you want to make. I'll just do a small amount for the example. &lt;/p&gt;

&lt;p&gt;Now, lets add our own layers below that line. You'll see layersOrder below the editions. That is where we will update the layer order when we make new ones in the file. &lt;/p&gt;

&lt;p&gt;Lets, head over to the hashlips_art_engine on our desktop(or wherever saved) and lets go into the layers folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fpude_qt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ip8abijec46j6xhe17zj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fpude_qt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ip8abijec46j6xhe17zj.png" alt="Image description" width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once in the layer folder, you should see a list of layers with titles associated to them. These are the same titles that are in out Config.js file under layersOrder. The order of these DOES matter. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2VJHXysf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0llargpirxpss3hyf1v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2VJHXysf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0llargpirxpss3hyf1v.png" alt="Image description" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GO ahead and open up the Bottom lid file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3TlV5s-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/603690u9hyi5446wxm0c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3TlV5s-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/603690u9hyi5446wxm0c.png" alt="Image description" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll notice there is the name of the file and then a # with a number. The # with the number is the rarity weight 1-100. 1 being the rarest and 100 being most common.&lt;/p&gt;

&lt;p&gt;Since we have our own layers, we are going to delete all of the files inside of the layers folder, so it's fully empty.&lt;/p&gt;

&lt;p&gt;Start by making a new folder inside the layer folder and name it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F85xVQ2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6di6evbqfv6aj7hn7f0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F85xVQ2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6di6evbqfv6aj7hn7f0.png" alt="Image description" width="880" height="540"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, go ahead and put the new layers inside of that folder.. like this..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EEmGX1F6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdlusm4kbnwk64cgpkwc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EEmGX1F6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdlusm4kbnwk64cgpkwc.png" alt="Image description" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your images will look different, these are just the ones I'm using.&lt;/p&gt;

&lt;p&gt;Now, let's rename the files in here so that it we have the rarity weights. You can name the files whatever you want, just make sure to add # and a number to say the rarity. For example : green#50.png &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--necGijpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23xlgcv7bj9uvuwsanij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--necGijpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23xlgcv7bj9uvuwsanij.png" alt="Image description" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And just add all your layers the same way.&lt;/p&gt;

&lt;p&gt;Now that we have all the layers added and all of our images correctly labeled in the format of green#50.png. My layers folder looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7vCUFliK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdcez9sehufxj0sq5n8j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7vCUFliK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdcez9sehufxj0sq5n8j.png" alt="Image description" width="880" height="465"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we need to change the order of the layer in our code. Lets head back over to our Code Viewer, and go to the Config.js file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QURaX7Ck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9qwi78drbu0s4yfted1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QURaX7Ck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9qwi78drbu0s4yfted1.png" alt="Image description" width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need to match this order to the order we have in our Layer file we just made.&lt;/p&gt;

&lt;p&gt;Your order will be different, but here is mine:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zbsf7jGJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nbxvmclj0oth828unl8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zbsf7jGJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nbxvmclj0oth828unl8.png" alt="Image description" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay cool, now all we gotta do is build it. Lets go back to terminal, and in our Cd hashlips_art_engine, we want to run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ksFtdxSd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cle42my5a4j9wxkjdlr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ksFtdxSd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cle42my5a4j9wxkjdlr.png" alt="Image description" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And.. if we head back over to our build file that we talked about before, you'll see the new images with the layers you updated. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nzyqkms0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jyyrizm38yqqwgm04nw7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nzyqkms0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jyyrizm38yqqwgm04nw7.png" alt="Image description" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty sweet huh?!&lt;/p&gt;

&lt;p&gt;Okay, there are a few other things that you can do. But first, let me just show you that the images also come with Meta data.&lt;/p&gt;

&lt;p&gt;If you go back to you Code Editor and go to the build file, you'll notice there is a json file. Open it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C6OnO6g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n70l6ik6l086vgod8795.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C6OnO6g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n70l6ik6l086vgod8795.png" alt="Image description" width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you'll see each image has it's own Meta Data. Okay dope.&lt;/p&gt;

&lt;p&gt;Lets head back to our Terminal and run :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run preview
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if we go back to our build file, you'll see a preview image that compiles all the images together into one big collage. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RA1-thpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eztx2752x1qryxhlvc94.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RA1-thpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eztx2752x1qryxhlvc94.png" alt="Image description" width="250" height="50"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay cool, that's pretty dope, but let's try a different one. &lt;/p&gt;

&lt;p&gt;If you want to create another folder with all the original pictures(this doesn't delete the originals) pixelated, you will run :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run pixelate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iy5-zh8G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8z7uae56qkhbfamz3lr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iy5-zh8G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8z7uae56qkhbfamz3lr.png" alt="Image description" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll now see a new folder with your images in pixelated form (which is MAD popular right now).&lt;/p&gt;

&lt;p&gt;To change how pixelated the images come out, go over to our Config.js file in the code viewer and go down to line 68, and change the number to the left of the / where the arrow is pointing. The higher it is, the better the quality:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AqUJZUrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0u69w4c2wi4l553dvkv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AqUJZUrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0u69w4c2wi4l553dvkv.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it! If you read the bottom of the Hash Lips GitHub you'll see a bit more info on different things that you can do with it!&lt;/p&gt;

&lt;p&gt;Thanks for tuning in with me and going through this Tutorial. I hope this helped out a few people!!!&lt;/p&gt;

&lt;p&gt;Feel free to shoot me a follow on my socials!!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt;: &lt;a href="https://github.com/coreyman11"&gt;https://github.com/coreyman11&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Twitter&lt;/strong&gt;: &lt;a href="https://twitter.com/OfficialCoreyS"&gt;https://twitter.com/OfficialCoreyS&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nft</category>
      <category>rust</category>
      <category>tutorial</category>
      <category>solana</category>
    </item>
    <item>
      <title>How to do a delete request in react</title>
      <author>Yasin</author>
      <pubDate>Wed, 19 Jan 2022 20:17:19 +0000</pubDate>
      <link>https://dev.to/yasin162/how-to-do-a-delete-request-in-react-1lf7</link>
      <guid>https://dev.to/yasin162/how-to-do-a-delete-request-in-react-1lf7</guid>
      <description>&lt;p&gt;Before check to make sure your backend is set up correctly before starting. Meaning your routes has a destroy route and the controller has the method.&lt;/p&gt;

&lt;p&gt;Make a function that every single time it's run fetches and deletes the object you want delete. So in my case I call it deletePost with the parameters of postId. That way it will match whatever route that is has the corresponding postId.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HXjRf-pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhtcw7g6553c4n74ddic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HXjRf-pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhtcw7g6553c4n74ddic.png" alt="Image description" width="880" height="232"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make a button that has an onClick with an anonymous function that takes in the function you just made and past through the data needed for the function. So in my situation it was a post.Id.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0dd8sbAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlkqwwgi0lcbd1awsvsu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0dd8sbAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlkqwwgi0lcbd1awsvsu.png" alt="Image description" width="880" height="113"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>Dart/Flutter da Json Ayrıştırma 💫 🌌 ✨</title>
      <author>Gülsen 🦋</author>
      <pubDate>Wed, 19 Jan 2022 20:06:44 +0000</pubDate>
      <link>https://dev.to/gulsenkeskin/dartflutter-da-json-ayristirma-104b</link>
      <guid>https://dev.to/gulsenkeskin/dartflutter-da-json-ayristirma-104b</guid>
      <description>&lt;p&gt;JSON'u ayrıştırmak, İnternet'ten veri alması gereken uygulamalar için çok yaygın bir görevdir.&lt;/p&gt;

&lt;p&gt;Ne kadar JSON verisi işlemeniz gerektiğine bağlı olarak iki seçeneğiniz vardır:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tüm JSON ayrıştırma kodunu manuel olarak yazın&lt;/li&gt;
&lt;li&gt;Kod oluşturma ile süreci otomatikleştirin&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bu kılavuz, aşağıdakiler dahil olmak üzere JSON'un Dart koduna manuel olarak nasıl ayrıştırılacağına odaklanacaktır :&lt;/p&gt;

&lt;p&gt;☼ JSON encoding (kodlama) ve decoding (kod çözme)&lt;br&gt;
☼ Type-safe (tip güvenli) model sınıfları tanımlama&lt;br&gt;
☼ Factory cunstructor kullanarak JSON'u Dart koduna ayrıştırma&lt;br&gt;
☼ Nullable/optional (null yapılabilir/isteğe bağlı) değerlerle çalışmak&lt;br&gt;
☼ Data validation (veri doğrulama)&lt;br&gt;
☼ JSON serializing&lt;br&gt;
☼ Complex/nested (karmaşık/iç içe) JSON verilerini ayrıştırma&lt;br&gt;
☼ deep_pick paketinin kullanımı&lt;/p&gt;

&lt;p&gt;Bu makalenin sonunda, sağlam JSON ayrıştırma ve doğrulama koduyla model sınıflarının nasıl yazılacağını öğreneceksiniz.&lt;/p&gt;

&lt;p&gt;Ve bir sonraki makalede , tüm ayrıştırma kodunu elle yazmak zorunda kalmamak için kod oluşturma araçlarıyla (code generation tools) JSON ayrıştırma hakkında bilgi edineceksiniz.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#json-kodlama-ve-kod-%C3%A7%C3%B6zme-encoding-and-decoding-json"&gt;
  &lt;/a&gt;
  JSON Kodlama ve Kod Çözme (Encoding and Decoding JSON)
&lt;/h2&gt;

&lt;p&gt;Ağ üzerinden bir JSON yanıtı gönderildiğinde, yükün tamamı bir dize olarak kodlanır .&lt;/p&gt;

&lt;p&gt;Ancak Flutter uygulamalarımızın içinde, verileri bir dizeden manuel olarak çıkarmak istemiyoruz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;final json = '{ "name": "Pizza da Mario", "cuisine": "Italian", "reviews": [{"score": 4.5,"review": "The pizza was amazing!"},{"score": 5.0,"review": "Very friendly staff, excellent service!"}]}';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bunun yerine JSON'un kodunu çözerek içeriği okuyabiliyoruz .&lt;/p&gt;

&lt;p&gt;JSON verilerini ağ üzerinden göndermek için önce kodlanması (encoded) veya serileştirilmesi (serialized) gerekir . Kodlama , bir veri yapısını (data structure) bir string'e dönüştürme işlemidir . Ters işlem, decoding veya deserialization (seri durumdan çıkarma) olarak adlandırılır . Dize olarak bir JSON yükü aldığınızda, kullanmadan önce kodunu çözmeniz (decode) veya seri durumdan çıkarmanız (deserialize) gerekir.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dart-ile-json-kodunu-%C3%A7%C3%B6zmed%C3%B6n%C3%BC%C5%9Ft%C3%BCrme-decoding-json-with-dartconvert"&gt;
  &lt;/a&gt;
  Dart ile JSON kodunu çözme:dönüştürme (Decoding JSON with dart:convert)
&lt;/h2&gt;

&lt;p&gt;Basit olması için, bu küçük JSON yükünü ele alalım:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//bu, ağdan aldığımız bazı yanıt verilerini temsil eder, örneğin:
// final response = await http.get(uri);
// final jsonData = response.body
final jsonData = '{ "name": "Pizza da Mario", "cuisine": "Italian" }';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;İçindeki anahtarları ve değerleri okumak için önce &lt;code&gt;dart:convert&lt;/code&gt; paketini kullanarak kodunu çözmemiz gerekiyor&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// 1. import dart:convert
import 'dart:convert';
// bu, ağdan aldığımız bazı yanıt verilerini temsil eder
final jsonData = '{ "name": "Pizza da Mario", "cuisine": "Italian" }';
// 2. json kodunu çöz
final parsedJson = jsonDecode(jsonData);
// 3. türü ve değeri yazdır
print('${parsedJson.runtimeType} : $parsedJson');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu kodu çalıştırırsak şu çıktıyı alırız:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_InternalLinkedHashMap&amp;lt;String, dynamic&amp;gt; : {name: Pizza da Mario, cuisine: Italian}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pratikte, sonuç türü ile aynıdır Map.&lt;/p&gt;

&lt;p&gt;_&lt;em&gt;InternalLinkedHashMap , sırayla Map'i uygulayan LinkedHashMap'in özel bir uygulamasıdır.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bu nedenle, anahtarlar String ve değerler dynamic türündedir . Bu mantıklıdır çünkü her JSON değeri primitive type (ilkel bir tür =&amp;gt; boolean/number/string) veya bir koleksiyon (list veya map) olabilir.&lt;/p&gt;

&lt;p&gt;Aslında, jsonDecode(), içinde ne olduğuna bakılmaksızın herhangi bir geçerli JSON yükü üzerinde çalışan genel bir yöntemdir. Tek yaptığı, kodunu çözmek ve dinamik bir değer döndürmek.&lt;/p&gt;

&lt;p&gt;Ancak Dart'ta dinamik değerlerle çalışırsak, &lt;strong&gt;strong type-safety&lt;/strong&gt; (güçlü tip güvenliğinin) tüm avantajlarını kaybederiz. Çok daha iyi bir yaklaşım, duruma göre (on a case-by-case basis) yanıt verilerimizi temsil eden bazı özel model sınıfları tanımlamaktır.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dart statik olarak yazılmış bir dil olduğundan, JSON verilerini gerçek dünya nesnelerini (yemek tarifi, çalışan vb.) temsil eden model sınıflarına dönüştürmek ve tür sisteminden (type system) en iyi şekilde yararlanmak önemlidir.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Öyleyse bunun nasıl yapılacağını görelim.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jsonu-bir-dart-modeli-s%C4%B1n%C4%B1f%C4%B1na-ayr%C4%B1%C5%9Ft%C4%B1rma"&gt;
  &lt;/a&gt;
  JSON'u bir Dart modeli sınıfına ayrıştırma
&lt;/h2&gt;

&lt;p&gt;Bu basit JSON verildiğinde:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "Pizza da Mario",
  "cuisine": "Italian"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Onu temsil edecek bir &lt;code&gt;Restaurant&lt;/code&gt;sınıfı yazabiliriz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Restaurant {
  Restaurant({required this.name, required this.cuisine});
  final String name;
  final String cuisine;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sonuç olarak, verileri şöyle okumak yerine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;parsedJson['name']; // dynamic
parsedJson['cuisine']; // dynamic
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;şöyle okuyabiliriz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;restaurant.name; //geçersiz kılınamaz, değişmez bir string olması garanti edilir
restaurant.cuisine; // geçersiz kılınamaz, değişmez bir stringolması garanti edilir
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu çok daha temizdir ve derleme zamanı güvenliği ( compile-time safety) elde etmek ve yazım hatalarını ve diğer hatalardan kaçınmak için tür sisteminden yararlanabiliriz.&lt;/p&gt;

&lt;p&gt;Ancak, parsedJson'umuzu bir Restaurant nesnesine nasıl dönüştüreceğimizi henüz belirlemedik!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#json-da-darta-factory-constructor-ekleme"&gt;
  &lt;/a&gt;
  JSON da Dart'a Factory Constructor Ekleme
&lt;/h2&gt;

&lt;p&gt;Bunu halletmek için bir factory constructor tanımlayalım:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;factory Restaurant.fromJson(Map&amp;lt;String, dynamic&amp;gt; data) {
  // note the explicit cast to String
  // this is required if robust lint rules are enabled
  final name = data['name'] as String;
  final cuisine = data['cuisine'] as String;
  return Restaurant(name: name, cuisine: cuisine);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Bir factory constructor, sonucu döndürmeden önce bazı işler yapmamıza (değişkenler oluşturma, bazı doğrulamalar gerçekleştirme) izin verdiği için JSON ayrıştırması (parsing) için iyi bir seçimdir . Bu, normal (generative-üretken) constructor'larla mümkün değildir.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Constructor'ı şu şekilde kullanabiliriz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// type: String
final jsonData = '{ "name": "Pizza da Mario", "cuisine": "Italian" }';
// type: dynamic (runtime type: _InternalLinkedHashMap&amp;lt;String, dynamic&amp;gt;)
final parsedJson = jsonDecode(jsonData);
// type: Restaurant
final restaurant = Restaurant.fromJson(parsedJson);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Çok daha iyi. Artık kodumuzun geri kalanı Restaurant class'ını kullanabilir ve Dart'ta güçlü tip güvenliğinin (type-safety) tüm avantajlarını elde edebilir.&lt;/p&gt;

&lt;p&gt;Bazen , belirli bir key/value çiftine sahip olan veya olmayan bazı JSON'ları ayrıştırmamız gerekir .&lt;/p&gt;

&lt;p&gt;Örneğin, bir restoranın ilk ne zaman açıldığını bize bildiren isteğe bağlı bir alanımız olduğunu varsayalım:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "Ezo Sushi",
  "cuisine": "Japanese",
  "year_opened": 1990
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Year_opened alanı isteğe bağlıysa (optional), onu model sınıfımızda boş bir değişkenle (nullable variable) temsil edebiliriz.&lt;/p&gt;

&lt;p&gt;İşte Restaurant sınıfı için güncellenmiş bir uygulama:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Restaurant {
  Restaurant({required this.name, required this.cuisine, this.yearOpened});
  final String name; // non-nullable
  final String cuisine; // non-nullable
  final int? yearOpened; // nullable

  factory Restaurant.fromJson(Map&amp;lt;String, dynamic&amp;gt; data) {
    final name = data['name'] as String; // cast as non-nullable String
    final cuisine = data['cuisine'] as String; // cast as non-nullable String
    final yearOpened = data['year_opened'] as int?; // cast as nullable int
    return Restaurant(name: name, cuisine: cuisine, yearOpened: yearOpened);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Genel bir kural olarak, isteğe bağlı JSON değerlerini (optional JSON values) null yapılabilir Dart özelliklerine (nullable Dart properties) eşlemeliyiz . Alternatif olarak, bu örnekte olduğu gibi, null yapılamayan Dart özelliklerini (non-nullable Dart properties) mantıklı bir varsayılan değerle kullanabiliriz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// note: all the previous properties have been omitted for simplicity
class Restaurant {
  Restaurant({
    // 1. required
    required this.hasIndoorSeating,
  });
  // 2. *non-nullable*
  final bool hasIndoorSeating;

  factory Restaurant.fromJson(Map&amp;lt;String, dynamic&amp;gt; data) {
    // 3. cast as *nullable* bool
    final hasIndoorSeating = data['has_indoor_seating'] as bool?;
    return Restaurant(
      // 4. varsayılan bir dddeğer atamak için ?? operatörünü kullanmak
      hasIndoorSeating: hasIndoorSeating ?? true,
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu durumda, varsayılan bir değer sağlamak için boş birleştirme operatörünü (&lt;strong&gt;null-coalescing operator&lt;/strong&gt;) &lt;code&gt;(??)&lt;/code&gt; nasıl kullandığımıza dikkat edin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#veri-do%C4%9Frulama"&gt;
  &lt;/a&gt;
  Veri Doğrulama
&lt;/h2&gt;

&lt;p&gt;Factory constructor kullanmanın bir yararı, gerekirse bazı ek doğrulamalar yapabilmemizdir.&lt;/p&gt;

&lt;p&gt;Örneğin, gerekli bir değer eksikse UnsupportedError veren bir savunma kodu yazabiliriz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;factory Restaurant.fromJson(Map&amp;lt;String, dynamic&amp;gt; data) {
  // casting as a nullable String so we can do an explicit null check
  final name = data['name'] as String?;
  if (name == null) {
    throw UnsupportedError('Invalid data: $data -&amp;gt; "name" is missing');
  }
  final cuisine = data['cuisine'] as String?;
  if (cuisine == null) {
    throw UnsupportedError('Invalid data: $data -&amp;gt; "cuisine" is missing');
  }
  final yearOpened = data['year_opened'] as int?;
  // Yukarıdaki if ifadeleri sayesinde, burada name ve cuisine değerlerinin  boş olmayacağı garanti edilir.
  return Restaurant(name: name, cuisine: cuisine, yearOpened: yearOpened);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Genel olarak, her bir değer için çalışmak API tüketicisi olarak bizim işimizdir:&lt;/p&gt;

&lt;p&gt;türü (String, int, vb.)&lt;br&gt;
isteğe bağlıysa veya değilse (nullable vs non-nullable)&lt;br&gt;
hangi değer aralığına izin verilirse&lt;/p&gt;

&lt;p&gt;Bu, JSON ayrıştırma kodumuzu daha sağlam hale getirecektir. Ve tüm doğrulamalar önceden yapıldığından , widget sınıflarımızda geçersiz verilerle uğraşmak zorunda kalmayacağız .&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tojson-ile-json-serile%C5%9Ftirme"&gt;
  &lt;/a&gt;
  toJson() ile JSON Serileştirme
&lt;/h2&gt;

&lt;p&gt;JSON'u ayrıştırmak yararlıdır, ancak bazen bir model nesnesini JSON'a geri dönüştürmek ve ağ üzerinden göndermek isteriz.&lt;/p&gt;

&lt;p&gt;Bunu yapmak için Restaurant sınıfımız için bir &lt;strong&gt;toJson()&lt;/strong&gt; yöntemi tanımlayabiliriz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// note the return type
Map&amp;lt;String, dynamic&amp;gt; toJson() {
  // return a map literal with all the non-null key-value pairs
  return {
    'name': name,
    'cuisine': cuisine,
    if (yearOpened != null) 'year_opened': yearOpened,
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ve bunu şöyle kullanabiliriz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// bir Restoran nesnesi verildi
final restaurant = Restaurant(name: "Patatas Bravas", cuisine: "Spanish");
// convert it to map
final jsonMap = restaurant.toJson();
// onu bir JSON dizgisine kodla
final encodedJson = jsonEncode(jsonMap);
// sonra herhangi bir ağ paketiyle istek gövdesi olarak gönder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#i%CC%87%C3%A7-i%CC%87%C3%A7e-json%C4%B1-ayr%C4%B1%C5%9Ft%C4%B1rma-list-of-map"&gt;
  &lt;/a&gt;
  İç İçe JSON'ı Ayrıştırma: List of Map
&lt;/h2&gt;

&lt;p&gt;Artık JSON ayrıştırma ve doğrulamanın temellerini anladığımıza göre, ilk örneğimize geri dönelim ve nasıl ayrıştırılacağını görelim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "Pizza da Mario",
  "cuisine": "Italian",
  "reviews": [
    {
      "score": 4.5,
      "review": "The pizza was amazing!"
    },
    {
      "score": 5.0,
      "review": "Very friendly staff, excellent service!"
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Model sınıflarını ve tip güvenliğini (type-safety) sonuna kadar kullanmak istiyoruz, bu yüzden bir Review sınıfı tanımlayalım:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Review {
  Review({required this.score, this.review});
  // non-nullable - puan alanının her zaman mevcut olduğu varsayılır
  final double score;
  // nullable - inceleme alanının isteğe bağlı olduğunu varsayarsak
  final String? review;

  factory Review.fromJson(Map&amp;lt;String, dynamic&amp;gt; data) {
    final score = data['score'] as double;
    final review = data['review'] as String?;
    return Review(score: score, review: review);
  }

  Map&amp;lt;String, dynamic&amp;gt; toJson() {
    return {
      'score': score,
      // burada, null değerleri hesaba katmak için collection-if kullanıyoruz
      if (review != null) 'review': review,
    };
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ardından, bir reviews listesi eklemek için Restoran class'ını güncelleyebiliriz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Restaurant {
  Restaurant({
    required this.name,
    required this.cuisine,
    this.yearOpened,
    required this.reviews,
  });
  final String name;
  final String cuisine;
  final int? yearOpened;
  final List&amp;lt;Review&amp;gt; reviews;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ayrıca factory cunstructor'ını da güncelleyebiliriz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;factory Restaurant.fromJson(Map&amp;lt;String, dynamic&amp;gt; data) {
  final name = data['name'] as String;
  final cuisine = data['cuisine'] as String;
  final yearOpened = data['year_opened'] as int?;
  // reviews eksik olabileceğinden null yapılabilir bir listeye dönüştürün
  final reviewsData = data['reviews'] as List&amp;lt;dynamic&amp;gt;?;
  // reviews eksik değilse
  final reviews = reviewsData != null
      // her review'i  bir Review object'e eşleyin
      ? reviewsData.map((reviewData) =&amp;gt; Review.fromJson(reviewData))
        // map() yinelenebilir bir değer döndürür böylece onu listeye çevirebiliriz
        .toList()
      // geri dönüş değeri olarak boş bir liste kullanın
      : &amp;lt;Review&amp;gt;[];
  // tüm argümanları geçen sonucu döndür
  return Restaurant(
    name: name,
    cuisine: cuisine,
    yearOpened: yearOpened,
    reviews: reviews,
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;• reviews eksik olabilir, bu nedenle nullable bir Listeye yayınlıyoruz.&lt;br&gt;
• listedeki değerlerin herhangi bir türü olabilir, bu nedenle List kullanıyoruz.&lt;br&gt;
• Review.fromJson() kullanarak her dinamik değeri bir Review nesnesine dönüştürmek için .map() operatörünü kullanırız.&lt;br&gt;
• reviews eksikse, yedek olarak boş bir liste ([]) kullanırız.&lt;/p&gt;

&lt;p&gt;Bu özel uygulama, neyin boş olup olmayacağı, hangi yedek değerlerin kullanılacağı vb. hakkında bazı varsayımlarda bulunur. Kullanım durumunuz için en uygun ayrıştırma kodunu yazmanız gerekir.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#i%CC%87%C3%A7-i%CC%87%C3%A7e-nested-modelleri-serile%C5%9Ftirme"&gt;
  &lt;/a&gt;
  İç İçe (Nested) Modelleri Serileştirme
&lt;/h2&gt;

&lt;p&gt;Son adım olarak, bir Restoranı tekrar Map'e dönüştürmek için toJson() yöntemini burada bulabilirsiniz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Map&amp;lt;String, dynamic&amp;gt; toJson() {
  return {
    'name': name,
    'cuisine': cuisine,
    if (yearOpened != null) 'year_opened': yearOpened,
    'reviews': reviews.map((review) =&amp;gt; review.toJson()).toList(),
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tüm iç içe değerleri de serileştirmemiz gerektiğinden (yalnızca Restaurant sınıfının kendisini değil) List öğesini nasıl List&amp;gt;'e dönüştürdüğümüze dikkat edin.&lt;/p&gt;

&lt;p&gt;Yukarıdaki kod ile bir Restaurant nesnesi oluşturup onu tekrar kodlanıp yazdırılabilen veya ağ üzerinden gönderilebilen bir map'e dönüştürebiliriz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;final restaurant = Restaurant(
  name: 'Pizza da Mario',
  cuisine: 'Italian',
  reviews: [
    Review(score: 4.5, review: 'The pizza was amazing!'),
    Review(score: 5.0, review: 'Very friendly staff, excellent service!'),
  ],
);
final encoded = jsonEncode(restaurant.toJson());
print(encoded);
// output: {"name":"Pizza da Mario","cuisine":"Italian","reviews":[{"score":4.5,"review":"The pizza was amazing!"},{"score":5.0,"review":"Very friendly staff, excellent service!"}]}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#derin-de%C4%9Ferler-deep-values-se%C3%A7mek"&gt;
  &lt;/a&gt;
  Derin Değerler (Deep Values) Seçmek
&lt;/h2&gt;

&lt;p&gt;Tüm bir JSON belgesini type-safe model sınıflarına ayrıştırmak çok yaygın bir kullanım durumudur.&lt;/p&gt;

&lt;p&gt;Ancak bazen derinden iç içe (deeply nested) olabilecek bazı belirli değerleri okumak isteriz.&lt;/p&gt;

&lt;p&gt;Örnek JSON'umuzu bir kez daha ele alalım:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "Pizza da Mario",
  "cuisine": "Italian",
  "reviews": [
    {
      "score": 4.5,
      "review": "The pizza was amazing!" 
    },
    {
      "score": 5.0,
      "review": "Very friendly staff, excellent service!"
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;reviews listesindeki ilk score değerini almak isteseydik şöyle yazardık:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;final decodedJson = jsonDecode(jsonData); // dynamic
final score = decodedJson['reviews'][0]['score'] as double;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu geçerli Dart kodudur çünkü decodedJson değişkeni dinamiktir ve onunla birlikte indis operatörünü kullanabiliriz ([]).&lt;/p&gt;

&lt;p&gt;Ancak yukarıdaki kod ne null safe ne de type safe ve ayrıştırılan değeri açıkça istediğimiz türe (double) çevirmemiz gerekiyor.&lt;/p&gt;

&lt;p&gt;Bunu nasıl iyileştirebiliriz?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deeppick-paketi"&gt;
  &lt;/a&gt;
  deep_pick Paketi
&lt;/h2&gt;

&lt;p&gt;Deep_pick paketi, tür açısından type-safe API ile JSON parsing'i basitleştirir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'dart:convert';
import 'package:deep_pick/deep_pick.dart';

final decodedJson = jsonDecode(jsonData); // dynamic
final score = pick(decodedJson, 'reviews', 0, 'score').asDoubleOrThrow();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;deep_pick, ilkel türleri (primitive types), listeleri, mapleri, DateTime nesnelerini ve daha fazlasını ayrıştırmak için kullanabileceğimiz çeşitli esnek API'ler sunar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tostring-y%C3%B6ntemi-ekleme"&gt;
  &lt;/a&gt;
  toString() yöntemi ekleme
&lt;/h2&gt;

&lt;p&gt;Model sınıflarıyla çalışırken, konsola kolayca yazdırılabilmeleri için bir toString() yöntemi sağlamak çok yararlıdır.&lt;/p&gt;

&lt;p&gt;Zaten bir toJson() yöntemimiz olduğundan, onu şu şekilde kullanabiliriz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@override
String toString() =&amp;gt; toJson().toString();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sonuç olarak, restoranımızı doğrudan şu şekilde yazdırabiliriz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(restaurant);
// output: {name: Pizza da Mario, cuisine: Italian, reviews: [{score: 4.5, review: The pizza was amazing!}, {score: 5.0, review: Very friendly staff, excellent service!}]}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#performans-hakk%C4%B1nda-not"&gt;
  &lt;/a&gt;
  Performans Hakkında Not
&lt;/h2&gt;

&lt;p&gt;Küçük JSON belgelerini ayrıştırdığınızda, uygulamanızın yanıt vermeye devam etmesi ve performans sorunları yaşamaması muhtemeldir.&lt;/p&gt;

&lt;p&gt;Ancak çok büyük JSON belgelerinin ayrıştırılması, arka planda en iyi şekilde ayrı bir Dart isolate üzerinde yapılan pahalı hesaplamalara neden olabilir . Resmi belgelerin bu konuda iyi bir kılavuzu var:&lt;br&gt;
• &lt;a href="https://docs.flutter.dev/cookbook/networking/background-parsing"&gt;JSON'u arka planda ayrıştırın&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C3%A7%C3%B6z%C3%BCm"&gt;
  &lt;/a&gt;
  Çözüm
&lt;/h2&gt;

&lt;p&gt;JSON serileştirme çok sıradan bir iştir. Ancak uygulamalarımızın doğru çalışmasını istiyorsak, bunu doğru yapmamız ve ayrıntılara dikkat etmemiz çok önemlidir:&lt;/p&gt;

&lt;p&gt;• JSON verilerini seri hale getirmek için &lt;code&gt;'dart:convert'&lt;/code&gt; öğesinden &lt;code&gt;jsonEncode()&lt;/code&gt; ve &lt;code&gt;jsonDecode()&lt;/code&gt; kullanın&lt;/p&gt;

&lt;p&gt;• Uygulamanızdaki tüm alana özgü (domain-specific) JSON nesneleri için &lt;code&gt;fromJson()&lt;/code&gt; ve &lt;code&gt;toJson()&lt;/code&gt; ile model sınıfları oluşturun&lt;/p&gt;

&lt;p&gt;• Ayrıştırma kodunu daha sağlam hale getirmek için &lt;code&gt;fromJson()&lt;/code&gt; içine explicit casts, validation ve boş denetimler(null checks) ekleyin&lt;/p&gt;

&lt;p&gt;• İç içe (nested) JSON verileri (list of maps) için &lt;code&gt;fromJson()&lt;/code&gt; ve &lt;code&gt;toJson()&lt;/code&gt; yöntemlerini uygulayın&lt;/p&gt;

&lt;p&gt;• JSON'u tür açısından güvenli(type-safe) bir şekilde ayrıştırmak (parse) için &lt;strong&gt;deep_pick&lt;/strong&gt; paketini kullanmayı düşünün&lt;/p&gt;

&lt;p&gt;Farklı model sınıfınız varsa veya her sınıfın birçok özelliği varsa, tüm ayrıştırma kodunu elle yazmak zaman alıcı ve hataya açık hale gelir.&lt;/p&gt;

&lt;p&gt;Bu gibi durumlarda kod oluşturma(code generation) çok daha iyi bir seçenektir.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codewithandrea.com/articles/parse-json-dart/#picking-deep-values"&gt;resource&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dart</category>
      <category>flutter</category>
      <category>networking</category>
      <category>json</category>
    </item>
    <item>
      <title>How I Broke GitHub Copilot, And Got It To Talk.</title>
      <author>Ido Nov</author>
      <pubDate>Wed, 19 Jan 2022 20:03:28 +0000</pubDate>
      <link>https://dev.to/idonov/how-i-broke-github-copilot-and-got-it-to-talk-72j</link>
      <guid>https://dev.to/idonov/how-i-broke-github-copilot-and-got-it-to-talk-72j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;I used GitHub Copilot to write English instead of code and found out it can do some surprising non-code-related tasks. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WhHsfB4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ch8c0pl7ud43jcyuhtz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WhHsfB4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ch8c0pl7ud43jcyuhtz.png" alt="Image description" width="734" height="266"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Hi, my name is Ido and I’m a full-stack dev at DagsHub. I love coding and I love machine learning and AI technologies. A year ago, when OpenAI announced GPT-3 &amp;amp; its public beta I was fascinated by its abilities, but I didn’t have an API key, so I played with everything that was built with GPT-3 and was free-to-use back then. Naturally, when I heard Microsoft is coming out with GitHub Copilot I signed up for the waitlist and a few months later, I got access!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-github-copilot-and-what-it-has-to-do-with-gpt3"&gt;
  &lt;/a&gt;
  What is GitHub Copilot, and what it has to do with GPT-3
&lt;/h2&gt;

&lt;p&gt;In June 2020, OpenAI released a language model called GPT-3. This model is really good at understanding natural language and surprisingly, it has some coding capabilities even though it wasn’t trained on code. After this discovery, OpenAI developed Codex. Codex is another GPT language model that has fewer parameters - runs faster and is not as flexible as GPT-3, has more memory - can read more and grasp context better, and lastly, it was trained and fine-tuned with code examples from GitHub and Stack Exchange. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NXh5HMLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iuuxb5t8kd0spg3dgoi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NXh5HMLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iuuxb5t8kd0spg3dgoi.png" alt="Image description" width="880" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unsurprisingly Codex is a lot better than GPT-3 at writing code. Knowing that, we shouldn’t expect it to be successful at anything else. Luckily, I didn’t know all that so I tried anyway.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-not-code"&gt;
  &lt;/a&gt;
  Let’s not code!
&lt;/h2&gt;

&lt;p&gt;I heard that GitHub Copilot was good at writing code, and it really is. On my day to day work it’s surprising every time to see it complete the code I was about to write. But after getting over the “basics”, I was much more interested in using as an intermediary for playing with GPT-3. I began by opening a blank text file and asking it a simple question. If you just write a question in an empty file it won’t be enough for it to auto-complete an answer, but I discovered that if I give Copilot a bit more context with a speaker name or a Q&amp;amp;A format it answers like a champ! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_2xwmW4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dagshub.com/blog/content/images/2022/01/ezgif-5-10b53181a0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2xwmW4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dagshub.com/blog/content/images/2022/01/ezgif-5-10b53181a0.gif" alt="Image description" width="662" height="212"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s alive! kind of scary. When repeating this conversation I always get slightly different results that make the conversation go in a different direction, it’s like talking to a different bot each time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#copilot-reverse-coding"&gt;
  &lt;/a&gt;
  Copilot “reverse” coding
&lt;/h2&gt;

&lt;p&gt;Knowing that it still understands English well enough to talk, I tried to make it do the opposite of what it was designed to do. Meaning, instead of turning English to code, turn my coworker's code to English!&lt;/p&gt;

&lt;p&gt;I tried writing things like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# This function
# The code above
# A description of this code: 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the best way I found to do it was simply to write “Pseudo code:” after a chunk of code and let Copilot do its magic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fbLl8Oe3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/0%2AiXSr0DDUKOEuxnhd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fbLl8Oe3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/0%2AiXSr0DDUKOEuxnhd.gif" alt="Image description" width="880" height="331"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Notice it even completes the ‘return response’ line that was already written below it!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This method worked surprisingly well for me, on a regular basis! This might actually be useful when trying to understand some code you didn’t write.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#verifying-ai-alignment-and-tone-of-voice"&gt;
  &lt;/a&gt;
  Verifying AI alignment and tone of voice
&lt;/h2&gt;

&lt;p&gt;With such a deep understanding that I found the model to have, I had to check if it had any dark intentions. To make sure the answers I get are from the AI’s point of view, I used Human and AI speakers, instead of the Q&amp;amp;A from before, basically play-acting with Codex to see what it thinks of the situation. Luckily, looks like we are safe for now. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HYzkKXKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/0%2AqxsKB8T_A-q1K0bq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HYzkKXKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/0%2AqxsKB8T_A-q1K0bq.gif" alt="Image description" width="736" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After some more play-acting, I noticed a bit of a strange thing. The way letters are formatted had an effect on its behavior, and I’m not talking about compilation errors! It might mean it understands the difference in tone between TALKING LIKE THIS, or like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HP03XZ0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/0%2ALck5NWkdi7jrW_Dl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HP03XZ0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/0%2ALck5NWkdi7jrW_Dl.gif" alt="Image description" width="736" height="270"&gt;&lt;/a&gt;&lt;br&gt;
I'd say normal captioning makes it try to be reasonable, lowercase makes it less formal and excited, and upper case just makes it act like an asshole.&lt;/p&gt;

&lt;p&gt;I wonder if it affects the code it generates as well&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--75hqQzRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5eah91o3f7rln97fgdw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--75hqQzRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5eah91o3f7rln97fgdw.png" alt="Image description" width="880" height="271"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NU1CzPes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwcuhkn39k235ivja53j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NU1CzPes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwcuhkn39k235ivja53j.png" alt="Image description" width="880" height="217"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YiP4ZkCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gek4quqicmc67633btsg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YiP4ZkCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gek4quqicmc67633btsg.png" alt="Image description" width="880" height="220"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are some subtle differences, notice the naming of the function and the string it chose to test it with.&lt;/p&gt;

&lt;p&gt;Also check out the ‘output:’ prompt made it calculate the output of the function accurately every time!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-copilot-skills"&gt;
  &lt;/a&gt;
  Other Copilot Skills
&lt;/h2&gt;

&lt;p&gt;Furthermore I learned it can complete number series’s, summarize Wikipedia pages, come up with blog ideas and even write some poetry!&lt;/p&gt;

&lt;p&gt;This is not trivial at all, note that this is not actually the original general purpose GPT-3. Codex has 12-billion parameters compared to GPT-3’s 175 billion and it was trained only on open source code. The fact that it does so well is insane to me!&lt;/p&gt;

&lt;p&gt;For example, I started writing the beginning of “Two Roads” by Robert Frost and found out it knew the song but didn’t memorize all of it, so after some point it started to improvise&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-VI2nFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/0%2AoGTxfMLIv3fZ3wCW.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-VI2nFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/0%2AoGTxfMLIv3fZ3wCW.gif" alt="Image description" width="848" height="910"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you know where the original stops and the improv starts?&lt;/p&gt;

&lt;p&gt;After gaining all this knowledge, I wanted to go meta. I wondered if I can make the Copilot generate code that will make it write code. Then, I may be able to somehow combine it and create an AI monster to rule the world.&lt;/p&gt;

&lt;p&gt;I’m not quite there yet...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sz6YlW6d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeeluexa7i2qfybgdz7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sz6YlW6d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeeluexa7i2qfybgdz7a.png" alt="Image description" width="880" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But look forward to more updates in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;After experimenting with GitHub Copilot I understand better how little we know about the AI we are building. There are SO MANY unexpected results and different ways to use this one model that was fine tuned for only one task! This was only a small sample of experiments that could fit into this blog post, but there are a lot more and I can’t wait to see your experiments as well! Please share your results in our &lt;a href="https://discord.gg/pk22NradY4"&gt;Discord Server&lt;/a&gt; or post them with #CopilotNotCode.&lt;/p&gt;

&lt;p&gt;And what do we know, maybe your autonomous car will unintentionally also have feelings, and your keyboard will try to tell you it loves you, but if we don’t listen, we might never know.&lt;/p&gt;

&lt;p&gt;UPDATE: This post got to the front page of Hacker News, so you can &lt;a href="https://news.ycombinator.com/item?id=29920035"&gt;view and join the discussion&lt;/a&gt; there as well!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://dagshub.com/blog/github-copilot-not-code/"&gt;dagshub.com&lt;/a&gt; on January 10, 2022.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>ai</category>
      <category>github</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Create A Simple PHP Server Using VSCode Tasks</title>
      <author>The Dev Drawer</author>
      <pubDate>Wed, 19 Jan 2022 20:01:56 +0000</pubDate>
      <link>https://dev.to/thedevdrawer/create-a-simple-php-server-using-vscode-tasks-4cb2</link>
      <guid>https://dev.to/thedevdrawer/create-a-simple-php-server-using-vscode-tasks-4cb2</guid>
      <description>&lt;p&gt;Learn how to use Visual Studio Code tasks to build a PHP server without XAMPP or WAMP. In this tutorial, we will create 2 tasks in VS Code. One will create our PHP server in the terminal, the other will then launch Chrome and open our server. The end result is a quick and easy PHP dev environment that launches automatically with a quick key combination.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#view-this-on-youtube"&gt;
  &lt;/a&gt;
  View This On YouTube
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/P8UNHVO9qns"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Launch a build task on Windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CTRL + SHIFT + B
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Launch a build task on Mac:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CMD + SHIFT + B
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-task-file-in-vscode"&gt;
  &lt;/a&gt;
  Create A Task File in VSCode
&lt;/h2&gt;

&lt;p&gt;When you are in VSCode, you can launch your tasks by using the key combinations above. It will either run your current build tasks or ask you to create a new one if you have not previously created one.&lt;/p&gt;

&lt;p&gt;If you do not use the key combinations, you can go to Terminal &amp;gt; Run Build Task to go to the same place.&lt;/p&gt;

&lt;p&gt;Click the "Configure Build Task" option that appears.&lt;/p&gt;

&lt;p&gt;Once you are in your tasks.json you should see a default command that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "label": "echo",
    "type": "shell",
    "command": "echo Hello"
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can be left in this file but you need to add the following in order to get your task for the PHP server to work properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#php-server"&gt;
  &lt;/a&gt;
  PHP Server
&lt;/h2&gt;

&lt;p&gt;In the same file, you can now add the following lines of code to create a simple PHP server. Make sure your json commands are comma separated. So each time you add a new task, add a comma after the previous task, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "label": "echo",
    "type": "shell",
    "command": "echo Hello"
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can add your server task.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "label": "php-server",
    "type": "shell",
    "command": "php -S localhost:8000",
    "group": {
        "kind": "build",
        "isDefault": true
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can test this by running your build tasks using the key combination or the Terminal menu option. This should start a local PHP server at the address localhost:8000.&lt;/p&gt;

&lt;p&gt;Keep in mind, this tutorial allows you to render PHP code but does not come equipped with a database or some other services you would expect with something like WAMP or MAMP. This is to simply run your PHP code without an external service. You can still use your PHP code to hit external APIs but it does not spin up your own database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launch-chrome"&gt;
  &lt;/a&gt;
  Launch Chrome
&lt;/h2&gt;

&lt;p&gt;To make this a little easier to work with while I am developing, I like to make it open my browser to the newly created server. You can do this by create a new task and pointing it to your Chrome (or other browser) .exe file.&lt;/p&gt;

&lt;p&gt;Add the following as a task in your json file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "label": "launch-chrome",
    "type": "shell",
    "command": "chrome.exe http://localhost:8000/",
    "options": {
        "cwd": "C:\\Program Files (x86)\\Google\\Chrome\\Application"
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure your "cwd" is pointing to your browers's exe file. Mine currently resides in the following folder:&lt;br&gt;
&lt;code&gt;C:\Program Files (x86)\Google\Chrome\Application&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you should have either 2 or 3 tasks in this json file. If you run the build tasks, it will not open the browser, this is because that task is not tied into anything else. We need to add the following code to your server build task to make them work together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"dependsOn": [
    "launch-chrome"
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The server build task should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "label": "php-server",
    "type": "shell",
    "command": "php -S localhost:8000",
    "group": {
        "kind": "build",
        "isDefault": true
    },
    "dependsOn": [
        "launch-chrome"
    ]
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run your build task and it should start the server, then open Chrome if everything is setup as it should be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-code"&gt;
  &lt;/a&gt;
  Final Code
&lt;/h2&gt;

&lt;p&gt;This is what my json looks like. If you are starting fresh, your should look like this as well. If you have tasks already, just make sure the previous code was added to the existing tasks and you select the build you want to run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "echo",
            "type": "shell",
            "command": "echo Hello"
        },
        {
            "label": "php-server",
            "type": "shell",
            "command": "php -S localhost:8000",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "dependsOn": [
                "launch-chrome"
            ]
        },
        {
            "label": "launch-chrome",
            "type": "shell",
            "command": "chrome.exe http://localhost:8000/",
            "options": {
                "cwd": "C:\\Program Files (x86)\\Google\\Chrome\\Application"
            }
        },
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>vscode</category>
      <category>build</category>
      <category>task</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why you Should Track Your Blog Traffic with Google Analytics</title>
      <author>Sean Coughlin</author>
      <pubDate>Wed, 19 Jan 2022 19:52:02 +0000</pubDate>
      <link>https://dev.to/scc33/why-you-should-track-your-blog-traffic-with-google-analytics-2nc6</link>
      <guid>https://dev.to/scc33/why-you-should-track-your-blog-traffic-with-google-analytics-2nc6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-google-analytics"&gt;
  &lt;/a&gt;
  What is Google Analytics?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://analytics.google.com"&gt;Google Analytics&lt;/a&gt; was &lt;a href="https://en.wikipedia.org/wiki/Google_Analytics"&gt;launched in 2005&lt;/a&gt; as a tool for reporting web traffic. It is one of many &lt;a href="https://en.wikipedia.org/wiki/Web_analytics"&gt;web analytics tools&lt;/a&gt;. &lt;a href="https://business.adobe.com/products/analytics/adobe-analytics.html"&gt;Adobe Analytics&lt;/a&gt; and &lt;a href="https://www.hubspot.com/products/marketing/analytics"&gt;Hubspot Analytics&lt;/a&gt; are example competitors to Google Analytics.&lt;/p&gt;

&lt;p&gt;Google Analytics is by far the most popular web analytics tool. Currently, Google's is used by &lt;a href="https://w3techs.com/technologies/overview/traffic_analysis"&gt;56.8% of all websites and 34.3% of sites don't use any analytics tools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The popularity stems from the power and ease of setup. Google Analytics offers a plethora of detail about users. The core features entail measuring the number of site visitors, sessions, and duration spent on the site. It can also measure more advanced metrics like &lt;a href="https://en.wikipedia.org/wiki/Bounce_rate"&gt;bounce rate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sa_sC8_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642460576202/HFo5mCzQo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sa_sC8_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642460576202/HFo5mCzQo.png" alt="Screenshot of Google Analytics Dashboard" width="880" height="283"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Best of all, it's totally free :). If you want to learn more about the many features, Google offers an &lt;a href="https://analytics.google.com/analytics/academy/"&gt;academy&lt;/a&gt; to help you learn.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l8g59Utq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642610354180/qN6iUPnjlZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l8g59Utq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642610354180/qN6iUPnjlZ.png" alt="Google Analytics logo" width="880" height="283"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-analytics-important"&gt;
  &lt;/a&gt;
  Why is analytics important?
&lt;/h2&gt;

&lt;p&gt;Every content creator wants to know how their work is being received by the community. However, understanding your readers can be like staring into a void. Without proper intelligence, it is impossible to know what content is gaining traction and where you should focus your creativity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KdIG01hu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642612918070/RnsbIYL6v.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KdIG01hu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642612918070/RnsbIYL6v.jpeg" alt="Question mark expressing confusion" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@emilymorter?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Emily Morter&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/confusion?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Monitoring your website &lt;a href="https://en.wikipedia.org/wiki/Web_traffic"&gt;traffic&lt;/a&gt; can be a helpful way of understanding your reader. Suppose you write an article about making chocolate chip cookies. You've been eating your chocolate chip cookies for years so you think they are nothing special. However, your readers think your chocolate chip cookies are the greatest thing since sliced bread!&lt;/p&gt;

&lt;p&gt;Without proper analytics, knowing your audience loves your chocolate chip cookies would be impossible and you wouldn't be able to tune future content. At that point, you would &lt;strong&gt;miss out on engaging future readers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you measure your blog traffic with a tool like &lt;a href="https://analytics.google.com"&gt;Google Analytics&lt;/a&gt;, you could see how readers love your chocolate chip cookie article and write more great content about your cookies and baked goods.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IGv_fGuV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642612342685/Ne-vJ8EUS.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IGv_fGuV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642612342685/Ne-vJ8EUS.jpeg" alt="Drawn graph of analytics" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@isaacmsmith?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Isaac Smith&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/analytics?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-create-a-google-analytics-account"&gt;
  &lt;/a&gt;
  How do you create a Google Analytics account?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;a href="https://analytics.google.com"&gt;Google Analytics&lt;/a&gt; and log in using a Gmail account. &lt;/li&gt;
&lt;li&gt;First, you must set up your account. The account name can be anything you like and you can track multiple sites with one account. &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QgrpihJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642460494431/l-mdy5E9S.png" alt="Google Analytics account set up" width="880" height="597"&gt;
&lt;/li&gt;
&lt;li&gt;Next is setting up a property. A property is &lt;a href="https://support.google.com/analytics/answer/1009618?hl=en#zippy=%2Cin-this-article"&gt;equivalent&lt;/a&gt; to a site that you want to track. A single account can track multiple properties. To set up a property, enter the title of your website in the &lt;em&gt;property name&lt;/em&gt; field.&lt;/li&gt;
&lt;li&gt;Recently Google has migrated from &lt;a href="https://support.google.com/analytics/answer/2790010?hl=en"&gt;Universal Analytics (UA)&lt;/a&gt; to a newer version, &lt;a href="https://support.google.com/analytics/answer/10089681?hl=en"&gt;Google Analytics 4&lt;/a&gt;. The differences are &lt;a href="https://support.google.com/analytics/answer/9964640?hl=en#zippy=%2Cin-this-article"&gt;complex&lt;/a&gt;, but core functionality is the same. For blogging, UA offers great features so for simplicity, this tutorial will focus on adding a Universal Analytics property. A GA4 property can be &lt;a href="https://support.google.com/analytics/answer/9744165?hl=en"&gt;added to UA property later&lt;/a&gt; if necessary. To create a Universal Analytics property click on show advanced options (highlighted with an arrow below). &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GQ65nxCW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642460395440/bRXKAWppI.png" alt="Property set up in Google Analytics" width="880" height="390"&gt;
&lt;/li&gt;
&lt;li&gt;Provide the URL of your blog. &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ir29pSL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642611130333/JaWCouIEl.png" alt="Provide URL to Google Analytics" width="880" height="288"&gt;
&lt;/li&gt;
&lt;li&gt;Provide some basic information about your blog and what you will be using Google Analytics for. &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJOtymMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642611139825/uen-1I1a7.png" alt="Property information in Google Analytics" width="880" height="507"&gt;
&lt;/li&gt;
&lt;li&gt;If you blog using Hashnode, check out this dedicated &lt;a href="https://dev.to/scc33/how-to-add-google-analytics-to-your-hashnode-blog-275p"&gt;Hashnode tutorial&lt;/a&gt;. Otherwise, if you maintain your own blog, copy the chunk of code provided by Google Analytics. &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pDpKABzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642610949938/Ams5d108j.png" alt="Tagging code chunk" width="880" height="232"&gt; &lt;/li&gt;
&lt;li&gt;On every page of your blog copy and paste the Google Analytics code chunk inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tags. After adding to the source code, deploy the updated site. &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4_lPF6zb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642614525272/MKsFIFDQR.png" alt="Example of site in deployment" width="701" height="211"&gt;
&lt;/li&gt;
&lt;li&gt;Now you can open Google Analytics and you will start to see traffic data appearing as users visit your blog.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it! Enjoy all the fantastic new data and use it to keep making your great content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j5jWiPvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642614597125/PIKwVfx4J.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j5jWiPvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642614597125/PIKwVfx4J.jpeg" alt="Celebrating because analytics is deployed" width="880" height="587"&gt;&lt;/a&gt;Photo by &lt;a href="https://unsplash.com/@artbyhybrid?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Hybrid&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/happy?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>analytics</category>
      <category>google</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>1 year into DevRel, here is what I learned</title>
      <author>Pachi 🪐 (she/her/ela)</author>
      <pubDate>Wed, 19 Jan 2022 19:51:08 +0000</pubDate>
      <link>https://dev.to/newrelic/1-year-into-devrel-here-is-what-i-learned-1bh0</link>
      <guid>https://dev.to/newrelic/1-year-into-devrel-here-is-what-i-learned-1bh0</guid>
      <description>&lt;p&gt;A little over a year ago I wrote &lt;a href="https://dev.to/pachicodes/devrel-the-basics-j3o"&gt;DevRel: The basics&lt;/a&gt;, a blog post with my basic understanding about Developer Relations based on my studies about the area.&lt;/p&gt;

&lt;p&gt;At the time, I had just accepted the offer for my current position, Associate Developer Relations Engineer at New Relic, and was reading everything I could about DevRel. People around me began asking me often what was DevRel, I decided to share what I knew at the time.&lt;/p&gt;

&lt;p&gt;In 2021 I learned a lot about DevRel, Communities, Content Creation and about myself as well, so some things may seem personal, but I am sure you can learn from all my experiences.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-creating-content-is-hard"&gt;
  &lt;/a&gt;
  1. Creating content is hard
&lt;/h2&gt;

&lt;p&gt;Especially if we are talking about good quality and consistent content.&lt;/p&gt;

&lt;p&gt;When I started, I would write an article every Friday. Then it dropped to every other Friday and now this is my first article in months. Wanna know why? Because I did too much too fast in the beginning!&lt;/p&gt;

&lt;p&gt;All my writer fuel was burned and I just didn’t have the mental energy or inspiration.&lt;/p&gt;

&lt;p&gt;That is why, for 2022 my goal is one article a month, so I can be consistent, write posts with quality and not get stuck or tired.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-while-the-terminology-devrel-has-got-popular-recently-the-work-we-do-is-not-that-new"&gt;
  &lt;/a&gt;
  2. While the terminology DevRel has got popular recently, the work we do is not that new
&lt;/h2&gt;

&lt;p&gt;I don’t know about you, but often I hear people saying DevRel is a new field. Well, it is as new as Front-End , since the first team focused on the work DevRel does was built around the time the World Wide Web was born.&lt;/p&gt;

&lt;p&gt;It was not called DevRel, but it looked a lot like it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-there-is-space-in-devrel-for-less-technical-people"&gt;
  &lt;/a&gt;
  3. There is space in DevRel for less technical people
&lt;/h2&gt;

&lt;p&gt;DevRel goes beyond Developer Advocacy, or writing technical content. Having experience with programming is usually required, but you can have great people without programming skills. Community Managers and Social Media Managers for example, with good planning they can be a great asset for DevRel without the need for them learning how to code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-and-for-junior-devs-as-well"&gt;
  &lt;/a&gt;
  4. And for Junior Devs as well
&lt;/h2&gt;

&lt;p&gt;If there are few job openings for Junior Developers, there are even less for Developer Relation roles. And, in my opinion, that is a mistake. Juniors have the fresh and humble vision, they tend to ask great questions and create content that attends&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-you-always-have-something-to-teach"&gt;
  &lt;/a&gt;
  5. You always have something to teach
&lt;/h2&gt;

&lt;p&gt;This is something that I always say to people, but after becoming a DevRel person, this became crystal clear. I cannot tell you how many times I was asked to talk about something that:&lt;/p&gt;

&lt;p&gt;1 - I thought everyone knew about, but lots of people didn’t or&lt;/p&gt;

&lt;p&gt;2- Explaining something I didn’t think I knew much about, I realized that I actually was quite well acknowledged on that topic.&lt;/p&gt;

&lt;p&gt;We often don’t know how much we know, and being in DevRel you will often have the chance to better understand your own teaching skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-and-it-is-ok-to-learn-on-the-go"&gt;
  &lt;/a&gt;
  6. And it is ok to learn on the go
&lt;/h2&gt;

&lt;p&gt;Part of my job is to create content, and sometimes I was asked to create content about things I didn’t know! Imagine how hard the Imposter Syndrome hit on those moments!!!&lt;/p&gt;

&lt;p&gt;But I took some deep breaths and took some time to stuff the topics, and write while I was learning. In the end of the process I had learned something new and had a new article to show for it. This is not easy and it is quite scary to be honest, but quite rewarding as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-the-answer-to-most-questions-about-devrel-is-it-depends"&gt;
  &lt;/a&gt;
  7. The answer to most questions about DevRel is “It depends”
&lt;/h2&gt;

&lt;p&gt;This is my favorite thing, and sounds like a joke, but it is soo true. DevRel isn’t as clear as Front-End, for example.&lt;/p&gt;

&lt;p&gt;What we do, and how we do it varies a lot depending on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Where we work,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is our team goal,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the company’s vision and more!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So usually when someone asks me a question about DevRel I start answering with It Depends…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-devrel-is-fun"&gt;
  &lt;/a&gt;
  8. DevRel is fun
&lt;/h2&gt;

&lt;p&gt;DevRel is a super fun field to work in, and I am an introvert (Yes, you can work in DevRel as an introvert and maybe this deserves its own article)!&lt;/p&gt;

&lt;p&gt;Of course, it depends on the things I mentioned above, but as a DevRel I get to teach, create, travel, give talks, stream, write…&lt;/p&gt;

&lt;p&gt;All things that I enjoy, and sometimes I am enjoying myself soo much working that the time flies by.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-but-burning-out-is-easy"&gt;
  &lt;/a&gt;
  9. But burning out is easy
&lt;/h2&gt;

&lt;p&gt;You see, even if you are enjoying yourself, you are still working and if you don’t learn to take breaks, your body will eventually force you too.&lt;/p&gt;

&lt;p&gt;I had a co-worker who just refused to take breaks or time off, and even on holidays was working. They were also the person who got sick or hurt more often in the team.&lt;/p&gt;

&lt;p&gt;It seems silly, but I believe that was just his body away to make them slow down.&lt;/p&gt;

&lt;p&gt;I have clear time boundaries, as I never start working before a certain time. I also avoid working after 5pm, with meetings as exceptions when needed, because my team is all over the map. Fridays are my non-meetings days, when I do my 1:1s with my manager only, and I take days off to take care of my mental health when I need it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-you-have-the-power-to-change-peoples-lives-just-by-being-yourself"&gt;
  &lt;/a&gt;
  10. You have the power to change peoples lives just by being yourself
&lt;/h2&gt;

&lt;p&gt;This may not be true for everyone, but it is one of the truest truths I learned. I know some hate the word Influencer, but I don’t. It means that you influence people. So if you influence people with good things, being an influencer is a good thing, just like that.&lt;/p&gt;

&lt;p&gt;It won’t be true for all roles in DevRel, but a good number of us got public. We create content, give talks, teach. So it's inevitable that there will be people that will look at us as examples.&lt;/p&gt;

&lt;p&gt;I am from Brazil, so in 2021 I gave a lot of talks about what DevRel is. There are people in DevRel with many more years of experience than me, but I really put myself out there to educate my community a bit about DevRel, and as a consequence I often will hear that I am a reference in DevRel in Brazil! &lt;strong&gt;What?&lt;/strong&gt; I have been in DevRel for a little over a year! I am not an expert! But, I took my time and did the work to open the door to the community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-am-ready-for-year-2"&gt;
  &lt;/a&gt;
  I am Ready for year 2!
&lt;/h2&gt;

&lt;p&gt;Recently I got an Email to let me kno I was nominated to the &lt;a href="https://developerrelations.com/announcements/nominations-are-open-for-the-devrel-awards-2022"&gt;DevRel Awards&lt;/a&gt;  ad Greatest Individual Contributor to DevRel and it just feels great to know that people thought of me for this. &lt;br&gt;
&lt;strong&gt;I am soo excited and honoured.&lt;/strong&gt;&lt;br&gt;
For this year, I plan to get all I learned to level up my DevReling, get a promotion and expand my work to LATAM.&lt;/p&gt;

&lt;p&gt;If you are curious about DevRel, feel free to &lt;a href="https://twitter.com/pachicodes"&gt;send me a DM on Twitter&lt;/a&gt; and let's chat!&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>career</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Create Lightweight React Accordions</title>
      <author>Amin A. Rezapour</author>
      <pubDate>Wed, 19 Jan 2022 19:50:06 +0000</pubDate>
      <link>https://dev.to/amiut/create-lightweight-react-accordions-4dej</link>
      <guid>https://dev.to/amiut/create-lightweight-react-accordions-4dej</guid>
      <description>&lt;p&gt;I have created a very simple &lt;a href="https://github.com/amiut/accordionify"&gt;Accordion Component&lt;/a&gt; called &lt;a href="https://www.npmjs.com/package/accordionify"&gt;accordionify&lt;/a&gt; for react which you can be used for creating collapsible sections. You can &lt;a href="https://amiut.github.io/accordionify/"&gt;check demo here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ntIj3lY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wmb6d6pnv5mvbsqdrr6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ntIj3lY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wmb6d6pnv5mvbsqdrr6.png" alt="Accordionify" width="880" height="166"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-accordionify-lightweight-react-accordion-component"&gt;
  &lt;/a&gt;
  Install Accordionify - Lightweight React accordion component
&lt;/h2&gt;

&lt;p&gt;If you're using npm, just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i accordionify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and if you are using yarn, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add accordionify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-accordion-component"&gt;
  &lt;/a&gt;
  Create Accordion component
&lt;/h2&gt;

&lt;p&gt;First of all, Accordions are usually consisted of a Toggle or header and a panel or body, the expected behavior is when user clicks the header, the body of accordion gets toggled.&lt;/p&gt;

&lt;p&gt;Creating accordions is as simple as wrap your content with &lt;code&gt;&amp;lt;Accordion&amp;gt;&lt;/code&gt; component and inside the &lt;code&gt;&amp;lt;Accordion&amp;gt;&lt;/code&gt; wrap your head section with &lt;code&gt;&amp;lt;AccordionToggle&amp;gt;&lt;/code&gt;, and wrap your accordion body (or panel) with &lt;code&gt;&amp;lt;AccordionPanel&amp;gt;&lt;/code&gt; component, &lt;code&gt;&amp;lt;Accordion&amp;gt;&lt;/code&gt; component also supports a &lt;code&gt;defaultOpen&lt;/code&gt; prop which tells the accordion to be opened by default or not, take a look at this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Accordion, AccordionToggle, AccordionPanel, AccordionToggleButton } from 'accordionify';

function App() {
  return (
    &amp;lt;div className="container"&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;Accordion defaultOpen&amp;gt;
          &amp;lt;AccordionToggle&amp;gt;
            Click me to toggle
            &amp;lt;AccordionToggleButton /&amp;gt;
          &amp;lt;/AccordionToggle&amp;gt;

          &amp;lt;AccordionPanel&amp;gt;Hey there, Accordion Content goes here&amp;lt;/AccordionPanel&amp;gt;
        &amp;lt;/Accordion&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the above example, we also added a helper component called &lt;code&gt;&amp;lt;AccordionToggleButton /&amp;gt;&lt;/code&gt; which you can use to show a (+/-) or (arrow up/arrow down) indicator to show the state of accordion, using it is optional.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#only-allow-one-opened-accordion"&gt;
  &lt;/a&gt;
  Only allow one opened accordion
&lt;/h2&gt;

&lt;p&gt;If you want to display multiple accordions and want only one of them to be opened at the same time, you need to wrap your &lt;code&gt;&amp;lt;Accordion&amp;gt;&lt;/code&gt;s with &lt;code&gt;&amp;lt;AccordionGroup&amp;gt;&lt;/code&gt; and pass a &lt;code&gt;atomic&lt;/code&gt; prop to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { AccordionGroup, Accordion, AccordionToggle, AccordionPanel, AccordionToggleButton } from 'accordionify';

function App() {
  return (
    &amp;lt;div className="container"&amp;gt;
      &amp;lt;AccordionGroup atomic&amp;gt;
        &amp;lt;Accordion defaultOpen&amp;gt;
          &amp;lt;AccordionToggle&amp;gt;
            Click me to toggle
            &amp;lt;AccordionToggleButton /&amp;gt;
          &amp;lt;/AccordionToggle&amp;gt;

          &amp;lt;AccordionPanel&amp;gt;Hey there, Accordion Content goes here&amp;lt;/AccordionPanel&amp;gt;
        &amp;lt;/Accordion&amp;gt;
        &amp;lt;Accordion&amp;gt;
          &amp;lt;AccordionToggle&amp;gt;
            Click me to toggle
            &amp;lt;AccordionToggleButton /&amp;gt;
          &amp;lt;/AccordionToggle&amp;gt;

          &amp;lt;AccordionPanel&amp;gt;Hey there, Accordion Content goes here&amp;lt;/AccordionPanel&amp;gt;
        &amp;lt;/Accordion&amp;gt;
        &amp;lt;Accordion&amp;gt;
          &amp;lt;AccordionToggle&amp;gt;
            Click me to toggle
            &amp;lt;AccordionToggleButton /&amp;gt;
          &amp;lt;/AccordionToggle&amp;gt;

          &amp;lt;AccordionPanel&amp;gt;Hey there, Accordion Content goes here&amp;lt;/AccordionPanel&amp;gt;
        &amp;lt;/Accordion&amp;gt;
      &amp;lt;/AccordionGroup&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checkout &lt;a href="https://github.com/amiut/accordionify"&gt;accordionify&lt;/a&gt; github repo, It is a simple and new project with no fancy abilities, feel free to drop a PR to collaborate.&lt;/p&gt;

</description>
      <category>react</category>
      <category>accordion</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
