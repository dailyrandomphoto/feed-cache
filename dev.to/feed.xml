<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How TO DELETE DATA OVER THE INTERNET IN FLUTTER</title>
      <author>Afolayan Ademola Segun</author>
      <pubDate>Tue, 16 Nov 2021 14:48:17 +0000</pubDate>
      <link>https://dev.to/har4lionkest/how-to-delete-data-over-the-internet-in-flutter-25nj</link>
      <guid>https://dev.to/har4lionkest/how-to-delete-data-over-the-internet-in-flutter-25nj</guid>
      <description>&lt;p&gt;Hi, I am  &lt;a href="https://kest.hashnode.dev/"&gt;Kest&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;If you have been following my  &lt;a href="https://kest.hashnode.dev/"&gt;CRUD&lt;/a&gt; operation tutorial series you will already know without the title that this is the last part of the series on CRUD operation.&lt;/p&gt;

&lt;p&gt;Users are used to this feature (ability to delete input fields) that are now available in almost every application that involves inputting fields. They do not only want to be able to edit their input, they also want to be able to delete it.  &lt;/p&gt;

&lt;p&gt;This tutorial which is the last of the four CRUD operation, is the simplest of them all, so grab a chair ü™ë and a drink üçπü•§ let's go over it.&lt;/p&gt;

&lt;p&gt;In just three simple steps, you will be able to implement the Delete operation in flutter your application, here are the steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add the Http Package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Delete data on the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update the screen.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üòØüòØüòØ is that it?  Yes, it's as simple as that. Let go deep into the steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-add-the-http-package"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Add the Http Package.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;As usual to install the http package, add it to the dependencies section of the pubspec.yaml file. You can find the latest version of the http package on pub.dev.&lt;br&gt;
That famous pubspec.yaml file is pronounced(pubspec dot yamul or yamil depending on where you coding from... üòÇüòÇüòÇ).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2delete-data-on-the-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2.Delete data on the server.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Using  the JSONPlaceholder as a case study, we want to delete a particular album. we will make use of the http.delete() method.&lt;br&gt;
 Note that this requires the id of the album that you want to delete. For this example, use something you already know, for example id = 1.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Future&amp;lt;http.Response&amp;gt; deleteAlbum(String id) async {
       final http.Response response = await http.delete(        
       Uri.parse
     ('https://jsonplaceholder.typicode.com/albums/$id'),
        headers: &amp;lt;String, String&amp;gt;{
       'Content-Type': 'application/json; charset=UTF-8',
         },
       );
       return response;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The http.delete() method returns a Future that contains a Response.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Future is a core Dart class for working with async operations. A Future object represents a potential value or error that will be available at some time in the future.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The http.Response class contains the data received from a successful http call.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The deleteAlbum() method takes an id argument that is needed to identify the data to be deleted from the server.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3update-the-screen"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3.Update the screen.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In order to check whether the data has been deleted or not. First, fetch the data from the JSONPlaceholder using the http.get() method, and display it on the screen. (See my tutorial on how to fetch Data from the internet  &lt;a href="https://kest.hashnode.dev/how-to-fetch-live-data-from-the-internet-in-flutter"&gt;here&lt;/a&gt; for a complete example). You should now have a Delete Data button that, when pressed, calls the deleteAlbum() method.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: &amp;lt;Widget&amp;gt;[
        Text(snapshot.data?.title ?? 'Deleted'),
        ElevatedButton(
           child: const Text('Delete Data'),
           onPressed: () {
              setState(() {
              _futureAlbum =
              deleteAlbum(snapshot.data!.id.toString());
            });
         },
       ),
      ],
     );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, when you click on the Delete Data button, the deleteAlbum() method is called and the id you are passing is the id of the data that you retrieved from the internet. This means you are going to delete the same data that you fetched from the internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Returning a response from the deleteAlbum() method&lt;/strong&gt;&lt;br&gt;
Once the delete request has been made, you can return a response from the deleteAlbum() method to notify our screen that the data has been deleted.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Future&amp;lt;Album&amp;gt; deleteAlbum(String id) async {
        final http.Response response = await http.delete(
          Uri.parse('https://jsonplaceholder.typicode.com/albums/$id'),
        headers: &amp;lt;String, String&amp;gt;{
       'Content-Type': 'application/json; charset=UTF-8',
           },
          );
        if (response.statusCode == 200) {
       // If the server did return a 200 OK response,
      // then parse the JSON. After deleting,
      // you'll get an empty JSON `{}` response.
      // Don't return `null`, otherwise `snapshot.hasData`
      // will always return false on `FutureBuilder`.
      return Album.fromJson(jsonDecode(response.body));
      } else {
      // If the server did not return a "200 OK response",
      // then throw an exception.
      throw Exception('Failed to delete album.');
        }  
       }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;FutureBuilder() now rebuilds when it receives a response. Since the response won‚Äôt have any data in its body if the request was successful, the Album.fromJson() method creates an instance of the Album object with a default value (null in our case). This behavior can be altered in any way you wish.&lt;/p&gt;

&lt;p&gt;Yeah üï∫üï∫üï∫üï∫üï∫&lt;/p&gt;

&lt;p&gt;That‚Äôs all! Now you‚Äôve got a function that deletes the data from the internet.&lt;/p&gt;

&lt;p&gt;Congratulations. If you have been following you should be able to perform the CRUD operations in flutter now. &lt;/p&gt;

&lt;p&gt;kindly follow me on &lt;a href="https://twitter.com/Har4lionkest?s=09"&gt;Twitter&lt;/a&gt;  for More...  &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Shortest way to find a buggy commit with Git</title>
      <author>Abanoub Asaad</author>
      <pubDate>Tue, 16 Nov 2021 14:23:37 +0000</pubDate>
      <link>https://dev.to/abanoub7asaad/shortest-way-to-find-a-buggy-commit-with-git-21md</link>
      <guid>https://dev.to/abanoub7asaad/shortest-way-to-find-a-buggy-commit-with-git-21md</guid>
      <description>&lt;p&gt;A couple of days ago, one of my colleagues at &lt;a href="https://robustastudio.com/"&gt;robusta&lt;/a&gt; recommended an interesting &lt;strong&gt;git command&lt;/strong&gt; to use, and it was my first time hearing about it. I started searching, and then I decided that I would write a summary about it.&lt;/p&gt;

&lt;p&gt;Have you ever been into a situation where you are writing your code, and you push commits after commits, and after a while, you go around your project and find a bug, Now this bug could happen anytime between your last commit and the last 1000 commits, so this makes it extremely hard to track down what happened and from where did you know the bug occurred? So instead of going one commit by one commit, which is time-consuming and will probably frustrate you because it's a &lt;a href="https://en.wikipedia.org/wiki/Linear_search"&gt;linear search&lt;/a&gt;, &lt;strong&gt;git bisect&lt;/strong&gt; will be your answer. &lt;/p&gt;

&lt;p&gt;In this blog, we will explore the &lt;code&gt;git bisect&lt;/code&gt; command, and how it works, how to use it, and other useful commands to reduce your time of debugging and make you a Git Geek üòé&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-git-bisect"&gt;
  &lt;/a&gt;
  What is git bisect?
&lt;/h2&gt;

&lt;p&gt;git bisect is a way to use a &lt;a href="https://en.wikipedia.org/wiki/Binary_search_algorithm"&gt;binary search&lt;/a&gt; algorithm to find the commit that introduced a bug easily and quickly. It's a very useful command to help you in your process of tracing and debugging. Imagine you have N commits, by using this command, you will find the buggy commit in only log(N) steps! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you know the &lt;strong&gt;Binary Search&lt;/strong&gt; concept, you can skip the next section.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#quick-overview-about-binary-search"&gt;
  &lt;/a&gt;
  Quick overview about Binary Search
&lt;/h2&gt;

&lt;p&gt;Binary Search is an efficient algorithm for finding an item from a sorted list of items. It works by repeatedly dividing in half the portion of the list that could contain the item until you've narrowed down the possible locations to just one. &lt;/p&gt;

&lt;p&gt;The example below explains the concept of binary search, we need to find &lt;strong&gt;47&lt;/strong&gt; as fast as possible. We can achieve that by:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Dividing the array into two parts, and now the mid is 14, so 14 &amp;lt; 47&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt; I will divide the right part and the mid is 45, so 45 &amp;lt; 47&lt;br&gt;
&lt;strong&gt;3.&lt;/strong&gt; I will divide the right part again, and the mid will be 47, so 47 = 47.&lt;/p&gt;

&lt;p&gt;Now we found the desired number &lt;strong&gt;47&lt;/strong&gt; in only &lt;strong&gt;3&lt;/strong&gt; steps using a binary search.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ITycrxlF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zt489kpvzb3bbytslvbc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ITycrxlF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zt489kpvzb3bbytslvbc.gif" alt="Binary Search GIF" width="773" height="406"&gt;&lt;/a&gt;¬©Ô∏è GIF credit : Brilliant.org&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-git-bisect-works"&gt;
  &lt;/a&gt;
  How git bisect works?
&lt;/h2&gt;

&lt;p&gt;After understanding the concept of binary search, &lt;code&gt;git bisect&lt;/code&gt; works in the same way. It allows you to use binary search to find buggy commits. Binary search makes finding things faster, instead of looking at all commits one by one, you would divide your list of commits into two equal parts, you then look at each part and see which part contains the bug, you then continue on this process until you arrive at a single commit. The below image explains that!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yko-yIyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrrwphsrijvtmojvo0lz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yko-yIyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrrwphsrijvtmojvo0lz.png" alt="illustration" width="651" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scenario-of-git-bisect"&gt;
  &lt;/a&gt;
  Scenario of git bisect
&lt;/h2&gt;

&lt;p&gt;Let's assume I have a website, and we released the second release yesterday. For example, a button on this website ran successfully in the first version 2 months ago, but it does not work now. And the history has about 300 commits, so how can I know the buggy commit quickly using git bisect?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;start&lt;/strong&gt; the git bisect session&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt; mark a commit as &lt;strong&gt;bad&lt;/strong&gt; "for example, the current one" if this version is broken&lt;br&gt;
&lt;strong&gt;3.&lt;/strong&gt; mark a commit as &lt;strong&gt;good&lt;/strong&gt;, choose a commit that you know is working correctly and mark it as good&lt;br&gt;
&lt;strong&gt;4.&lt;/strong&gt; the git bisect will start to &lt;strong&gt;recommend commits&lt;/strong&gt; "according to the binary search algorithm", and you should mark them as good or bad by compiling the checked-out version and testing it. Until you find the specific commit which makes the bug to fix it in your current release&lt;br&gt;
&lt;strong&gt;5.&lt;/strong&gt; &lt;strong&gt;exit&lt;/strong&gt; from the git bisect tool and start to fix the bug.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The commands of these steps are below in the next two sections!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YB0UcEnp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jxz9mhuowcm74f3umuv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YB0UcEnp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jxz9mhuowcm74f3umuv.png" alt="git bisect sketch" width="880" height="495"&gt;&lt;/a&gt;¬©Ô∏è Image credit : datree.io&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-git-bisect"&gt;
  &lt;/a&gt;
  How to use git bisect?
&lt;/h2&gt;



&lt;h4&gt;
  &lt;a href="#%E2%9C%B6-start-the-git-bisect"&gt;
  &lt;/a&gt;
  ‚ú∂ Start the git bisect
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git bisect start&lt;/code&gt;&lt;br&gt;
This starts the bisect process on our current commit which is "Head".&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#%E2%9C%B6-let-git-bisect-know-about-a-bad-commit"&gt;
  &lt;/a&gt;
  ‚ú∂ Let git bisect know about a bad commit
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git bisect bad&lt;/code&gt;&lt;br&gt;
 The bug is present, so we need to designate it as a bad commit&lt;br&gt;
or you can type:&lt;br&gt;
&lt;code&gt;$ git bisect bad &amp;lt;commit_id&amp;gt;&lt;/code&gt;&lt;br&gt;
for example, the commit_id is &lt;em&gt;3acea60&lt;/em&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#%E2%9C%B6-let-git-bisect-know-about-a-good-commit"&gt;
  &lt;/a&gt;
  ‚ú∂ Let git bisect know about a good commit
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git bisect good &amp;lt;commit_id&amp;gt;&lt;/code&gt;&lt;br&gt;
If this commit is working successfully.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#%E2%9C%B6-exit-the-bisect-tool"&gt;
  &lt;/a&gt;
  ‚ú∂ Exit the bisect tool
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git bisect reset&lt;/code&gt;&lt;br&gt;
After a bisect session, clean up the bisection state and return to the original HEAD.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#%E2%9C%B6-automate-the-bisect-tool"&gt;
  &lt;/a&gt;
  ‚ú∂ Automate the bisect tool
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;$ git bisect run&lt;/code&gt;&lt;br&gt;
If you want to automate the bisect tool, you can use the above command and also read the official &lt;a href="https://git-scm.com/docs/git-bisect"&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PS: I know how to use it manually, not automaticallyüòÖ&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#7-awesome-debugging-git-commands"&gt;
  &lt;/a&gt;
  7 Awesome debugging git commands
&lt;/h2&gt;



&lt;h3&gt;
  &lt;a href="#git-blame"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£ git blame
&lt;/h3&gt;

&lt;p&gt;If you need to examine the content of any file line by line, you need to use git blame. It helps you to determine who made the changes to a file.&lt;br&gt;
&lt;code&gt;$ git blame &amp;lt;your_file_name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-reset"&gt;
  &lt;/a&gt;
  2Ô∏è‚É£ git reset
&lt;/h3&gt;

&lt;p&gt;If you want to reset the current HEAD to a specified state or commit.&lt;br&gt;
&lt;code&gt;$ git reset --hard &amp;lt;commit_id&amp;gt;&lt;/code&gt;&lt;br&gt;
 To push these changes, you should force them by using:&lt;br&gt;
&lt;code&gt;$ git push -f&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-log"&gt;
  &lt;/a&gt;
  3Ô∏è‚É£ git log
&lt;/h3&gt;

&lt;p&gt;To show commit logs in detail or in an organized way.&lt;br&gt;
&lt;code&gt;$ git log&lt;/code&gt;&lt;br&gt;
or&lt;br&gt;
&lt;code&gt;$ git log --oneline&lt;/code&gt;&lt;br&gt;
or&lt;br&gt;
&lt;code&gt;$ git whatchanged&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-checkout"&gt;
  &lt;/a&gt;
  4Ô∏è‚É£ git checkout
&lt;/h3&gt;

&lt;p&gt;To restore a specific commit or switch to another branch&lt;br&gt;
&lt;code&gt;$ git checkout &amp;lt;commit_id&amp;gt;&lt;/code&gt;&lt;br&gt;
or&lt;br&gt;
&lt;code&gt;$ git checkout &amp;lt;branch_name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-show"&gt;
  &lt;/a&gt;
  5Ô∏è‚É£ git show
&lt;/h3&gt;

&lt;p&gt;To see what's actually changed in a specific commit.&lt;br&gt;
&lt;code&gt;$ git show &amp;lt;commit_id&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-citool"&gt;
  &lt;/a&gt;
  6Ô∏è‚É£ git citool
&lt;/h3&gt;

&lt;p&gt;It is a graphics alternative of &lt;code&gt;git commit&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;$ git citool&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-help"&gt;
  &lt;/a&gt;
  7Ô∏è‚É£ git help
&lt;/h3&gt;

&lt;p&gt;There are many commands in Git, and if you need more help with any command, you can use git help at any time from the terminal. &lt;br&gt;
&lt;code&gt;$ git help&lt;/code&gt;&lt;br&gt;
or&lt;br&gt;
&lt;code&gt;$ git help &amp;lt;git_command&amp;gt;&lt;/code&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I tried to tell you about this useful command "git bisect" and also some other important git commands to help you reduce debugging time. If you know any other ways to make the debugging process faster, it would be great to tell us :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#previous-articles"&gt;
  &lt;/a&gt;
  Previous Articles
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/abanoub7asaad/top-10-useful-github-browser-extensions-2k2d"&gt;Top 10 Useful GitHub Browser Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/abanoub7asaad/operating-systems-concepts-ch-3-part-1-processes-1lcj"&gt;Operating Systems Concepts [Ch.3 | Part 1: Processes] &lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>opensource</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Step-By-Step Guide to Deploying Laravel Applications on Virtual Private Servers</title>
      <author>Farhan Hasin Chowdhury</author>
      <pubDate>Tue, 16 Nov 2021 14:14:23 +0000</pubDate>
      <link>https://dev.to/fhsinchy/step-by-step-guide-to-deploying-laravel-applications-on-virtual-private-servers-47ib</link>
      <guid>https://dev.to/fhsinchy/step-by-step-guide-to-deploying-laravel-applications-on-virtual-private-servers-47ib</guid>
      <description>&lt;p&gt;Developing modern full-stack web applications has become much easier thanks to Laravel but deploying them on a real server is another story.&lt;/p&gt;

&lt;p&gt;There are just so many options.&lt;/p&gt;

&lt;p&gt;PaaS like Heroku or AWS Elastic Beanstalk, unmanaged virtual private servers, shared hosting, and so on.&lt;/p&gt;

&lt;p&gt;Deploying a Laravel app on a shared server using cPanel is as easy as zipping up the source code along with all the dependencies and uploading it to the server. But on shared hosting, you don't have much control over the server.&lt;/p&gt;

&lt;p&gt;PaaS like Heroku or AWS Elastic Beanstalk strikes a good balance between ease of usage and control, but they can be expensive at times. A standard 1x dyno from Heroku, for example, costs $25 per month and comes with only 512MB of RAM.&lt;/p&gt;

&lt;p&gt;Unmanaged virtual private servers are affordable and provide a lot of control on the server. You can avail a server with 2GB of RAM, 20GB of SSD space, and 2TB of transfer bandwidth, costing only $15 per month.&lt;/p&gt;

&lt;p&gt;Now the problem with unmanaged virtual private servers is that they are unmanaged. You'll be responsible for installing all necessary software, configuring them, and keeping them updated.&lt;/p&gt;

&lt;p&gt;In this article, I'll guide you step-by-step in the process of how to deploy a Laravel project on an unmanaged virtual private server (we'll refer to it as VPS from now on). If you want to check out the benefits of the framework first, go ahead and get an answer to the question of &lt;a href="https://adevait.com/laravel/pros-of-laravel-framework"&gt;why use the Laravel framework&lt;/a&gt;. If you are ready, without any further ado, let's jump in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;The article assumes that you have previous experience with working with the Linux command-line. The server will use Ubuntu as its operating system, and you'll have to perform all the necessary tasks from the terminal. The article also expects you to understand basic concepts like Sudo, file permissions, differences between a root and non-root user, and git.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-code-and-deployment-plan"&gt;
  &lt;/a&gt;
  Project Code and Deployment Plan
&lt;/h2&gt;

&lt;p&gt;I've built a dummy project for this article. It's a simple question board application where users can post a question, and others can answer that question. You can consider this a dumbed-down version of StackOverflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qPdvkP03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws55uhzn078eo23c8yum.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qPdvkP03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws55uhzn078eo23c8yum.jpeg" alt="Example application" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The project source code is available on &lt;a href="https://github.com/fhsinchy/guide-to-deploying-laravel-on-vps"&gt;https://github.com/fhsinchy/guide-to-deploying-laravel-on-vps&lt;/a&gt; repository. Make a fork of this repository and clone it on your local computer.&lt;/p&gt;

&lt;p&gt;Once you have a copy of the project on your computer, you're ready to start the Laravel deployment process. You'll start by provisioning a new VPS and setting up a way for pushing the source from your local computer to the server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#provisioning-a-new-ubuntu-server"&gt;
  &lt;/a&gt;
  Provisioning a New Ubuntu Server
&lt;/h2&gt;

&lt;p&gt;There are several VPS providers out there, such as DigitalOcean, Vultr, Linode, and Hetzner. Although working with an unmanaged VPS is more or less the same across providers, they don't provide the same kind of services.&lt;/p&gt;

&lt;p&gt;DigitalOcean, for example, provides managed database services. Linode and Vultr, on the other hand, don't have such services. You don't have to worry about these differences. &lt;/p&gt;

&lt;p&gt;I'll demonstrate only the unmanaged way of doing things. So regardless of the provider, you're using, the steps should be identical. &lt;/p&gt;

&lt;p&gt;Before provisioning a new server, you‚Äôll have to generate SSH keys.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generating-new-ssh-keys"&gt;
  &lt;/a&gt;
  Generating New SSH Keys
&lt;/h3&gt;

&lt;p&gt;According to Wikipedia - "Secure Shell (SSH) is a cryptographic network protocol for operating network services securely over an unsecured network." It allows you to connect to a remote server using a password or a key-pair.&lt;/p&gt;

&lt;p&gt;If you're already familiar with SSH and have previously generated SSH key-pairs on your computer, you may skip this subsection. To generate a new key-pair on macOS, Linux, or Windows 10 machines, execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh-keygen &lt;span class="nt"&gt;-t&lt;/span&gt; rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see several prompts on the terminal. You can go through them by pressing enter. You don't have to put any password either. Once you've generated the key-pair, you'll find a file named &lt;code&gt;id_rsa.pub&lt;/code&gt; inside the &lt;code&gt;~/.ssh/&lt;/code&gt; directory. You'll need this file when provisioning a new VPS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#provisioning-a-new-vps"&gt;
  &lt;/a&gt;
  Provisioning a New VPS
&lt;/h3&gt;

&lt;p&gt;I've already said there are some differences between the VPS service providers, so if you want to be absolutely in line with this article, use DigitalOcean.&lt;/p&gt;

&lt;p&gt;A single virtual private server on DigitalOcean is known as a droplet. On Vultr, it's called an instance, and on Linode, it's called a linode. Log into your provider of choice and create a new VPS. Use Ubuntu 20.04 LTS as the operating system.&lt;/p&gt;

&lt;p&gt;For size, pick the one with 1GB of RAM and 25GB of SSD storage. It should cost you around $5 per month. For the region, choose the one closest to your users. I live in Bangladesh, and most of my users are from here, so I deploy my applications in the Singapore region.&lt;/p&gt;

&lt;p&gt;Under the SSH section, create a new SSH key. Copy the content from the &lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt; file and paste it as the content. Put a descriptive name for the key and save.&lt;/p&gt;

&lt;p&gt;You can leave the rest of the options untouched. Most of the providers come with an automatic backup service. For this demonstration, keep that option disabled. But in a real scenario, it can be a lifesaver. After the process finishes, you'll be ready to connect to your new server using SSH.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performing-basic-setup"&gt;
  &lt;/a&gt;
  Performing Basic Setup
&lt;/h2&gt;

&lt;p&gt;Now that your new server is up and running, it's time to do some basic setup. First, use SSH with the server IP address to log in as the root user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh root@104.248.157.172
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find the server's IP address on the dashboard or inside the server details. Once you're inside the server, the first thing to do is create a new non-root user.&lt;/p&gt;

&lt;p&gt;By default, every server comes with the root user only. The root user, as you may already know, is very mighty. If someone manages to hack your server and logs in as the root user, the hacker can wreak havoc. Disabling login for the root user can prevent such mishaps.&lt;/p&gt;

&lt;p&gt;Also, logging in using a key-pair is more secure than logging in using a password. So, disabling logging in using a password should be disabled for all users.&lt;/p&gt;

&lt;p&gt;To create a new user from the terminal, execute the following command inside your server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;adduser nonroot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The name &lt;code&gt;nonroot&lt;/code&gt; can be anything you want. I used &lt;code&gt;nonroot&lt;/code&gt; as the name to make the fact clear that this is a non-root user. The &lt;code&gt;adduser&lt;/code&gt; program will ask for a password and several other information. Put a strong password and leave the others empty.&lt;/p&gt;

&lt;p&gt;After creating the user, you'll have to add this new user to the &lt;code&gt;sudo&lt;/code&gt; group. Otherwise, the &lt;code&gt;nonroot&lt;/code&gt; user will be unable to execute commands using &lt;code&gt;sudo&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;usermod &lt;span class="nt"&gt;-aG&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;nonroot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this command, &lt;code&gt;sudo&lt;/code&gt; is the group name, and &lt;code&gt;nonroot&lt;/code&gt; is the username. Now, if you try to log into this account, you'll face a permission denied error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PW1RH0L5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmw7wsc3o4xnte3sznwh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PW1RH0L5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmw7wsc3o4xnte3sznwh.png" alt="SSH into the server" width="573" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It happens because most of the VPS providers disable login using a password when you add an SSH key to the server, and you haven't configured the new user to use SSH key-pairs. One easy way to fix this is to copy the content of &lt;code&gt;/root/.ssh&lt;/code&gt; directory to the &lt;code&gt;/home/nonroot/.ssh&lt;/code&gt; directory. You can use the &lt;code&gt;rsync&lt;/code&gt; program to do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rsync &lt;span class="nt"&gt;--archive&lt;/span&gt; &lt;span class="nt"&gt;--chown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nonroot:nonroot /root/.ssh /home/nonroot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;--archive&lt;/code&gt; option for &lt;code&gt;rsync&lt;/code&gt; copies directories recursively preserving symbolic links, user and group ownership, and timestamps. The &lt;code&gt;--chown&lt;/code&gt; option sets the &lt;code&gt;nonroot&lt;/code&gt; user as the owner in the destination. Now you should be able to log in as the new user using SSH.&lt;/p&gt;

&lt;p&gt;After logging in as a non-root user, you should update the operating system, including all the installed programs on the server. To do so, execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;apt upgrade &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;apt dist-upgrade &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Downloading and installing the updates will take a few minutes. During this process, if you see a screen titled &lt;code&gt;Configuring openssh-server&lt;/code&gt; asking about some file changes, select the &lt;code&gt;keep the local version currently installed&lt;/code&gt; option and press enter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ikCpqrZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vj5qfvuxurkoivwtjn0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ikCpqrZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vj5qfvuxurkoivwtjn0.png" alt="Configuring openssh-server" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the update process finishes, reboot the server by executing the &lt;code&gt;sudo&lt;/code&gt; reboot command. Wait a few minutes for the server to boot again and log back in as a non-root user.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-code-on-the-server"&gt;
  &lt;/a&gt;
  Deploying Code on the Server
&lt;/h2&gt;

&lt;p&gt;After completing the basic setups, the next thing you'll tackle is deploying code on the server. I've seen people cloning the repository somewhere on the production server and logging into the server to perform a pull whenever there are some new changes to the code.&lt;/p&gt;

&lt;p&gt;There is a much better way of doing this. Instead of logging into the server to perform a pull, you can use the server itself as a repository and push code directly to the server. You can also automate the post-deployment steps like installing dependencies, running the migrations, and so on, which will make the Laravel deploy to server an effortless action. But before doing all these, you'll first have to install PHP and Composer on the server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-php"&gt;
  &lt;/a&gt;
  Installing PHP
&lt;/h3&gt;

&lt;p&gt;You can find a list of PHP packages required by Laravel on the official &lt;a href="https://laravel.com/docs/8.x/deployment#server-requirements"&gt;docs&lt;/a&gt;. To install all these packages, execute the following command on your server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;php7.4-fpm php7.4-bcmath php7.4-json php7.4-mbstring php7.4-xml &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depending on whether you're using MySQL or PostgreSQL, or SQLite in your project, you'll have to install one of the following packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;php7.4-mysql php7.4-pgsql php7.4-sqlite3 &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following package provides support for the Redis in-memory databases:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;php7.4-redis
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apart from these packages, you'll also need &lt;code&gt;php-curl&lt;/code&gt;, &lt;code&gt;php-zip&lt;/code&gt;, &lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;unzip&lt;/code&gt;, and &lt;code&gt;curl&lt;/code&gt; utilities.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;zip unzip php7.4-zip curl php7.4-curl &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The question bank project uses MySQL as its database system and Redis for caching and running queues, so you'll have to install the &lt;code&gt;php7.4-mysql&lt;/code&gt; and the &lt;code&gt;php7.4-redis&lt;/code&gt; packages.&lt;/p&gt;

&lt;p&gt;Depending on the project, you may have to install more PHP packages. Projects that work images, for example, usually depend on the &lt;code&gt;php-gd&lt;/code&gt; package. Also, you don't have to mention the PHP version with every package name. If you don't specify a version number, APT will automatically install whatever is the latest.&lt;/p&gt;

&lt;p&gt;At the writing of this article, PHP 7.4 is the latest one on Ubuntu's package repositories but considering that the question board project requires PHP 7.4 and PHP 8 may become the default in the future, I've specified the version number in this article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-composer"&gt;
  &lt;/a&gt;
  Installing Composer
&lt;/h3&gt;

&lt;p&gt;After installing PHP and all the required packages on the server, now you're ready to install Composer. To do so, navigate to the official composer download &lt;a href="https://getcomposer.org/download/"&gt;page&lt;/a&gt; and follow the command-line installation instructions or execute the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;"copy('https://getcomposer.org/installer', 'composer-setup.php');"&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;php composer-setup.php &lt;span class="nt"&gt;--install-dir&lt;/span&gt; /usr/local/bin &lt;span class="nt"&gt;--filename&lt;/span&gt; composer
php &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;"unlink('composer-setup.php');"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you've installed both PHP and Composer on your server, you're ready to configure the automated deployment of your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploying-code-using-git"&gt;
  &lt;/a&gt;
  Deploying Code Using Git
&lt;/h3&gt;

&lt;p&gt;For automating code deployment on the server, log in as a non-root user and create a new directory under the &lt;code&gt;/home/nonroot&lt;/code&gt; directory. You'll use this directory as the repository and push production code to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /home/nonroot/repo/question-board.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;-p&lt;/code&gt; option to the &lt;code&gt;mkdir&lt;/code&gt; command will create any nonexistent parent repository. Next, &lt;code&gt;cd&lt;/code&gt; into the newly created directory and initialize a new bare git repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /home/nonroot/repo/question-board.git
git init &lt;span class="nt"&gt;--bare&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A bare is the same as a regular git repository, except it doesn't have a working tree. The practical usage of such a git repository is as a remote origin. Don't worry if you don't understand what I said just now. Things will become lucid as you keep going.&lt;/p&gt;

&lt;p&gt;Assuming you're still inside the &lt;code&gt;/home/nonroot/repo/question-board.git&lt;/code&gt; directory, &lt;code&gt;cd&lt;/code&gt; inside the hooks subdirectory and create a new file called &lt;code&gt;post-receive&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;hooks
&lt;span class="nb"&gt;touch &lt;/span&gt;post-receive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Files inside this directory are regular shell scripts that git invokes when some major event happens on a repository. Whenever you push some code, git will wait until all the code has been received and then call the post-receive script.&lt;/p&gt;

&lt;p&gt;Assuming you're still inside the hooks directory, open the &lt;code&gt;post-receive&lt;/code&gt; script by executing the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nano post-receive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now update the script's content as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;sudo&lt;/span&gt; /sbin/deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you may have already guessed, &lt;code&gt;/sbin/deploy&lt;/code&gt; is another script you'll have to create. The &lt;code&gt;/sbin&lt;/code&gt; directory is mainly responsible for storing scripts that perform administrative tasks. Go ahead and touch the &lt;code&gt;/sbin/deploy&lt;/code&gt; script and open it using the nano text editor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo touch&lt;/span&gt; /sbin/deploy
&lt;span class="nb"&gt;sudo &lt;/span&gt;nano /sbin/deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now update the script's content as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

git &lt;span class="nt"&gt;--work-tree&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/srv/question-board &lt;span class="nt"&gt;--git-dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/nonroot/repo/question-board.git checkout &lt;span class="nt"&gt;-f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Evident by the &lt;code&gt;#!/bin/sh&lt;/code&gt; line, this is a shell script. After that line, the only line of code in this script copies the content of the &lt;code&gt;/home/nonroot/repo/question-board.git&lt;/code&gt; repository to the &lt;code&gt;/srv/question-board&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Here, the &lt;code&gt;--work-tree&lt;/code&gt; option specifies the destination directory, and the &lt;code&gt;--git-dir&lt;/code&gt; option specifies the source repository. I like to use the &lt;code&gt;/srv&lt;/code&gt; directory for storing files served by this server. If you want to use the &lt;code&gt;/var/www&lt;/code&gt; directory, go ahead.&lt;/p&gt;

&lt;p&gt;Save the file by hitting &lt;code&gt;Ctrl + O&lt;/code&gt; and exit nano by hitting &lt;code&gt;Ctrl + X&lt;/code&gt; key combination. Make sure that the script has executable permission by executing the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo chmod&lt;/span&gt; +x post-receive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last step to make this process functional is creating the work tree or the destination directory. To do so, execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo mkdir&lt;/span&gt; /srv/question-board
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you have a proper work tree directory, a bare repository, and a post-hook that in turn calls the &lt;code&gt;/sbin/deploy&lt;/code&gt; script with &lt;code&gt;sudo&lt;/code&gt;. But, how would the post-receive hook invoke the &lt;code&gt;/sbin/deploy&lt;/code&gt; script using &lt;code&gt;sudo&lt;/code&gt; without a password?&lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;/etc/sudoers&lt;/code&gt; file on your server using the nano text editor and append the following line of code at the end of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nonroot &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NOPASSWD: /sbin/deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This line of code means that the &lt;code&gt;nonroot&lt;/code&gt; user will be able to execute the &lt;code&gt;/sbin/deploy&lt;/code&gt; script with &lt;code&gt;sudo&lt;/code&gt; on &lt;code&gt;ALL&lt;/code&gt; hosts with &lt;code&gt;NOPASSWD&lt;/code&gt; or no password. Save the file by pressing &lt;code&gt;Ctrl + O&lt;/code&gt; and exit nano by pressing the &lt;code&gt;Ctrl + K&lt;/code&gt; key combination.&lt;/p&gt;

&lt;p&gt;Finally, you're ready to push the project source code. Assuming that you've already forked and cloned the &lt;a href="https://github.com/fhsinchy/guide-to-deploying-laravel-on-vps"&gt;https://github.com/fhsinchy/guide-to-deploying-laravel-on-vps&lt;/a&gt; repository on your local system, open up your terminal on the project root and execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote add production ssh://nonroot@104.248.157.172/home/nonroot/repo/question-board.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to replace my IP address with the IP address from your server. Now assuming that the stable code is no the master branch, you can push code to the server by executing the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push production master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After sending the code to the server, log back in as a non-root user and &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;/srv/question-board&lt;/code&gt; directory. Use the ls command to list out the content, and you should see that git has successfully checked out your project code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automating-post-deployment-steps"&gt;
  &lt;/a&gt;
  Automating Post Deployment Steps
&lt;/h3&gt;

&lt;p&gt;Congratulations on you being able to deploy Laravel project on the server directly but, is that enough? What about the post-deployment steps? Tasks like installing or updating dependencies, migrating the database, caching the views, configs, and routes, restarting workers, and so on.&lt;/p&gt;

&lt;p&gt;Honestly, automating these tasks is much easier than you may think. All you've to do is create a script that does all these for you, set some permissions, and call that script from inside the post-receive hook.&lt;/p&gt;

&lt;p&gt;Create another script called post-deploy inside the &lt;code&gt;/sbin&lt;/code&gt; directory. After creating the file, open it inside the nano text editor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo touch&lt;/span&gt; /sbin/post-deploy
&lt;span class="nb"&gt;sudo &lt;/span&gt;nano /sbin/post-deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the content of the post-deploy script as follows. Don't worry if you don't clearly understand everything. I'll explain each line in detail.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;cd&lt;/span&gt; /srv/question-board

&lt;span class="nb"&gt;cp&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; ./.env.example ./.env

&lt;span class="nv"&gt;COMPOSER_ALLOW_SUPERUSER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 composer &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--no-dev&lt;/span&gt; &lt;span class="nt"&gt;--optimize-autoloader&lt;/span&gt;
&lt;span class="nv"&gt;COMPOSER_ALLOW_SUPERUSER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 composer update &lt;span class="nt"&gt;--no-dev&lt;/span&gt; &lt;span class="nt"&gt;--optimize-autoloader&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line changes the working directory to the &lt;code&gt;/srv/question-board&lt;/code&gt; directory. The second line makes a copy of the &lt;code&gt;.env.example&lt;/code&gt; file. The &lt;code&gt;-n&lt;/code&gt; option makes sure that the &lt;code&gt;cp&lt;/code&gt; command doesn't override a previously existing file.&lt;/p&gt;

&lt;p&gt;The third and fourth commands will install all the necessary dependencies and update them if necessary. The &lt;code&gt;COMPOSER_ALLOW_SUPERUSER&lt;/code&gt; environment variable disables a warning about running the composer binary as root.&lt;/p&gt;

&lt;p&gt;Save the file by pressing &lt;code&gt;Ctrl + O&lt;/code&gt; and exit nano by pressing &lt;code&gt;Ctrl + X&lt;/code&gt; key combination. Make sure that the script has executable permission by executing the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo chmod&lt;/span&gt; +x /sbin/post-deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the /&lt;code&gt;home/nonroot/repo/question-board.git/hooks/post-receive&lt;/code&gt; script with nano and append the following line after the &lt;code&gt;sudo /sbin/deploy&lt;/code&gt; script call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo&lt;/span&gt; /sbin/post-deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure that you call the post-deploy script after calling the deploy script. Save the file by pressing &lt;code&gt;Ctrl + O&lt;/code&gt; and exit nano by pressing the `Ctrl + K key combination.&lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;/etc/sudoers&lt;/code&gt; file on your server using the nano text editor once again and update the previously added line as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
nonroot ALL=NOPASSWD: /sbin/deploy, /sbin/post-deploy&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Save the file by pressing &lt;code&gt;Ctrl + O&lt;/code&gt; and exit nano by pressing the &lt;code&gt;Ctrl + K&lt;/code&gt; key combination. You can add more post deploy steps to this script if necessary.&lt;/p&gt;

&lt;p&gt;To test the new post-deploy script, make some changes to your code, commit the changes and push to the production master branch. This time you'll see composer packages installation progress on the terminal and outputs from other artisan calls.&lt;/p&gt;

&lt;p&gt;Once the deployment process finishes, log back into the server, &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;/srv/question-board&lt;/code&gt; directory, and list the content by executing the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
ls -la&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Among other files and folders, you'll see a newly created vendor directory and an env file. At this point, you can generate the application encryption key required by Laravel. To do so, execute the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo php artisan key:generate&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you look at the content of the &lt;code&gt;.env&lt;/code&gt; file using the nano text editor, you'll see the &lt;code&gt;APP_KEY&lt;/code&gt; value populated with a long string.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-and-configuring-nginx"&gt;
  &lt;/a&gt;
  Installing and Configuring NGINX
&lt;/h2&gt;

&lt;p&gt;Now that you've successfully pushed the source code to the server, the next step is to install a web server and configure it to serve your application. I'll use NGINX in the article. If you want to use something else like Apache, you'll be on your own.&lt;/p&gt;

&lt;p&gt;This article will strictly focus on configuring the webserver for serving a Laravel application and will not discuss NGINX-related stuff in detail. NGINX itself is a very complex software, and if you wish to learn NGINX from the ground up, &lt;a href="https://www.freecodecamp.org/news/the-nginx-handbook/"&gt;The NGINX Handbook&lt;/a&gt; is a solid resource.&lt;/p&gt;

&lt;p&gt;To install NGINX on your Ubuntu server, execute the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo apt install nginx -y&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command should install NGINX and should also register as a systemd service. To verify, you can execute the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo systemctl status nginx&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see something as follows in the output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GKwRqQGt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9wr24u7a8qb89rdz4bx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GKwRqQGt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9wr24u7a8qb89rdz4bx.png" alt="NGINX service status" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can regain control of the terminal by hitting q on your keyboard. Now that NGINX is running, you should see the default welcome page of NGINX if you visit the server IP address.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UzaJbDuE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8ujehmns2dlbly299e1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzaJbDuE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8ujehmns2dlbly299e1.png" alt="Welcome to NGINX" width="534" height="224"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll have to change the NGINX configuration to serve your Laravel application instead. To do so, create a new file &lt;code&gt;/etc/nginx/sites-available/question-board&lt;/code&gt; and open the file using the nano text editor.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo touch /etc/nginx/sites-available/question-board&lt;br&gt;
sudo nano /etc/nginx/sites-available/question-board&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This file will contain the NGINX configuration code for serving the question board application. Configuring NGINX from scratch can be difficult, but the official Laravel &lt;a href="https://laravel.com/docs/8.x/deployment#nginx"&gt;docs&lt;/a&gt; have a pretty good configuration. Follows is the code copied from the docs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`conf&lt;br&gt;
server {&lt;br&gt;
    listen 80;&lt;br&gt;
    server_name 104.248.157.172;&lt;br&gt;
    root /srv/question-board/public;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;add_header X-Frame-Options "SAMEORIGIN";
add_header X-Content-Type-Options "nosniff";

index index.php;

charset utf-8;

location / {
    try_files $uri $uri/ /index.php?$query_string;
}

location = /favicon.ico { access_log off; log_not_found off; }
location = /robots.txt  { access_log off; log_not_found off; }

error_page 404 /index.php;

location ~ \.php$ {
    fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
    fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
    include fastcgi_params;
}

location ~ /\.(?!well-known).* {
    deny all;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You don't have to make any changes to this code except the first two lines. Make sure you're using the IP address from your server as the &lt;code&gt;server_name&lt;/code&gt; , and the &lt;code&gt;root&lt;/code&gt; is pointing to the correct directory. You'll replace this IP address with a domain name in a later section.&lt;/p&gt;

&lt;p&gt;Also, inside the location &lt;code&gt;~ \.php$ { }&lt;/code&gt; block, make sure that the &lt;code&gt;fastcgi_pass&lt;/code&gt; directive is pointing to the correct PHP version. In this demonstration, I'm using PHP 7.4, so this configuration is correct. If you're using a different version, like 8.0 or 8.1, update the code accordingly.&lt;/p&gt;

&lt;p&gt;If you &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;/etc/nginx&lt;/code&gt; directory and list out the content using the &lt;code&gt;ls&lt;/code&gt; command, you'll see two folders named &lt;code&gt;sites-available&lt;/code&gt; and &lt;code&gt;sites-enabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sites-available&lt;/code&gt; folder holds all the different configuration files serving applications (yes, there can be multiple) from this server.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sites-enabled&lt;/code&gt; folder, on the other hand, contains symbolic links to the active configuration files. So if you do not make a symbolic link of the &lt;code&gt;/etc/nginx/sites-available/question-board&lt;/code&gt; file inside the &lt;code&gt;sites-enabled&lt;/code&gt; folder, it'll not work. To do so, execute the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo ln -s /etc/nginx/sites-available/question-board /etc/nginx/sites-enabled/question-board&lt;br&gt;
sudo rm /etc/nginx/sites-enabled/default&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The second command gets rid of the default configuration file to avoid any unintended conflict. To test if the configuration code is okay or not, execute the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo nginx -t&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If everything's alright, reload the NGINX configuration by executing the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo nginx -s reload&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you visit your server IP address, you'll see that NGINX is serving your application correctly but the application is throwing a 500 internal server error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zC94wH2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/785ysx5tyo7zbtfjq07r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zC94wH2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/785ysx5tyo7zbtfjq07r.png" alt="500 internal server error" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the application is trying to write to the logs folder but fails. It happens because the &lt;code&gt;root&lt;/code&gt; user owns the &lt;code&gt;/srv/question-board&lt;/code&gt; directory, and the &lt;code&gt;www-data&lt;/code&gt; user owns the NGINX process. To make the &lt;code&gt;/srv/question-board/storage&lt;/code&gt; directory writable by the application, you'll have to alter the directory permissions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-directory-permissions"&gt;
  &lt;/a&gt;
  Configuring Directory Permissions
&lt;/h3&gt;

&lt;p&gt;There are different ways of configuring directory permissions in a Laravel project but, I'll show you the one I use. First, you'll have to assign the &lt;code&gt;www-data&lt;/code&gt; user that owns the NGINX process as the owner of the &lt;code&gt;/srv/question-board&lt;/code&gt; directory as well. To do so, execute the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo chown -R :www-data /srv/question-board&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, set the permission of the &lt;code&gt;/srv/question-board/storage&lt;/code&gt; to &lt;code&gt;755&lt;/code&gt;, which means read and execute access for all users and write access for the owner by executing the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo chmod -R 775 /srv/question-board/storage&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally, there is one more subdirectory that you have to make writable. That is the &lt;code&gt;/srv/question-board/bootstrap/cache&lt;/code&gt; directory. To do so, execute the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo chmod -R 775 /srv/question-board/bootstrap/cache&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you go back to the server IP address now and refresh, you should see that the application is working fine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-and-configuring-mysql"&gt;
  &lt;/a&gt;
  Installing and Configuring MySQL
&lt;/h2&gt;

&lt;p&gt;Now that you've successfully installed and configured the NGINX web server, it's time for you to install and configure MySQL. To do so, install the MySQL server by executing the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo apt install mysql-server -y&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After the installation process finishes, execute the following command to make your MySQL installation more secure:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo mysql_secure_installation&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First, the script will ask if you want to use the validate password component or not. Input &lt;code&gt;Y&lt;/code&gt; as the answer and hit enter. Then, you'll have to set the desired level of password difficulty. I recommend setting it as high. Although picking a hard-to-guess password every time you want to create a new user can be annoying, but for the sake of security, roll with it. In the next step, set a secure password for the root user. You can put &lt;code&gt;Y&lt;/code&gt; as the answer for the rest of the questions. Give the questions a read if you want to.&lt;/p&gt;

&lt;p&gt;Now, before you can log into your database server as root, you'll have to switch to the root user. To do so, execute the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo su&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Log into your database server as root by executing the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
mysql -u root&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you're in, create a new database for the question board application by executing the following SQL code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
CREATE DATABASE question_board;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, create a new database user by executing the following SQL code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
CREATE USER 'nonroot'@'localhost' IDENTIFIED BY 'password';&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Again, I used the name &lt;code&gt;nonroot&lt;/code&gt; to clarify that this is a non-root user. You can use whatever you want as the name. Also, replace the word password with something more secure.&lt;/p&gt;

&lt;p&gt;After that, provide the user full privilege of the question_board database to the newly created user by executing the following SQL code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
GRANT ALL PRIVILEGES ON question_board . * TO 'nonroot'@'localhost';'nonroot'@'localhost';&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this code, &lt;code&gt;question_board.*&lt;/code&gt; means all the tables of the &lt;code&gt;question_board&lt;/code&gt; database. Finally, quit the MySQL client by executing the &lt;code&gt;\q&lt;/code&gt; command and exit the root shell by invoking the exit command.&lt;/p&gt;

&lt;p&gt;Now, try logging in as the &lt;code&gt;nonroot&lt;/code&gt; user by executing the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
mysql -u nonroot -p&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The MySQL client will ask for the password. Use the password you put in when creating the &lt;code&gt;nonroot&lt;/code&gt; user. If you manage to log in successfully, exit the MySQL client by executing the \q command.&lt;/p&gt;

&lt;p&gt;Now that you have a working database server, it's time to configure the question board project to make use of it. First, &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;/srv/question-board&lt;/code&gt; directory and open the &lt;code&gt;.env&lt;/code&gt; file using the nano text editor:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
cd /srv/question-board&lt;br&gt;
sudo nano .env&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Update the database configuration as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;env&lt;br&gt;
DB_CONNECTION=mysql&lt;br&gt;
DB_HOST=localhost&lt;br&gt;
DB_PORT=3306&lt;br&gt;
DB_DATABASE=question_board&lt;br&gt;
DB_USERNAME=nonroot&lt;br&gt;
DB_PASSWORD=password&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure to replace the username and password with yours. Save the file by pressing &lt;code&gt;Ctrl + O&lt;/code&gt; and exit nano by pressing &lt;code&gt;Ctrl + X&lt;/code&gt; key combination. To test out the database connection, try migrating the database by executing the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
php artisan migrate --force&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If everything goes fine, that means the database connection is working. The project comes with two seeder classes, one for seeding the admin user and another for the categories. Execute the following commands to run them:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
php artisan db:seed --class=AdminUserSeeder&lt;br&gt;
php artisan db:seed --class=CategoriesSeeder&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, if you visit the server IP address and navigate to the &lt;code&gt;/questions&lt;/code&gt; route, you'll see the list of categories. You'll also be log in as the admin user using the following credentials:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
email: farhan@questionboard.test&lt;br&gt;
password: password&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you've been working with Laravel for a while, you may already know that it is common practice to add new migration files when there is a database change. To automate the process of running the migrations on every deployment, open the &lt;code&gt;/sbin/post-deploy&lt;/code&gt; script using nano once again and append the following line at the end of the file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
php artisan migrate --force&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--force&lt;/code&gt; option will suppress an artisan warning about running migrations on a production environment. Unlike migrations, seeders should run only once. If you add new seeders on later deployments, you'll have to run them manually.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-laravel-horizon"&gt;
  &lt;/a&gt;
  Configure Laravel Horizon
&lt;/h2&gt;

&lt;p&gt;The question board project comes with Laravel Horizon pre-installed and pre-configured. Now that you have Redis up and running, you're ready to start processing jobs.&lt;/p&gt;

&lt;p&gt;The official docs suggest using the supervisor program for running Laravel Horizon on a production server. To install the program, execute the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo apt install supervisor -y&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Supervisor configuration files live within your server's &lt;code&gt;/etc/supervisor/conf.d&lt;/code&gt; directory. Create a new file &lt;code&gt;/etc/supervisor/conf.d/horizon.conf&lt;/code&gt; and open it using the nano text editor:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo touch /etc/supervisor/conf.d/horizon.conf&lt;br&gt;
sudo /etc/supervisor/conf.d/horizon.conf&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Update the file's content as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;conf&lt;br&gt;
[program:horizon]&lt;br&gt;
process_name=%(program_name)s&lt;br&gt;
command=php /srv/question-board/artisan horizon&lt;br&gt;
autostart=true&lt;br&gt;
autorestart=true&lt;br&gt;
user=root&lt;br&gt;
redirect_stderr=true&lt;br&gt;
stdout_logfile=/var/log/horizon.log&lt;br&gt;
stopwaitsecs=3600&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Save the file by pressing &lt;code&gt;Ctrl + O&lt;/code&gt; and exit nano by pressing the &lt;code&gt;Ctrl + X&lt;/code&gt; key combination. Now, execute the following commands to update the supervisor configuration and starting the horizon process:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo supervisorctl reread&lt;br&gt;
sudo supervisorctl update&lt;br&gt;
sudo supervisorctl start horizon&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To test out if Laravel Horizon is running or not, visit your server's IP address and navigate to the &lt;code&gt;/login&lt;/code&gt; page. Log in as the admin user and navigate to the /horizon route. You'll see Laravel Horizon in the active state.&lt;/p&gt;

&lt;p&gt;I've configured Laravel Horizon to only let the admin user in, so if you log in with some other user credential, you'll see a 403 forbidden error message on the &lt;code&gt;/horizon&lt;/code&gt; route.&lt;/p&gt;

&lt;p&gt;One thing that catches many people off guard is that if you make changes to your jobs, you'll have to restart Laravel Horizon to read those changes. I recommend adding a line to the &lt;code&gt;/sbin/post-deploy&lt;/code&gt; script to reinitiate the Laravel Horizon process on every deployment.&lt;/p&gt;

&lt;p&gt;To do so, open the &lt;code&gt;/sbin/post-deploy&lt;/code&gt; using the nano text editor and append the following line at the end of the file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo supervisorctl restart horizon&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command will stop and restart the Laravel Horizon process on every deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-a-domain-name-with-https"&gt;
  &lt;/a&gt;
  Configuring a Domain Name With HTTPS
&lt;/h2&gt;

&lt;p&gt;For this step to work, you'll have to own a custom domain name of your own. I'll use the &lt;code&gt;questionboard.farhan.dev&lt;/code&gt; domain name for this demonstration.&lt;/p&gt;

&lt;p&gt;Log into your domain name provider of choice and go to the DNS settings for your domain name. Whenever you want a domain name to point to a server's IP address, you need to create a DNS record of type A.&lt;/p&gt;

&lt;p&gt;To do so, add a new DNS record with the following attributes:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
Type: A Record&lt;br&gt;
Host: questionboard&lt;br&gt;
Value: 104.248.157.172&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure to replace my IP address with yours. If you want your top-level domain to point to an IP address instead of a subdomain, just put a @ as the host.&lt;/p&gt;

&lt;p&gt;Now go back to your server and open the &lt;code&gt;/etc/nginx/sites-available/questionboard&lt;/code&gt; config file using the nano text editor. Remove the IP address from the server_name directive and write your domain name. Do not put HTTP or HTTPS at the beginning.&lt;/p&gt;

&lt;p&gt;You can put multiple domain names such as the top-level domain and the &lt;code&gt;www&lt;/code&gt; subdomain separated by spaces. Save the configuration file by pressing &lt;code&gt;Ctrl + O&lt;/code&gt; and &lt;code&gt;Ctrl + X&lt;/code&gt; key combination. Reload NGINX configuration by executing the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo nginx -s reload&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you can visit your application using your domain name instead of the server's IP address. To enable HTTPS on your application, you can use the &lt;code&gt;certbot&lt;/code&gt; program.&lt;/p&gt;

&lt;p&gt;To do so, install &lt;code&gt;certbot&lt;/code&gt; by executing the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo snap install --classic certbot&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is a python program that allows you to use free SSL certificates very easily. After installing the program, execute the following command to get a new certificate:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo certbot --nginx&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First, the program will ask for your email address. Next, it'll ask if you agree with the terms and agreements or not.&lt;/p&gt;

&lt;p&gt;Then, It'll ask you about sharing your email address with the Electronic Frontier Foundation.&lt;/p&gt;

&lt;p&gt;In the third step, the program will read the NGINX configuration file and extract the domain names from the server_name directive. Look at the domain names it shows and press enter if they are all correct. After deploying the new certificate, the program will congratulate you, and now you've got free HTTPS protection for 90 days.&lt;/p&gt;

&lt;p&gt;After 90 days, the program will attempt to renew the certificate automatically. To test the auto-renew feature, execute the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo certbot renew --dry-run&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If the simulation succeeds, you're good to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-a-firewall"&gt;
  &lt;/a&gt;
  Configuring a Firewall
&lt;/h2&gt;

&lt;p&gt;Having a properly configured firewall is very important for the security of your server. In this article, I'll show you how you can configure the popular UFW program.&lt;/p&gt;

&lt;p&gt;UFW stands for uncomplicated firewall, and it comes by default in Ubuntu. You'll configure UFW to, by default, allow all outgoing traffic from the server and deny all incoming traffic to the server. To do so, execute the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo ufw default deny incoming&lt;br&gt;
sudo ufw default allow outgoing&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Denying all incoming traffic means that no one, including you, will be able to access your server in any way. The next step is to allow incoming requests in three specific ports. They are as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
Port 80, used for HTTP traffic.&lt;br&gt;
Port 443, used for HTTPS traffic.&lt;br&gt;
Port 22, used for SSH traffic.&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To do so, execute the following commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo ufw allow http&lt;br&gt;
sudo ufw allow https&lt;br&gt;
sudo ufw allow ssh&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally, enable UFW by executing the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo ufw enable&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That's pretty much it. Your server now only allows HTTP, HTTPS, and SSH traffic coming from the outside, making your server a bit more secure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laravel-postdeployment-optimizations"&gt;
  &lt;/a&gt;
  Laravel Post-deployment Optimizations
&lt;/h2&gt;

&lt;p&gt;Your application is now almost ready to accept requests from all over the world. One last step that I would like to suggest is caching the Laravel configuration, views, and routes for better performance.&lt;/p&gt;

&lt;p&gt;To do so, open the &lt;code&gt;/sbin/post-deploy&lt;/code&gt; script using the nano text editor and append the following lines at the end of the file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
php artisan config:cache&lt;br&gt;
php artisan route:cache&lt;br&gt;
php artisan view:cache&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, on every deployment, the caches will be cleared and renewed automatically. Also, make sure to set the &lt;code&gt;APP_ENV&lt;/code&gt; to production and &lt;code&gt;APP_DEBUG&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; inside the &lt;code&gt;.env&lt;/code&gt; file. Otherwise, you may unintentionally compromise sensitive information regarding your server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I would like to thank all &lt;a href="https://adevait.com/laravel"&gt;Laravel developers&lt;/a&gt; for the time they've spent reading this article. I hope you've enjoyed it and have learned some handy stuff regarding application deployment. If you want to learn more about NGINX, consider checking out my open-source &lt;a href="https://www.freecodecamp.org/news/the-nginx-handbook/"&gt;NGINX Handbook&lt;/a&gt; with tons of fun content and examples.&lt;/p&gt;

&lt;p&gt;Also, if you want to broaden your knowledge of Laravel, you can check the &lt;a href="https://adevait.com/laravel/laravel-vs-symfony-comparison"&gt;Laravel vs Symfony&lt;/a&gt;, the &lt;a href="https://adevait.com/laravel/using-corcel-in-laravel"&gt;Laravel Corcel&lt;/a&gt;, and &lt;a href="https://adevait.com/laravel/developing-an-ico-using-laravel"&gt;Laravel Blockchain&lt;/a&gt; articles.&lt;/p&gt;

&lt;p&gt;If you have any questions or confusion, feel free to reach out to me. I'm available on &lt;a href="https://twitter.com/frhnhsin"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/farhanhasin/"&gt;LinkedIn&lt;/a&gt; and always happy to help. Till the next one, stay safe and keep on learning.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>php</category>
    </item>
    <item>
      <title>PlanetScale is now GA</title>
      <author>etnoctua</author>
      <pubDate>Tue, 16 Nov 2021 14:07:48 +0000</pubDate>
      <link>https://dev.to/planetscale/planetscale-is-now-ga-53jm</link>
      <guid>https://dev.to/planetscale/planetscale-is-now-ga-53jm</guid>
      <description>&lt;p&gt;It has been an incredible six months since we released our product in beta. From the outset we focused on creating a platform that would delight developers, built on top of the only open source database proven at hyperscale, Vitess. &lt;/p&gt;

&lt;p&gt;We believe databases should be powerful, easy to use, and have impeccable DX. This is why we chose to build our serverless platform so that developers can be productive without ever having to worry about scale. &lt;/p&gt;

&lt;p&gt;With PlanetScale you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instantly create dev and staging environments with database branching&lt;/li&gt;
&lt;li&gt;Deploy features fast and safer with non-blocking schema changes&lt;/li&gt;
&lt;li&gt;Scale out with built-in horizontal sharding &lt;/li&gt;
&lt;li&gt;Handle traffic with unlimited connections and connection pooling&lt;/li&gt;
&lt;li&gt;Analyze slow queries using our Query Stats tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://planetscale.com/blog/ga"&gt;Our database platform is now GA&lt;/a&gt; and ready for your production workloads.&lt;/p&gt;

&lt;p&gt;Get started with PlanetScale for free and check out the new features that will change how you work with databases. Also, we're happy to answer any questions you might have and if check out this post if you're interested in &lt;a href="https://planetscale.com/blog/building-planetscale-with-planetscale"&gt;how we used PlanetScale to build PlanetScale&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>database</category>
      <category>serverless</category>
      <category>opensource</category>
    </item>
    <item>
      <title>What is IMAP</title>
      <author>cloudytech147</author>
      <pubDate>Tue, 16 Nov 2021 13:54:13 +0000</pubDate>
      <link>https://dev.to/cloudytech147/what-is-imap-aaf</link>
      <guid>https://dev.to/cloudytech147/what-is-imap-aaf</guid>
      <description>&lt;p&gt;Internet Message Access Protocol (&lt;a href="https://webhostingprime.com/what-is-imap-definitive-guide/"&gt;IMAP&lt;/a&gt;) is a notable convention that is normalized to get messages from a neighbourhood customer on a distant waiter. IMAP lives in the application layer of the OSI (Open System Interconnection) model on which the web is based.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Poa9Rvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy1n3qllv93v22tuqi12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Poa9Rvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy1n3qllv93v22tuqi12.png" alt="IMAP" width="679" height="284"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;IMAP utilizes the profound situated vehicle layer to set up have-to-have correspondence for giving applications and administrations. This requires the consideration of the remote email server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#history-and-evolution-of-imap"&gt;
  &lt;/a&gt;
  History and Evolution of IMAP
&lt;/h3&gt;

&lt;p&gt;It was Mark Crispin who planned the first form of IMAP in 1986. Since the hour of its origin, IMAP was portrayed as a somewhat controlled letter drop convention. During that time the Post Office Protocol (POP) had effectively gathered colossal acknowledgement.&lt;/p&gt;

&lt;p&gt;Essentially all significant email specialist organizations for the most part use two conventions, for example, IMAP and POP to their fullest possibilities. In IMAP, the messages remain put away inside the server until and except if they are erased by the customer. Likewise, IMAP approves customers to get entrance and control of their letter drops.&lt;/p&gt;

&lt;p&gt;A solicitation for an email from a specific client is coordinated through the concentrated server. The server has an extra room reserved for email records. A client can profit from IMAP by acquiring the capacity to see email headers, check the pertinence of messages, search for catchphrases in email bodies, erase messages, make and control various envelopes and letterboxes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imap-versions"&gt;
  &lt;/a&gt;
  IMAP Versions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;IMAP2&lt;/li&gt;
&lt;li&gt;IMAP3&lt;/li&gt;
&lt;li&gt;IMAPbis&lt;/li&gt;
&lt;li&gt;IMAP4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Features of IMAP&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A client can get to and recover messages from a far off server. Likewise, one can hold the messages on the server.&lt;/li&gt;
&lt;li&gt;There are message hails that you can set to keep a watch on the messages you have as of now seen or read.&lt;/li&gt;
&lt;li&gt;It is workable for you to deal with a few letter drops at the same time. This implies messages can be moved between letterboxes. * You can figure them out into various classes or organizers so that individuals joined to various tasks think that it is not difficult to get to the envelopes applicable to them.&lt;/li&gt;
&lt;li&gt;You can discover the significance of the data an email conveys prior to downloading it. Likewise, you can choose whether to download the email from the server or not. Messages that give off an impression of being spam or unimportant can be dismissed or erased right away.&lt;/li&gt;
&lt;li&gt;You can download a specific piece of the message and it very well may be the body of the email. This is especially helpful when huge size media documents are installed in a message having a short message.&lt;/li&gt;
&lt;li&gt;You can arrange the messages on the server according to your necessities. For example, you can keep the email drafts in a single spot or a particular envelope on the server.
There is a quest choice to search for explicit email substance.&lt;/li&gt;
&lt;li&gt;You can make envelopes in the post box as a way to place messages in a progressive request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-imap"&gt;
  &lt;/a&gt;
  Advantages of IMAP
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can get messages remotely put away in the server from a few unique areas.&lt;/li&gt;
&lt;li&gt;The messages are upheld of course.&lt;/li&gt;
&lt;li&gt;It offers added security as the messages exist just inside the IMAP server.&lt;/li&gt;
&lt;li&gt;It keeps a great deal of extra room for possible later use by recovering a message exactly when you want to go through it.
You can get an overall audit or synopsis of the messages from the downloaded headers.&lt;/li&gt;
&lt;li&gt;In view of its quick network, it doesn‚Äôt trust that the messages will seem consistent. Advanced IMAP puts the rundown of every one of your messages in plain view immediately.&lt;/li&gt;
&lt;li&gt;You may not require a functioning web association for getting to the messages.&lt;/li&gt;
&lt;li&gt;It provides you with the choice of locally putting away messages.&lt;/li&gt;
&lt;li&gt;Letterboxes working through IMAP can be effectively moved to start with one gadget then onto the next on account of its synchronization with an incorporated server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With the whole world becoming more and more mobile-dependent, the popularity of IMAP, too, is increasing rapidly. The widespread proliferation of laptops, smartphones, tablets, and other mobile devices is multiplying the scope and demand for IMAP by leaps and bounds. Thus, in the coming years, IMAP will certainly remain the most preferred emailing protocol.&lt;/p&gt;

</description>
      <category>imap</category>
      <category>tutorial</category>
      <category>guide</category>
    </item>
    <item>
      <title>C++ from the beginning, working with files</title>
      <author>Chris Noring</author>
      <pubDate>Tue, 16 Nov 2021 13:46:59 +0000</pubDate>
      <link>https://dev.to/softchris/c-from-the-beginning-working-with-files-2kpd</link>
      <guid>https://dev.to/softchris/c-from-the-beginning-working-with-files-2kpd</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TLDR; In this article we will at how you can work with the file system which will involves reading and writing to files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Series:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0the-full-series"&gt;
  &lt;/a&gt;
  ¬†The full series
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/c-from-the-beginning-2o2l"&gt;Your first program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/c-from-the-beginning-variables-22nm"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/azure/c-from-the-beginning-input-and-output-5ad0"&gt;Working with input and output&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/c-from-the-beginning-functions-5cnl"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/c-from-the-beginning-control-flow-21jg"&gt;Control flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Working with files, &lt;strong&gt;you are here&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Pointers&lt;/li&gt;
&lt;li&gt;Error management&lt;/li&gt;
&lt;li&gt;Structs and Classes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0resources"&gt;
  &lt;/a&gt;
  ¬†Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/cpp/standard-library/fstream?view=msvc-170"&gt;fstream docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#files"&gt;
  &lt;/a&gt;
  Files
&lt;/h2&gt;

&lt;p&gt;Your operating system is full of files, both files that you create and other files that belong to the operating system that you shouldn't touch. Many applications out there rely on files and the ability to create files for logging purposes for example or various reports. Additionally, being able to read from files is an important thing to be able to do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fstream-library"&gt;
  &lt;/a&gt;
  Fstream library
&lt;/h2&gt;

&lt;p&gt;In C++ you have a standard library called &lt;code&gt;fstream&lt;/code&gt; that allows you to work with the file system. It exposes three important classes that you should know about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ofstream&lt;/code&gt;. With an instance of this class you can create and write to files.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ifstream&lt;/code&gt;. This library enables you to read to files.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fstream&lt;/code&gt;. Sometimes you need the capability to both read and write, for that, you have &lt;code&gt;fstream&lt;/code&gt;, capable of doing both.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0reading"&gt;
  &lt;/a&gt;
  ¬†Reading
&lt;/h2&gt;

&lt;p&gt;Let's start with reading from a file. You use &lt;code&gt;ifstream&lt;/code&gt; and create an object instance for it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;ifstream&lt;/span&gt; &lt;span class="nf"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file.txt"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see from the code, also specify a string that represents the full path to the file, including its file name.&lt;/p&gt;

&lt;p&gt;At this point, you have reference to the file and is ready to read from it. So how do you read from it?&lt;/p&gt;

&lt;p&gt;You use &lt;code&gt;getline()&lt;/code&gt; in combination with a &lt;code&gt;while&lt;/code&gt; loop to read each row from the file, line by line, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;getline()&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; when there's no more to be read in the stream. Note how &lt;code&gt;close()&lt;/code&gt; is called as the last thing we do. It's important to close a stream or you might actually lock access for other code to access the file when you are done with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-if-we-can-read"&gt;
  &lt;/a&gt;
  Check if we can read
&lt;/h3&gt;

&lt;p&gt;So far, we've been very optimistic, we assume the file exist and we have the rights to read from it as well. However, you might be in a situation where the file doesn't exist, or you don't have rights to read from it. For that reason, you need to check whether the file is ready to be read from. Here's some code that checks that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;can_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;ifstream&lt;/span&gt; &lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;exists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// is_open&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;exists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's going on is that we call &lt;code&gt;readstream.open()&lt;/code&gt;, if we can read from this stream, then we are good to go. There are two ways to check its status, either as pictured above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"path/to/file/file.txt"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// all is well&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or you can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which returns a boolean, &lt;code&gt;true&lt;/code&gt; if you can read from it, and &lt;code&gt;false&lt;/code&gt;, if you can't.&lt;/p&gt;

&lt;p&gt;Worth noting is that it's hard to differ between cases such as that a file doesn't exist, and you don't have permission to read from it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reading-a-few-characters"&gt;
  &lt;/a&gt;
  Reading a few characters
&lt;/h3&gt;

&lt;p&gt;So far, you've seen how you read file content, line by line, you can also read a few characters or bytes at a time and more. Dealing with files is a really big topic, but let's show how you read a few characters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;ifstream&lt;/span&gt; &lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file.txt"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code will instruct the &lt;code&gt;ifstream&lt;/code&gt;, instance to read 5 characters from the stream and place it in the &lt;code&gt;array&lt;/code&gt; variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0writing-to-a-file"&gt;
  &lt;/a&gt;
  ¬†Writing to a file
&lt;/h2&gt;

&lt;p&gt;To write to a file, we need an instance of &lt;code&gt;ostream&lt;/code&gt; and the name of the file, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;ostream&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"new_file.txt"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ostream&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"line1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ostream&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"line2"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ostream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will create the file &lt;em&gt;new_file.txt&lt;/em&gt; and two rows of text and then close the stream, which is important when you write to it as well. If this file already exists, its content will be replaced, so a heads up. What if you just want to add content to an existing file? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#append"&gt;
  &lt;/a&gt;
  Append
&lt;/h3&gt;

&lt;p&gt;Sometimes you just want to add content, and to do that, you need a slightly altered way of calling the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;ostream&lt;/span&gt; &lt;span class="n"&gt;writestream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;writestream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"new_file.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ios_base&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;writestream&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"add this last"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;writestream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how we use the method &lt;code&gt;open()&lt;/code&gt;. Said method allows us to specify filename, as well as how to treat the file. The default with a &lt;code&gt;writestream&lt;/code&gt; is to attempt to create the file and replace what's there if it already exists. What we are doing is providing &lt;code&gt;ios_base::app&lt;/code&gt;, which is an instruction that says &lt;em&gt;append&lt;/em&gt;, i.e. add the content to the end of the file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this article, we've learned how to work with files, reading and writing to them. Hopefully, you know have enough knowledge to learn to use files as part of your apps.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Delete a File or Folder that Can‚Äôt Be Deleted, Is Write-Protected or Can‚Äôt Be Accessed?</title>
      <author>Michael Mirosnichenko</author>
      <pubDate>Tue, 16 Nov 2021 13:41:34 +0000</pubDate>
      <link>https://dev.to/hetmansoftware/how-to-delete-a-file-or-folder-that-cant-be-deleted-is-write-protected-or-cant-be-accessed-18ck</link>
      <guid>https://dev.to/hetmansoftware/how-to-delete-a-file-or-folder-that-cant-be-deleted-is-write-protected-or-cant-be-accessed-18ck</guid>
      <description>&lt;p&gt;Do you have a problem when you can‚Äôt delete a folder or several files from your PC or laptop? Does Windows show you an ‚Äúaccess denied‚Äù error? It can happen due to various causes when you delete, edit or overwrite files. Read this article to find out how to delete a file or folder that can‚Äôt be deleted because of write protection, denied access, virus infection or opening a file in an unknown program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-disk-is-writeprotected"&gt;
  &lt;/a&gt;
  The disk is write-protected
&lt;/h2&gt;

&lt;p&gt;If you try to delete a file or folder from a pen drive, memory card or a hard disk and see the message saying The disk is write-protected, it means some sort of protection against writing data is set up for such disk.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---sCRWTEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nf4yzxywtjf50lf3qen.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---sCRWTEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nf4yzxywtjf50lf3qen.png" alt="Image description" width="456" height="254"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#could-not-find-this-item"&gt;
  &lt;/a&gt;
  Could not find this item
&lt;/h2&gt;

&lt;p&gt;If you get this kind of message when deleting a file or folder: Could not find this item. Verify the item‚Äôs location and try again, there might be several causes behind this problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A system error (a glitch concerning rights to the file or folder which you are trying to delete; a problem with the name of such file or folder: it might be either too long or contain certain symbols which cause a conflict when the operating system tries to remove the item etc).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The computer could be infected by a virus.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r42XsPXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g109xwfb7e84bbyqlgdp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r42XsPXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g109xwfb7e84bbyqlgdp.png" alt="Image description" width="453" height="215"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In such a situation, try deleting the problem-plagued file or folder with the following utilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Total Commander;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ltJ4RVoR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hzxuqi8s3wjxvw9wgym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ltJ4RVoR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hzxuqi8s3wjxvw9wgym.png" alt="Image description" width="788" height="535"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Far;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tiHr4MMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaqbf9anbd8f8y7n1o1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tiHr4MMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaqbf9anbd8f8y7n1o1c.png" alt="Image description" width="610" height="319"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If using the programs that we listed above couldn‚Äôt help you, boot the computer in the safe mode and try removing the file or folder in such a way. If the cause of file blocking is a virus, in most cases you can delete the files without any additional actions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zkX5AhpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwiueqw89vzu2pv2gywk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zkX5AhpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwiueqw89vzu2pv2gywk.png" alt="Image description" width="788" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-have-no-rights-to-modify-files"&gt;
  &lt;/a&gt;
  You have no rights to modify files
&lt;/h2&gt;

&lt;p&gt;If Windows says you don‚Äôt have the necessary rights to modify files, then you need to use the administrator‚Äôs account to be able to delete or edit the file. Sign in with the administrator‚Äôs rights. There is no other way to do it‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qggZHiYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siewej2b5f6h8y80nw6a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qggZHiYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siewej2b5f6h8y80nw6a.png" alt="Image description" width="455" height="241"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-file-or-folder-cannot-be-deleted-because-it-is-opened-in-another-program"&gt;
  &lt;/a&gt;
  A file or folder cannot be deleted because it is opened in another program
&lt;/h2&gt;

&lt;p&gt;If Windows displays a message that a file or folder cannot be deleted because it is opened in another program, remember the name of such program and do the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Et14uFJu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zk86944ga4ujvv1s2sfb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Et14uFJu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zk86944ga4ujvv1s2sfb.png" alt="Image description" width="454" height="269"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Press the key shortcut Windows + r.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the Run window, type in ‚Äúresmon.exe‚Äù and press Enter.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yioujlXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hessfvlcnjedmapves2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yioujlXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hessfvlcnjedmapves2.png" alt="Image description" width="405" height="213"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the tab ‚ÄúOverview‚Äù find the program that prevents you from deleting the file or folder, right-click on it and select End process. Repeat this step, if the name of the program is shown several times in the tab ‚ÄúOverview.‚Äù&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o9MYiAnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b1nm5m1iag3we5dh9o0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o9MYiAnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b1nm5m1iag3we5dh9o0.png" alt="Image description" width="739" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try deleting the files again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you couldn‚Äôt delete the files or folders in any of the ways, describe your situation and ask questions in comments.&lt;/p&gt;

&lt;p&gt;Read the &lt;a href="https://hetmanrecovery.com/recovery_news/how-to-delete-a-file-or-folder-that-cannot-be-deleted-is-write-protected-or-cannot-be-accessed.htm"&gt;full article&lt;/a&gt; with all additional video tutorials. Also visit our &lt;a href="https://www.youtube.com/channel/UCu-D9QnPsAPn7AtxL4HXLUg"&gt;Youtube channel&lt;/a&gt;, there are over 400 video tutorials.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>testing</category>
      <category>security</category>
    </item>
    <item>
      <title>How to execute a recurrent task in a Flask app?</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 16 Nov 2021 13:39:48 +0000</pubDate>
      <link>https://dev.to/adaendra/how-to-execute-a-recurrent-task-in-a-flask-app-1bk7</link>
      <guid>https://dev.to/adaendra/how-to-execute-a-recurrent-task-in-a-flask-app-1bk7</guid>
      <description>&lt;p&gt;In some projects, we need to do dome recurrent tasks while running a Flask API.&lt;/p&gt;

&lt;p&gt;So do be able to do it in a Flask project, we need to use &lt;strong&gt;APScheduler&lt;/strong&gt;.&lt;br&gt;
With this tool, we are able to create background schedulers which will execute our recurrent task.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h2&gt;

&lt;p&gt;Using &lt;strong&gt;pip&lt;/strong&gt;, you can install the library as follow.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;pip install APScheduler&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;To use it, check the following example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;atexit&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;apscheduler.schedulers.background&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BackgroundScheduler&lt;/span&gt;

&lt;span class="c1"&gt;# Declaration of the task as a function.
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_date_time&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%A, %d. %B %Y %I:%M:%S %p"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;# Create the background scheduler
&lt;/span&gt;&lt;span class="n"&gt;scheduler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BackgroundScheduler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Create the job
&lt;/span&gt;&lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;print_date_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"interval"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Start the scheduler
&lt;/span&gt;&lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# /!\ IMPORTANT /!\ : Shut down the scheduler when exiting the app
&lt;/span&gt;&lt;span class="n"&gt;atexit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;APScheduler library : &lt;a href="https://pypi.org/project/APScheduler/"&gt;https://pypi.org/project/APScheduler/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I hope it will help you! üç∫&lt;/p&gt;

</description>
      <category>python</category>
      <category>todayilearned</category>
      <category>programming</category>
    </item>
    <item>
      <title>What Makes Your Code More Readable I</title>
      <author>Sho-ki</author>
      <pubDate>Tue, 16 Nov 2021 13:28:35 +0000</pubDate>
      <link>https://dev.to/shoki/what-makes-your-code-more-readable-i-521o</link>
      <guid>https://dev.to/shoki/what-makes-your-code-more-readable-i-521o</guid>
      <description>&lt;p&gt;Are you naming variables too casually, or writing code without caring about the feelings of reviewers?&lt;br&gt;
This article is divided into several chapters with examples on how to make your code more readable, based on what I understood from the book "The Art of Readable Code".&lt;br&gt;
(Boswell, D., Foucher, T. (2012). The Art of Readable Code. O'Reilly. )&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Packing Information into Names&lt;br&gt;
1-1. Choose Specific Words&lt;br&gt;
1-2. Avoid Common Names Such as &lt;code&gt;tmp&lt;/code&gt; and &lt;code&gt;val&lt;/code&gt;&lt;br&gt;
1-3. Decide Variable Length According to the Scale of the Scope&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Naming Clear Variables to Avoid Misunderstandings&lt;br&gt;
2-1. Avoid to Use Ambiguous Words&lt;br&gt;
2-2. Use &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; For Limits&lt;br&gt;
2-3. Use Words Like &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;has&lt;/code&gt; for boolean Variables&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#why-readable-code-is-important"&gt;
  &lt;/a&gt;
  Why Readable Code Is Important
&lt;/h2&gt;

&lt;p&gt;I think all you know the code should be readable, but have you thought about specific advantages of readable codes?&lt;br&gt;
That is simply understandable and easy to review the code. Even you develop your app in your own, the reviewer may be you after a year.&lt;br&gt;
Some of advantages of readable code are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Less time consuming to debug&lt;/li&gt;
&lt;li&gt;Easy to understand for reviewers&lt;/li&gt;
&lt;li&gt;Easy to maintain&lt;/li&gt;
&lt;li&gt;Easy to extend new function&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let's see what and how you can make the code more readable.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-packing-information-into-names"&gt;
  &lt;/a&gt;
  1. Packing Information into Names
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OMkPtStW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtvcum1r0glx5ccftnni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OMkPtStW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtvcum1r0glx5ccftnni.png" alt="Packing Information into Names" width="880" height="461"&gt;&lt;/a&gt;&lt;br&gt;
When you name a variable, you need to include information about the value. However, not just anything related to the value can be used, and there are a few tips on how to name them.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#11-choose-specific-words"&gt;
  &lt;/a&gt;
  1-1. Choose Specific Words
&lt;/h3&gt;

&lt;p&gt;For variables, you should choose specific words by thinking of WHAT, WHERE, sometimes HOW.&lt;br&gt;
For example, the word 'get' is unclear in some cases:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚ùé&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may be understandable for a small application, but for a large application, there may be various scenes where you need to retrieve files.&lt;br&gt;
So,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚úÖ&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;downloadFiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchFiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this is more readable since readers know what the function does and returned values are easily.&lt;/p&gt;

&lt;p&gt;Another example is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚ùé&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚úÖ&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;areaSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;memoryBytes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way, by having specific information in the variable name, it becomes easier to understand what the variable is for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-avoid-common-names-such-as-raw-tmp-endraw-and-raw-val-endraw-"&gt;
  &lt;/a&gt;
  1-2. Avoid Common Names Such as &lt;code&gt;tmp&lt;/code&gt; and &lt;code&gt;val&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Names like &lt;code&gt;tmp&lt;/code&gt; and &lt;code&gt;val&lt;/code&gt; are not desirable because they almost do not mean anything. And reviewers need to track what it has.&lt;br&gt;
For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚ùé&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;averageScore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// you need to track what it is&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, &lt;code&gt;val&lt;/code&gt; doesn't have much information, and as a result, you have to keep track of what goes into the value of &lt;code&gt;val&lt;/code&gt; every time you see the code.&lt;br&gt;
So using a specific name like &lt;code&gt;sumScore&lt;/code&gt; in this case is much better instead of using &lt;code&gt;val&lt;/code&gt; to &lt;code&gt;tmp&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚úÖ&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;averageScore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// you know what it will have&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sumScore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sumScore&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sumScore&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, &lt;code&gt;tmp&lt;/code&gt; or &lt;code&gt;val&lt;/code&gt; can be used in some cases, especially for short-lived storage.&lt;br&gt;
For example, in swapping,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚úÖ&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because &lt;code&gt;tmp&lt;/code&gt; is only used in 3 lines in the function, this is fine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-decide-variable-length-according-to-the-scale-of-the-scope"&gt;
  &lt;/a&gt;
  1-3. Decide Variable Length According to the Scale of the Scope
&lt;/h3&gt;

&lt;p&gt;The length of the variable should be determined according to the scope of use.&lt;br&gt;
For a short scope like 5 lines, it is better to use a short name because you can check what the variable is for easily. &lt;br&gt;
On the other hand, if the variable is used in a large scope, it is better to name the variable with the necessary information so that it can be understood anytime and anywhere.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚ùé&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;eatFood&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;amountOfFoodPersonCanEat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;amountOfFoodPersonCanEat&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Eat &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;amountOfFoodPersonCanEat&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; apples&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, &lt;code&gt;amountOfFoodPersonCanEat&lt;/code&gt; is shorted-lived and used one time. In that case, a shorter variable name is totally fine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚úÖ&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;eatFood&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Eat &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; apples&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;amount&lt;/code&gt; is enough to understand what it has in this short scope code.&lt;br&gt;
But in contrast, if you use the variable in other functions or keep using it in the function, you might want to name like &lt;code&gt;amountOfFoodPersonCanEat&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚úÖ&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;amountOfFoodPersonCanEat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;eatFood&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;amountOfFoodPersonCanEat&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;amountOfFoodPersonCanEat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;eatFood&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-naming-clear-variables-to-avoid-misunderstandings"&gt;
  &lt;/a&gt;
  2. Naming Clear Variables to Avoid Misunderstandings
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oq1nG3Qe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qid4i8unn9hm8q2k5k7m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oq1nG3Qe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qid4i8unn9hm8q2k5k7m.png" alt="Naming Clear Variables to Avoid Misunderstandings" width="880" height="574"&gt;&lt;/a&gt;&lt;br&gt;
"Will someone misinterpret this name to mean something else?" That's what you need to think when choosing a name.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#21-avoid-to-use-ambiguous-words"&gt;
  &lt;/a&gt;
  2-1. Avoid to Use Ambiguous Words
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#filtered"&gt;
  &lt;/a&gt;
  filtered...
&lt;/h4&gt;

&lt;p&gt;You may want to use &lt;code&gt;filteredArray&lt;/code&gt; or &lt;code&gt;filteredObj&lt;/code&gt; for filtered arrays or objects. As I mentioned before, that's fine for short-lived variables. But it may cause misunderstandings or confusion whether &lt;code&gt;filteredArray&lt;/code&gt; is a selected array or a deleted array. Therefore when you want to mean &lt;code&gt;select out array&lt;/code&gt; for a variable, it may be better to use &lt;code&gt;selectedArray&lt;/code&gt;. Also, &lt;code&gt;removedArray&lt;/code&gt;, for example, should be used to mean removed array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚ùé&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚úÖ&lt;/span&gt;
&lt;span class="c1"&gt;// These are crystal clear what the arrays are&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{...}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#sliced-spliced-clipped-etc"&gt;
  &lt;/a&gt;
  sliced..., spliced..., clipped... etc.
&lt;/h4&gt;

&lt;p&gt;As same as filtered..., all the words could be misunderstood. So you may want to use something like &lt;code&gt;slicedResultArr&lt;/code&gt; and &lt;code&gt;excludedArr&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚ùé&lt;/span&gt;
&lt;span class="c1"&gt;// It may cause misunderstanding&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slicedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{...}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;splicedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{...}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clippedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚úÖ&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slicedResultArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{...}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;excludedArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#22-use-raw-min-endraw-and-raw-max-endraw-for-limits"&gt;
  &lt;/a&gt;
  2-2. Use &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; For Limits
&lt;/h3&gt;

&lt;p&gt;Putting max_ or min_ in front of what is restricted is a good way to mean limits.&lt;br&gt;
For example, &lt;code&gt;limitNum = 5&lt;/code&gt; may lead misunderstanding in some situations. It could be a minimum value, it could be a maximum value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚ùé&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;limitNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boxSelected&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;limitNum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not enough&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// or&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boxSelected&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;limitNum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Too much&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, it gets harder to know that &lt;code&gt;limitNum&lt;/code&gt; is for a minimum value or maximum value.&lt;br&gt;
So you just simply want to add &lt;code&gt;min&lt;/code&gt; or &lt;code&gt;max&lt;/code&gt; as a prefix.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚úÖ&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;minLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boxSelected&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;minLimit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not enough&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;maxLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boxSelected&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;maxLimit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Too much&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you know what the variables are and the code is simple and clear.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#23-use-words-like-raw-is-endraw-and-raw-has-endraw-for-boolean-variables"&gt;
  &lt;/a&gt;
  2-3. Use Words Like &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;has&lt;/code&gt; for boolean Variables
&lt;/h3&gt;

&lt;p&gt;This is one of the common rules but let me shortly explain it.&lt;br&gt;
Generally, at least in English, for a question beginning with 'Is this ~~~?' and 'Do you ...?', you answer with 'Yes/No'. In this way, boolean variables should also be asked as &lt;code&gt;is~&lt;/code&gt;, &lt;code&gt;can~&lt;/code&gt;, or &lt;code&gt;has~&lt;/code&gt; (&lt;code&gt;has&lt;/code&gt; is common instead of &lt;code&gt;do&lt;/code&gt;).&lt;br&gt;
For example, the following variables are difficult to guess if they have a boolean value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚ùé&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dragOver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;updatable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;itemsExist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of these, you should use keywords to easily guess 'Yes/No'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;‚úÖ&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isDragOver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;canUpdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hasItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this article, as a first chapter, I summarized the basic tips that makes your code readable.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Packing Information into Names&lt;br&gt;
1-1. Choose Specific Words&lt;br&gt;
1-2. Avoid Common Names Such as &lt;code&gt;tmp&lt;/code&gt; and &lt;code&gt;val&lt;/code&gt;&lt;br&gt;
1-3. Decide Variable Length According to the Scale of the Scope&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Naming Clear Variables to Avoid Misunderstandings&lt;br&gt;
2-1. Avoid to Use Ambiguous Words&lt;br&gt;
2-2. Use &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; For Limits&lt;br&gt;
2-3. Use Words Like &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;has&lt;/code&gt; for boolean Variables&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Be careful in naming variables so that people reading your code will easily understand what you write as you intend. As a developer, you always need to consider the possibility of misunderstanding.&lt;/p&gt;

&lt;p&gt;I will keep writing how you can improve your code readability.&lt;br&gt;
Reference:&lt;br&gt;
Boswell, D., Foucher, T. (2012). The Art of Readable Code. O'Reilly. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Implement File Upload in Angular?</title>
      <author>Tarun Gurang</author>
      <pubDate>Tue, 16 Nov 2021 13:19:24 +0000</pubDate>
      <link>https://dev.to/tarungurang/how-to-implement-file-upload-in-angular-43gc</link>
      <guid>https://dev.to/tarungurang/how-to-implement-file-upload-in-angular-43gc</guid>
      <description>&lt;p&gt;Being able to upload the files and use them afterward is the required characteristic of many apps. The following are commonly used elements to perform file upload with Angular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#formdata"&gt;
  &lt;/a&gt;
  FormData
&lt;/h2&gt;

&lt;p&gt;FormData is an object that you can use for storing key-value pairs. It allows you to construct an object which aligns with an HTML form. This feature allows you to send the data, such as file upload using the XMLHttpRequest interface or Http client libraries.&lt;/p&gt;

&lt;p&gt;You can use the following command to create the FormData:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const formdata = new FormData();

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#httpclientmodule"&gt;
  &lt;/a&gt;
  HttpClientModule
&lt;/h3&gt;

&lt;p&gt;HttpClientModule contains an API that you can use to send and fetch the data in your application from the Http servers. You can use the following command to import this module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Import {HttpClientModule} from ‚Äò@angular/common/http‚Äô;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reactive-forms"&gt;
  &lt;/a&gt;
  Reactive Forms
&lt;/h3&gt;

&lt;p&gt;Reactive forms allow you to use a model-driven approach to manage form inputs. You can use multiple controls in a form group, validate the form values with the help of these forms. You can use the following to import this module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { ReactiveFormsModule } from '@angular/forms';
@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    ReactiveFormsModule
  ],
  providers: [],
  bootstrap: [ AppComponent ]
})
export class AppModule { }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#implement-file-upload"&gt;
  &lt;/a&gt;
  Implement File Upload
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Install Angular CLI and create a new project&lt;/p&gt;

&lt;p&gt;You can install the angular CLI using this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g @angular/cli

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can create a new angular project using the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng new FileUploadDemo

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use this command to run the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng serve --open

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.ifourtechnolab.com/blog/implementation-of-ngx-infinite-scroller-using-angular-application"&gt;Implementation Of Ngx Infinite Scroller Using Angular Application&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Add the HttpClientModule&lt;/p&gt;

&lt;p&gt;You can import this module in the app.module.ts file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HttpClientModule } from '@angular/common/http';
@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [ AppComponent ]
})
export class AppModule { }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Create angular components&lt;/p&gt;

&lt;p&gt;You can create components using the following command.&lt;/p&gt;

&lt;p&gt;After running this command, angular CLI generates four files of this component and added in the declaration array in the app.module.ts file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Adding angular routing&lt;/p&gt;

&lt;p&gt;After creating a component, you can add the routing in the app-routing.module.ts file. First, you need to import this component and then add the routes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { AboutComponent } from './about/about.component';
import { HomeComponent } from './home/home.component';
const routes: Routes = [
  { path: '', redirectTo: 'home', pathMatch: 'full' },  
  { path: 'home', component: HomeComponent },  
  { path: 'about', component: AboutComponent },  
];
@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Setting up angular material&lt;/p&gt;

&lt;p&gt;You can use the following command to add angular material.&lt;/p&gt;

&lt;p&gt;In the app.module.ts file, you can add the module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HttpClientModule } from '@angular/common/http';
import { HomeComponent } from './home/home.component';
import { AboutComponent } from './about/about.component';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatToolbarModule  } from '@angular/material/toolbar';
import { MatIconModule } from '@angular/material/icon';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { MatProgressBarModule } from '@angular/material/progress-bar';
@NgModule({
  declarations: [
    AppComponent,
    HomeComponent,
    AboutComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule,
    BrowserAnimationsModule,
    MatToolbarModule,
    MatCardModule,  
    MatButtonModule,  
    MatProgressBarModule,
    MatIconModule
  ],
  providers: [],
  bootstrap: [ AppComponent ]
})
export class AppModule { }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 6:&lt;/strong&gt; Create file upload service&lt;/p&gt;

&lt;p&gt;You can use the following command to generate a service.&lt;/p&gt;

&lt;p&gt;In the UploadService.ts file, write the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Injectable } from '@angular/core';
import { HttpClient, HttpEvent, HttpErrorResponse, HttpEventType } from  '@angular/common/http';  
import { map } from  'rxjs/operators';
@Injectable({
  providedIn: 'root'
})
export class UploadService {
  SERVER_URL: string = "https://file.io/";  
  constructor( private httpClient: HttpClient ) { }
  public upload(formData) {
    return this.httpClient.post&amp;lt;any&amp;gt;(this.SERVER_URL, formData, {  
        reportProgress: true,  
        observe: 'events'  
      });  
  }
}
&amp;lt;/any&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Want to Hire Trusted &lt;a href="https://www.ifourtechnolab.com/angular-js-development-company"&gt;AngularJS Development Company&lt;/a&gt; - Enquire Today.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7:&lt;/strong&gt; After creating the service, you need to define the upload method in the home.component.ts file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component, OnInit, ViewChild, ElementRef  } from '@angular/core';
import { HttpEventType, HttpErrorResponse } from '@angular/common/http';
import { of } from 'rxjs';  
import { catchError, map } from 'rxjs/operators';  
import { UploadService } from  '../upload.service';
@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.scss']
})
export class HomeComponent implements OnInit {
  @ViewChild("fileUpload", {static: false}) fileUpload: ElementRef;files  = [];  
    constructor( private uploadService: UploadService ) { }
  ngOnInit(): void {
  }
  uploadFile(file) {  
    const formData = new FormData();  
    formData.append('file', file.data);  
    file.inProgress = true;  
    this.uploadService.upload(formData).pipe(  
      map(event =&amp;gt; {  
        switch (event.type) {  
          case HttpEventType.UploadProgress:  
            file.progress = Math.round(event.loaded * 100 / event.total);  
            break;  
          case HttpEventType.Response:  
            return event;  
        }  
      }),  
      catchError((error: HttpErrorResponse) =&amp;gt; {  
        file.inProgress = false;  
        return of(`${file.data.name} upload failed.`);  
      })).subscribe((event: any) =&amp;gt; {  
        if (typeof (event) === 'object') {  
          console.log(event.body);  
        }  
      });  
  }
  private uploadFiles() {  
    this.fileUpload.nativeElement.value = '';  
    this.files.forEach(file =&amp;gt; {  
      this.uploadFile(file);  
    });  
}
  onClick() {  
    const fileUpload = this.fileUpload.nativeElement;fileUpload.onchange = () =&amp;gt; {  
    for ( let index = 0; index &amp;lt; fileUpload.files.length; index++)  
    {  
     const file = fileUpload.files[index];  
     this.files.push({ data: file, inProgress: false, progress: 0});  
    }  
      this.uploadFiles();  
    };  
    fileUpload.click();  
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you need to create an HTML template. Add the following content in the home.component.html file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;mat-card&amp;gt;  
        &amp;lt;mat-card-content&amp;gt;  
            &amp;lt;ul&amp;gt;  
                &amp;lt;li *ngFor="let file of files"&amp;gt;  
                    &amp;lt;mat-progress-bar [value]="file.progress"&amp;gt;&amp;lt;/mat-progress-bar&amp;gt;  
                    &amp;lt;span id="file-label"&amp;gt;  

                    &amp;lt;/span&amp;gt;  
                &amp;lt;/li&amp;gt;  
            &amp;lt;/ul&amp;gt;  
        &amp;lt;/mat-card-content&amp;gt;  
        &amp;lt;mat-card-actions&amp;gt;  
            &amp;lt;button mat-button color="warn" (click)="onClick()"&amp;gt;  
                &amp;lt;mat-icon&amp;gt;file_upload&amp;lt;/mat-icon&amp;gt;  
                Upload  
            &amp;lt;/button&amp;gt;  
        &amp;lt;/mat-card-actions&amp;gt;  
    &amp;lt;/mat-card&amp;gt;
&amp;lt;input type="file" #fileUpload id="fileUpload" name="fileUpload" multiple="multiple" accept="image/*" style="display:none;" /&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, add the toolbar in the app.component.html file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span id="file-label"&amp;gt;
&amp;lt;mat-toolbar color="primary"&amp;gt;&amp;lt;mat-progress-bar&amp;gt;  
  &amp;lt;h1&amp;gt;  
    ngImageUpload   
  &amp;lt;/h1&amp;gt;  
  &amp;lt;button mat-button="" routerlink=" "&amp;gt;Home  
  &amp;lt;/button&amp;gt;&amp;lt;button mat-button="" routerlink=" about"&amp;gt;&amp;lt;/button&amp;gt;&amp;lt;button mat-button="" routerlink=" "&amp;gt;About
&amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;&amp;lt;/button&amp;gt;&amp;lt;/mat-progress-bar&amp;gt;&amp;lt;/mat-toolbar&amp;gt;&amp;lt;/span&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;In this blog, we have seen how to perform file upload in angular. We have started the same by installing angular cli and created an angular application. We installed angular material in the angular application.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>programming</category>
    </item>
    <item>
      <title>Pure HTML+CSS Tic-Tac-Toe (no JS)</title>
      <author>Aaron J Spetner</author>
      <pubDate>Tue, 16 Nov 2021 13:18:03 +0000</pubDate>
      <link>https://dev.to/ajspetner/pure-htmlcss-tic-tac-toe-no-js-4l2k</link>
      <guid>https://dev.to/ajspetner/pure-htmlcss-tic-tac-toe-no-js-4l2k</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LsrOvkUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xt8mw4cjad1041d0tdgo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LsrOvkUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xt8mw4cjad1041d0tdgo.png" alt="Pure CSS Tic-Tac-Toe Game" width="756" height="835"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From time-to-time, it's a good idea to give yourself a mental challenge, especially if you don't find yourself writing actual code on a regular basis.&lt;/p&gt;

&lt;p&gt;This is a tic-tac-toe game created purely with HTML and CSS, without any JavaScript (or preprocessors, etc). It takes out-of-the-box thinking to create a working multiplayer game without writing any logical code. It is obviously &lt;b&gt;not okay&lt;/b&gt; to create an application like this, but it's a cool mental exercise.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/AJSpetner/embed/zYdmJRL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>purecss</category>
      <category>cssonly</category>
      <category>game</category>
    </item>
    <item>
      <title>What is OTT? How does it work?</title>
      <author>Arya00123</author>
      <pubDate>Tue, 16 Nov 2021 13:12:34 +0000</pubDate>
      <link>https://dev.to/arya00123/what-is-ott-how-does-it-work-2f87</link>
      <guid>https://dev.to/arya00123/what-is-ott-how-does-it-work-2f87</guid>
      <description>&lt;p&gt;OTT technology has a big impact on the evolution of the media industry. As technology evolves and new ones arise, the word "OTT" has come to refer to &lt;strong&gt;&lt;a href="https://www.webnexs.com/vod-platform.php"&gt;streaming media services&lt;/a&gt;&lt;/strong&gt; that send videos and other digital content to any device that can connect to the Internet, including televisions, bypassing cable services, broadcast, and satellite television platforms.&lt;/p&gt;

&lt;p&gt;Let's look at what OTT is, how OTT services work, and why they've grown so popular in recent years in this blog.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-ott-mean"&gt;
  &lt;/a&gt;
  What does OTT mean?
&lt;/h2&gt;

&lt;p&gt;Over-the-top (OTT) is a means of delivering media content over the internet at the request of the customer and customized to their individual requirements. A third-party operator has no control over the delivery. The term "over-the-top" refers to a content provider who improves present internet services with additional features.&lt;/p&gt;

&lt;p&gt;OTT refers to a service or technology that allows users to send others pre-recorded or live-streamed content. This material is accessible via internet-enabled devices such as mobile phones, smartphones, tablets, smart TVs, streaming sticks, and personal computers.&lt;/p&gt;

&lt;p&gt;Most OTT services nowadays provide more than just video streaming and hosting. OTT content is distributed over the internet through an unmanaged network that follows an open ecosystem. Instead, using satellite or cable, the content is delivered through the internet. It may be seen using any mobile data or Wi-Fi connection. This service does not require dedicated broadband access to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-i-use-ott"&gt;
  &lt;/a&gt;
  Why should I use OTT?
&lt;/h2&gt;

&lt;p&gt;Here are just a few  reasons why OTT video is so popular with viewers:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessibility:&lt;/strong&gt; Viewers have grown accustomed to seeing what they want when they want it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Control:&lt;/strong&gt; Viewers are prepared to pay more to have greater control over the shows they watch. As a result, 50% of OTT consumers have multiple subscriptions. They're willing to pay to customize their video viewing experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cost:&lt;/strong&gt; Many viewers feel they are overpaying for cable subscriptions that provide them with less access and control. They may save money while enhancing their experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Original content:&lt;/strong&gt; In recent years, OTT providers like Netflix and Amazon Prime have begun to supply original content that is only available through their platforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Support with multiple devices:&lt;/strong&gt; For many years, watching cable television needed the use of a television. We can now watch OTT content on a variety of devices. From a game console, smartphone, tablet, or smart TV, each account holder may enjoy the same OTT experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-ott-technology-work"&gt;
  &lt;/a&gt;
  How Does OTT Technology Work?
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#how-about-an-example-of-ott-technology-in-action"&gt;
  &lt;/a&gt;
  How about an example of OTT technology in action:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Broadcasters submit video content to an over-the-top (OTT) video platform.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A content delivery network transmits the data from the video host to external servers (CDN)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the user-facing video gallery, viewers pick the content they want to see.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The video content is pulled from the CDN's server through the internet by the device's video player.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ott-includes"&gt;
  &lt;/a&gt;
  OTT Includes:
&lt;/h2&gt;

&lt;p&gt;Viewers who access video content through an app or website that delivers streaming video content are referred to as over-the-top (OTT) video viewers. HBO Now, Hulu, Netflix, Amazon Video, YouTube/YouTube Red, and Sling TV are just a few examples of streaming services.&lt;/p&gt;

&lt;p&gt;Users of connected television (CTV) include those who use television sets with built-in internet access (such as Smart TVs) or other devices that have the capability, such as set-top boxes (STBs). Apple TV, Google Chromecast, Amazon FireStick, and Roku are all examples of streaming devices.&lt;/p&gt;

&lt;p&gt;Users of linear OTT video services: Users who pay a monthly fee to receive live TV channel bundles through the internet. Sling TV, DirecTV Now, Hulu with Live TV, YouTube TV, and PlayStation Vue are just a few examples.&lt;/p&gt;

&lt;p&gt;The following are some of the most common OTT user sub-categories:&lt;br&gt;
Video-on-demand (AVOD) with advertising: Users gain free access to the material, which is then monetized by video advertising.&lt;/p&gt;

&lt;p&gt;Users who have paid for a monthly or yearly membership to view streaming video material are referred to as subscription video-on-demand (SVOD).&lt;/p&gt;

&lt;p&gt;Users who have paid for access to select material via a pay-per-view (PPV) purchasing model are referred to as transactional-based video-on-demand (TVOD).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OTT Content Delivery&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The popularity and wide use of OTT content are due to its accessibility. Only an internet connection and a suitable hardware device are required for OTT streaming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Devices for OTT Content on the Go:&lt;/strong&gt; OTT applications may be downloaded for streaming on the go using your Smartphones and tablets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Personal computer:&lt;/strong&gt; Users with internet connectivity can also view OTT video using desktop applications or web browsers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart TVs:&lt;/strong&gt; Smart TVs are the newest addition to OTT streaming. Apple TVs, SmartTVs, PlayStations, Chromecasts, Xboxes, and FireSticks are just a few examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-future-of-ott"&gt;
  &lt;/a&gt;
  The Future of OTT
&lt;/h2&gt;

&lt;p&gt;OTT is permanently altering the industry. Viewers are increasingly using streaming applications and over-the-top (OTT) services. Apps such as Netflix, Amazon Prime, Hotstar, and Hulu have achieved enormous popularity, resulting in a loss of viewers for traditional television. As the OTT industry expands, so will the opportunities connected with it. For example, businesses that use OTT video to support their sales and marketing aims.&lt;/p&gt;

&lt;p&gt;OTT platforms, as one of the primary sources of entertainment, have greatly helped in these difficult pandemic times. Almost all streaming services include free trials, which users take advantage of. Customer retention, on the other hand, is the real test for these platforms. This may be accomplished not just through high-quality content, but also through cutting-edge technologies like Netflix. &lt;/p&gt;

&lt;p&gt;OTT providers must examine all phases of the OTT subscriber's life cycle to give consumers a seamless content viewing experience. The discovery and delivery of content is the initial step in that direction. Further, AI and machine learning will assist in personalizing the search experience by analyzing customer behaviour and offering the proper data at the correct time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-ott-more-accessible-to-the-public"&gt;
  &lt;/a&gt;
  Making OTT more accessible to the public
&lt;/h2&gt;

&lt;p&gt;Webnexs and other OTT video platforms make it simple for creators to create branded channels and applications.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Produce high-definition viewing experiences.&lt;/li&gt;
&lt;li&gt;Stream content to their target viewers wherever they are.&lt;/li&gt;
&lt;li&gt;Content can be easily monetized and payments may be processed.&lt;/li&gt;
&lt;li&gt;At any size, manage content and digital rights.&lt;/li&gt;
&lt;li&gt;In-depth analytics can be used to measure success.&lt;/li&gt;
&lt;li&gt;With the technological requirements met, OTT has become a universe of creators.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-ott"&gt;
  &lt;/a&gt;
  Benefits of  OTT:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You reach many people. Most ads are watched almost entirely by viewers and have a 100% viewability rate. All adverts are displayed in full-screen mode, which means that all pixels are visible. This eliminates below-the-fold advertisements from other media platforms.&lt;/li&gt;
&lt;li&gt;Advertisers connect audiences across reliable networks and popular content with advertising delivered on-demand or during live TV.&lt;/li&gt;
&lt;li&gt;The advantages of programmatic advertising are now available in new mediums thanks to over-the-top (OTT) advertising.&lt;/li&gt;
&lt;li&gt;Customers may learn from and connect with providers as analogue becomes digital.&lt;/li&gt;
&lt;li&gt;Content distribution and pricing can be more efficient with de-bundling, cord-cutting, and becoming OTT.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Overall, OTT is the future of media. It's a wonderful moment to be part of it. It has added a great deal of ease to our lives. I hope this article has provided you with a clear knowledge of OTT. If you want to learn more about OTT, please &lt;strong&gt;&lt;a href="https://www.webnexs.com/vod-platform.php"&gt;get in touch with Webnexs&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>ott</category>
      <category>ottplatforms</category>
      <category>howottworks</category>
    </item>
  </channel>
</rss>
