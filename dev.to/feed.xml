<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Lexus Announces Lexus Design Award 2022 Jury</title>
      <author>Max Ampilov</author>
      <pubDate>Thu, 28 Oct 2021 17:19:43 +0000</pubDate>
      <link>https://dev.to/maxampilov/lexus-announces-lexus-design-award-2022-jury-fh8</link>
      <guid>https://dev.to/maxampilov/lexus-announces-lexus-design-award-2022-jury-fh8</guid>
      <description>&lt;p&gt;Paola Antonelli and Simon Humphries will be joined by Indian architect Anupamu Kundoo and Canadian designer Bruce Mau. The main criteria for evaluating the work will be their compliance with three key principles of the Lexus brand: to anticipate, innovate and intrigue, as well as the ability to create a better future through design. After determining the composition of the finalists, four well-known designers will become their mentors and help create working prototypes of each project, and in the spring of 2022 the judges will consider the work submitted by the finalists to determine the winner of the Grand Prix. The Lexus Design Award, held for the ninth time, is a global platform to support and develop a new generation of creators. Until October 10, 2021, the site is open to accepting applications for the Russian stage of the Lexus Design Award Russia Top Choice 2022.&lt;br&gt;
&lt;a href="https://design-mate.ru/read/news/lexus-ob-yavil-sostav-zhyuri-konkursa-lexus-design-award-2022"&gt;Source&lt;/a&gt;&lt;/p&gt;

</description>
      <category>design</category>
    </item>
    <item>
      <title>Análisis de sentimientos en una aplicación web con ML.NET</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Thu, 28 Oct 2021 17:04:49 +0000</pubDate>
      <link>https://dev.to/esdanielgomez/analisis-de-sentimientos-en-una-aplicacion-web-con-mlnet-223n</link>
      <guid>https://dev.to/esdanielgomez/analisis-de-sentimientos-en-una-aplicacion-web-con-mlnet-223n</guid>
      <description>&lt;p&gt;¡Hola! Un gusto saludarte. En este articulo tutorial aprenderemos paso a paso a generar un modelo de Machine Learning personalizado desde ML.NET para el análisis de sentimientos en texto, y luego aprender a consumir ese modelo desde una aplicación web sobre ASP.NET con el patrón MVVM (Modelo, Vista, VistaModelo).  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#qu%C3%A9-es-mlnet-y-c%C3%B3mo-funciona"&gt;
  &lt;/a&gt;
  &lt;strong&gt;¿Qué es ML.NET y cómo funciona?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;ML.NET es una plataforma de Machine Learning open source que nos permite transformar datos de entrada en un modelo ML, para luego poder integrarlo en cualquier tipo de aplicación sobre el ecosistema de .NET, ya sean aplicaciones web, móviles, de escritorio, o cualquier otro tipo de aplicación.  &lt;/p&gt;

&lt;p&gt;Estos son los tipos de modelos que podemos generar en ML.NET:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tipo de modelo&lt;/th&gt;
&lt;th&gt;Objetivo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Clasificación/Categorización&lt;/td&gt;
&lt;td&gt;Dividir automáticamente los comentarios de los clientes en categorías positivas y negativas.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Regresión/Predicción de valores continuos&lt;/td&gt;
&lt;td&gt;Predecir el precio de las casas en función del tamaño y la ubicación.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Detección de anomalías.&lt;/td&gt;
&lt;td&gt;Detectar transacciones bancarias fraudulentas.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Recomendaciones&lt;/td&gt;
&lt;td&gt;Sugerir productos que los compradores en línea quieran comprar, en función de sus compras anteriores.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Series temporales/datos secuenciales&lt;/td&gt;
&lt;td&gt;Pronosticar el clima / ventas.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clasificación de imágenes&lt;/td&gt;
&lt;td&gt;Categorizar patologías en imágenes médicas.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;En nuestro caso nos enfocaremos en la clasificación/categorización de comentarios de texto. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#an%C3%A1lisis-de-sentimientos-en-texto"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Análisis de sentimientos en texto&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Para el análisis de sentimientos, la intención es poder clasificar entradas de texto en dos grupos: comentarios positivos (1) y comentarios negativos (0). &lt;/p&gt;

&lt;p&gt;Para lograr este objetivo, realizaremos tres &lt;br&gt;
actividades en este articulo: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. Cumplir con los requisitos necesarios y preparar nuestra solución en Visual Studio. &lt;/li&gt;
&lt;li&gt;2. Crear nuestro modelo de Machine Learning con ML.NET. &lt;/li&gt;
&lt;li&gt;3. Consumir el modelo generado desde ASP.NET. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con esto mencionado, ¡comencemos! &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#parte-1-requisitos-previos-y-preparaci%C3%B3n-de-la-soluci%C3%B3n-en-visual-studio"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Parte 1: Requisitos previos y preparación de la solución en Visual Studio&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Para poder generar nuestro modelo de Machine Learning, utilizaremos el intérprete Model Builder de ML.NET. Para esto, es necesario que contemos con la siguiente carga de trabajo en Visual Studio (Desarrollo multiplataforma de .NET): &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bpWseKSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/av5w0cfcd4n4m8e52pey.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bpWseKSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/av5w0cfcd4n4m8e52pey.png" alt="" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Con esta carga de trabajo, ahora podemos crear nuestra solución. En este caso, la intención es consumir el modelo ML que vayamos a generar desde una aplicación web, para este propósito utilizaremos el framework DotVVM que nos permite trabajar con páginas HTML y clases C# sobre ASP.NET con el patrón MVVM (Modelo, Vista, VistaModelo).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qG55JHd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csglgk3be7fkmto8m4ae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qG55JHd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csglgk3be7fkmto8m4ae.png" alt="" width="417" height="353"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#parte-2-construcci%C3%B3n-del-modelo-de-machine-learning"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Parte 2: Construcción del modelo de Machine Learning&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;¡Llegó el momento de ver a ML.NET en acción! Como en cualquier otro proceso en el mundo del Machine Learning para generar un modelo, los pasos para construir el modelo de análisis sentimientos son los siguientes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Establecer el escenario ML.&lt;/li&gt;
&lt;li&gt;Preparar el entorno para el entrenamiento de los datos. &lt;/li&gt;
&lt;li&gt;Cargar el dataset. &lt;/li&gt;
&lt;li&gt;Entrenar el modelo.&lt;/li&gt;
&lt;li&gt;Evaluar el modelo. &lt;/li&gt;
&lt;li&gt;Consumir el modelo. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para empezar, en el proyecto principal de nuestra solución agregaremos un componente de tipo Machine Learning:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--77sKxg8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sves3lt3cmdqayrk7aht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--77sKxg8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sves3lt3cmdqayrk7aht.png" alt="" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Con esta opción, el interprete de ML.NET Model Builder se inicializará y podremos comenzar a personalizar el modelo. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Escenario:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;El primer paso es seleccionar el escenario con el que deseamos trabajar, en este caso será &lt;em&gt;Text classification&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yv8C2R2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c230u7rzvksroy41dyyf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yv8C2R2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c230u7rzvksroy41dyyf.png" alt="" width="880" height="532"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ambiente:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ahora, debemos seleccionar los recursos de cómputo para el entrenamiento de nuestro modelo. Para la clasificación de texto en particular solo podemos utilizar la CPU de nuestra computadora.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x24jXR_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1casjjksgqvpeh2qnlcg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x24jXR_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1casjjksgqvpeh2qnlcg.png" alt="" width="880" height="329"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fuente de datos:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Esta es una de las partes más importantes, ya que con los datos podremos personalizar nuestro modelo. Para ello podemos seleccionar dos tipos de fuentes, ya sea realizando una conexión y a la vez una consulta hacia una base de datos SQL Server, o por medio de un archivo CSV. &lt;/p&gt;

&lt;p&gt;En este caso utilizaremos un archivo CSV con dos columnas, la primera con el texto en cuestión, y la segunda columna con el tipo de comentario (0 negativo – 1 positivo). &lt;/p&gt;

&lt;p&gt;Este es un ejemplo de dataset: &lt;a href="https://raw.githubusercontent.com/dotnet/machinelearning/main/test/data/wikipedia-detox-250-line-data.tsv"&gt;wikipedia-detox-250-line-data.tsv&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Al cargarlo podremos tener una previsualización de los datos, y seleccionar la columna que queremos predecir posteriormente. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9a32mAha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzlnggkbm4sjdouzmzrk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9a32mAha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzlnggkbm4sjdouzmzrk.png" alt="" width="880" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entrenamiento:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Con todo lo que ya hemos establecido hasta este momento, ya podemos realizar el proceso de entrenamiento, y generar finalmente el modelo deseado. En esta sección lo único que podemos personalizar es el tiempo máximo en el que ML.NET puede buscar el modelo ideal para la clasificación de texto. &lt;/p&gt;

&lt;p&gt;Al finalizar el proceso de entrenamiento podemos visualizar cuantos modelos evaluó ML.NET, y la exactitud del mejor modelo encontrado.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gDUCzv2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o9sbvj0ka03fm4r6psl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gDUCzv2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o9sbvj0ka03fm4r6psl.png" alt="" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Evaluación:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hasta este punto ya tenemos el modelo establecido, de todas maneras, desde el Model Builder de ML.NET podemos evaluar el modelo con un ejemplo en particular. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N1nQI8qK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0mtlcggcy60h6jt7jms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N1nQI8qK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0mtlcggcy60h6jt7jms.png" alt="" width="880" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consumir:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finalmente, el intérprete nos brindará opciones para consumir el modelo creado, ya sea creando otros proyectos (por consola o con una web api), o indicándonos las llamadas que debemos hacer desde nuestra propia aplicación. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1nqZorx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6zeoumqahcul755cg25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1nqZorx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6zeoumqahcul755cg25.png" alt="" width="880" height="544"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En este caso, ya podemos consumir el modelo desde nuestra aplicación web con DotVVM sobre ASP.NET con el nuevo paquete generado: &lt;code&gt;MLModel.mbconfig&lt;/code&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#parte-2-consumir-el-modelo-generado-desde-aspnet"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Parte 2: Consumir el modelo generado desde ASP.NET&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Para consumir el modelo debemos hacer referencia a la clase MLModel, la cual fue generada por ML.NET en el grupo &lt;code&gt;MLModel.mbconfig&lt;/code&gt;: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s_klDcot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kco3jipwhgpnx0lgdbw0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s_klDcot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kco3jipwhgpnx0lgdbw0.png" alt="" width="880" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En este sentido, es necesario establecer una instancia de ModelInput con el comentario que queremos predecir, para luego llamar al método Predict, y obtener un objeto de tipo ModelOutput con la predicción correspondiente (1 positivo, 0 negativo), y su probabilidad. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ViewModel:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para este propósito, y para poder establecer una página web con DotVVM, en un ViewModel, en este caso el &lt;code&gt;DefaultViewModel.cs&lt;/code&gt;, definiremos tres atributos o variables globales:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;InputText&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Score&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Estas variables nos permitirán almacenar el texto ingresado por el usuario en &lt;code&gt;InputText&lt;/code&gt;, y representar los resultados de la predicción en los atributos &lt;code&gt;Result&lt;/code&gt; y &lt;code&gt;Score&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Luego podemos establecer un método en esta clase, de tal manera que represente la acción de un botón para realizar la predicción:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Predict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sampleData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MLModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ModelInput&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Col0&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InputText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;//Load model and predict output&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MLModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampleData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prediction&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Negative."&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Positive."&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;Score&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Round&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Score&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prediction&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En este código tenemos tres partes importantes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inicializar un &lt;code&gt;MLModel.ModelInput&lt;/code&gt; con el comentario ingresado por parte del usuario. &lt;/li&gt;
&lt;li&gt;Llamar al &lt;code&gt;MLModel.Predict&lt;/code&gt; con el &lt;code&gt;ModelInput&lt;/code&gt; como parámetro, obteniendo así el &lt;code&gt;ModelOutput&lt;/code&gt; con los resultados.&lt;/li&gt;
&lt;li&gt;Preparar el &lt;code&gt;Result&lt;/code&gt; para visualizar el resultado posteriormente (positivo o negativo), y su exactitud en la predicción. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;View:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Muy bien, ahora podemos construir la vista al hacer referencia a los atributos y al método creado en el &lt;code&gt;ViewModel&lt;/code&gt;. Esta vista la codificaremos en el archivo &lt;code&gt;Default.dothtml&lt;/code&gt; de la siguiente manera:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tbody&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;dot:TextBox&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;"{value: InputText}"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Write your text..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;dot:Button&lt;/span&gt; &lt;span class="na"&gt;Click=&lt;/span&gt;&lt;span class="s"&gt;"{command: Predict()}"&lt;/span&gt; &lt;span class="na"&gt;Text=&lt;/span&gt;&lt;span class="s"&gt;"Predict"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;{{value: Result}}&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt; {{value: Score}}
            &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aquí lo más importante es el control &lt;code&gt;TextBox&lt;/code&gt; para que el usuario ingrese su comentario y se almacene en el atributo &lt;code&gt;InputText&lt;/code&gt;, la llamada al método &lt;code&gt;Predict()&lt;/code&gt; con un &lt;code&gt;Button&lt;/code&gt;, y la visualización de los resultados al mostrar los valores de las variables &lt;code&gt;Result&lt;/code&gt;, y &lt;code&gt;Score&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ejemplos en ejecución:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Con esta &lt;em&gt;View&lt;/em&gt;, y su &lt;em&gt;ViewModel&lt;/em&gt;, nuestra página web se encuentra lista. Aquí podemos ver dos ejemplos en tiempo de ejecución: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Xd7FoHv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdebrfw1gh5kkqdjawg3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Xd7FoHv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdebrfw1gh5kkqdjawg3.png" alt="" width="880" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hOSC-1QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxpao6rn0gevgd5he39p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hOSC-1QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxpao6rn0gevgd5he39p.png" alt="" width="880" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El código fuente del ejemplo mostrado se puede encontrar en el siguiente repositorio: &lt;a href="https://github.com/esdanielgomez/MLNET_SentimentAnalysis"&gt;github.com/esdanielgomez/MLNET_SentimentAnalysis&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gracias"&gt;
  &lt;/a&gt;
  &lt;strong&gt;¡Gracias!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Muchas gracias por leer, espero que este demo pueda serte de utilidad. Si tienes alguna pregunta o alguna idea que necesites discutir, será un gusto poder colaborarte y juntos intercambiar conocimientos entre sí.&lt;/p&gt;

&lt;p&gt;¡Nos vemos en &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt;! O si gustas también puedes escribirme por &lt;a href="https://www.facebook.com/esDanielGomez"&gt;Facebook&lt;/a&gt; o por correo: &lt;a href="mailto:daniel@esdaniel.gomez.com"&gt;daniel@esdaniel.gomez.com&lt;/a&gt;. :=)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>ai</category>
      <category>machinelearning</category>
      <category>csharp</category>
    </item>
    <item>
      <title>40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS</title>
      <author>Jonny Coder</author>
      <pubDate>Thu, 28 Oct 2021 17:00:10 +0000</pubDate>
      <link>https://dev.to/jcc/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-1mdj</link>
      <guid>https://dev.to/jcc/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-1mdj</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 20 JavaScript tips and tricks to increase your Speed and Efficiency</title>
      <author>Jonny Coder</author>
      <pubDate>Thu, 28 Oct 2021 16:59:23 +0000</pubDate>
      <link>https://dev.to/jcc/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-1dbi</link>
      <guid>https://dev.to/jcc/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-1dbi</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;Convenient and useful techniques to reduce the lines of code and pace up your Dev Work!&lt;/h3&gt;
&lt;p&gt;In our daily tasks, we get to write functions such as sorting, searching, finding unique values, passing parameters, swapping values etc, so here I present my list of shorthand techniques to write all of them as a Pro!✌🏻&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;img alt="Increase Your Performance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftNfvGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;JavaScript is truly an awesome language💛 to learn and work with. And there can be more than one approach to reach to the same solution for given problem. In this article, we will discuss only the quickest ones.🚀&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;These approaches will definitely help you in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducing the number of LOC(lines of code),&lt;/li&gt;
&lt;li&gt;Coding Competitions,&lt;/li&gt;
&lt;li&gt;Hackathons or&lt;/li&gt;
&lt;li&gt;Other time bound tasks.⏱&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these JavaScript Hacks uses techniques from ECMAScript6(ES2015) onwards, though the latest version is ECMAScript11(ES2020).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: All below tricks have been tested on the Console of Google Chrome. &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/top-20-javascript-tips-and-tricks/"&gt;Top 20 JavaScript tips and tricks to increase your Speed and Efficiency &lt;/a&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Live From INTERACT: Engineering Leadership Screwups</title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 28 Oct 2021 16:41:14 +0000</pubDate>
      <link>https://dev.to/linearb/live-from-interact-engineering-leadership-screwups-2p69</link>
      <guid>https://dev.to/linearb/live-from-interact-engineering-leadership-screwups-2p69</guid>
      <description>&lt;p&gt;Have you ever had to manually book 50,000 flights because you rushed to deliver new features on your product?&lt;/p&gt;

&lt;p&gt;In this episode of the Dev Interrupted podcast, we asked some of our favorite engineering leaders if they could share memorable stories of professional mistakes with our audience.&lt;/p&gt;

&lt;p&gt;The great thing about opening up about past mistakes is that it normalizes failure. All of us will make decisions that we come to regret - the best we can do is learn and grow from them. This is especially true of people in leadership positions who are responsible for managing teams.&lt;/p&gt;

&lt;p&gt;In what will be the last podcast episode to feature excerpts from our INTERACT engineering leadership conference, Conor Bronsdon, Dev Interrupted Community Leader, presents a three-part interview he performed for audiences at INTERACT.&lt;/p&gt;

&lt;p&gt;We applaud Luca Rossi, Head of Engineering at Translated; Shweta Saraf, Senior Director of Engineering at Equinix; and Chris Downard, VP of Engineering at GigSmart, for their candid, open responses about professional moments of failure.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/1sI2kR1gWCZKTexNR8KTid"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The difference between agile and underdeveloped&lt;/li&gt;
&lt;li&gt;How to be honest with yourself when you a mistake&lt;/li&gt;
&lt;li&gt;Adapting to change as new information becomes available&lt;/li&gt;
&lt;li&gt;Inspiring your team after you make an unpopular decision&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;With over 1900 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lP5gqJkc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkp4kf4dubb2dbfpam81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lP5gqJkc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkp4kf4dubb2dbfpam81.png" alt="Image description" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>leadership</category>
      <category>career</category>
      <category>devops</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Practicing Postgresql and Postulating (Im)Provements</title>
      <author>Jeremy Friesen</author>
      <pubDate>Thu, 28 Oct 2021 16:36:13 +0000</pubDate>
      <link>https://dev.to/jeremyf/practicing-postgresql-and-postulating-improvements-5m</link>
      <guid>https://dev.to/jeremyf/practicing-postgresql-and-postulating-improvements-5m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#returning-again-to-databases"&gt;
  &lt;/a&gt;
  Returning Again to Databases
&lt;/h2&gt;

&lt;p&gt;For years, I wasn’t working with relational databases. But in my heart, I’ve always loved them and thrived when developing with them.&lt;/p&gt;

&lt;p&gt;What follows is my iterating through some SQL statements to both better understand the database and also the content. I’ve been using Blazer, as written about on &lt;a href="https://dev.to/molly/how-to-give-engineers-filtered-database-access-8b6"&gt;Dev.to by Molly&lt;/a&gt;. As part of my job, I have access to the &lt;a href="https://dev.to"&gt;DEV.to&lt;/a&gt; environment to run these queries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-reigning-champion"&gt;
  &lt;/a&gt;
  The Reigning Champion
&lt;/h2&gt;

&lt;p&gt;One task in front of me is to improve on the Feed Algorithm. To understand that, I need to understand the data. In the current incarnations we rely heavily on two scores:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;article.score&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;article.hotness_score&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To understand the algorithms, I need to look at those values. Here’s a query to understand the possible range of scores:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
  min(score),
  max(score),
  avg(score),
  stddev(score),
  percentile_cont(0.5) within GROUP(ORDER BY score) mean,
  percentile_cont(0.95) within GROUP(ORDER BY score) percentile_95
FROM articles;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The results:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;min&lt;/dt&gt;
&lt;dd&gt;-3,019&lt;/dd&gt;
&lt;dt&gt;max&lt;/dt&gt;
&lt;dd&gt;12,199&lt;/dd&gt;
&lt;dt&gt;avg&lt;/dt&gt;
&lt;dd&gt;8.92&lt;/dd&gt;
&lt;dt&gt;stddev&lt;/dt&gt;
&lt;dd&gt;116.82&lt;/dd&gt;
&lt;dt&gt;mean&lt;/dt&gt;
&lt;dd&gt;0.0&lt;/dd&gt;
&lt;dt&gt;percentile_95&lt;/dt&gt;
&lt;dd&gt;48.0&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;There’s a lot of variance in the distribution of the score, and anything we add to that score for sorting will be inconsistent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
  min(hotness_score),
  max(hotness_score),
  avg(hotness_score),
  stddev(hotness_score),
  percentile_cont(0.5) within GROUP(ORDER BY hotness_score) mean,
  percentile_cont(0.95) within GROUP(ORDER BY hotness_score) percentile_95
FROM articles;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;dl&gt;
&lt;dt&gt;min&lt;/dt&gt;
&lt;dd&gt;-1,355,719&lt;/dd&gt;
&lt;dt&gt;max&lt;/dt&gt;
&lt;dd&gt;579,658&lt;/dd&gt;
&lt;dt&gt;avg&lt;/dt&gt;
&lt;dd&gt;126,604.84&lt;/dd&gt;
&lt;dt&gt;stddev&lt;/dt&gt;
&lt;dd&gt;216,433.25&lt;/dd&gt;
&lt;dt&gt;mean&lt;/dt&gt;
&lt;dd&gt;0.0&lt;/dd&gt;
&lt;dt&gt;percentile_95&lt;/dt&gt;
&lt;dd&gt;364,979&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;And the situation is even more swingy with the hotness score. The underlying implementation works for smaller communities, but as DEV.to grows, the swingyness becomes more and more notable.&lt;/p&gt;

&lt;p&gt;The particular challenge is that the score or hotness score is the starting point for all feed queries. In otherwords, to get a feed tailored for the user, there’s a lot of variance to overcome.&lt;/p&gt;

&lt;p&gt;So I decided to approach from a different angle. What I have is incomplete, but I’m considering the structure as a strong competetor to compete against the current feed algorithm.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-in-this-corner"&gt;
  &lt;/a&gt;
  And in This Corner
&lt;/h2&gt;

&lt;p&gt;First, I wanted to build some successes by writing some quick and easy queries. You know, practice a little bit. In the examples, I have &lt;code&gt;:user_id&lt;/code&gt; as the placeholder for my personal DEV.to account number.&lt;/p&gt;

&lt;p&gt;The following query is published articles that exclude those published by people I’ve blocked:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT articles.id, title, published_at
FROM articles
LEFT OUTER JOIN user_blocks ON user_blocks.blocked_id = articles.user_id AND user_blocks.blocked_id IS NULL AND user_blocks.blocker_id = :user_id
WHERE published = true
ORDER BY published_at DESC
LIMIT 20;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select the tags that I follow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT tags.*
FROM tags
INNER JOIN follows ON tags.id = follows.followable_id
AND follows.followable_type = 'ActsAsTaggableOn::Tag'
WHERE follows.follower_id = :user_id AND follows.follower_type = 'User';

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select the organizations that I follow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT organizations.*
FROM organizations
INNER JOIN follows
ON organizations.id = follows.followable_id
AND follows.followable_type = 'Organization'
WHERE follows.follower_id = :user_id AND follows.follower_type = 'User';

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select the users that I follow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT users.*
FROM users
INNER JOIN follows
ON users.id = follows.followable_id
AND follows.followable_type = 'User'
WHERE follows.follower_id = :user_id AND follows.follower_type = 'User';

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I started doing computations in query. This query creates a freshness score based solely on the publication date and excluding articles from those people I blocked:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
  (1 - (current_date - published_at::date) * 0.1) AS freshness_score,
  articles.title,
  STRING_AGG(tags.name, ', ') AS tag_names
FROM articles
LEFT OUTER JOIN user_blocks
  ON user_blocks.blocked_id = articles.user_id
    AND user_blocks.blocked_id IS NULL
    AND user_blocks.blocker_id = :user_id
LEFT OUTER JOIN taggings
  ON taggings.taggable_id = articles.id
    AND taggable_type = 'Article'
INNER JOIN tags
  ON taggings.tag_id = tags.id
WHERE published = true
GROUP BY freshness_score, articles.title
ORDER BY freshness_score DESC
LIMIT 20

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see &lt;a href="https://dev.to/admin/blazer/queries/550-experiment-iterating-on-building-querying-articles"&gt;the query in Blazer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, I started thinking about what I wanted out of this. My initial brainstorm was that I want to create a scalar value for an article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the article has one tag that I follow, I want to have a &lt;code&gt;0.8&lt;/code&gt; multiplier.&lt;/li&gt;
&lt;li&gt;If it has two or more tags that I follow, I want it to have a &lt;code&gt;1.0&lt;/code&gt; multiplier.&lt;/li&gt;
&lt;li&gt;If it has no articles that I follow, I want it to have a &lt;code&gt;0.1&lt;/code&gt; multiplier.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using the above, I then want to select all articles that were published within the last 7 days. Articles published today have a score of 1. All other articles have a score of &lt;code&gt;1 - ((number of days since published) * 0.1)&lt;/code&gt;. I want to multiply the above scalar value for the article by the score to create a confidence value. And I want the query sorted from highest confidence value to lowest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-challenger"&gt;
  &lt;/a&gt;
  The Challenger
&lt;/h2&gt;

&lt;p&gt;In wanted a query that tells me how many of an article’s tags I follow of the top published articles.&lt;/p&gt;

&lt;p&gt;The algorithm embedded in the following SQL statement is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The highest relevance score is 1.&lt;/li&gt;
&lt;li&gt;Anything posted prior to today has a lower cap. One day old is 0.9, two days old is 0.8, etc.&lt;/li&gt;
&lt;li&gt;If I don’t follow any of the tags, I’m not overly interested. The more tags that I follow that are part on the article, the higher the value.&lt;/li&gt;
&lt;li&gt;If I don’t follow the user, that’s a slight penalty.&lt;/li&gt;
&lt;li&gt;If I don’t follow the organization, that’s a slight penalty.&lt;/li&gt;
&lt;li&gt;Give a bit more weight to someone I follow leaving a comment.&lt;/li&gt;
&lt;li&gt;Give a bit of weight to the # of comments (but don’t over indulge in flame wars)&lt;/li&gt;
&lt;li&gt;Really discredit spam.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The scalars that I chose in the SQL statement are arbitrary, and we’d definitely want to tweak the values. The query’s not yet ready for primetime, but I’m curious to see it’s effect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WITH top_articles AS (
  SELECT articles.id,
    ( (1 - (current_date - published_at::date) * 0.05) *
      (CASE articles.spaminess_rating
         WHEN 0 THEN 1
         ELSE 0.05 END) *
      (CASE ABS(articles.experience_level_rating - 5)
         WHEN 0 THEN 1
         WHEN 1 THEN 0.98
         WHEN 2 THEN 0.97
         WHEN 3 THEN 0.96
         WHEN 4 THEN 0.95
         WHEN 5 THEN 0.94
         ELSE 0.93 END) *
      (CASE COUNT(comments.id)
         WHEN 0 THEN 0.95
         WHEN 1 THEN 0.98
         WHEN 2 THEN 0.99
         ELSE 1 END) *
       (CASE COUNT(followed_tags.follower_id)
         WHEN 0 THEN 0.4
         WHEN 1 THEN 0.9
         ELSE 1 END) *
       (CASE articles.comments_count
         WHEN 0 THEN 0.9
         WHEN 1 THEN 0.94
         WHEN 2 THEN 0.95
         WHEN 3 THEN 0.98
         WHEN 4 THEN 0.999
         ELSE 1 END) *
       (CASE COUNT(followed_user.follower_id)
         WHEN 0 THEN 0.8
         WHEN 1 THEN 1
         ELSE 1 END) *
       (CASE COUNT(followed_org.follower_id)
            WHEN 0 THEN 0.95
            WHEN 1 THEN 1
            ELSE 1 END)) AS relevance_score,
articles.experience_level_rating,
articles.published_at,
articles.comments_count,
STRING_AGG(tags.name, ', ') AS tag_names,
articles.title
FROM articles
LEFT OUTER JOIN taggings
  ON taggings.taggable_id = articles.id
    AND taggable_type = 'Article'
INNER JOIN tags
  ON taggings.tag_id = tags.id
LEFT OUTER JOIN follows AS followed_tags
  ON tags.id = followed_tags.followable_id
    AND followed_tags.followable_type = 'ActsAsTaggableOn::Tag'
    AND followed_tags.follower_type = 'User'
    AND followed_tags.follower_id = :user_id
LEFT OUTER JOIN follows AS followed_user
  ON articles.user_id = followed_user.followable_id
    AND followed_user.followable_type = 'User'
    AND followed_user.follower_id = :user_id
    AND followed_user.follower_type = 'User'
LEFT OUTER JOIN follows AS followed_org
  ON articles.organization_id = followed_org.followable_id
  AND followed_org.followable_type = 'Organization'
  AND followed_org.follower_id = :user_id
  AND followed_org.follower_type = 'User'
LEFT OUTER JOIN comments
  ON comments.commentable_id = articles.id
    AND comments.commentable_type = 'Article'
    AND followed_user.followable_id = comments.user_id
    AND followed_user.followable_type = 'User'
LEFT OUTER JOIN user_blocks
  ON user_blocks.blocked_id = articles.user_id
    AND user_blocks.blocked_id IS NULL
    AND user_blocks.blocker_id = :user_id
WHERE published = true
GROUP BY articles.id, articles.title, articles.published_at, articles.comments_count, articles.experience_level_rating, articles.spaminess_rating
ORDER BY relevance_score DESC, articles.published_at DESC
LIMIT 25)
SELECT articles.* FROM articles INNER JOIN top_articles ON top_articles.id = articles.id;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The end result is a &lt;code&gt;relevance_score&lt;/code&gt; between 0 and 1 (well I suppose there could be negative numbers but that’s if we have even older articles).&lt;/p&gt;

&lt;p&gt;There are more things I want to consider, and could add into the above query:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I need to account for what to do with moderator’s up and down voting.&lt;/li&gt;
&lt;li&gt;I need to account for folks who’ve given a negative weight to a tag.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;I also went ahead and submitted a &lt;a href="https://github.com/forem/forem/pull/15220"&gt;draft PR&lt;/a&gt; to begin having more conversations.&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>programming</category>
    </item>
    <item>
      <title>Scramjet Transform Hub — Quick Start introduction</title>
      <author>Łukasz Kamieniecki-Mruk</author>
      <pubDate>Thu, 28 Oct 2021 16:35:17 +0000</pubDate>
      <link>https://dev.to/scramjetorg/scramjet-transform-hub-quick-start-introduction-3dfb</link>
      <guid>https://dev.to/scramjetorg/scramjet-transform-hub-quick-start-introduction-3dfb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#scramjet-transform-hub-quick-start-introduction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Scramjet Transform Hub - Quick Start introduction&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Scramjet Transform Hub allows you to deploy and run multiple data processing apps called sequences. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Sequences&lt;/strong&gt; are specific apps, not just any apps. They specialize in the efficient data processing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;STH can be treated both as a data processing engine and execution platform for multiple sequences running on the same platform and performing various data processing tasks. &lt;/p&gt;

&lt;p&gt;We named our apps "sequences" and that term describes well its nature, as they process data through a sequence of chained functions. Therefore usually, our sequences are concise and easy to write ,and powerful at the same time.&lt;/p&gt;

&lt;p&gt;Our vanilla STH engine is based on Node.js and thus allows developers to benefit from the rich ecosystem and many packages and solutions provided by this vibrant community.&lt;/p&gt;

&lt;p&gt;The core part of our STH engine is called the "host". &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;Host&lt;/strong&gt; is responsible for maintaining and deploying sequences, keeping them running, and managing their lifecycle. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Host exposes also its own REST API to provide and receive data and manage sequences and host itself.&lt;/p&gt;

&lt;p&gt;What we also do on the host level is that we apply a set of algorithms to optimize and speed up data processing execution in sequences. &lt;/p&gt;

&lt;p&gt;You can interact with the host using our dedicated STH CLI that will help you with both sequences deployment, running it and monitoring.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-solution-concept-diagram"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Solution concept diagram&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GTY_GfV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdad8s2t2m3mtvw5od9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GTY_GfV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdad8s2t2m3mtvw5od9v.png" alt="Scramjet Transform Hub data flows" width="880" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#21-inputs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2.1 Inputs&lt;/strong&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;STH can handle any input that can be handled by Node.js application. &lt;/li&gt;
&lt;li&gt;You, as a developer, are free to process a variety of inputs in your sequence applications, such as: Text, JSON, XML, SOAP, Audio, Video, and more.&lt;/li&gt;
&lt;li&gt;Inputs can be either:

&lt;ul&gt;
&lt;li&gt;Provided to STH via its REST API; or&lt;/li&gt;
&lt;li&gt;Consumed from various local or remote sources by the app; such as Stream, STDIN, File, API, URL&lt;/li&gt;
&lt;li&gt;Generated by the app itself&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#22-host"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2.2 Host&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;This is a solution central processing and management unit with the following major components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Sequences&lt;/strong&gt; - these are the actual "STH" apps. It is a gzipped package (&lt;code&gt;*.tar.gz&lt;/code&gt;) containing at least two files:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;package.json&lt;/strong&gt; - JSON manifest file describing the app and its configuration such as the main file to run&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;main file&lt;/strong&gt; - file such as index.js or index.ts that contains lightweight application business logic.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Instance&lt;/strong&gt; - once the sequence is run, the host will create a separate runtime environment for it and will execute sequence code inside this runtime entity. This is an instance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;API &amp;amp; CLI&lt;/strong&gt; - our Application Programming Interface and CLI connecting to it allows both for &lt;strong&gt;Data operations&lt;/strong&gt; (sending input data and receiving output data) and &lt;strong&gt;Management operations&lt;/strong&gt; (manage host itself and its entities: sequences or instances)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#23-outputs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2.3 Outputs&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Our engine outputs can be managed in several ways: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;File&lt;/strong&gt; - you can save your output to the local or remote file&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;STDOUT&lt;/strong&gt; - output can be directed to system STDOUT (STERR is supported as well)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;API&lt;/strong&gt; - output can be consumed from our  STH REST API&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;URL Request&lt;/strong&gt; - you can write your app in a way to request URL, webhook, etc&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Stream&lt;/strong&gt; - output can be streamed to a particular destination&lt;/li&gt;
&lt;li&gt;you can mix multiple actions together: you can both send data to a remote system/URL and save it locally.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-install-scramjet-transform-hub"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3 Install Scramjet Transform Hub&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#31-prepare-environment"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3.1 Prepare environment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In order to install Scramjet Transform Hub, please follow these 3 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get Linux machine (local UNIX/Linux OS, cloud VM , etc)&lt;/li&gt;
&lt;li&gt;Install Docker on this Linux machine (&lt;a href="https://docs.docker.com/get-docker/"&gt;official Docker instructions are here&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;Install npm on this machine (&lt;a href="https://nodejs.org/"&gt;official instructions are here&lt;/a&gt;). Currently, we recommend Node.js version 14.x LTS.
### &lt;strong&gt;3.2 Install STH&lt;/strong&gt;
Open one Linux terminal window and issue the following commands:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1. Install Scramjet Transform Hub and  STH CLI&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; @scramjet/sth @scramjet/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Run STH&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;scramjet-transform-hub
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-run-your-first-sequence"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4 Run your first sequence&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#41-review-the-package"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4.1 Review the package&lt;/strong&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that all commands here are executed from the root of this repository&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have prepared for you a simple "hello-snowman" sequence that you can use. This sequence is available in the directory &lt;code&gt;samples/hello-snowman&lt;/code&gt; in this repository.&lt;br&gt;
In this directory you will find two files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;package.json&lt;/code&gt; - the manifest file that describes this particular sequence&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;index.js&lt;/code&gt; - file containing main application logic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This particular application is written in plain JavaScript to simplify this example. However, you can also write your sequences in TypeScript and build them before packaging and sending the sequence to STH.&lt;/p&gt;

&lt;p&gt;There is no need to change anything in our &lt;code&gt;hello-snowman&lt;/code&gt; sequence for a first run. Let's move to the next step.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#42-prepare-and-send-sequence-package"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4.2 Prepare and send sequence package&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Our "sequence" apps need to be packaged before can be sent to Transform Hub. This package is a simple TAR archive and our STH CLI has a special command to package the app directory into sequence tarball.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; any time, you can display STH CLI help by issuing terminal command &lt;code&gt;si help&lt;/code&gt; (for general help) or &lt;code&gt;si &amp;lt;command&amp;gt; help&lt;/code&gt; for specific command (ie. &lt;code&gt;si sequence help&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Please open a new terminal window (and keep the first one with STH running). Then issue the following commands in the root directory of this repository&lt;/p&gt;

&lt;p&gt;a) pack directory &lt;code&gt;hello-snowman&lt;/code&gt; into archive &lt;code&gt;hello-sequence.tar.gz&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;si pack ./samples/hello-snowman/ &lt;span class="nt"&gt;-o&lt;/span&gt; ./samples/hello-snowman.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is no output shown in the terminal but you can verify with &lt;code&gt;ls&lt;/code&gt; that the tarball package is created inside the &lt;code&gt;samples&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;b) send hello-snowman.tar.gz to the running host (default localhost API endpoint will be used by the CLI send command)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;si sequence send ./samples/hello-snowman.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the output will look similar to this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Request ok: http://127.0.0.1:8000/api/v1/sequence status: 202 Accepted
SequenceClient &lt;span class="o"&gt;{&lt;/span&gt;
  _id: &lt;span class="s1"&gt;'cf775cc1-105b-473d-b929-6885a0c2182c'&lt;/span&gt;,
  host: HostClient &lt;span class="o"&gt;{&lt;/span&gt;
    apiBase: &lt;span class="s1"&gt;'http://127.0.0.1:8000/api/v1'&lt;/span&gt;,
    client: ClientUtils &lt;span class="o"&gt;{&lt;/span&gt;
      apiBase: &lt;span class="s1"&gt;'http://127.0.0.1:8000/api/v1'&lt;/span&gt;,
      log: &lt;span class="o"&gt;[&lt;/span&gt;Object]
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  sequenceURL: &lt;span class="s1"&gt;'sequence/cf775cc1-105b-473d-b929-6885a0c2182c'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have uploaded sequence to the host and host assigned to it a random ID (GUID), in my case our sequence ID is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;_id: 'cf775cc1-105b-473d-b929-6885a0c2182c'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The Host also exposes REST API endpoint for each sequence and this is also described in this response.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#43-run-the-sequence"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4.3 Run the sequence&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We can now use sequence ID to run this uploaded sequence. The command is &lt;code&gt;si seq start &amp;lt;sequence_id&amp;gt;&lt;/code&gt;. You can also pass an arbitrary number of parameters by providing them after , in case of our &lt;code&gt;hello-snowman&lt;/code&gt; parameters are not used.&lt;br&gt;
For example for the above sequence we could write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;si sequence start cf775cc1-105b-473d-b929-6885a0c2182c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the output would look similar to this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Request ok: http://127.0.0.1:8000/api/v1/sequence/cf775cc1-105b-473d-b929-6885a0c2182c/start status: 200 OK
InstanceClient &lt;span class="o"&gt;{&lt;/span&gt;
  host: HostClient &lt;span class="o"&gt;{&lt;/span&gt;
    apiBase: &lt;span class="s1"&gt;'http://127.0.0.1:8000/api/v1'&lt;/span&gt;,
    client: ClientUtils &lt;span class="o"&gt;{&lt;/span&gt;
      apiBase: &lt;span class="s1"&gt;'http://127.0.0.1:8000/api/v1'&lt;/span&gt;,
      log: &lt;span class="o"&gt;[&lt;/span&gt;Object]
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  _id: &lt;span class="s1"&gt;'e70222d1-acfc-4e00-b046-4a3a9481c53b'&lt;/span&gt;,
  instanceURL: &lt;span class="s1"&gt;'instance/e70222d1-acfc-4e00-b046-4a3a9481c53b'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A sequence is an app template. Once run, it will become live as a new instance. The instance also receives its own ID (GUID). In this case, instance Id is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;_id: 'e70222d1-acfc-4e00-b046-4a3a9481c53b'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Of course, sequences can be run multiple times. Each run will create a separate instance with a distinct instance id.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#44-send-data-to-the-sequence"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4.4 Send data to the sequence&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We want to make your life easier and for this very example, we have prepared a special Node.js app that will generate a stream of simple messages and send them to our running instance of &lt;code&gt;hello-snowman&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For fun, our stream generator will send simple text messages containing temperature readings from an artificial weather station. Temperature values will be generated randomly in the range of &amp;lt;-50,50&amp;gt; degrees Celsius.&lt;br&gt;
Our &lt;code&gt;hello-snowman&lt;/code&gt; app will read and interpret these messages and will inform us about the state of our Snowman:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if the temperature will be 0 or below, the sequence will return the message &lt;code&gt;Snowman is freezing ... :)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;in the other case (temperature above 0 degrees), the sequence will return the message &lt;code&gt;Snowman is melting! :(&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To run this app, please execute this command from the root of our directory &lt;code&gt;node ./tools/stream-gen-tool/stream-gen.js &amp;lt;instance_id&amp;gt;&lt;/code&gt;. In our case this would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;node ./tools/stream-gen-tool/stream-gen.js e70222d1-acfc-4e00-b046-4a3a9481c53b
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the output would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;----------------------------------------&lt;/span&gt;
Message# 1 | Temperature measure
INPUT | 41
OUTPUT| Snowman is melting! :&lt;span class="o"&gt;(&lt;/span&gt;
&lt;span class="nt"&gt;----------------------------------------&lt;/span&gt;
Message# 2 | Temperature measure
INPUT | &lt;span class="nt"&gt;-33&lt;/span&gt;
OUTPUT| Snowman is freezing ... :&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;---------------------------------------------&lt;/span&gt;
Message# 3 | Temperature measure
INPUT | &lt;span class="nt"&gt;-36&lt;/span&gt;
OUTPUT| Snowman is freezing ... :&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;---------------------------------------------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our sequence generator app does two things here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sends stream of messages; each one containing a number with temperature value&lt;/li&gt;
&lt;li&gt;Reads output from Host API that is generated by our &lt;code&gt;hello-snowman&lt;/code&gt; sequences&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Separately, you can also open a new terminal window and see a log of this particular instance with command &lt;code&gt;si instance log &amp;lt;instance_id&amp;gt;&lt;/code&gt;. In our case, this would be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;si instance log e70222d1-acfc-4e00-b046-4a3a9481c53b
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the sample output will be similar to this one&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="c"&gt;...
&lt;/span&gt;&lt;span class="gp"&gt;2021-08-09T04:29:39.790Z log (object:Runner) Input message &amp;lt;Buffer 32 30&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;2021-08-09T04:29:40.791Z log (object:Runner) Input message &amp;lt;Buffer 2d 34&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;2021-08-09T04:29:41.792Z log (object:Runner) Input message &amp;lt;Buffer 33 33&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;2021-08-09T04:29:42.798Z log (object:Runner) Input message &amp;lt;Buffer 2d 34 35&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;2021-08-09T04:29:43.801Z log (object:Runner) Input message &amp;lt;Buffer 2d 33 36&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c"&gt;...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Well done! You have run your first Scramjet Transform Hub sequence!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#5-where-to-go-next"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5 Where to go next&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Here you can find more resources related to Scramjet Transform Hub:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.tosamples"&gt;Check out more samples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.totemplates"&gt;Start from our app templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/scramjetorg/transform-hub"&gt;Contribute to STH development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scramjet.org"&gt;Visit our Scramjet.org page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




</description>
      <category>bigdata</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>serverless</category>
    </item>
    <item>
      <title>My thoughts on the HashiCorp Infrastructure Automation Certification</title>
      <author>David J Eddy</author>
      <pubDate>Thu, 28 Oct 2021 16:17:30 +0000</pubDate>
      <link>https://dev.to/david_j_eddy/my-thoughts-on-the-hashicorp-infrastructure-automation-certification-3ngd</link>
      <guid>https://dev.to/david_j_eddy/my-thoughts-on-the-hashicorp-infrastructure-automation-certification-3ngd</guid>
      <description>&lt;p&gt;As the landscape technologies that keep the internet running has changes over the past 60 years so have the tools that manage the technology. Now in 2021 Terraform is one of the leaders for managing cloud resources as code, commonly called &lt;code&gt;Infrastructure as Code&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I started using Terraform (TF) around version 0.11 back in 2017. The first project published with TF code was in 2018 (&lt;a href="https://github.com/davidjeddy/wordpress-terraform"&gt;https://github.com/davidjeddy/wordpress-terraform&lt;/a&gt; if you are curious). As my skills with Terraform have matured, so has the tool. But the core life cycle remains the same: write, plan, apply. Even as the tool passed the 1.x &lt;code&gt;production ready&lt;/code&gt; release milestone; the core workflow remained unchanged.&lt;/p&gt;

&lt;p&gt;Recently I found that &lt;a href="https://www.hashicorp.com/"&gt;Hashicorp&lt;/a&gt; has started providing certifications related to there tools; of course I jumped on the Terraform study track. The study plan was to go through the ACG resources, complete the &lt;a href="https://www.hashicorp.com/"&gt;Hashicorp&lt;/a&gt; resources, review my knowledge, and execute the test. Having taking a number of certifications the last step was going to be the easy one.&lt;/p&gt;

&lt;p&gt;Here is the list of resources I used to to study.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.acloud.guru/course/using-terraform-to-manage-applications-and-infrastructure/dashboard"&gt;https://learn.acloud.guru/course/using-terraform-to-manage-applications-and-infrastructure/dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.acloud.guru/course/hashicorp-certified-terraform-associate-1/dashboard%0A"&gt;https://learn.acloud.guru/course/hashicorp-certified-terraform-associate-1/dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hashicorp.com/certification/terraform-associate%0A"&gt;https://www.hashicorp.com/certification/terraform-associate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/collections/terraform/certification"&gt;https://learn.hashicorp.com/collections/terraform/certification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The exam topics covers everything in the Terraform lifecycle from the subcommands, to state manipulation and a working knowledge of the Cloud / Enterprise offerings from &lt;a href="https://www.hashicorp.com/"&gt;Hashicorp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Due to world events the exam was online proctored. Finding a place to take the exam was a non-issue for me due to current living arrangements. The monitoring personnel are _very_ strict about adhering to the guidelines. You have been warned.&lt;/p&gt;

&lt;p&gt;With all that said, I passed with a score in the mid 80s. Not amazing, but not bad either. Two weeks after the exam I was watching the &lt;a href="https://hashiconf.com/global/"&gt;HashiConf Global 2021&lt;/a&gt; and saw that only about 12,000 certs had been issued globally so far. That means I am one of the first 15,000 to have a certification from &lt;a href="https://www.hashicorp.com/"&gt;Hashicorp&lt;/a&gt;. Woot woot!&lt;/p&gt;

&lt;p&gt;Would I recommend this certification? If you like to validate your knowledge and increase your salary; yes. 100% yes. Especially if you work in the cloud, IT infrastructure, or application development.&lt;/p&gt;

</description>
      <category>hashicorp</category>
      <category>terraform</category>
      <category>sre</category>
      <category>certifications</category>
    </item>
    <item>
      <title>Svelte with Vite and TailwindCSS</title>
      <author>Eternal Dev</author>
      <pubDate>Thu, 28 Oct 2021 16:09:37 +0000</pubDate>
      <link>https://dev.to/eternaldev/svelte-with-vite-and-tailwindcss-e66</link>
      <guid>https://dev.to/eternaldev/svelte-with-vite-and-tailwindcss-e66</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-tailwind-css"&gt;
  &lt;/a&gt;
  What is Tailwind CSS?
&lt;/h2&gt;

&lt;p&gt;Tailwind CSS is a utility-first CSS framework with classes that can be composed to build UI. They provide easy classes to replace the CSS you will be writing. You can add multiple CSS classes which are documented in the tailwind website and create the design which you want. This removes the need for coming up with clear names for your CSS class and trying your best to reuse them in your projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;TailwindCSS website&lt;/a&gt; contains good documentation of their different classes and how to use them&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-svelte-with-vite"&gt;
  &lt;/a&gt;
  Setting up Svelte with Vite
&lt;/h2&gt;

&lt;p&gt;You can create a new project with Svelte and vite by following this guide posted earlier. You should find details on why to use Vite and how to setup the Svelte project with ease.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.eternaldev.com/blog/build-and-deploy-apps-with-svelte-and-vite/"&gt;https://www.eternaldev.com/blog/build-and-deploy-apps-with-svelte-and-vite/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-tailwindcss"&gt;
  &lt;/a&gt;
  Adding TailwindCSS
&lt;/h2&gt;

&lt;p&gt;There are different ways to add TailwindCSS to svelte apps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Svelte with Rollup - If you would like to configure the Tailwind in Svelte which uses Rollup, you can check out the other tutorial like &lt;a href="https://css-tricks.com/how-to-use-tailwind-on-a-svelte-site/"&gt;this&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Svelte with Vite - You can follow this tutorial to setup TailwindCSS with Svelte and Vite&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-svelte-add"&gt;
  &lt;/a&gt;
  What is Svelte Add
&lt;/h2&gt;

&lt;p&gt;Svelte add is a community project to easily add integrations and other functionality to Svelte apps. So you can use this to easily add the TailwindCSS to your Svelte and Vite powered apps. Note that this will work for Vite-powered Svelte apps and SvelteKit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: This method is recommended for projects you are just freshly initialized. Existing projects may face some issues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are interested in finding more about other integrations, check out the &lt;a href="https://github.com/svelte-add"&gt;Github project&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-svelte-add-command"&gt;
  &lt;/a&gt;
  Running the Svelte Add command
&lt;/h2&gt;

&lt;p&gt;Go to the root of your project directory and run the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx svelte-add@latest tailwindcss
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will do a lot of configuration for you. After running the command you can install the new package which are added from this process&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#start-using-tailwindcss"&gt;
  &lt;/a&gt;
  Start using TailwindCSS
&lt;/h2&gt;

&lt;p&gt;Once the above steps are completed, you can start using the tailwind CSS in your Svelte app.&lt;/p&gt;

&lt;p&gt;Let's build something with our newfound Tailwind CSS power. Instead of the regular todo application, let's build the activity feed from GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="///static/106cd4b48e9824064978b83824da9290/350de/gihub_reference.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ywyx1mLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://eternaldev.com/static/106cd4b48e9824064978b83824da9290/350de/gihub_reference.png" alt="gihub_reference.PNG" title="gihub activity reference" width="880" height="152"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a new model.ts file for storing the data in Typescript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ActivityContent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;profileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;profileUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Repository&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Repository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;updatedDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new svelte file and call it ActivityItem.svelte&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ActivityContent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src/models&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../assets/svelte.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;activityContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActivityContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;profileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;profile2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;profileUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://github.com/eternaldevgames&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4 days ago&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eternaldevgames/svelte-projects&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://github.com/eternaldevgames/svelte-projects&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This Repository contains multiple svelte project to learn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;updatedDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oct 15&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p-3 m-3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex flex-row items-center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h-8 w-8 rounded-full bg-gray-200&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hero&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p-2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;activityContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profileUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;activityContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profileName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="nx"&gt;started&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;repo&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;activityContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;activityContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-gray-500 text-sm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;activityContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ml-8 p-5 rounded-lg bg-white border border-black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;activityContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;activityContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;a
&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;activityContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex flex-row items-center mt-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w-3 h-3 bg-red-600 rounded-full ml-1 mr-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mr-5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;activityContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
        &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://img.icons8.com/material-outlined/24/000000/star--v2.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;star&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ml-1 mr-5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;activityContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mr-5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Updated&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;activityContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updatedDate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the result&lt;/p&gt;

&lt;p&gt;&lt;a href="///static/a205776e12bae4ce66e91264d92171a6/d61c2/tailwind1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NsrmbF9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://eternaldev.com/static/a205776e12bae4ce66e91264d92171a6/d61c2/tailwind1.png" alt="tailwind1.PNG" title="Tailwind activity" width="880" height="99"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breakdown-of-tailwindcss-classes"&gt;
  &lt;/a&gt;
  Breakdown of TailwindCSS classes
&lt;/h2&gt;

&lt;p&gt;Since we have all the components styles with Tailwind classes, we will breakdown on some of the important classes which will help you in the next project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p-3 m-3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;p-3&lt;/code&gt; refers to the padding on all the sides. The number 3 represents how much padding is added.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.75&lt;/span&gt;&lt;span class="nx"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly, &lt;code&gt;m-3&lt;/code&gt; refers to adding the margin on all the sides.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h-8 w-8 rounded-full bg-gray-200&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hero&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the image, we can add the height and width using &lt;code&gt;h-8&lt;/code&gt; and &lt;code&gt;w-8&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rounded-full&lt;/code&gt; can be used to create circles. So it is useful in creating circle avatars for the profile picture.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bg-gray-200&lt;/code&gt; is used to add background color to the element. The cool thing here is you can replace gray-200 with any color of your choice and it gets set as a background color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-gray-500 text-sm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;activityContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;text-gray-500&lt;/code&gt; is used to set the font color of the element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ml-8 p-5 rounded-lg bg-white border border-black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;border&lt;/code&gt; is used to add border of 1px&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border-black&lt;/code&gt; is used to add the border-color as black&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex flex-row items-center mt-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;flex&lt;/code&gt; is used to set the display to flex&lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-row&lt;/code&gt; is used to set the flex-direction to row&lt;/p&gt;

&lt;p&gt;&lt;code&gt;items-center&lt;/code&gt; is used to set the align-items property to center&lt;/p&gt;

&lt;p&gt;TailwindCSS has a really good docs site if you want to learn more about the classes used&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/docs"&gt;https://tailwindcss.com/docs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;You can see that it is easier to add CSS styles without defining a separate class for each element. This method is a lot faster than adding individual classes but you will have to learn the different classes of TailwindCSS to create content faster.&lt;/p&gt;

&lt;p&gt;Join our Discord - &lt;a href="https://discord.gg/AUjrcK6eep"&gt;https://discord.gg/AUjrcK6eep&lt;/a&gt; and let's have a discussion there&lt;/p&gt;

</description>
      <category>svelte</category>
    </item>
    <item>
      <title>LEARN GQL WITH ME: Introduction to GQL and The Series</title>
      <author>Darshan-Bajeja</author>
      <pubDate>Thu, 28 Oct 2021 15:58:38 +0000</pubDate>
      <link>https://dev.to/darshanbajeja/learn-gql-with-me-introduction-to-gql-and-the-series-1o5b</link>
      <guid>https://dev.to/darshanbajeja/learn-gql-with-me-introduction-to-gql-and-the-series-1o5b</guid>
      <description>&lt;p&gt;So I have been building REST APIs for quite some time now. And I actually kind of like them, because when you build several REST APIs, then you find it very interesting and you keep on discovering many things. The people who have built REST APIs will understand what I am trying to express here. &lt;/p&gt;

&lt;p&gt;But since a long time I have been hearing about this new guy (at least new for me, actually its quite oldish) called GraphQL. They say that it can build the most efficient APIs. No API, including REST and SOAP APIs, are as good and efficient as GraphQL, because unlike REST, GraphQL has a single endpoint and gives you a flexible approach of fetching data from the server as a client. Just ask for what you need. Its like the objective type question that a client asks a server, the specific word or the specific data, and the server answers in exact number of words, or exact amount of data it was asked to give.&lt;/p&gt;

&lt;p&gt;If you don't get any of it, don't worry. In this series, I am going to be learning GraphQL myself, and whenever I think that okay, I have reached a checkpoint, or learnt enough about a topic in GraphQL or in short gql, that I can explain someone, then I will write a post here, teaching you whatever I learnt last. So this series is called LEARN GRAPHQL WITH ME! Where you literally 'learn graphql with me'....&lt;/p&gt;

&lt;p&gt;One thing to make clear, that GraphQL is in a way like REST, that it is a specification and not a module, package or library or framework, no! Its a specification. You can build REST APIs in many languages: JavaScript, Python, Java, C++, Go, PHP, Ruby, etc. Same way, GraphQL is also kind of API, and you can build it with any language. Right now there is no package for building GraphQL APIs in all languages, but in most of the major languages a package or module exists with which you can build GraphQL APIs. In this series, I am going to be learning using JavaScript, and then I even might migrate to TypeScript by the end of this series. But if you have been using a language, which currently does not have a package to implement GraphQL APIs, you have 2 options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Learn a new programming language&lt;/li&gt;
&lt;li&gt;Learn concepts of GraphQL, and be the first developer among the ones who use the same language as you do to build a package yourself, so that other people can use it (as well as you can use it) to build GraphQL APIs!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Alright so let's meet in the next post, where we will learn something new in GraphQL. And by the way, what I am going to use as a resource to learn GraphQL is called howtographql, developed by the devs at prisma.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/howtographql"&gt;
        howtographql
      &lt;/a&gt; / &lt;a href="https://github.com/howtographql/howtographql"&gt;
        howtographql
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Fullstack Tutorial for GraphQL
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
How to GraphQL 🎓
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.howtographql.com" rel="nofollow"&gt;How to GraphQL&lt;/a&gt; is a fullstack tutorial website to learn all about GraphQL! It was built by &lt;a href="https://www.prisma.io" rel="nofollow"&gt;Prisma&lt;/a&gt; and many amazing contributors. All content on the site is completely free and open-source.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.howtographql.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/96fcd0121d2fd6a47add33621abe3e2ecb344d3a6c9d2fcf9ed5bb7fb0e6d4b0/687474703a2f2f692e696d6775722e636f6d2f36376f596539712e706e67" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This repository is currently mostly unmaintained. We are looking for maintainers who can help cleaning up issues and PRs opened by the community. If you are interested in helping out, please &lt;a href="https://github.com/howtographql/howtographqlmailto:burk@prisma.io"&gt;reach out&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Content&lt;/h2&gt;
&lt;p&gt;The content for all tutorials is located in the  &lt;a href="https://github.com/howtographql/howtographql/tree/master/content"&gt;&lt;code&gt;/content&lt;/code&gt;&lt;/a&gt; directory. Here is an overview of all the tutorials that are available at the moment:&lt;/p&gt;
&lt;h4&gt;
GraphQL&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fundamentals of GraphQL&lt;/li&gt;
&lt;li&gt;Advanced GraphQL&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
Frontend&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;React &amp;amp; Apollo&lt;/li&gt;
&lt;li&gt;React &amp;amp; Relay&lt;/li&gt;
&lt;li&gt;Vue &amp;amp; Apollo (Out of date)&lt;/li&gt;
&lt;li&gt;Ember &amp;amp; Apollo (Out of date)&lt;/li&gt;
&lt;li&gt;Expo &amp;amp; Apollo (Coming Soon)&lt;/li&gt;
&lt;li&gt;Angular &amp;amp; Apollo (Coming Soon)&lt;/li&gt;
&lt;li&gt;VulcanJS (Coming Soon)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
Backend&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Prisma&lt;/li&gt;
&lt;li&gt;graphql-js / JavaScript&lt;/li&gt;
&lt;li&gt;Absinthe / Elixir&lt;/li&gt;
&lt;li&gt;graphql-ruby / Ruby&lt;/li&gt;
&lt;li&gt;graphql-java / Java&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/howtographql/howtographql"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>graphql</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Introduction to Scramjet Data Processing Platform</title>
      <author>Łukasz Kamieniecki-Mruk</author>
      <pubDate>Thu, 28 Oct 2021 15:35:50 +0000</pubDate>
      <link>https://dev.to/scramjetorg/introduction-to-scramjet-data-processing-platform-5bof</link>
      <guid>https://dev.to/scramjetorg/introduction-to-scramjet-data-processing-platform-5bof</guid>
      <description>&lt;h2&gt;
  &lt;a href="#new-engine-for-serverless-data-processing-applications"&gt;
  &lt;/a&gt;
  New engine for serverless data processing applications
&lt;/h2&gt;

&lt;p&gt;Our Scramjet data apps engine has its approach to deploying and running serverless applications; in several aspects different from solutions in areas such as software buses, integration platforms, and FaaS offerings. This article explains our approach. We hope you might find it interesting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-in-1-data-processing-platform"&gt;
  &lt;/a&gt;
  “3 in 1” data processing platform
&lt;/h2&gt;

&lt;p&gt;The heart of our solution and its data engine is called “Scramjet Transform Hub”. It’s available as a standalone software package on GitHub and will be the core element of our Scramjet Cloud Platform.&lt;/p&gt;

&lt;p&gt;We name our approach “3 in 1 data processing platform” as it combines 3 concepts into one solution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data processing engine&lt;/li&gt;
&lt;li&gt;serverless data applications&lt;/li&gt;
&lt;li&gt;complete API with dedicated CLI (covering both I/O and management endpoints)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W5xw32Gc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5e3ej4sd1hinbmqlihz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W5xw32Gc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5e3ej4sd1hinbmqlihz.png" alt="Scramjet “3 in 1” data processing platform" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at each point separately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-processing-engine"&gt;
  &lt;/a&gt;
  Data processing engine
&lt;/h2&gt;

&lt;p&gt;Scramjet Transform Hub creates unified deployment, runtime, management, and execution plan for serverless applications (sequences).&lt;/p&gt;

&lt;p&gt;In short, STH allows you to start data processing in 3 simple steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Deploy&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;si sequence send &amp;lt;sequence-package-tar&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Run&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;si sequence run &amp;lt;sequence-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Send data&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-H&lt;/span&gt; “Content-Type: application/octet-stream” — data-binary “@file.txt” &amp;lt;instance-input-endpoint&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You are free to post to our sequence simple HTTP requests, file, send a stream or even read data from another stream or API.&lt;br&gt;
Please notice that, contrary to typical microservices architectures, there is no expensive step of building containerized image, pushing it to the registry, and then downloading it to the container orchestrator to run the microservice. You can move from directory with code to sequence processing your data in less than a minute.&lt;/p&gt;

&lt;p&gt;We do package our apps but their size is measured in kilobytes, not in hundreds of megabytes as in the case of container images. Minimal app design gives better performance, optimized resources usage, and a simpler CI/CD process.&lt;/p&gt;

&lt;p&gt;We have prepared a short, 3-minute demo, showing the whole application (sequence) preparation, deployment, and run process on our YouTube channel. Check it below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/020MLhJsdG4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-data-applications"&gt;
  &lt;/a&gt;
  Serverless data applications
&lt;/h2&gt;

&lt;p&gt;We call the user applications sequences. They have capabilities to perform continuous data and stream processing, they have no run time limits or input data size limits.&lt;/p&gt;

&lt;p&gt;Each sequence has a straightforward structure — it’s a directory with at least two core files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;package.json&lt;/strong&gt; — simple JSON file describing sequence metadata&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;index.[js/ts]&lt;/strong&gt; — JavaScript or TypeScript file with sequence code. You are free to structure your app in multiple files if you like.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below there is the content of one of our sample “hello world” sequences, yielding integer numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;DataStream&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;scramjet&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;​&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;DataStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
 &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;})&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find intro readme and more samples in our dedicated repository &lt;a href="https://github.com/scramjetorg/scramjet-cloud-docs"&gt;scramjetorg/scramjet-cloud-docs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-amp-cli"&gt;
  &lt;/a&gt;
  API &amp;amp; CLI
&lt;/h2&gt;

&lt;p&gt;Let’s look at Transform Hub API via commands available in our CLI:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pack [options] — package directory with sequence code into tar.gz file&lt;/li&gt;
&lt;li&gt;host [command] — monitor and check the version of the host&lt;/li&gt;
&lt;li&gt;config|c [command] — display and manage config&lt;/li&gt;
&lt;li&gt;sequence|seq [command] — pack, deploy, manage and monitor sequences (app templates)&lt;/li&gt;
&lt;li&gt;instance|inst [command] — manage and monitor instances (running apps)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above commands (and related API) cover complete management of the data processing engine and serverless apps running on top of it.&lt;br&gt;
Once started, each running instance exposes the following API endpoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;input, output&lt;/li&gt;
&lt;li&gt;stdin, stdout, stderr&lt;/li&gt;
&lt;li&gt;log, monitoring&lt;/li&gt;
&lt;li&gt;_event (to instance), event (from instance)&lt;/li&gt;
&lt;li&gt;stop, kill&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach follows the “batteries included” approach, and each running instance is handled in the same way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-our-scramjet-cloud-platform"&gt;
  &lt;/a&gt;
  Why our Scramjet Cloud Platform
&lt;/h2&gt;

&lt;p&gt;Our approach shown above has several benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Freedom and flexibility — no artificial limits on data size and execution time of apps; no “execution time limit” or “payload size limit”.&lt;/li&gt;
&lt;li&gt;Great price for value-effective data workflows with fully programmable data acquisition, ability to create patterns between instances performing various data processing tasks.&lt;/li&gt;
&lt;li&gt;Performance by design — instantaneous execution of data without proxies, queues, and gateways. Light apps with minimal resources consumption.&lt;/li&gt;
&lt;li&gt;Works cross-native (Edge &amp;amp; Cloud) — out of the box spanning between locations. Run the same type of apps on edge or smart devices via standalone Scramjet Transform Hub and in our Scramjet Cloud Platform.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a summary, below you will find a diagram showing various patterns of chaining data processing on our platform:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IKbmcm4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aezt5ciq23jx9o3ktzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IKbmcm4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aezt5ciq23jx9o3ktzu.png" alt="Scramjet Transform Hub data flows" width="880" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>bigdata</category>
      <category>serverless</category>
    </item>
    <item>
      <title>1 line of code: How to get biggest numeric item of an Array</title>
      <author>martin krause</author>
      <pubDate>Thu, 28 Oct 2021 15:27:07 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-get-biggest-numeric-item-of-an-array-b6e</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-get-biggest-numeric-item-of-an-array-b6e</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const biggestItem = arr =&amp;gt; Math.max(...arr); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns the biggest numerical item of the array.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-repository-amp-npm-package"&gt;
  &lt;/a&gt;
  The repository &amp;amp; npm package
&lt;/h2&gt;

&lt;p&gt;You can find the all the utility functions from this series at &lt;a href="https://github.com/martinkr/onelinecode"&gt;github.com/martinkr/onelinecode&lt;/a&gt;&lt;br&gt;
The library is also published to &lt;a href="https://www.npmjs.com/package/@onelinecode/onelinecode"&gt;npm as @onelinecode&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;The code and the npm package will be updated every time I publish a new article.&lt;/p&gt;




&lt;p&gt;Happy coding and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
  </channel>
</rss>
