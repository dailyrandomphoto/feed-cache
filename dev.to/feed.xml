<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 28 Sep 2021 18:11:42 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1nh2</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1nh2</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preventing-alert-fatigue"&gt;
  &lt;/a&gt;
  Preventing alert fatigue
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/dvddpl"&gt;@dvddpl&lt;/a&gt;
 came through with a very helpful and empathetic guide to dealing with the apprehension and frustration that comes from "alert fatigue".&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dvddpl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UboDmADM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JXv2xuBV--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/132615/9bcf8385-383b-4b64-b5cc-d8a9f4f675b8.jpeg" alt="dvddpl"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dvddpl/when-everything-is-urgent-nothing-is-what-is-alarm-fatigue-and-how-to-deal-with-it-1321" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;When everything is urgent, nothing is. What is Alarm Fatigue and how to deal with it.&lt;/h2&gt;
      &lt;h3&gt;Davide de Paolis ・ Sep 23 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#mentalhealth&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#learning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#development&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#group-design-challenge"&gt;
  &lt;/a&gt;
  Group Design Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/zernonia"&gt;@zernonia&lt;/a&gt;
 shared a handful of designs so that anyone who wants to practice web design can do so without a cost barrier. Amazing!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/zernonia" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_rKtpOgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0SfoyLS7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/400444/8626e93e-1c07-44f2-8eab-1f0bbd87bfed.jpeg" alt="zernonia"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/zernonia/i-design-you-build-frontend-challenge-1-158a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I Design, You Build! - Frontend Challenge #1&lt;/h2&gt;
      &lt;h3&gt;Zernonia ・ Sep 25 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#idesignyoubuild&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#your-next-effective-opensource-contribution"&gt;
  &lt;/a&gt;
  Your next (effective) open-source contribution
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/pragativerma18"&gt;@pragativerma18&lt;/a&gt;
 shared what they learned along their journey in open-source — in the hopes that it will allow you to give back to the community.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pragativerma18" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kl_m4K1g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JR-0Kc_W--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/242611/68277387-0fa0-4c79-ad6f-4be3ddc940b7.jpeg" alt="pragativerma18"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pragativerma18/how-to-pick-an-open-source-project-to-contribute-to-4kak" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to pick an open-source project to contribute to?&lt;/h2&gt;
      &lt;h3&gt;Pragati Verma ・ Sep 24 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#hacktoberfest&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#question-styles-that-will-set-you-up-for-success"&gt;
  &lt;/a&gt;
  Question styles that will set you up for success
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/erikmelone"&gt;@erikmelone&lt;/a&gt;
 believes that there are certain ways to phrase typical questions that can help better set you up for success. In this post, we'll take a look at a few of them.   &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/erikmelone" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jhTZclY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3VYrRmHp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/694604/abe33402-1bc3-40ca-839f-6545a70a8082.jpeg" alt="erikmelone"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/erikmelone/how-to-ask-the-right-questions-as-a-junior-developer-5701" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;3 Ways you can ask Better Questions as a Junior Developer&lt;/h2&gt;
      &lt;h3&gt;Erik Melone ・ Sep 25 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#culture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-to-implement-automatic-link-shortening-in-react"&gt;
  &lt;/a&gt;
  How to implement automatic link shortening in React
&lt;/h2&gt;

&lt;p&gt;"Whether you are looking to add automatic URL shortening to your existing React app, or you want to get detailed analytics of all the links shared on your mobile/web app, emly.cc’s URL shortener has a detailed API to get you started within few minutes." — thanks &lt;a class="mentioned-user" href="https://dev.to/eaetukudo"&gt;@eaetukudo&lt;/a&gt;
! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/eaetukudo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--72k6CwHq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9L9EGwJW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/335531/499c7927-e174-408e-8400-98185445eb5e.jpg" alt="eaetukudo"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/eaetukudo/build-automatic-url-shortener-with-react-and-emly-2ob5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build automatic URL shortener with react and Emly&lt;/h2&gt;
      &lt;h3&gt;Emmanuel Etukudo ・ Sep 22 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#reactnative&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#what-makes-react-fun"&gt;
  &lt;/a&gt;
  What makes React fun
&lt;/h2&gt;

&lt;p&gt;"What makes React fun is that we can take common patterns and turn them into reusable components, making our development life easier and our code shorter." says &lt;a class="mentioned-user" href="https://dev.to/trishathecookie"&gt;@trishathecookie&lt;/a&gt;
. No better example of this than React Context!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/trishathecookie" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xcthR5KL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--n1nSzqKc--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/712840/9bd48162-01ff-4154-aec8-5783fefee55a.jpg" alt="trishathecookie"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/trishathecookie/react-creating-a-reusable-form-using-react-context-5eof" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;React: How to create a reusable form using React Context&lt;/h2&gt;
      &lt;h3&gt;Trisha Lim ・ Sep 25 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#es6&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#10-open-source-programs-for-students"&gt;
  &lt;/a&gt;
  10 open source programs for students
&lt;/h2&gt;

&lt;p&gt;In this post, &lt;a class="mentioned-user" href="https://dev.to/pb"&gt;@pb&lt;/a&gt;
 shares some of the open source programs which you can apply to as a student to gain experience, work with some of the most informed people in the industry (from the comfort of your home) and earn a generous stipend! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3sfWXRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--52cZyHb1--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/618537/3cd782cd-1a3a-4926-9eb6-1e55fba23a61.jpg" alt="pb"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pb/open-source-programs-for-students-to-participate-55gm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Open Source Programs for Students to participate&lt;/h2&gt;
      &lt;h3&gt;Pawel ・ Sep 26 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Protect Your components with React Router</title>
      <author>Med Amine Fh</author>
      <pubDate>Tue, 28 Sep 2021 18:09:26 +0000</pubDate>
      <link>https://dev.to/medaminefh/protect-your-components-with-react-router-4hf7</link>
      <guid>https://dev.to/medaminefh/protect-your-components-with-react-router-4hf7</guid>
      <description>&lt;p&gt;If you're using &lt;strong&gt;react router&lt;/strong&gt; in your App, then you probably wanted to protect some routes from specific users, or to Redirect some users to their own page or component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-to-do-"&gt;
  &lt;/a&gt;
  so what to do ?
&lt;/h2&gt;

&lt;p&gt;In this blog we'll see How to handle that with some simple checks&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tnNFYONO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/7efs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tnNFYONO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/7efs.gif" alt="checks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So at the beginning this is how our App looks like&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r3Ccl5PA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86dmp37s365dv1bfadiz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3Ccl5PA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86dmp37s365dv1bfadiz.png" alt="protectedRoute2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point every user can access those two components (Admin, Home)&lt;/p&gt;

&lt;p&gt;But that's not what i want, I want just the &lt;strong&gt;admin&lt;/strong&gt; to have access to the "&lt;code&gt;/admin&lt;/code&gt;" route.&lt;/p&gt;

&lt;p&gt;And those who don't have access to that route, I need to redirect them to the &lt;strong&gt;Home&lt;/strong&gt; Page ("&lt;code&gt;/&lt;/code&gt;" route)&lt;/p&gt;

&lt;p&gt;So the 1st Step is to create the &lt;strong&gt;ProtectedRoute&lt;/strong&gt; Component.&lt;/p&gt;

&lt;p&gt;You can create it in the same file, but for a cleaner code we'll create it on a new file&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-a-file-and-name-it-to-what-you-want-ill-name-it-raw-protectedroutejs-endraw-"&gt;
  &lt;/a&gt;
  1- Create a file and name it to what you want. I'll name it &lt;code&gt;protectedRoute.js&lt;/code&gt;.
&lt;/h3&gt;



&lt;h3&gt;
  &lt;a href="#2-paste-this-code-in-that-file"&gt;
  &lt;/a&gt;
  2- Paste this code in that file
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TU2rXdX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82t2mq0oa0pp48ftivtg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TU2rXdX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82t2mq0oa0pp48ftivtg.png" alt="protectedRoute1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So basically we check if there is a &lt;strong&gt;token&lt;/strong&gt; stored in our &lt;strong&gt;LocalStorage&lt;/strong&gt; or not.&lt;/p&gt;

&lt;p&gt;If The check is &lt;strong&gt;Truthy&lt;/strong&gt; then he Have access to that route.&lt;br&gt;
 If Not, He will be Redirected to the Home Page (thanks to the &lt;code&gt;&amp;lt;Redirect /&amp;gt;&lt;/code&gt; Component).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You need to change that check to suit your case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don't forget to &lt;strong&gt;export&lt;/strong&gt; your Component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-finally-well-use-that-protectedroute-in-our-app"&gt;
  &lt;/a&gt;
  3- Finally we'll use that ProtectedRoute in our &lt;strong&gt;App&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Import The &lt;em&gt;ProtectedRoute&lt;/em&gt; Component from where you created it&lt;br&gt;
you can name it what you want if you export it with the &lt;strong&gt;default&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ov6OPN_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arjssd40yki0qz07i80v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ov6OPN_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arjssd40yki0qz07i80v.png" alt="protectedRoute3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So here we need to changed The &lt;br&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;Route exact path="/admin" component={Admin}  /&amp;gt;&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;ProtectedRoute exact path="/admin" component={Admin}  /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-thats-it-go-try-it-out"&gt;
  &lt;/a&gt;
  And that's it 🎉, Go Try it out.
&lt;/h3&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
      <category>security</category>
    </item>
    <item>
      <title>Adding Sentry to Spring Boot Securely</title>
      <author>Jeffrey Fate</author>
      <pubDate>Tue, 28 Sep 2021 18:02:12 +0000</pubDate>
      <link>https://dev.to/jeffreyfate/adding-sentry-to-spring-boot-securely-52fl</link>
      <guid>https://dev.to/jeffreyfate/adding-sentry-to-spring-boot-securely-52fl</guid>
      <description>&lt;p&gt;Observability.&lt;/p&gt;

&lt;p&gt;When I started working with the microservices at my job about 4 months ago, there were numerous ways to know a bug made it to production.&lt;/p&gt;

&lt;p&gt;Slack alerts. Cloudwatch logs. Production support.&lt;/p&gt;

&lt;p&gt;There was no aggregation of errors and alerting.&lt;/p&gt;

&lt;p&gt;I had never used Sentry, but heard a lot about it over the last couple of years. It seemed like a reasonable solution to this problem.&lt;/p&gt;

&lt;p&gt;Other folks at my job agreed we should try it. Here's what it took to integrate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;To understand fully what's going on in each of the services, it made sense to capture EVERYTHING, at least at first. This meant uncaught and caught exceptions, including the ones already caught by any @ExceptionHandlers.&lt;/p&gt;

&lt;p&gt;We also wanted to keep any secrets out of our code and in AWS Secrets Manager.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-the-instructions"&gt;
  &lt;/a&gt;
  Follow The Instructions
&lt;/h2&gt;

&lt;p&gt;I found vast documentation on &lt;a href="https://docs.sentry.io/platforms/java/guides/spring-boot/"&gt;Sentry's Spring Boot docs&lt;/a&gt; pages. However, there wasn't a solution that let us store the DSN securely, outside the source.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My Solution
&lt;/h2&gt;

&lt;p&gt;To store the DSN elsewhere and pull it in at runtime, I used the AWS Secrets Manager SDK. &lt;a href="https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/manage-credentials-using-aws-secrets-manager.html"&gt;Here's a decent tutorial from AWS&lt;/a&gt; on how to get that setup. Now let's focus on the Sentry part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;Combining the documentation from Sentry and the slightly different requirements we had, I created a Spring configuration that provides a Sentry OptionsConfiguration bean:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Bean
@Primary
Sentry.OptionsConfiguration&amp;lt;SentryOptions&amp;gt; sentryOptionsConfiguration() {
    return options -&amp;gt; {
        SentryProperties properties = (SentryProperties) options;
        properties.setDsn(secretService.getSentrySecret().getDsn());
        properties.setEnvironment(activeProfile);
        properties.setDebug(true);
        properties.setExceptionResolverOrder(Ordered.HIGHEST_PRECEDENCE);
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because Sentry provides an OptionsConfiguration themselves, I used &lt;code&gt;@Primary&lt;/code&gt; to ensure mine took precedence.&lt;/p&gt;

&lt;p&gt;I used the Spring profile name to set the environment; for example, &lt;code&gt;QA&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To make sure we see all handled errors, I set the exception resolver order to &lt;code&gt;Ordered.HIGHEST_PRECEDENCE&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#properties"&gt;
  &lt;/a&gt;
  Properties
&lt;/h3&gt;

&lt;p&gt;I thought the code changes would be enough. I was wrong.&lt;/p&gt;

&lt;p&gt;Turns out Sentry &lt;strong&gt;requires&lt;/strong&gt; the property &lt;code&gt;sentry.dsn&lt;/code&gt; to be set to something or the Sentry bootstrap fails when the Spring application context is built.&lt;/p&gt;

&lt;p&gt;The solution:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sentry.dsn=dummy&lt;/code&gt; in my &lt;code&gt;application.properties&lt;/code&gt; file&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Sentry is an extremely useful tool that has a friendly and clear interface. We use it to see production issues and have more context of issues reported by our QA team.&lt;/p&gt;

&lt;p&gt;With these small tweaks, we are able to get the data we need to resolve errors fast.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>observability</category>
      <category>springboot</category>
      <category>java</category>
    </item>
    <item>
      <title>Electron Adventures: Episode 67: Malina</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Tue, 28 Sep 2021 17:49:35 +0000</pubDate>
      <link>https://dev.to/taw/electron-adventures-episode-67-malina-518j</link>
      <guid>https://dev.to/taw/electron-adventures-episode-67-malina-518j</guid>
      <description>&lt;p&gt;In this series we've tried out a bunch of different frameworks, from the omnipresent jQuery and React to ones you've at least heard of like Svelte, Vue, and D3, to completely obscure Marko.&lt;/p&gt;

&lt;p&gt;Well, time for another one you've never heard of - &lt;a href="https://malinajs.github.io/docs/"&gt;Malina&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The easiest way to explain Malina is that Malina is to Svelte what Preact is to React. It's a simpler version with some different performance choices. If you know Svelte, Malina shouldn't be too difficult.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;As usual, we'll start by setting up a fresh Malina project, then add Electron to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npx create-malina episode-67-malina
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;episode-67-malina
&lt;span class="nv"&gt;$ &lt;/span&gt;npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; electron
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-indexjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;index.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;We can use the same one as before, just changing the port number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;webPreferences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/preload.js`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maximize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:7000/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;window-all-closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And let's create empty &lt;code&gt;preload.js&lt;/code&gt;. And remove &lt;code&gt;package-lock.json&lt;/code&gt; from default &lt;code&gt;.gitignore&lt;/code&gt; as we definitely want them in the repo, especially for a young and non-prod framework like Malina.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-publicindexhtml-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;public/index.html&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;I customized a few things - removed the hardcoded title so the app can manage it, added UTF-8 declaration, and changed it to standard 2 space indentation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"shortcut icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/malinajs.svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/bundle.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-srcmainjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/main.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Just as it was created except making style consistent with the series:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.xht&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-srcappxht-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/App.xht&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;.xht&lt;/code&gt; is Malina's equivalent of &lt;code&gt;.svelte&lt;/code&gt; / &lt;code&gt;.vue&lt;/code&gt; and such.&lt;/p&gt;

&lt;p&gt;I did a few tiny changes - using 2 spaces indetation instead of 4, styling consistent with the rest of the series, and making it use dark mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;degrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./malinajs.svg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Malina.js Logo"&lt;/span&gt; &lt;span class="na"&gt;style:transform=&lt;/span&gt;&lt;span class="s"&gt;{`rotate(${degrees}deg)`}/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello {name}!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;:value=&lt;/span&gt;&lt;span class="s"&gt;{name}&lt;/span&gt; &lt;span class="na"&gt;*&lt;/span&gt;&lt;span class="err"&gt;{$&lt;/span&gt;&lt;span class="na"&gt;element.focus&lt;/span&gt;&lt;span class="err"&gt;()}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Edit and save file &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;src/App.xht&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; to reload&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"scss"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nd"&gt;:global&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see most of it looks like Svelte, but this line has a lot of extra syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;:value=&lt;/span&gt;&lt;span class="s"&gt;{name}&lt;/span&gt; &lt;span class="na"&gt;*&lt;/span&gt;&lt;span class="err"&gt;{$&lt;/span&gt;&lt;span class="na"&gt;element.focus&lt;/span&gt;&lt;span class="err"&gt;()}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Malina &lt;code&gt;:value={name}&lt;/code&gt; is shortcut for Svelte's &lt;code&gt;bind:value={name}&lt;/code&gt;. &lt;code&gt;*{}&lt;/code&gt; is Malina's equivalent of Svelte's &lt;code&gt;use:{}&lt;/code&gt;. In both cases longer Svelte syntax works as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;Here's the results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B6Djyu5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyh1i51ka8e5t61fo0xz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6Djyu5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyh1i51ka8e5t61fo0xz.png" alt="Episode 67 Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we got Hello World working in Malina, let's try to port our hex editor!&lt;/p&gt;

&lt;p&gt;As usual, &lt;a href="https://github.com/taw/electron-adventures/tree/master/episode-67-malina"&gt;all the code for the episode is here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>electron</category>
      <category>svelte</category>
    </item>
    <item>
      <title>AutoMapper in C#</title>
      <author>manoj</author>
      <pubDate>Tue, 28 Sep 2021 17:14:35 +0000</pubDate>
      <link>https://dev.to/jsdevelopermano/automapper-in-c-2ifn</link>
      <guid>https://dev.to/jsdevelopermano/automapper-in-c-2ifn</guid>
      <description>&lt;p&gt;AutoMapper in C# is a mapper between two objects. That is AutoMapper is an object-object mapper. It maps the properties of two different objects by transforming the input object of one type to the output object of another type.&lt;/p&gt;

&lt;p&gt;It also provides some interesting facts to take the dirty work out of figuring out how to map an object of type A with an object of type B as long as the object of type B follows AutoMapper’s established convention.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s discuss the step-by-step procedure to use AutoMapper in C#.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-installing-the-automapper-library"&gt;
  &lt;/a&gt;
  1: Installing the AutoMapper library
&lt;/h3&gt;

&lt;p&gt;The AutoMapper is an open-source library present in &lt;a href="https://github.com/AutoMapper"&gt;GitHub&lt;/a&gt;. To install this library, open the Package Manager Console window and then type the following command and press enter key to install the AutoMapper library in your project:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt; Install-Package AutoMapper&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you installed the AutoMapper library, then it will add a reference to the AutoMapper dll which you can find in the project references section as shown in the below image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2IYxdA-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zhwtgwy9r6s4dk2punm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2IYxdA-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zhwtgwy9r6s4dk2punm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-initializing-or-configuring-the-automapper"&gt;
  &lt;/a&gt;
  2: Initializing or Configuring the AutoMapper
&lt;/h3&gt;

&lt;p&gt;Once you have defines your types (i.e. classes) then you can create a mapper for the two types using the constructor of MapperConfiguration class. You can create only one MapperConfiguration instance per AppDomain and should be instantiated during the application start-up. The syntax to create the MapperConfiguration instance is given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Initialize the mapper
  var config = new MapperConfiguration(cfg =&amp;gt;
               cfg.CreateMap&amp;lt;Employee, EmployeeDTO&amp;gt;()
            );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The type on the left is the source type i.e. TSource, in our example, it will be going to Employee object, and the type on the right is the destination type i.e. TDestination, in our example, it will be going to EmployeeDTO object. So, two maps the Employee with EmployeeDTO, you need to create the mapper configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System;
using AutoMapper;
namespace AutoMapperDemo
{
    class Program
    {
        static void Main(string[] args)
        {
            //Initialize the mapper
            var config = new MapperConfiguration(cfg =&amp;gt;
                    cfg.CreateMap&amp;lt;Employee, EmployeeDTO&amp;gt;()
                );

            //Creating the source object
            Employee emp = new Employee
            {
                Name = "James",
                Salary = 20000,
                Address = "London",
                Department = "IT"
            };

            //Using automapper
            var mapper = new Mapper(config);
            var empDTO = mapper.Map&amp;lt;EmployeeDTO&amp;gt;(emp);
            //OR
            //var empDTO2 = mapper.Map&amp;lt;Employee, EmployeeDTO&amp;gt;(emp);

            Console.WriteLine("Name:" + empDTO.Name + ", Salary:" + empDTO.Salary + ", Address:" + empDTO.Address + ", Department:" + empDTO.Department);
            Console.ReadLine();
        }
    }

    public class Employee
    {
        public string Name { get; set; }
        public int Salary { get; set; }
        public string Address { get; set; }
        public string Department { get; set; }
    }

    public class EmployeeDTO
    {
        public string Name { get; set; }
        public int Salary { get; set; }
        public string Address { get; set; }
        public string Department { get; set; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ref: &lt;a href="https://dotnettutorials.net/lesson/automapper-in-c-sharp/"&gt;https://dotnettutorials.net/lesson/automapper-in-c-sharp/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Working with ZIP files in LuaRT</title>
      <author>Sam</author>
      <pubDate>Tue, 28 Sep 2021 17:09:06 +0000</pubDate>
      <link>https://dev.to/samyeyo/working-with-zip-files-in-luart-2lm0</link>
      <guid>https://dev.to/samyeyo/working-with-zip-files-in-luart-2lm0</guid>
      <description>&lt;p&gt;&lt;a href="https://www.luart.org"&gt;LuaRT&lt;/a&gt; provides a builtin zip module to work with compressed files in ZIP format, without any additional dependencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zip-archive-files"&gt;
  &lt;/a&gt;
  ZIP archive files
&lt;/h2&gt;

&lt;p&gt;ZIP is a file format that supports lossless compression. A lossless compression algorithm allows the original data to be perfectly reconstructed from the compressed data. A ZIP file contains one or more compressed files, making it an ideal way to reduce the size of large files and keep related files together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-zip-object"&gt;
  &lt;/a&gt;
  The Zip Object
&lt;/h2&gt;

&lt;p&gt;The LuaRT 'zip' module provides an abstraction of zip files represented as a Zip Object. Only INFLATE/DEFLATE algorithms are supported.&lt;br&gt;
This module facilitates the creation of ZIP archive files and provides methods and properties for adding and extracting compressed files.&lt;/p&gt;

&lt;p&gt;To use the &lt;strong&gt;Zip&lt;/strong&gt; Object, you must first require for the 'zip' module :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- require the builtin 'zip' module for the Zip object&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"zip"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extract-files-from-a-zip-archive"&gt;
  &lt;/a&gt;
  Extract files from a ZIP archive
&lt;/h2&gt;

&lt;p&gt;To extract files from an existing ZIP archive, you can use the &lt;strong&gt;Zip:extractall()&lt;/strong&gt; method :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"zip"&lt;/span&gt;

&lt;span class="c1"&gt;-- Create a Zip value to represent the ZIP file 'archive.zip'&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"archive.zip"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- open the ZIP archive for reading&lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"read"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- extract and uncompress all the files in the current directory&lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;extractall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can extract a specific entry with the &lt;strong&gt;Zip:extract()&lt;/strong&gt; method :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- extract the ZIP entry "extractme.bin" in the current directory &lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"extractme.bin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A destination path can optionaly be provided :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- extract the ZIP entry "data.bin" in the specified directory &lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"data.bin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"C:\\Extract\\Me\\Here"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-a-zip-archive"&gt;
  &lt;/a&gt;
  Creating a ZIP archive
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Zip:open()&lt;/strong&gt; can be used to create an empty ZIP archive. Files can be added to the archive with the &lt;strong&gt;Zip:write()&lt;/strong&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"zip"&lt;/span&gt;

&lt;span class="c1"&gt;-- Create a Zip value to represent the  ZIP file 'new.zip'&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"new.zip"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- open the ZIP archive for writing&lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"write"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- add a file to this archive&lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"C:\\addme.txt"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can recursively add entire directories too :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"C:\\I_am_a_directory_addme\\"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#iterating-over-files-in-a-zip-archive"&gt;
  &lt;/a&gt;
  Iterating over files in a ZIP archive
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Zip&lt;/strong&gt; object is iterable with the &lt;strong&gt;each()&lt;/strong&gt; function, returning at every iteration the next entry name in the ZIP archive previously opened in "read" mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"zip"&lt;/span&gt;

&lt;span class="c1"&gt;-- Create a Zip value to represent the ZIP file 'archive.zip'&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"archive.zip"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- open the ZIP archive for reading&lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"read"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- Iterate over each ZIP archive entries and extract it&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Extracting '"&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="s2"&gt;"'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reading-zip-archive-entries-in-memory"&gt;
  &lt;/a&gt;
  Reading ZIP archive entries in memory
&lt;/h2&gt;

&lt;p&gt;ZIP archive entries can also be extracted in-memory using the &lt;strong&gt;Zip:read()&lt;/strong&gt; method :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"zip"&lt;/span&gt;

&lt;span class="c1"&gt;-- Create a Zip value to represent the ZIP file 'archive.zip'&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"archive.zip"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- open the ZIP archive for reading&lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"read"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- print the content of the ZIP archive entry 'README.TXT'&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"README.TXT"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, LuaRT's 'zip' module provides an easy way to manage ZIP archives. Additionally, you can read the complete Zip object specification &lt;a href="http://www.luart.org/doc/zip/zip.html"&gt;Zip Object&lt;/a&gt;&lt;/p&gt;

</description>
      <category>lua</category>
      <category>windows</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Emulate Devices on Google Chrome</title>
      <author>Kingsley Ubah</author>
      <pubDate>Tue, 28 Sep 2021 16:58:17 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/how-to-emulate-devices-on-google-chrome-ad5</link>
      <guid>https://dev.to/ubahthebuilder/how-to-emulate-devices-on-google-chrome-ad5</guid>
      <description>&lt;p&gt;When building websites, you have to keep in mind that many kinds of device are going to be viewing your site. These devices will come with different screen orientations. &lt;/p&gt;

&lt;p&gt;Thus, making your website look good on mobile, tablets and desktop is vital. &lt;/p&gt;

&lt;p&gt;You don’t need to use third party tools to test your website. Google Chrome comes with an in-built device simulator. You can select any of the devices and view how your page will look on that device. You can even add custom devices which are not included in the list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simulate-a-device-on-chrome"&gt;
  &lt;/a&gt;
  Simulate a device on Chrome
&lt;/h3&gt;

&lt;p&gt;Open the Chrome DevTool. You can do this by clicking on F12.&lt;/p&gt;

&lt;p&gt;Alternatively, you can click on the three dots on the top right corner of your broswer window, select &lt;strong&gt;more tools&lt;/strong&gt; and then &lt;strong&gt;developer tools&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next, toggle the device view by click on the devices icon next to the elements tab. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HDEcMw6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838090369/GfRKha3kW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HDEcMw6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838090369/GfRKha3kW.png" alt="Toggle device"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your page will be rendered into device mode. You will also notice the dropdown menu on top. From this drop down menu, you can select the device you want to emulate and view how you page will look on it.&lt;/p&gt;

&lt;p&gt;The list of devices on the dropdown is limited. You can also edit the list to select and add other devices to the drop-down.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-custom-devices"&gt;
  &lt;/a&gt;
  Adding custom devices
&lt;/h3&gt;

&lt;p&gt;You can also create and add custom devices. To do so, click on the custom devices button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZOx5Yk5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838238820/h2Z_ZulsR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZOx5Yk5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838238820/h2Z_ZulsR.png" alt="Add devices"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will need to input the height and width of your target device, as well as its pixel density.&lt;/p&gt;

&lt;p&gt;You can find the screen resolution of any mobile device at this  &lt;a href="https://www.webmobilefirst.com/"&gt;website&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;You will also need to add a user agent string. A user agent string is a string of containing information about the computer requesting a web page.&lt;/p&gt;

&lt;p&gt;This website has the user agent string for  &lt;a href="https://deviceatlas.com/blog/list-of-user-agent-strings"&gt;all common devices&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Finally you can add the device. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uwrw0aWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838220385/8Grpk94qv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uwrw0aWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838220385/8Grpk94qv.png" alt="preview.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you will be able to emulate that device and test your web page on it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h3&gt;

&lt;p&gt;Device emulators are very good for responsive design. It's important to note that simulation in this case is just the visual part. The web browser does not run the operating system.&lt;/p&gt;

&lt;p&gt;Don't forget to sign up for my  &lt;a href="https://www.getrevue.co/profile/ubahthebuilder"&gt;newsletter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Get Started with React Native, Redux and TypeScript</title>
      <author>Raji Oluwatobiloba</author>
      <pubDate>Tue, 28 Sep 2021 16:40:40 +0000</pubDate>
      <link>https://dev.to/tobilastik/get-started-with-react-native-redux-and-typescript-4gpi</link>
      <guid>https://dev.to/tobilastik/get-started-with-react-native-redux-and-typescript-4gpi</guid>
      <description>&lt;p&gt;One of the popular state management tools out there is Redux. &lt;/p&gt;

&lt;p&gt;Setting up a Typescript React Native Project with Redux can be tricky for beginners, in this article, I will teach you how you can easily get started.&lt;/p&gt;

&lt;p&gt;I am assuming, you have a React Native Typescript Project setup, if you don't, you can run this command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx react-native init ProjectName --template react-native-template-typescript&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your project will automatically be bootstrapped with typescript template.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-dependencies"&gt;
  &lt;/a&gt;
  Installing dependencies
&lt;/h1&gt;

&lt;p&gt;I like using yarn, but you can also use npm&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add redux react-redux redux-thunk&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Afterwards, let's install redux type definitions &lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add @types/react-redux -D&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a new folder call "Store".&lt;br&gt;
You can name the folder as you desire, but I prefer to use store.&lt;br&gt;
Inside this folder, create three folders:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;actions&lt;/li&gt;
&lt;li&gt;reducers&lt;/li&gt;
&lt;li&gt;types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and lastly, create an index.tsx file.&lt;/p&gt;

&lt;p&gt;In your index.tsx file, paste the following code&lt;/p&gt;

&lt;pre&gt;
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import appReducer from './reducers';


export default createStore(appReducer, applyMiddleware(thunk));
&lt;/pre&gt;

&lt;p&gt;The next action is to define your Types.&lt;br&gt;
In your types folder, create an index.tsx file and paste the following code&lt;/p&gt;

&lt;pre&gt;
export const USER_TODO = 'USER_TODO';
&lt;/pre&gt;

&lt;p&gt;Save and close.&lt;/p&gt;

&lt;p&gt;Next stop is the actions folder, for this folder, I like to create an index.tsx file and other actions. So if you are creating a big application, you might have something like this&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.tsx&lt;br&gt;
users.tsx&lt;br&gt;
admin.tsx&lt;br&gt;
payment.tsx etc.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This makes your file structure cleaner and more understandable.&lt;/p&gt;

&lt;p&gt;But for this simple application, we will be needing just two files:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.tsx and &lt;br&gt;
todo.tsx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Inside your index.tsx file, paste the code below:&lt;/p&gt;

&lt;pre&gt;
import todoAction from './todo';


export { todoAction };
&lt;/pre&gt;

&lt;p&gt;Save and Close&lt;/p&gt;

&lt;p&gt;In your todo.tsx file, you will define how your actions are to look like,&lt;/p&gt;

&lt;p&gt;First import all your types&lt;/p&gt;

&lt;pre&gt;
import { USER_TODO, } from '../types';
&lt;/pre&gt;

&lt;p&gt;Then set up your actions&lt;/p&gt;

&lt;pre&gt;
const setUserTodo = (payload: number) =&amp;gt; ({
  type: USER_TODO,
  payload,
});

export default {
  setUserTodo,
};
&lt;/pre&gt;

&lt;p&gt;Save and Close.&lt;/p&gt;

&lt;p&gt;Lastly, create two files in your reducers folder &lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.tsx and &lt;br&gt;
todo.tsx&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;inside your todo.tsx file, paste the following code:&lt;/p&gt;

&lt;pre&gt;
import { USER_TODO } from '../types';

const initialstate = {
    userTodo: [],
};

type Action = {
    type: string,
    payload?: any
}

export default (state: any = initialstate, action: Action) =&amp;gt; {
    switch (action.type) {
        case USER_TODO:
            return Object.assign({}, state, {
                userTodo: action.payload,
            });
        default:
            return state;
    }
};
&lt;/pre&gt;

&lt;p&gt;inside your index.tsx file, paste the following code:&lt;/p&gt;

&lt;pre&gt;
import { combineReducers } from 'redux';
import todo from './todo';


const appReducer = combineReducers({
    todo,
});

export default appReducer;

export type State = ReturnType
&lt;/pre&gt;

&lt;p&gt;And that's it! You have successfully set up your redux store, now let's head over to the UI part.&lt;/p&gt;

&lt;p&gt;I will make use of JSON public placeholder API to generate list of todos&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;https://jsonplaceholder.typicode.com/todos/&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;&lt;/code&gt;useDispatch&lt;code&gt;&lt;/code&gt; hooks from react-redux to easily dispatch data into your reducers&lt;/p&gt;

&lt;p&gt;In your App.tsx, paste the following code:&lt;/p&gt;

&lt;pre&gt;
import * as React from 'react';
import { Text, View, StyleSheet } from 'react-native';
import { useDispatch } from 'react-redux';
import { todoAction } from '../store/actions';

interface AppProps {
  navigation: any;
  setTodo: any;
}

const Welcome: React.FC = ({ navigation: { navigate } }) =&amp;gt; {
  const dispatch = useDispatch();

  React.useEffect(() =&amp;gt; {
    loadTodos();
  }, []);

  const loadTrivia = () =&amp;gt; {
     try {
    const response = await fetch(
      'https://jsonplaceholder.typicode.com/todos/'
    );
    const json = await response.json();
     dispatch(todoAction.setUserTodo(json));
  } catch (error) {
    console.error(error);
  }
  };

  return (
    &amp;lt; View style={styles.container}&amp;gt;
      
    &amp;lt; /View&amp;gt;
  );
};

export default App;

&lt;/pre&gt;

&lt;p&gt;And to get the list of these todo, use &lt;code&gt;&lt;/code&gt;useSelector&lt;code&gt;&lt;/code&gt; hooks from react-redux&lt;/p&gt;

&lt;pre&gt;
import React from 'react';
import { View, Text } from 'react-native';
import { useSelector } from 'react-redux';

interface TodoProps {
  navigation: any;
}

const Todo = (props: TodoProps) =&amp;gt; {
  const { userTodo } = useSelector((state: State) =&amp;gt; state.todo);

const TodoList = ({data}) =&amp;gt; {
      return (
            &amp;lt; View&amp;gt;
             &amp;lt; Text&amp;gt;{data.title} &amp;lt; /Text&amp;gt;
            &amp;lt; /View&amp;gt;
      )};

  return (
      &amp;lt; FlatList
        data={userTodo}
        renderItem={({ item }) =&amp;gt; } /&amp;gt;
  )};

export default Todo;
&lt;/pre&gt;

&lt;p&gt;And that is it!&lt;/p&gt;

&lt;p&gt;That is the simple way to easily add redux to your React Native Typescript project.&lt;/p&gt;

&lt;p&gt;Let me know if you have any questions!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>redux</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>How to setup Auditd on Ubuntu</title>
      <author>Ajay K. Dhyani</author>
      <pubDate>Tue, 28 Sep 2021 16:40:13 +0000</pubDate>
      <link>https://dev.to/ajaykdl/how-to-setup-auditd-on-ubuntu-jfk</link>
      <guid>https://dev.to/ajaykdl/how-to-setup-auditd-on-ubuntu-jfk</guid>
      <description>&lt;p&gt;Original Article written here &lt;a href="http://kubefront.com/linux/how-to-enable-configure-auditd-on-ubuntu"&gt;&lt;strong&gt;How to enable and configure Auditd on Ubuntu&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Securing our microservice's backend infrastructure is very crucial nowadays,  managing lots of endpoints, clusters[Database, workers] is not an easy task.  In this post, I am sharing how we can use Auditd for auditing our cloud-native infrastructure.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://man7.org/linux/man-pages/man8/auditd.8.html"&gt;&lt;strong&gt;Auditd&lt;/strong&gt;&lt;/a&gt; is a very light but powerful tool for managing or we can say auditing Linux based systems using its native kernel feature called The Linux Auditing System(LAS).  LAS effectily collects some useful system activities and save them in its own logs which helps security guys to better investigate any occured incident.&lt;/p&gt;

&lt;p&gt;I will cover Auditd usecase in another part because for better naration, for now we will understand how we can install Auditd and configure.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Linux Ubuntu machine: Any version&lt;/li&gt;
&lt;li&gt;Internet for downloading stuff&lt;/li&gt;
&lt;li&gt;And finally, &lt;a href="http://kubefront.com/linux/some-basic-Linux-understanding"&gt;&lt;strong&gt;some basic Linux understanding&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#install-auditd-on-ubuntu-linux"&gt;
  &lt;/a&gt;
  Install Auditd on Ubuntu Linux
&lt;/h2&gt;

&lt;p&gt;Install Bash if not present, on you Ubuntu system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;bash-completion
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After these inital steps, now &lt;strong&gt;Install Auditd&lt;/strong&gt;. This following command will install Auditd's latest version on your ubuntu system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;auditd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can start and enable your auditd service so it will run up after system restart or reboot.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;service status auditd
auditd start
auditd restart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Auditd is very light, so it will not take much effort. Now time to configure Auditd on Ubuntu system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-auditd-on-ubuntu"&gt;
  &lt;/a&gt;
  Configure Auditd on Ubuntu
&lt;/h2&gt;

&lt;p&gt;By default, you can find auditd's config file here &lt;code&gt;/etc/audit/auditd.conf&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;auditd_buffer_size: 32768
auditd_fail_mode: 1
auditd_maximum_rate: 60
auditd_enable_flag: 1

auditd_local_events: "yes"
auditd_write_logs: "yes"
auditd_log_file: /var/log/audit/audit.log
auditd_log_group: root
auditd_log_format: RAW
auditd_flush: incremental_async
auditd_freq: 50
auditd_max_log_file: 8
auditd_num_logs: 5
auditd_priority_boost: 4
auditd_disp_qos: lossy
auditd_dispatcher: /sbin/audispd
auditd_name_format: none
auditd_max_log_file_action: rotate
auditd_space_left: 75
auditd_space_left_action: syslog
auditd_verify_email: "yes"
auditd_action_mail_acct: root
auditd_admin_space_left: 50
auditd_admin_space_left_action: suspend
auditd_disk_full_action: suspend
auditd_disk_error_action: suspend
auditd_use_libwrap: "yes"
auditd_tcp_listen_queue: 5
auditd_tcp_max_per_addr: 1
auditd_tcp_client_max_idle: 0
auditd_enable_krb5: "no"
auditd_krb5_principal: auditd
auditd_distribute_network: "no"
auditd_manage_rules: yes
auditd_default_arch: b64
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this above auditd.conf config file &lt;code&gt;auditd_local_events: "yes"&lt;/code&gt; entry is inportant, because it will define would auditd audit local system or not. So, change to &lt;code&gt;no&lt;/code&gt; or remove this part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-write-custom-system-audit-rules-on-ubuntu"&gt;
  &lt;/a&gt;
  How To Write Custom System Audit Rules on Ubuntu
&lt;/h2&gt;

&lt;p&gt;After all the configuration now time for write some rules for Auditd&lt;br&gt;
For viewing current set of audit rules using &lt;code&gt;auditctl -l&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo auditctl -l
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the first time it will show &lt;code&gt;no rules&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;no rules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, auditd's rules are written here &lt;code&gt;/etc/audit/rules.d/audit.rules&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# This file contains the auditctl rules that are loaded
# whenever the audit daemon is started via the initscripts.
# The rules are simply the parameters that would be passed
# to auditctl.

# First rule - delete all
-D

# Increase the buffers to survive stress events.
# Make this bigger for busy systems
-b 320

# Feel free to add below this line. See auditctl man page
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-audit-rules"&gt;
  &lt;/a&gt;
  Adding Audit Rules
&lt;/h2&gt;

&lt;p&gt;For adding auditd rules, we can use cli util for that but for simplicity i am using direct method, but update our &lt;code&gt;/etc/audit/rules.d/audit.rules&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-for-auditd-rulees"&gt;
  &lt;/a&gt;
  Syntax for Auditd rulees
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;auditctl -w path_to_file -p permissions -k key_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>Electron Adventures: Episode 66: Dynamic Rendering</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Tue, 28 Sep 2021 16:29:14 +0000</pubDate>
      <link>https://dev.to/taw/electron-adventures-episode-66-dynamic-rendering-4ih</link>
      <guid>https://dev.to/taw/electron-adventures-episode-66-dynamic-rendering-4ih</guid>
      <description>&lt;p&gt;In the previous episode we managed to significantly improve performance of creating rows, but it's not good enough. For a 16MB file, we still need to create 1M rows with 20M elements, each with some characters of formatted text.&lt;/p&gt;

&lt;p&gt;Considering that we'd only ever display a few kB on screen at once, this is a huge waste.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamic-rendering"&gt;
  &lt;/a&gt;
  Dynamic Rendering
&lt;/h3&gt;

&lt;p&gt;The idea is to calculate which rows are visible and which are not, and only display the visible ones. For everything else, just render a placeholder of the same size.&lt;/p&gt;

&lt;p&gt;This is far from the most performant way, as huge number of placeholders still take a while to generate and update, but it's already surprisingly effective.&lt;/p&gt;

&lt;p&gt;For this we'll do all the calculations ourselves, assuming every row has the same height and placeholder rows have identical height to fully displayed rows. There are many ways to handle more general case, using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;Intersection Observer API&lt;/a&gt;, but they'd be a lot more complex and potentially also slower.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-srcasciiviewsvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/AsciiView.svelte&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;But first, something I forgot to do in the previous episode, Ascii View needs to be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ascii&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;126&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;ascii&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;ascii&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;xB7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"ascii"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{ascii}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;.ascii&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-srcslicesvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/Slice.svelte&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Slice&lt;/code&gt; component can render either the real thing or a placeholder. It's controlled by &lt;code&gt;visible&lt;/code&gt; prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;printf&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fast-printf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AsciiSlice&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./AsciiSlice.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;visible&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {#if visible}
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"offset"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{printf("%06d", offset)}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hex"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      {#each {length: 16} as _, i}
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;data-offset=&lt;/span&gt;&lt;span class="s"&gt;{offset&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          {data[i] !== undefined ? printf("%02x", data[i]) : "  "}
        &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      {/each}
    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;AsciiSlice&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {:else}
    &lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;
  {/if}
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;.row&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;even&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#555&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.offset&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.75em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.hex&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.75em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-srcmainviewsvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/MainView.svelte&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;There's a few things we need to do.&lt;/p&gt;

&lt;p&gt;First, let's save the main node, and some properties with range of visible components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;lastVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second, we need to pass the correct &lt;code&gt;visible&lt;/code&gt; flag to the slices. We also need &lt;code&gt;use:&lt;/code&gt; callback to initialize &lt;code&gt;main&lt;/code&gt; variable, and some callbacks to update &lt;code&gt;firstVisible&lt;/code&gt; and &lt;code&gt;lastVisible&lt;/code&gt; variables on &lt;code&gt;scroll&lt;/code&gt; and &lt;code&gt;resize&lt;/code&gt; events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;
  &lt;span class="na"&gt;on:mouseover=&lt;/span&gt;&lt;span class="s"&gt;{onmouseover}&lt;/span&gt;
  &lt;span class="na"&gt;on:scroll=&lt;/span&gt;&lt;span class="s"&gt;{setVisible}&lt;/span&gt;
  &lt;span class="na"&gt;use:init&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {#each slices as slice, i}
    &lt;span class="nt"&gt;&amp;lt;Slice&lt;/span&gt; &lt;span class="err"&gt;{...&lt;/span&gt;&lt;span class="na"&gt;slice&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;visible=&lt;/span&gt;&lt;span class="s"&gt;{i&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;= firstVisible &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="na"&gt;lastVisible&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {/each}
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally a simple calculation which rows are visible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rowHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;slices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
    &lt;span class="nx"&gt;firstVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;rowHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;lastVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;rowHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;
    &lt;span class="nx"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-well-it-works"&gt;
  &lt;/a&gt;
  How well it works?
&lt;/h3&gt;

&lt;p&gt;It correctly handles scrolling, and resizing window. Somehow it even handles Cmd+Plus and Cmd+Minus shortcuts for changing font size as they issue &lt;code&gt;scroll&lt;/code&gt; event.&lt;/p&gt;

&lt;p&gt;As scrolling event is heavily throttled, it actually takes a while during scrolling to render rows. This isn't great, and browser doesn't have any kind of &lt;code&gt;scrollstart&lt;/code&gt; event. We could emulate it with creative use of &lt;code&gt;requestAnimationFrame&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Or we could just display 100 rows on each side of the visible part to&lt;/p&gt;

&lt;p&gt;However even this absolutely simplest approach works quite well already!&lt;/p&gt;

&lt;p&gt;And of course, the performance! 1MB file loads in ~2s, down from 42s we originally had.&lt;/p&gt;

&lt;p&gt;This isn't amazing, as we'd like to be able to comfortably deal with 100MB+ files, but we have easy way ahead - just group rows into 100-row chunks and conditionally display or not display those.&lt;/p&gt;

&lt;p&gt;We could also have no placeholders of any kind, and put big &lt;code&gt;height&lt;/code&gt; on it, and just &lt;code&gt;position:&lt;/code&gt; each displayed row &lt;code&gt;absolute&lt;/code&gt;ly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;Here's the results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vfpqiSvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p17guyo3kv6zga63qimy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vfpqiSvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p17guyo3kv6zga63qimy.png" alt="Episode 66 Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we fixed performance we can do the long promised file loading, but first I want to do a detour and try another framework you've probably never heard of.&lt;/p&gt;

&lt;p&gt;As usual, &lt;a href="https://github.com/taw/electron-adventures/tree/master/episode-66-dynamic-rendering"&gt;all the code for the episode is here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>electron</category>
      <category>svelte</category>
    </item>
    <item>
      <title>The cost and benefit of synchronous replication in PostgreSQL and YugabyteDB</title>
      <author>Franck Pachot</author>
      <pubDate>Tue, 28 Sep 2021 16:25:56 +0000</pubDate>
      <link>https://dev.to/yugabyte/the-cost-and-benefit-of-synchronous-replication-in-postgresql-and-yugabytedb-2ej0</link>
      <guid>https://dev.to/yugabyte/the-cost-and-benefit-of-synchronous-replication-in-postgresql-and-yugabytedb-2ej0</guid>
      <description>&lt;p&gt;I have seen a people comparing YugabyteDB and PostgreSQL, and surprised by the different throughput when running a simple test on a from a single session. The purpose of a distributed database is to scale out. When running on a single node without the need for High-Availability-without-data-loss (this is a tautology), a monolith database will always perform with lower latency. Because a distributed DB is designed to ensure the persistence (the D in ACID) though RPC (remote procedure calls) rather than local writes.&lt;/p&gt;

&lt;p&gt;Here is a simple workload:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;drop&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="k"&gt;exists&lt;/span&gt; &lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="nb"&gt;timestamp&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;clock_timestamp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;timing&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;

&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="err"&gt;$$&lt;/span&gt; 
 &lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="k"&gt;truncate&lt;/span&gt; &lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;e4&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;
   &lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
 &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;select&lt;/span&gt;
 &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epoch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="k"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;"rows/s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="k"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;"duration"&lt;/span&gt;
 &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#yugabytedb"&gt;
  &lt;/a&gt;
  YugabyteDB
&lt;/h2&gt;

&lt;p&gt;Here is the run in the current production (stable) release, a RF=3 with all nodes on the same VM (for this test, in order to be independent on network latency, you don't do that in production):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[postgres@yb0 ~]$ psql -p 5433

yugabyte=# select version();
                                                  version
------------------------------------------------------------------------------------------------------------
 PostgreSQL 11.2-YB-2.6.1.0-b0 on x86_64-pc-linux-gnu, compiled by gcc (Homebrew gcc 5.5.0_4) 5.5.0, 64-bit

yugabyte=# do $$ begin truncate demo; for i in 1..1e4 loop insert into demo(i) values(i); commit; end loop; end; $$;
DO
Time: 37130.036 ms (00:37.130)

yugabyte=# select count(*)/extract(epoch from max(t)-min(t)) "rows/s",count(*),max(t)-min(t) "duration" from demo;

      rows/s      | count |    duration
------------------+-------+-----------------
 270.115078207229 | 10000 | 00:00:37.021258
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The number by itself is not important. It is a lab on one VM but I'll run everything in the same machine to compare the thoughput.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#postgresql-no-ha"&gt;
  &lt;/a&gt;
  PostgreSQL no HA
&lt;/h2&gt;

&lt;p&gt;I'm starting PostgreSQL on the same server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/usr/pgsql-13/bin/initdb &lt;span class="nt"&gt;-D&lt;/span&gt; /var/tmp/pgdata
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"port=5432"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /var/tmp/pgdata/postgresql.conf
/usr/pgsql-13/bin/pg_ctl &lt;span class="nt"&gt;-D&lt;/span&gt; /var/tmp/pgdata &lt;span class="nt"&gt;-l&lt;/span&gt; logfile start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And run the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[postgres@yb0 ~]$ psql -p 5432

postgres=# select version();

                                                version
-------------------------------------------------------------------------------------------------------------
 PostgreSQL 13.4 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 8.4.1 20200928 (Red Hat 8.4.1-1), 64-bit

postgres=# do $$ begin truncate demo; for i in 1..1e4 loop insert into demo(i) values(i); commit; end loop; end; $$;
DO
Time: 5533.086 ms (00:05.533)

postgres=# select count(*)/extract(epoch from max(t)-min(t)) "rows/s",count(*),max(t)-min(t) "duration" from demo;

       rows/s       | count |    duration
-------------------------+-------+-----------------
 1809.0359900474075 | 10000 | 00:00:05.527806
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what make you think that PostgreSQL is faster. Yes there is a 1:7 factor here in transactions per second.&lt;/p&gt;

&lt;p&gt;But we are comparing apples and oranges in term of resilience. YugabyteDB was running with Replication Factor RF=3 so that each write is propagated to a quorum of 2 out of 3 replicas. In a Yugabyte cluster with RF=3, you can kill a node and:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2/3 of reads and writes continue to operate as if nothing happens. Thanks to the sharding of tables into tablets.&lt;/li&gt;
&lt;li&gt;1/3 of reads and writes, those which had their leader on the dead node, have to wait a few seconds to get one of the followers, on the surviving nodes, to be elected new leader (Raft protocol)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And all continues because we have the quorum. And all is consistent. And no committed transaction has been lost. The only consequence is that, until the first node is back, or a new node added, loosing a second node will stop the database. Still with no data loss. But RF=3 can tolerate only one node down, by definition.&lt;/p&gt;

&lt;p&gt;This protection involves remote procedure calls. Let's see how PostgreSQL would behave with some higher availability&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#postgresql-with-standby"&gt;
  &lt;/a&gt;
  PostgreSQL with standby
&lt;/h1&gt;

&lt;p&gt;I'll add two standby databases to my PostgreSQL cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/usr/pgsql-13/bin/pg_basebackup &lt;span class="nt"&gt;-p&lt;/span&gt; 5432 &lt;span class="nt"&gt;-D&lt;/span&gt; /var/tmp/pgsby1 &lt;span class="nt"&gt;-R&lt;/span&gt; &lt;span class="nt"&gt;--slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sby1 &lt;span class="nt"&gt;-C&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"port=5441"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /var/tmp/pgsby1/postgresql.conf
&lt;span class="nb"&gt;touch&lt;/span&gt; /var/tmp/pgsby1/recovery.signal
/usr/pgsql-13/bin/pg_ctl &lt;span class="nt"&gt;-D&lt;/span&gt; /var/tmp/pgsby1 &lt;span class="nt"&gt;-l&lt;/span&gt; logfile start

/usr/pgsql-13/bin/pg_basebackup &lt;span class="nt"&gt;-p&lt;/span&gt; 5432 &lt;span class="nt"&gt;-D&lt;/span&gt; /var/tmp/pgsby2 &lt;span class="nt"&gt;-R&lt;/span&gt; &lt;span class="nt"&gt;--slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sby2 &lt;span class="nt"&gt;-C&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"port=5442"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /var/tmp/pgsby2/postgresql.conf
&lt;span class="nb"&gt;touch&lt;/span&gt; /var/tmp/pgsby2/recovery.signal
/usr/pgsql-13/bin/pg_ctl &lt;span class="nt"&gt;-D&lt;/span&gt; /var/tmp/pgsby2 &lt;span class="nt"&gt;-l&lt;/span&gt; logfile start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here they are visible from the primary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[postgres@yb0 ~]$ psql -p 5432 -c "select * from pg_replication_slots"
 slot_name | plugin | slot_type | datoid | database | temporary | active | active_pid | xmin | catalog_xmin | restart_lsn | confirmed_flush_lsn | wal_status | safe_wal_size
----------------+--------+-----------+--------+----------+-----------+--------+------------+------+--------------+-------------+---------------------+------------+---------------
 sby1      |        | physical  |        |          | f         | t      |     298963 |      |              | 0/5000060   |                     | reserved   |
 sby2      |        | physical  |        |          | f         | t      |     299054 |      |              | 0/5000060   |                     | reserved   |
(2 rows)

[postgres@yb0 ~]$ psql -p 5432 -c "select * from pg_stat_replication"
  pid   | usesysid | usename  | application_name | client_addr | client_hostname | client_port |         backend_start         | backend_xmin |   state   | sent_lsn  | write_lsn | flush_lsn | replay_lsn | write_lag | flush_lag | replay_la
g | sync_priority | sync_state |          reply_time
-------------+----------+----------+------------------+-------------+-----------------+-------------+-------------------------------+--------------+-----------+-----------+-----------+-----------+------------+-----------+-----------+----------
--+---------------+------------+-------------------------------
 298963 |       10 | postgres | walreceiver      |             |                 |          -1 | 2021-09-28 13:03:45.30363+00  |              | streaming | 0/5000060 | 0/5000060 | 0/5000060 | 0/5000060  |           |           |
  |             0 | async      | 2021-09-28 13:04:23.662693+00
 299054 |       10 | postgres | walreceiver      |             |                 |          -1 | 2021-09-28 13:03:48.668362+00 |              | streaming | 0/5000060 | 0/5000060 | 0/5000060 | 0/5000060  |           |           |
  |             0 | async      | 2021-09-28 13:04:23.663322+00
(2 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those are two asynchronous standbys receiving the streamed WAL.&lt;/p&gt;

&lt;p&gt;I run the same mini-workload:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postgres=# do $$ begin truncate demo; for i in 1..1e4 loop insert into demo(i) values(i); commit; end loop; end; $$;
select count(*)/extract(epoch from max(t)-min(t)) "rows/s",count(*),max(t)-min(t) "duration" from demo;
DO
Time: 6437.456 ms (00:06.437)

postgres=# select count(*)/extract(epoch from max(t)-min(t)) "rows/s",count(*),max(t)-min(t) "duration" from demo;

       rows/s       | count |    duration
-------------------------+-------+-----------------
 1554.5772428235664 | 10000 | 00:00:06.432617
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is still quite fast. But is this High Availability? Not at all. Yes in case of total failure of the primary database, I don't need to restore a backup and can failover to one of the standby databases. But:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I'll lose some committed transactions because I'm in ASYNC replication. Recovery Point Objective is RPO&amp;gt;0&lt;/li&gt;
&lt;li&gt;Because of the preceding, this cannot be automated. You need a human decision to evaluate the risk of data loss, and the probability to get the failed primary site back at least to get the WAL with the latest transactions, before opening the standby. Human decision means, in practice, a Recovery Time Objective in minutes or hours: RTO&amp;gt;0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This cannot be compared with YugabyteDB replication where all is automated within seconds, without data loss.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#postgresql-with-synchronous-standby"&gt;
  &lt;/a&gt;
  PostgreSQL with synchronous standby
&lt;/h1&gt;

&lt;p&gt;We can reduce the RPO with synchronous replication:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"synchronous_standby_names = '*'"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /var/tmp/pgdata/postgresql.conf
/usr/pgsql-13/bin/pg_ctl &lt;span class="nt"&gt;-D&lt;/span&gt; /var/tmp/pgdata reload
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This configuration ensures that one standby received the WAL to cover the transaction before we return a successful commit to the user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[postgres@yb0 ~]$ psql -p 5432 -c "select * from pg_stat_replication"

  pid   | usesysid | usename  | application_name | client_addr | client_hostname | client_port |         backend_start         | backend_xmin |   state   | sent_lsn  | write_lsn | flush_lsn | replay_lsn | write_lag | flush_lag | replay_la
g | sync_priority | sync_state |          reply_time
-------------+----------+----------+------------------+-------------+-----------------+-------------+-------------------------------+--------------+-----------+-----------+-----------+-----------+------------+-----------+-----------+----------
--+---------------+------------+-------------------------------

 298963 |       10 | postgres | walreceiver      |             |                 |          -1 | 2021-09-28 13:03:45.30363+00  |              | streaming | 0/538E3F0 | 0/538E3F0 | 0/538E3F0 | 0/538E3F0  |           |           |
  |             1 | sync       | 2021-09-28 13:14:12.307231+00
 299054 |       10 | postgres | walreceiver      |             |                 |          -1 | 2021-09-28 13:03:48.668362+00 |              | streaming | 0/538E3F0 | 0/538E3F0 | 0/538E3F0 | 0/538E3F0  |           |           |
  |             1 | potential  | 2021-09-28 13:14:12.307294+00
(
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if I run my small workload again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postgres=# do $$ begin truncate demo; for i in 1..1e4 loop insert into demo(i) values(i); commit; end loop; end; $$;
DO
Time: 13613.487 ms (00:13.613)

postgres=# select count(*)/extract(epoch from max(t)-min(t)) "rows/s",count(*),max(t)-min(t) "duration" from demo;

      rows/s      | count |    duration
-----------------------+-------+-----------------
 734.861683966413 | 10000 | 00:00:13.608003
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The throughput has been divided by two.&lt;/p&gt;

&lt;p&gt;Are we in High Availability here? This SYNC configuration requires complex monitoring and management. Because, even in sync, the persistence of WAL does not happen at the same time: first written and (fsync'd) then send (and acknowledged) to the standby, then returning "commit successful" to the user. There is no two-phase commit here. This is very different, in case of failure, from a consensus protocol as we can find in a distributed database. PostgreSQL databases are often used with ASYNC, and this is a very good DR (Disaster Recovery) solution where the data loss is minimal after a manual failover. SYNC replication is possible, but doesn't qualify as the same High Availability than distributed databases.&lt;/p&gt;

&lt;p&gt;The numbers are not important here. They will depend on your machine and your network. Distributed databases can be in sync in a multi-AZ cluster, even multi-region. The point is that the thoughput is lower for a single session. But, because all nodes are active, this scales-out when having multiple sessions load-balanced over all nodes. You cannot do that with PostgreSQL standby that are read only.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#yugabytedb-scaleout"&gt;
  &lt;/a&gt;
  YugabyteDB scale-out
&lt;/h1&gt;

&lt;p&gt;I'm adding a "j" column for job number in my table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;drop&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="k"&gt;exists&lt;/span&gt; &lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="nb"&gt;timestamp&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;clock_timestamp&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
 &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And run 3 parallel jobs doing the same inserts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;for &lt;/span&gt;i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;0..2&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
&lt;/span&gt;psql &lt;span class="nt"&gt;-h&lt;/span&gt; yb&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 5433 &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'do $$ begin for i in 1..1e4 loop insert into demo(j,i) values('&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s1"&gt;',i); commit; end loop; end; $$ ; '&lt;/span&gt; &amp;amp;
&lt;span class="k"&gt;done&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;wait&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postgres=# select j, count(*)/extract(epoch from max(t)-min(t)) "rows/s",count(*),max(t)-min(t) "duration"
           from demo group by j;

 j |      rows/s      | count |    duration
--------+------------------+-------+-----------------
 0 | 181.329577731828 | 10000 | 00:00:55.148201
 2 | 180.088033513951 | 10000 | 00:00:55.528398
 1 | 188.044672569376 | 10000 | 00:00:53.178853
(3 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With my 3 concurrent sessions I have inserted at 550 transaction per second. Again, this is a small lab. While single session short transaction have limited rate because of the distributed nature of commits, it can scale to many nodes. If you stay on one VM without synchronous replication to another site, PostgreSQL will be faster. Where distributed databases show all their power is when you add nodes, for high availability and load balance, without adding complexity because all the distributed protocol is already there.&lt;/p&gt;

&lt;p&gt;There are additional things that you can't see in this short test. PostgreSQL cannot sustain those inserts indefinitely. The shared buffers are filling, checkpoint will occur, the filesystem cache will be synced to disk. And the most important: at some point you will need to VACUUM the table before the transaction id wraps around, or the database will hang. The first minutes of insert are very optimistic in PostgreSQL, which is fine with short peaks of activity.&lt;/p&gt;

&lt;p&gt;Note that I've written something similar in the past about &lt;a href="https://dev.to/aws-heroes/aws-aurora-vs-rds-postgresql-on-frequent-commits-27c6"&gt;RDS PostgreSQL vs. Aurora&lt;/a&gt;. Even if both cannot scale out the writes, the HA in Aurora relies on remote WAL sync.&lt;/p&gt;

&lt;p&gt;Too many parameters to consider? Don't panic. Because YugabyteDB has the same API as PostgreSQL - it uses the same SQL and PL/pgSQL layer and similar open source license - you are not locked in your initial decision. You can start with PostgreSQL and scale with YugabyteDB, or vice-versa.&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>yugabyte</category>
      <category>database</category>
      <category>ha</category>
    </item>
    <item>
      <title>Object-Oriented Programming in C++: Access Modifiers</title>
      <author>Meet Gor</author>
      <pubDate>Tue, 28 Sep 2021 16:25:18 +0000</pubDate>
      <link>https://dev.to/mr_destructive/object-oriented-programming-in-c-access-modifiers-22j0</link>
      <guid>https://dev.to/mr_destructive/object-oriented-programming-in-c-access-modifiers-22j0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Moving on to Part 2 of Object-Oriented Programming in C++, we will look into the concept of access modifiers which we skipped in the first section. This won't be a comprehensive guide on access modifiers as it requires some other concepts like &lt;code&gt;Inheritance&lt;/code&gt; which we will introduce in the next few sections. This series will be like connecting the pieces of OOP together and building a good foundation.  &lt;/p&gt;

&lt;p&gt;In this part, we will discuss the access modifiers and their related concepts. The below is a gist of what will be cob\verd in this part. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understanding Access Modifiers&lt;/li&gt;
&lt;li&gt;Type of Access Modifiers

&lt;ol&gt;
&lt;li&gt;Private

&lt;ul&gt;
&lt;li&gt;Getters &lt;/li&gt;
&lt;li&gt;Setters&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Public&lt;/li&gt;
&lt;li&gt;Protected

&lt;ul&gt;
&lt;li&gt;Introduction to Derived and Friend classes&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without wasting any time, let's roll in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-access-modifiers"&gt;
  &lt;/a&gt;
  What are Access Modifiers
&lt;/h2&gt;

&lt;p&gt;Access Modifiers as the name suggests they are used to change the accessibility of properties and methods in a Class. That means if we want a certain scope of our code to access the class members we can specify that using &lt;code&gt;access modifiers&lt;/code&gt;. Access Modifiers form the basics or the pillar for &lt;code&gt;Data Encapsulation&lt;/code&gt; in OOP.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-encapsulation"&gt;
  &lt;/a&gt;
  Data Encapsulation
&lt;/h3&gt;

&lt;p&gt;Data Encapsulation is terminology in OOP to keep all the components in a single entity or unit. Here the components are &lt;code&gt;properties&lt;/code&gt; and &lt;code&gt;methods&lt;/code&gt; and they are contained in a single unit called &lt;code&gt;Class&lt;/code&gt;.  We need to carefully use the class members i.e. properties and methods in order to avoid security and limiting certain members to be available for a specific scope or block of code.&lt;/p&gt;

&lt;p&gt;Hence, the Encapsulation of class members helps in structuring the class in a secure and allows access in a particular expected way. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-access-modifiers-in-c"&gt;
  &lt;/a&gt;
  Types of Access Modifiers in C++
&lt;/h2&gt;

&lt;p&gt;We do have certain modifiers or limiters for accessing class members in C++. We can either keep the class members limited to the class itself (and friend class), keep them open to the global scope, or restrict them to certain classes only(derived and friend classes). &lt;/p&gt;

&lt;p&gt;Let's discuss them one by one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private"&gt;
  &lt;/a&gt;
  Private
&lt;/h3&gt;

&lt;p&gt;This access modifier allows us to access the class members only to the class methods and the friend functions and classes. We will discuss what friend classes are in the next few parts of the series. This restricts the usage of the class members directly from the main function or other scopes in our program. You can use &lt;code&gt;private:&lt;/code&gt; to indicate the below declared properties and methods are private to the class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Name
{ 
    private:
        int name;
        //other properties and methods
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR (don't specify anything it &lt;strong&gt;is private by default&lt;/strong&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Name
{ 
    int name;
    //other properties and methods
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is assigned to every member of the class by default. So that is why we explicitly told to make it public in an example in the previous part of the series. Let's see what happens if we do not make it public.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

class Animal{
    int legs;
    string name;
    void print()
    {
        cout&amp;lt;&amp;lt;name&amp;lt;&amp;lt;" has "&amp;lt;&amp;lt;legs&amp;lt;&amp;lt;" legs.\n";
    }
};

int main()
{

    Animal dog;
    dog.name="Floyd";
    dog.legs=4;
    dog.print();

    return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--egF3QT-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631940306089/l4zOKB-RY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--egF3QT-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631940306089/l4zOKB-RY.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see we cannot directly use those properties and methods which are set as private. It is a convention to keep properties private and create public methods to access those from the rest of the program. The public methods used to access and modify the value of the private properties are called &lt;code&gt;getters&lt;/code&gt; and &lt;code&gt;setters&lt;/code&gt; respectively.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#getters"&gt;
  &lt;/a&gt;
  Getters
&lt;/h4&gt;

&lt;p&gt;Getters are the public methods of a class that are used to access a value to the private properties of that class. It is a function that returns the data of that particular property. We access the function as normally as we access the public functions.&lt;/p&gt;

&lt;p&gt;We define the getter function as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;datatype getpropertyname()
{
    return propertyname;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can access the getter function as a normal public function, but this function returns a value, so we can store it in a variable and do all sorts of things.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;classname objname;
court&amp;lt;&amp;lt;objname.getpropertyname()&amp;lt;&amp;lt;endl;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#setters"&gt;
  &lt;/a&gt;
  Setters
&lt;/h4&gt;

&lt;p&gt;Setters are the public methods of a class that are used to assign/modify the value of the private properties of that class. It is a function that simply assigns the private properties to data of the data which is passed in as an argument to the function. We access the function as normally as we access the public functions. We have to pass in the value to assign the property to the function.&lt;/p&gt;

&lt;p&gt;We define the setter function as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;datatype setpropertyname(datatype x)
{
    propertyname = x;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can access the setter function as a normal public function, but this function takes in a parameter, so need to pass in the value to assign it the same as the correspondent data type of that property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;classname objname;
objname.setpropertyname(data);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, after applying the getter and setter concept to our example, we can use them and make the properties private without any issues.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

class Animal{
    int legs;
    string name;
    public:

    // take in a parameter of type same as of the property 
    void setName(string dogname)   
    {
        name=dogname; 
        // assign the property a value same as of the parameter       
    }

    // return type should be same as of the property 
    string getName()   
    {
        return name;
    }

    void setleg(int noflegs)
    {
        legs=noflegs;
    }

    int getleg()
    {
        return legs;
    }
};

int main()
{
    Animal dog;
    dog.setName("Flyod");
    dog.setleg(4);
    cout&amp;lt;&amp;lt;dog.getName()&amp;lt;&amp;lt;endl;
    cout&amp;lt;&amp;lt;dog.getleg()&amp;lt;&amp;lt;endl;

    return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPRYe7EB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631949135706/zVd5cMPKa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPRYe7EB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631949135706/zVd5cMPKa.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uQU5d0aN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631956955383/MKp5YDMv5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uQU5d0aN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631956955383/MKp5YDMv5.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above code runs successfully, and hence we make our program more secure and provide limited access to the rest of the components. You can see how we have passed the data as the parameter to the setter function, it should be the appropriate data-type with the property you are trying to set and also the same return type for the getter function.&lt;/p&gt;

&lt;p&gt;The code is also much readable and structured for others to read and understand. It might seem a silly thing but it really improves the maintainability in the longer run. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#public"&gt;
  &lt;/a&gt;
  Public
&lt;/h3&gt;

&lt;p&gt;This might be familiar till now, we have been using this access modifier till now and it is quite straightforward to understand. We have created the getter and setter function using this access modifier.&lt;/p&gt;

&lt;p&gt;So, the &lt;code&gt;public&lt;/code&gt; access modifier makes the class members be accessible anywhere in the program. This might be OK for many small applications but it is not ideal to use them for production-level applications as it might cause undesired consequences i.e. BUGS.&lt;/p&gt;

&lt;p&gt;We need to explicitly write public in the class definition, as &lt;code&gt;private&lt;/code&gt; is set by default. So, as a simple example, as we saw in the previous part, it can be a lot easier to go with the public to understand OOP but the main OOP really shines in aspects like Encapsulation and Inheritance of Classes, which we will surely see in the upcoming parts.&lt;/p&gt;

&lt;p&gt;This is the example from the previous part:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

class Animal
{
    public:
        int legs;
        string name;
        void print()
        {
            cout&amp;lt;&amp;lt;name&amp;lt;&amp;lt;" has "&amp;lt;&amp;lt;legs&amp;lt;&amp;lt;" legs.\n";
        }
};

int main()
{
    Animal dog;            // create an object of class Animal

    dog.name="Floyd";     // assign the class property to actual data in memory
    dog.legs=4;                 
    dog.print();          // call a method(function) associated to object's class

    return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tFu4oUO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631795000896/kUvcfVU7Y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tFu4oUO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631795000896/kUvcfVU7Y.png" alt="public-class"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--51Z7Gcid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631958067712/yU8uvd5KQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--51Z7Gcid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631958067712/yU8uvd5KQ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As explained earlier, it is accessible to the main function or other scopes as well. We can access them using the dot separator(&lt;code&gt;.&lt;/code&gt;) to assign it or to call the method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#protected"&gt;
  &lt;/a&gt;
  Protected
&lt;/h3&gt;

&lt;p&gt;This is quite a handy access modifier, as it allows us to have the flexibility to keep the class members private and accessible to its derived or friend class. We will see the derived and friend classes in the next few parts. But for now, let's understand in an abstracted way.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#derived-classchild-class-sub-class"&gt;
  &lt;/a&gt;
  Derived Class(Child Class/ Sub Class)
&lt;/h4&gt;

&lt;p&gt;This is a concept in Inheritance, i.e. to pass the members of a class to another. So, there has to be two classes, the main(parent class) and another class that will inherit or take in the members from the parent class. So, the derived class has access to its public and protected members only.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#friend-class"&gt;
  &lt;/a&gt;
  Friend class
&lt;/h4&gt;

&lt;p&gt;A friend class is a class that is allowed to access its &lt;strong&gt;private&lt;/strong&gt; and protected properties or methods. It is kind of a special tag assigned to a class that it can access certain class' members. We will see it in detail afterward, right now, it's enough to understand, friend class is a class that can access a particular class' members may it be private or protected. &lt;/p&gt;

&lt;p&gt;The difference between a friend and a derived class is that a friend class can access the private members of the class to which it is a friend, but a derived class can't. Friend class also can't be inherited. Again, we will see this is in detail. &lt;/p&gt;

&lt;p&gt;So, it doesn't make sense for me to explain protected here. But just assume friend classes and derived classes are a thing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

class Animal
{
    public:
        int legs;
        string type;

        void print()
        {
            cout&amp;lt;&amp;lt;type&amp;lt;&amp;lt;" has "&amp;lt;&amp;lt;legs&amp;lt;&amp;lt;" legs.\n";
        }

    protected:
        string name;
};


int main()
{

    Animal dog;
    dog.type="dog";
    dog.legs=4;
    dog.name="Floyd";
    dog.print();

    return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aeZus3OJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631956345308/epOckpl6X.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aeZus3OJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631956345308/epOckpl6X.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This gives an error as protected members can be accessed only by derived or friend classes since we are accessing it from the main function, it's not allowed in the global scope. We can only access the protected members from the derived or friend classes. &lt;/p&gt;

&lt;p&gt;So, let's derive a class from the base class(Animal), and after that, we can see protected members in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

class Animal
{
    public:
        int legs;
        string type;

        void print()
        {
            cout&amp;lt;&amp;lt;type&amp;lt;&amp;lt;" has "&amp;lt;&amp;lt;legs&amp;lt;&amp;lt;" legs.\n";
        }

    protected:
        string name;
};

class Pet:public Animal 
{
    public:
        void print()
        {
            name="Floyd";
            cout&amp;lt;&amp;lt;name&amp;lt;&amp;lt;" is a "&amp;lt;&amp;lt;type&amp;lt;&amp;lt;endl;
            cout&amp;lt;&amp;lt;type&amp;lt;&amp;lt;" has "&amp;lt;&amp;lt;legs&amp;lt;&amp;lt;" legs.\n";
        }

};

int main()
{

    Pet dog;
    dog.type="dog";
    dog.legs=4;
    dog.print();

    return 0;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LSbuJ5HS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631956708698/HJTOZN9sw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LSbuJ5HS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631956708698/HJTOZN9sw.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1KILSqND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631956815750/a2y5QLiPT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1KILSqND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631956815750/a2y5QLiPT.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have accessed the protected property &lt;code&gt;name&lt;/code&gt; in the derived class &lt;code&gt;Pet&lt;/code&gt;. Yes, this is how we derive a class in C++,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// A child class serived from base class
class NewClassName: public BaseClassName
{
     // properties and methods
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, after deriving the &lt;code&gt;Pet&lt;/code&gt; class from &lt;code&gt;Animal&lt;/code&gt; class, we have access to its public and protected class as well. We simply assigned one of the protected members from its base class i.e. &lt;code&gt;name&lt;/code&gt; and used it in the function &lt;code&gt;print&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This is how you can use protected members in a derived class, also you can do it in friend class, but we will look at that in a separate part. Remember you can &lt;strong&gt;use getters and setters as well to assign and access those protected members&lt;/strong&gt;.  Keeping it simple and easy to understand is what a protected access modifier can provide. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Protected access modifiers are quite great and provide much more flexibility than &lt;code&gt;private&lt;/code&gt; and more privacy than &lt;code&gt;public&lt;/code&gt; access modifiers.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-to-use-when"&gt;
  &lt;/a&gt;
  Which to use when?
&lt;/h2&gt;

&lt;p&gt;It is often a good practice to use private members, but it might be not possible to make everything private, so we can use certain properties as private, some methods as public and protected as well as per requirement and complexity. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YqGHtW7L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631953460021/_4WlLGDI_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YqGHtW7L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631953460021/_4WlLGDI_.png" alt="acmod.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at the above chart, you can analyze your problem and work a way around to find the perfect secure match for your application. &lt;/p&gt;

&lt;p&gt;Rember to use public members only when you have to explicitly use through the program. If you find that, this member shouldn't be introduced in certain scope then use make it private or protected.&lt;/p&gt;

&lt;p&gt;If there is some kind of hierarchy in the program and its components, analyze and make a structure of it to have a better understanding of the program flow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So, from this part, we were able to understand the access modifiers and got somewhat of a dive into Inheritance. There were some concepts like Friend and Derived classes, Inheritance, Encapsulation which were just explained in short, but they are a topic that deserves separate attention. We'll discuss them in the upcoming parts.&lt;/p&gt;

&lt;p&gt;Thanks for reading. Hope you understood the concepts in a better way. Until then, as always, Happy Coding :)&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>oop</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
