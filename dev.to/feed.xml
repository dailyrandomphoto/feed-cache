<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>7 Best Tools For Developers - They Can't Live Without It</title>
      <author>Gyan</author>
      <pubDate>Sat, 09 Oct 2021 10:33:34 +0000</pubDate>
      <link>https://dev.to/gw78ah/7-best-tools-for-developers-they-can-t-live-without-it-1cb4</link>
      <guid>https://dev.to/gw78ah/7-best-tools-for-developers-they-can-t-live-without-it-1cb4</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;The&lt;/span&gt;&lt;span&gt;¬†&lt;/span&gt;&lt;b&gt;best tools for developers¬†&lt;/b&gt;&lt;span&gt;are a priority for them to work. As a developer, he always works with code editors, browsers, terminals, etc. to improve his productivity. VS Code is one of the best editors, every developer would like to work with it. I've also listed the&lt;/span&gt;&lt;span&gt;¬†&lt;/span&gt;VS Code extensions for JS¬†&lt;span&gt;that are useful for a developer. And browser extensions are also a great way to improve productivity and I've also listed&lt;/span&gt;&lt;span&gt;¬†&lt;/span&gt;&lt;b&gt;Chrome extensions for a developer&lt;/b&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;If you are a junior programmer, this will give you an idea the improve your coding skills, and if you are a senior developer, you are still learn something new from it. Extensions are one the¬†&lt;b&gt;best tools for developers.&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;span&gt;Let's see the best tools for developers.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/7-best-tools-for-developers-they-cant-live-without-it/"&gt;7 Best Tools For Developers - They Can't Live Without It&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>AI project For Beginners</title>
      <author>Gyan</author>
      <pubDate>Sat, 09 Oct 2021 10:19:08 +0000</pubDate>
      <link>https://dev.to/gw78ah/ai-project-for-beginners-2eg8</link>
      <guid>https://dev.to/gw78ah/ai-project-for-beginners-2eg8</guid>
      <description>&lt;p&gt;Artificial Intelligence has made a significant impact on our daily lives. Every time you scroll through social media, open Spotify, or do a quick Google search, you are using an application of AI. The AI industry has expanded massively in the past few years and is predicted to grow even further, reaching around 126 billion U.S. dollars by 2025. Multinational companies like IBM, Accenture, and Apple are actively hiring AI practitioners. The¬†median salary of an AI engineer¬†as of 2021 is $171, 715 that can go over $250,000.&lt;/p&gt;
&lt;p&gt;The field of AI is vast, and there are many areas within the industry that you can choose to specialise. Say , if you are intrigued by facial recognition systems and image generation, you can choose to work in the field of¬†computer vision.¬†If you‚Äôd like to build models that can converse with people and learn human language, you can work in the field of¬†NLP (Natural Language Processing).&lt;/p&gt;
&lt;p&gt;There is a lot of work being done today for the advancement of Artificial Intelligence. Companies need AI specialists who can build and deploy scalable models to meet growing industry demands. It isn‚Äôt tough to get started in the field of AI. While there is the complexity involved in¬†building machine learning models from scratch,¬†most AI jobs in the industry today don‚Äôt require you to know the math behind these models. Many companies require individuals who can build AI solutions, scale them, and deploy them for the end-user. Many high-level libraries and frameworks can help you do this without an in-depth knowledge of how the models work.¬†&lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/artificial-intelligence-project-for-beginners/"&gt;Artificial Intelligence Project For Beginners 2021&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 20 JavaScript tips and tricks to increase your Speed and Efficiency</title>
      <author>Gyan</author>
      <pubDate>Sat, 09 Oct 2021 10:18:19 +0000</pubDate>
      <link>https://dev.to/gw78ah/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-2ada</link>
      <guid>https://dev.to/gw78ah/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-2ada</guid>
      <description>&lt;p&gt;¬†&lt;/p&gt;
&lt;h3&gt;Convenient and useful techniques to reduce the lines of code and pace up your Dev Work!&lt;/h3&gt;
&lt;p&gt;In our daily tasks, we get to write functions such as sorting, searching, finding unique values, passing parameters, swapping values etc, so here I present my list of shorthand techniques to write all of them as a Pro!‚úåüèª&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;img alt="Increase Your Performance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftNfvGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;JavaScript is truly an awesome languageüíõ to learn and work with. And there can be more than one approach to reach to the same solution for given problem. In this article, we will discuss only the quickest ones.üöÄ&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;These approaches will definitely help you in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducing the number of LOC(lines of code),&lt;/li&gt;
&lt;li&gt;Coding Competitions,&lt;/li&gt;
&lt;li&gt;Hackathons or&lt;/li&gt;
&lt;li&gt;Other time bound tasks.‚è±&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these JavaScript Hacks uses techniques from ECMAScript6(ES2015) onwards, though the latest version is ECMAScript11(ES2020).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: All below tricks have been tested on the Console of Google Chrome.¬†&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/top-20-javascript-tips-and-tricks/"&gt;Top 20 JavaScript tips and tricks to increase your Speed and Efficiency¬†&lt;/a&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Creative Food Delivery Landing Page</title>
      <author>Adom Shafi</author>
      <pubDate>Sat, 09 Oct 2021 10:09:08 +0000</pubDate>
      <link>https://dev.to/adom_shafi_17/creative-food-delivery-landing-page-4e8l</link>
      <guid>https://dev.to/adom_shafi_17/creative-food-delivery-landing-page-4e8l</guid>
      <description>&lt;p&gt;Food Delivery Landing Page is a modern web template for your business. You can download the bootstrap file and launch your food delivery business easily.&lt;/p&gt;

&lt;p&gt;Full View - &lt;a href="https://bootstraptemplate.net/downloads/food-delivery-landing-page/"&gt;https://bootstraptemplate.net/downloads/food-delivery-landing-page/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get UI HUT Lifetime access and use "SOP10" for a 10% discount.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#webtemplate-webdesign"&gt;
  &lt;/a&gt;
  webtemplate #webdesign
&lt;/h1&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
      <category>devops</category>
    </item>
    <item>
      <title>Serverless Integration, Zero Code</title>
      <author>Michael Walmsley</author>
      <pubDate>Sat, 09 Oct 2021 10:03:40 +0000</pubDate>
      <link>https://dev.to/walmsles/serverless-integration-zero-code-3i39</link>
      <guid>https://dev.to/walmsles/serverless-integration-zero-code-3i39</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The words of Farah Campbell and Ben Kehoe on "The Serverless Mindset" has inspired me to level up my thinking and approach to Serverless integration. &lt;/p&gt;

&lt;p&gt;So let me share my journey to zero code integration with you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For my first foray into zero code integration, I decided to keep things simple and play with the classic integration pattern of sending data via an API into an SQS queue for downstream processing.  Most serverless websites will have you build an architecture like this, an API gateway triggering a Lambda that pushes to the SQS queue for downstream processing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pTgzSa0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upguplizspa6ubpucpxi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pTgzSa0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upguplizspa6ubpucpxi.jpg" alt="Simple Classic Lambda Integration Architecture (with code)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pattern is easy to build, deploy and get working with any of the main Serverless frameworks; my weapon of choice is the Serverless Framework from Serverless Inc.  The Serverless Framework focuses on deploying Lambda functions and makes this task quick and easy. For example, to build the Lambda processor pushing to SQS looks something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;sqs&lt;/span&gt;

&lt;span class="nx"&gt;frameworkVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;
  &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
  &lt;span class="nx"&gt;lambdaHashingVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20201221&lt;/span&gt;

&lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;apiPushSQS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api_push_sqs&lt;/span&gt;
    &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
          &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;THE_QUEUE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;Ref&lt;/span&gt; &lt;span class="nx"&gt;downstreamSQS&lt;/span&gt;

&lt;span class="nx"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="nx"&gt;downstreamSQS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;SQS&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Queue&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Building out the pattern is simple, and the framework focuses on Lambda functions and their events which makes building and deploying quick and easy.  I managed to do this in minutes and felt productive; the instant win had my endorphins flowing, and I was conquering it!  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But is this the ideal serverless solution?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am sure Ben Kehoe would say, "If you came along to my talk today to hear about Lambda, you are in the wrong place", and these words are echoing in my head right now as I write this and think how I can do this without code. &lt;/p&gt;

&lt;p&gt;We all know the AWS API Gateway supports direct, native integrations with many services, and I have designed many systems around these patterns. Still, I have never actually built one using the Serverless framework; until now.  &lt;/p&gt;

&lt;p&gt;To achieve direct integrations from API gateway to other Services involves understanding how to configure the Integration request, and there are choices as to how we can go about this.  I started by configuring the API via the console and followed one of the few blog articles I could find on this topic to set it up, which you can look at &lt;a href="https://medium.com/@pranaysankpal/aws-api-gateway-proxy-for-sqs-simple-queue-service-5b08fe18ce50"&gt;here&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;This article allowed me to see the steps I needed to complete:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the SQS Queue&lt;/li&gt;
&lt;li&gt;Create the IAM Policy allowing API Gateway to use the sqs:SendMessage action on my SQS Queue.&lt;/li&gt;
&lt;li&gt;Create the role to attach the policy to and enable API gateway to assume the role.&lt;/li&gt;
&lt;li&gt;Create the API and define a POST method that we can use to map the incoming request through to the SQS queue.&lt;/li&gt;
&lt;li&gt;Integrate the API resource with our SQS Queue and create an integration mapping template to transform the incoming payload for our forwarding request to the SQS service.&lt;/li&gt;
&lt;li&gt;Deploy and Test the API&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Continue with me on my journey to complete these steps and end up with the following architecture, which uses zero-code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8HbuuS8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbdv7d8fs489cyb533us.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8HbuuS8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbdv7d8fs489cyb533us.jpg" alt="Zero-Code Serverless.yml"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To achieve a zero-code solution, we need to learn about the native AWS language of Velocity Templates and understand how data flows through the API Gateway service.  As Ben and Farrah would say - writing code is easy, but being genuinely serverless takes work, and it's not always the work we want to do or is fun to do, but we need to challenge ourselves to leverage the cloud services and write less code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-api-gateway-data-flow-works"&gt;
  &lt;/a&gt;
  How the API Gateway Data flow works
&lt;/h2&gt;

&lt;p&gt;A quick high-level look at an API gateway request for a v1 REST API looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cl06kviF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/401fkrejoihzh0dibyvv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cl06kviF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/401fkrejoihzh0dibyvv.png" alt="AWS API Gateway Data Flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each client request goes through the following stages for a simple un-authenticated request:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Method Request &lt;/li&gt;
&lt;li&gt;Integration Request - where transformations occur for the integration request to SQS&lt;/li&gt;
&lt;li&gt;Backend Service (Simple Queue Service in this case)&lt;/li&gt;
&lt;li&gt;Integration Response - where transformations occur for the integration response from SQS&lt;/li&gt;
&lt;li&gt;Method Response - Mapping of integration Response to Method response for the client.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that we know the steps for the API request through the gateway, we can start setting this up using the Serverless framework because that's my current go-to for deploying serverless solutions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-sqs-queue"&gt;
  &lt;/a&gt;
  Create the SQS Queue
&lt;/h2&gt;

&lt;p&gt;Creating the SQS queue is the easiest part of this solution. First, add the following to the resources section of the serverless YAML file.  I prefer not to provide the QueueName when setting up SQS; this allows the serverless framework to name the resources using the usual naming standard of serviceName-stage-resourceName-randomString.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;sqsQueue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;SQS&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;Queue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-the-iam-policy-and-role"&gt;
  &lt;/a&gt;
  Create the IAM Policy and Role
&lt;/h2&gt;

&lt;p&gt;To create the IAM Role and Policy, we cannot use the standard IAM methods for the Serverless Framework since these focus on setting up IAM Roles and Policies for functions in your solution.  This time there are no functions or Lambdas at all!&lt;br&gt;
Add the role and policy details into the Serverless YAML file in the resources section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UWGCpcxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zc45qsy3wgn8pm7qweqh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWGCpcxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zc45qsy3wgn8pm7qweqh.png" alt="IAM Role and Policy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lines 23 - 34&lt;/strong&gt; enable API gateway to assume the role &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lines 35 - 44&lt;/strong&gt; define the actions allowed by the policy&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 44&lt;/strong&gt; uses Cloudformation intrinsic function !GetAtt to get the Arn of the SQS Queue we create in the stack.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-the-rest-api"&gt;
  &lt;/a&gt;
  Create the Rest API
&lt;/h2&gt;

&lt;p&gt;To create the Rest API, we need to create an AWS::Apigateway::Rest resource.  Usually, the Serverless Framework would make this for you under the covers as it creates functions triggered by HTTP events.  In the configuration for the RestApi, I have used &lt;code&gt;${self:custom.resourcePrefix}&lt;/code&gt; for the "Name", which is a variable I set up to use for the naming of Services throughout my Serverless YAML.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1xUHVrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pcsliy8zt4bmbo8229v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1xUHVrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pcsliy8zt4bmbo8229v.png" alt="Create AWS RestApi"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-the-api-resources-and-integrate-to-our-sqs"&gt;
  &lt;/a&gt;
  Create the API Resources and Integrate to our SQS
&lt;/h2&gt;

&lt;p&gt;We create the  API method using the "AWS::ApiGateway::Method" resource, which needs to look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5C4GWehL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmoe5x1iwlng85mvowst.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5C4GWehL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmoe5x1iwlng85mvowst.png" alt="AWS API Method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creating the API  method and integration is where all the work is in building out our zero-code solution and will break this down into the following steps for clarity:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the API Method and Responses (lines 60 - 70)&lt;/li&gt;
&lt;li&gt;Create the integration - the easy bits (lines 71 - 79)&lt;/li&gt;
&lt;li&gt;Create the Integration Request (lines 80 - 84)&lt;/li&gt;
&lt;li&gt;Create the Integration Response (lines 85 - 99)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#create-the-api-method"&gt;
  &lt;/a&gt;
  Create the API Method
&lt;/h3&gt;

&lt;p&gt;Creating the Method resource is the easy bit.  We set up the API Method on line 60 and Method responses on lines 64 - 69.  The HTTP status codes returned by the Integration response must be configured in the Method responses so that the API gateway will not throw an error and return an "HTTP 500 internal server error". &lt;/p&gt;

&lt;p&gt;On &lt;strong&gt;line 61&lt;/strong&gt;, we use "!GetAtt apiGw.RootResourceId" to obtain the actual Id for the RestApi.&lt;/p&gt;

&lt;p&gt;On &lt;strong&gt;line 62&lt;/strong&gt;, we use "!Ref apiGw" to retrieve the RestApiId for our REST API. &lt;/p&gt;

&lt;p&gt;We have to use these Cloudformation intrinsic functions here since we want the values after AWS has created them during the stack deployment.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-the-integration-the-easy-bits"&gt;
  &lt;/a&gt;
  Create the integration - the easy bits
&lt;/h3&gt;

&lt;p&gt;I will break this down by the lines to make it easier to follow and explain each step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 71&lt;/strong&gt; defines the HTTP Method API gateway will use when calling the Integration endpoint; in this case, we want to use POST since we are sending data to SQS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 72&lt;/strong&gt; defines the type of integration; in this case, we are doing a direct service integration, so will use "AWS".  Using AWS means using an internal integration that allows us to transform the payload rather than "AWS_PROXY", which will proxy the request directly to the integration service leaving the body untouched.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 73&lt;/strong&gt; defines the IAM Role the API Gateway will assume while performing the integration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 74&lt;/strong&gt; defines the URI of the action we want to invoke.  The Uri action we need to invoke will look like "arn:aws:API gateway:us-east-1:sqs:path/1234567890/the_queue_name", so we are using the Cloudformation intrinsic function "Join" to create this for us.&lt;/p&gt;

&lt;p&gt;Once we have these attributes configured, we have defined the core details on the service we are integrating, the "How".&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-the-integration-request"&gt;
  &lt;/a&gt;
  Create The Integration Request
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Line 80&lt;/strong&gt; defines the PassthroughBehaviour - I like to use "NEVER" so that if we receive an unexpected request "Content-Type", then API gateway will respond with an &lt;code&gt;HTTP 415 error - Unsupported Media Type&lt;/code&gt;, which I think is desirable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 81 - 82&lt;/strong&gt; defines the request parameters we send to SQS; we will map our request into &lt;code&gt;x-www-form-urlencoded&lt;/code&gt; values when sending our POST to SQS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lines 83 - 84&lt;/strong&gt; define how we will transform the incoming body and send it to SQS; this is a simple VTL template setting the &lt;code&gt;Action=SendMessage&lt;/code&gt; and &lt;code&gt;MessageBody=$input.JSON($)&lt;/code&gt;, which is the JSON body of the request to be sent to the SQS queue. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-the-integration-response"&gt;
  &lt;/a&gt;
  Create the Integration Response
&lt;/h3&gt;

&lt;p&gt;So far, we have created the API, formed the integration request and sent it to SQS; now, we have to deal with the SQS service response and map a response back to our caller using the "IntegrationResponses" attribute.  The value expected here is a MAP of HTTP status codes and VTL template snippets to transform the HTTP response we get from SQS.  In this demo, I have mapped the following response codes - 200, 404 to responses that will look something like the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP 200 Response&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We use a VTL template to transform the SQS response into a payload that we want to return rather than the entire integration payload.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;request_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ea87ccb1-92d3-51ff-b9f0-956ad19844d7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;173689a1-6b40-492e-9e6c-338c13b70f16&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;accepted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;HTTP 404 Response&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error_code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error_message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unable to complete Request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy-and-test-the-api"&gt;
  &lt;/a&gt;
  Deploy and Test the API
&lt;/h2&gt;

&lt;p&gt;After creating the SQS Queue and a new REST API, we need to deploy our API to a stage so our clients can call the API.&lt;br&gt;
Lines 101 - 108 define the Stage Deployment of our API and will make the API available.&lt;br&gt;
Important Note: This resource will only work for the first deployment; any change to your REST API will not deploy as part of a stack update.  I searched far and wide for a solution to this behaviour and landed on the need to run a post-stack update API deployment using the console or AWS CLI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="nx"&gt;apigateway&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;deployment&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;region&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;region&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-wrapup"&gt;
  &lt;/a&gt;
  The Wrap-Up
&lt;/h2&gt;

&lt;p&gt;Writing a Zero-Code Serverless integration has been an evolving journey, and I have shared the details of where I ended up in this article.  I have learned a lot about AWS along the way and encourage you to explore and try code-less integrations in your solutions as a way of levelling up your journey to serverless nirvana.  What I have shared today is not production-ready - I am still exploring these patterns to make them more resilient and reliable for live use.&lt;/p&gt;

&lt;p&gt;Check out the real working Serverless Solution (No code included) on my GitHub repository &lt;a href="https://github.com/walmsles/zero-code-api-sqs"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>architecture</category>
    </item>
    <item>
      <title>40+ JavaScript Projects for Beginners ‚Äì Easy Ideas to Get Started Coding JS</title>
      <author>Gyan</author>
      <pubDate>Sat, 09 Oct 2021 09:42:14 +0000</pubDate>
      <link>https://dev.to/gw78ah/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-4fcp</link>
      <guid>https://dev.to/gw78ah/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-4fcp</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40+ JavaScript Projects for Beginners ‚Äì Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Get list of All Environment Variables' key Used in a Golang Module or Project</title>
      <author>kuldeep_singh</author>
      <pubDate>Sat, 09 Oct 2021 09:29:32 +0000</pubDate>
      <link>https://dev.to/mavensingh/how-to-get-list-of-all-environment-variables-used-in-a-module-or-project-19l2</link>
      <guid>https://dev.to/mavensingh/how-to-get-list-of-all-environment-variables-used-in-a-module-or-project-19l2</guid>
      <description>&lt;p&gt;In this article we're about to write a program which helps us to get the all environment variables which is used in your project.&lt;/p&gt;

&lt;p&gt;Why I created this program?&lt;br&gt;
So recently in my current company we've decided to separate the modules which is not dependent on anycode, because the project structure was become larger that's why we decided to separate modules.&lt;/p&gt;

&lt;p&gt;We moved code successfully but now comes problem how will you gonna get how many environment variables that separated module needed to run without causing any runtime issue.&lt;/p&gt;

&lt;p&gt;So we decided to write a script to get the list of used environment variables used in that module.&lt;/p&gt;

&lt;p&gt;How we are going to achieve this let's see the steps we needed to get the list of environment variables from module&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We're about to use command line argument which is going to be 
path of the module or project&lt;/li&gt;
&lt;li&gt;Reading module repository recursively using the filepath.Walk() 
function and only extracting the golang files full path.&lt;/li&gt;
&lt;li&gt;Here comes the main part, we're going to use regular expression 
for that because we know pattern of accessing environment 
variables in golang which is os.Getenv() function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So let's start Writing Code Now:&lt;/p&gt;

&lt;p&gt;Step 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

    dirPath := os.Args[1]

    if &amp;amp;dirPath == nil {
        fmt.Println("Argument can't be nil..")
        os.Exit(2)
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 2.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
err := filepath.Walk(dirPath,
        func(path string, d os.FileInfo, err error) error {
            if err != nil {
                return err
            }

            f := strings.Split(d.Name(), ".")
            if f[len(f)-1] == "go" {
                dir = append(dir, path)
            }
            return nil
        })
    if err != nil {
        fmt.Println("Error to open directries..")
        return
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 3.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
for _, f := range dir {
        file, err := os.Open(f)
        if err != nil {
            e := ErrorArray{
                Err:  err,
                File: f,
            }
            ErrArr = append(ErrArr, e)
        }

        scanner := bufio.NewScanner(file)
        scanner.Split(bufio.ScanLines)
        for scanner.Scan() {
            re := regexp.MustCompile(`os.Getenv(.*)`)
            en := re.FindString(scanner.Text())
            if len(en) == 0 {
                continue
            }
            if strings.Contains(en, "+") {
                n := strings.Split(en, "+")
                for _, v := range n {
                    if strings.Contains(v, "os.Getenv") {
                        str := Replaced(v)
                        _, exists := MapArr[str]
                        if exists {
                            MapArr[str]++
                            continue
                        }
                        MapArr[str] = 1
                    }

                }
                continue
            } else if strings.Contains(en, ",") {
                n := strings.Split(en, ",")
                for _, v := range n {
                    if strings.Contains(v, "os.Getenv") {
                        str := Replaced(v)
                        _, exists := MapArr[str]
                        if exists {
                            MapArr[str]++
                            continue
                        }
                        MapArr[str] = 1
                    }

                }
                continue
            }
            str := Replaced(en)
            _, exists := MapArr[str]
            if exists {
                MapArr[str]++
                continue
            }
            MapArr[str] = 1
        }
        file.Close()
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If Have Any Queries Then Lemme Know&lt;br&gt;
Read More : &lt;a href="https://kdsingh4.blogspot.com/2021/10/how-to-get-list-of-all-environment.html"&gt;https://kdsingh4.blogspot.com/2021/10/how-to-get-list-of-all-environment.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also Subscribe My Channel To Support Me : &lt;a href="https://www.youtube.com/channel/UCXhmNqWQ50zitqIdTgS7s8Q"&gt;https://www.youtube.com/channel/UCXhmNqWQ50zitqIdTgS7s8Q&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Tips to become a great programmer</title>
      <author>Gyan</author>
      <pubDate>Sat, 09 Oct 2021 09:07:47 +0000</pubDate>
      <link>https://dev.to/gw78ah/tips-to-become-a-great-programmer-3im1</link>
      <guid>https://dev.to/gw78ah/tips-to-become-a-great-programmer-3im1</guid>
      <description>&lt;p&gt;¬†A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in.¬†&lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Build a product and launch in 30 days with just HTML and CSS halfway</title>
      <author>Lucian Tartea</author>
      <pubDate>Sat, 09 Oct 2021 08:32:51 +0000</pubDate>
      <link>https://dev.to/luciantartea/build-a-product-and-launch-in-30-days-with-just-html-and-css-halfway-4cm0</link>
      <guid>https://dev.to/luciantartea/build-a-product-and-launch-in-30-days-with-just-html-and-css-halfway-4cm0</guid>
      <description>&lt;p&gt;&lt;em&gt;You can create an amazing product that people will love and even pay for with just HTML and CSS.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is my mission. My name is Lucian, I'm a frontend developer and would like to prove just that by doing it myself. &lt;/p&gt;

&lt;p&gt;Currently I am halfway through the journey and I have to admit I never worked on any project supported with such enthusiasm by so many developers and makers.&lt;/p&gt;

&lt;p&gt;This is also partly due to the fact that I am transparent with my reasoning, actions and results by sharing them on my Twitter account.&lt;/p&gt;

&lt;p&gt;In complete honesty one of the benefits of working in public is that you can't stray away from the parameters you've set upfront.&lt;/p&gt;

&lt;p&gt;Until now I had the heroic but flawed newbie bootstrapper mentality of throwing all existing resources at the project without time constraints.&lt;/p&gt;

&lt;p&gt;I am testing with this project my new approach of only working with clear deadline, objectives and evaluation, on well delimited time spans.&lt;/p&gt;

&lt;p&gt;Definitely sounds less adventurous but necessary when you've burned through almost all your savings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#objectives"&gt;
  &lt;/a&gt;
  Objectives
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Build a paid product based on 10 high quality HTML templates&lt;/li&gt;
&lt;li&gt;Make 3 valuable tweets per day about the process&lt;/li&gt;
&lt;li&gt;Launch on Twitter on Oct 21st&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#deadline"&gt;
  &lt;/a&gt;
  Deadline
&lt;/h3&gt;

&lt;p&gt;30 days (halfway while writing this)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#evaluation"&gt;
  &lt;/a&gt;
  Evaluation
&lt;/h3&gt;

&lt;p&gt;$1000 in sales for the launch week. Notice how money are not the objective. Instead I use them as an evaluation threshold&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h3&gt;

&lt;p&gt;In terms of product development I have completed 5 templates from the 10 but also still need to make the website that will present them to online public.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5PndZXmz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ma66zkwt3l5bzmuk1b8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5PndZXmz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ma66zkwt3l5bzmuk1b8o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My tools are VS Code, Photoshop, Illustrator and the tech stack is HTML, CSS, some light Bootstrap 5 and a sprinkle of JS. Gumroad will provide payment service and product delivery.&lt;/p&gt;

&lt;p&gt;I'm quite comfortable with these since they've been my bread and butter for 6 years. The difficult part which made me burn through savings is the next one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#marketing"&gt;
  &lt;/a&gt;
  Marketing
&lt;/h3&gt;

&lt;p&gt;Marketing... something that most devs love to hate. Probably right up there with choosing color schemes and writing documentation.&lt;/p&gt;

&lt;p&gt;My marketing strategy until I started the current project was "build such a good product that everyone will run to use and talk about on their socials and blogs".&lt;/p&gt;

&lt;p&gt;In short I was sure that peers would do the marketing for me if I just crafted the best product in my HTML templates niche.&lt;/p&gt;

&lt;p&gt;Obviously it didn't work out like that and I had a decline in sales of about 70% in the course of roughly 6 months.&lt;/p&gt;

&lt;p&gt;The worst marketing decisions were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Investing in SEO for ultra popular keywords "HTML templates" in my case&lt;/li&gt;
&lt;li&gt;Trying to switch to a cooler sounding domain name for about a month&lt;/li&gt;
&lt;li&gt;Then switching back to the initial one (it just gets better and better doesn't it?)&lt;/li&gt;
&lt;li&gt;Trying to scale production with paid collaborators (Sales are stalling! Oh just make more product and they will come...)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I decided to launch that project as a free resource for devs and makers and start a new paid one to support my work with a completely different approach.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the current project&lt;/strong&gt; I've eliminated SEO completely because there is not much you can do to have results in one month.&lt;/p&gt;

&lt;p&gt;All efforts go into Twitter to grow my audience and for that I've created this "Build a product and launch in 30 days with just HTML and CSS" series to document my journey transparently. &lt;/p&gt;

&lt;p&gt;Peers that think about doing something similar are inspired by the tweets and grow confidence to start their own journey.&lt;/p&gt;

&lt;p&gt;Some of the highlights in terms of marketing for this first half are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Built a Carrd website for the project &lt;a href="https://launchin30html.carrd.co/"&gt;launchin30HTML.carrd.co&lt;/a&gt; which gathered &amp;gt;500 visitors in about 10 days. Here I collect all my tweets related to the project so visitors can see them clearly and draw inspiration if they want to.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ToW3SpQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zobblmn6gyycxolgepsz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ToW3SpQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zobblmn6gyycxolgepsz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Carrd site has also collected 25 email addresses from people wanting to be notified about the launch via email. But I'm not sure if I will use them because I am kind of sensitive about handling people's email addresses. Anyway as information is quite valuable if you plan to take a similar journey. 25 emails for $0 with no promo whatsoever in 10 days is a promising number. I just placed the Carrd website in my Twitter profile&lt;/li&gt;
&lt;li&gt;I also published an article describing my intentions at project start on &lt;a href="https://dev.to/luciantartea/watch-me-build-a-product-and-launch-in-30-days-with-just-html-and-css-2fei"&gt;Dev.to&lt;/a&gt;, &lt;a href="https://luciantartea.hashnode.dev/watch-me-build-a-product-and-launch-in-30-days-with-just-html-and-css"&gt;Hashnode&lt;/a&gt; and &lt;a href="https://www.indiehackers.com/post/watch-me-build-a-product-and-launch-in-30-days-with-just-html-and-css-a6b570823f"&gt;IndieHackers&lt;/a&gt;. It was very well received on the first two and brought in a lot of positive feedback and quite a few followers. Hashnode even helped me out by tweeting the challenge on their Twitter account. They really made my day brighter&lt;/li&gt;
&lt;li&gt;Twitter was the biggest revelation by far. My followers count reached 4000 and brought in amazing feedback and support. I am genuinely grateful for each and everyone that follows me there. I make extra efforts to provide real value in my tweets.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#to-do"&gt;
  &lt;/a&gt;
  To Do
&lt;/h3&gt;

&lt;p&gt;Some of the things that I plan to do in the remaining half part until the launch are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating the remaining 5 HTML templates&lt;/li&gt;
&lt;li&gt;Build the presentation site and upload it online&lt;/li&gt;
&lt;li&gt;Choose hosting and connect domain&lt;/li&gt;
&lt;li&gt;Try to understand Reddit and Discord better and use them wisely to raise awareness on the project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The launch is set for &lt;strong&gt;Oct 21st&lt;/strong&gt; and I will publish the sales results transparently in the corresponding launch week.&lt;/p&gt;

&lt;p&gt;If you want to see how I do all of the above and use them as inspiration for your project, you can follow me on Twitter &lt;a href="https://twitter.com/Inovatik"&gt;@Inovatik&lt;/a&gt; where I document this journey.&lt;/p&gt;

&lt;p&gt;If you're not on Twitter or you simply want to share the project on other socials please use &lt;a href="https://launchin30html.carrd.co/"&gt;launchin30HTML.carrd.co&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Would love to have you by my side for this challenge and I'm eager to answer any questions in the comments or on Twitter DM.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>An Ultimate Guide to Docker - From What is Docker to Dockerizing a Node.js Application</title>
      <author>Suhail Kakar</author>
      <pubDate>Sat, 09 Oct 2021 08:26:34 +0000</pubDate>
      <link>https://dev.to/suhailkakar/s-24cf</link>
      <guid>https://dev.to/suhailkakar/s-24cf</guid>
      <description>&lt;p&gt;Docker is an open-source platform that allows us to create, deploy, and manage containerized applications. In this article, we will look at &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-docker"&gt;What is Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#benefits-of-using-docker"&gt;Benefits of Using Docker&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#performance"&gt;Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#scalability"&gt;Scalability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rapid-deployment"&gt;Rapid Deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ci-efficiency"&gt;CI Efficiency&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#docker-facts"&gt;Docker Facts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#installation-of-docker"&gt;Installation of docker&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#mac"&gt;Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#linux"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#dockerizing-a-nodejs-app"&gt;Dockerizing a node.js app&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#environment-setup"&gt;Environment Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dockerfile"&gt;Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#docker-image"&gt;Docker Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#docker-containers"&gt;Docker Containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-docker"&gt;
  &lt;/a&gt;
  What is Docker
&lt;/h2&gt;

&lt;p&gt;Docker is a container management service. Docker's entire purpose is to make it simple for developers to create apps, ship them into containers, and then deploy them wherever they want. Now let's discuss what are containers. &lt;/p&gt;

&lt;p&gt;Containers are a solution to the challenge of moving software from one computing environment to another and having it operate consistently. This might be from a developer's laptop to a test environment, or from a real data center computer to a virtual machine in a private or public cloud.&lt;/p&gt;

&lt;p&gt;A container is a whole runtime environment packaged into one package: a program, together with all of its dependencies, libraries, and other components, and configuration files needed to run it. Now that you have some knowledge about Docker and Containers, let understand why should we use Docker. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-using-docker"&gt;
  &lt;/a&gt;
  Benefits of Using Docker
&lt;/h2&gt;

&lt;p&gt;Before installing docker and dockerizing an application let's first understand what are the advantages of Docker. Running applications in containers brings a number of benefits such as &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;Docker containers are usually fast and less resource-intensive than virtual machines because containers do not contain an operating system whereas virtual machines do. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability
&lt;/h3&gt;

&lt;p&gt;You can quickly create new containers if demand for your applications requires them. When using multiple containers you can take advantage of a range of container management options.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rapid-deployment"&gt;
  &lt;/a&gt;
  Rapid Deployment
&lt;/h3&gt;

&lt;p&gt;Docker manages to reduce deployment to seconds. This is because it generates a container for each process and does not boot an operating system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ci-efficiency"&gt;
  &lt;/a&gt;
  CI Efficiency
&lt;/h3&gt;

&lt;p&gt;Docker allows you to create a container image and utilize it throughout the whole deployment process. The ability to isolate non-dependent stages and perform them in parallel is a major advantage.&lt;/p&gt;

&lt;p&gt;Now lets learn the facts about Docker that you might don't know :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker-facts"&gt;
  &lt;/a&gt;
  Docker Facts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Docker adoption is up 30% in the last year.&lt;/li&gt;
&lt;li&gt;PHP, Ruby, Java, and Node are the main programming frameworks/languages used in containers.&lt;/li&gt;
&lt;li&gt;2/3 of organizations that try Docker end up utilizing it. The majority of firms who will adapt did so within 30 days of first production use, and virtually all of the remaining adopters converted within 60 days.&lt;/li&gt;
&lt;li&gt;Docker offers a large library of pre-built images. At the time of writing, there are over 400,000 public Docker images available on the web.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation-of-docker"&gt;
  &lt;/a&gt;
  Installation of docker
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#mac"&gt;
  &lt;/a&gt;
  Mac
&lt;/h3&gt;

&lt;p&gt;If you are using Mac with Apple silicon you must install Rosetta 2, to do that simply run the below command in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;softwareupdate --install-rosetta
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visit this  &lt;a href="https://docs.docker.com/desktop/mac/install/"&gt;link&lt;/a&gt; and select your mac chip, Click on the blue button with your mac chip label on it. Once you did a DMG file will be downloaded, double click on it, and you need to drag the docker logo into Applications folder&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X-aiGrQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633589433005/6ShnlnhqO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X-aiGrQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633589433005/6ShnlnhqO.png" alt="Screenshot 2021-10-07 at 07.50.28.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once it is copied, you will be able to access docker from the Applications folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dsvTZhZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633589568945/4iv4lRp7d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dsvTZhZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633589568945/4iv4lRp7d.png" alt="Screenshot 2021-10-07 at 07.52.44.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#linux"&gt;
  &lt;/a&gt;
  Linux
&lt;/h3&gt;

&lt;p&gt;To install Docker in Linux you can simply run the below command in your terminal, this would install everything related to docker in your Linux machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget -qO- https://get.docker.com | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dockerizing-a-nodejs-app"&gt;
  &lt;/a&gt;
  Dockerizing a node.js app
&lt;/h2&gt;

&lt;p&gt;Dockerizing is the process of packing, deploying, and running applications using Docker containers. In this article, we are going to dockerize a node.js application, but before starting it, If you are using VS Code, It is better to install  &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker"&gt;Docker&lt;/a&gt;  extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uJNte-QL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633676518455/cO4XS8vwH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJNte-QL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633676518455/cO4XS8vwH.png" alt="Screenshot 2021-10-08 at 08.01.53.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Docker extension makes it easy to build, manage, and deploy containerized applications from Visual Studio Code. It also provides one-click debugging of Node.js, Python, and .NET Core inside a container.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#environment-setup"&gt;
  &lt;/a&gt;
  Environment Setup
&lt;/h3&gt;

&lt;p&gt;In this article, I am going to create a simple node.js application that send a get request, but if you want, you can also continue dockerizing your current application throughout this article.&lt;/p&gt;

&lt;p&gt;To create a node.js app from scratch, you just need to run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you complete it, a &lt;code&gt;package.json&lt;/code&gt; file will be generated. Now you can create a new file named &lt;code&gt;app.js&lt;/code&gt; and this is going to be the file where we will be dockerizing it. To send/get the http request we need to set up express too, so also need to install express.js. To do that simply run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and once it is done, you can create a simple GET request. Here is the code for it :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey, server is running :D&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can run this app by running &lt;code&gt;node app.js&lt;/code&gt; and your server will start on port 3000. You can open your browser and go to localhost:3000 in which your app is running and you will see similar output ( below image ). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C8t8x62e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633711895516/4k2SYAvVD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C8t8x62e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633711895516/4k2SYAvVD.png" alt="Screenshot 2021-10-08 at 17.51.30.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our basic node.js app setup, let's start learning about Dockerfile. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dockerfile"&gt;
  &lt;/a&gt;
  Dockerfile
&lt;/h3&gt;

&lt;p&gt;A Dockerfile is a text file that contains all of the commands that a user may use to construct an image from the command line.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JTjIf_t8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633719702732/KuMRISJ8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JTjIf_t8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633719702732/KuMRISJ8q.png" alt="Dockerfile.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, go ahead and create a Dockerfile inside of your project directory. The first thing we need to do is define from what image we want to build from. Copy the below code and paste it into your dockerfile. Don't worry I am going to explain each line :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package*.json ./&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; PORT=8080&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8080&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "node", "start" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;FROM&lt;/strong&gt; initializes a new build stage and sets the Base Image for subsequent instructions&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;WORKDIR&lt;/strong&gt; is used to set the working directory for all the subsequent instructions&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;COPY&lt;/strong&gt; let you copy files from a specific location into a Docker image&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;RUN&lt;/strong&gt; allows you to install your application and packages required for it&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;EXPOSE&lt;/strong&gt; is a way to keep track of which ports are in use, but it does not map or open any ports.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CMD&lt;/strong&gt; ‚Äã specifies the instruction that is to be executed when a Docker container starts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We now have a full set of instructions to build a docker image, Let's build it :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#docker-image"&gt;
  &lt;/a&gt;
  Docker Image
&lt;/h3&gt;

&lt;p&gt;To build a docker image, we have to use below build command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build [OPTIONS] PATH | URL | -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which in our case will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t &amp;lt;your username&amp;gt;/nodedemo .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You should change  to your docker hub username &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the completion of this process, a docker image will be created. To see all your docker images, run the following command in your terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#docker-containers"&gt;
  &lt;/a&gt;
  Docker Containers
&lt;/h3&gt;

&lt;p&gt;Now that we have your docker images, we can use them as a base image to create&lt;br&gt;
other images or we can use it to run containers. &lt;/p&gt;

&lt;p&gt;Usually, we use this image to push it to a container registry that might be docker hub or any cloud provider. But in this article are going to push our image to docker hub.  To do that simply run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker push &amp;lt;your username&amp;gt;/nodedemo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you got an access denied error, then you need to login into your docker hub account, to do that run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker login 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and enter your email and password in your terminal. Once you push your image to the docker hub you can access them in your docker hub profile.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That is it for this article. I hope you found this article useful, if you need any help please let me know in the comment section. &lt;/p&gt;

&lt;p&gt;You can find the source code on my Github repository  &lt;a href="https://github.com/suhailkakar/Docker-Node-Demo"&gt;here&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;Would you like to buy me a coffee, You can do it &lt;a href="https://www.buymeacoffee.com/suhailkakar"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;üëã Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>docker</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>10 Magical Python Tips For Every Developer</title>
      <author>Gyan</author>
      <pubDate>Sat, 09 Oct 2021 08:22:02 +0000</pubDate>
      <link>https://dev.to/gw78ah/10-magical-python-tips-for-every-developer-1foc</link>
      <guid>https://dev.to/gw78ah/10-magical-python-tips-for-every-developer-1foc</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;Python&lt;/span&gt;&lt;span&gt;¬†is one of the most widely used programming languages today. It‚Äôs not just a language; it‚Äôs a way of doing things properly, simply, and concisely. Python is one of the most well-known high-level programming languages, particularly in the open source community. Python is a huge programming language. The point is that the more you learn about Python programming, the more you‚Äôll realize how much you still don‚Äôt know. I realize the statement is ironic, but Python is like that.¬†&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/10-magical-python-tips-for-every-developer/"&gt;10 Magical Python Tips For Every Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>All CSS Properties You Need to Know to Build a Website</title>
      <author>Gyan</author>
      <pubDate>Sat, 09 Oct 2021 08:12:42 +0000</pubDate>
      <link>https://dev.to/gw78ah/all-css-properties-you-need-to-know-to-build-a-website-3m06</link>
      <guid>https://dev.to/gw78ah/all-css-properties-you-need-to-know-to-build-a-website-3m06</guid>
      <description>&lt;p&gt;Whether you're at the beginning of your CSS journey or somewhere else, you got to admit‚Ää-‚Ääa number of CSS properties is massive.&lt;/p&gt;
&lt;p&gt;And it's easy to confuse yourself in that vast sea.¬†&lt;/p&gt;
&lt;p&gt;You're copying code from StackOverflow until you find a solution that fits. But how will that scale? Why does it even work?&lt;/p&gt;
&lt;p&gt;Most of the time, you don't care about the answer. You just focus on the result.&lt;/p&gt;
&lt;p&gt;When building a website, some of the CSS properties are must-haves; yet, it's hard to recognize them.¬†&lt;/p&gt;
&lt;p&gt;This article exists to help you solve the most common CSS problems while building a website.&lt;/p&gt;
&lt;p&gt;Let's dive into properties you cannot avoid.¬†&lt;/p&gt;

&lt;p&gt;Read More: &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/all-css-properties-you-need-to-know-to-build-a-website/&amp;amp;ved=2ahUKEwj-otjisOfyAhVJyzgGHXG4CUcQFnoECAMQBQ&amp;amp;usg=AOvVaw2_ALco9oEYEYfcDMBxpqL0&amp;amp;cshid=1630829382032"&gt;&lt;b&gt;All CSS Properties You Need to Know to Build a Website&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
