<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is Arccticy™?</title>
      <author>masspopcorn</author>
      <pubDate>Mon, 15 Nov 2021 18:44:18 +0000</pubDate>
      <link>https://dev.to/arccticy/what-is-arccticy-8hc</link>
      <guid>https://dev.to/arccticy/what-is-arccticy-8hc</guid>
      <description>&lt;h1&gt;
  &lt;a href="#arccticy%E2%84%A2-chat"&gt;
  &lt;/a&gt;
  Arccticy™ Chat
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h3&gt;

&lt;p&gt;Arccticy™ Chat is an open-source, simple, (for now), chat platform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#current-team"&gt;
  &lt;/a&gt;
  Current team:
&lt;/h3&gt;

&lt;p&gt;&lt;del&gt;Product Manager&lt;/del&gt;: (1 person)&lt;a href="https://replit.com/@dudeactualdev/"&gt;@dudeactualdev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Head Developer&lt;/del&gt;: (2 ppl)(Taken - &lt;a href="https://replit.com/@Lankdev/"&gt;@Lankdev&lt;/a&gt; &lt;a href="https://replit.com/@StringentDev/"&gt;@StringentDev&lt;/a&gt;)(Advantages: Team Admin)&lt;/p&gt;

&lt;p&gt;Designer: (2 people)(Open - &lt;a href="https://replit.com/@ch1ck3n/"&gt;@ch1ck3n&lt;/a&gt;)) &lt;/p&gt;

&lt;p&gt;Back-end development: (3 people)(Available - &lt;a href="https://replit.com/@natethemaker"&gt;@natethemaker&lt;/a&gt;, &lt;a href="https://replit.com/@zplusfour"&gt;@zplusfour&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Marketing Assistant&lt;/del&gt;: (1 person)(Taken - &lt;a href="https://replit.com/@natethemaker"&gt;@natethemaker&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Developer: (2 people)(Available)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-planned"&gt;
  &lt;/a&gt;
  What's planned:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Design&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User Interface&lt;/li&gt;
&lt;li&gt;Landing Page&lt;/li&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;Templates&lt;/li&gt;
&lt;li&gt;Desktop app with Electron.JS (All devs)&lt;/li&gt;
&lt;li&gt;Mobile app with Flutter? (Optional)&lt;/li&gt;
&lt;li&gt;Skeleton shimmers (better than using a circular indicator as it tells the user what type of content to expect)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Implement&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPA routing (No reloading for moving channels/servers and to all pages)&lt;/li&gt;
&lt;li&gt;Video Chat (P2P?)&lt;/li&gt;
&lt;li&gt;Custom Database module (Stringent)&lt;/li&gt;
&lt;li&gt;API server (Stringent)&lt;/li&gt;
&lt;li&gt;Clusters module (standard nodejs module)&lt;/li&gt;
&lt;li&gt;Subscription service using API (NOT POSSIBLE ON REPL)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>chat</category>
      <category>css</category>
      <category>discuss</category>
      <category>node</category>
    </item>
    <item>
      <title>Are Design Patterns Important To Know ?</title>
      <author>Aimen Zairi</author>
      <pubDate>Mon, 15 Nov 2021 18:40:53 +0000</pubDate>
      <link>https://dev.to/zairiaimendev/are-design-patterns-important-to-know--4a0</link>
      <guid>https://dev.to/zairiaimendev/are-design-patterns-important-to-know--4a0</guid>
      <description>&lt;p&gt;For Beginners, Making Projects is Simply about writing code that works, in one of the previous posts we talked about why that won't do in the long term, and now we talk about another solution.&lt;br&gt;
That Solution is using Design Patterns to help make the code clear, flexible and extensible.&lt;br&gt;
In Big projects and when you become a real software developer with a job you will see that Design Patterns are used for every single big project.&lt;/p&gt;

&lt;p&gt;PS : this was supposed to come with a video with cool animations and all, but i lost the project file, hopefully the next topic comes with a video.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-not-to-use-design-patterns-"&gt;
  &lt;/a&gt;
  When Not To Use Design Patterns ?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Design Patterns + Small Project is the worst combination as it makes the code more complex and bigger than it should be.&lt;/li&gt;
&lt;li&gt;Using Design patterns doesn't Indicate Quality Code, as sometimes the implementation of these said patterns is wrong which leads to bad experience for developers checking your code.&lt;/li&gt;
&lt;li&gt;Once you implement a design pattern it is hard to remove when it's not needed or want to replace it with another design pattern.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-design-patterns-"&gt;
  &lt;/a&gt;
  When To Use Design Patterns ?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Design Patterns solve certain problems when writing the code and that's what you have to look for. If you are facing a known problem that has a design pattern as a solution it is recommended that you use.&lt;/li&gt;
&lt;li&gt;Creating flexibility and Making your project easily scalable.&lt;/li&gt;
&lt;li&gt;Code Re-Usability when needed.&lt;/li&gt;
&lt;li&gt;Easy to understand by other developers as design patterns are known standards, so any developer that picks your code can understand it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#commonly-used-patterns"&gt;
  &lt;/a&gt;
  Commonly Used Patterns
&lt;/h2&gt;

&lt;p&gt;Though these aren't "Design Patterns" they are called "Architectural Patterns" but nonetheless it's good to have an idea of what a pattern can look like.&lt;/p&gt;

&lt;p&gt;You may have seen these when trying out a new framework like Django, .NET ... etc.&lt;/p&gt;

&lt;p&gt;There are others but the two most known ones are : &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mvc-"&gt;
  &lt;/a&gt;
  MVC :
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Model&lt;/em&gt;&lt;/strong&gt; : Components That Describe the data in used the app.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;View&lt;/em&gt;&lt;/strong&gt; : : Contains the interface that the user sees which&lt;br&gt;
contains the representation of this data&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Controller&lt;/em&gt;&lt;/strong&gt; : Contains all the business logic done in the&lt;br&gt;
application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mvvm-"&gt;
  &lt;/a&gt;
  MVVM :
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Model&lt;/em&gt;&lt;/strong&gt; : Describes The Data&lt;br&gt;
&lt;strong&gt;&lt;em&gt;View&lt;/em&gt;&lt;/strong&gt; : Defines the structure, layout and appearance of a view on screen &lt;br&gt;
&lt;strong&gt;&lt;em&gt;View Model&lt;/em&gt;&lt;/strong&gt; : A link between the View and Model, dealing with any view logic.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Speeding Up Docker Builds with Remote Cache</title>
      <author>Martin Heinz</author>
      <pubDate>Mon, 15 Nov 2021 18:37:23 +0000</pubDate>
      <link>https://dev.to/martinheinz/speeding-up-docker-builds-with-remote-cache-4890</link>
      <guid>https://dev.to/martinheinz/speeding-up-docker-builds-with-remote-cache-4890</guid>
      <description>&lt;p&gt;Building images in CI/CD pipeline can be quite different from builds on local machine. One major difference is availability of cache. In the local environment you most likely have all the resources, dependencies and image layers cached from previous builds and therefore your builds might take just a few seconds. In the CI pipeline on the other hand, there's no local cache, which can cause the builds to take several minutes. There's solution to this though, and in this article we will look at how we can solve it both with and without Docker and for any CI/CD platform you might be using.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-generic-solution"&gt;
  &lt;/a&gt;
  The Generic Solution
&lt;/h2&gt;

&lt;p&gt;The idea for the generic solution that would work in any environment is pretty simple - we need to somehow create or bring the cache to the pipeline. We have 2 options here - either we point the builder tool (e.g. Docker) to the repository of our image from which it can retrieve image layers and use them as cache, or alternatively, we store the layers on a filesystem which we make available to the pipeline and grab the layers from there. Either way, we need to create the cache by pushing the image to repository or to filesystem, then - in the subsequent builds - we try to use it and if that doesn't work because of cache-miss, we update it with new layers. &lt;/p&gt;

&lt;p&gt;Now let's see how we can do that in practice with various tools...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  Docker
&lt;/h2&gt;

&lt;p&gt;The simplest solution to this problem is to use Docker with &lt;em&gt;BuildKit&lt;/em&gt;. BuildKit is a set of enhancements for &lt;code&gt;docker build&lt;/code&gt; which improves performance, storage management and adds couple extra features, including better caching functionality. To build container image with BuildKit, all we need to do is prepend &lt;code&gt;DOCKER_BUILDKIT=1&lt;/code&gt; to each command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Warm up cache&lt;/span&gt;
~ &lt;span class="nv"&gt;$ DOCKER_BUILDKIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 docker build &lt;span class="nt"&gt;-t&lt;/span&gt; martinheinz/docker-cached &lt;span class="nt"&gt;--build-arg&lt;/span&gt; &lt;span class="nv"&gt;BUILDKIT_INLINE_CACHE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nb"&gt;.&lt;/span&gt; 
...
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; writing image sha256:09f473587beb1a1f240a776760655637ca00894a2a31b730019ecfee48d43848              0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; naming to docker.io/martinheinz/docker-cached                                                      0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting cache                                                                                       0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; preparing build cache &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;export                                                                   &lt;/span&gt;0.0s

~ &lt;span class="nv"&gt;$ &lt;/span&gt;docker push martinheinz/docker-cached

&lt;span class="c"&gt;# Build using cache repo&lt;/span&gt;
~ &lt;span class="nv"&gt;$ DOCKER_BUILDKIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 docker build &lt;span class="nt"&gt;--cache-from&lt;/span&gt; martinheinz/docker-cached &lt;span class="nb"&gt;.&lt;/span&gt;
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load metadata &lt;span class="k"&gt;for &lt;/span&gt;docker.io/library/ubuntu:latest                                          0.5s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; importing cache manifest from martinheinz/docker-cached                                               0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; CACHED &lt;span class="o"&gt;[&lt;/span&gt;1/1] FROM docker.io/library/ubuntu@sha256:44ab2c3b26363823dcb965498ab06abf...50743df0d4172d   0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting to image                                                                                    0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting layers                                                                                   0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; writing image sha256:09f473587beb1a1f240a776760655637ca00894a2a31b730019ecfee48d43848              0.0s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example should be self-explanatory to anyone who ever built an image with Docker. Only real difference between this and basic Docker usage is the addition of &lt;code&gt;BUILDKIT_INLINE_CACHE=1&lt;/code&gt; which tells BuildKit to enable inline cache exporter. This makes sure that Docker writes metadata needed for caching into the image. This metadata will be then used in subsequent builds to find out which layers can be cached. The only other difference in the above snippet is the command output - during the first build we can see that Docker exports the cache to the repository, while during the second one it imports cache manifests and also uses one cached layer.&lt;/p&gt;

&lt;p&gt;The use of BuildKit as part of Docker is convenient, but it hides some features and options. So, in case you want more control over the build and caching, then you can directly use the upstream BuildKit project. To do so, you will need to download binaries from &lt;a href="https://github.com/moby/buildkit/releases"&gt;GitHub release page&lt;/a&gt;, unpack it and move it into your path (e.g. &lt;code&gt;/usr/local/bin/&lt;/code&gt;). Finally, you need to start the BuildKit daemon and then you're ready to build:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo cp&lt;/span&gt; ~/Downloads/buildkit-v0.9.0.linux-amd64/bin/buildctl /usr/local/bin/
&lt;span class="nb"&gt;sudo cp&lt;/span&gt; ~/Downloads/buildkit-v0.9.0.linux-amd64/bin/buildkitd /usr/local/bin/
&lt;span class="nb"&gt;sudo cp&lt;/span&gt; ~/Downloads/buildkit-v0.9.0.linux-amd64/bin/buildkit-runc /usr/local/bin/
&lt;span class="nb"&gt;sudo &lt;/span&gt;buildkitd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to perform the same cached build with upstream BuildKit as we did with the Docker integration, we will need to craft a bit more complicated command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;buildctl build martinheinz/docker-cached &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--output&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;image,name&lt;span class="o"&gt;=&lt;/span&gt;docker.io/martinheinz/docker-cached,push&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--export-cache&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;inline &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--import-cache&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;registry,ref&lt;span class="o"&gt;=&lt;/span&gt;docker.io/martinheinz/docker-cached &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--frontend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dockerfile.v0 &lt;span class="nt"&gt;--local&lt;/span&gt; &lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--local&lt;/span&gt; &lt;span class="nv"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;

...
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; pushing layers                                                                                    0.6s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; pushing manifest &lt;span class="k"&gt;for &lt;/span&gt;docker.io/martinheinz/docker-cached:latest@sha256:d5e200aa86c...18e234cc92   0.4s
...
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting cache                                                                                      0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; preparing build cache &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;export                                                                  &lt;/span&gt;0.0s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see here, there's a lot of flags and arguments that we had to specify, which can be annoying, but allows for great customizability. One advantage of this approach is that we don't need to run &lt;code&gt;docker push&lt;/code&gt;, instead we include &lt;code&gt;push=true&lt;/code&gt; in one of the arguments and &lt;code&gt;buildctl&lt;/code&gt; takes care of pushing the image.&lt;/p&gt;

&lt;p&gt;Another advantage of using BuildKit in this way is ability to push the image and the cached layers into separate repositories or tags. In this example we will store the image itself in &lt;code&gt;docker-cached:latest&lt;/code&gt;, while the cache will live in &lt;code&gt;docker-cached:buildcache&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;buildctl build martinheinz/docker-cached &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--output&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;image,name&lt;span class="o"&gt;=&lt;/span&gt;docker.io/martinheinz/docker-cached,push&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--export-cache&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;registry,ref&lt;span class="o"&gt;=&lt;/span&gt;docker.io/martinheinz/docker-cached:buildcache &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--import-cache&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;registry,ref&lt;span class="o"&gt;=&lt;/span&gt;docker.io/martinheinz/docker-cached:buildcache &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--frontend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dockerfile.v0 &lt;span class="nt"&gt;--local&lt;/span&gt; &lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--local&lt;/span&gt; &lt;span class="nv"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;# During first build  - `=&amp;gt; ERROR importing cache manifest from docker.io/martinheinz/docker-cached:buildcache`&lt;/span&gt;
&lt;span class="c"&gt;# During second build - `=&amp;gt; importing cache manifest from docker.io/martinheinz/docker-cached:buildcache`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For completeness, I will also mention that it's also possible to leverage the above mentioned advanced features of BuildKit without installing it separately. For that you will need &lt;code&gt;buildx&lt;/code&gt; which is a Docker CLI plugin for extended build capabilities. &lt;code&gt;buildx&lt;/code&gt; however, has different arguments than &lt;code&gt;buildctl&lt;/code&gt;, so you will need to adjust your build commands based on the docs &lt;a href="https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md#-use-an-external-cache-source-for-a-build---cache-from"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With that said, we're doing all these shenanigans to improve CI/CD build performance, so running these commands locally is nice for testing, but we need to somehow perform this in the environment of some CI/CD platform, and the environment of choice for me is Kubernetes.&lt;/p&gt;

&lt;p&gt;To make this work in Kubernetes, we will need to bring a couple of additional things - namely credentials for pushing the image and volume used as a workspace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;batch/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Job&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildkit&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Never&lt;/span&gt;
      &lt;span class="na"&gt;initContainers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prepare&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alpine:3.10&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sh&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;-c&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;echo&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-e&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"FROM&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ubuntu\nENTRYPOINT&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;["/bin/bash",&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-c",&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"echo&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;hello"]\n"&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;/workspace/Dockerfile'&lt;/span&gt;
          &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;workspace&lt;/span&gt;
              &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/workspace&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildkit&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;moby/buildkit:master&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;buildctl-daemonless.sh&lt;/span&gt;
          &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;build"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--frontend"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;dockerfile.v0"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--local"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;context=/workspace"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--local"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;dockerfile=/workspace"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; 
                  &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--output"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;type=image,name=docker.io/martinheinz/docker-cached,push=true"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--import-cache"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
                  &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;type=registry,ref=docker.io/martinheinz/docker-cached"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--export-cache"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;type=inline"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
          &lt;span class="na"&gt;securityContext&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;privileged&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;DOCKER_CONFIG&lt;/span&gt;
              &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/docker/.docker&lt;/span&gt;
          &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-config&lt;/span&gt;
              &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/docker/.docker&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;workspace&lt;/span&gt;
              &lt;span class="na"&gt;readOnly&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
              &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/workspace&lt;/span&gt;
      &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-config&lt;/span&gt;
          &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;secretName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildkit-docker-config&lt;/span&gt;
            &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
                &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;workspace&lt;/span&gt;
          &lt;span class="na"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;claimName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildkit-workspace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is a single &lt;em&gt;Job&lt;/em&gt;, which first creates a &lt;code&gt;Dockerfile&lt;/code&gt; inside the workspace provided by &lt;em&gt;PersistentVolumeClaim&lt;/em&gt; using an init container. The actual job then performs the build as shown earlier. It also mounts repository credentials from &lt;em&gt;Secret&lt;/em&gt; named &lt;code&gt;buildkit-docker-config&lt;/code&gt;, which is needed so that BuildKit can push both the cached layers and the image itself to the repository.&lt;/p&gt;

&lt;p&gt;For clarity, I omitted the manifests of the PersistentVolumeClaim and Secret used above, but if you want test it out yourself, then you can find those &lt;a href="https://gist.github.com/MartinHeinz/e5cc1f8aa00b1c44d19cf685144d16e4"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dockerless"&gt;
  &lt;/a&gt;
  Docker-less
&lt;/h2&gt;

&lt;p&gt;Docker is not however, the only tool for building images that can help us leverage cache during CI/CD builds. One of the alternatives to Docker is Google's Kaniko. Its advantage is that it's meant to be run as container image, which makes it suitable for environments like Kubernetes. &lt;/p&gt;

&lt;p&gt;Considering that this tool is meant for CI/CD pipelines, we need to simulate the same conditions locally to be able to test it. To do so, we will need a couple of directories and files that will be used as volumes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;volume &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;volume
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'FROM ubuntu'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; Dockerfile
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'ENTRYPOINT ["/bin/bash", "-c", "echo hello"]'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; Dockerfile
&lt;span class="nb"&gt;mkdir &lt;/span&gt;cache
&lt;span class="nb"&gt;mkdir &lt;/span&gt;config
&lt;span class="nb"&gt;cp&lt;/span&gt; ~/.docker/config.json config/config.json  &lt;span class="c"&gt;# or podman login --authfile config/config.json&lt;/span&gt;

tree
&lt;span class="nb"&gt;.&lt;/span&gt;
|____Dockerfile    -&amp;gt; Sample Dockerfile &lt;span class="o"&gt;(&lt;/span&gt;will be mounted as workspace&lt;span class="o"&gt;)&lt;/span&gt;
|____cache         -&amp;gt; Cache directory/volume
|____config        -&amp;gt; Config directory/volume
  |____config.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above we created 3 things - a sample &lt;code&gt;Dockerfile&lt;/code&gt; consisting of single layer, which we will use for testing. Next, we created a &lt;code&gt;cache&lt;/code&gt; directory which will be mounted into container and used for storing cached image layers. Finally, we created &lt;code&gt;config&lt;/code&gt; directory, containing registry credentials, which will be mounted read-only.&lt;/p&gt;

&lt;p&gt;In previous section we only looked at the caching image layers using image registry/repository, with Kaniko though, we can also use a local directory/volume as a cache source. To do that we first need to &lt;em&gt;"warm-up"&lt;/em&gt; the cache aka populate it with image layers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Warm up (populate) the cache with base image(s)&lt;/span&gt;
~ &lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:/workspace &lt;span class="se"&gt;\&lt;/span&gt;
    gcr.io/kaniko-project/warmer:latest &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--cache-dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/workspace/cache &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ubuntu  &lt;span class="c"&gt;# --image=more-images&lt;/span&gt;

~ &lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls &lt;/span&gt;cache/
sha256:3555f4996aea6be945ae1532fa377c88f4b3b9e6d93531f47af5d78a7d5e3761
sha256:3555f4996aea6be945ae1532fa377c88f4b3b9e6d93531f47af5d78a7d5e3761.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: This section is about building images and caching images without docker, however during testing outside of Kubernetes, we still need to run the Kaniko image somehow, and that's using &lt;code&gt;docker&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Kaniko project provides 2 images - &lt;code&gt;warmer&lt;/code&gt; and &lt;code&gt;executor&lt;/code&gt;, above we used the former, which takes variable number of images and uses them to populate specified cache directory.&lt;/p&gt;

&lt;p&gt;With the cache ready, we can move onto building the image. This time we use the &lt;code&gt;executor&lt;/code&gt; image, passing in 2 volumes - one for registry credential (mounted read-only) and one for workspace, which we pre-populated with sample &lt;code&gt;Dockerfile&lt;/code&gt;. Additionally, we specify flags to enable caching as well as destination, where the final image will be pushed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Use the cache&lt;/span&gt;
~ &lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;/config/config.json:/kaniko/.docker/config.json:ro &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:/workspace &lt;span class="se"&gt;\&lt;/span&gt;
    gcr.io/kaniko-project/executor:latest &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--dockerfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/workspace/Dockerfile &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--cache&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--cache-dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/workspace/cache &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--destination&lt;/span&gt; martinheinz/kaniko-cached &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--context&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;:///workspace/

...
INFO[0002] Returning cached image manifest              
INFO[0002] Found sha256:3555f4996aea6be945ae1532fa377c88f4b3b9e6d93531f47af5d78a7d5e3761 &lt;span class="k"&gt;in &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;cache 
INFO[0002] Found manifest at /workspace/cache/sha256:3555f4996aea6be945ae1532fa377c88f4b3b9e6d93531f47af5d78a7d5e3761.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These examples show us how it works in theory, but in practice we will want to run this on Kubernetes. For that we will need similar set of objects as in the example with BuildKit, that is - &lt;a href="https://gist.github.com/MartinHeinz/1c9700d197f0e565d314555b26e66890"&gt;volume claim for cache directory&lt;/a&gt;, &lt;a href="https://gist.github.com/MartinHeinz/a1270557722478b65a4ec33f632a36cb"&gt;volume claim for workspace (Dockerfile)&lt;/a&gt;, a secret with registry credentials and a Job or Pod that will execute &lt;code&gt;kaniko&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pod&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gcr.io/kaniko-project/executor:latest&lt;/span&gt;
    &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--dockerfile=/workspace/Dockerfile"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--context=dir://workspace"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--destination=martinheinz/kaniko-cached"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--cache"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--cache-dir=/cache"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/kaniko/.docker/&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-cache&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/cache&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/workspace&lt;/span&gt;
  &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Never&lt;/span&gt;
  &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
      &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;secretName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
        &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-cache&lt;/span&gt;
      &lt;span class="na"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;claimName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-cache&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
      &lt;span class="na"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;claimName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, assuming that we already have the cache populated using &lt;code&gt;warmer&lt;/code&gt; image, we run &lt;code&gt;kaniko&lt;/code&gt; executor, which retrieves &lt;code&gt;Dockerfile&lt;/code&gt; from &lt;code&gt;/workspace&lt;/code&gt; directory, cached layers from &lt;code&gt;/cache&lt;/code&gt; and credentials from &lt;code&gt;/kaniko/.docker/config.json&lt;/code&gt;. If everything goes well, we should see in logs that the cached layers were found by Kaniko &lt;code&gt;executor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Caching layers from local volume can be useful, but most of the time you'll probably want to use remote registry. Kaniko can do that too, and all we need to do is change a couple of arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pod&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gcr.io/kaniko-project/executor:latest&lt;/span&gt;
    &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--dockerfile=/workspace/Dockerfile"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--context=dir://workspace"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--destination=martinheinz/kaniko-cached"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--cache"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--cache-copy-layers"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--cache-repo=martinheinz/kaniko-cached"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/kaniko/.docker&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/workspace&lt;/span&gt;
  &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Never&lt;/span&gt;
  &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
      &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;secretName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
        &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
      &lt;span class="na"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;claimName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The important change we made here is that we replaced &lt;code&gt;--cache-dir&lt;/code&gt; flag with &lt;code&gt;--cache-repo&lt;/code&gt;. Additionally, we were also able to omit the volume claim used for cache directory.&lt;/p&gt;

&lt;p&gt;Besides Kaniko, there are quite a few other tools that can build a container image. The most notable one is &lt;code&gt;podman&lt;/code&gt;, which leverages &lt;code&gt;buildah&lt;/code&gt; to build images. Using these 2 for caching however, is not an option right now. The &lt;code&gt;--cache-from&lt;/code&gt; option is available in &lt;code&gt;buildah&lt;/code&gt;, it is however NOOP, so even if you specify it, nothing will happen. So, if you want to migrate your CI from Docker to Buildah and the caching is a requirement, then you will need to wait for &lt;a href="https://github.com/containers/buildah/issues/620"&gt;this issue&lt;/a&gt; to be implemented/resolved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;This article described how we can leverage layer caching to improve build performance. If you're experiencing bad performance in image builds, chances are though, that problem doesn't lie in missing caching, but rather in the commands in your &lt;code&gt;Dockerfile&lt;/code&gt;. Therefore, before you in jump into implementing layer caching, I'd suggest you try to optimize structure of your &lt;code&gt;Dockerfiles&lt;/code&gt; first. Additionally, the caching will only work if you have well-structured &lt;code&gt;Dockerfiles&lt;/code&gt;, because after first cache miss, no further cached layers can be used.&lt;/p&gt;

&lt;p&gt;Besides caching layers, you might also want to cache dependencies, that way you can save time needed to download libraries from NPM, PyPI, Maven or other artifact repositories. One way to do this would be using BuildKit and its &lt;code&gt;--mount=type=cache&lt;/code&gt; flag described &lt;a href="https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/syntax.md#example-cache-go-packages"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>kubernetes</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Modern chatroulette app open source</title>
      <author>Lorenzo Tinfena</author>
      <pubDate>Mon, 15 Nov 2021 18:25:02 +0000</pubDate>
      <link>https://dev.to/lorenzotinfena/modern-chatroulette-app-open-source-484l</link>
      <guid>https://dev.to/lorenzotinfena/modern-chatroulette-app-open-source-484l</guid>
      <description>&lt;p&gt;Im doing this project open source &lt;a href="https://github.com/LorenzoTinfena/chat-and-meet-server"&gt;https://github.com/LorenzoTinfena/chat-and-meet-server&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/LorenzoTinfena/chat-and-meet-client"&gt;https://github.com/LorenzoTinfena/chat-and-meet-client&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Server in go, client in flutter, with grpc protocol for APIs, im not good in frontend and i don't like it, but I wanted to do this open source project cause most chatroulette app don't offer the possibility to choose age, gender, ecc. (maybe for payment).&lt;br&gt;
the main purpose when it will (if it will) be published, is to let every possible service free for everyone&lt;/p&gt;

</description>
      <category>go</category>
      <category>opensource</category>
      <category>dart</category>
      <category>flutter</category>
    </item>
    <item>
      <title>Ultimate Docker and  FastAPI Guide</title>
      <author>Brian Macharia</author>
      <pubDate>Mon, 15 Nov 2021 17:53:36 +0000</pubDate>
      <link>https://dev.to/brianmk/ultimate-docker-and-fastapi-guide-1l85</link>
      <guid>https://dev.to/brianmk/ultimate-docker-and-fastapi-guide-1l85</guid>
      <description>&lt;p&gt;Ultimate Docker and  FastAPI Guide&lt;br&gt;
When deploying FastAPI applications a common approach is to build a Linux container image. It's normally done using Docker&lt;br&gt;
You can then deploy that container image in one of a few possible ways.&lt;br&gt;
Using Linux containers has several advantages including security, replicability, simplicity, and others.&lt;br&gt;
What is a Container&lt;br&gt;
Containers (mainly Linux containers) are a very lightweight way to package applications including all their dependencies and necessary files while keeping them isolated from other containers (other applications or components) in the same system.&lt;br&gt;
Linux containers run using the same Linux kernel of the host (machine, virtual machine, cloud server, etc). This just means that they are very lightweight (compared to full virtual machines emulating an entire operating system).&lt;br&gt;
This way, containers consume little resources, an amount comparable to running the processes directly (a virtual machine would consume much more).&lt;br&gt;
Containers also have their own isolated running processes (commonly just one process), file system, and network, simplifying deployment, security, development, etc.&lt;br&gt;
What is a Container Image&lt;br&gt;
A container is run from a container image.&lt;br&gt;
A container image is a static version of all the files, environment variables, and the default command/program that should be present in a container. Static here means that the container image is not running, it's not being executed, it's only the packaged files and metadata.&lt;br&gt;
In contrast to a "container image" that is the stored static contents, a "container" normally refers to the running instance, the thing that is being executed.&lt;br&gt;
When the container is started and running (started from a container image) it could create or change files, environment variables, etc. Those changes will exist only in that container, but would not persist in the underlying container image (would not be saved to disk).&lt;br&gt;
A container image is comparable to the program file and contents, e.g. python and some file main.py.&lt;br&gt;
And the container itself (in contrast to the container image) is the actual running instance of the image, comparable to a process. In fact, a container is running only when it has a process running (and normally it's only a single process). The container stops when there's no process running in it.&lt;br&gt;
Container Images&lt;br&gt;
Docker has been one of the main tools to create and manage container images and containers.&lt;br&gt;
And there's a public Docker Hub with pre-made official container images for many tools, environments, databases, and applications.&lt;br&gt;
For example, there's an official Python Image.&lt;br&gt;
And there are many other images for different things like databases, for example for:&lt;br&gt;
• PostgreSQL&lt;br&gt;
• MySQL&lt;br&gt;
• MongoDB&lt;br&gt;
• Redis, etc.&lt;br&gt;
By using a pre-made container image it's very easy to combine and use different tools. For example, to try out a new database. In most cases, you can use the official images, and just configure them with environment variables.&lt;br&gt;
That way, in many cases you can learn about containers and Docker and re-use that knowledge with many different tools and components.&lt;br&gt;
So, you would run multiple containers with different things, like a database, a Python application, a web server with a React frontend application, and connect them together via their internal network.&lt;br&gt;
All the container management systems (like Docker or Kubernetes) have these networking features integrated into them.&lt;br&gt;
Containers and Processes&lt;br&gt;
A container image normally includes in its metadata the default program or command that should be run when the container is started and the parameters to be passed to that program. Very similar to what would be if it was in the command line.&lt;br&gt;
When a container is started, it will run that command/program (although you can override it and make it run a different command/program).&lt;br&gt;
A container is running as long as the main process (command or program) is running.&lt;br&gt;
A container normally has a single process, but it's also possible to start subprocesses from the main process, and that way you will have multiple processes in the same container.&lt;br&gt;
But it's not possible to have a running container without at least one running process. If the main process stops, the container stops.&lt;br&gt;
Build a Docker Image for FastAPI&lt;br&gt;
Okay, let's build something now! 🚀&lt;br&gt;
I'll show you how to build a Docker image for FastAPI from scratch, based on the official Python image.&lt;br&gt;
This is what you would want to do in most cases, for example:&lt;br&gt;
• Using Kubernetes or similar tools&lt;br&gt;
• When running on a Raspberry Pi&lt;br&gt;
• Using a cloud service that would run a container image for you, etc.&lt;br&gt;
Package Requirements&lt;br&gt;
You would normally have the package requirements for your application in some file.&lt;br&gt;
It would depend mainly on the tool you use to install those requirements.&lt;br&gt;
The most common way to do it is to have a file requirements.txt with the package names and their versions, one per line.&lt;br&gt;
You would of course use the same ideas you read in About FastAPI versions to set the ranges of versions.&lt;br&gt;
Docker and other tools build these container images incrementally, adding one layer on top of the other, starting from the top of the Dockerfile and adding any files created by each of the instructions of the Dockerfile.&lt;br&gt;
Docker and similar tools also use an internal cache when building the image, if a file hasn't changed since the last time building the container image, then it will re-use the same layer created the last time, instead of copying the file again and creating a new layer from scratch.&lt;br&gt;
Just avoiding the copy of files doesn't necessarily improve things too much, but because it used the cache for that step, it can use the cache for the next step. For example, it could use the cache for the instruction that installs dependencies with:&lt;br&gt;
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt&lt;br&gt;
Deployment Concepts&lt;br&gt;
Let's talk again about some of the same Deployment Concepts in terms of containers.&lt;br&gt;
Containers are mainly a tool to simplify the process of building and deploying an application, but they don't enforce a particular approach to handle these deployment concepts, and there are several possible strategies.&lt;br&gt;
The good news is that with each different strategy there's a way to cover all of the deployment concepts. 🎉&lt;br&gt;
Let's review these deployment concepts in terms of containers:&lt;br&gt;
• HTTPS&lt;br&gt;
• Running on startup&lt;br&gt;
• Restarts&lt;br&gt;
• Replication (the number of processes running)&lt;br&gt;
• Memory&lt;br&gt;
• Previous steps before starting&lt;br&gt;
HTTPS&lt;br&gt;
If we focus just on the container image for a FastAPI application (and later the running container), HTTPS normally would be handled externally by another tool.&lt;br&gt;
It could be another container, for example with Traefik, handling HTTPS and automatic acquisition of certificates.&lt;br&gt;
Tip&lt;br&gt;
Traefik has integrations with Docker, Kubernetes, and others, so it's very easy to set up and configure HTTPS for your containers with it.&lt;br&gt;
Alternatively, HTTPS could be handled by a cloud provider as one of their services (while still running the application in a container).&lt;br&gt;
Running on Startup and Restarts&lt;br&gt;
There is normally another tool in charge of starting and running your container.&lt;br&gt;
It could be Docker directly, Docker Compose, Kubernetes, a cloud service, etc.&lt;br&gt;
In most (or all) cases, there's a simple option to enable running the container on startup and enabling restarts on failures. For example, in Docker, it's the command line option --restart.&lt;br&gt;
Without using containers, making applications run on startup and with restarts can be cumbersome and difficult. But when working with containers in most cases that functionality is included by default. ✨&lt;br&gt;
Replication - Number of Processes&lt;br&gt;
If you have a cluster of machines with Kubernetes, Docker Swarm Mode, Nomad, or another similar complex system to manage distributed containers on multiple machines, then you will probably want to handle replication at the cluster level instead of using a process manager (like Gunicorn with workers) in each container.&lt;br&gt;
One of those distributed container management systems like Kubernetes normally has some integrated way of handling replication of containers while still supporting load balancing for the incoming requests. All at the cluster level.&lt;br&gt;
In those cases, you would probably want to build a Docker image from scratch as explained above, installing your dependencies, and running a single Uvicorn process instead of running something like Gunicorn with Uvicorn workers.&lt;br&gt;
Load Balancer¶&lt;br&gt;
When using containers, you would normally have some component listening on the main port. It could possibly be another container that is also a TLS Termination Proxy to handle HTTPS or some similar tool.&lt;br&gt;
As this component would take the load of requests and distribute that among the workers in a (hopefully) balanced way, it is also commonly called a Load Balancer.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>api</category>
      <category>dsea</category>
    </item>
    <item>
      <title>Future Javascript: Javascript Pipeline Operators</title>
      <author>Johnny Simpson</author>
      <pubDate>Mon, 15 Nov 2021 17:38:04 +0000</pubDate>
      <link>https://dev.to/smpnjn/future-javascript-javascript-pipeline-operators-5jj</link>
      <guid>https://dev.to/smpnjn/future-javascript-javascript-pipeline-operators-5jj</guid>
      <description>&lt;p&gt;Pipeline operators are an upcoming feature to Javascript which gives us another way to pass values through a series of transformations. It gives more context to what developers were trying to achieve when they wrote their code, and allow us to do some cool things to boot. Here, we'll take a quick look at pipeline operators, how they work, and how you can use them today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-pipeline-operators-support"&gt;
  &lt;/a&gt;
  Javascript Pipeline Operators: Support
&lt;/h2&gt;

&lt;p&gt;Currently, no browser or server side ECMAScript implementation (like Node.JS) support pipeline operators. You can, however, get them to work using Babel 7.15. &lt;a href="https://babeljs.io/setup"&gt;You can learn more about installing Babel here&lt;/a&gt;, but suffice to say this will allow you to add pipeline operators into your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-pipeline-operators-how-they-work"&gt;
  &lt;/a&gt;
  Javascript Pipeline Operators: How they work
&lt;/h2&gt;

&lt;p&gt;Pipeline operators are simply another way to manipulate values in Javascript. The pipeline operator is |&amp;gt;. Suppose we have 3 mathematical functions which add numbers to an input value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Adds 1 to a number&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Multiplies a number by 2&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Divides a number by 6&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;divideBySix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we wanted to apply all of these functions to a number we have, we might do something like this today:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;calculate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;divideBySix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns 3.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although this works, when using multiple functions this can become quite messy - and often can take many lines. As such, we can simplify the above with a pipeline operator like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;calculate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;divideBySix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns 3.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this simplifies processing of numbers and values so that we can clearly see what is happening. Let's break down what we have done:&lt;/p&gt;

&lt;p&gt;First, we use number, and pass it with a pipe operator to &lt;code&gt;divideBySix()&lt;/code&gt;. We use &lt;code&gt;%&lt;/code&gt; to represent the value from before the pipe operator, in this case, 6 which is in our number variable.&lt;br&gt;
Then we pass the number from &lt;code&gt;divideBySix()&lt;/code&gt; to &lt;code&gt;multiplyByTwo()&lt;/code&gt;. Again, we use % to represent the outcome of the previous operation, i.e. the value of the &lt;code&gt;divideBySix()&lt;/code&gt; function.&lt;br&gt;
Finally, we do it again and &lt;code&gt;addOne()&lt;/code&gt; to our value. The outcome is the same, so we still get 3 at the end.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#simplifying-object-mapping-with-pipeline-operators"&gt;
  &lt;/a&gt;
  Simplifying Object Mapping with Pipeline Operators
&lt;/h2&gt;

&lt;p&gt;Obviously the above example is a very simple application, but we can also use pipeline operators to do cooler things, like map arrays in a more coherent fashion. For instance, the below takes an object of URL queries, and merges them into a text string which can be added to the end of a URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;URLParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10245&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;linkId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eojff-efekv-ef0kw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john-smith&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;featured&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;getURLQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;URLParams&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;URLParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`?&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Returns ?x=10245&amp;amp;linkId=eojff-efekv-ef0kw&amp;amp;author=john-smith&amp;amp;featured=false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getURLQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-on-javascript-pipeline-operators"&gt;
  &lt;/a&gt;
  Conclusion on Javascript Pipeline Operators
&lt;/h2&gt;

&lt;p&gt;Since pipe operators are not widely supported, you can only use this feature with Babel installed. With that said, pipeline operators add a lot of context to your code, and simplify operations so you can expand upon them later. As such, it may be worth giving Babel a try to get this into your code base. &lt;a href="https://github.com/tc39/proposal-pipeline-operator"&gt;If you want to read the full pipeline operator specification, click here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Create Copy to Clipboard Button</title>
      <author>Muhammad Rauf</author>
      <pubDate>Mon, 15 Nov 2021 17:13:40 +0000</pubDate>
      <link>https://dev.to/softcodeon/how-to-create-copy-to-clipboard-button-5hfo</link>
      <guid>https://dev.to/softcodeon/how-to-create-copy-to-clipboard-button-5hfo</guid>
      <description>&lt;p&gt;If you want to improve the user experience on your website, you should implement a copy to clipboard button on the user dashboard, especially if it provides information to be used on other sections. In this tutorial, I shall show you how to copy an inline text on the page by using plain and simple HTML, CSS and a bit JavaScript.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wf8fhwgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmjr9u1ozn7ywizf40gb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wf8fhwgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmjr9u1ozn7ywizf40gb.jpg" alt="Image description" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#create-copy-to-clipboard-button"&gt;
  &lt;/a&gt;
  Create Copy to Clipboard Button
&lt;/h1&gt;

&lt;p&gt;Copy on clipboard button is a button to copy and text of an HTML element. By clicking the button you will automatically copy on the text selected on your clipboard. For more detail, Lets follow and pay attention on steps bellow. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating sample HTML element&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open your Text editor&lt;/li&gt;
&lt;li&gt;Create new file save as copy.html&lt;/li&gt;
&lt;li&gt;Add the HTML, CSS &amp;amp; JS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;HTML Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="soft-text"&amp;gt;
  &amp;lt;div class="text-box HTML"&amp;gt;
    &amp;lt;div class="soft"&amp;gt;Program:&amp;lt;/div&amp;gt;
    &amp;lt;textarea id="HTML" readonly &amp;gt;
  &amp;amp;lt;div class=&amp;amp;quot;soft-text&amp;amp;quot;&amp;amp;gt;
  &amp;amp;lt;div class=&amp;amp;quot;text-box HTML&amp;amp;quot;&amp;amp;gt;
    &amp;amp;lt;div class=&amp;amp;quot;soft&amp;amp;quot;&amp;amp;gt;HTML Code:&amp;amp;lt;/div&amp;amp;gt;
    &amp;amp;lt;textarea id=&amp;amp;quot;HTML&amp;amp;quot; readonly &amp;amp;gt;
      Soft CodeOn
    &amp;amp;lt;/textarea&amp;amp;gt;
    &amp;amp;lt;button id=&amp;amp;quot;HTMLButton&amp;amp;quot;&amp;amp;gt;Copy Codes&amp;amp;lt;/button&amp;amp;gt;
  &amp;amp;lt;/div&amp;amp;gt;
    &amp;lt;/textarea&amp;gt;
    &amp;lt;button id="HTMLButton"&amp;gt;Copy Code&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;CSS Code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
/* Google Font CDN Link */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700&amp;amp;display=swap');
*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Poppins" , sans-serif;}
.soft-text{
  height: 100%;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 0 20px;}
.soft-text .text-box{
  height: auto;
  max-width: auto;
  width: 100%;
  margin: 5px 0;}
.soft-text .text-box .soft{
  font-size: 18px;
  font-weight: 600;
  color: #1ab1e8;
  margin: 4px;}
.soft-text .text-box textarea{
  height: 100%;
  width: 100%;
  padding: 20px;
  font-size: 15px;
  font-weight: 400;
  outline: none;
  border: 1px solid #1ab1e8;
  border-radius: 8px;
  background: #ceccf0;}
.text-box textarea::-webkit-scrollbar{
  display: none;}
.soft-text .text-box button{
  height: 45px;
  width: 155px;
  color: #fff;
  background: #0f06bd;
  outline: none;
  border: none;
  border-radius: 8px;
  font-size: 17px;
  font-weight: 400;
  margin: 8px 0;
  cursor: pointer;
  transition: all 0.4s ease;}
.soft-text .text-box button:hover{
  background: #0e4bf1;}
@media (max-width: 400px) {
.soft-text .text-box button{
    width: 100%;  }}&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;JavaScript Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
// HTML BOx JS Code
let HTML = document.getElementById("HTML");
let HTMLButton = document.getElementById("HTMLButton");

HTMLButton.onclick = function() {
  HTML.select();
  document.execCommand("copy");
  HTMLButton.innerText = "Copied!"
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's It you have all done now just save the copy.html file and see the results. If you want to read original post with detail you can visit here: &lt;a href="https://softcodeon.com/tutorials/copy-to-clipboard.htm"&gt;How to Create Copy to Clipboard Button&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>css</category>
    </item>
    <item>
      <title>Binários!</title>
      <author>EronAlves1996</author>
      <pubDate>Mon, 15 Nov 2021 17:08:16 +0000</pubDate>
      <link>https://dev.to/tttecnology/binarios-3o4o</link>
      <guid>https://dev.to/tttecnology/binarios-3o4o</guid>
      <description>&lt;p&gt;Em um dos meus posts anteriores, dei uma explicação sobre Charset e também sobre Codificação, que você pode conferir &lt;a href="https://dev.to/tttecnology/charset-vs-codificacao-14gc"&gt;aqui&lt;/a&gt;. Relembrando: charset é a tabela que relaciona uma determinada numeração com um caractere (entre elas a tabela ASCII, UTF-16, etc.), possibilitando que o computador leia e escreva palavras, e codificação é o processo de transformar essa numeração em binário. Porém, o assunto dos números binários pode gerar dúvida em muita gente, afinal, por quê binário? Por quê tudo em baixo nível é binário?&lt;/p&gt;

&lt;p&gt;Antes de mais nada, o binário não é muito diferente de decimal, sendo que o que diferencia um do outro é a base utilizada. Decimal utiliza base 10 na representação e operações dos números, enquanto o binário utiliza a base 2. Assim, os números são representados como uma sequência de 0 e 1, enquanto em base 10 os números são representados com os numerais de 0 a 9.&lt;/p&gt;

&lt;p&gt;Podemos utilizar qualquer base para representar os números. Em computação, comumente utilizamos o hexadecimal, que é com base 16. &lt;br&gt;
Nesse sistema, os números de 0 a 9 são representados com numerais mesmo. Do 10 ao 15, já são representados com letra de A a F. Alguns erros que o Windows produz retorna uma numeração hexadecimal (que seria um endereço de memória), e, inclusive, o algoritmo de hash SHA-1 produz um número em hexadecimal para cada documento que é passado para ele (confira mais &lt;a href="https://www.geeksforgeeks.org/sha-1-hash-in-java/"&gt;aqui&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SJJX1IFK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfarb6gl4ut7la7vi7qh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SJJX1IFK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfarb6gl4ut7la7vi7qh.png" alt="Erro no Windows" width="720" height="360"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Acho que temos um pouco mais de base para entender o porquê de alguns erros do Windows terem essa numeração estranha&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;O Javascript mesmo é uma linguagem que aceita conversões com limite de base 36, isso porque existem 10 numerais e 26 letras do alfabeto.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;O método toString() analisa seu primeiro argumento e tenta retornar uma representação string na raiz (base) especificada. Para raizes maiores que 10, as letras do alfabeto indicam valores maiores que 9. Por exemplo, para números hexadecimais (base 16),  letras entre a e f são utilizadas.&lt;br&gt;
Se o radix não for especificado, a raiz assumida como preferencial é a 10.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fonte: &lt;a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Number/toString"&gt;MDN Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dito isso, para facilitar entender um sistema numeral de base 2, acredito que convém entender um tipo primitivo de dado: o Boolean.&lt;/p&gt;

&lt;p&gt;O Boolean é implementado na maioria das linguagens de programação, e, quando não, através de bibliotecas. Um dado Boolean tem apenas duas possibilidades: True ou False. Apenas isso. Utiliza-se o Boolean para muitas operações de igualdade e comparação, pois, a partir daí, define-se uma execução de uma estrutura de decisão ou condicional.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aDs5hZiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f116jpli6prt3hzut3x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDs5hZiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f116jpli6prt3hzut3x.gif" alt="Estrutura de Decisão" width="402" height="188"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Uma estrutura de decisão utiliza Booleans de forma implícita&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A linguagem C não possui uma implementação explícita de dados do tipo Boolean, porém é bastante implícito. Como exemplo, defini uma estrutura de decisão em C onde é necessário comparar dois dados para executar uma função:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (x &amp;gt; 20){
  printf("%d é maior que 20", x);
}
//A instrução acima é simples: se x for maior que 20, 
//então vai mostrar na tela o texto definido pela 
//função "printf".
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Neste caso, verificar se x será maior ou não que 20 implica em determinar se essa declaração (x &amp;gt; 20) é verdadeira ou falsa. &lt;/p&gt;

&lt;p&gt;O que o Boolean tem a ver com números Binários?&lt;br&gt;
O Boolean utiliza apenas 1 bit para determinar True/False (1 bit é a unidade atômica de informação no computador, correspondendo a um 0 ou 1). De forma correspondente, 1 será True e 0 Falso. &lt;/p&gt;

&lt;p&gt;Se pegarmos então uma linha enorme de uma numeração de 16 bits (16 dígitos de 0 ou 1), para cada bit haverá ou um True ou um False, assim:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;0000000000000100&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A nível de hardware, essa sequência de 0s e 1s é representada por correntes elétricas. Então se a corrente elétrica está passando em uma determinada voltagem (True), quer dizer que é 1. Caso contrário, ou seja, a corrente elétrica esteja passando uma voltagem menor ou não esteja passando nenhuma voltagem (False), quer dizer 0.&lt;/p&gt;

&lt;p&gt;Historicamente, este é o método principal para leitura e escrita de dados, desde a época dos cartões perfurados, em que literalmente se escovava bits (confira o artigo do Wikipedia &lt;a href="https://en.wikipedia.org/wiki/Bit"&gt;aqui&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Por fim, o processo de codificação, como já falado, converte números decimais em binários. Abaixo descrevo, como fazer esse processo:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#convertendo-de-decimal-para-bin%C3%A1rio"&gt;
  &lt;/a&gt;
  Convertendo de decimal para binário
&lt;/h3&gt;

&lt;p&gt;Binário é um sistema numérico de base 2, como já falado. Então, para realizar a conversão, temos que realizar uma sucessão de divisões do número que queremos converter por 2 e anotar os resultados, tanto o quociente quanto o resto das divisões. Assim:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;658 / 2 = resultado: 329 | resto = 0&lt;br&gt;
329 / 2 = resultado: 164 | resto = 1&lt;br&gt;
164 / 2 = resultado:  82 | resto = 0&lt;br&gt;
82 / 2 = resultado:  41 | resto = 0&lt;br&gt;
41 / 2 = resultado:  20 | resto = 1&lt;br&gt;
20 / 2 = resultado:  10 | resto = 0&lt;br&gt;
10 / 2 = resultado:   5 | resto = 0&lt;br&gt;
 5 / 2 = resultado:   2 | resto = 1&lt;br&gt;
 2 / 2 = resultado:   1 | resto = 0&lt;br&gt;
 1 / 2 = resultado:   0 | resto = 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Como podemos observar, as divisões são realizadas até que o resultado seja 0. O número binário será formado pelos restos, da seguinte forma:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;0100100101&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como o computador lê a precedência dos números binários da direita para a esquerda, então temos que inverter essa numeração para chegarmos ao resultado final:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1010010010&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Caso queira conferir, abra o console do seu navegador (pressione F11 e procure pelo menu "console") e digite "0bxxxxxxx", substituindo onde está com x pelos números binários e aperte "enter", conforme abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wyOR0EX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wkk2ww2fia2gn3a0qsv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wyOR0EX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wkk2ww2fia2gn3a0qsv.png" alt="Inserindo número binários em Javascript" width="880" height="172"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Os passos acima podem ser convertidos em um algoritmo de programação. Então, fiz esse pequeno programa em C com os mesmos passos descritos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

char* dec2Bin(int number, char return2[17]){
  int dec = number;
  for(int i=1; dec != 0; i++){
    return2[16-i] = (char)dec%2 + '0';
    dec /= 2;
  }
  return return2;
}

int main(){
    int number = 0;
    char return1[17] = "0000000000000000";
    printf("Escreva o número: \n");
    scanf("%d", &amp;amp;number);
    dec2Bin(number, return1);
    printf("%s", return1);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#convertendo-de-bin%C3%A1rio-para-decimal"&gt;
  &lt;/a&gt;
  Convertendo de binário para decimal
&lt;/h3&gt;

&lt;p&gt;Para converter de binário para decimal, primeiro, temos que inverter o número que temos em binário para ser compatível &lt;br&gt;
com a leitura humana:&lt;/p&gt;

&lt;p&gt;1010010010 &amp;gt;&amp;gt; 0100100101&lt;/p&gt;

&lt;p&gt;Feito isso, vamos numerar cada um dos índices do número, como um array:&lt;/p&gt;

&lt;p&gt;0 1 0 0 1 0 0 1 0 1&lt;br&gt;
0 1 2 3 4 5 6 7 8 9&lt;/p&gt;

&lt;p&gt;Lembrando: &lt;strong&gt;o índice deve começar do 0!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, os campos que forem 1, efetuar a exponenciação de 2 elevado ao índice dele e somar os resultados, assim:&lt;/p&gt;

&lt;p&gt;0 &lt;strong&gt;1&lt;/strong&gt; 0 0 &lt;strong&gt;1&lt;/strong&gt; 0 0 &lt;strong&gt;1&lt;/strong&gt; 0 &lt;strong&gt;1&lt;/strong&gt;&lt;br&gt;
0 &lt;strong&gt;1&lt;/strong&gt; 2 3 &lt;strong&gt;4&lt;/strong&gt; 5 6 &lt;strong&gt;7&lt;/strong&gt; 8 &lt;strong&gt;9&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2 ^ 1 = 2&lt;br&gt;
2 ^ 4 = 16&lt;br&gt;
2 ^ 7 = 128&lt;br&gt;
2 ^ 9 = 512&lt;br&gt;
&lt;strong&gt;Total = 658&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Igualmente com a conversão Decimal &amp;gt; Binário, os passos acima também podem ser convertidos em algoritmo de programação, como o código em C abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;math.h&amp;gt;

int bin2Dec(char bin[17]){
  int finalNumber = 0;
  int tam = strlen(bin);
  for(int i=0; i&amp;lt;tam; i++){
    finalNumber += pow(2,(tam-i-1))*((int)bin[i]-'0');
  }
  return finalNumber;
}

int main(){
    int number = 0;
    char binary[17];
    printf("Escreva o número: \n");
    setbuf(stdin, NULL);
    fgets(binary, 16, stdin);
    binary[strcspn(binary, "\n")] = 0;
    number = bin2Dec(binary);
    printf("%d", number);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#finalmente"&gt;
  &lt;/a&gt;
  Finalmente...
&lt;/h3&gt;

&lt;p&gt;Vimos que o processo de codificação é converter do decimal ao binário. Entender um boolean, na minha opinião, facilita muito entender como um número binário funciona.&lt;br&gt;
O sistema padrão de representação de qualquer coisa no computador é binário, muito pela simplicidade e também por construção histórica. Para possibilitar o uso, tudo no computador passa pelo processo de codificação, que é converter para a representação binária tudo o que é mostrado em tela.&lt;br&gt;
Ter um entendimento disso, ao menos básico, nos facilita entender porque os computadores são verdadeiras máquinas de Turing, mas este assunto é para outro post.&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>programming</category>
      <category>assembly</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React: Use Advanced JavaScript in React Render Method</title>
      <author>Randy Rivera</author>
      <pubDate>Mon, 15 Nov 2021 17:08:15 +0000</pubDate>
      <link>https://dev.to/rthefounding/react-use-advanced-javascript-in-react-render-method-3hn0</link>
      <guid>https://dev.to/rthefounding/react-use-advanced-javascript-in-react-render-method-3hn0</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Welcome everyone and a great morning to you all. Today we will continue the freecodecamp lessons with this. In previous posts, we've gone over how to use JavaScript code into JSX code using curly braces, &lt;code&gt;{ }&lt;/code&gt;, for accessing props, passing props, accessing state, inserting comments into your code and as well as styling your components. &lt;/li&gt;
&lt;li&gt;You can also write JavaScript directly in your render methods, before the return statement, without inserting it inside of curly braces. This is because it is not yet within the JSX code. &lt;/li&gt;
&lt;li&gt;In the code that I'm about to show you is a render method which has an array that contains 20 phrases to represent the answer. The button click event is bound to the &lt;code&gt;ask&lt;/code&gt; method, so each time the button is clicked a random number will be generated and stored as the &lt;code&gt;randomIndex&lt;/code&gt; in state. We have to change line 52, and reassign the &lt;code&gt;answer&lt;/code&gt; const so ou code randomly accesses a different index of the &lt;code&gt;possibleAnswers&lt;/code&gt; array each time it updates.&lt;/li&gt;
&lt;li&gt;Code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;235&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MagicEightBall&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;randomIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;ask&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;randomIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;possibleAnswers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;It is certain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;It is decidedly so&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Without a doubt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Yes, definitely&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You may rely on it&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;As I see it, yes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Outlook good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Yes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Signs point to yes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Reply hazy try again&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ask again later&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Better not tell you now&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cannot predict now&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Concentrate and ask again&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Don't count on it&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My reply is no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My sources say no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Most likely&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Outlook not so good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Very doubtful&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="c1"&gt;// Change this line&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inputStyle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ask&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Ask the Magic Eight Ball!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Answer:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Change code below this line */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;


          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Change code above this line */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Answer:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;possibleAnswers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;randomIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inputStyle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ask&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Ask the Magic Eight Ball!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Answer:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Larson, Q., 2019. Frontend Development Libraries. [online] Freecodecamp.org. Available at: &lt;a href="https://www.freecodecamp.org/learn/front-end-development-libraries/react"&gt;https://www.freecodecamp.org/learn/front-end-development-libraries/react&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Where do I code?</title>
      <author>Vicki (she/they)</author>
      <pubDate>Mon, 15 Nov 2021 17:02:49 +0000</pubDate>
      <link>https://dev.to/vickilanger/where-do-i-code-3cb2</link>
      <guid>https://dev.to/vickilanger/where-do-i-code-3cb2</guid>
      <description>&lt;p&gt;Don’t I have to use [insert fancy computer] to code? No way! You can use any computer, tablet, or smartphone, it doesn’t even have to be connected to the internet. Though, some of the best resources are on the internet, for free.&lt;/p&gt;

&lt;p&gt;Fun fact: if you have one, you can even code with a graphing calculator.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#okay-cool-but-where-on-my-computer-can-i-code"&gt;
  &lt;/a&gt;
  Okay, Cool, but Where on my computer can I code?
&lt;/h2&gt;

&lt;p&gt;This is a hard question to answer because there are tons of places you can code. Let’s talk about a few different ones.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Free&lt;/th&gt;
&lt;th&gt;Easy to Use&lt;/th&gt;
&lt;th&gt;Visualize&lt;/th&gt;
&lt;th&gt;Can save your work&lt;/th&gt;
&lt;th&gt;Online&lt;/th&gt;
&lt;th&gt;Requires download&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IDLE&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PythonTutor.com&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trinket.io&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#idle"&gt;
  &lt;/a&gt;
  IDLE
&lt;/h3&gt;

&lt;p&gt;This is an editor that comes with Python when you download it. (we’ll talk about downloading in a bit). It pretty much looks like a blank document that you can type in. You can type your code in, hit enter, and it will run your code. It looks like this. See the &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;? That’s telling you where you can type. For now, you can ignore the first 3 lines of what probably looks like gibberish.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CxeX2Ura--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2ku9sn69guiw0mcocz1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxeX2Ura--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2ku9sn69guiw0mcocz1.png" alt='Screenshot of Python 3.7.3 Shell. It shows 3 lines of text at the top, then a mostly blank line with "&amp;gt;&amp;gt;&amp;gt;" at the beginning' width="533" height="103"&gt;&lt;/a&gt;&lt;br&gt;
Note: IDLE does require that you download Python, which will require some space on your computer. We’ll cover how to install before we start coding.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#python-tutor"&gt;
  &lt;/a&gt;
  Python Tutor
&lt;/h3&gt;

&lt;p&gt;Python Tutor is a free website you can use without logging in. It runs and helps visualize code. As you learn more things, I’ll explain what they should look like in Python Tutor. Personally, my vote is for everyone to start using this or something similar. For now, here is what Python tutor looks like when you go to &lt;a href="https://pythontutor.com/visualize.html#mode=edit"&gt;Python Tutor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You don’t have to adjust any of the drop-down menus, the defaults are perfect. You can type where it says &lt;code&gt;1&lt;/code&gt;. This just means you are on line 1 of the code. As you type more, it will number each line of code.&lt;/p&gt;

&lt;p&gt;There are two ways to use Python Tutor. With the first option, you may type all of your code, then click &lt;code&gt;Visualize Execution&lt;/code&gt; which allows you to click the &lt;code&gt;next&lt;/code&gt; button to see what happens at individual steps of your code.&lt;/p&gt;

&lt;p&gt;The other option is to click &lt;code&gt;Live Programming Mode&lt;/code&gt; or go to &lt;a href="https://pythontutor.com/live.html#mode=edit"&gt;Python Tutor Live&lt;/a&gt;. In this mode, your code will run as you type. I find this helpful as it immediately shows you what each step is doing.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q3G5cRhy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wv8ialaurx1l3yqmfle.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q3G5cRhy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wv8ialaurx1l3yqmfle.png" alt='screenshot of Python Tutor showing the dropdown with the python version, the text box to write in, and the buttons "Visualize Execution" and "Live Programming Mode"' width="630" height="400"&gt;&lt;/a&gt;&lt;br&gt;
Most of the work you do, while learning, will run perfectly on Python Tutor. Though, there are a few projects that will work better with Trinket.io.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trinketio"&gt;
  &lt;/a&gt;
  Trinket.io
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://Trinket.io"&gt;Trinket.io&lt;/a&gt; is similar to Python Tutor in that it’s free and requires no downloads. It allows us to play with a few modules (already built code) that Python Tutor doesn’t support. You can choose to use Trinket for your projects if you want. Trinket does allow but doesn’t require you, to create an account that will save all of the code you build. If you choose not to create an account, you can use the editor on the Trinket.io webpage. The editor looks like the screenshot below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YIlVq_8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m84d1j30gnm6dqwjsp4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YIlVq_8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m84d1j30gnm6dqwjsp4d.png" alt="screenshot of Trinket.io editor. Editor shows a Turtle program that draws the trinket.io logo" width="880" height="414"&gt;&lt;/a&gt;&lt;br&gt;
To use the trinket editor, select and clear all of the code on the left. Then you can type in that area. Once you want to run, make your code do it’s thing, your code, click on the play symbol (▶). Once you’ve clicked ▶, the result of your code will show on the right.&lt;/p&gt;

&lt;p&gt;We’ll use Trinket later in the Modules section to play with emojis, date and time, turtle drawing, graphs and charts, and Wikipedia.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-if-i-already-have-a-code-editor-or-want-one"&gt;
  &lt;/a&gt;
  What if I already have a code editor or want one?
&lt;/h3&gt;

&lt;p&gt;That's great. If you know how, go ahead and use it. Python files end with &lt;code&gt;.py&lt;/code&gt;.  If you don’t know how, I highly suggest using one of the above options. I find it’s easiest to learn just one thing at a time. Learning code and how to use the editor may become a bit stressful and overwhelming.&lt;/p&gt;

&lt;p&gt;If you don't have an editor on your computer and want one, you may choose to install one like Atom from &lt;a href="https://atom.io/"&gt;https://atom.io/&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Either way, most examples will be explained using Python Tutor.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>python</category>
    </item>
    <item>
      <title>Azure Key Vault Secrets in GitHub Actions</title>
      <author>James Cook</author>
      <pubDate>Mon, 15 Nov 2021 17:02:39 +0000</pubDate>
      <link>https://dev.to/officialcookj/azure-key-vault-secrets-in-github-actions-1naf</link>
      <guid>https://dev.to/officialcookj/azure-key-vault-secrets-in-github-actions-1naf</guid>
      <description>&lt;p&gt;The fundamental rule to a secret is to not share a secret. Once shared it's more likely going to be shared again and in an unsecure format, but how do we keep a secret a secret?&lt;/p&gt;

&lt;p&gt;When it comes to Cloud technology we can use resources that store our sensitive information in a secure environment. For example, Azure Key Vault allows us to store secrets, certificates and keys where we can set access control using authentication methods like Azure AD.&lt;/p&gt;

&lt;p&gt;But when we add secrets into a secure resource like Key Vault, how do we access them when running deployments?&lt;/p&gt;

&lt;p&gt;In this blog post I will be covering how we get the secrets from an Azure Key Vault for a deployment in GitHub Actions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-workflow"&gt;
  &lt;/a&gt;
  GitHub Workflow
&lt;/h2&gt;

&lt;p&gt;We will need login to Azure using the Azure CLI. The first workflow step will be the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure CLI Login&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure/login@v1.1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;creds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;{"clientId":"${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.AZ_CLIENT_ID&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}","clientSecret":"${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.AZ_CLIENT_SECRET&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}","subscriptionId":"${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.AZ_SUBID&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}","tenantId":"${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.AZ_TENANT_ID&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following are GitHub Secret values that need to exists before running the workflow:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AZ_CLIENT_ID&lt;/strong&gt; - Service Principal Client ID&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AZ_CLIENT_SECRET&lt;/strong&gt; - Service Principal Client Secret&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AZ_SUBID&lt;/strong&gt; - The Subscription ID you are connecting to as part of this workflow&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AZ_TENANT_ID&lt;/strong&gt; - The Tenant ID where the Service Principal exists&lt;/p&gt;

&lt;p&gt;Once logged via the Azure CLI, we will utilise the Get Key Vault Secrets GitHub Action where we will specify the Key Vault name and the Secrets we want:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure Key Vault Secrets&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;azurekeyvault&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure/get-keyvault-secrets@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;keyvault&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;MyVaultName"&lt;/span&gt;
          &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;MyFirstSecret,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;MySecondSecret,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;MyThirdSecret'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You would replace the following values with your own:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MyVaultName&lt;/strong&gt; - You would replace this with the name of your Key Vault&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MyFirstSecret, MySecondSecret, My ThirdSecret&lt;/strong&gt; - Replace these with the name of the secrets in your Key Vault (not the values).&lt;/p&gt;

&lt;p&gt;Now when you want to use these secrets in the workflow, you just need to use the following format:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;steps.azurekeyvault.outputs.MyFirstSecret&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Replace the following for your configuration:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;azurekeyvault&lt;/strong&gt; - This would be the id of the Key Vault action&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MyFirstSecret&lt;/strong&gt; - Replace this with one of the secret names you listed to get&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#service-principal-access"&gt;
  &lt;/a&gt;
  Service Principal Access
&lt;/h2&gt;

&lt;p&gt;The above workflow uses a Service Principal to connect to Azure. It would be used to access the Azure Key Vault and will require access permissions to access the secrets. You can do this within the Key Vault itself, either by using RBAC or Access Control (depending on what authentication method you set for the Key Vault).&lt;/p&gt;

&lt;p&gt;The GitHub Action only gets the secret from Azure Key Vault, meaning you only need to set permissions with the minimum to be able to get the specified secret you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-usage"&gt;
  &lt;/a&gt;
  Example Usage
&lt;/h2&gt;

&lt;p&gt;Below are some examples of using the above Azure Key Vault action to use secrets within other actions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#terraform"&gt;
  &lt;/a&gt;
  Terraform
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Terraform&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;hashicorp/setup-terraform@main&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;terraform_version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;latest&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform Init&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;init&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;terraform init&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform Plan&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;plan&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;terraform plan&lt;/span&gt;
        &lt;span class="na"&gt;continue-on-error&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;TF_VAR_az_tenant_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.AZ_TENANT_ID }}&lt;/span&gt;
          &lt;span class="na"&gt;TF_VAR_MyFirstSecret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.azurekeyvault.outputs.MyFirstSecret }}&lt;/span&gt;
          &lt;span class="na"&gt;TF_VAR_MySecondSecret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.azurekeyvault.outputs.MySecondSecret }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  Docker
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Docker Login&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;azure/docker-login@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;login-server&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;myregistry.azurecr.io&lt;/span&gt;
        &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.azurekeyvault.outputs.MySecondSecret }}&lt;/span&gt;
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.azurekeyvault.outputs.MyThirdSecret }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>azure</category>
      <category>security</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>Research methods for a product manager</title>
      <author>Vitalii Ermolaev</author>
      <pubDate>Mon, 15 Nov 2021 17:01:07 +0000</pubDate>
      <link>https://dev.to/vitaliiermolaev/research-methods-for-a-product-manager-5hf0</link>
      <guid>https://dev.to/vitaliiermolaev/research-methods-for-a-product-manager-5hf0</guid>
      <description>&lt;p&gt;One of the most important skills of a product manager is the ability to do research. They help to find out about «what is bothering» the user, to test a hypothesis, or to make a decision to launch a new feature. In this article, I will tell you about the main types of research.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-research"&gt;
  &lt;/a&gt;
  Types of Research
&lt;/h3&gt;

&lt;p&gt;Only three types of research are known: qualitative, quantitative and mixed.&lt;br&gt;
Quantitative research is a kind of numerical value that determines the behavior of people and their attitude to something. Qualitative research works with non-numerical values ​​that were obtained through interviews, for example. Mixed research include the first two types of research.&lt;/p&gt;

&lt;p&gt;Each type of research has a subtype: relationship research and behavioral research. The first research allows you to find out what is important for the user and what he wants. The second studies make it possible to observe how he acts in practice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qualitative-research"&gt;
  &lt;/a&gt;
  Qualitative Research
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#interview"&gt;
  &lt;/a&gt;
  Interview
&lt;/h5&gt;

&lt;p&gt;Subtype: Relationship Research, Behavioral Research&lt;/p&gt;

&lt;p&gt;Interviewing is one of the most versatile research methods. It's used to investigate user behavior, identify their «pains» and needs. Interviews can be conducted at all work stages on a product, from forming and testing a hypothesis to maintaining a working service and introducing new functions. The advantage of this method is that it allows you to deeply study user motivation, better understand the target audience and get unexpected insights from it.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#usability-tests%C2%A0"&gt;
  &lt;/a&gt;
  Usability Tests 
&lt;/h5&gt;

&lt;p&gt;Subtype: Behavioral Research&lt;/p&gt;

&lt;p&gt;Usability tests are research in which product managers observe how the user uses the service and what features are most important to him. &lt;/p&gt;

&lt;p&gt;Also, a person is given a task that he must complete, for example, setting up ads for certain groups of users. This research method is good because it allows you to quickly immerse yourself in the product, and it is especially useful for those managers who have recently moved to a new company or service.&lt;/p&gt;

&lt;p&gt;Usability tests can be moderated when you are present in the research, communicate with the respondent and observe him, as well as unmoderated for the experiment purity. Thus, you can test your products and those of competitors to understand what the pros and cons are of the current solutions. Another advantage of usability tests is that they are easy to conduct remotely, for example using TeamViewer, and observe what the user is doing.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#focus-groups"&gt;
  &lt;/a&gt;
  Focus Groups
&lt;/h5&gt;

&lt;p&gt;Subtype: Behavioral Research&lt;/p&gt;

&lt;p&gt;Focus groups allow you to identify the main problems of the product. The in-depth interview method is used during focus groups, but the product manager does not communicate with one user, but with a group of several people. This research method allows you to reduce the interviewing cost (due to less time consumption) and identify key issues. The disadvantage of focus groups is that group dynamics can shift the bottom line, for example, if a leader appears who will push others to his opinion. Therefore, it's up to the researcher to direct the group discussions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mixed-research"&gt;
  &lt;/a&gt;
  Mixed Research
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#surveys"&gt;
  &lt;/a&gt;
  Surveys
&lt;/h5&gt;

&lt;p&gt;Subtype: Relational Research&lt;/p&gt;

&lt;p&gt;Surveys are flexible user research tools. They can be implemented in a variety of contexts: by posting a simple open survey on a website, through a mailing list, or after testing the usability of the service.&lt;/p&gt;

&lt;p&gt;Surveys can provide quantitative and qualitative data: ratings, percentage of choice of one of the answers to a multiple-choice question, and, in addition, answers to open-ended questions. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#card-sorting"&gt;
  &lt;/a&gt;
  Card Sorting
&lt;/h5&gt;

&lt;p&gt;Subtype: Behavioral Research&lt;/p&gt;

&lt;p&gt;Card sorting allows you to form the menu structure or directory by the hands of users. During the research, the names of the objects to be sorted are recorded on cards, and then the respondents sort them based on their ideas about the structure of objects and the relationships between them. The researchers then analyze the results and identify patterns. The already existing hierarchical structure is checked for «reverse» card sorting. Participants are given tasks and asked to find a suitable card, moving through the category tree from the top to the bottom. This test verifies the health of the structure, for example, the location of the sections in the app and the relationships between them.&lt;/p&gt;

&lt;p&gt;This research can be carried out in person and with physical maps, or remotely, for example through the OptimalSort card sorting platform.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#concept-testing-with-mvp"&gt;
  &lt;/a&gt;
  Concept Testing with MVP
&lt;/h5&gt;

&lt;p&gt;Subtype: Relational Research&lt;/p&gt;

&lt;p&gt;An MVP is the simplest working prototype of a service that tests demand before starting full-scale development. This approach insures the company from creating an unclaimed product and helps not to waste resources on design and development in vain. MVP allows you to collect information with minimal effort in order to finalize the product in accordance with the needs of the target audience or completely abandon an unsuccessful idea.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#analysis-of-user-sessions"&gt;
  &lt;/a&gt;
  Analysis of User Sessions
&lt;/h5&gt;

&lt;p&gt;Subtype: Relational Research&lt;/p&gt;

&lt;p&gt;During the research, they analyze the accumulated information about user activity, actions that the user performs while working with the service, such as queries in a search engine or transitions between sections in the app. Using session analysis, you can find out the scenarios of user behavior and simplify the achievement of their goals, for example, by reducing the number of steps required to complete an order.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#eye-tracking-testing"&gt;
  &lt;/a&gt;
  Eye Tracking Testing
&lt;/h5&gt;

&lt;p&gt;Subtype: Behavioral Research&lt;/p&gt;

&lt;p&gt;Special equipment is required for eye tracking research, which tracks the movement of the user's gaze along the interface. When 30 or more participants complete the same task on the screen, you can notice patterns and figure out which elements on the page grab the user's attention.&lt;/p&gt;

&lt;p&gt;Eye tracking helps you determine which elements of content you need to focus on and which elements are best distracted from.&lt;/p&gt;

&lt;p&gt;The biggest drawback of eye tracking research is the need to use expensive equipment that can't be used without special training.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quantitative-research"&gt;
  &lt;/a&gt;
  Quantitative Research
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#ab-testing"&gt;
  &lt;/a&gt;
  A/B Testing
&lt;/h5&gt;

&lt;p&gt;Subtype: Behavioral Research&lt;/p&gt;

&lt;p&gt;A/B testing is an integral part of working on any service. You can use it to test a hypothesis about whether the selected product metric will change if you change something in the product, for example, whether a change in the design of the registration page will increase the number of users. The results of the test and control groups of users are compared: the first group is shown a new solution, and the control group is shown an unchanged product.&lt;/p&gt;

&lt;p&gt;And it's important for you to test whether the change will be statistically significant to confirm that the observed difference between the test and control groups is indeed due to product innovation and not an accident.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#clustering-highquality-requests"&gt;
  &lt;/a&gt;
  Clustering High-Quality Requests
&lt;/h5&gt;

&lt;p&gt;Subtype: Relational Research&lt;/p&gt;

&lt;p&gt;Clustering quality requests is a way to translate verbal requests and user feedback into quality data. This method allows using machine learning and natural language processing models to isolate requests that are constantly repeated in feedback.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#web-analytics"&gt;
  &lt;/a&gt;
  Web Analytics
&lt;/h5&gt;

&lt;p&gt;Subtype: Behavioral Research&lt;/p&gt;

&lt;p&gt;Web analytics allows you to identify and prioritize product issues. It will help you find out the number of people who came to your resource, the depth of view (the number of pages viewed by visitors at one time), the conversion in paying or registered users, and so on.&lt;/p&gt;

</description>
      <category>product</category>
      <category>management</category>
    </item>
  </channel>
</rss>
