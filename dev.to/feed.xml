<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Setup a HTML tooltip on hover using CSS</title>
      <author>Michael Burrows</author>
      <pubDate>Wed, 23 Jun 2021 03:31:24 +0000</pubDate>
      <link>https://dev.to/michaelburrows/setup-a-html-tooltip-on-hover-using-css-23b3</link>
      <guid>https://dev.to/michaelburrows/setup-a-html-tooltip-on-hover-using-css-23b3</guid>
      <description>&lt;p&gt;Tooltips are little boxes containing helpful text that appear when you hover over certain elements in a web page. They’re a useful UI component for providing additional information to users without having to clutter the interface. In this tutorial we’ll be creating a simple tooltip using HTML &amp;amp; CSS with no JavaScript required.&lt;/p&gt;

&lt;p&gt;Let get started with the HTML markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Example CSS Tooltip &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;data-tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Tooltips are used to provide information about an element on a web page."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;i&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The tooltip will appear when we hover over the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element displaying the text from the data attribute. Alternatively you could apply the data attribute to a hyperlink or button and the tooltip will function the same way.&lt;/p&gt;

&lt;p&gt;Now for the CSS starting with the tooltips trigger element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-tooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we’re using a data attribute we can use the CSS &lt;code&gt;[attribute]&lt;/code&gt; selector which selects all elements with a specified attribute (&lt;code&gt;data-tooltip&lt;/code&gt;). The actual tooltip that appears on hover will be constructed using &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; pseudo elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-tooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data-tooltip&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.25em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0.2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we’ll a small arrow shape so the tooltip looks like a speech bubble:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-tooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0.2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;Code&lt;/span&gt; &lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;CSS&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;css&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;Finally&lt;/span&gt; &lt;span class="nt"&gt;we&lt;/span&gt; &lt;span class="nt"&gt;need&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;opacity&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="nt"&gt;visible&lt;/span&gt; &lt;span class="nt"&gt;when&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;tooltip&lt;/span&gt; &lt;span class="nt"&gt;element&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;hovered&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-tooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:hover:before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-tooltip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:hover:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s all for this tutorial, we’ve just created a animated tooltip using only HTML and CSS. The only drawback when creating tooltips using this method is data attributes don’t support hyperlinks so these tooltips are unable to contain links and are purely text only.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Dependency Injection (Simplified)</title>
      <author>Zak Horton</author>
      <pubDate>Wed, 23 Jun 2021 02:12:32 +0000</pubDate>
      <link>https://dev.to/zhorton34/dependency-injection-simplified-1ikl</link>
      <guid>https://dev.to/zhorton34/dependency-injection-simplified-1ikl</guid>
      <description>&lt;p&gt;Your palms are sweaty&lt;br&gt;
Knees weak, arms are heavy&lt;br&gt;
There's vomit on your sweater already, Dev's spaghetti&lt;/p&gt;

&lt;p&gt;Your nervous, but on the surface you stay calm and ready, &lt;br&gt;
To Drop coms.&lt;/p&gt;

&lt;p&gt;But you're forgettin' what you coded wow. The team knows it now. Overnight architects studying no doubt, come in clutch with competent "Know How" that's balanced by curious "No, how?"  &lt;/p&gt;




&lt;p&gt;Curious "No, how?" checks competent "Know How" and vice versa. This balance is "How" good teams balance and build into great teams. Without "No, how?" and "Know how" all your left with is "How?".&lt;/p&gt;




&lt;p&gt;It's broken, plow, nobody's talkin' now&lt;br&gt;
The clocks run out, times up, over, blaow,&lt;/p&gt;

&lt;p&gt;Snap back to reality, ope another impracticality, dependent on irrationality, rabbiting towards dependency hell again.&lt;/p&gt;

&lt;p&gt;Your so mad, but you won't give up that easily? No you won't have it, you know the app's not that out of it. At one at least it hadn't been. &lt;/p&gt;

&lt;p&gt;Your back's to the ropes, entangled code, the team starts losing hope. It don't matter, your dope, you know that, but this code's a joke. Is something fixable if truly incapable?&lt;/p&gt;

&lt;p&gt;You feel so stagnant, you continue to grind, ope, you code another line - HOLY F&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
(Deep breaths...)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deep-breaths"&gt;
  &lt;/a&gt;
  (Deep breaths...)
&lt;/h2&gt;

&lt;p&gt;You ran into another dependency...&lt;/p&gt;

&lt;p&gt;Okay...Alright. It's fine. &lt;br&gt;
Let's focus up and do it right this one time.&lt;/p&gt;

&lt;p&gt;That's when it's back to the lab again, ope you better capture that moment and capture it you only got one sh....&lt;/p&gt;

&lt;p&gt;"HOLY MOTHER OF F, AGAIN!?!?!?!?!"&lt;/p&gt;

&lt;p&gt;You run into ANOTHER dependency. Your about to lose it again. Your best option is to simply let emotions take over and give in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-you-got-this-lets-check-back-into-that-work-grind-rhythm"&gt;
  &lt;/a&gt;
  But you got this. Let's check back into that work grind rhythm...
&lt;/h2&gt;

&lt;p&gt;This opportunity comes once in a !!DEPENDENCY POPS UP!!! life &lt;br&gt;
time, !!DEPENDENCY POPS UP!!!  dependencies are tragically stealing hope, !!DEPENDENCY POPS UP!!! you know that, but there's code you know's crap, but that's where its at. &lt;/p&gt;

&lt;p&gt;Your backs against the ropes, just don't react - eroded code, try to decode - won't say can't or impossible but...Can't do it, won't do it, shoooouullldddnnn'ttt do it in this kinda mental mode. &lt;/p&gt;

&lt;p&gt;Try decoding the dependency ridden code anyways. You've got this. Go with the rhythm. Feel the beat? There's that vibe...&lt;/p&gt;

&lt;p&gt;Snap back to reality ope there goes dependencies, retreat to child hood contingencies. Losing hope, you childishly start to cope, feeling like you'd rather be jobless and go broke - what the hell is this application doing is this a damn joke? &lt;/p&gt;




&lt;p&gt;DEPENDENCIES ARE THE DEVIL INCARNATE (BELIEVE YOU, FIX IT)&lt;/p&gt;




&lt;p&gt;Months in this environment and all but a shell of you has withered away. You're not the only one either. Your team's going through the same thing. Good ol' competent "Know how" turns into eye rolling "No......how's our environment going to use a five minute task to steal my time for the entire damn day.....this time?". &lt;/p&gt;

&lt;p&gt;"Know how" is what you want on an engineering team. "No, how?" in a genuinely curious is also what you want. Competent "Know How" and genuine "No, How?" are the balance that greats teams are built on. &lt;/p&gt;

&lt;p&gt;Annoyance when being asked to learn something new because the environment is that tedious and broken kills the curiosity of "No, how?" while having to go through these overly tedious and tiresome tasks time and time again kills that want to be the competent individual in a room. &lt;/p&gt;

&lt;p&gt;Annoyance follows suit on both sides. Teams become frustrated. Quality suffers. Upper management gets involved. Now there's too much pressure to fix an application ridden deep within dependency hell. Great companies slowly lose engineers due to interest, lack of passion, external pressure dis-allowing them the ability to build things the right way and thus make everyone's lives better on the team and within the company. &lt;/p&gt;

&lt;p&gt;Upper management leaves and executives begin to bail noticing this pattern far before most other individuals due to simple experience in the industry. &lt;/p&gt;

&lt;p&gt;Team members who have been loyal to the company for years are promoted. They may deserve the position as far as loyalty is concerned but ultimately they don't have the training nor outside experience to handle these new middle management positions. New engineers coming in notice these signs very quickly where as engineers who have been on the team for years don't necessarily see all of the warning signs.&lt;/p&gt;

&lt;p&gt;Given new hires holding an engineering position (non-leadership role) aren't going to typically come in and start bossing around the team that just hired them due to not wanting to step on any toes there tends to be a lack of genuine competence within the organization looking in. This doesn't always mean their is actually a lack of competence. A lot of the times the newly hired engineers are more competent in industry best practices simply due to the fact that they've worked throughout the industry and often times have moved around frequently. &lt;/p&gt;

&lt;p&gt;When a process that should be quick and simple isn't, annoyance follows due to it being a waste of time. The most valuable commodity we have on this planet is time. Whether we realize it or not I believe that if our time is being wasted - that we as humans intrinsically understand how soul sucking and passionless the task must really be. &lt;/p&gt;

&lt;p&gt;The fact that our time is being invested into something that we can make more efficient but just decided is worth our time to do so is the same as telling ourselves "I'm okay wasting my life source energy on this." When we tell ourselves that the level of value we expect are okay with from ourselves then we also give the go ahead to all of those around us to have that expectation of us as well. &lt;/p&gt;

&lt;p&gt;We're telling ourselves and world that this is the level of contribution I'm okay contributing to the world. We're telling the world that my limited amount of time and energy available in this life time is trivial and it's okay for both myself and you to invest it in repetitive tasks with limited responsibility. &lt;/p&gt;

&lt;p&gt;Taking on responsibility is what gives our lives passion and reason. I believe we have a responsibility to live life to the fullest, to become a valuable resource to the ourselves and the world, and to ultimately remove the barrier through initial of front investment of resources and energy to re-claim the freedom of time and passion in our lives. Don't tell the world that our time, the only resource we'll never be able to take back, is an acceptable commodity to be wasted on trivial monotony.&lt;/p&gt;

&lt;p&gt;By not speaking up, making a move, or taking the action to implement the change within ourselves or our physical world, we are sub-consciously externalizing the value we see within ourselves and showing the world that price tag we just put on an invaluable resource of planet earth - life itself.  &lt;/p&gt;

&lt;p&gt;Our lives are valuable. Implementing the optimal operations for a team of engineers is not only important to the success of the organization but contributes to make the world better for those immediately around you on your team. Success and quality contributions to the world breed an unspoken sense of respect across a team. By removing bottle necks, investing in tasks removing trivial - tedious - or annoying tasks, and consciously taking into account that these are lives of people who have families, dreams, and aspirations worth that investment of resources to free of their time --- then you not only become a more successful team, you also become a more invigorated, loving, respected, and respectful team. &lt;/p&gt;

&lt;p&gt;When you see annoyance within the trivial tasks from your team members I believe it is the responsibility of the leaders and the team team members to work together and quite literally earn their freedom back from triviality as well as any repetitive task that down right dis-respects what value they as a human being are capable of bringing to the table.&lt;/p&gt;

&lt;p&gt;Within a year, your team will add these bits of freedom up and will reallocate them towards what really matters. They feel valued. They want to make others feel valued. Everyone respects time and understand that commitment towards not wasting time on non-enjoyable time-wasters is detrimental to success, happiness, and freedom. &lt;/p&gt;

&lt;p&gt;Dependency Hell ruins lives. It dims out previously fired up team mates and will whither away desires of passion and life.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#back-to-the-dependency-grind-work-grind-rhythm"&gt;
  &lt;/a&gt;
  Back to the dependency grind work grind rhythm...
&lt;/h2&gt;

&lt;p&gt;To drop .coms, but your forgettin' what you coded now,&lt;br&gt;
the team learned design patterns somehow, but the code won't work out but you keep on forgettin' what you coded down, its just all broken now, but on the surface your calm and steady, to drop. You just did wow, your coding' now. No chokin' allowed.&lt;/p&gt;

&lt;p&gt;On the surface you look calm and ready to drop bombs, but you keep on forgettin' what you depend on there, it's a dependency scare, this s***, what hell is this, everyone's starting to not care. Truth is we're losing hope, act like you dont care to cope, its a defensive mechanism kicking in, your skins feeling thin, &lt;/p&gt;

&lt;p&gt;Pretend like you just don't care, you're not reacting, ten seconds later your pulling out your hair, truth is your dope, you have that passion, your just losing hope, it's time get back that life fire that fills you up with satisfaction, with this bullshit it's time that we said nope.&lt;/p&gt;

&lt;p&gt;Dependency hell, drove you towards that lack of respect for yourself, wasn't good for your health, started not to care, had that thousand mile stare. Pulled out your hair and now your bald. Family members hit you up, to sad - you never called. Your skills have declined, your sitting at the dinner table and your social skills have flat-lined, it's a night mirror, thanks to dependency hell now you're officially there. &lt;/p&gt;

&lt;p&gt;Your family life, social life, professional life, and most likely even that sex life of your suffer. You're spirit is slowing walking down the road towards a non-glorious death...and you know it. Your jokes are less funny, daily interactions are less enthusiastic, and you may even make the mistake of turning towards unhealthy coping mechanisms like the absolutely outrageous idea that you don't have value to bring or any kind of thought about you not being able to change your life. You are valuable, you can change your life, and you should always remember and carry out living your life remember both of those two facts. People will treat you the way you allow them to treat you - many times we have to show, teach, and coach people up on what is and isn't an okay way to treat us. &lt;/p&gt;

&lt;p&gt;Don't be that person who doesn't value themselves or their time because it matters. Live a good life. Enjoy your work. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#escape-dependency-hell"&gt;
  &lt;/a&gt;
  ESCAPE DEPENDENCY HELL. 
&lt;/h2&gt;

&lt;p&gt;We are learning how to escape hell and set you back on the track towards happiness in your life. We are pulling you out of hell, pulling those bootstraps up, and putting some healthy responsibility and genuine passion back into your life. &lt;/p&gt;

&lt;p&gt;The truth is, hell is empty - and all of the devils are living here. We know these devils as dependencies. Today we take the road of holy righteousness and commit our very essence to the act of maliciously murdering these dependency devils. We will fight for light, goodness, and harness our warrior spirit to attack these devils with unrelenting resolve.Today we make the world the better place. We make the world a better place by starting with the only individual we are able to impact to the highest regard in positive and powerful ways. Ourselves. You as an individual and myself as an individual will focus on bettering the world around us by being the individual in our own worlds who make the world a better place. Period.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#discovering-who-we-are-as-individuals"&gt;
  &lt;/a&gt;
  Discovering Who We Are As Individuals
&lt;/h2&gt;




&lt;p&gt;&lt;em&gt;Understanding a team is much like discovering who you are yourself as an individual. In my experience, understanding human's is more about eliminating what is not meant to be than it is to understand what is meant to be. elimination of what isn't than it is about understanding what is. Life advice and team building advice go hand in hand - at the end of the day any team, business, organization, government, or country is made up of people. Truly understanding yourself or any other individual or group of individuals is hard. It's much easier to focus on who you are not and leave space for what is to naturally fall into place&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Knowing who we are is hard. It's hard. We're always changing, in motion, in constant approach to our destination, perpetually in motion, and almost never intending to head towards where we end up anyhow.&lt;/p&gt;

&lt;p&gt;Instead of asking WHO WE ARE why not simply ask WHO AM I NOT. What is it that I don't do. What are those things that aren't good for you, those things that...you know you just really shouldn't do. That bar where you always wake up with the worst hang over the day after. Those friends that are fun...but you know they really aren't the kinda people you should be hanging out with. Or those salty and sugary snacks that taste so goood going down but make you feel like trash later on.  &lt;/p&gt;

&lt;p&gt;By focusing on WHO WE ARE NOT we leave space to naturally, organically, and almost even innocently fall into who we are. We leave space for those things, people, places, and choices that fill us up, light your own fire, turn you on in this experience of life we all share and inevitably begin to find out what truly brings us joy and fulfillment in this life. &lt;/p&gt;

&lt;p&gt;Knowing who we are is hard. Focus on who you are not. Through process of elimination, naturally, we create space in our lives for those things, people, places, and passions that are truly the make up of what we want this life to be. Process of elimination.&lt;/p&gt;




&lt;p&gt;Alright, let's take part in some self-improvement via learning and simplify some dependency injection and dependency inversion design patterns!&lt;/p&gt;




&lt;p&gt;Dependency Injection, now that's something. I mean hell, what's a dependency anyways?&lt;/p&gt;

&lt;p&gt;Or...do we know what a dependency is already and the better question is to ask what a dependency is NOT? &lt;/p&gt;

&lt;p&gt;Isn't a dependency a class? Or maybe that classes methods? What about the variables we pass into that method for that class? &lt;/p&gt;

&lt;p&gt;What if our class &lt;em&gt;needs&lt;/em&gt; two dependencies to be created? What if those two dependencies are classes themselves? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if&lt;/strong&gt; the dependencies of our class have dependencies of their own that need dependencies injected which just so happen to also may or may not be self-dependent and require additional dependencies for those dependencies....&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHEN DOES THE DEPENDENCY MADNESS END!?!?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The truth is, as engineers we can define just about everything as a dependency. A variable, a conditional, an instance, function, and even the runtime. Most things in and outside of software are non-pure entities that depend on those things while being depended on by those other things. &lt;/p&gt;

&lt;p&gt;So how do we manage the fact that things rely on other things? That to create something, we may need to pass dependencies into it's constructor for it to work properly.&lt;/p&gt;

&lt;p&gt;The answer?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dependency Injection&lt;/strong&gt;&lt;br&gt;
We wire up some a design that injects the dependencies for us. More over, we implement dependency inversion, one of the only design principles that inverts a software application's dependency tree from infinitely branching dependencies out throughout the life cycle of a request. &lt;/p&gt;

&lt;p&gt;Confused yet? &lt;/p&gt;

&lt;p&gt;No worries, in this Clean Code Studio screen cast we visually simplify what a dependency is, how we inject dependencies, what differentiates dependency injection from dependency inversion, and finally go out into the wild to tinker with Laravel's service container - a component that utilizes the dependency inversion principle to implement dependency injection and save us from dependency hell.&lt;/p&gt;

&lt;p&gt;Let's dive in!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=tW6UHD81SG0"&gt;Dependency Injection&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.youtube.com/watch?v=tW6UHD81SG0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hzC0jtbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpz0p1ttp1eweprbzqbr.png" alt="Zak Horton of Clean Code Studio looking up at Floating Dependency Injection Words with interest as they fly on to the screen."&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>design</category>
      <category>php</category>
      <category>dependencyinjection</category>
      <category>dependencyinversion</category>
    </item>
    <item>
      <title>Codecademy Review. Is it worth it?</title>
      <author>Elijah Trillionz</author>
      <pubDate>Wed, 23 Jun 2021 01:58:49 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/codecademy-review-is-it-worth-it-cg6</link>
      <guid>https://dev.to/elijahtrillionz/codecademy-review-is-it-worth-it-cg6</guid>
      <description>&lt;p&gt;&lt;a href="http://codecademy.com"&gt;&lt;strong&gt;Codecademy&lt;/strong&gt;&lt;/a&gt; is a popular online learning platform for coding. This article is going to review what it offers to make learning easy.&lt;/p&gt;

&lt;p&gt;If you are not sure if Codecademy is still worth it, then this article is for you. It will help you navigate and get used to some of the great features of Codecademy.&lt;/p&gt;

&lt;p&gt;I have always considered Codecademy as one of my favorites, maybe after reading this and after using it, you will too.&lt;/p&gt;

&lt;p&gt;Feel free to navigate however you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Content:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#courses"&gt;Codecademy Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learning-tools"&gt;Codecademy Learning Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#projects"&gt;Codecademy Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#go"&gt;Codecademy GO (Mobile App)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#teams"&gt;Codecademy For Teams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#blog"&gt;Codecademy Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#students"&gt;Codecademy for Students&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#articles"&gt;Codecademy Articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#forum"&gt;Codecademy Forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pricing"&gt;Codecademy Pricing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-codecademy-courses"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;1&lt;/a&gt;. Codecademy Courses
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.codecademy.com/catalog"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EAptOqcp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/06/codecademy-review-courses.png" alt="codecademy courses" title="codecademy courses"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Codecademy courses span across 15 Computer languages, they are Java, Go, Python, JavaScript, Ruby, SQL, C++, C#, Swift, HTML, CSS, Bash/Shell, Kotlin, PHP, and R.&lt;/p&gt;

&lt;p&gt;They also have courses for frameworks and libraries like React, VueJS, React Native, NodeJS, Django, jQuery, etc.&lt;/p&gt;

&lt;p&gt;Codecademy courses are well organized based on what part of programming (subject) you are into. For example web development.&lt;/p&gt;

&lt;p&gt;The web development full package contains all you require to create a website (static or/and dynamic) and deploy it. Yes, deploy it. Codecademy have courses on how to deploy a website. Awesome right!.&lt;/p&gt;

&lt;p&gt;Some of these web development courses include VueJS, jQuery, React, Deploying to Heroku, Netlify, Git, Command line, Django, JavaScript, Python, PHP, GitHub, NodeJS, etc. You see, it is a full package.&lt;/p&gt;

&lt;p&gt;Not to worry, the courses above are not as scattered as I listed, they are well structured in terms of level. For example courses for beginners are kept in the beginners' section.&lt;/p&gt;

&lt;p&gt;The good thing about Codecademy is that some of these courses are in form of projects. They are actually projects. For example, there is a course on Back-End Engineer and there is another on how to create a Back-End App. Cool right!&lt;/p&gt;

&lt;p&gt;These courses are not very arranged in terms of roadmap or path. But Codecademy has a guide for Paths. Or if you want to be a web developer, I have made a guide in the form of a &lt;a href="https://webdeverguide.com/how-to-become-a-web-developer-in-2021"&gt;roadmap for you on my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other subjects in Codecademy are Data Science, Computer Science, Developer Tools, Machine Learning, Mobile Development, Web Design, Game Development, etc.&lt;/p&gt;

&lt;p&gt;Above all, Codecademy offers courses on interviews in different languages. So you learn a skill, take quizzes, build projects, learn how to crush an interview all in Codecademy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-codecademy-learning-tools"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;2&lt;/a&gt;. Codecademy Learning Tools
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codecademy.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cbPCKQn7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/06/codecademy-review-learning-tools.png" alt="Codecademy learning tools" title="Codecademy learning tools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will start this off by letting you know that each course has a structured module and lessons.&lt;/p&gt;

&lt;p&gt;As a user, there is a syllabus for each course. And this syllabus has modules that each in turn have lessons, quizzes, and project(s).&lt;/p&gt;

&lt;p&gt;These projects and quizzes are to test what you've learned from each module. They are only accessible to pro users. Also, there are exercises. We will talk more about this in a sub-section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exercises"&gt;
  &lt;/a&gt;
  Exercises
&lt;/h3&gt;

&lt;p&gt;Each lesson has an exercise (practice) at the end of it. It is meant for you to get more acquainted with what you learned from that lesson. You answer and preview your solutions with the Codecademy built-in text editor. (More on this to come).&lt;/p&gt;

&lt;p&gt;Now each of these exercises is well broken down into steps for you to find it easy. You asked to get some things done one after the other. Though you can do it all at once if you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: These exercises are compulsory for you to move to the next lesson or project or quiz. But you may say, "What if I can't come up with a solution to the exercise".&lt;/p&gt;

&lt;p&gt;When or if you get stuck, Codecademy provides a hint for each step (smaller units of the exercise), you can also get help from the Codecademy forum.&lt;/p&gt;

&lt;p&gt;But if you're still stuck, then you can simply view the solution to the exercise. This option should be your last resort. Try to not make it your first option. With these three solutions, you can never get stuck for long.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#taking-breaks"&gt;
  &lt;/a&gt;
  Taking Breaks
&lt;/h3&gt;

&lt;p&gt;Codecademy has a tool for taking breaks. It's a customizable timer. Taking breaks is essential for every human, so having a tool like this close to what you're using makes life easier and faster.&lt;/p&gt;

&lt;p&gt;You can set it up in a way that reminds you when to take a break and also reminds or notify you when to resume learning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#text-editor"&gt;
  &lt;/a&gt;
  Text Editor
&lt;/h3&gt;

&lt;p&gt;Codecademy's built-in text editor is probably the best you will ever see in online learning platforms. It's the best have seen so far.&lt;/p&gt;

&lt;p&gt;It is customizable, supports multiple files, supports syntax highlighting, supports autocomplete, file uploads.&lt;/p&gt;

&lt;p&gt;Along with the text editor is a code preview which can act as a &lt;strong&gt;console&lt;/strong&gt;, and a &lt;strong&gt;browser&lt;/strong&gt;. The text editor and code preview are like that of &lt;a href="https://replit.com"&gt;&lt;strong&gt;Replit&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keyboard-shortcut"&gt;
  &lt;/a&gt;
  Keyboard shortcut
&lt;/h3&gt;

&lt;p&gt;Tired of moving your mouse all the time? Not to worry because Codecademy provides a set of keyboard shortcuts to help you move around easily.&lt;/p&gt;

&lt;p&gt;For example, submitting an exercises is ctrl(cmd) + Enter. When you hover over a button, a tooltip of that shortcut will be shown if it exists.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#staying-focus"&gt;
  &lt;/a&gt;
  Staying focus
&lt;/h3&gt;

&lt;p&gt;In this section, I am gonna talk about some of the features Codecademy provides for you to stay focused and consistent.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#i-goals"&gt;
  &lt;/a&gt;
  i. Goals:
&lt;/h4&gt;

&lt;p&gt;Goals are activities that you set for yourself to accomplish. Could be recursive like weekly or even long-term. For each of these goals accomplished Codecademy will notify you.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ii-progress-tracker"&gt;
  &lt;/a&gt;
  ii. Progress Tracker:
&lt;/h4&gt;

&lt;p&gt;Codecademy provides a tracker that tracks your progress on different courses. This tracker simply indicates how far you've gone in a course and how much more is left. Progress can also be easily reset with a click.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#iii-achievements"&gt;
  &lt;/a&gt;
  iii. Achievements:
&lt;/h4&gt;

&lt;p&gt;For every goal, lesson, module, and course you complete, Codecademy stores it up as an achievement. Codecademy gives you badges that can serve as a source of encouragement and building confidence for you to stay focused.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cheatsheet"&gt;
  &lt;/a&gt;
  Cheatsheet
&lt;/h3&gt;

&lt;p&gt;Each module contains a cheatsheet for you to review, revise or run back to when needed. These cheatsheet are a summary of what you've learned from a module.&lt;/p&gt;

&lt;p&gt;They include detailed explanations with code snippets. You can easily print or download them to your system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#certificate-of-completion"&gt;
  &lt;/a&gt;
  Certificate of Completion
&lt;/h3&gt;

&lt;p&gt;A certificate of completion is given to pro-users at the end of each course. How useful can this be during interviews? It may be a little bit useful but it is not needed. Not having a certificate doesn't stop you from applying to a company and getting the job right?.&lt;/p&gt;




&lt;p&gt;See also: &lt;a href="https://webdeverguide.com/20-places-to-learn-programming-for-free"&gt;20+ Places to Learn Programming for Free&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-codecademy-projects"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;3&lt;/a&gt;. Codecademy Projects
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codecademy.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y58gJzN7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/06/codecademy-review-projects.png" alt="codecademy projects" title="codecademy projects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Codecademy projects can be very helpful, it usually comes after the completion of a module or as a course itself. It's learning a skill or a new thing and see how it is used in real-world applications.&lt;/p&gt;

&lt;p&gt;It is through the application of what you've learned you can tell if you understood what you learned or not.&lt;/p&gt;

&lt;p&gt;There is nothing as cool as applying what you learned into a real application or task. But how would one who is new to JavaScript promises know which projects one should do?&lt;/p&gt;

&lt;p&gt;This is where Codecademy comes in. They give you a project to do and how to do it. These projects are related to the module you just concluded. I usually recommend trying to work on the project before checking how it was done.&lt;/p&gt;

&lt;p&gt;Such acts give you an edge over your proposed progress. So you get the project idea from Codecademy and try to build it. If you're unable to get the project working, never get discouraged. At least you tried. Better to fail than to not try.&lt;/p&gt;

&lt;p&gt;These projects are available to pro users only. Non-pro users only get to see the project idea.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-codecademy-go-mobile-app"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;4&lt;/a&gt;. Codecademy GO (Mobile App)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codecademy.com/resources/blog/codecademy-go-faq"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JM-vi1en--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/06/codecademy-go.png" alt="codecademy go app" title="codecademy go app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codecademy.com/resources/blog/codecademy-go-faq/"&gt;Codecademy GO&lt;/a&gt; is a Codecademy mobile app for Android and iOS users. This app helps you review and practice what you learn on the web, anywhere anytime.&lt;/p&gt;

&lt;p&gt;"It brings learning, practicing and practicality via articles together into one place" - a Codecademy GO user.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-codecademy-for-teams"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;5&lt;/a&gt;. Codecademy for Teams
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codecademy.com/business"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s_Kpuv2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/06/codecademy-review-for-teams.png" alt="codecademy for teams" title="codecademy for teams"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apart from individuals and students, &lt;a href="https://www.codecademy.com/business"&gt;Codecademy is available for teams&lt;/a&gt;. A company that wants to train its staff with a new skill can make use of Codecademy for Teams to do that.&lt;/p&gt;

&lt;p&gt;With the Codecademy for Teams, Codecademy guarantees interactive learning, step-by-step guidance, proof of progress, and cutting-edge courses, with unlimited access to course content/&lt;/p&gt;

&lt;p&gt;Not a lot of information on this from me, but what I can tell you is that it is not so expensive. At least that's what I thought. It costs over $200/seat (or staff) annually, with a minimum of 5 seats per company.&lt;/p&gt;

&lt;p&gt;If Codecademy for teams is what they say it is, then the pricing is worth it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-codecademy-blog"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;6&lt;/a&gt;. Codecademy Blog
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codecademy.com/resources/blog"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lE4vfaRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/06/codecademy-review-blog.png" alt="codecademy blog" title="codecademy blog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.codecademy.com/resources/blog/"&gt;Codecademy blog&lt;/a&gt; is an exciting resource for coding tips, recommendations, news, advice, etc.&lt;/p&gt;

&lt;p&gt;They have a lot of good writers who are tech experts and they post every time. Never get to wait long for another article.&lt;/p&gt;

&lt;p&gt;Some of these articles are backed up with videos for proper illustrations. The good thing about it is you don't need to be a Codecademy user before you have access to the blog. Everyone has access.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-codecademy-for-students"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;7&lt;/a&gt;. Codecademy for Students
&lt;/h2&gt;

&lt;p&gt;So many things to talk about in Codecademy. Well here is yet another interesting thing about this online learning platform.&lt;/p&gt;

&lt;p&gt;Codecademy provides a special offer (a lesser offer) for &lt;a href="https://www.codecademy.com/student-center"&gt;college students&lt;/a&gt; as well as special features. Eligible college students will have access to a course called CS101.&lt;/p&gt;

&lt;p&gt;CS101 is an introduction to computer science. It consists of all the basics of programming like Functions, Variables, Loops, Arrays, etc. This course is a live-streamed course.&lt;/p&gt;

&lt;p&gt;Also, Codecademy has recently partnered with &lt;a href="https://clever.com/library/app/codecademy"&gt;Clever&lt;/a&gt; to give free pro memberships to high school classes in the United States.&lt;/p&gt;

&lt;p&gt;Teachers are responsible for signing up their students. So far there are over 997 teachers using it. Cool stats. Because it is free, some of the great features of Codecademy are not present. Like the progress tracker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-codecademy-articles"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;8&lt;/a&gt;. Codecademy Articles
&lt;/h2&gt;

&lt;p&gt;Feel like you didn't really understand what you learned from a module or course? Well, &lt;a href="https://www.codecademy.com/articles/"&gt;Codecademy articles&lt;/a&gt; will help you out.&lt;/p&gt;

&lt;p&gt;They are in-depth explanations about concepts that you learned from a module or course. They span across the 15 languages and subjects Codecademy offers (mentioned above).&lt;/p&gt;

&lt;p&gt;Articles can serve as a pre-study or post-study. You can read articles before studying a module or read articles after studying a module. Articles can help both ways.&lt;/p&gt;




&lt;p&gt;How would you like to know the &lt;a href="https://webdeverguide.com/the-10-important-full-stack-web-development-tools-in-2021"&gt;10 Essential Web Development tools&lt;/a&gt; and their alternatives used by developers everyday?.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#9-codecademy-forum"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;9&lt;/a&gt;. Codecademy Forum
&lt;/h2&gt;

&lt;p&gt;Not as popular as other forums. But it doesn't fail to help you. With the &lt;a href="https://discuss.codecademy.com/"&gt;Codecademy forum&lt;/a&gt; you can get help for coding problems, relate with the community, make friends, provide solutions to other people's problem.&lt;/p&gt;

&lt;p&gt;The Codecademy forum is mostly used when students get stuck at exercises or projects while learning with Codecademy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-codecademy-pricing"&gt;
  &lt;/a&gt;
  &lt;a href="#"&gt;10&lt;/a&gt;. Codecademy Pricing
&lt;/h2&gt;

&lt;p&gt;Codecademy has a very generous &lt;a href="https://www.codecademy.com/pricing"&gt;plans&lt;/a&gt; for its subscribers. There are three plans, the first is for free, the second is with a small token and the last is for teams which we already made mention of.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#free-forever-basic-plan"&gt;
  &lt;/a&gt;
  Free Forever (Basic Plan)
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What you get:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With this plan, you can access all basic courses, get support. You also get access to mobile practice but it is limited thereby making the app almost useless.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you don't get:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The basic plan doesn't give you access to pro features. Some of which are projects, quizzes, members-only content, certificate of completion, unlimited mobile practice, etc.&lt;/p&gt;




&lt;p&gt;Considering learning a &lt;strong&gt;coding skill&lt;/strong&gt;? Have you considered a laptop suitable for coding yet?&lt;/p&gt;

&lt;p&gt;Not to worry, here are &lt;a href="https://webdeverguide.com/cheap-recommended-laptops-for-coding"&gt;&lt;strong&gt;cheap recommended laptops for coding.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#pro"&gt;
  &lt;/a&gt;
  Pro
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What you get:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pro users have access to everything the basic plan offers and additionally have access to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Unlimited mobile practice,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Members-only content,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Real-world projects,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Quizzes,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step-by-step guidance,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Certificate of completion,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and a pat on your back.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What you don't get:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nothing. You already have everything, except features for teams.&lt;/p&gt;

&lt;p&gt;Pro members are billed yearly paying $19.99/month. With this, you save $240. You can choose to be billed monthly at $39/month.&lt;/p&gt;

&lt;p&gt;The choice is yours, but why should you pay for a year when you can complete a skill or your desired course in 3 - 6 months. So get to know how fast you can go, do the math and go for the one that is better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;To round this up, I'd say go for it. Learn that skill you have always wanted to learn, apply it to your dream company, and do what you love for the company you love.&lt;/p&gt;

&lt;p&gt;Alright, leave a comment for me if you want to correct me, tell me something. If you enjoyed this article please share it with your friends, I believe they will also find this useful.&lt;/p&gt;

&lt;p&gt;Also if you wanna support my blogging journey, you want me to keep posting, you can support me by &lt;a href="https://www.patreon.com/elijahtrillionz"&gt;becoming a patron&lt;/a&gt; or you can &lt;a href="https://www.buymeacoffee.com/elijahtrillionz"&gt;buy me a coffee&lt;/a&gt;. Thank you and have a great time learning that skill.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Vaccination Game (Canvas API)</title>
      <author>Claudio Bonfati</author>
      <pubDate>Tue, 22 Jun 2021 23:57:57 +0000</pubDate>
      <link>https://dev.to/claudiobonfati/the-vaccination-game-canvas-api-5b9j</link>
      <guid>https://dev.to/claudiobonfati/the-vaccination-game-canvas-api-5b9j</guid>
      <description>&lt;p&gt;Last year I've worked on a project where I had to develop a small game alongside other components. But recently I've decided to isolate this game as a single stand-alone project since it was a good way to share a bit about canvas development and possibly introduce someone that &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;Canvas API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This article is intended to detail the development process of the game and some fundamentals of how to deal with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;Canvas API&lt;/a&gt; for similar projects.&lt;/p&gt;

&lt;p&gt;First things first, you can take a look at the &lt;a href="https://github.com/claudiobonfati/vaccination-game"&gt;GitHub Project ⭐&lt;/a&gt; or just &lt;a href="https://claudiobonfati.github.io/vaccination-game/"&gt;play the game 🎮&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before jumping into coding, we must have some things clear in mind, such as the concept of the game, the goal, how to win, and how to lose. If you have played it already, you've probably got it, but here is a quick overview:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The game consists of a population of 54 people separated in a grid system that keeps them apart from each other. As the game starts, 2 random people are infected by a disease. Infected people tend to infect the nearby population by randomly choosing what neighbors they will try to infect and at what speed the disease will reach them. By clicking at the healthy person we can vaccinate them, allowing them to become immune to the disease. The goal is to trap the disease right at the start, preventing it to spread further through the population and then vaccinate all remaining healthy people. I also added a timer of 30 seconds to make things a little bit more interesting.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's start by setting up our Canvas environment. For this project, I've chosed the framework &lt;a href="https://nuxtjs.org/"&gt;NuxtJS&lt;/a&gt; to work with &lt;a href="https://vuejs.org/"&gt;VueJS&lt;/a&gt; to handle all the interface interactions and also the engine responsible to create the triggers we will be needing later. After this quick introduction, let's start!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#global-wrapper"&gt;
  &lt;/a&gt;
  Global wrapper
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2JZx6zov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ubjjjpvbbdxykf6yqlh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2JZx6zov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ubjjjpvbbdxykf6yqlh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing - and the most obvious one - is to "create a NuxtJS project". I set it up with nothing different from a simple project, with an index page, global style, and a single component called "Game" to manage all functionalities and interactions.&lt;/p&gt;

&lt;p&gt;But one thing is important to highlight here. The Game component will handle the &lt;em&gt;interactions&lt;/em&gt; with VueJS, but all &lt;em&gt;behaviors&lt;/em&gt; of the game will be set up directly with Canvas API and a javascript Class we will also be creating later. Remember these two terms, the difference between them will get clear as we talk more about canvas.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#markup-structure"&gt;
  &lt;/a&gt;
  Markup structure
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zz7V8NjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npffq6vtriq0283wgnr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zz7V8NjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npffq6vtriq0283wgnr9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All HTML needed was created and styled at the Game component. But again, one thing is an important note here. Our game must have some "sections", which are the steps where the player will be. If we take a look that the player's journey, it starts at a &lt;em&gt;welcome page&lt;/em&gt;, then the &lt;em&gt;game&lt;/em&gt; starts and after the timer goes out (or the player vaccinate all the population), it has two possible endings, they will &lt;em&gt;win&lt;/em&gt;, or &lt;em&gt;lose&lt;/em&gt;. These steps are what we called "sections" here.&lt;/p&gt;

&lt;p&gt;To manage these sections, I chosen the &lt;a href="https://greensock.com/gsap/"&gt;GreenSock&lt;/a&gt; javascript library to handle activating (showing) and deactivating (hiding) each section whenever we need it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#things-start-to-get-interesting"&gt;
  &lt;/a&gt;
  Things start to get interesting
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9c-HA-AH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgjm5skgyn4tlzrbezi2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9c-HA-AH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgjm5skgyn4tlzrbezi2.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our environment properly set up, we can start talking about the game itself. In a simplistic overview, to work with Canvas we need two main things: a &lt;em&gt;canvas HTML tag&lt;/em&gt; and a &lt;em&gt;javascript function&lt;/em&gt; that will be pointed as our &lt;strong&gt;requestAnimationFrame()&lt;/strong&gt; handler, that will create a 2D context allowing us to draw some shapes onto the canvas. And what does this &lt;strong&gt;requestAnimationFrame()&lt;/strong&gt; function do exactly?!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"&lt;strong&gt;requestAnimationFrame()&lt;/strong&gt; is the method from Web API that tells the browser that you wish to perform an animation and requests that the browser calls a specified function to update an animation [...]"&lt;/em&gt; _ by &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame"&gt;MDN Web Docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now a non-technical explanation: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"It calls a function over and over again for literally every single frame, and this function will draw an updated image onto the canvas with minor differences from the previous frame, simulating the idea of movement."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now let's do this at our Game component. We create a canvas HTML tag and a VueJS method called &lt;strong&gt;animate()&lt;/strong&gt;, and the first thing this method does is to "request-animation-frame" pointing itself as the argument so this function can be called for every frame.&lt;/p&gt;

&lt;p&gt;This is the initial setup for all canvas development. From now on we can start looking at our project specifically, but all the concepts that will be detailed here can be applied to different scenarios.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#population-grid"&gt;
  &lt;/a&gt;
  Population grid
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJaDPbyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyf4jlwysk419vn721dk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJaDPbyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyf4jlwysk419vn721dk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you may have noticed, we will need to create a grid to display the population, with lines and columns. At this point, we need to start talking about the basics of what we can draw on a canvas.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;draw()&lt;/strong&gt; function that we talked about earlier receive as the first argument a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes"&gt;rendering context&lt;/a&gt;, this context is an object with properties and methods that you can use to render graphics inside the canvas element, such as Lines (that can be curved or straight) and Circles. For our game, these are the only two shapes we will be using - since the game is &lt;em&gt;a bunch of lines and circles&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We already have the canvas width and the height values that we used to style it. But now, to create a grid system, we just need to use the power of math to get the starting-point and the ending-point for each line and column. These points are specified as coordinates related to the top side (X-axis) and left side (Y-axis) of the canvas, and that's the part where we start looking at the canvas as a Cartesian Coordinate System that will guide us throughout the next steps.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-a-person"&gt;
  &lt;/a&gt;
  Create a person
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LbKQgyYK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j0nk19u3t40w01x2zyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LbKQgyYK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j0nk19u3t40w01x2zyq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is one of the most interesting parts. As we already defined as the game scope, every person has a predefined (and identical) way to behave and interact with each other, but here is a reminder:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"[...] Infected people tend to infect the nearby population by randomly choosing what neighbors they will try to infect and at what speed the disease will reach them. [...]"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we have a situation like this, the best decision to make is to deal with Classes - where a single structure can have multiple instances.&lt;/p&gt;

&lt;p&gt;Now we can create a javascript class named "Person" in a separated javascript file that will be imported into the Game component. Initially, the class must have at least two things, a &lt;strong&gt;constructor()&lt;/strong&gt;, and a &lt;strong&gt;draw()&lt;/strong&gt; method. The constructor will receive the initial values for each variable the person will need, such as coordinates where it will be placed at the canvas, the current state ("healthy", "infected" or "vaccinated"), what neighbors it will spread the disease when and if infected, the spreading speed, and so on...&lt;/p&gt;

&lt;p&gt;At this &lt;strong&gt;draw()&lt;/strong&gt; method we must create the shapes that will form the face, and this "face" consists of three simple elements (the head, left eye, right eye, and mouth). And since we received the center coordinates for the person at the &lt;strong&gt;constructor()&lt;/strong&gt;, we can again use the power of math to draw all three elements and place them related to this center point.&lt;/p&gt;

&lt;p&gt;It's important to detail here that some aspects of the face will vary based on the person's state property, like the color that will be &lt;em&gt;blue&lt;/em&gt; for healthy people, &lt;em&gt;red&lt;/em&gt; for infected people, and &lt;em&gt;yellow&lt;/em&gt; for the vaccinated ones.&lt;/p&gt;

&lt;p&gt;For now, we must also have in mind that all the population will be instantiated from the Game component, once we have a basic structure for it to work. In fact, thats exactly the next step...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#populate-grid-with-54-people"&gt;
  &lt;/a&gt;
  Populate grid with 54 people
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lvKR95SF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fphhqgqu4w2hw7vma1b5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lvKR95SF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fphhqgqu4w2hw7vma1b5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that the Person class has a simple structure, we can instantiate the population at the Game component. This process will take a bit to finish since this is the moment we need to define no only the center coordinates for each person, but also randomly define the directions it's going to infect its neighbors and randomly define the spreading speed for each "disease arm". &lt;/p&gt;

&lt;p&gt;For this logic to be simulated with javascript, we can use &lt;strong&gt;Math.random()&lt;/strong&gt; method to create a random value from 0 to 1 and pass this value to the Person class.&lt;/p&gt;

&lt;p&gt;There is also one thing that must be clear here. If you recall one detail of the game scope, each person will be able to infect their neighbors by trying to infect them once the disease has reached them. The mechanic behind it is simple: "if the disease arm reaches the neighbor, and it's not vaccinated yet, the neighbor will turn into an infected individual". To create this logic, two things will be needed: the first is that at the Person class we will create a function able to try to infect the current person, and the second thing is that for each person of the population we will need to store the instances of its surrounding neighbors so we can trigger this &lt;strong&gt;tryToInfect()&lt;/strong&gt; method once the disease reaches them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#disease-spreading"&gt;
  &lt;/a&gt;
  Disease spreading
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BSoPVu5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo8u8r53sxxwdiiokcsl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSoPVu5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo8u8r53sxxwdiiokcsl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mathematics starts to have a bigger role here. If you ever thought that you would never use the Pythagorean Theorem in your life, I'll try to convince you otherwise. Looking to a single person, they can try to infect their neighbors in 8 different directions (&lt;em&gt;top&lt;/em&gt;, &lt;em&gt;top-right&lt;/em&gt;, &lt;em&gt;right&lt;/em&gt;, &lt;em&gt;bottom-right&lt;/em&gt;, &lt;em&gt;bottom&lt;/em&gt;, &lt;em&gt;bottom-left&lt;/em&gt;, &lt;em&gt;left&lt;/em&gt;, &lt;em&gt;top-left&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;This article wont turn into an Algebra class, but if you think about it for long enough you will start to see some triangles being formed to define all the 8 arms of the disease related to the center of the face and two close neighbors. The principle that needs to be mentioned is that for each one of these arms we must have stored all the way-points between the center and neighbor's edge in an array so we can control the arm movement and its speed until it reaches the neighbor and try to infect them. And to accomplish that, there isn't much we can do besides applying some algebra formulas to get and store the values.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deliver-the-vaccine-to-the-population"&gt;
  &lt;/a&gt;
  Deliver the vaccine to the population
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--si7GyJza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e58zaub48tgexwaxz5i2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--si7GyJza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e58zaub48tgexwaxz5i2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it's time to create the &lt;em&gt;interaction&lt;/em&gt; that will wait for the player to click/tap at some person, and the &lt;em&gt;behavior&lt;/em&gt; to apply the vaccine that will be triggered with this &lt;em&gt;interaction&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First I created a method at the Person class called &lt;strong&gt;applyVaccine()&lt;/strong&gt;. The idea behind it is also simple: "if the person is not 'infected', change its state to 'vaccinated'".&lt;/p&gt;

&lt;p&gt;After creating this method we can create the event listener to wait for the player's interaction to trigger the &lt;strong&gt;applyVaccine()&lt;/strong&gt; method. The trigger can be built receiving the coordinates from the mouse position related to the canvas element, and these coordinates must be compared with the existing center point from every person instantiated. And if the difference between these two points is smaller than the radio of the head circle, the player clicked at a person.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sound-effects-and-scoreboard"&gt;
  &lt;/a&gt;
  Sound Effects and Scoreboard
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PVlb_CpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht8wm7y8d90rz69w7glu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PVlb_CpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht8wm7y8d90rz69w7glu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are getting to the end. Now we reached a point where the "soul of the game" is already created, the main &lt;em&gt;interactions&lt;/em&gt; (witch are the functions we've defined at the Game component) and &lt;em&gt;behaviors&lt;/em&gt; (which are the methods created at the Person class), we can focus some effort at the smaller things, such as the scoreboard, the timer, and sound effect management.&lt;/p&gt;

&lt;p&gt;We stored all instances of the Person class, and with this list we can easily retrieve the current state of each one of them, calculate its percentage, and display it on the Scoreboard. It's always important to remember that for all functions that we want to run for each frame, it must be executed at the &lt;strong&gt;animate()&lt;/strong&gt; method, and with the Scoreboard update, it's no different.&lt;/p&gt;

&lt;p&gt;Sounds effects can be easily implemented using &lt;a href="https://www.npmjs.com/package/howler"&gt;Howler.js&lt;/a&gt;, an awesome library able to manage mp3 files in a reliable way across all platforms. It works in a similar way as &lt;a href="https://greensock.com/gsap/"&gt;GreenSock&lt;/a&gt;, we instantiate the audios, and play/pause/restart them whenever it's needed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h1&gt;

&lt;p&gt;Working with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;Canvas API&lt;/a&gt; usually requires more than we initially think, but between all the math, rules, and exceptions we create, the logic of the game can be found as a simple and straightforward storyline, just like it was described at the beginning of this post.&lt;/p&gt;

&lt;p&gt;As it was mentioned before, I created this game in particular as a stand-alone project with the idea to introduce new developers to canvas development. Trying to accomplish that, the &lt;a href="https://github.com/claudiobonfati/vaccination-game"&gt;⭐ GitHub Project ⭐&lt;/a&gt; is full of comments for every function, method, code block, and property that needs guidance describing what it does. With these comments, the whole story I told here can also be found in javascript language right there.&lt;/p&gt;

&lt;p&gt;When looking for the final project I wouldn't say it was easy to develop, there were a ton of problems along the way, crashes, conflicts, things that I initially had no idea how to fix, but as I said at an old article:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Start from the basics, recognize how the next step looks like, and work on it. Problems are inevitable and that's what makes each project unique in some way, and winning these small battles is one of the things that motivate us to go to the next one."&lt;/em&gt; _ from &lt;a href="https://dev.to/claudiobonfati/what-if-linkedin-was-beautiful-23go"&gt;What if LinkedIn was beautiful?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's all, everyone. If you made this far, congratulations, and thank you for reading. And also, feel free to &lt;a href="https://www.linkedin.com/in/claudiobonfati/"&gt;connect with me&lt;/a&gt; on LinkedIn.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>gamedev</category>
      <category>vue</category>
      <category>showdev</category>
    </item>
    <item>
      <title>The History Of JavaScript ⌛</title>
      <author>Victor Ikechukwu</author>
      <pubDate>Tue, 22 Jun 2021 23:35:48 +0000</pubDate>
      <link>https://dev.to/mr_victor/the-history-of-javascript-1fp3</link>
      <guid>https://dev.to/mr_victor/the-history-of-javascript-1fp3</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nowadays JavaScript is everywhere 🌍&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hello 👋, Beautiful Coders on the internet 😃. In this article, I would share with you a quick yet comprehensive overview of how the most popular and widely used programming language in the world evolved to be what it is today.&lt;/p&gt;

&lt;p&gt;Over the years JavaScript has become the most popular and versatile programming language. Powering over 97% of the web. As a web developer knowing the history of the most popular and in-demand programming language is a plus that will help enhance your understanding of the language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1995-the-birth-of-javascript"&gt;
  &lt;/a&gt;
  1995: The Birth of JavaScript
&lt;/h3&gt;

&lt;p&gt;Back in May 1995, the internet was becoming popular. The web back then was just static pages that were often text-heavy and ugly 😌.&lt;/p&gt;

&lt;p&gt;the best ones had images floated to the left or right. Not exciting when you compare it to the web today 🤔&lt;/p&gt;

&lt;p&gt;The Web needed to be more dynamic. Animations, interactions, and other forms of small automation needed to be the future of the web. To achieve that future the web needed a scripting programming language that ran in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Brendan_Eich"&gt;Brendan Eich&lt;/a&gt; a programmer at Netscape was given the job to make this possible and in just ten days he created the JavaScript programming language (originally called Mocha during its development and then changed to LiveScript )&lt;/p&gt;

&lt;p&gt;On December 4, 1995, the internet saw the first release of the JavaScript programming language&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1996-javascript-vs-java"&gt;
  &lt;/a&gt;
  1996: JavaScript vs. Java
&lt;/h3&gt;

&lt;p&gt;Shortly after its release its name was changed from LiveScript to JavaScript. Many say the reason for the change was to attract developers of another buzzed programming language that was very popular at the time. Which was Java.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The "Java" in JavaScript was just for marketing reasons only 💡.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because the language itself JavaScript has nothing to do with Java! ☝&lt;/p&gt;

&lt;p&gt;Java is a statically typed, compiled programming language, on the other hand. (vanilla) JavaScript is dynamically typed, and interpreted at run-time. check this &lt;a href="a%0Ahref=%22https://www.javatpoint.com/difference-between-java-and-javascript%22"&gt;article &lt;/a&gt;for more concise details on the differences btw Java and JavaScript&lt;/p&gt;

&lt;p&gt;Many beginners intertwine the two languages as one 👀. But no. JavaScript and Java are actually two complete different programming languages&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1997-ecmascript-is-born-as-the-javascript-standard"&gt;
  &lt;/a&gt;
  1997: ECMAScript Is Born As The JavaScript Standard
&lt;/h3&gt;

&lt;p&gt;A year later, in 1997. JavaScript had experienced rapid growth as many developers adopted the language and more browsers started adding JavaScript support. It became clear that the language would need to be properly maintained and managed. Therefore Netscape and the developers of the language submitted the JavaScript programming language to the standards organization &lt;a href="a%0Ahref=%22https://www.ecma-international.org%22"&gt;European Computer Manufacturers Associate (ECMA) International&lt;/a&gt; a Swiss organization to define international standards for computing. For consideration as the industry standard.&lt;/p&gt;

&lt;p&gt;a technical committee at EMCA known as &lt;a href="https://tc39.es/"&gt;TC39&lt;/a&gt; is the organization behind the standardization of the ECMAScript (JavaScript) specification. The TC39 committee is a group of JavaScript developers, implementers, academics, and more from different companies including Google, Microsoft, Netflix, Facebook, and Paypal. Their job is for creating, approving, and denying language features, to maintain and evolve the definition of JavaScript&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W98VDkng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622409106667/8TVDyA-uh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W98VDkng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622409106667/8TVDyA-uh.jpeg" alt="tc39.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;with that, the first standard version of the JavaScript language that was supported across all browsers ~ ECMAScript 1 or commonly known as ES1 was released&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2009-es5"&gt;
  &lt;/a&gt;
  2009: ES5
&lt;/h3&gt;

&lt;p&gt;In 2009 the JavaScript version ES5 (ECMAScript 5) was released with a lot of new major features like JSON support, Getters &amp;amp; Setters on Objects, new array methods like forEach and map that were not yet wildly supported among different browsers. as a result, it took some years for browsers to support these features.  &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#as-a-web-developer-you-must-understand-es5-why"&gt;
  &lt;/a&gt;
  As a Web developer, you must understand ES5, why? 👇
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;ES5 is the standard version of JavaScript Programming, as it is fully supported in all major browsers i.e internet explorer.&lt;/li&gt;
&lt;li&gt;Many &lt;code&gt;(old)&lt;/code&gt; codebases are still written in ES5.&lt;/li&gt;
&lt;li&gt;it's better and easier to learn the fundamentals in ES5, and then update to ES6 and ESNext.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2015-anticipated-update-of-the-year-es6es2015"&gt;
  &lt;/a&gt;
  2015: Anticipated Update of the year ~ ES6/ES2015
&lt;/h3&gt;

&lt;p&gt;In June 2015, the much-awaited and anticipated version of the language 😄 &lt;strong&gt;ES6&lt;/strong&gt; was released &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_FLjluq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622406530419/od92Nllw-.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_FLjluq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622406530419/od92Nllw-.gif" alt="Its Like The Album Of The Year&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Which was &lt;strong&gt;the biggest update to the language ever!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ES6 brought new syntax and awesome features to make your code more modern and readable. It allows you to write less code and do more. ES6 introduces many great features like arrow functions, template literals, classes, destructing, Modules… and more.&lt;/p&gt;

&lt;p&gt;This was(is) a really big deal for the whole JavaScript community.&lt;/p&gt;

&lt;p&gt;Ever since the major 2015 ES6 release, The TC39 committee changed to an annual release cycle. This means a new version of JavaScript with just a few new features is released every year. Instead of shipping a huge new version, with a ton of features every couple of years 😔.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next-esnext"&gt;
  &lt;/a&gt;
  What’s next? ESNext
&lt;/h3&gt;

&lt;p&gt;ESNext is the name that indicates the next version of JavaScript(ECMAScript) that is to be released.&lt;/p&gt;

&lt;p&gt;As of the time of writing, the current ECMAScript version is ES2020(ES11). It was released in June 2020.&lt;/p&gt;

&lt;p&gt;It is usually common for JavaScript editions to be standardized during the summer, so we can expect ECMAScript 2021(ES12) to be released this summer 😉.&lt;/p&gt;

&lt;p&gt;At the time of writing, ES2020(ES11) has been released, and ESNext is ES2021(ES12)&lt;/p&gt;

&lt;p&gt;Proposals to the ECMAScript standard are organized in stages. Stages 1–3 are an incubator of new features, and features reaching Stage 4 are finalized as part of the new standard.&lt;/p&gt;

&lt;p&gt;At the time of writing we have several features at Stage 4. The latest versions of the major browsers should already implement most of those.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-javascript"&gt;
  &lt;/a&gt;
  Types of JavaScript
&lt;/h3&gt;

&lt;p&gt;In the industry, you often hear terms like vanilla or plain JavaScript. It’s just how developers refer to JavaScript without any frameworks or libraries. We know that ECMAScript 2015 or ES6 is the standard version of vanilla JavaScript. But JavaScript also comes in other forms for example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hJwLfUzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375885446/SekpW5ffc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hJwLfUzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375885446/SekpW5ffc.jpeg" alt="typescript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/"&gt;Typescript&lt;/a&gt; was created by Microsoft, it’s a strict syntactical superset of JavaScript, and adds optional static typing to the language. The browser cannot understand a file written in Typescript so it needs to be compiled into standard JavaScript code so it can run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W8IVWJ8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375963331/UrFuFEGNE.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W8IVWJ8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375963331/UrFuFEGNE.jpeg" alt="coffee-script"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt; adds syntax sugar to JavaScript that makes it in an effort to enhance JavaScript’s brevity and readability. Its also not understood by rowsers and needs complied into standard JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PrrNwGgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375998748/fyE6bnpzV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PrrNwGgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375998748/fyE6bnpzV.jpeg" alt="dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dart.dev/"&gt;Dart&lt;/a&gt; is an object-orientated JavaScript language made by Google. Dart is used to create highly complex and easily scalable apps for the web, mobiles. Dart has been approved by ECMA like vanilla JavaScript. Dart uses a different syntax than vanilla JavaScript but it can be translated into vanilla so it can be used in a browser. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mcpJNg3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376024282/WdbHQrOJB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mcpJNg3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376024282/WdbHQrOJB.png" alt="nodejs"&gt;&lt;/a&gt;&lt;a href="https://nodejs.org"&gt;Node.js&lt;/a&gt; is a cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser. Node.js lets developers use JavaScript to write command-line tools and for server-side scripting—running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jtF91cVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376049961/pC3xXets4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jtF91cVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376049961/pC3xXets4.png" alt="reactjs"&gt;&lt;/a&gt;&lt;a href="https://reactjs.org%0A"&gt;React&lt;/a&gt; is a JavaScript front-end library for building user interfaces or UI components. It is maintained by Facebook and a community of individual developers and companies. React is mainly used as a base in the development of single-page or mobile applications. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KxniWmCs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376070383/zpP12xsUy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KxniWmCs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376070383/zpP12xsUy.jpeg" alt="jquery"&gt;&lt;/a&gt;&lt;a href="https://jquery.com/"&gt;Jquery&lt;/a&gt; was made to simplify JavaScript making it easier to learn. It takes a lot of common JavaScript tasks that need lots of code to write in vanilla and wrap them into a single line. The Jquery contains features like DOM traversal and manipulation, event handling, Animation, and even Ajax. Jquery doesn’t need to be compiled and will run in all major browsers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-is-javascript-today"&gt;
  &lt;/a&gt;
  Where is JavaScript Today
&lt;/h3&gt;

&lt;p&gt;Although the origins of JavaScript started in the web browser, it has now evolved beyond that to become a multi-platform language. Supporting all major paradigms of programming.  &lt;/p&gt;

&lt;p&gt;The most common place you’ll encounter JavaScript is on the web. Developers now use JavaScript to make websites more engaging with things like 3D graphics, animations, transitions, and more. It’s also possible to build native mobile apps that run both on iOS and Android using JavaScript.&lt;/p&gt;

&lt;p&gt;frameworks like React &amp;amp; Ionic. You can even find JavaScript in Desktop applications like the text editor Visual Studio Code 😏 and popular messaging apps like Slack. It can be used to control hardware with IoT devices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;I hope this article helped you. Now you have a nice overview of the history/ evolution of the most popular programming language of the web.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a topic that could come up in an interview 🤷‍♂️, so yeah it's worth knowing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you would like to chat or have any questions, drop them in the comments I’m always happy to talk.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I hope you learned something new from this, Thanks so much for reading!! ❤ And keep on coding! 👨‍💻.&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enjoyed reading this as much as i enjoyed writing it for you? 😍&lt;/strong&gt;. support me with a coffee 😃&lt;a href="https://www.buymeacoffee.com/molipa"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJz-zci7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520Coffee%2520%25E2%2598%2595%2520%26emoji%3D%25F0%259F%258D%25A6%26slug%3Dmolipa%26button_colour%3D40DCA5%26font_colour%3Dffffff%26font_family%3DComic%26outline_colour%3D000000%26coffee_colour%3DFFDD00" alt="buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/VectorIkechukwu"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOwp8amL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/-Follow%2520me%2520on%2520Twitter-1877F2%3Fstyle%3Dflat%26logo%3DTwitter%26logoColor%3Dwhite" alt="Follow me on Twitter"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>developers</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>Selection sort algorithm </title>
      <author>Aya Bouchiha</author>
      <pubDate>Tue, 22 Jun 2021 23:21:37 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/selection-sort-algorithm-5ke</link>
      <guid>https://dev.to/ayabouchiha/selection-sort-algorithm-5ke</guid>
      <description>&lt;h2&gt;
  &lt;a href="#definition-of-selection-sort"&gt;
  &lt;/a&gt;
  Definition of selection sort
&lt;/h2&gt;

&lt;p&gt;Selection sort is one of the simplest sorting algorithms, it works by continually finding the minimum number in the array and inserting it at the beginning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#space-and-time-complexity"&gt;
  &lt;/a&gt;
  Space and Time complexity
&lt;/h2&gt;

&lt;p&gt;The time complexity of selection sort is &lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt; and it's space complexity is &lt;strong&gt;O(1)&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selection-sort-algorithm"&gt;
  &lt;/a&gt;
  Selection sort algorithm
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;itertate from 0 to len(arr) - 1 &lt;/li&gt;
&lt;li&gt;seting to minimunIdx variable the first element index in the unsorted part &lt;/li&gt;
&lt;li&gt;loop trough the unsorted part&lt;/li&gt;
&lt;li&gt;if arr[j] &amp;lt; arr[minimumIdx]  =&amp;gt; minimumIdx = j&lt;/li&gt;
&lt;li&gt;swaping arr[minimumIdx] with the first in the unsorted part (unsortedPart[0])&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#implementation-of-selection-sort-using-python"&gt;
  &lt;/a&gt;
  Implementation of selection sort using python
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;selectionSortAlgorithm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
        [ name ] =&amp;gt; Selecion sort
        [ type ] =&amp;gt; Sorting algorithms
        [ time complexity ] =&amp;gt; O(n^2)
        [ space complexity ] =&amp;gt; O(1)
        [ params ] =&amp;gt; ( arr {list} array to sort )
        [ return ] =&amp;gt; sorted list
        [ logic ]  =&amp;gt; (
                1. itertate from 0 to len(arr) - 1 
                2. seting to minimunIdx variable the first element index in the unsorted part 
                3. loop trough the unsorted part
                4. if arr[j] &amp;lt; arr[minimumIdx]  =&amp;gt; minimumIdx = j
                5. swaping arr[minimumIdx] with the first in the unsorted part (unsortedPart[0])
        )
    """&lt;/span&gt;
    &lt;span class="c1"&gt;# itertate from 0 to len(arr) - 1 
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="c1"&gt;# setting to minimunIdx variable the first element index in the unsorted part
&lt;/span&gt;        &lt;span class="n"&gt;minIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="c1"&gt;# loop trough the unsorted part
&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="c1"&gt;# if arr[j] &amp;lt; currentMinimum (arr[minIdx])
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="c1"&gt;# minIdx will be the index of the new minimum
&lt;/span&gt;                &lt;span class="n"&gt;minIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
        &lt;span class="c1"&gt;# swaping the minimum with the first element in the unsorted part
&lt;/span&gt;        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementation-of-selection-sort-using-javascript"&gt;
  &lt;/a&gt;
  Implementation of selection sort using javascript
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * sort an array using selection sort algorithm
 * time complexity : O(n^2)
 * space complexity : O(1)
 * @param {Array} arr  array to sort
 * @returns {Array} sorted array
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SelectionSortAlgorithm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// iterate from 0 to arr.length - 1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;//  setting to minimunIdx variable the first element index in the unsorted part&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;minIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//  loop trough the unsorted part&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//  if arr[j] &amp;lt; currentMinimum (arr[minIdx])&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// minIdx will be the index of the new minimum&lt;/span&gt;
                &lt;span class="nx"&gt;minIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// swaping the minimum with the first element in the unsorted part&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exercise"&gt;
  &lt;/a&gt;
  Exercise
&lt;/h2&gt;

&lt;p&gt;sort an array in descending order using the selection sort algorithm&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/python-program-for-selection-sort/"&gt;https://www.geeksforgeeks.org/python-program-for-selection-sort/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.programiz.com/dsa/selection-sort"&gt;https://www.programiz.com/dsa/selection-sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/22898928/selection-sort-in-javascript"&gt;https://stackoverflow.com/questions/22898928/selection-sort-in-javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=EnodMqJuQEo"&gt;https://www.youtube.com/watch?v=EnodMqJuQEo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/selection-sort/"&gt;https://www.geeksforgeeks.org/selection-sort/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xWBP4lzkoyM"&gt;https://www.youtube.com/watch?v=xWBP4lzkoyM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a good day :)&lt;br&gt;
#day_9&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>beginners</category>
      <category>python</category>
    </item>
    <item>
      <title>The one about JS fundamentals -  WEEK 1</title>
      <author>iqraraza</author>
      <pubDate>Tue, 22 Jun 2021 22:29:51 +0000</pubDate>
      <link>https://dev.to/iqraraza/the-one-about-js-fundamentals-week-1-2hdb</link>
      <guid>https://dev.to/iqraraza/the-one-about-js-fundamentals-week-1-2hdb</guid>
      <description>&lt;p&gt;WEEK 1 &lt;/p&gt;

&lt;p&gt;Shock to the system. All in all, there was probably 30 minutes worth of info that I was comfortable with..everything else was all new territory. Excitement, fear, self questioning, tears, self gratification....every emotion on the planet was experienced this week. I was struggling to find my feet. &lt;/p&gt;

&lt;p&gt;Exposure to Github, collaborating with others, using Vscode, RegEx and Array methods were the main topics covered. &lt;a href="http://www.w3schools.com"&gt;www.w3schools.com&lt;/a&gt; was my best friend resource. &lt;/p&gt;

&lt;p&gt;My first unforgettable experience was the first time I did pair programming. I was a nervous wreak as its something I had never experienced before. We ended up having to call in a tutor, not for coding issues but how to even get zoom going. Neither one of us knew how to screen share. Embarrassing but funny. Well, you’ve got to start somewhere I  guess and my partner was super super nice. &lt;/p&gt;

&lt;p&gt;Also I've had to make peace with the fact that its expected (for myself anyway) that the first hurdle is always going to be a setup issue. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>github</category>
      <category>beginners</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Not Another Gradient Generator</title>
      <author>Nathaniel</author>
      <pubDate>Tue, 22 Jun 2021 22:27:14 +0000</pubDate>
      <link>https://dev.to/shadowfaxrodeo/not-another-gradient-generator-2mhl</link>
      <guid>https://dev.to/shadowfaxrodeo/not-another-gradient-generator-2mhl</guid>
      <description>&lt;p&gt;The web is full of gradient generators. So I thought I'd make another one: &lt;a href="https://doodad.dev/gradient-generator/"&gt;Not Another Gradient Generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has some novel features though:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generates linear, radial, and &lt;strong&gt;conic&lt;/strong&gt; gradients.&lt;/li&gt;
&lt;li&gt;Allows you to layer gradients to make complex designs.&lt;/li&gt;
&lt;li&gt;Automatically adds colors to prevent gradients looking washed out.&lt;/li&gt;
&lt;li&gt;Exports gradients as CSS, SVG, PNG, and JPEG.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#layered-gradients"&gt;
  &lt;/a&gt;
  Layered Gradients
&lt;/h2&gt;

&lt;p&gt;I started this project with the goal of being able to replicate the instagram logo gradient in CSS. The instagram logo isn't a simple &lt;code&gt;linear&lt;/code&gt; or &lt;code&gt;radial&lt;/code&gt; gradient. It's complex and made by clever graphic designers using expensive software.&lt;/p&gt;

&lt;p&gt;But CSS allows us to layer gradients on top of each other, by combining radial and linear gradients you can approximate the same thing:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k8UmNwES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24vtmk35oie7sg05xa0p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k8UmNwES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24vtmk35oie7sg05xa0p.png" alt="Instagram logo gradient but all washed out"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This almost looks like it, the main issue is that it's all washed out. The colors become less saturated in the middle of the gradient.&lt;/p&gt;

&lt;p&gt;To solve this problem I wrote some code that adds higher saturated colors to fill in the gray-ish bits, and the results were much better:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g_AknjmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hvjao5y5gew1izojahv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g_AknjmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hvjao5y5gew1izojahv.png" alt="Instagram logo gradient in CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's how it works…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hsluv-color-interpolation-magic"&gt;
  &lt;/a&gt;
  HSLuv color interpolation magic
&lt;/h2&gt;

&lt;p&gt;CSS and SVG color gradients tend to go gray in the middle where the colors converge. This is because they use the RGB color space. &lt;/p&gt;

&lt;p&gt;Imagine you have a color gradient going from &lt;code&gt;yellow&lt;/code&gt; to &lt;code&gt;blue&lt;/code&gt;. &lt;code&gt;rgb(255, 255, 0) to rgb(0, 0, 255)&lt;/code&gt;. CSS and SVG will interpolate the R, G, and B values seperately. So the middle value of &lt;code&gt;yellow&lt;/code&gt; and &lt;code&gt;blue&lt;/code&gt; becomes &lt;code&gt;rgb(128, 128, 128)&lt;/code&gt; which is &lt;code&gt;gray&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oW02NOkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f6okl13uzya5oewhyu8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oW02NOkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f6okl13uzya5oewhyu8.png" alt="Gradient going yellow to blue with gray in the middle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But we know that the middle color of yellow and blue is green. So, to fix that Not Another Gradient Generator converts the colors to HSLuv and more human-friendly color space. Then it adds intermediary colors and converts it back to RGB for use on the interwebs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ekWJzjH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8cgpxzvnqkfwikcj5tvb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ekWJzjH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8cgpxzvnqkfwikcj5tvb.png" alt="Gradient going from yellow to blue with green in the middle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's the gist of it.&lt;/strong&gt; I hope you enjoy it, I'll leave you with some other gradients I've created using it:&lt;/p&gt;

&lt;p&gt;Lens Flare (you can add this on top of images)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vGT8y_Fj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7e3iwapsa7u0cw666as.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vGT8y_Fj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7e3iwapsa7u0cw666as.png" alt="Lens flare created with CSS gradients"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This horrible thing that makes me think of old DVD adverts for some reason:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kkl2F8B0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbnz8yvvplzbd6kxp459.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kkl2F8B0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbnz8yvvplzbd6kxp459.png" alt="horrible mess made with css gradients"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one that I dithered using another one of my tools: &lt;a href="https://doodad.dev/dither-me-this/"&gt;dither me this&lt;/a&gt;. Sort of interesting...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qVYWBd2i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9pu60mfzlwcfxuf76ngv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qVYWBd2i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9pu60mfzlwcfxuf76ngv.png" alt="Dithered Gradient"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all folks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d1uHlYb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fru8iimazv2n42vo1blh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d1uHlYb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fru8iimazv2n42vo1blh.png" alt="Warner Bros that's all folks background recreated with CSS gradients"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know what you think, and if you create a cool gradient, share a link with me in the comments, i'd love to see it.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>css</category>
      <category>webdev</category>
      <category>vue</category>
    </item>
    <item>
      <title>How to Create a Todo List with React and Sanity</title>
      <author>Joe Holmes</author>
      <pubDate>Tue, 22 Jun 2021 22:11:41 +0000</pubDate>
      <link>https://dev.to/joeholmes/how-to-create-a-todo-list-with-react-and-sanity-4dpg</link>
      <guid>https://dev.to/joeholmes/how-to-create-a-todo-list-with-react-and-sanity-4dpg</guid>
      <description>&lt;p&gt;Sanity is often described as a "headless CMS"—a content management system decoupled from its presentation, allowing a developer to create any kind of frontend they desire.&lt;/p&gt;

&lt;p&gt;But most "headless CMS" platforms are rather limited in what they can accomplish. They're usually designed to be blogs, e-commerce stores, or marketing pages—try and do something more avant-garde and you may soon find yourself in the weeds.&lt;/p&gt;

&lt;p&gt;Not so with Sanity! With its thoughtful developer experience and lightning-fast APIs, Sanity can also compare favorably to "managed databases" such as &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt; and &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt;. Systems like these are designed for more complex, technical applications that require user authentication and dynamically presented data. Sanity can hold its own here!&lt;/p&gt;

&lt;p&gt;Don't believe me? Let's build an app.&lt;/p&gt;

&lt;p&gt;We'll be coding a user authenticated to-do list app with &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;, &lt;a href="https://magic.link/"&gt;Magic.link&lt;/a&gt;, and Sanity on the backend.&lt;/p&gt;

&lt;p&gt;I've deployed a &lt;a href="https://next-magic-sanity-todo.vercel.app/"&gt;demo version&lt;/a&gt; if you want to check it out yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Intermediate knowledge of &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, including state, context and effect hooks&lt;/li&gt;
&lt;li&gt;Familiarity with &lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt; for styling&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.sanity.io/docs/cli"&gt;Sanity CLI&lt;/a&gt; installed&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://magic.link"&gt;Magic.link&lt;/a&gt; account created&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#clone-starter"&gt;
  &lt;/a&gt;
  Clone starter
&lt;/h2&gt;

&lt;p&gt;I created a simple starter project so we wouldn't lose time writing boilerplate. You can clone it by navigating to your preferred directory and running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/bathrobe/magic-next-sanity-todo-starter.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The starter comes with Tailwind CSS for styling and has a basic user authentication flow already implemented, so we won't need to dive into those challenging waters in this post. The auth code is all taken from a &lt;a href="https://vercel.com/blog/simple-auth-with-magic-link-and-nextjs"&gt;very helpful tutorial&lt;/a&gt; on Vercel's website, so consult that if you'd like to know the details.&lt;/p&gt;

&lt;p&gt;Let's first install our project's dependencies by running &lt;code&gt;cd magic-next-sanity-todo-starter&lt;/code&gt; and then &lt;code&gt;npm install&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;When that's done, create a &lt;code&gt;.env.local&lt;/code&gt; file at the root of your project. We'll add the keys one by one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#register-for-magiclink"&gt;
  &lt;/a&gt;
  Register for Magic.link
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://magic.link"&gt;Magic.link&lt;/a&gt; uses cutting-edge cryptography to take the headache out of user authentication, which is usually one of the most dreaded developer tasks. They utilize some cookie-based blockchain wizardry to remove the need for passwords or outside auth. You do &lt;em&gt;not&lt;/em&gt; need to understand how its innards work in order to use it. Just enjoy!&lt;/p&gt;

&lt;p&gt;Sign up for the free plan at &lt;a href="https://dashboard.magic.link/signup"&gt;https://dashboard.magic.link/signup&lt;/a&gt;. At the time of writing, you're permitted 100 users on the free plan, so it's perfect for our purposes.&lt;/p&gt;

&lt;p&gt;Get your public and secret test keys. You'll need an encryption secret too. You can go to this &lt;a href="https://www.allkeysgenerator.com/Random/Security-Encryption-Key-Generator.aspx"&gt;Encryption Key Generator&lt;/a&gt; and choose any option above 256 bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// .env.local

NEXT_PUBLIC_MAGIC_PUB_KEY=pk_test_12345
MAGIC_SECRET_KEY=sk_test_12345
ENCRYPTION_SECRET=random_encryption_string
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy-a-todo-schema-from-sanity"&gt;
  &lt;/a&gt;
  Deploy a todo schema from Sanity
&lt;/h2&gt;

&lt;p&gt;If you have not yet done so, remember to download the Sanity CLI. Open your terminal and enter the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @sanity/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't already have a studio you'd like to work with, run &lt;code&gt;sanity init&lt;/code&gt; from the command line and create a new one.&lt;/p&gt;

&lt;p&gt;The command line will ask you for the name of your studio and where you want to store the studio files. In this example I named it "your-studio" and installed it in the same folder where I stored the starter repo.&lt;/p&gt;

&lt;p&gt;When it asks you what schema you'd like to start with, choose the option to install a clean schema with no pre-existing data.&lt;/p&gt;

&lt;p&gt;Take note of what you named the dataset, as you'll add it to the &lt;code&gt;.env&lt;/code&gt; file later.&lt;/p&gt;

&lt;p&gt;Now we'll write a todo schema in our &lt;code&gt;schemas&lt;/code&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// your-studio/schemas/todo.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;document&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Todo Text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;createdAt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Created at&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;datetime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dueDate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Due date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;datetime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isCompleted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Is completed?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;completedAt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Completed At&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;datetime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userEmail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User Email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the schema to your &lt;code&gt;schema.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// your-studio/schemas/schema.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;createSchema&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;part:@sanity/base/schema-creator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;schemaTypes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all:part:@sanity/base/schema-type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;createSchema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;schemaTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="nx"&gt;todo&lt;/span&gt;
  &lt;span class="p"&gt;]),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;sanity deploy&lt;/code&gt;, choose a unique name for your deployed studio, and soon it should be live.&lt;/p&gt;

&lt;p&gt;Alert: Technically, you don't &lt;em&gt;need&lt;/em&gt; to deploy your studio—simply accessing the document store and using the APIs is enough for these purposes. But assuming you'd &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-sanity-permissions"&gt;
  &lt;/a&gt;
  Get Sanity permissions
&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href="https://sanity.io/manage"&gt;sanity.io/manage&lt;/a&gt; and head to Settings &amp;gt; API &amp;gt; Tokens. Add a new token with write permissions and save the key somewhere safe.&lt;/p&gt;

&lt;p&gt;Directly above the tokens field, add &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to your CORS Origins. (If you deploy the app, you'll need to add your live URL to this list as well).&lt;/p&gt;

&lt;p&gt;You can find your project ID at the top of this page, right under the title of your studio. Add all your Sanity variables to your &lt;code&gt;.env.local&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .env.local&lt;/span&gt;

&lt;span class="nx"&gt;NEXT_PUBLIC_MAGIC_PUB_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;pk_test_12345&lt;/span&gt;
&lt;span class="nx"&gt;MAGIC_SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;sk_test_12345&lt;/span&gt;
&lt;span class="nx"&gt;ENCRYPTION_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;random_encryption_string_from_earlier&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_SANITY_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;your_sanity_id&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_SANITY_DATASET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;your_sanity_dataset&lt;/span&gt;
&lt;span class="nx"&gt;SANITY_WRITE_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;your_sanity_write_key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All right, we're configured and ready to start coding! Run &lt;code&gt;npm run dev&lt;/code&gt; in your project's root and test it out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--welNGnKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb6jeu63jqdr53ddb3vh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--welNGnKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb6jeu63jqdr53ddb3vh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0l9shXI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uohyc47apwu5c5ejrrpe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0l9shXI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uohyc47apwu5c5ejrrpe.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1EHVsQ93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fi4l9w4p4os7be8a4k6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1EHVsQ93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fi4l9w4p4os7be8a4k6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-input-form"&gt;
  &lt;/a&gt;
  Creating the input form
&lt;/h2&gt;

&lt;p&gt;Let's start with the submit form that sends our todos to the studio. Later we'll fetch the data and display it on our frontend.&lt;/p&gt;

&lt;p&gt;We can look at the finished product to see what we'll be adding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--veD0WKCx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20d8fu34ew0uful5a0f7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--veD0WKCx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20d8fu34ew0uful5a0f7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First we'll use the &lt;code&gt;useState()&lt;/code&gt; hook to store the values of our submit form and todo list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-states-to-store-form-values"&gt;
  &lt;/a&gt;
  Creating states to store form values
&lt;/h3&gt;

&lt;p&gt;Let's import our hook as well as the &lt;code&gt;react-date-picker&lt;/code&gt; library. Then we'll add our states.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/todos.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//we must import the datepicker's css modules manually&lt;/span&gt;
&lt;span class="c1"&gt;//so it plays nice with Next.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DatePicker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-date-picker/dist/entry.nostyle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-date-picker/dist/DatePicker.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-calendar/dist/Calendar.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../hooks/useAuth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Logout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/Logout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//create a state to store todoList array&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodoList&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="c1"&gt;//create a state for the text in the todo input form&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUserInput&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//create a state for the due date chosen in the datepicker&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDueDate&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//set an error message if either input is missing&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;errMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setErrMessage&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the existence of our custom &lt;code&gt;useAuth()&lt;/code&gt; hook at the top. More information about custom hooks (as well as a helpful refresher on all things React hooks!) can be found in this &lt;a href="https://www.youtube.com/watch?v=TNhaISOUy6Q"&gt;Fireship video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next we'll define some handlers for our form input and submission button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-raw-handlesubmit-endraw-and-raw-handlechange-endraw-functions"&gt;
  &lt;/a&gt;
  Create &lt;code&gt;handleSubmit&lt;/code&gt; and &lt;code&gt;handleChange&lt;/code&gt; functions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// src/pages/todos.js&lt;/span&gt;

&lt;span class="c1"&gt;//... right after the useState hooks&lt;/span&gt;

&lt;span class="c1"&gt;//FOR THE INPUT FORM:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;setUserInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;//FOR THE SUBMIT BUTTON:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//if either part of the form isn't filled out&lt;/span&gt;
    &lt;span class="c1"&gt;//set an error message and exit&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;dueDate&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setErrMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Todo text and due date must be filled out.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//otherwise send the todo to our api&lt;/span&gt;
            &lt;span class="c1"&gt;// (we'll make this next!)&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="c1"&gt;// await fetchTodos(); //(we'll add this later)&lt;/span&gt;
      &lt;span class="c1"&gt;// Clear all inputs after the todo is sent to Sanity&lt;/span&gt;
      &lt;span class="nx"&gt;setUserInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setErrMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setDueDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;handleChange&lt;/code&gt; stores our text input in a state. &lt;code&gt;handleSubmit&lt;/code&gt; first makes sure both of our fields have been filled out, then posts the todo to our &lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;serverless API route&lt;/a&gt; and clears out the inputs.&lt;/p&gt;

&lt;p&gt;You'll notice two things we reference that don't exist yet: the &lt;code&gt;api/todo&lt;/code&gt; route and a &lt;code&gt;fetchTodos()&lt;/code&gt; function. Fret not! We'll get to these in the next section. For now, we'll finish rendering our form.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-input-form"&gt;
  &lt;/a&gt;
  Creating the input form
&lt;/h3&gt;

&lt;p&gt;Replace &lt;code&gt;&amp;lt;p&amp;gt;Todo app will go right here!&amp;lt;/p&amp;gt;&lt;/code&gt; with the form element below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/todos.js&lt;/span&gt;

                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*...*/&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*we flex the text input and datepicker
                    so they display inline. */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex justify-center items-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"todo"&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"invisible"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Your Todo&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
              &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"w-72 h-12 border p-4 border-blue-100"&lt;/span&gt;
              &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
                            &lt;span class="c1"&gt;//our state&lt;/span&gt;
              &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Make coffee."&lt;/span&gt;
                            &lt;span class="c1"&gt;//our function&lt;/span&gt;
              &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"my-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DatePicker&lt;/span&gt;
                &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"p-4"&lt;/span&gt;
                                &lt;span class="c1"&gt;//makes it so we cannot set due date in past&lt;/span&gt;
                &lt;span class="na"&gt;minDate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                                &lt;span class="c1"&gt;//our dueDate state&lt;/span&gt;
                &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setDueDate&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
            &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;focus&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;outline&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;none&lt;/span&gt; &lt;span class="na"&gt;focus&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;ring&lt;/span&gt; &lt;span class="na"&gt;focus&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;800&lt;/span&gt;
                        &lt;span class="na"&gt;px&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;6&lt;/span&gt; &lt;span class="na"&gt;py&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;2&lt;/span&gt; &lt;span class="na"&gt;rounded&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;xl&lt;/span&gt; &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;500&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;50&lt;/span&gt; &lt;span class="na"&gt;hover&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;800&lt;/span&gt; 
                        &lt;span class="na"&gt;font&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;semibold&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;
                        &lt;span class="c1"&gt;//our function&lt;/span&gt;
            &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Submit
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*error set in handleSubmit*/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errMessage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*...*/&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now see a lovely todo input form, with a stylish button lifted almost entirely from Tailwind's helpful docs.&lt;/p&gt;

&lt;p&gt;Remember the serverless API route from earlier? Let's build that now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-our-api-route"&gt;
  &lt;/a&gt;
  Make our API route
&lt;/h2&gt;

&lt;p&gt;Create &lt;code&gt;src/pages/api/todo.js&lt;/code&gt;. Since we'll want full &lt;a href="https://www.codecademy.com/articles/what-is-crud"&gt;CRUD&lt;/a&gt; functionality in our app, we'll need PUT and DELETE requests later. To keep our code clean, we'll use the &lt;code&gt;switch&lt;/code&gt; syntax for the different request types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/api/todo.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../lib/sanity/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;//this JSON arrives as a string,&lt;/span&gt;
      &lt;span class="c1"&gt;//so we turn it into a JS object with JSON.parse()&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;//then use the Sanity client to create a new todo doc&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;userEmail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Todo was created, document ID is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Todo was created, document ID is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error, check console&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that, we should be able to submit a todo from our app and have it stored in our Sanity studio. Let's try it out.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;npm run dev&lt;/code&gt; once more and open up your Sanity studio. If all went well, you should see your new todo inside of Sanity. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EjEPKsmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjvneqz08m1i7nji3cmh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EjEPKsmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjvneqz08m1i7nji3cmh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Success!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4yJ2Zyv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5yfjaoxelqyjdwmqo2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yJ2Zyv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5yfjaoxelqyjdwmqo2n.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great job! Now that Sanity is storing our todo values, we can fetch them and display them on our frontend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#display-our-todos"&gt;
  &lt;/a&gt;
  Display our todos
&lt;/h2&gt;

&lt;p&gt;We'll define a function that will fetch the latest todos from Sanity and store them in the &lt;code&gt;todoList&lt;/code&gt; state. We want the function to run when the page loads, whenever user data changes, and any time we alter the data (by adding, updating, or deleting todos). To manage this logic, we'll begin by adding a &lt;code&gt;useEffect&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;Head back to &lt;code&gt;pages/todos.js&lt;/code&gt; and import&lt;code&gt;useEffect&lt;/code&gt;, as well as our Sanity client.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/pages/todos.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../lib/sanity/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right below your &lt;code&gt;useState&lt;/code&gt; hooks add the &lt;code&gt;fetchTodos&lt;/code&gt; function and tack it onto a &lt;code&gt;useEffect&lt;/code&gt; hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/pages/todos.js&lt;/span&gt;

&lt;span class="c1"&gt;//after the useState hooks&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fetchedTodos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//make sure the user is loaded&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//pass userEmail as a query parameter&lt;/span&gt;
      &lt;span class="nx"&gt;fetchedTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`*[_type=="todo" &amp;amp;&amp;amp; userEmail==$userEmail] | order(dueDate asc)
                {_id, text, createdAt, dueDate, isCompleted, completedAt, userEmail}`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;userEmail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="c1"&gt;//insert our response in the todoList state&lt;/span&gt;
      &lt;span class="nx"&gt;setTodoList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchedTodos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//now it will fetch todos on page load...&lt;/span&gt;
      &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;//this dependecy array tells React to run the&lt;/span&gt;
        &lt;span class="c1"&gt;//hook again whenever the user loads or changes&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uncomment &lt;code&gt;fetchTodos()&lt;/code&gt; in the &lt;code&gt;handleSubmit&lt;/code&gt; function. Next polyfills the &lt;code&gt;fetch&lt;/code&gt; API for all browsers beforehand, so no need to worry about that!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/todos.js&lt;/span&gt;
&lt;span class="c1"&gt;// in handleSubmit function...&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="c1"&gt;//***uncomment this line now***&lt;/span&gt;
            &lt;span class="c1"&gt;//after submitting, our TodoList will now refresh&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;setUserInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setErrMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setDueDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Immediately after &lt;code&gt;handleSubmit&lt;/code&gt;, let's also add a &lt;code&gt;handleDelete&lt;/code&gt; function that we can pass to our &lt;code&gt;&amp;lt;Todo/&amp;gt;&lt;/code&gt; component. Since we're passing this function straight from the page to &lt;code&gt;&amp;lt;Todo/&amp;gt;&lt;/code&gt; (skipping the &lt;code&gt;&amp;lt;TodoList/&amp;gt;&lt;/code&gt; component), we should use React's &lt;code&gt;useContext&lt;/code&gt; hook. &lt;a href="https://reactjs.org/docs/context.html"&gt;Context&lt;/a&gt; allows us to avoid passing props unnecessarily.&lt;/p&gt;

&lt;p&gt;We'll also pass &lt;code&gt;fetchTodos()&lt;/code&gt; to our context hook, so that we can get fresh data when we toggle a todo's status in its component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/todos.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//... before the Page component&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TodoContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//...&lt;/span&gt;

&lt;span class="c1"&gt;// then, below the handleSubmit function...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleDelete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectedTodo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DELETE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;selectedTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="c1"&gt;//todos will refresh after delete, too&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TodoContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleDelete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* all your rendered JSX */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;TodoContext&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check your console to make sure we fetched it all correctly. After you've confirmed it works, feel free to delete the console log.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IEFxm7_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5mhdindgh0p8wpd221f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IEFxm7_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5mhdindgh0p8wpd221f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Very good! It's right there waiting for us. Now that we've fetched the data, we need components to feed it to. That's what we'll build next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-todo-components"&gt;
  &lt;/a&gt;
  Creating todo components
&lt;/h2&gt;

&lt;p&gt;First create a components folder in &lt;code&gt;src&lt;/code&gt;. In it, create a new file called &lt;code&gt;TodoList.js&lt;/code&gt;. This will be a simple component that mainly exists to keep our &lt;code&gt;todos.js&lt;/code&gt; page a little cleaner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/TodoList.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*if there are todos in the list...*/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
          &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="c1"&gt;//map only the user's todos&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userEmail&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Todo&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="dl"&gt;""&lt;/span&gt;
              &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter a todo item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We pass the &lt;code&gt;todoList&lt;/code&gt; state in our page component to &lt;code&gt;&amp;lt;TodoList/&amp;gt;&lt;/code&gt;, which maps each item in the array to a &lt;code&gt;&amp;lt;Todo/&amp;gt;&lt;/code&gt; component. &lt;/p&gt;

&lt;p&gt;The ternary operators may look tricky, but they're only saying, "If the todo list has one or more items, go through each item, double-check that they belong to the current user, then render them with our custom Todo component."&lt;/p&gt;

&lt;p&gt;The unique ID from Sanity is passed as the &lt;code&gt;key&lt;/code&gt; prop in the Todo because React requires it. React has more information about the key prop in their &lt;a href="https://reactjs.org/docs/lists-and-keys.html#basic-list-component"&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now we need to make &lt;code&gt;Todo.js&lt;/code&gt;. In the same folder, create that file. Remember the context we created in &lt;code&gt;todos.js&lt;/code&gt;? We can now put it into action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/Todo.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// import a simple date formatting library&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dayjs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dayjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// import a trashcan icon for our delete button&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RiDeleteBin5Line&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/ri&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TodoContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../pages/todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//with useContext we do not need to pass extra props to &amp;lt;TodoList/&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handleDelete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TodoContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;//setting states for the isCompleted boolean and a date completed&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsCompleted&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;completedTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCompletedTime&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completedAt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//function that syncs the completed checkbox with Sanity&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleToggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PUT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="c1"&gt;//passes isCompleted React state to Sanity&lt;/span&gt;
        &lt;span class="na"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;completedAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;completedAt&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// refresh our data&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//pass our Sanity results back into React&lt;/span&gt;
    &lt;span class="nx"&gt;setIsCompleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setCompletedTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;completedAt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;
      &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;gray&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;50&lt;/span&gt; &lt;span class="na"&gt;my&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;6&lt;/span&gt; &lt;span class="na"&gt;border&lt;/span&gt; &lt;span class="na"&gt;shadow&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;md&lt;/span&gt; &lt;span class="na"&gt;rounded&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;xl&lt;/span&gt; 
            &lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;4&lt;/span&gt; &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;gray&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;200&lt;/span&gt; &lt;span class="na"&gt;flex&lt;/span&gt; &lt;span class="na"&gt;justify&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;
      &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mx-2 cursor-pointer"&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;
        &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleToggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*if todo is done, cross it out and turn it gray*/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`text-lg mx-2 &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
          &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;line-through text-gray-500&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`text-gray-400 mr-2`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*if todo is done, show completedTime
                    if not done, show due date */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt;
          &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`Done &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dayjs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;completedTime&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MMM D, YYYY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Due &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dayjs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MMM D, YYYY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mx-2"&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;handleDelete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RiDeleteBin5Line&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Excellent work! All we need to do is add the components to our page and they should render.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updating-raw-todosjs-endraw-"&gt;
  &lt;/a&gt;
  Updating &lt;code&gt;todos.js&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/todos.js&lt;/span&gt;

&lt;span class="c1"&gt;// ... at the bottom of the imports&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/TodoList&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// ... then directly under the form&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*...*/&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"my-12"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;xl&lt;/span&gt; &lt;span class="na"&gt;font&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;bold&lt;/span&gt; &lt;span class="na"&gt;tracking&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;tight&lt;/span&gt; 
                    &lt;span class="na"&gt;my&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;8&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Your Todos&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loading...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TodoList&lt;/span&gt;
              &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run &lt;code&gt;npm run dev&lt;/code&gt; and you should see your todo items appear. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IO4ZG8D8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9rnzwzqc82s376f6r9e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IO4ZG8D8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9rnzwzqc82s376f6r9e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👨‍🍳 😗&lt;/p&gt;

&lt;p&gt;If you try to toggle or delete them you'll throw an error, because we haven't added the PUT and DELETE API routes yet. Let's do those now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-the-new-routes-to-our-api"&gt;
  &lt;/a&gt;
  Add the new routes to our API
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/api/todo.js&lt;/span&gt;

&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="c1"&gt;//after the POST request&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PUT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="c1"&gt;//create new complete date if Todo is marked as done&lt;/span&gt;
          &lt;span class="na"&gt;completedAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;completedAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DELETE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Todo was deleted`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your dev environment is still running, stop and start it again with ctrl/command C and &lt;code&gt;npm run dev&lt;/code&gt;. You should now be able to mark todos complete and delete them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-most-userfriendly-database-in-the-world"&gt;
  &lt;/a&gt;
  The most user-friendly database in the world
&lt;/h2&gt;

&lt;p&gt;If all went well, take a look at your Sanity studio. Your content should update in real-time when the frontend input changes and vice versa.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z3xNYQrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4v9viotk1h5636fgsxcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z3xNYQrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4v9viotk1h5636fgsxcf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you've got the developer experience of a managed database with the friendly, customizable UI of a content manager. Pretty sweet.&lt;/p&gt;

&lt;p&gt;I've made the &lt;a href="https://github.com/bathrobe/next-magic-sanity-todo"&gt;completed repo&lt;/a&gt; public if you want to give it a look.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h3&gt;

&lt;p&gt;Hopefully this project can serve as a starting point for more ambitious uses of Sanity. There are plenty of ways to improve the app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Right now the only way todos relate to their users is by passing in the user email as a field in individual todos. We should create a &lt;code&gt;user.js&lt;/code&gt; document in &lt;code&gt;schemas&lt;/code&gt; that allows each person to create their own profile. Then that document could be related to each todo of a given user via a reference field.&lt;/li&gt;
&lt;li&gt;Completed todos could be sent to their own list in an archive, instead of being displayed in the same spot on the Todo List component. In other words, instead of all todos appearing under "Your Todos", you could have separate lists for "Pending Todos" and "Completed Todos". This would be great practice if you're trying to develop more advanced React skills.&lt;/li&gt;
&lt;li&gt;For a fun challenge, could you add a pomodoro timer to specified todo lists and display the countdown in the studio? I've found dividing my work periods into smaller, timed chunks has been a big help in staying productive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, feel free to say hi on &lt;a href="https://twitter.com/joeholmesdev"&gt;Twitter&lt;/a&gt;. Happy coding!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Top 3 reasons developers should use social media</title>
      <author>Vikram Aditya</author>
      <pubDate>Tue, 22 Jun 2021 21:48:24 +0000</pubDate>
      <link>https://dev.to/thevik/top-3-reasons-developers-should-use-social-media-1col</link>
      <guid>https://dev.to/thevik/top-3-reasons-developers-should-use-social-media-1col</guid>
      <description>&lt;p&gt;Social media has some great benefits for developers, in their careers and in connecting with their communities. This post kicks off a blog series that will describe the value I’ve gotten from social media and what I’ve learned about specific social media platforms, including tips for using each platform effectively.&lt;/p&gt;

&lt;p&gt;Whether you’re looking to just keep in touch with other developers or wanting to build up your personal brand, today we’ll focus on “why social media?” Read on for my top three reasons why some time on social media is worth it for developers.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#1-connects-you-with-tech-communities"&gt;
  &lt;/a&gt;
  1: Connects you with tech communities
&lt;/h5&gt;

&lt;p&gt;Social media helps you connect with people online around common interests, especially favorite or emerging technologies. It’s given me a sense of being part of other tech communities, beyond the people I interact with in my day-to-day job and regardless of geography.&lt;/p&gt;

&lt;p&gt;It seems like a long time ago now, but social media today reminds me of when I was first playing video games . The communication mechanisms for that platform were all very open. When you were in a game you could talk with the other players and hear each other reacting to the game real time. Based on your skill level you were grouped up with other people who were very much like you and you’d find yourself socializing around gaming. It created real connections via the internet. It was one of my first experiences like that, where I built up online friendships with people around a common interest.&lt;/p&gt;

&lt;p&gt;Fast forward to today. The communication mechanisms for gaming aren’t quite as open, but I’ve found that social media channels, like Twitch, have created a similarly open experience. It’s mostly text, partly voice, but the feeling is still the same — people connecting directly around a common interest, in this case programming. I’m live streaming what I’m doing, they’re seeing me and my screen, and we’re communicating candidly over chat. We’re building community. Through Twitch I’ve even made friends, who I’ve later met in person at tech events.&lt;/p&gt;

&lt;p&gt;Also, there’s something about communication online that removes some of the social barriers, which I love. No need to worry about body language or what socks I’m wearing. It feels comfortable and more accessible. For people who have that kind of personality, maybe they identify more as an introvert, it can feel relatively easy to connect with people online.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#i-have-a-instagram-theme-page-related-to-programming-you-can-follow-it-if-you-want-to-"&gt;
  &lt;/a&gt;
  I have a &lt;a href="https://www.instagram.com/vikcodes/"&gt;Instagram Theme Page&lt;/a&gt; related to programming, you can follow it if you want to :)
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#2-advances-your-career-while-helping-others-in-the-process"&gt;
  &lt;/a&gt;
  2: Advances your career (while helping others in the process)
&lt;/h5&gt;

&lt;p&gt;Social media is a great way to broadly share your expertise and work – through online courses, blogs, video tutorials, whatever – picking the channel that best suits the content. This will not only bring value to tech communities you care about, but also to yourself. You’ll build a portfolio that showcases your work online and&lt;/p&gt;

&lt;p&gt;As you share your expertise online, people may start viewing you as someone who can help with certain subjects. It’s a win-win all around — you’re helping other people and those people can recognize you as a subject matter expert for that topic or technology. If you don’t show your work, how are people really going to know what you know and how you can contribute?&lt;/p&gt;

&lt;p&gt;For example, if you’re consistently sharing content about application security, that will help you build up your portfolio and your brand as a person with a depth of knowledge around AppSec. This is valuable if you’re looking to network and be open to new career opportunities. Recruiters will have more visibility into who you are and what you’re qualified to do. At Disney, and now Microsoft, it’s led to working on new projects that I hadn’t anticipated.&lt;/p&gt;

&lt;p&gt;Here’s a recent Twitter example of me sharing a VS Code extension I created that allows your Twitch viewers to help in spotting bugs, typos, etc. by sending a command in chat that will highlight the line of code they want you to check. I was able to gauge interest in the extension simply by sharing it via Twitter and received real time feedback from people who were using or planning to use it.&lt;/p&gt;

&lt;p&gt;Social media also helps you be better at your current job. For example, when I first started using Twitter, I was a consumer of sports news – football, basketball, whatever sport was in season. I could follow my teams and get the updates on what’s happening with them. Then, I quickly realized that I should do the same for my job. I can follow experts – some who I wouldn’t otherwise have access to – including core contributors to the different libraries, frameworks, or technologies that I use.&lt;/p&gt;

&lt;p&gt;It keeps me current and more impactful at my job. I bring that value back to my own company because I’m staying in step with the bleeding edge. Since I can tap into “what’s next” via social media, I can “future-proof” my work projects, given the insights I have into various project roadmaps. Speaking of the future…&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#3-social-media-is-the-future-and-the-present"&gt;
  &lt;/a&gt;
  3: Social media is the future (and the present)
&lt;/h5&gt;

&lt;p&gt;I get it. Social media can sometimes feel like an online mosh pit. As much as you may be hesitant, social media is where people in tech are connecting and building community. As a society we’re moving more and more online – IoT, the cloud, video streaming services, the list goes on. In the US, approximately 70% of the adult population is on social media and it’s likely even higher if you look at technology professionals.&lt;/p&gt;

&lt;p&gt;We think of our identities as tied to the physical world, but how do our identities translate online? If you’re passive about being online, you may be missing out on the opportunity to establish yourself the same way you would offline. Proactively thinking about how and where you want to present yourself on social media gives you control over how you’re perceived.&lt;/p&gt;

&lt;p&gt;In summary, , why not be proactive and take control over your online identity? And, be authentic in the process. Never portray yourself as something that you’re not. That will get sniffed out right away.&lt;/p&gt;

&lt;p&gt;Of course, your daily time spent on social media can be guilt inducing. Especially with the new mechanisms to track your time – like Screen Time in Apple’s iOS 12, which tracks how much time you spent on social media or other apps. It can be eye opening and jaw dropping. However, you can treat social media as just another aspect of your work-life balance. Set boundaries and goals and stick to them.&lt;/p&gt;

&lt;p&gt;Are you convinced? If so, this blog series will continue to focus on the future (and present) of social media, looking closer at &lt;br&gt;
specific social platforms and how to use them. We’ll be reviewing best practices for optimizing the time you spend on Twitch, Twitter, Instagram, and more. Check back next month, when we’ll focus on Twitch.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#this-blog-isnt-written-by-me-go-to-the-real-blog"&gt;
  &lt;/a&gt;
  This blog isnt written by me, &lt;a href="https://www.instagram.com/vikcodes/"&gt;Go to the real blog&lt;/a&gt;
&lt;/h5&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Tips for someone who wants to be a Developer</title>
      <author>Krowser Web Services </author>
      <pubDate>Tue, 22 Jun 2021 21:23:30 +0000</pubDate>
      <link>https://dev.to/krowser/tips-for-someone-who-wants-to-be-a-developer-19bd</link>
      <guid>https://dev.to/krowser/tips-for-someone-who-wants-to-be-a-developer-19bd</guid>
      <description>&lt;p&gt;Plenty of companies are on the hunt for software developers. So, what are the secrets to software developer success?&lt;/p&gt;

&lt;p&gt;If you want to be a software developer, you won’t be stuck for company choices. Many of the biggest companies are looking for software developers.&lt;/p&gt;

&lt;p&gt;So, how exactly can you map out a successful career as a software developer? What do you need to know when you’re just starting out?&lt;/p&gt;

&lt;p&gt;We gleaned a number of tips for someone who wants to be a software developer from those who have walked the path before.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#practice-makes-perfect"&gt;
  &lt;/a&gt;
  Practice makes perfect
&lt;/h1&gt;

&lt;p&gt;Ronan O’Dulaing is the vice-president of engineering at Globoforce. He said a passion for problem-solving is critical to a successful career in software development. “You could start by practising coding simple programs every day,” he said.&lt;/p&gt;

&lt;p&gt;“Pick problems to solve, perhaps related to your home or your other hobbies, and use your chosen language (Java, C++, C#, JavaScript, Ruby, Python or Scala) to figure them out. There are lots of tutorials online to get you started.”&lt;/p&gt;

&lt;p&gt;He also suggested attending meet-ups if you want to pursue a career. “They’ll give you a broad understanding on a range of technology topics, give you a great opportunity to speak to people [and] help you determine where to best employ the skills you’ve acquired.”&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learn-the-language"&gt;
  &lt;/a&gt;
  Learn the language
&lt;/h1&gt;

&lt;p&gt;William Ho is an innovation software engineer at EY. He said someone at the very beginning of their career should try out and learn about as many different languages as they can, as having a niche skillset can limit future career prospects.&lt;/p&gt;

&lt;p&gt;“In terms of languages, it all depends on your field of interest. If you were looking at web development, you might look at perhaps a .NET language or PHP; if it’s native mobile, it would be Android or Swift; object-oriented programming, it could be anything from Java, Python, Ruby to C++ etc,” he said.&lt;/p&gt;

&lt;p&gt;“In terms of career prospects, having an understanding of a mixture of some of the above would put you in a very strong position.”&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#make-it-work-make-it-correct-make-it-fast"&gt;
  &lt;/a&gt;
  Make it work, make it correct, make it fast
&lt;/h1&gt;

&lt;p&gt;As with every job, there’s a learning curve. As you progress, you will improve your skills. When it comes to software development, Zendesk developer Jose Narvaez said your goal should be to make it work, make it correct and make it fast – in that order.&lt;/p&gt;

&lt;p&gt;“In other words, start with simple solutions, adding the edge cases after you prove the simpler solution works. Once you have confirmed the results are correct for all of your inputs, proceed to measure performance and, only then, optimise accordingly.”&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#focus-on-the-users-needs"&gt;
  &lt;/a&gt;
  Focus on the user’s needs
&lt;/h1&gt;

&lt;p&gt;Deloitte’s Alan Jue Liu believes it is important for someone who wants to be a software developer to understand what software is there for. “It is to make people’s job easier, to allow people to do more,” he said.&lt;/p&gt;

&lt;p&gt;“When designing software, tackle complexity by distillation and tackle simplicity by thinking holistically. Design better software by always focusing on the needs of your users who will use, maintain, deploy and interact with your software.”&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#be-aggressive-in-your-development"&gt;
  &lt;/a&gt;
  Be aggressive in your development
&lt;/h1&gt;

&lt;p&gt;When it comes to software development, upskilling, self-learning and personal development are major parts of your career. According to Donal Byrne, a software developer at Jaguar Land Rover, you need to be aggressive about your own learning.&lt;/p&gt;

&lt;p&gt;“Getting good grades in a relevant degree isn’t enough. Go out and start building real pieces of software. Take what you have learned and apply it,” he said.&lt;/p&gt;

&lt;p&gt;“Being able to do your own independent study/research and then implement it in a real project is by far the best way to improve and display your skills.”&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#become-an-adaptable-problemsolver"&gt;
  &lt;/a&gt;
  Become an adaptable problem-solver
&lt;/h1&gt;

&lt;p&gt;Steven O’Kennedy, a technology architecture lead in Accenture, said it’s important for a software developer to know that it’s not their job to write code, it’s their job to find answers to problems.&lt;/p&gt;

&lt;p&gt;“As a developer, understanding when to use technologies or techniques, knowing which are best for what, and knowing what the trade-offs are will make you a better developer, more valuable to your team and more confident in your decisions,” he said.&lt;/p&gt;

&lt;p&gt;“Don’t be a technology fundamentalist who always tries to fit the problem to the tool they know. Just because your favourite technology/technique can fix a problem does not mean that it’s the right one to use!”&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Atajos de Teclado (shortcuts) en Visual Studio Code. </title>
      <author>Gastón Danielsen</author>
      <pubDate>Tue, 22 Jun 2021 21:17:45 +0000</pubDate>
      <link>https://dev.to/gdcodev/atajos-de-teclado-shortcuts-en-visual-studio-code-427l</link>
      <guid>https://dev.to/gdcodev/atajos-de-teclado-shortcuts-en-visual-studio-code-427l</guid>
      <description>&lt;p&gt;Visual Studio Code actualmente en uno de los editores de código más utilizado, sobre todo entre los desarrolladores Web, nos permite programar en casi cualquier lenguaje. Tiene muchas características que lo hacen el editor de código favorito de muchos, ya que es muy personalizable, esto quiere decir que podemos adaptarlo a los gustos personales de cada uno.&lt;/p&gt;

&lt;p&gt;Algo que puede ayudarte a ser mas rápido y ahorrar mas tiempo a la hora de moverte o escribir código en VSCode sin duda son los atajos de teclado. Ahora veremos en detalle algunos de ellos.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#general"&gt;
  &lt;/a&gt;
  General
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Acción&lt;/th&gt;
&lt;th&gt;Atajo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Abrir paleta de comandos&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + P&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abrir archivo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + P&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nueva ventana&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + N&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cerrar ventana&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + W&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ajustes del perfil&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + ,&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#usabilidad"&gt;
  &lt;/a&gt;
  Usabilidad
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Acción&lt;/th&gt;
&lt;th&gt;Atajo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Crear un nuevo archivo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + N&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abrir archivo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + O&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Guardar archivo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + S&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cerrar&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + F4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abrir Terminal&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + '&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Panel de problemas&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + M&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#edici%C3%B3n-b%C3%A1sica"&gt;
  &lt;/a&gt;
  Edición básica
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Acción&lt;/th&gt;
&lt;th&gt;Atajo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cortar linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Copiar linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + C&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Borrar linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + K&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Insertar linea abajo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Enter&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Insertar linea arriba&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + Enter&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Buscar en archivo abierto&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + F&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reemplazar&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + H&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linea de comentario&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + /&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bloque de comentario&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Shift + Alt + A&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Salto de linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Alt + Z&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Seleccionar lineas&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Alt + Click Mouse&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tabular linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Tab&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Destabular linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Shift + Tab&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#pantalla"&gt;
  &lt;/a&gt;
  Pantalla
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Acción&lt;/th&gt;
&lt;th&gt;Atajo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Acercar Zoom&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + +&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alejar Zoom&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + -&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Barra lateral&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + B&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abrir debug&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + D&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Panel de salida&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + U&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Control de source&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + G&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Acceder a extensiones&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abrir terminal integrado&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + Ñ&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;Mas sobre Visual Studio Code: &lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf"&gt;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📌 Mis Redes: &lt;a href="https://www.facebook.com/gdcode7"&gt;Facebook&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/gastondanielsen/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/gdcodev"&gt;GitHub&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
