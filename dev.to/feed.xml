<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introduction to Design Tokens</title>
      <author>Michael Mangialardi</author>
      <pubDate>Sun, 12 Sep 2021 02:08:33 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/introduction-to-design-tokens-6f2</link>
      <guid>https://dev.to/michaelmangial1/introduction-to-design-tokens-6f2</guid>
      <description>&lt;p&gt;The following is an excerpt from my book, &lt;a href="https://leanpub.com/designsystemsfordevelopers"&gt;Design Systems for Developers&lt;/a&gt;, where I teach you how to ship a design system driven by design tokens based on first-hand experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#high-fidelity"&gt;
  &lt;/a&gt;
  High Fidelity
&lt;/h2&gt;

&lt;p&gt;Every design system has the "high fidelity" design specifications encapsulated in a design file, and usually some form of documentation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;These design files are called "high fidelity" because they are the purest, or most faithful, expression of the design system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E7yknn-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://polaris.shopify.com/bundles/81f2bcee4972a4a6f281ad417ebe51e5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E7yknn-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://polaris.shopify.com/bundles/81f2bcee4972a4a6f281ad417ebe51e5.png" alt="design-tokens"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In other words, if you see a design specification in the design file, it is highly likely that it is what the designers want a consuming application to emulate.&lt;/p&gt;

&lt;p&gt;If the design file says to use &lt;code&gt;#ff000&lt;/code&gt; as the color for &lt;em&gt;error&lt;/em&gt; text, then, as a developer, you trust that is what your application should follow.&lt;/p&gt;

&lt;p&gt;The only way that the specification is "unpure," or inaccurate of the designers' intent, is if someone made a mistake when creating the design file and didn't realize it.&lt;/p&gt;

&lt;p&gt;Regardless if there are actually any mistakes, developers always go off of what the latest version of a design file (or some documentation) specifies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#translating-design-specifications-into-code"&gt;
  &lt;/a&gt;
  Translating Design Specifications into Code
&lt;/h2&gt;

&lt;p&gt;Whether it's in CSS variables, SASS variables, JavaScript objects, or something else, all the assets/tools of a design system have to translate the official design specifications from a design file.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The high fidelity design specifications in the design file have to be encapsulated, or represented, in some code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The goal is to have design specifications represented in code to be high fidelity as well, in that it follows the design file with 100% accuracy.&lt;/p&gt;

&lt;p&gt;The point of this all is to say that the design specifications have to be represented in code and that representation is important.&lt;/p&gt;

&lt;p&gt;So important that it deserves a name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-tokens"&gt;
  &lt;/a&gt;
  Design Tokens
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Design tokens&lt;/em&gt; are simply a name, or label, for the design specifications you represent in code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lpoNkfev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1579758258316-57081bac8ea8%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1268%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lpoNkfev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1579758258316-57081bac8ea8%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1268%26q%3D80" alt="design-tokens"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, a design file has different types of design specifications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simple-tokens"&gt;
  &lt;/a&gt;
  Simple Tokens
&lt;/h3&gt;

&lt;p&gt;There are design specifications that are &lt;em&gt;simple values&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;They are simply enumerations of valid &lt;em&gt;values&lt;/em&gt; that may be used in accordance with the design system.&lt;/p&gt;

&lt;p&gt;For example, design systems usually specify a color palette. A color palette is an enumeration of the official/valid colors of the design system.&lt;/p&gt;

&lt;p&gt;It doesn't specify when and where the colors should be used, only that they are the official colors.&lt;/p&gt;

&lt;p&gt;Therefore, the design tokens that represent the "simple" design specifications, like the official colors, typography, etc., are called &lt;em&gt;simple tokens&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#component-tokens"&gt;
  &lt;/a&gt;
  Component Tokens
&lt;/h3&gt;

&lt;p&gt;Other design specifications specify the styles for UI  &lt;em&gt;components&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The specifications for UI components do not merely enumerate a set of valid values. They specify how a valid value should be applied to a UI component.&lt;/p&gt;

&lt;p&gt;In other words, a UI component is created by composing a set of simple values.&lt;/p&gt;

&lt;p&gt;Therefore, the design tokens that represent the specifications of a UI component may be called &lt;em&gt;component tokens&lt;/em&gt; or &lt;em&gt;composed tokens&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The former label captures the literal meaning and the latter label captures the technical meaning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;By using the terminology &lt;em&gt;design tokens&lt;/em&gt;, we have a way to speak of our design specifications represented in code in a platform and technology-agnostic manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--51bLkOvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://spectrum.adobe.com/static/images/design_tokens%402x_5c8glXNcJexroU3y3AEUA3_1611634793000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--51bLkOvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://spectrum.adobe.com/static/images/design_tokens%402x_5c8glXNcJexroU3y3AEUA3_1611634793000.png" alt="design-tokens"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll learn in the next chapter that this not only is helpful for communication as it also has technical significance.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#want-to-learn-everything-else-you-need-to-ship-a-design-system-into-production-based-on-design-tokens-check-my-ebook"&gt;
  &lt;/a&gt;
  Want to learn everything else you need to ship a design system into production based on design tokens? Check my ebook 👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://leanpub.com/designsystemsfordevelopers"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J3jIaaBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_banners/4780614459/1620839152/1500x500" alt="ebook"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>systems</category>
      <category>css</category>
    </item>
    <item>
      <title>Event-Driven Architectures on AWS</title>
      <author>Ibrahim Cesar</author>
      <pubDate>Sun, 12 Sep 2021 01:27:05 +0000</pubDate>
      <link>https://dev.to/aws-builders/event-driven-architectures-on-aws-4463</link>
      <guid>https://dev.to/aws-builders/event-driven-architectures-on-aws-4463</guid>
      <description>&lt;p&gt;In September 2021, Corey Quinn, Chief Cloud Economist at The Duckbill Group published &lt;a href="https://www.lastweekinaws.com/blog/the-key-to-unlock-the-aws-billing-puzzle-is-architecture/"&gt;The Key to Unlock the AWS Billing Puzzle is Architecture&lt;/a&gt; and I identified myself a lot with some of his remarks. One, sometimes downplayed is the notion &lt;strong&gt;cost is architecture&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For example, if you didn’t use SQS when building your application because it couldn’t handle your throughput needs or it was too expensive, &lt;a href="https://twitter.com/zackkanter/status/1399698492981981187"&gt;that changed a couple of weeks ago&lt;/a&gt;. SQS is to the point where it’s now effectively unlimited throughput at a cost that’s just 3.6% of what it was at launch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the 3.6% was because of a typo by Zack Kanter. In fact, the price drop is 99.4% from 2006. Which makes it cost only 0.6% of what was. You will pay less than 1% it was years ago!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loosing-our-couplings"&gt;
  &lt;/a&gt;
  Loosing our couplings
&lt;/h2&gt;

&lt;p&gt;There’s general advice that is very well known in modern software architecture, at leat in the web or distribute space that advocates for &lt;a href="https://en.wikipedia.org/wiki/Loose_coupling"&gt;&lt;strong&gt;loose coupling&lt;/strong&gt;&lt;/a&gt;. And sure, is a noble goal but there are several kinds of coupling such as &lt;strong&gt;Temporal coupling&lt;/strong&gt; when we deal wit time-based dependencies such as collaborating system components, sequential operations or operations that needs another to complete such a request or another operation. We have &lt;strong&gt;Spatial coupling&lt;/strong&gt; such as not having to know where your collaborating applications are in the network and providing fail-over mechanisms such as Load Balancers, pub/subs, and other. And of course, this comes a lot even more on the serverless space than any other in the Cloud: &lt;strong&gt;Platform coupling&lt;/strong&gt;. Have proprietary protocols and components from a vendor or platform.&lt;/p&gt;

&lt;p&gt;But as pointed, coupling is a function of multiple dimensions, not just binary options like “tight” or “loose”. We are always. &lt;em&gt;Always&lt;/em&gt; working with trade-offs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The event-driven architecture style is a popular distributed asynchronous architecture style used to produce highly scalable and high-performance applications. It is also highly adaptable and can be used for small applications and as well as large, complex ones. Event-driven architecture is made up of decoupled event processing components that asynchronously receive and process events. It can be used as a standalone architecture style or embedded within other architecture styles (such as an event-driven microservices architecture).”&lt;br&gt;
&lt;a href="https://amzn.to/3hqkSPp"&gt;Fundamentals of Software Architecture&lt;/a&gt;, &lt;em&gt;Mark Richards and Neal Ford&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Following the inspiration from &lt;a href="https://www.amazon.com.br/Domain-Driven-Design-Tackling-Complexity-Software-ebook/dp/B00794TAUG?__mk_pt_BR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;amp;crid=HP4DWEA18R3U&amp;amp;dchild=1&amp;amp;keywords=domain+driven+design&amp;amp;qid=1631406769&amp;amp;sprefix=domain+d%2Caps%2C282&amp;amp;sr=8-2&amp;amp;ufe=app_do%3Aamzn1.fos.25548f35-0de7-44b3-b28e-0f56f3f96147&amp;amp;linkCode=sl1&amp;amp;tag=ibrahimcesar-20&amp;amp;linkId=8f2436253039b1df488c9443273ba4de&amp;amp;language=pt_BR&amp;amp;ref_=as_li_ss_tl"&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt; by Eric Evans and later, &lt;a href="https://amzn.to/3l9pIBO"&gt;Domain-Driven Design Distilled&lt;/a&gt; and &lt;a href="https://amzn.to/2XgM8ZY"&gt;Implementing Domain-Driven Design&lt;/a&gt; by Vaughn Vernon one of way to model and work with software involves deal with bounded contexts we can map and create services, applications and systems to better tackle our problems. And to integrate all of this, one pattern is &lt;strong&gt;Domain Events&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Event becomes the primary mechanism for sharing information across bounded context integrations about change in state. Domains events are immutable, self-describing. Events give the data they carry meaning by supplying business context. Not data transfer objects or change data captures. These are state / state change representations that are not reflective of a system's behaviour.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An event is a &lt;em&gt;quanta&lt;/em&gt;, a unit that describes something in the system. Could be a simple JSON as that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"eventId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;61452&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"event"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"OrderPlaced"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"createdAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-10-07"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, with this event, different domains could decide to act or not in the event. Maybe we have an Inventory domain, a Package domain, a service that will email the user about the order and each one will handle the event as seem fit, and we could add and apply as many services and applications needed. We will publish all these events to “Bus”, which in the AWS is via &lt;a href="https://aws.amazon.com/eventbridge/"&gt;Amazon EventBridge&lt;/a&gt;. As a CDK enthusiast, even to create your Infrastructure as Code &lt;a href="https://docs.aws.amazon.com/cdk/api/latest/docs/aws-events-readme.html"&gt;in a couple of lines of TypeScript&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventBus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;eventBusName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MyCustomEventBus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;bus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MyArchive&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;archiveName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MyCustomEventBusArchive&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MyCustomerEventBus Archive&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;eventPattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;retention&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;days&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;365&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the code above you could provision a custom event bus &lt;em&gt;and&lt;/em&gt; create an 365 archives of all events, that if needed, could be used to auditing or event &lt;em&gt;replay event as needed&lt;/em&gt;. And even in my example, let’s say the user wants to cancel the order, we will not delete the previous event. Different domains will need to process the new events in order to undo actions or make an analysis about how and why and so on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"eventId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;61456&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"event"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"OrderCancelled"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"createdAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-10-07"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Maybe another email will be sent, to confirm the cancel, Inventory Package will have to adjust their line of work and so on. And now maybe a CRM system you be fed to understand why the customer canceled after the conversion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coupling will always exist&lt;/strong&gt;. But we can orchestrate with such services and create highly responsive, available and robust architectures. And you can combine EventBridge with &lt;a href="https://aws.amazon.com/lambda/"&gt;Lambda&lt;/a&gt;, &lt;a href="https://aws.amazon.com/sns/"&gt;SNS&lt;/a&gt;, &lt;a href="https://aws.amazon.com/sqs/"&gt;SQS&lt;/a&gt;, &lt;a href="https://aws.amazon.com/step-functions/"&gt;Step Functions&lt;/a&gt; and soon you are dealing with systems that can scale up and down easily and if done correctly, try to optimize a lot your costs because some services and applications we have today sitting at some servers 24/7 sometimes &lt;strong&gt;just need to be active when a specific event happens&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Right now I’m in the middle of an event-driven creation and I really like the mental model and the developer experience as the organization experience and soon we used the “Ubiquitous Language” from DDD. And for this set of tools, none other Cloud seems so fit and solid as AWS does.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#books-to-read"&gt;
  &lt;/a&gt;
  Books to read
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://amzn.to/3AgY100"&gt;Building Event-Driven Microservices: Leveraging Organizational Data at Scale&lt;/a&gt; by Adam Bellemare. Brings much value with both architectural and application patterns to event-driven architecture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://amzn.to/3EbrsmT"&gt;Architecture Patterns with Python: Enabling Test-Driven Development, Domain-Driven Design, and Event-Driven Microservices&lt;/a&gt; by Harry Percival and Bob Gregory. Python is not my primary language at work or even my preference, but I get so much from this book. Because is aiming at &lt;em&gt;patterns&lt;/em&gt; if you do not work with Python don’t let the title fool you. There’s a lot from here in this book!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#heroes-to-follow"&gt;
  &lt;/a&gt;
  Heroes to follow
&lt;/h2&gt;

&lt;p&gt;Yeah, they are actually &lt;em&gt;heroes&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ben-ellerby"&gt;
  &lt;/a&gt;
  Ben Ellerby
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/EllerbyBen"&gt;@EllerbyBen&lt;/a&gt;&lt;br&gt;
For me one of his post, helped me a lot in my work and opened so many possibilities: &lt;a href="https://medium.com/serverless-transformation/eventbridge-storming-how-to-build-state-of-the-art-event-driven-serverless-architectures-e07270d4dee"&gt;EventBridge Storming — How to build state-of-the-art Event-Driven Serverless Architectures&lt;/a&gt;. &lt;a href="https://medium.com/@bene_37069"&gt;Blogs a lot about the concept of Serverless Transformation&lt;/a&gt;, a term I adopted too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sheen-brisals"&gt;
  &lt;/a&gt;
  Sheen Brisals
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/sheenbrisals"&gt;@sheenbrisals&lt;/a&gt;&lt;br&gt;
Blog often at &lt;a href="https://sbrisals.medium.com/"&gt;Medium&lt;/a&gt;. Last post was &lt;a href="https://medium.com/lego-engineering/how-to-build-better-orchestrations-with-aws-step-functions-task-tokens-and-amazon-eventbridge-19a68eeda461"&gt;How To Build Better Orchestrations With AWS Step Functions, Task Tokens, And Amazon EventBridge!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-eventdriven-tools"&gt;
  &lt;/a&gt;
  AWS Event-Driven Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/eventbridge/"&gt;Amazon EventBridge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/step-functions/"&gt;AWS Step Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/sns/"&gt;Amazon Simple Notification Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/pt/event-driven-architecture/"&gt;AWS Event-Driven Primer: What is an Event-Driven Architecture?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>architecture</category>
      <category>eventdriven</category>
      <category>cdk</category>
    </item>
    <item>
      <title>Deploying a Python machine learning app on Kubernetes</title>
      <author>Bruno</author>
      <pubDate>Sun, 12 Sep 2021 01:26:51 +0000</pubDate>
      <link>https://dev.to/brunoa19/deploying-a-python-machine-learning-app-on-kubernetes-31g5</link>
      <guid>https://dev.to/brunoa19/deploying-a-python-machine-learning-app-on-kubernetes-31g5</guid>
      <description>&lt;p&gt;Build and deploy simple machine learning data science web app in Python using the streamlit library in Kubernetes, without knowing Kubernetes!&lt;/p&gt;

&lt;p&gt;As a Data Scientist or Machine Learning Engineer, it is extremely important to be able to deploy our data science project using microservices and Kubernetes, as this helps to complete the data science life cycle and our infrastructure teams to continue evolving the infrastructure. &lt;/p&gt;

&lt;p&gt;Traditional deployment of machine learning models can become a daunting and/or time-consuming task if you are new to microservices and Kubernetes, so the goal of this article is to enable you to quickly deploy an ML application without dealing with the underlying Kubernetes infrastructure complexity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;To follow through this article, you will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Kubernetes cluster&lt;/li&gt;
&lt;li&gt;Ketch installed and configured. You can find more details here: &lt;a href="https://dev.toGetting%20Started"&gt;https://learn.theketch.io/docs/getting-started&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Since we will be deploying our application from the source, you need to log in through your terminal to your Docker registry.&lt;/li&gt;
&lt;li&gt;Both Ketch and Kubernetes CLI configured in your terminal&lt;/li&gt;
&lt;li&gt;A Ketch framework that we can use to deploy our application. You can find more information here: &lt;a href="https://dev.toGetting%20Started"&gt;https://learn.theketch.io/docs/getting-started#creating-a-framework&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#overview-of-our-application"&gt;
  &lt;/a&gt;
  Overview of our application
&lt;/h2&gt;

&lt;p&gt;Today, we will be building a simple machine learning-powered web app for predicting the class label of Iris flowers as being setosa, versicolor and virginica.&lt;/p&gt;

&lt;p&gt;This will require the use of three Python libraries namely &lt;code&gt;streamlit&lt;/code&gt;, &lt;code&gt;pandas&lt;/code&gt; and &lt;code&gt;scikit-learn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the conceptual flow of the app that will include two major components: (1) the front-end and (2) back-end.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;front-end&lt;/strong&gt;, the sidebar found on the left will accept input parameters pertaining to features (i.e. petal length, petal width, sepal length and sepal width) of Iris flowers. These features will be relayed to the back-end where the trained model will predict the class labels as a function of the input parameters. Prediction results are sent back to the front-end for display.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;back-end&lt;/strong&gt;, the user input parameters will be saved into a dataframe that will be used as test data. In the meantime, a classification model will be built using the random forest algorithm from the &lt;code&gt;scikit-learn&lt;/code&gt; library. Finally, the model will be applied to make predictions on the user input data and return the predicted class labels as being one of three flower type: setosa, versicolor or virginica. Additionally, the prediction probability will also be provided that will allow us to discern the relative confidence in the predicted class labels.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-application-code"&gt;
  &lt;/a&gt;
  Web application code
&lt;/h2&gt;

&lt;p&gt;You can find the complete application code available on &lt;a href="https://dev.toGitHub"&gt;https://github.com/brunoa19/ml-iris-app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, so let’s take a look under the hood and we will see that the app that we are going to be building today:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import streamlit as st
import pandas as pd
from sklearn import datasets
from sklearn.ensemble import RandomForestClassifier

st.write("""
# Simple Iris Flower Prediction App
This app predicts the **Iris flower** type!
""")

st.sidebar.header('User Input Parameters')

def user_input_features():
    sepal_length = st.sidebar.slider('Sepal length', 4.3, 7.9, 5.4)
    sepal_width = st.sidebar.slider('Sepal width', 2.0, 4.4, 3.4)
    petal_length = st.sidebar.slider('Petal length', 1.0, 6.9, 1.3)
    petal_width = st.sidebar.slider('Petal width', 0.1, 2.5, 0.2)
    data = {'sepal_length': sepal_length,
            'sepal_width': sepal_width,
            'petal_length': petal_length,
            'petal_width': petal_width}
    features = pd.DataFrame(data, index=[0])
    return features

df = user_input_features()

st.subheader('User Input parameters')
st.write(df)

iris = datasets.load_iris()
X = iris.data
Y = iris.target

clf = RandomForestClassifier()
clf.fit(X, Y)

prediction = clf.predict(df)
prediction_proba = clf.predict_proba(df)

st.subheader('Class labels and their corresponding index number')
st.write(iris.target_names)

st.subheader('Prediction')
st.write(iris.target_names[prediction])
#st.write(prediction)

st.subheader('Prediction Probability')
st.write(prediction_proba)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy and create this code using the name &lt;strong&gt;iris-ml-app.py&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-requirements"&gt;
  &lt;/a&gt;
  Application requirements
&lt;/h2&gt;

&lt;p&gt;For our application to run, we will need to ensure that requirements are in place. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application-libraries"&gt;
  &lt;/a&gt;
  Application libraries
&lt;/h3&gt;

&lt;p&gt;Let’s start with the Python libraries we need:&lt;/p&gt;

&lt;p&gt;Create a file called requirements.txt in the same directory as the application code above. Here is the content of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;streamlit
pandas
scikit-learn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These 3 lines will have Ketch install these libraries when the Docker image is built for our application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exposing-port"&gt;
  &lt;/a&gt;
  Exposing port
&lt;/h3&gt;

&lt;p&gt;By default, the Python &lt;code&gt;streamlit&lt;/code&gt; library exposes our application through port &lt;strong&gt;8501&lt;/strong&gt;, so we will need to ensure Kubernetes understands that it should use this port for our application.&lt;/p&gt;

&lt;p&gt;To do that, create a file called &lt;strong&gt;ketch.yaml&lt;/strong&gt; in the same directory as the previous files. Here is the content of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubernetes:
  processes:
    web:
      ports:
        - name: iris-app
          protocol: TCP
          port: 8501
          target_port: 8501
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The content above will tell Kubernetes to assign port 8501 to our application process. Save the file&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application-process"&gt;
  &lt;/a&gt;
  Application Process
&lt;/h3&gt;

&lt;p&gt;Last, we need to define how our application should be started once its deployed. For that, create a file called &lt;strong&gt;&lt;em&gt;Procfile&lt;/em&gt;&lt;/strong&gt; in the same directory as the previous files. Here is the content of the file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;web: streamlit run iris-ml-app.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The command above will tell Ketch that it should use the &lt;code&gt;streamlit&lt;/code&gt; library to run our Iris app code created before. Save the file&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploying-and-running-the-application"&gt;
  &lt;/a&gt;
  Deploying and running the application
&lt;/h3&gt;

&lt;p&gt;Now that we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our &lt;strong&gt;iris-ml-app.py&lt;/strong&gt; code&lt;/li&gt;
&lt;li&gt;Our &lt;strong&gt;requirements.txt&lt;/strong&gt; file with all library dependencies&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;ketch.yaml&lt;/strong&gt; file assigning a port to expose our app&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;Procfile&lt;/strong&gt; to tell Ketch how to start our application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can then deploy our application. You can deploy your application using the command below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ketch app deploy iris . -i shiparepo/iris:latest -k dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create and deploy our application using iris as the application name&lt;/li&gt;
&lt;li&gt;The "." indicates that it will use the source code and files available in the directory where you are running this command from&lt;/li&gt;
&lt;li&gt;It will automatically create a Docker image and store it in my registry with the name iris. Keep in mind that you should adjust this to reflect your docker registry name&lt;/li&gt;
&lt;li&gt;It will use the dev framework previously created to deploy our application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The deployment process will take a couple of minutes as it will create and store the Docker image in your registry.&lt;/p&gt;

&lt;p&gt;Once the deployment is finished, you can see your application status using the command below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ketch app list&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vrZmn0ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9rjn0ca7gp89xcfhcn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vrZmn0ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9rjn0ca7gp89xcfhcn7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As part of the output of the command, you can see that Ketch also automatically created the endpoint address where you can access your application. Accessing that, we can see our Iris application ready to be used:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kuVfonNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ujchwj9oc4cg5qbdm9m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kuVfonNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ujchwj9oc4cg5qbdm9m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it! &lt;/p&gt;

&lt;p&gt;You have deployed your Python machine learning application on Kubernetes without having to deal with the underlying complexities that Kubernetes might introduce.&lt;/p&gt;

&lt;p&gt;By using Ketch, you get your applications and models deployed quickly while allowing your infrastructure team to continue the adoption of microservices and Kubernetes.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>python</category>
      <category>kubernetes</category>
      <category>microservices</category>
    </item>
    <item>
      <title>Similarities between programming &amp; screenwriting</title>
      <author>Marcin Kołodziejczak</author>
      <pubDate>Sun, 12 Sep 2021 00:14:53 +0000</pubDate>
      <link>https://dev.to/kolodziejczakm/similarities-between-programming-screenwriting-k9l</link>
      <guid>https://dev.to/kolodziejczakm/similarities-between-programming-screenwriting-k9l</guid>
      <description>&lt;p&gt;This article is most of all focused on the creative process and its interdisciplinary character.&lt;br&gt;
Thus, I’m not going to compare job offers, salaries, prospects and...  plenty of other things.&lt;br&gt;
Technical knowledge is not needed though.&lt;/p&gt;

&lt;p&gt;Let’s &lt;code&gt;FADE IN&lt;/code&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#collaborative-character"&gt;
  &lt;/a&gt;
  Collaborative character
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DStsKlWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1588196749597-9ff075ee6b5b%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D640%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DStsKlWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1588196749597-9ff075ee6b5b%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D640%26q%3D80"&gt;&lt;/a&gt;&lt;br&gt;
💻&lt;br&gt;
You can write a real-world application by yourself.&lt;br&gt;
If you're a go-getter it may be even quite a serious password manager used by over &lt;a href="https://opensource.com/article/18/3/behind-scenes-bitwarden"&gt;100,000 people&lt;/a&gt;.&lt;br&gt;
That’s the story of &lt;a href="https://www.kylespearrin.com/"&gt;Kyle Spearrin&lt;/a&gt; the creator of &lt;a href="https://github.com/bitwarden"&gt;"Bitwarden"&lt;/a&gt;¹.&lt;/p&gt;

&lt;p&gt;📝&lt;br&gt;
The same stands for screenplays. You can write short films or even feature-length films on your own. In fact, it seems to be quite popular².&lt;br&gt;
Moreover, there are people like &lt;a href="https://en.wikipedia.org/wiki/Michael_Hirst_(writer)"&gt;Michael Hirst&lt;/a&gt; who wrote whole TV series on its own - I'm sure you've heard of the widely beloved &lt;a href="https://en.wikipedia.org/wiki/Vikings_(2013_TV_series)"&gt;“Vikings”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nonetheless, most applications and screenplays (especially TV series) are outcomes of close cooperation and that’s why it’s so easy to list the exceptions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-importance-of-structure-and-patterns"&gt;
  &lt;/a&gt;
  The importance of structure and patterns
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HNKTweXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1482341232961-3e5973a98e7b%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D640%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HNKTweXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1482341232961-3e5973a98e7b%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D640%26q%3D80"&gt;&lt;/a&gt;&lt;br&gt;
💻&lt;br&gt;
There is tons of great content about the application structure.&lt;br&gt;
Flat structure, layered architecture, grouping by modules, grouping by context, hexagonal architecture³…&lt;br&gt;
“Architecture” sounds serious but it mostly boils down to organizing folders and files.&lt;br&gt;
Having known that you placed the files thoughtfully you’re ready to write the code and most likely use some design patterns.&lt;br&gt;
They are battle-tested and well-described ways to solve popular problems. You don’t even have to recognize them, programmers tend to use them without being fully aware.&lt;br&gt;
They are everywhere though.&lt;/p&gt;

&lt;p&gt;📝&lt;br&gt;
It’s also the case in screenwriting.&lt;br&gt;
If you’re going to use standard three-act structure you basically know where your turning points should be. You know that you have (at best) 10 minutes to grip the film audience.&lt;br&gt;
In a feature-length film you’re going to have a ~120 pages screenplay in which you’ll have ~40 scenes. You need character objectives for each of them and obstacles to make it dramatic.&lt;br&gt;
However, you don’t have to use that concrete structure and probably won’t when dealing with parallel stories of multiple characters at once⁴.&lt;br&gt;
Full awareness about all of this while writing a screenplay is not essential yet knowing patterns definitely helps in recognizing potential weak points and choosing the right tool for the job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#every-part-should-be-necessary"&gt;
  &lt;/a&gt;
  Every part should be necessary
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BadyQtVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1596729889239-68620974bc10%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D640%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BadyQtVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1596729889239-68620974bc10%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D640%26q%3D80"&gt;&lt;/a&gt;&lt;br&gt;
💻&lt;br&gt;
If you’re a programmer and you worked with properly configured project (actually - a tool used within the project called “linter”) you may have seen similar message more than once:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;'doSomethingStrange' is assigned a value but never used. eslint(no-unused-vars)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The linter helps you in identifying unused code so you can easily get rid of it.&lt;br&gt;
We don’t need code which doesn’t serve any function in the current application and only generates additional noise which makes understanding the rest of code harder.&lt;br&gt;
Notice: we don’t need it so much that we’ve made tools to catch it.&lt;/p&gt;

&lt;p&gt;📝&lt;br&gt;
If you're a screenwriter I’m sure you’re familiar with the term “Chekhov’s gun”, but for the rest of readers:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If in the first act you have hung a pistol on the wall, then in the following one it should be fired. Otherwise don’t put it there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s move on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-is-more-important-than-writing"&gt;
  &lt;/a&gt;
  Reading is more important than writing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---wL8OQ8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1607217237228-a8b69908bad6%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D640%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---wL8OQ8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1607217237228-a8b69908bad6%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D640%26q%3D80"&gt;&lt;/a&gt;&lt;br&gt;
💻&lt;br&gt;
It’s often said that reading other people's code will make you a better programmer.&lt;br&gt;
That’s so obvious for experienced ones that it may be even called a truism.&lt;br&gt;
Thanks to that you may find more non-standard approaches to solve specific problems than you know from famous, SOLID books, that I’m sure you’ve read (if you’re a programmer, of course).&lt;br&gt;
But doing self-reviews is not less important. &lt;br&gt;
It’s a good practice to read your code before you convey it to your coworkers. You’ll probably find some room for improvement and do some rewrites.&lt;br&gt;
Then this code is read by your teammates who check it and try to understand.&lt;br&gt;
They may have some suggestions to make it even better or just accept it.&lt;br&gt;
Ultimately, reading makes your application code better.&lt;/p&gt;

&lt;p&gt;📝&lt;br&gt;
I don’t like generalising - I know only a few professional screenwriters but they tend to be bookworms. They read a lot not only to get inspired yet to understand other people better and the context in which they live(d).&lt;br&gt;
Writing a convincing story about, let’s say, a “German knight” without knowing anything about the epoch would be hard or even impossible - you need to get familiar with it.&lt;br&gt;
In that case you have to rely on books, because you are probably not going to meet a German knight in upcoming weeks.&lt;br&gt;
Ultimately, screenwriting is just storytelling. Storytelling is based on sharing experiences (they don't have to be ours).&lt;/p&gt;

&lt;p&gt;In screenwriting reading also leads to rewrites. Typically screenwriters do several rewrites (presumably more than 3) before the screenplay is ready for production stage (wherein it’s very likely to be partially rewritten), but it highly depends on the way the author works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_P3KSpZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1518349619113-03114f06ac3a%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D640%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_P3KSpZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1518349619113-03114f06ac3a%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D640%26q%3D80"&gt;&lt;/a&gt;&lt;br&gt;
💻&lt;br&gt;
I didn’t mention that before, but during the process of creating new functionality (adding new application code) it’s a good practice to test if that code actually works. To do so, programmers write so-called “unit tests”, which looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;expect(addOneTo(4)).toBe(5);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is a painfully simple test of one function called “addOneTo” being a tiny part of an application just to show the concept. If the function works correctly this test is going to pass.&lt;br&gt;
Of course that’s not everything.&lt;br&gt;
The whole application is often tested manually by professionals who check all possible usage and seek for bugs.&lt;/p&gt;

&lt;p&gt;📝&lt;br&gt;
Screenwriters perform manual tests to check if particular scenes work correctly.&lt;br&gt;
They read dialogues out loud to catch any artificial parts that may be noticed by future audiences.&lt;br&gt;
Sometimes it’s not enough and they test it with a bunch of friends, colleagues or other people who weren’t really involved during the writing phase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#formatting"&gt;
  &lt;/a&gt;
  Formatting
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urfFPYbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1537884944318-390069bb8665%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D640%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urfFPYbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1537884944318-390069bb8665%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D640%26q%3D80"&gt;&lt;/a&gt;&lt;br&gt;
💻&lt;br&gt;
Finally! Last thing!&lt;br&gt;
Formatting is crucial for reading and understanding the application code by people but it’s not really important for the computer which executes it.&lt;br&gt;
That’s why it is always a programmer's job to take care of it.&lt;br&gt;
Thankfully there are tools that automate this process (e.g. code is formatted after each CTRL + S by a tool called formatter), therefore programmers don’t have to think about it.&lt;/p&gt;

&lt;p&gt;📝&lt;br&gt;
Remember &lt;code&gt;FADE IN&lt;/code&gt; from the beginning of the article?&lt;br&gt;
That’s the first two words of a properly formatted screenplay.&lt;br&gt;
Then there is action and dialogue (most likely) and we end everything up with &lt;code&gt;FADE OUT&lt;/code&gt;.&lt;br&gt;
There are dozens of rules on how to format a screenplay in a professional way and that’s why screenwriters often use dedicated applications which perform it automatically.&lt;br&gt;
There are also tools based on plain text formatting which is something that you probably would start with if you were a &lt;a href="https://www.markdownguide.org/"&gt;Markdown&lt;/a&gt; fanboy (see: &lt;a href="https://fountain.io/"&gt;Fountain&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;And that’s it for now. I hope you liked it! 😃 &lt;br&gt;
If you found something unclear don't hesitate to leave a comment - I would love to discuss. Cheers! 👋 &lt;/p&gt;

&lt;p&gt;&lt;code&gt;:qw&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FADE OUT&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Footnotes:&lt;/p&gt;

&lt;p&gt;¹ Yes, Kyle is no longer alone, there is a team which is working on Bitwarden right now.&lt;br&gt;
² Even if there is only one screenwriter in the credits it doesn't have to be the only one person who was writing the screenplay. So-called Script doctors remain uncredited.&lt;br&gt;
³ Great talk about application architecture: &lt;a href="https://www.youtube.com/watch?v=oL6JBUk6tj0"&gt;https://www.youtube.com/watch?v=oL6JBUk6tj0&lt;/a&gt;&lt;br&gt;
⁴ Classic film with aforementioned structure: &lt;a href="https://www.imdb.com/title/tt0108122/"&gt;https://www.imdb.com/title/tt0108122/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>go</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Creating a blog using Nuxt and Nuxt Content - with TailwindCSS</title>
      <author>Miracleio</author>
      <pubDate>Sat, 11 Sep 2021 23:38:54 +0000</pubDate>
      <link>https://dev.to/miracleio/creating-a-blog-using-nuxt-and-nuxt-content-with-tailwindcss-5gd3</link>
      <guid>https://dev.to/miracleio/creating-a-blog-using-nuxt-and-nuxt-content-with-tailwindcss-5gd3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-were-going-to-be-building"&gt;
  &lt;/a&gt;
  What we're going to be building
&lt;/h2&gt;

&lt;p&gt;We will be building a simple blog site using &lt;a href="https://nuxtjs.org/"&gt;Nuxt&lt;/a&gt; which is a framework popularly used for server side rendering and Static Site Generation with Vue.&lt;/p&gt;

&lt;p&gt;We'll also be using &lt;a href="https://content.nuxtjs.org/"&gt;Nuxt Content&lt;/a&gt; which is a module which acts as a &lt;strong&gt;Git-based Headless CMS&lt;/strong&gt; that fetches your Markdown, JSON, YAML, XML and CSV files through a MongoDB like API. It has powerful features that allow you to write blogs, documentations and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before we dive right in, you should have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A basic understanding of HTML, CSS &amp;amp; JS, Vue and the &lt;a href="https://www.markdownguide.org/basic-syntax/"&gt;Markdown syntax&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/"&gt;Node&lt;/a&gt; installed&lt;/li&gt;
&lt;li&gt;A text editor, we recommend VS Code with the Vetur extension or WebStorm&lt;/li&gt;
&lt;li&gt;A terminal, I recommend using VS Code's integrated terminal&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Let's install everything we need for the project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-nuxt-using-createnuxtapp"&gt;
  &lt;/a&gt;
  Install nuxt using create-nuxt-app
&lt;/h3&gt;

&lt;p&gt;To get started quickly you can use the create-nuxt-app.&lt;/p&gt;

&lt;p&gt;Make sure you have npx installed (npx is shipped by default since npm 5.2.0) or npm v6.1 or yarn.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-nuxt-app &amp;lt;project-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Choose &lt;em&gt;Content - Git-based Headless CMS&lt;/em&gt; option from Nuxt.js modules&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pztnnG0Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8220oni3yhs9y772w8b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pztnnG0Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8220oni3yhs9y772w8b.png" alt="blog-with-nuxt-content-create-nuxt-app-install-content-Annotation 2021-07-11 014841"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Proceed to select other options, here's my preset:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DZR3AS2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vbtcukp53cmjggjdji2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DZR3AS2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vbtcukp53cmjggjdji2n.png" alt="blog-with-nuxt-content-create-nuxt-app-installation-Annotation 2021-07-11 015118"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Installation complete! 🎉&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dN2gkT_y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2gqwiomt2aw2obwz549.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dN2gkT_y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2gqwiomt2aw2obwz549.png" alt="blog-with-nuxt-content-create-nuxt-app-installation-complete-Annotation 2021-07-11 021302"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#install-nuxt-content-separately"&gt;
  &lt;/a&gt;
  Install nuxt content separately
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;If you already have Nuxt setup before now, you can install the content module by running the command&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#install nuxt content&lt;/span&gt;

npm &lt;span class="nb"&gt;install&lt;/span&gt; @nuxt/content
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can add it to our modules property inside our nuxt.config file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//nuxt.config.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nuxt/content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-tailwind-and-tailwindcss-typography-via-npm"&gt;
  &lt;/a&gt;
  Install Tailwind and Tailwindcss typography via npm
&lt;/h3&gt;

&lt;p&gt;Tailwindcss is a utility first css framework that provides us with custom classes we can use to style our app.&lt;/p&gt;

&lt;p&gt;Tailwindcss Typography is "A plugin that provides a set of &lt;code&gt;prose&lt;/code&gt; classes you can use to add beautiful typographic defaults to any vanilla HTML you don't control (like HTML rendered from Markdown, or pulled from a CMS)."&lt;/p&gt;

&lt;p&gt;Install @nuxtjs/tailwindcss which is a nuxt module for tailwind integration as well as Tailwind and its peer-dependencies using npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; @nuxtjs/tailwindcss tailwindcss@latest postcss@latest autoprefixer@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the @nuxtjs/tailwindcss module to the buildModules section of your nuxt.config.js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// nuxt.config.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;buildModules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nuxtjs/tailwindcss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-your-configuration-file"&gt;
  &lt;/a&gt;
  Create your configuration file
&lt;/h3&gt;

&lt;p&gt;Next, generate your tailwind.config.js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a minimal tailwind.config.js file at the root of your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//tailwind.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// or 'media' or 'class'&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;code&gt;tailwind.css&lt;/code&gt; file in &lt;code&gt;assets/css.tailwind.css&lt;/code&gt; use the &lt;code&gt;@tailwind&lt;/code&gt; directive to inject Tailwind’s base, components, and utilities styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/*assets/css/tailwind.css*/&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can import the css file into your components or make it accessible globally by defining the CSS files/modules/libraries you want to set globally &lt;em&gt;(included in every page).&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="cm"&gt;/* nuxt.config.js*/&lt;/span&gt;
  &lt;span class="c1"&gt;// Global CSS: https://go.nuxtjs.dev/config-css&lt;/span&gt;
  &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;// CSS file in the project&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/assets/css/tailwind.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-tailwind-typography"&gt;
  &lt;/a&gt;
  Install Tailwind typography
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Using npm&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; @tailwindcss/typography
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add the plugin to your tailwind.config.js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// or 'media' or 'class'&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tailwindcss/typography&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configure-tailwind-to-remove-unused-styles-in-production"&gt;
  &lt;/a&gt;
  Configure Tailwind to remove unused styles in production
&lt;/h3&gt;

&lt;p&gt;In your tailwind.config.js file, configure the purge option with the paths to all of your pages and components so Tailwind can tree-shake unused styles in production builds:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/**/*.{vue,js}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./layouts/**/*.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./pages/**/*.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./plugins/**/*.{js,ts}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./nuxt.config.{js,ts}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// or 'media' or 'class'&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tailwindcss/typography&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#quick-note"&gt;
  &lt;/a&gt;
  Quick note
&lt;/h3&gt;

&lt;p&gt;While going through these steps, I ran into an &lt;strong&gt;issue of mismatched packages&lt;/strong&gt; while trying to run &lt;code&gt;npm run dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dLNQOstN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rsbs404apyajua84is7q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLNQOstN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rsbs404apyajua84is7q.png" alt="blog-with-nuxt-content-version-mismatch-error-Annotation 2021-07-11 031752"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's how I fixed it:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;update the mismatched package(s), which in my case was the &lt;code&gt;vue-server-renderer&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i vue-server-renderer@latest &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V3ploY_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0w0lqi8v71gfkya3kbj1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V3ploY_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0w0lqi8v71gfkya3kbj1.png" alt="blog-with-nuxt-content-update-vue-renderer-version-Annotation 2021-07-11 032705"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That fixed it for me, when I ran &lt;code&gt;npm run dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--quLR2-8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvo06lbbk7417yikzznm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--quLR2-8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvo06lbbk7417yikzznm.png" alt="blog-with-nuxt-content-run-dev-succesfull-Annotation 2021-07-11 032953"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Lx8eid---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8xk2z31y6vvwv5718b1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Lx8eid---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8xk2z31y6vvwv5718b1.png" alt="blog-with-nuxt-content-site-preview-Annotation 2021-07-11 032953"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sweet! 🎉, now we can move into the interesting stuff&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-your-first-blog-post"&gt;
  &lt;/a&gt;
  Create your first blog post
&lt;/h2&gt;

&lt;p&gt;The content module works by reading the files in our &lt;code&gt;content/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;So, navigate to &lt;code&gt;content/&lt;/code&gt; and create an &lt;code&gt;articles/&lt;/code&gt; folder.&lt;br&gt;
Create a &lt;code&gt;first-blog-post.md&lt;/code&gt; file and&lt;br&gt;
insert the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;content/articles/first-blog-post.md
&lt;span class="p"&gt;
---
&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--- YAML Front matter section in-between triple dashes '---' --&amp;gt;&lt;/span&gt;

title: First Blog Post
description: Learning how to create my blog using nuxt content
&lt;span class="p"&gt;
---
&lt;/span&gt;
&lt;span class="gh"&gt;# My first blog post&lt;/span&gt;

Hey there! 👋🏾

This is my first blog post learning nuxt content.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gx2jA2ol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6063qi8eu7b43jy8o0e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gx2jA2ol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6063qi8eu7b43jy8o0e.png" alt="blog-with-nuxt-content-create-content-md-file-Annotation 2021-07-11 034837"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note the YAML front matter section, this will be used later on to insert custom variables like title and description that we will access using &lt;code&gt;$content&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, we're going to create a &lt;a href="https://nuxtjs.org/docs/2.x/directory-structure/pages#dynamic-pages"&gt;dynamic page&lt;/a&gt; which will be used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fetch the article content using &lt;code&gt;asyncData&lt;/code&gt; before the page has been rendered. We have access to our content through the context by using the variable &lt;code&gt;$content&lt;/code&gt;. Since we are using a dynamic page, we can know what article file to fetch using the &lt;code&gt;params.slug&lt;/code&gt; variable provided by vue router to get the name of each article&lt;/li&gt;
&lt;li&gt;render the article in the template using &lt;code&gt;&amp;lt;nuxt-content&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, navigate to &lt;code&gt;pages/&lt;/code&gt; and create a &lt;code&gt;blog/&lt;/code&gt; folder.&lt;br&gt;
Create a &lt;code&gt;_slug.vue&lt;/code&gt; (our dynamic page) file and&lt;br&gt;
insert the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;pages/blog/_slug.vue

&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- this is where we will render the article contents --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nuxt-content&lt;/span&gt; &lt;span class="na"&gt;:document=&lt;/span&gt;&lt;span class="s"&gt;"article"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//here, we will fetch the article from the article/ folder based on the name provided in the 'params.slug`&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To display our content we are using the &amp;lt;nuxt-content /&amp;gt; component by passing in the variable we returned into the &lt;code&gt;:document="article"&lt;/code&gt; document prop.&lt;/p&gt;

&lt;p&gt;Go to your site and you should see something like this&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WVBtwcRn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cwzpbci8wxbyxzq38vr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WVBtwcRn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cwzpbci8wxbyxzq38vr.png" alt="blog-with-nuxt-content-render-first-article-Annotation 2021-07-11 123202"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#accessing-default-injected-variables"&gt;
  &lt;/a&gt;
  Accessing default injected variables
&lt;/h2&gt;

&lt;p&gt;The content module provides lots of injected variables which we can use in our template.&lt;br&gt;
Some of the ones will be using are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;body: body text&lt;/li&gt;
&lt;li&gt;dir: directory&lt;/li&gt;
&lt;li&gt;extension: file extension (.md in this example)&lt;/li&gt;
&lt;li&gt;path: the file path&lt;/li&gt;
&lt;li&gt;slug: the file slug&lt;/li&gt;
&lt;li&gt;toc: an array containing our table of contents&lt;/li&gt;
&lt;li&gt;createdAt: the file creation date&lt;/li&gt;
&lt;li&gt;updatedAt: the date of the last file update&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can access this data using the &lt;code&gt;article&lt;/code&gt; variable we created. Let's check them out by printing it with a &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tag in our template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&lt;/span&gt; {{ article }} &lt;span class="nt"&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should see something like this on our page&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first-blog-post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;children&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;// article content&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dir&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/articles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/articles/first-blog-post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;extension&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;createdAt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2021-07-11T02:34:43.695Z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;updatedAt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2021-07-11T03:33:33.608Z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#custom-injected-variables"&gt;
  &lt;/a&gt;
  Custom injected variables
&lt;/h3&gt;

&lt;p&gt;We'll also use this to display custom injected variables specified in the YAML front matter which must be valid YAML at the top of the file.&lt;br&gt;
This is useful for adding SEO variables such as title, description and image of your article.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"article"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="c"&gt;&amp;lt;!-- Our custom injected variables specified with the The YAML front matter goes here  --&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"article-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{article.title}}&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{article.description}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

          &lt;span class="c"&gt;&amp;lt;!-- container for article details --&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"details-cont"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="c"&gt;&amp;lt;!-- the format date function converts the default date to a readable form --&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{formatDate(article.updatedAt)}}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;

      &lt;span class="c"&gt;&amp;lt;!-- this is where we will render the article contents --&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;nuxt-content&lt;/span&gt; &lt;span class="na"&gt;:document=&lt;/span&gt;&lt;span class="s"&gt;"article"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//here, we will fetch the article from the article/ folder based on the name provided in the 'params.slug`&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// format the date to be displayed in a readable format&lt;/span&gt;
        &lt;span class="nx"&gt;formatDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the &lt;code&gt;formatDate&lt;/code&gt; function which we use to convert the &lt;code&gt;article.updatedAt&lt;/code&gt; value to a more readable date.&lt;/p&gt;

&lt;p&gt;We should have something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ytgKihcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2769n0hwuomh8jus5d1k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ytgKihcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2769n0hwuomh8jus5d1k.png" alt="blog-with-nuxt-content-article-with-injected-variables-Annotation 2021-07-11 135032"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we have two heading &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; elements. One from the YAML front matter and the main markdown. We can remove the one in the main markdown.&lt;br&gt;
We can also add more content for the styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;## &amp;lt;!--- content/articles/first-blog-post --&amp;gt;&lt;/span&gt;

title: My First Blog Post
description: Learning how to create my blog using nuxt, the nuxt content module and tailwindcss
&lt;span class="p"&gt;
--------
&lt;/span&gt;
Hey there! 👋🏾
This is my first blog post learning nuxt content.

I'm currently building it using the following:
&lt;span class="p"&gt;
-&lt;/span&gt; Nuxt.js
&lt;span class="p"&gt;-&lt;/span&gt; Nuxt Content module
&lt;span class="p"&gt;-&lt;/span&gt; Tailwindcss
&lt;span class="p"&gt;-&lt;/span&gt; Tailwindcss typography
&lt;span class="gt"&gt;
&amp;gt; Sweet huh?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! 😎 Let's touch it up a bit with some styling.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling-with-tailwindcss-and-tailwindcss-typography"&gt;
  &lt;/a&gt;
  Styling with Tailwindcss and Tailwindcss typography
&lt;/h2&gt;

&lt;p&gt;The content from our article shows up when we visit the slug along with some custom data. But it looks ugly, let's fix that.&lt;/p&gt;

&lt;p&gt;First, we apply the Tailwindcss typography &lt;code&gt;.prose&lt;/code&gt; class to the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element for some basic styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"article prose lg:prose-xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we just create our custom styles in &lt;code&gt;pages/blog/_slug.vue&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt; &lt;span class="nt"&gt;scoped&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;@layer&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.article&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;prose&lt;/span&gt; &lt;span class="py"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;prose-xl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;p-4&lt;/span&gt; &lt;span class="err"&gt;mt-6&lt;/span&gt; &lt;span class="py"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;mt-8&lt;/span&gt; &lt;span class="n"&gt;m-auto&lt;/span&gt; &lt;span class="n"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;max-w-3xl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.article-header&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;mb-12&lt;/span&gt; &lt;span class="err"&gt;pb-8&lt;/span&gt; &lt;span class="py"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;mb-16&lt;/span&gt; &lt;span class="n"&gt;border-gray-200&lt;/span&gt; &lt;span class="n"&gt;border-b-2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.article-header&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;mb-0;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.article-header&lt;/span&gt; &lt;span class="nc"&gt;.details-cont&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;text-opacity-50&lt;/span&gt; &lt;span class="err"&gt;text-sm;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our page now looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-iRjbIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmi84d7jywrvj41gwq1r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-iRjbIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmi84d7jywrvj41gwq1r.png" alt="blog-with-nuxt-content-configure-blog-with-styling-Annotation 2021-07-11 162500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sweet indeed 😍&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-html-markup-and-vue-components-in-our-article-markdown"&gt;
  &lt;/a&gt;
  Adding HTML markup and Vue components in our article markdown
&lt;/h2&gt;

&lt;p&gt;We can add valid html code in our markdown file.&lt;br&gt;
Let's create an info box with some styling&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&amp;lt;!--
    content/articles/first-blog-post.md&lt;span class="sb"&gt;

    ...rest of file

    HTML in markdown
    Info box with svg icon
&lt;/span&gt; --&amp;gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex gap-4 items-start p-6 bg-blue-200 text-gray-800 border-blue-700 border-l-4 rounded-md"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-blue-700"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"-2 -2 24 24"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;preserveAspectRatio=&lt;/span&gt;&lt;span class="s"&gt;"xMinYMin"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon jam jam-info"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-blue-700"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;'M10 20C4.477 20 0 15.523 0 10S4.477 0 10 0s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 1 0 0-16 8 8 0 0 0 0 16zm0-10a1 1 0 0 1 1 1v5a1 1 0 0 1-2 0V9a1 1 0 0 1 1-1zm0-1a1 1 0 1 1 0-2 1 1 0 0 1 0 2z'&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-800"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"line-height: initial"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Here we have important information we would love to share with you!&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should have something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1FT2vsmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5jt57q5mlayk3rr12x7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1FT2vsmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5jt57q5mlayk3rr12x7.png" alt="blog-with-nuxt-content-configure-blog-with-html-markup-Annotation 2021-07-11 175231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sweet, now we can make this a vue component that can be reused&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;infoBox.vue&lt;/code&gt; file in &lt;code&gt;components/global&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- components/global/infoBox.vue--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"info-box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt;
        &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;
        &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"-2 -2 24 24"&lt;/span&gt;
        &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt;
        &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt;
        &lt;span class="na"&gt;preserveAspectRatio=&lt;/span&gt;&lt;span class="s"&gt;"xMinYMin"&lt;/span&gt;
        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon jam jam-info"&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt;
          &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M10 20C4.477 20 0 15.523 0 10S4.477 0 10 0s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 1 0 0-16 8 8 0 0 0 0 16zm0-10a1 1 0 0 1 1 1v5a1 1 0 0 1-2 0V9a1 1 0 0 1 1-1zm0-1a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"info-box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Some information gets diaplayed here &lt;span class="nt"&gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;infoBox&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;scoped&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;@layer&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;text-gray-800;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.info-box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;flex&lt;/span&gt; &lt;span class="err"&gt;gap-4&lt;/span&gt; &lt;span class="err"&gt;items-start&lt;/span&gt; &lt;span class="err"&gt;p-6&lt;/span&gt; &lt;span class="err"&gt;bg-blue-200&lt;/span&gt; &lt;span class="err"&gt;text-gray-800&lt;/span&gt; &lt;span class="err"&gt;border-blue-500&lt;/span&gt; &lt;span class="err"&gt;border-l-4&lt;/span&gt; &lt;span class="err"&gt;rounded-md;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.info-box&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;text-gray-800&lt;/span&gt; &lt;span class="err"&gt;leading-none;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;We are creating it in a &lt;code&gt;components/global&lt;/code&gt; folder to register the component globally in order for nuxt to be able to auto import it into &lt;code&gt;&amp;lt;nuxt-content&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, replace the html with our new &lt;code&gt;infoBox&lt;/code&gt; component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- infoBox component automatically imported as global component  --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;info-box&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- insert into slot --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;#info-box&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Here we have important information we would love to share with you!
  &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/info-box&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we view our page, we should still see our info box&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9xJfXabc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nu6matr245fqua0iwzs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9xJfXabc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nu6matr245fqua0iwzs.png" alt="blog-with-nuxt-content-configure-blog-with-html-markup-Annotation 2021-07-11 175231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-content-api"&gt;
  &lt;/a&gt;
  The content API
&lt;/h2&gt;

&lt;p&gt;It's pretty awesome that the content module provides an API that we can access on the &lt;code&gt;http://localhost:3000/_content/&lt;/code&gt; route. we can fetch data for all articles on the &lt;code&gt;http://localhost:3000/_content/articles&lt;/code&gt; route.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
We can access a single article using the slug of the article i.e &lt;code&gt;http://localhost:3000/_content/articles/first-blog-post&lt;/code&gt; to access the data for &lt;code&gt;http://localhost:3000/blog/first-blog-post&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-previous-and-next-article-functionality"&gt;
  &lt;/a&gt;
  Adding Previous and Next Article functionality
&lt;/h2&gt;

&lt;p&gt;We're going to be adding a previous and next article functionality to our blog to navigate to other posts on our sites.&lt;br&gt;
So, let's create about three duplicates of our &lt;code&gt;content/articles/first-blog-post.md&lt;/code&gt; file so we can have more posts to navigate to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JWaI5ZWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjtxv6ry5hrommtwnb66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JWaI5ZWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjtxv6ry5hrommtwnb66.png" alt="blog-with-nuxt-content-duplicate-article-Annotation 2021-07-11 190022"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's create our &lt;code&gt;prevNext.vue&lt;/code&gt; component in our &lt;code&gt;components/&lt;/code&gt; folder&lt;/p&gt;

&lt;p&gt;Here, we have a &lt;code&gt;nuxt-link&lt;/code&gt; component which basically accesses the &lt;code&gt;slug&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; of the previous or next article.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- components/prevNext --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- ...rest of file --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;nuxt-link&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"prev"&lt;/span&gt; &lt;span class="na"&gt;:to=&lt;/span&gt;&lt;span class="s"&gt;"{ name: 'blog-slug', params: { slug: prev.slug } }"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"prev"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-cont"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;svg&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="na"&gt;svg&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{ prev.title }}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nuxt-link&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- nuxt-link for "next" --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- ...rest of file --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This data is what will be passed as props to the component which we defined here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- components/prevNext --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// create props for prev and next data that will be passed to the component&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our new component should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- components/prevNext --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"prev-next"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"prev-next"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- if prev data is available display the link --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nuxt-link&lt;/span&gt;
      &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"prev"&lt;/span&gt;
      &lt;span class="na"&gt;:to=&lt;/span&gt;&lt;span class="s"&gt;"{ name: 'blog-slug', params: { slug: prev.slug } }"&lt;/span&gt;
      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"prev"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-cont"&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&amp;lt;svg&lt;/span&gt;
          &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;
          &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"-5 -5 24 24"&lt;/span&gt;
          &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt;
          &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt;
          &lt;span class="na"&gt;preserveAspectRatio=&lt;/span&gt;&lt;span class="s"&gt;"xMinYMin"&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon jam jam-arrow-left"&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt;
            &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M3.414 7.657l3.95 3.95A1 1 0 0 1 5.95 13.02L.293 7.364a.997.997 0 0 1 0-1.414L5.95.293a1 1 0 1 1 1.414 1.414l-3.95 3.95H13a1 1 0 0 1 0 2H3.414z"&lt;/span&gt;
          &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/svg&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt; {{ prev.title }} &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/nuxt-link&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- else display empty span for styling purposes --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"prev"&lt;/span&gt; &lt;span class="na"&gt;v-else&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- if prev data is available display the link --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nuxt-link&lt;/span&gt;
      &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"next"&lt;/span&gt;
      &lt;span class="na"&gt;:to=&lt;/span&gt;&lt;span class="s"&gt;"{ name: 'blog-slug', params: { slug: next.slug } }"&lt;/span&gt;
      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"next"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{ next.title }}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-cont"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt;
          &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;
          &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"-5 -5 24 24"&lt;/span&gt;
          &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt;
          &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt;
          &lt;span class="na"&gt;preserveAspectRatio=&lt;/span&gt;&lt;span class="s"&gt;"xMinYMin"&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon jam jam-arrow-right"&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt;
            &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M10.586 5.657l-3.95-3.95A1 1 0 0 1 8.05.293l5.657 5.657a.997.997 0 0 1 0 1.414L8.05 13.021a1 1 0 1 1-1.414-1.414l3.95-3.95H1a1 1 0 1 1 0-2h9.586z"&lt;/span&gt;
          &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/nuxt-link&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- else display empty span for styling purposes --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"next"&lt;/span&gt; &lt;span class="na"&gt;v-else&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// create props for prev and next data that will be passed to the component&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;scoped&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;@layer&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* styling for the components */&lt;/span&gt;
    &lt;span class="nc"&gt;.prev-next&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;flex&lt;/span&gt; &lt;span class="err"&gt;gap-12&lt;/span&gt; &lt;span class="err"&gt;py-8&lt;/span&gt; &lt;span class="err"&gt;items-center&lt;/span&gt; &lt;span class="err"&gt;justify-between&lt;/span&gt; &lt;span class="err"&gt;m-auto&lt;/span&gt; &lt;span class="err"&gt;max-w-xl&lt;/span&gt; &lt;span class="py"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max-w-4xl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.prev-next&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;flex&lt;/span&gt; &lt;span class="err"&gt;gap-2;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's get back to our &lt;code&gt;components/blog/_slug.vue&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/blog/_slug.vue&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;// assign the first two objects in returned array to prev &amp;amp; next constant variables&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;// fetch only the title and slug from the articles&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;only&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;slug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;updatedAt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="c1"&gt;// sortby time updated, in ascending order&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sortBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;updatedAt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;// get the correct slug&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;surround&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;// fetch data&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;// return the data to be vailable for use in the file&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// rest of &amp;lt;script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have the data of the each of the first two sorted articles each in &lt;code&gt;prev&lt;/code&gt; &amp;amp; &lt;code&gt;next&lt;/code&gt; variables, which we will now pass to the &lt;code&gt;prevNext&lt;/code&gt; component after the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- components/blog/_slug.vue --&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- rest of file --&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Pass the data to the component props--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;prev-next&lt;/span&gt; &lt;span class="na"&gt;:prev=&lt;/span&gt;&lt;span class="s"&gt;"prev"&lt;/span&gt; &lt;span class="na"&gt;:next=&lt;/span&gt;&lt;span class="s"&gt;"next"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/prev-next&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we go:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UuVoM7wM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wx1en3j1jdtxwj13v04k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UuVoM7wM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wx1en3j1jdtxwj13v04k.png" alt="blog-with-nuxt-content-prevVext-component-Annotation 2021-07-12 003740"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#listing-out-all-our-articles"&gt;
  &lt;/a&gt;
  Listing out all our Articles
&lt;/h2&gt;

&lt;p&gt;Now, it'll be really nice if we could display our articles on our blog page.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Let's create a new page in our &lt;code&gt;blogs/&lt;/code&gt; folder; &lt;code&gt;pages/blogs/index.vue&lt;/code&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Then in the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, we pass in &lt;code&gt;$content&lt;/code&gt; and &lt;code&gt;params&lt;/code&gt; into our &lt;code&gt;asyncData&lt;/code&gt; function.&lt;br&gt;
Within the function we pass &lt;code&gt;aritcles&lt;/code&gt; which is the folder which our articles are stored into &lt;code&gt;$content&lt;/code&gt; and chain &lt;code&gt;.only(['title', 'slug', 'updatedAt', 'description'])&lt;/code&gt; to fetch only those attributes from the articles,&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;code&gt;.sortBy('createdAt', 'asc')&lt;/code&gt; to sort it&lt;br&gt;
&lt;br&gt;&lt;br&gt;
and lastly &lt;code&gt;fetch()&lt;/code&gt; to fetch the data and assign it to &lt;code&gt;const articles&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- pages/blog/index.vue --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;$content&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;only&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;slug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;updatedAt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sortBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;createdAt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;articles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;formatDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// format the date to be displayed in a readable format&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can use the &lt;code&gt;v-for&lt;/code&gt; directive to render our articles from the &lt;code&gt;articles&lt;/code&gt; data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- pages/blog/index.vue --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blog-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;It's nice you're here. Welcome.&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        Have a look what I've been spending hours behind the screen writing
        about
      &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"articles"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"article"&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"article of articles"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"article.slug"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;nuxt-link&lt;/span&gt; &lt;span class="na"&gt;:to=&lt;/span&gt;&lt;span class="s"&gt;"{ name: 'blog-slug', params: { slug: article.slug } }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ article.title }}&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ article.description }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"details-cont"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{ formatDate(article.updatedAt) }}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/nuxt-link&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!--- Styling the page --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;scoped&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;@layer&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.blog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;p-4&lt;/span&gt; &lt;span class="err"&gt;mt-6&lt;/span&gt; &lt;span class="py"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;mt-8&lt;/span&gt; &lt;span class="n"&gt;m-auto&lt;/span&gt; &lt;span class="n"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;max-w-3xl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.blog-header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;prose&lt;/span&gt; &lt;span class="py"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;prose-xl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;mb-12&lt;/span&gt; &lt;span class="err"&gt;pb-8&lt;/span&gt; &lt;span class="py"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;mb-16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.blog-header&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;mb-0;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.articles&lt;/span&gt; &lt;span class="nc"&gt;.article&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;prose&lt;/span&gt; &lt;span class="py"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;prose-lg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;pl-0&lt;/span&gt; &lt;span class="err"&gt;py-2&lt;/span&gt; &lt;span class="err"&gt;list-none;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.articles&lt;/span&gt; &lt;span class="nc"&gt;.article&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;mb-0;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's visit &lt;a href="http://localhost:3000/blog"&gt;http://localhost:3000/blog&lt;/a&gt;, we should see our blog page&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OV34al5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5uh8bdz3j8ru2zyk4tbv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OV34al5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5uh8bdz3j8ru2zyk4tbv.png" alt="blog-with-nuxt-content-blog-list-index-page-Annotation 2021-07-14 061942"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-navigation-for-our-site"&gt;
  &lt;/a&gt;
  Creating a navigation for our site
&lt;/h2&gt;

&lt;p&gt;The last thing we are going to be doing is creating a simple navigation that will take us to our home page and blog page.&lt;/p&gt;

&lt;p&gt;Let's create our &lt;code&gt;siteHeader.vue&lt;/code&gt; component in &lt;code&gt;components/&lt;/code&gt; with some basic styling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- components/siteHeader.vue --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"site-header"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"site-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;nuxt-link&lt;/span&gt; &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;figure&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"site-logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;PortfolioX&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/nuxt-link&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"site-nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;nuxt-link&lt;/span&gt; &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;"/blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="nt"&gt;&amp;lt;/nuxt-link&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;scoped&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;@layer&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.site-header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;w-auto&lt;/span&gt; &lt;span class="err"&gt;p-4&lt;/span&gt; &lt;span class="err"&gt;py-8&lt;/span&gt; &lt;span class="err"&gt;sticky&lt;/span&gt; &lt;span class="err"&gt;top-0&lt;/span&gt; &lt;span class="err"&gt;bg-white&lt;/span&gt; &lt;span class="err"&gt;bg-opacity-70&lt;/span&gt; &lt;span class="err"&gt;backdrop-filter&lt;/span&gt; &lt;span class="err"&gt;backdrop-blur-md&lt;/span&gt; &lt;span class="err"&gt;z-10;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.site-header&lt;/span&gt; &lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;m-auto&lt;/span&gt; &lt;span class="err"&gt;max-w-5xl&lt;/span&gt; &lt;span class="err"&gt;flex&lt;/span&gt; &lt;span class="err"&gt;items-center&lt;/span&gt; &lt;span class="err"&gt;justify-between;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we add it to our default site layout, in &lt;code&gt;layouts/default.vue&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- layouts/default.vue --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;site-header&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Nuxt&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;siteHeader.vue&lt;/code&gt; It is now automatically imported into our layout. Have a look at our page&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Iz-wFj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ighw93fy7merzj1gvg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Iz-wFj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ighw93fy7merzj1gvg1.png" alt="blog-with-nuxt-content-blog-with-site-header-Annotation 2021-07-14 075929"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beautiful 😘&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We've managed to build a pretty simple blog site with important features using just one module, nuxt/content.&lt;br&gt;
The focus of this article was the content module, so, I'll drop links for more reading on tailwindcss.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
I think this is a pretty awesome and useful feature in Nuxt.js.I think you would love to play around with it even more because there is a lot more functionality you can add to your project that we didn't cover here.&lt;/p&gt;

&lt;p&gt;I hope you see this useful, I will consider writing on deployment in the future but I'll just drop some links that I feel are useful till then.&lt;/p&gt;

&lt;p&gt;Thanks for reading. Happy coding 😎.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#futher-reading"&gt;
  &lt;/a&gt;
  Futher Reading
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The content module documentation: &lt;a href="https://content.nuxtjs.org/"&gt;https://content.nuxtjs.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;NuxtJs documentation: &lt;a href="https://nuxtjs.org/docs/2.x/get-started/installation"&gt;https://nuxtjs.org/docs/2.x/get-started/installation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Tailwindcss documentation: &lt;a href="https://tailwindcss.com/docs/"&gt;https://tailwindcss.com/docs/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#awesome-reads"&gt;
  &lt;/a&gt;
  Awesome reads
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;An article on creatung a blog with Nuxt content: &lt;a href="https://nuxtjs.org/blog/creating-blog-with-nuxt-content#add-a-search-field"&gt;https://nuxtjs.org/blog/creating-blog-with-nuxt-content#add-a-search-field&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;An article on building a prtfolio site with NuxtJs: &lt;a href="https://itnext.io/building-the-ultimate-portfolio-site-with-nuxt-js-and-netlify-beautiful-blazing-fast-100-seod-102913a60cfd"&gt;https://itnext.io/building-the-ultimate-portfolio-site-with-nuxt-js-and-netlify-beautiful-blazing-fast-100-seod-102913a60cfd&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>nuxt</category>
      <category>nuxtcontent</category>
      <category>vue</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>ASP.NET Core 6: Creando una app Multi-tenant (Parte 1)</title>
      <author>Isaac Ojeda</author>
      <pubDate>Sat, 11 Sep 2021 22:46:04 +0000</pubDate>
      <link>https://dev.to/isaacojeda/asp-net-core-6-creando-una-app-multi-tenant-parte-1-3df5</link>
      <guid>https://dev.to/isaacojeda/asp-net-core-6-creando-una-app-multi-tenant-parte-1-3df5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introducci%C3%B3n"&gt;
  &lt;/a&gt;
  Introducción
&lt;/h1&gt;

&lt;p&gt;En esta serie de posts estaremos viendo una de las formas que se pueden realizar aplicaciones multi-tenant en ASP.NET Core (Razor Pages en esta ocación).&lt;/p&gt;

&lt;p&gt;Utilizaremos distintos estilos de patrones para emplear mecanismos que nos facilitarán el día a día en una aplicación multi-tenant.&lt;/p&gt;

&lt;p&gt;Esta serie de posts se dividen en 3 partes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ASP.NET Core 6: Creando una app Multi-tenant (Parte 1) (este post)&lt;/li&gt;
&lt;li&gt;ASP.NET Core 6: Multi-tenant Single Database (Parte 2) (proximamente)&lt;/li&gt;
&lt;li&gt;ASP.NET Core 6: Multi-tenant Multi-Database (Parte 3) (proximamente)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Te recomiendo que este tutorial lo veas junto con el &lt;a href="https://github.com/isaacOjeda/DevToPosts/tree/main/MultiTenantSingleDatabase"&gt;código de ejemplo&lt;/a&gt; ya que hay muchos snippets y se volverá un poco más extenso con las demás partes.&lt;/p&gt;

&lt;p&gt;Si tienes alguna pregunta, no dudes en contactarme por mi twitter &lt;a href="https://twitter.com/balunatic"&gt;@balunatic&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qu%C3%A9-es-una-aplicaci%C3%B3n-multitenant"&gt;
  &lt;/a&gt;
  ¿Qué es una aplicación multi-tenant?
&lt;/h2&gt;

&lt;p&gt;Es una aplicación que responde diferente dependiendo de cual "tenant" se está accesando, existen distintas formas de crear aplicaciones multi-tenant:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;multi-aplicación:&lt;/strong&gt; Cada tenant tiene sus propios recursos y dependencias y se ejecuta todo por separado.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;single database&lt;/strong&gt;: Todos los tenants corren en la misma aplicación y en la misma base de datos. Aquí hay que tener cuidado para nunca exponer información de un tenant en otro, lo veremos en este post.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;multi database:&lt;/strong&gt; Todos los tenants tienen su propia base de datos pero utilizan la misma aplicación.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cada estilo de multi-tenant apps tiene sus beneficios y se deben de considerar distintos factores (como escalabilidad, cantidad de tenants, almacenamiento por tenant, etc)&lt;/p&gt;

&lt;p&gt;Este &lt;a href="https://docs.microsoft.com/en-us/azure/azure-sql/database/saas-tenancy-app-design-patterns"&gt;artículo&lt;/a&gt; explica muy bien las formas de hacer multi-tenancy y lo que hay que considerar. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qu%C3%A9-requerimientos-tiene-una-aplicaci%C3%B3n-multitenant"&gt;
  &lt;/a&gt;
  ¿Qué requerimientos tiene una aplicación multi-tenant?
&lt;/h2&gt;

&lt;p&gt;Hay un un par de requerimientos que deberíamos cumplir para crear una aplicación multi-tenant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resoluci%C3%B3n-del-tenant"&gt;
  &lt;/a&gt;
  Resolución del Tenant
&lt;/h3&gt;

&lt;p&gt;Según la solicitud HTTP que llegue a nuestro servicio, debemos de determinar que tenant se está accesando y así establecer cadenas de conexión a bases de datos, configuración y entre otras cosas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuraci%C3%B3n-del-tenant"&gt;
  &lt;/a&gt;
  Configuración del Tenant
&lt;/h3&gt;

&lt;p&gt;La aplicación podría configurarse diferente según el tenant que se está accediendo, como private keys de servicios externos y entre otras cosas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aislamiento-del-tenant"&gt;
  &lt;/a&gt;
  Aislamiento del Tenant
&lt;/h3&gt;

&lt;p&gt;Cada tenant debe de poder acceder a su información y solo a su información. Ya sea que utilicemos una sola base de datos o varias bases de datos por tenant, es importante establecer la infraestructura adecuada para hacer más difícil a los developers de que se equivoquen y mostrar información de otro tenant por algún error de código.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resolver-el-tenant"&gt;
  &lt;/a&gt;
  Resolver el tenant
&lt;/h1&gt;

&lt;p&gt;Para resolver un tenant primero necesitamos su representación en una clase, aquí podemos agregar lo que más nos sea útil de un tenant. Pero por practicidad podemos utilizar un diccionario y los datos que se quieran, ahí se agregan:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tenant&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Tenant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Identifier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Items&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Identifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Items&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Utilizaremos el campo &lt;code&gt;Identifier&lt;/code&gt; para poder saber que tenant se está tratando de usar en la solicitud actual (Ejemplo. &lt;code&gt;https://{identifier}.contoso.com&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;La propiedad &lt;code&gt;Id&lt;/code&gt; será nuestro identificador interno (el cual podría ser la llave primaria de la base de datos) y este no cambiará, &lt;code&gt;Identifier&lt;/code&gt; podría cambiar sin problema.&lt;/p&gt;

&lt;p&gt;Y por último tenemos el diccionario &lt;code&gt;Items&lt;/code&gt;, que como mencionaba arriba, nos ayudará agregar cualquier propiedad adicional que creamos conveniente.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#formas-comunes-de-resolver-un-tenant"&gt;
  &lt;/a&gt;
  Formas comunes de resolver un tenant
&lt;/h2&gt;

&lt;p&gt;Utilizaremos una estrategia para resolver el tenant según el request, la estrategia no debe basarse en ningún servicio o dato externo, así lo hacemos mejor estructurado y rápido.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seg%C3%BAn-el-host"&gt;
  &lt;/a&gt;
  Según el Host
&lt;/h3&gt;

&lt;p&gt;El tenant se determinará según el host que es enviado por el navegador, este para mi es el mejor porque cada cliente (tenant) podrá tener su propio dominio o al menos un subdominio. Ejemplos: &lt;code&gt;https://cliente1.contoso.com&lt;/code&gt;, &lt;code&gt;https://cliente2.contoso.com&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;En este caso, solo está cambiando el subdominio, pero podríamos soportar dominios personalizados para cada tenant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seg%C3%BAn-un-header"&gt;
  &lt;/a&gt;
  Según un Header
&lt;/h3&gt;

&lt;p&gt;El tenant podría ser determinado según un valor de algún HTTP Header, por ejemplo &lt;code&gt;X-Tenant: cliente1&lt;/code&gt;. Este es más común cuando la aplicación multi-tenant es una API como &lt;code&gt;https://api.contoso.com&lt;/code&gt; y la aplicación cliente especifica el valor del tenant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seg%C3%BAn-el-url"&gt;
  &lt;/a&gt;
  Según el URL
&lt;/h3&gt;

&lt;p&gt;Otro también muy común es por el path del request. Se utiliza un mismo dominio pero según la estructura del path (el url) se puede determinar el tenant que se quiere acceder. Por ejemplo &lt;code&gt;https://contoso.com/cliente1/...&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definiendo-una-estrategia-para-resolver-el-tenant"&gt;
  &lt;/a&gt;
  Definiendo una estrategia para resolver el tenant
&lt;/h2&gt;

&lt;p&gt;Para permitir que la aplicación sepa que estrategia utilizar, deberíamos de poder implementar un servicio de &lt;code&gt;ITenantResolutionStrategy&lt;/code&gt; el cual según el request, no se regresará el tenant (el identifier).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ITenantResolutionStrategy&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetTenantIdentifierAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En este post, implementaremos la resolución de tenants según el Host.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HostResolutionStrategy&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ITenantResolutionStrategy&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;_httpContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;HostResolutionStrategy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IHttpContextAccessor&lt;/span&gt; &lt;span class="n"&gt;httpContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_httpContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetTenantIdentifierAsync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_httpContext&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_httpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#almacenamiento-de-tenants"&gt;
  &lt;/a&gt;
  Almacenamiento de Tenants
&lt;/h1&gt;

&lt;p&gt;Ahora ya sabemos que tenant debemos resolver, pero ahora la pregunta es ¿De dónde obtenemos los tenants? Para eso necesitamos un repositorio o "store" para consultar los tenants que tenemos disponibles. Para hacerlo independiente a la persistencia, implementaremos un &lt;code&gt;ITenantStore&lt;/code&gt; el cual aceptará el &lt;code&gt;Identifier&lt;/code&gt; del tenant para buscarlo en algún origen de datos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ITenantStore&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tenant&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetTenantAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;¿Por qué hicimos el store genérico? Realmente estamos diseñando una solución reutilizable, alguien más en nuestra organización podría usar nuestra librería y debemos de permitir que pueda adaptarla a las necesidades del proyecto.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La clase &lt;code&gt;Tenant&lt;/code&gt; puede almacenar cualquier tipo de información. Si tuviéramos muchas bases de datos probablemente vamos a querer guardar cadenas de conexión del tenant en este mismo objeto, pero podría ser algo inseguro ya que estamos trabajando con información sensible y lo recomendable es utilizar el patrón Options por tenant o algún Vault como el de Azure.&lt;/p&gt;

&lt;p&gt;En este post vamos a guardar los tenants en una base de datos y en otros posts tendremos otra(s) base de datos para la información propia de los tenants.&lt;/p&gt;

&lt;p&gt;Por ahora solo necesitaremos un &lt;code&gt;DbContext&lt;/code&gt; de Entity Framework: &lt;code&gt;TenantAdminDbContext&lt;/code&gt; (el que administra los tenants) y posteriormente crearemos más.&lt;/p&gt;

&lt;p&gt;Para trabajar con Entity Framework necesitamos los siguientes paquetes (al día de este post, siguen estando en preview).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.EntityFrameworkCore"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"6.0.0-preview.7.21378.4"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.EntityFrameworkCore.SqlServer"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"6.0.0-preview.7.21378.4"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.EntityFrameworkCore.Tools"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"6.0.0-preview.7.21378.4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PrivateAssets&amp;gt;&lt;/span&gt;all&lt;span class="nt"&gt;&amp;lt;/PrivateAssets&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;IncludeAssets&amp;gt;&lt;/span&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;span class="nt"&gt;&amp;lt;/IncludeAssets&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/PackageReference&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y nuestro contexto que administrará los tenants quedará de la siguiente forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Entity Tenant (diferente a Infrastructure.Tenant)&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tenant&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;TenantId&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Identifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.EntityFrameworkCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;MultiTenantSingleDatabase.Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TenantAdminDbContext&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;TenantAdminDbContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DbContextOptions&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TenantAdminDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DbSet&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tenant&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Tenants&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aquí estamos definiendo un Entity &lt;strong&gt;Tenant&lt;/strong&gt; que es diferente al &lt;code&gt;Tenant&lt;/code&gt; que encontramos dentro de Infrastructure &amp;gt; Multitenancy (uno es Dto y otro Domain Object).&lt;/p&gt;

&lt;p&gt;La propiedad Name es para tener una descripción del tenant (Ejemplo: &lt;strong&gt;Contoso Crafts&lt;/strong&gt;) y el Identifier (Ejemplo: &lt;strong&gt;contoso&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Ahora que ya tenemos nuestro origen de datos (Una base de datos con una tabla Tenants) podemos escribir nuestro &lt;code&gt;TenantStore&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.EntityFrameworkCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Extensions.Caching.Memory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;MultiTenantSingleDatabase.Persistence&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DbContextTenantStore&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ITenantStore&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tenant&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;TenantAdminDbContext&lt;/span&gt; &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IMemoryCache&lt;/span&gt; &lt;span class="n"&gt;_cache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DbContextTenantStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TenantAdminDbContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IMemoryCache&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;_cache&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tenant&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetTenantAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;cacheKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$"Cache_&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tenant&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tenant&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;cacheKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tenant&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tenants&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FirstOrDefaultAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Identifier&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"identifier no es un tenant válido"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;tenant&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Tenant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TenantId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Identifier&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;tenant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;_cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cacheKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tenant&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tenant&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esta implementación puede variar a como lo necesites, este es solo un ejemplo práctico. Podemos ver que incluso estamos agregando a caché los Tenants que se van consultando, porque esto se hará en cada request y si siempre consultamos a la BD esto será nada eficiente.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#integraci%C3%B3n-con-aspnet-core"&gt;
  &lt;/a&gt;
  Integración con ASP.NET Core
&lt;/h1&gt;

&lt;p&gt;Apenas vamos a mitad de camino. Ya tenemos lo esencial para resolver los tenants pero ahora falta conectar algunos cables para que esto empiece a funcionar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#registrando-los-servicios"&gt;
  &lt;/a&gt;
  Registrando los servicios
&lt;/h2&gt;

&lt;p&gt;Ahora que ya tenemos la forma de diferenciar los tenants y un lugar donde consultarlos, necesitamos registrar estos servicios como dependencias de nuestra aplicación.&lt;/p&gt;

&lt;p&gt;Queremos que esto funcione como una librería que se pueda extender, por eso haremos uso de estilos "fluent" y "builders".&lt;/p&gt;

&lt;p&gt;Primero, crearemos una extension siguiendo el estilo de registrar servicios de &lt;a href="http://asp.net"&gt;asp.net&lt;/a&gt; core con una sintaxis &lt;code&gt;.AddMultiTenancy()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServiceCollectionExtensions&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Agrega los servicios (con clase específica)&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="services"&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;TenantBuilder&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;AddMultiTenancy&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tenant&lt;/span&gt;
        &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Agrega los servicios (con clase default)&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="services"&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;TenantBuilder&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tenant&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;AddMultiTenancy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y ahora el Builder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TenantBuilder&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tenant&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;_services&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;TenantBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_services&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Registrar la implementación de Resolución de Tenants&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;typeparam name="V"&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="lifetime"&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;TenantBuilder&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;WithResolutionStrategy&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;ServiceLifetime&lt;/span&gt; &lt;span class="n"&gt;lifetime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ServiceLifetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Transient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;ITenantResolutionStrategy&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TryAddSingleton&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IHttpContextAccessor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpContextAccessor&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;_services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ServiceDescriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITenantResolutionStrategy&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;lifetime&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Registrar la implementación del Repositorio de Tenants&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;typeparam name="V"&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="lifetime"&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;TenantBuilder&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;WithStore&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;ServiceLifetime&lt;/span&gt; &lt;span class="n"&gt;lifetime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ServiceLifetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Transient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;ITenantStore&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ServiceDescriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITenantStore&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;),&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;lifetime&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora dentro de nuestro &lt;code&gt;Program.cs&lt;/code&gt; registraremos estas dependencias (estamos con .NET 6 por lo que las plantillas default ya no incluyen un &lt;code&gt;Startup&lt;/code&gt; como antes).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddMultiTenancy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithResolutionStrategy&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HostResolutionStrategy&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithStore&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DbContextTenantStore&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hasta este punto ya "casi" podríamos consultar el tenant según el request, pero aparte de que nos falta configurar la base de datos (y crear unos tenants de ejemplo) sería muy latoso siempre estar usando el &lt;code&gt;ITenantResolutionStrategy&lt;/code&gt; junto con el &lt;code&gt;ITenantStore&lt;/code&gt; para estar consultando el tenant actual.&lt;/p&gt;

&lt;p&gt;Por lo que la solución será, un middleware.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#registrando-el-middleware"&gt;
  &lt;/a&gt;
  Registrando el middleware
&lt;/h2&gt;

&lt;p&gt;Los middlewares son muy útiles cuando queremos que algo se procese en el pipeline de la solicitud HTTP. En este caso, queremos que el tenant esté resuelto antes de que cualquier Controlador o Razor Page quiera usarlo, eso significa que este middleware debe de ir antes de Controllers o Razor Pages.&lt;/p&gt;

&lt;p&gt;Primero creamos nuestra clase middleware para que inyecte el Tenant actual en la solicitud Http.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TenantMiddleware&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tenant&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;RequestDelegate&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;TenantMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RequestDelegate&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;Invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ContainsKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AppConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContextTenantKey&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tenantStore&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestServices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITenantStore&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ITenantStore&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;resolutionStrategy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestServices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITenantResolutionStrategy&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ITenantResolutionStrategy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;resolutionStrategy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetTenantIdentifierAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tenant&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;tenantStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetTenantAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AppConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContextTenantKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tenant&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;//Continue processing&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y ahora para registrarlo al estilo &lt;a href="http://asp.NET"&gt;ASP.NET&lt;/a&gt; Core, creamos la siguiente extensión.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationBuilderExtensions&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Use the Teanant Middleware to process the request&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;typeparam name="T"&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="builder"&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IApplicationBuilder&lt;/span&gt; &lt;span class="n"&gt;UseMultiTenancy&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;IApplicationBuilder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tenant&lt;/span&gt;
        &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UseMiddleware&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TenantMiddleware&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Use the Teanant Middleware to process the request&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;typeparam name="T"&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="builder"&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IApplicationBuilder&lt;/span&gt; &lt;span class="nf"&gt;UseMultiTenancy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;IApplicationBuilder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UseMiddleware&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TenantMiddleware&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tenant&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para terminar, registramos este middleware en el pipeline dentro del &lt;code&gt;Program.cs&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseHttpsRedirection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseStaticFiles&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseMultiTenancy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;--- custom middleware&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseRouting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthorization&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapRazorPages&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En este caso estamos usando Razor Pages, pero realmente eso no importa podría ser MVC clásico o una Web API.&lt;/p&gt;

&lt;p&gt;Ahora que el Tenant ya se encuentra accessible dentro del &lt;code&gt;HttpContext&lt;/code&gt; podemos escribir la siguiente extensión (y última) para poder acceder a él de una manera más práctica.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Extensiones de HttpContext para hacer multi-tenancy más fácil de usar&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HttpContextExtensions&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Regresa el Tenant actual&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;typeparam name="T"&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="context"&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;GetTenant&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;HttpContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tenant&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ContainsKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AppConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContextTenantKey&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AppConstants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpContextTenantKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Regresa el Tenant actual&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;param name="context"&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Tenant&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nf"&gt;GetTenant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;HttpContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTenant&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tenant&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creando-la-base-de-datos"&gt;
  &lt;/a&gt;
  Creando la Base de Datos
&lt;/h2&gt;

&lt;p&gt;Para por fin crear la base de datos, debemos registrar el contexto dentro del &lt;code&gt;Program.cs&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TenantAdminDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseSqlServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetConnectionString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"TenantAdmin"&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y podemos utilizar el siguiente connection string (junto con el otro que utilizaremos más adelante).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"ConnectionStrings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"TenantAdmin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Server=(localdb)&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;mssqllocaldb;Database=MultiTenant_Admin;Trusted_Connection=True;MultipleActiveResultSets=true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"SingleTenant"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Server=(localdb)&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;mssqllocaldb;Database=MultiTenantSingleDb;Trusted_Connection=True;MultipleActiveResultSets=true"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Logging"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"LogLevel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Information"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Microsoft"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Warning"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Microsoft.Hosting.Lifetime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Information"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"AllowedHosts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y para crear la base datos, hacemos una migración inicial y actualizamos la base de datos (solito creará la base de datos ya que esta no existirá inicialmente).&lt;/p&gt;

&lt;p&gt;Lo siguiente, lo ejecutamos estando el proyecto principal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet ef migrations add InitTenantAdmin &lt;span class="nt"&gt;-o&lt;/span&gt; Persistence/Migrations/TenantAdmin
dotnet ef database update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esto ya creará la base de datos (dentro de &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\MultiTenant_Admin.mdf&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5fwYl5Le--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqr0hmhsu9wf2unrqa5m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5fwYl5Le--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqr0hmhsu9wf2unrqa5m.png" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Bto1zSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f25e6lfvhynllodrz5cd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Bto1zSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f25e6lfvhynllodrz5cd.png" alt="Untitled 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lo estamos organizando de esta manera porque todavía falta otro &lt;code&gt;DbContext&lt;/code&gt; que haremos en otro post.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#finalizando"&gt;
  &lt;/a&gt;
  Finalizando
&lt;/h1&gt;

&lt;p&gt;Para poder probar que todo lo que hicimos funciona, podemos modificar cualquier controlador o Page que tengamos. En mi caso, como estoy usando Razor Pages, pues modificaré el &lt;code&gt;Index.cshtml&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;@page
@model IndexModel

@using MultiTenantSingleDatabase.Infrastructure.Multitenancy

@{
    ViewData["Title"] = "Home page";
}

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"display-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome @HttpContext.GetTenant()?.Items["Name"] &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;    
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y el resultado.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RrsPUhPy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc3txpmr8t7mrmvacrl8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RrsPUhPy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc3txpmr8t7mrmvacrl8.png" alt="Untitled 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ya que estoy mostrando el nombre del tenant (no el Identifier) se muestra "My localhots Tenant".&lt;/p&gt;

&lt;p&gt;Así tengo mi BD.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VpvwY5Lx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8qqjowi0qt4293b735h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VpvwY5Lx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8qqjowi0qt4293b735h.png" alt="Untitled 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para probar el segundo tenant, hay que hacer un pequeño truco para modificar el archivo hosts y poner un host que apunte a 127.0.0.1 (al igual que lo hace localhost). Puedes intentarlo &lt;a href="https://docs.rackspace.com/support/how-to/modify-your-hosts-file/"&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En fin, navegando al segundo tenant, me muestra el resultado esperado.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qAlBw5Zl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzr87vo4mfhewe6a8jet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qAlBw5Zl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzr87vo4mfhewe6a8jet.png" alt="Untitled 4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lo que falta ahora, será crear un &lt;strong&gt;DbContext&lt;/strong&gt; que realice queries de forma dinámica a los Entitites que corresponden a cada quien según el Tenant, pero esto quedará para el siguiente post.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  Conclusión
&lt;/h1&gt;

&lt;p&gt;En este post vimos como crear los mecanismos de detección de tenants y su implementación para el escenario de multi-tenant que elegimos.&lt;/p&gt;

&lt;p&gt;Gracias a las interfaces se pueden implementar las estrategias de resolución de tenants como se desee y también el repositorio de tenants.&lt;/p&gt;

&lt;p&gt;Gracias a las extensiones y middlewares, de una forma muy sencilla (&lt;code&gt;HttpContext&lt;/code&gt;) podemos acceder al Tenant actual según el request.&lt;/p&gt;

&lt;p&gt;Existen distintas formas de hacer esto, pero me gustó esta solución que originalmente propone &lt;a href="https://michael-mckenna.com/"&gt;Michal McKenna&lt;/a&gt; que en este &lt;a href="https://michael-mckenna.com/multi-tenant-asp-dot-net-core-application-tenant-resolution"&gt;post&lt;/a&gt; explica esta solución en ingles, en la cual me basé principalmente (más del 99% 😅). Thanks Micke!.&lt;/p&gt;

&lt;p&gt;Muchos saludos y sigue aprendiendo 💪🏽.&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>aspnetcore</category>
      <category>visualstudio</category>
    </item>
    <item>
      <title>Advanced TypeScript - typing JSON/Resource files.</title>
      <author>Prithpal Sooriya</author>
      <pubDate>Sat, 11 Sep 2021 22:11:16 +0000</pubDate>
      <link>https://dev.to/prithpalsooriya/advanced-typescript-typing-json-resource-files-4h62</link>
      <guid>https://dev.to/prithpalsooriya/advanced-typescript-typing-json-resource-files-4h62</guid>
      <description>&lt;p&gt;By setting &lt;code&gt;resolveJsonModule&lt;/code&gt; in your &lt;code&gt;tsconfig&lt;/code&gt; to true, TypeScript will attempt to get the type/shape of the JSON for you.&lt;/p&gt;

&lt;p&gt;We can use this to provide better type safety and auto complete for functions that use the JSON files.&lt;/p&gt;

&lt;p&gt;For example typing i18n/resource. Either for custom solutions, library wrappers, or for libraries themselves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-existingstatic-imports"&gt;
  &lt;/a&gt;
  Using existing/static imports.
&lt;/h2&gt;

&lt;p&gt;Static imports are the usual imports you see at the top of the file.&lt;/p&gt;

&lt;p&gt;If we are already statically importing our JSON resource, we can use &lt;code&gt;typeof&lt;/code&gt; &amp;amp; &lt;code&gt;keyof&lt;/code&gt; to get its type and keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Resources&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./resource.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ResourceKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Index to keys path if complex.&lt;/span&gt;
&lt;span class="c1"&gt;// type ResourceKeys = keyof typeof Resources['path']['to']['key']&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ResourceKeys&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-dynacmic-imports"&gt;
  &lt;/a&gt;
  Using Dynacmic Imports
&lt;/h2&gt;

&lt;p&gt;If we are worried about the import cost, then we can use dynamic imports for our actual code &amp;amp; type imports for the TypeScript types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Type only import.&lt;/span&gt;
&lt;span class="c1"&gt;// Stripped when transpiled&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Resources&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./resource.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ResourceKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Dynamic import&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./resource.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ResourceKeys&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your version of TypeScript does not support typed imports, then we can extract out the types to separate file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ResourceTypes.ts&lt;/span&gt;
&lt;span class="cm"&gt;/*
  Import is only used for type (no JS code).
  This file only contains types.
  &amp;gt; Will get transpiled to an empty file
  &amp;gt; Will be tree shaken out of bundle.
*/&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Resources&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./resource.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ResourceKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;Resources&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-declaration-files"&gt;
  &lt;/a&gt;
  Using Declaration Files
&lt;/h2&gt;

&lt;p&gt;Finally we could modify/use declaration files. This is great if you are using a library E.g. &lt;a href="https://react.i18next.com/latest/TypeScript"&gt;i18next docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have successfully used this to provide auto-complete &amp;amp; type safety. We have even spotted missing or misspelled keys!&lt;/p&gt;

&lt;p&gt;One caveat is that we had to restart our TS server if our resources were modified or new keys were added. I think this was due to our large resources, or maybe due to caching done on the TS server?&lt;br&gt;&lt;br&gt;
But a relatively small price to get this type safety.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>json</category>
      <category>internationalisation</category>
      <category>i18n</category>
    </item>
    <item>
      <title>Top Programming Languages</title>
      <author>Ritik Tiwari</author>
      <pubDate>Sat, 11 Sep 2021 21:25:22 +0000</pubDate>
      <link>https://dev.to/theritiktiwari/top-programming-languages-35mf</link>
      <guid>https://dev.to/theritiktiwari/top-programming-languages-35mf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C++
&lt;/h2&gt;

&lt;p&gt;If you are interested in learning C++, remember that it's a very complex language to learn in beginning. If you are aiming at taking on big projects where you wish to have a lot of control of how the things work, C++ is a good choice. If you know C then C++ is bit simple for you but not C isn't mandatory. Once you master C++, learning other programming language is much easier. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;C/C++ is also good for placements.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h2&gt;

&lt;p&gt;If you aren't sure that what you do with coding then java is good choice because of its versatility. Java is a great asset to have when you start applying for your first job as a developer. Java is most the useful/preferred programming language for android mobile development. Java is quite difficult for beginners but this will be simple with time.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Java is also a good choice for placements.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;If you want to become a front-end developer, you have to learn javascript at some point. A full-scalable website can't build without JavaScript. JS is the "hottest" &amp;amp; best language for web development at this moment. No trouble to finding a job once you master in JavaScript. Use JS with HTML - CSS &amp;amp; you got a complete portfolio of skills to get your first front-end developer job!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JS is less preferred for placements.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h2&gt;

&lt;p&gt;If you want to see results quickly and build meaningful from the beginning, python is a great choice. Python lets you create so many different projects from data mining to game development that you can start learning it &amp;amp; see what you like the most as you progress. Python is a slow language &amp;amp; can't be use competitive programming. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Python is also less preferred for placements.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objectivec"&gt;
  &lt;/a&gt;
  Objective-C
&lt;/h2&gt;

&lt;p&gt;If you want to create the apps for the App Store, objective-C is a necessary skill you need to learn. When you start learning Objective-C, be prepared to learn Swift too. The combination of these two languages will give you great skill set for iOS development for a long time! &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Objective-C has not good scope for placements.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#php"&gt;
  &lt;/a&gt;
  PHP
&lt;/h2&gt;

&lt;p&gt;Since PHP is easy to get started with, it's a great choice for a beginner programmer. Additionally PHP is the most useful programming language for Wordpress Development. If you're planning to become a freelance web-developer; PHP is safe choice : Wordpress &amp;amp; other Content Management Systems (CMS) often use PHP. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;PHP also has not good scope for placements.&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a distinct point of view; most firms follow this, but it may be different in your instance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also Check : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/theritiktiwari/dev-resources"&gt;Developer Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://instagram.com/codingwalls"&gt;Coding Walls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cpp</category>
      <category>javascript</category>
      <category>php</category>
      <category>python</category>
    </item>
    <item>
      <title>Utilizando o Session Manager - AWS System Manager
</title>
      <author>Rafael Conceição</author>
      <pubDate>Sat, 11 Sep 2021 21:13:55 +0000</pubDate>
      <link>https://dev.to/rafaelonline/utilizando-o-session-manager-aws-system-manager-44j3</link>
      <guid>https://dev.to/rafaelonline/utilizando-o-session-manager-aws-system-manager-44j3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-o-system-manager"&gt;
  &lt;/a&gt;
  O que é o System Manager?
&lt;/h2&gt;

&lt;p&gt;O &lt;a href="https://aws.amazon.com/pt/systems-manager/"&gt;System Manager&lt;/a&gt;, também conhecido como SSM, é um serviço que permite acompanhar e gerenciar sua infraestrutura. Sendo possível automatizar tarefas, manter a conformidade e segurança de instâncias EC2 e também servidores locais.&lt;/p&gt;

&lt;p&gt;Ele é composto por cinco (05) categorias: &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-ops-center.html"&gt;Operations Management&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-application-management.html"&gt;Application Management&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-actions-and-change.html"&gt;Change Management&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-instances-and-nodes.html"&gt;Node Management&lt;/a&gt;, e &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-shared-resources.html"&gt;Shared Resources&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-o-session-manager"&gt;
  &lt;/a&gt;
  O que é o Session Manager?
&lt;/h2&gt;

&lt;p&gt;O &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager.html#session-manager-benefits"&gt;Session Manager&lt;/a&gt; permite o gerenciamento de instâncias EC2 e/ou máquinas locais, através de um shell baseado em browser e também através do AWS CLI.&lt;/p&gt;

&lt;p&gt;Principais benefícios na utilização:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Controle quem pode utilizar o Session Manager e quais instâncias podem eles podem acessar, de forma centralizada através do IAM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Não é necessário ter portas SSH abertas para realizar um acesso remoto, como isso também não é necessário ficar gerenciando chaves SSH e certificados.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Logging e auditora da sessão, fornecendo o registro de conexões, comandos executados na instância e notificações de início/término de uma sessão.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#configurando-o-system-manager-para-o-session-manager"&gt;
  &lt;/a&gt;
  Configurando o System Manager, para o Session Manager
&lt;/h2&gt;

&lt;p&gt;Por padrão o System Manager não tem permissão para executar ações nas instâncias. Para isso é necessário utilizar um IAM Profile para conceder acesso, então algumas políticas podem ser necessárias:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;AmazonSSMManagedInstanceCore&lt;/em&gt;: Essa política permite a utilização principal do serviço do System Manager. Sendo de uso obrigatório.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;AmazonSSMDirectoryServiceAccess&lt;/em&gt;: Necessário quando você deseja associar a instância a um Directory Service.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;CloudWatchAgentServerPolicy&lt;/em&gt;: Necessário quando você pretende utilizar recursos do Amazon EventBridge ou CloudWatch Logs na instância.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Criei um código Terraform para servir de exemplo de criação de uma politica, role e IAM Profile, confere lá no meu Github o repositório &lt;a href="https://github.com/rafaelonline/aws-ssm-policy/"&gt;aws-ssm-policy&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A política deve ser associada a role utilizada pelas instâncias. Se a instância não tenha nenhuma role, é possível associar a role que criamos com o código Terraform anterior.&lt;/p&gt;

&lt;p&gt;Caso deseje utilizar o KMS para criptografar a conexão ou exportar logs para o S3 , por exemplo, será necessário permissões adicionais, consulte a &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/getting-started-create-iam-instance-profile.html"&gt;documentação&lt;/a&gt; para maiores detalhes:&lt;/p&gt;

&lt;p&gt;É possível também restringir a utilização por usuários/grupos, para isso verifique a &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-getting-started-restrict-access.html"&gt;documentação&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#utilizando-o-session-manager"&gt;
  &lt;/a&gt;
  Utilizando o Session Manager
&lt;/h2&gt;

&lt;p&gt;Via Console EC2&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Selecione a instância e escolha &lt;strong&gt;Conectar&lt;/strong&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Para &lt;strong&gt;Método de conexão&lt;/strong&gt;, escolha &lt;strong&gt;Gerenciador de sessão&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Escolha &lt;strong&gt;conectar&lt;/strong&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Via AWS CLI&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Para iniciar uma sessão usando o AWS CLI, execute o seguinte comando.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ssm start-session &lt;span class="nt"&gt;--target&lt;/span&gt; instance-id
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O AWS CLI deve estar instalado e configurado no computador de origem.&lt;/p&gt;

&lt;p&gt;Outros métodos podem ser consultados na &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-sessions-start.html"&gt;documentação&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sobre-o-ssm-agent"&gt;
  &lt;/a&gt;
  Sobre o SSM agent
&lt;/h2&gt;

&lt;p&gt;O SSM agent deve estar instalado em cada instância para que seja possível o gerenciamento por parte do System Manager.&lt;/p&gt;

&lt;p&gt;Por padrão o agente vem pré-instalado nas seguintes AMIs fornecidas pela AWS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Linux 1 e 2&lt;/li&gt;
&lt;li&gt;Amazon Linux 2 ECS-Optimized&lt;/li&gt;
&lt;li&gt;Ubuntu Server 16.04, 18.04 e 20.04&lt;/li&gt;
&lt;li&gt;Windows Server 2008-2019&lt;/li&gt;
&lt;li&gt;macOS 10.14.x e 10.15.x&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mais detalhes sobre o serviço, consulta de logs do agente e atualizações, acesse a página da &lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent.html"&gt;documentação&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>ssm</category>
      <category>security</category>
      <category>ec2</category>
    </item>
    <item>
      <title>10 Android Apps to Evolve Your Programming Skills</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sat, 11 Sep 2021 21:11:00 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/10-android-apps-to-evolve-your-programming-skills-17ce</link>
      <guid>https://dev.to/ayabouchiha/10-android-apps-to-evolve-your-programming-skills-17ce</guid>
      <description>&lt;h2&gt;
  &lt;a href="#10-android-apps-to-evolve-your-programming-skills"&gt;
  &lt;/a&gt;
  10 android apps to evolve your programming skills.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.datacamp&amp;amp;hl=en&amp;amp;gl=US"&gt;DataCamp: Learn Python, SQL &amp;amp; R coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.getmimo&amp;amp;hl=en&amp;amp;gl=US"&gt;Mimo: Learn coding in HTML, JavaScript, Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.learnprogramming.codecamp&amp;amp;hl=en&amp;amp;gl=US"&gt;Programming Hero: Coding Just Got Fun (beta)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.area120.grasshopper&amp;amp;hl=en&amp;amp;gl=US"&gt;Grasshopper: Learn to Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.freeit.java&amp;amp;hl=en&amp;amp;gl=US"&gt;Programming Hub: Learn to code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.sololearn&amp;amp;hl=en&amp;amp;gl=US"&gt;Sololearn: Learn to Code for Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.codinghomies.programming.books.learn.to.code&amp;amp;hl=en&amp;amp;gl=US"&gt;900+ Programming Books - Free Coding Books at Once&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=free.programming.programming&amp;amp;hl=en&amp;amp;gl=US"&gt;Learn DS &amp;amp; Algo, Programming Interview Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=net.androidsquad.androidmaster&amp;amp;hl=en&amp;amp;gl=US"&gt;Master Coding - Learn Coding from Zero to Hero&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a good day!&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>What features can a Blog Website Should Have?</title>
      <author>Himanshu</author>
      <pubDate>Sat, 11 Sep 2021 19:52:46 +0000</pubDate>
      <link>https://dev.to/hima_khaitan/what-features-can-a-blog-website-should-have-3m2a</link>
      <guid>https://dev.to/hima_khaitan/what-features-can-a-blog-website-should-have-3m2a</guid>
      <description>&lt;h3&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  Idea
&lt;/h3&gt;

&lt;p&gt;One must wonder what features to include in a Blog Website. So did I. After a long run of thoughts I made this aesthetic looking website and named it &lt;strong&gt;The Chaotic&lt;/strong&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/himakhaitan"&gt;
        himakhaitan
      &lt;/a&gt; / &lt;a href="https://github.com/himakhaitan/TheChaotic"&gt;
        TheChaotic
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Chaotic is a Personal Blog Website 💻 made using MERN Stack. The theme of the website is set to aesthetic as well as inspiring🌱. To be more precise, the website is set to target Youth Audience as a whole. 🧲
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;

  &lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/Logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Idf6O9aK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/Logo.png" width="200"&gt;&lt;/a&gt;
  &lt;br&gt;  
  The Chaotic - Blog Website
  &lt;br&gt;
&lt;/h1&gt;
&lt;p&gt;
&lt;a href="https://www.mongodb.com/" rel="nofollow"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IkxXKTiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/mongodb.png" width="100"&gt;
&lt;/a&gt; 
&lt;a href="https://expressjs.com/" rel="nofollow"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6n_wHbQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/expressjs.png" width="100"&gt;
&lt;/a&gt;
 
&lt;a href="https://reactjs.org/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vIyOZy5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/reactjs.png" width="60"&gt;&lt;/a&gt;
   
&lt;a href="https://nodejs.org/en/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--psITFUtv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/nodejs.png" width="60"&gt;&lt;/a&gt;
  
&lt;/p&gt;

&lt;h4&gt;
A Personal Blog Website Setup using &lt;a href="https://www.mongodb.com/mern-stack" rel="nofollow"&gt;MERN Stack&lt;/a&gt;.&lt;/h4&gt;
&lt;p&gt;
  
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/80a1153c429992993a5fc1d8009c2f9ed74f95263366dc21a2daec8fb25077c9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646570656e64656e636965732d7570253230746f253230646174652d627269676874677265656e2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/80a1153c429992993a5fc1d8009c2f9ed74f95263366dc21a2daec8fb25077c9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646570656e64656e636965732d7570253230746f253230646174652d627269676874677265656e2e737667"&gt;&lt;/a&gt;
  
  &lt;a href="https://github.com/himakhaitan/TheChaotic/issues"&gt;&lt;img src="https://camo.githubusercontent.com/d9ac4d4824e2b7488101f456174c06f12daa873dc05ff0d5b3c6b18da341c3dc/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f68696d616b68616974616e2f5468654368616f7469632e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/45b4ffbd594af47fe09a3432f9f8e122c6518aa6352b4ce453a1a2563da2905c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d677265656e2e737667"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://github.com/himakhaitan/TheChaotic#description"&gt;Description&lt;/a&gt; •
  &lt;a href="https://github.com/himakhaitan/TheChaotic#screenshot"&gt;Screenshot&lt;/a&gt; •
  &lt;a href="https://github.com/himakhaitan/TheChaotic#installation-and-setup"&gt;Installation and Setup&lt;/a&gt; • &lt;a href="https://github.com/himakhaitan/TheChaotic#dependcies"&gt;Dependencies&lt;/a&gt; •
  &lt;a href="https://github.com/himakhaitan/TheChaotic#license"&gt;License&lt;/a&gt; • &lt;a href="https://github.com/himakhaitan/TheChaotic#contribution"&gt;Contribution&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Description&lt;/h2&gt;
&lt;h2&gt;
Screenshot&lt;/h2&gt;
&lt;p&gt;Below are some of the screenshots of UI from The Chaotic&lt;/p&gt;
&lt;h3&gt;
Home Page&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/screenshot1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tadTdgXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/screenshot1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Contact Page&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/screenshot2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQgI3s61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/screenshot2.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Category Pages&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/screenshot4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e7ZqoAi6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/screenshot4.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/screenshot5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DIwqGuV3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/screenshot5.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
About Pages&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/TheChaotic/blob/main/images/screenshot3.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2k8KNFkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/TheChaotic/raw/main/images/screenshot3.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation and Setup&lt;/h2&gt;
&lt;h2&gt;
Dependencies&lt;/h2&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;This project uses an &lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
&lt;h2&gt;
Contribution&lt;/h2&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/himakhaitan/TheChaotic"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;The Chaotic is a Personal Blog Website 💻 made using MERN Stack. The theme of the website is set to aesthetic as well as inspiring🌱. To be more precise, the website is set to target Youth Audience as a whole. 🧲&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#details"&gt;
  &lt;/a&gt;
  Details
&lt;/h3&gt;

&lt;p&gt;The frontend of the website is made using ReactJs and backend is made up of NodeJs using ExpressJs. MongoDB is the powering database of the project.&lt;/p&gt;

&lt;p&gt;Backend Default URL - &lt;code&gt;http://localhost:8000&lt;/code&gt;&lt;br&gt;
Frontend Default URL - &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cloning-and-setting-up-the-project"&gt;
  &lt;/a&gt;
  Cloning and Setting up the Project
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Clone the repository using &lt;code&gt;git clone https://github.com/himakhaitan/TheChaotic.git&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;cd into Backend using &lt;code&gt;cd ./Backend&lt;/code&gt; and run &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Now change directory to Frontend &lt;code&gt;cd ../Frontend&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you have installed all the dependencies for the project. Now we have to configure our &lt;code&gt;.env&lt;/code&gt; file as per &lt;code&gt;sample.env&lt;/code&gt; for the Backend.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#running-the-project"&gt;
  &lt;/a&gt;
  Running the Project
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;cd into &lt;code&gt;Backend&lt;/code&gt; using &lt;code&gt;cd ./Backend&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;npm run server&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;cd into &lt;code&gt;Frontend&lt;/code&gt; using &lt;code&gt;cd ../Frontend&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;npm run start&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Blogs Archive&lt;/li&gt;
&lt;li&gt;Tags Creation&lt;/li&gt;
&lt;li&gt;Blogs Search&lt;/li&gt;
&lt;li&gt;Contact Form Spam Protection&lt;/li&gt;
&lt;li&gt;Commenting&lt;/li&gt;
&lt;li&gt;Admin Panel&lt;/li&gt;
&lt;li&gt;Admin Authentication&lt;/li&gt;
&lt;li&gt;Categories wise sorting&lt;/li&gt;
&lt;li&gt;Image Uploads&lt;/li&gt;
&lt;li&gt;Social Sharing&lt;/li&gt;
&lt;li&gt;Authorship&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#status"&gt;
  &lt;/a&gt;
  Status
&lt;/h3&gt;

&lt;p&gt;Project is completely open source and it will be highly thankful if someone wants to contribute or point out any issues with the code. You can anytime open a new issue or create a pull request.&lt;/p&gt;

&lt;p&gt;To know more you can reach me through the Discord Server &lt;a href="https://discord.gg/SbD66RXr4W"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#my-github-profile"&gt;
  &lt;/a&gt;
  My Github Profile
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/himakhaitan"&gt;
        himakhaitan
      &lt;/a&gt; / &lt;a href="https://github.com/himakhaitan/himakhaitan"&gt;
        himakhaitan
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/1.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhPldnYX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
I'm a CSE geek 💻 from India who loves to code.&lt;/h4&gt;
&lt;p&gt;
  &lt;a href="https://github.com/himakhaitan/himakhaitanmailto:himanshukhaitan10@gmail.com"&gt;&lt;img height="40" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xYGaXB7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/mail.png"&gt;&lt;/a&gt;
  &lt;a href="https://www.linkedin.com/in/himanshu-khaitan-431666204/" rel="nofollow"&gt;&lt;img height="40" src="https://res.cloudinary.com/practicaldev/image/fetch/s--wxIqX2ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/linkedin.png"&gt;&lt;/a&gt;  &lt;a href="https://www.instagram.com/hima_khaitan/" rel="nofollow"&gt;&lt;img height="40" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hI5Nl9bb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/insta.png"&gt;&lt;/a&gt;  
  &lt;a href="https://dev.to/hima_khaitan" rel="nofollow"&gt;&lt;img height="40" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jCiVUhCA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/dev.png"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;An avid and passionate coder specializing in different languages. I love to build and design websites which the end user would enjoy using while keeping the website performant and the code clean. Up for freelance web development work and collaborating on exciting &lt;b&gt;Open Source &amp;amp; Personal&lt;/b&gt; projects.&lt;/p&gt;

&lt;h2&gt;
⚡ Stuff I Know&lt;/h2&gt;
&lt;br&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/html5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WPZScEHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/html5.png" height="40"&gt;&lt;/a&gt;      
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/css.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4hgqiZ2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/css.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/sass.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lhTwFUaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/sass.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/bootstrap.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JD5P6TZL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/bootstrap.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/js.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUzycnHh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/js.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/node.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dl1FdMRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/node.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/expressjs.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1s5LNAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/expressjs.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/postman.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TF-nvKo3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/postman.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/react.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9ZJOFsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/react.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/mongo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dR-32qEA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/mongo.png" height="40"&gt;&lt;/a&gt;    
&lt;br&gt;&lt;br&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/c.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yepts2il--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/c.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/cpp.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L31vmUlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/cpp.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/git.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b1430J1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/git.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/github.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ZEcRHGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/github.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/linux.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LaHtEgGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/linux.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/heroku.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AjAmxEsT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/heroku.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/figma.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TgXPEoiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/figma.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/canva.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WX5JulQx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/canva.png" height="40"&gt;&lt;/a&gt;   
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/redux.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--79n8UtTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/redux.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/next-js.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3iqizuMs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/next-js.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/typescript.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aTXDoHB---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/typescript.png" height="40"&gt;&lt;/a&gt;    
&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/himakhaitan/blob/main/icons/wordpress.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OH4C0ulq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/himakhaitan/raw/main/icons/wordpress.png" height="40"&gt;&lt;/a&gt;    
&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/ce7b9188f079294587c7bcb5e720bd2a54a4a393913c48c78c6a1c939fcd93a0/68747470733a2f2f6769746875622d726561646d652d73747265616b2d73746174732e6865726f6b756170702e636f6d3f757365723d68696d616b68616974616e267468656d653d746f6b796f6e6967687426686964655f626f726465723d7472756526666972653d444432373237"&gt;&lt;img src="https://camo.githubusercontent.com/ce7b9188f079294587c7bcb5e720bd2a54a4a393913c48c78c6a1c939fcd93a0/68747470733a2f2f6769746875622d726561646d652d73747265616b2d73746174732e6865726f6b756170702e636f6d3f757365723d68696d616b68616974616e267468656d653d746f6b796f6e6967687426686964655f626f726465723d7472756526666972653d444432373237"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/73483d5bfe87818a76d1763bda2c4e0302643e7c1e8d36b1b6747062f5762a03/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d68696d616b68616974616e2673686f775f69636f6e733d7472756526686964655f626f726465723d74727565267468656d653d746f6b796f6e6967687426686964655f626f726465723d7472756526666972653d444432373237"&gt;&lt;img src="https://camo.githubusercontent.com/73483d5bfe87818a76d1763bda2c4e0302643e7c1e8d36b1b6747062f5762a03/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d68696d616b68616974616e2673686f775f69636f6e733d7472756526686964655f626f726465723d74727565267468656d653d746f6b796f6e6967687426686964655f626f726465723d7472756526666972653d444432373237"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h4&gt;
Happily turning coffee into code!✅
&lt;/h4&gt;

&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/himakhaitan/himakhaitan"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#projects-i-am-working-on"&gt;
  &lt;/a&gt;
  Projects I am working on
&lt;/h3&gt;

&lt;p&gt;I am currently working on a MERN stack hospital management system fully equipped to manage modern day Hospitals.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Happily Turning Coffee into Code. 💻🌱&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>showdev</category>
      <category>react</category>
      <category>webdev</category>
      <category>githunt</category>
    </item>
    <item>
      <title>PHP-backend Roadmap</title>
      <author>Elijah Zobenko</author>
      <pubDate>Sat, 11 Sep 2021 19:35:24 +0000</pubDate>
      <link>https://dev.to/he110/php-backend-roadmap-2j1a</link>
      <guid>https://dev.to/he110/php-backend-roadmap-2j1a</guid>
      <description>&lt;p&gt;There are tons of tools in IT to ease programmers' workflow and make a product more efficient. But in the very beginning of honing PHP that might be such a puzzle to pick the right direction and instruments to learn first. A common solution for such problems now – roadmaps – visual sequences which answer the question "what to learn next?". Subject I'd like to discuss in the article – where to invest your time and efforts to learn PHP faster and become a demanding backend programmer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#php-amp-git-basics"&gt;
  &lt;/a&gt;
  PHP &amp;amp; Git basics
&lt;/h3&gt;

&lt;p&gt;To learn the programming language – just a beginning. And even here it's important to make the right steps. Don't aim to learn and memorize everything about PHP and simply focus on tools you'll be using 90% of the time. And of course, always apply gathered skills in practice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VSaRWNuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3l8dhyku0au5vhx06pq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VSaRWNuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3l8dhyku0au5vhx06pq.jpg" alt="img1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next deserving attention thing after learning PHP – &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;. You'll probably be using it on a daily basis regardless of your chosen programming language. In a nutshell, Git is a team cooperation tool, which allows you to save states of a code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#composer-and-databases"&gt;
  &lt;/a&gt;
  Composer and databases
&lt;/h3&gt;

&lt;p&gt;Usage of external libraries is a great solution in most cases. Especially if they earned the community's trust. To use it efficiently you should learn the &lt;a href="https://getcomposer.org/"&gt;Composer&lt;/a&gt; – a packet manager to extremely ease the process of connecting and updating all your PHP dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---huypkFZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnphf7d3qhdpd1evlzq2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---huypkFZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnphf7d3qhdpd1evlzq2.jpg" alt="PHP Backend Roadmap (7)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And finally, we got to the databases. There are so many solutions in the market so it's even hard to list and not to forget any. However, there are few leaders of the field, which I personally recommend to pick for your stack. For relational databases it's &lt;a href="https://www.postgresql.org/download/"&gt;PostgreSQL&lt;/a&gt;, and for NoSQL – &lt;a href="https://www.mongodb.com/try/download/community"&gt;MongoDB&lt;/a&gt;. &lt;a href="https://www.php.net/manual/ru/book.pdo.php"&gt;PDO&lt;/a&gt; will be useful for understanding how all the interaction between PHP and your data happens, and ORMs – will boost the effectiveness and security of that communication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#working-flow-optimization"&gt;
  &lt;/a&gt;
  Working flow optimization
&lt;/h3&gt;

&lt;p&gt;For any programmer, speed is one of the most important factors. And debugging speed affects it directly. There are two main solutions to get rid of seeded &lt;code&gt;echo&lt;/code&gt; and &lt;code&gt;var_dump&lt;/code&gt; from a code, but my advice is to use the first and more common – xDebug. It's not ever hard to connect and configure it but it will always be bringing benefits.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S9NsiN4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzlphb9ewd4nrbvj3tr1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S9NsiN4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzlphb9ewd4nrbvj3tr1.jpg" alt="PHP Backend Roadmap (8)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;But the quality of the code and its style may seem subjective things, but teamwork requires it really often. In the &lt;a href="https://www.php-fig.org/psr/psr-12/"&gt;PSR-12&lt;/a&gt; standard, you can find the list of recommendations on how to style it. That standard isn't the only existing one, but it's definitely the most common. To simplify following it you can use &lt;a href="https://github.com/squizlabs/PHP_CodeSniffer"&gt;CodeSniffer&lt;/a&gt;. And in order to develop the habit of writing clean code, you can use &lt;a href="https://psalm.dev/"&gt;Psalm&lt;/a&gt;, &lt;a href="https://psalm.dev/"&gt;Phan&lt;/a&gt;, or &lt;a href="https://phpstan.org/"&gt;PHPStan&lt;/a&gt; linters. There's no need to learn each – better to choose the one you like most. In my case it's Psalm.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-html"&gt;
  &lt;/a&gt;
  What about HTML?
&lt;/h3&gt;

&lt;p&gt;Talking about PHP there is less and less mentioning of Full-stack. Fields of work have long been divided and PHP has taken an honorable place at the backend. Therefore learning HTML isn't a requirement for us but rather an optimization. What is really important is to clearly understand how to implement interaction with the front-end. Essential things in this area for us are REST and JSON API. Web-browser might be replaced with &lt;a href="https://www.postman.com/downloads/"&gt;Postman&lt;/a&gt; – an ultimate tool to debug API. Earning a habit of documenting interfaces using &lt;a href="https://swagger.io/specification/"&gt;OpenAPI&lt;/a&gt; or &lt;a href="https://apiblueprint.org/"&gt;Blueprint&lt;/a&gt; will save you from constant questions from colleagues and give you +10 to karma.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eXEZhjT7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpp9vsbwdluv1yimkepr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eXEZhjT7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpp9vsbwdluv1yimkepr.jpg" alt="PHP Backend Roadmap (9)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boosting-up-the-project"&gt;
  &lt;/a&gt;
  Boosting up the project
&lt;/h3&gt;

&lt;p&gt;The high response rate of the project is due not only to the servers but also to high-quality code. Sometimes to increase it, it's enough to reduce the number of requests to the database or to remember the result of heavy calculations. Caching mechanisms can help us in this. You will find interfaces for organizing them in the &lt;a href="https://www.php-fig.org/psr/psr-6/"&gt;PSR-6&lt;/a&gt; and &lt;a href="https://www.php-fig.org/psr/psr-6/"&gt;PSR-16&lt;/a&gt; standards. And choose the final caching mechanism depending on the project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H0RAnlpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1ewsxnflinlqhzlv38y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H0RAnlpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1ewsxnflinlqhzlv38y.jpg" alt="PHP Backend Roadmap (10)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Another common method of speeding up a project is to perform processing in the background. There are two categories of solutions here: task schedulers (&lt;a href="https://timeweb.com/ru/community/articles/chto-takoe-cron"&gt;Crontab&lt;/a&gt;) will be useful for performing mailings, recalculating tariffs, and other regular tasks. And message brokers will allow you to take heavy operations into the background and monitor their execution without slowing down the response to the user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-and-frameworks"&gt;
  &lt;/a&gt;
  Testing and frameworks
&lt;/h3&gt;

&lt;p&gt;Not all teams write tests for the code. This decision can be made on the basis of many factors. But understanding how to write the testable code is extremely important. Practicing with &lt;a href="https://phpunit.readthedocs.io/en/9.5/"&gt;PHPUnit&lt;/a&gt; will help you gain knowledge in this area. And if you want to try other approaches, pay attention to &lt;a href="https://codeception.com/quickstart"&gt;Codeception&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kzSydacn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf4rmz95zklahpao0ir5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kzSydacn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf4rmz95zklahpao0ir5.jpg" alt="PHP Backend Roadmap (11)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a lot of tools have been studied, it's time to combine them into a coherent system. In order not to reinvent the wheel, pay attention to one of the popular frameworks. In them, you will find the best modern practices, as well as get used to high-quality architecture. I suggest making a choice from the two most popular options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://symfony.com/download"&gt;Symfony&lt;/a&gt; – strict and exacting, used mostly in highly loaded applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://laravel.com/"&gt;Laravel&lt;/a&gt; – the most common and popular today.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#profiling-and-monitoring"&gt;
  &lt;/a&gt;
  Profiling and monitoring
&lt;/h3&gt;

&lt;p&gt;When your project is launched, it is important to monitor its "health". Are the servers coping? Is there a DDoS attack? Is there a fatal exception on the prod? Monitoring is a simple and useful tool that will give you answers to all these questions. You should start with logging. The &lt;a href="https://www.php-fig.org/psr/psr-3/"&gt;PSR-3&lt;/a&gt; standard describes the interface, and &lt;a href="https://github.com/Seldaek/monolog"&gt;Monolog&lt;/a&gt; will save you from having to write your own logging service. &lt;a href="https://sentry.io/"&gt;Sentry&lt;/a&gt; will help you to be up to date with errors, &lt;a href="https://grafana.com/"&gt;Grafana&lt;/a&gt; will build beautiful graphs, and &lt;a href="https://www.graylog.org/products/open-source#download-open"&gt;Graylog&lt;/a&gt; or &lt;a href="https://www.elastic.co/what-is/elk-stack"&gt;ELK&lt;/a&gt; will simplify log search and incident investigation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bnTyj5Rh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20ejicym8fim0yjdgw7w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bnTyj5Rh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20ejicym8fim0yjdgw7w.jpg" alt="PHP Backend Roadmap (12)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;However, there are cases that cannot be solved by simple monitoring. For example, if the application is abnormally slow in certain areas. Such incidents are most effectively solved with the help of profiling tools. You will not use them so often, but it is important to remember about their existence.&lt;/p&gt;

&lt;p&gt;Of course, the PHP world is not limited to the listed tools and, after mastering them, there is still a lot to learn. But remember: at the beginning of your journey, you should focus on the main and most common things that you will meet in 80-90% of teams. All the listed programs and approaches were chosen according to this criterion. Save the &lt;a href="https://psv4.userapi.com/c532036/u5174301/docs/d1/2648ec370a16/PHP_Backend_roadmap.jpg?extra=171JcjPMvETOcLL0cL2DdX90DM49GIrkQLpo8hv71euYSM51JaNnjotlf3envmbbz5-LyKJg4TKKKd1UPs5OFFdeBErx7YJ0WyltSmDL8K7v8O230OAKDveyb64jofjTuGbWBzHkBZQCxat60CBK"&gt;roadmap&lt;/a&gt;, and check it in your educational adventure. And finally: success in studying and building a career.&lt;/p&gt;

</description>
      <category>php</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
