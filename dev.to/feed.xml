<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Display your PWA / website fullscreen</title>
      <author>Manuel Sommerhalder</author>
      <pubDate>Thu, 07 Jan 2021 09:43:11 +0000</pubDate>
      <link>https://dev.to/oncode/display-your-pwa-website-fullscreen-4776</link>
      <guid>https://dev.to/oncode/display-your-pwa-website-fullscreen-4776</guid>
      <description>&lt;p&gt;In this short article I will show you how to expand your installed PWA to the full edge of the screen of a mobile device and how to take care of design issues that might occur.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#standalone-mode" class="anchor"&gt;
  &lt;/a&gt;
  Standalone mode
&lt;/h1&gt;

&lt;p&gt;As soon as the user has added your PWA to the home screen and opened it, it runs in a standalone mode, where the e.g. the navigation bar of the browser will disappear and we can produce more app-like designs.&lt;/p&gt;

&lt;p&gt;We can detect if the PWA is running in standalone mode inside our application like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// on iOS Safari&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;standalone&lt;/span&gt;

&lt;span class="c1"&gt;// on Android Chrome&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(display-mode: standalone)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Because of the platform difference, a more popular approach is to define a &lt;code&gt;start_url&lt;/code&gt; inside your &lt;code&gt;manifest.json&lt;/code&gt; file, where we can add a parameter that will be added, when the app is started in standalone mode. Then we can check for the parameter inside our application to make changes to our UI.&lt;/p&gt;

&lt;p&gt;To display it fullscreen and remove native control elements, we also have to add the &lt;code&gt;display&lt;/code&gt; property with the value &lt;code&gt;standalone&lt;/code&gt; (&lt;code&gt;fullscreen&lt;/code&gt; won't work). Here's our current manifest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;manifest.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Example App"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"display"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"standalone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/?standalone=true"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#meta-tags" class="anchor"&gt;
  &lt;/a&gt;
  Meta Tags
&lt;/h1&gt;

&lt;p&gt;To display your app fullscreen, we will also have to add a few meta tags.&lt;/p&gt;

&lt;p&gt;You might already have a &lt;code&gt;viewport&lt;/code&gt; meta tag, but make sure &lt;code&gt;viewport-fit=cover&lt;/code&gt; is inside it (separated by &lt;code&gt;;&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt;
    &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width; initial-scale=1; viewport-fit=cover"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we have to add the &lt;code&gt;mobile-web-app-capable&lt;/code&gt; and &lt;code&gt;status-bar-style&lt;/code&gt; meta tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"mobile-web-app-capable"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apple-mobile-web-app-capable"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- possible content values: default, black or black-translucent --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apple-mobile-web-app-status-bar-style"&lt;/span&gt;
    &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"black-translucent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that we can decide, whether the status bar should have a white (default), black or transparent (with white color) background. Take into account that this meta tag is only used when the app starts, so it's app-wide and we can't modify the meta tag later to change the color dynamically.&lt;/p&gt;

&lt;p&gt;Because we also want to be able to display content underneath the status bar, we'll use the transparent background (&lt;code&gt;black-translucent&lt;/code&gt;). This will also shift our app up to the top of the screen.&lt;/p&gt;

&lt;p&gt;Now we can produce fancy headers that look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wwjLLmQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/16ndalhtlp5zp00ikk7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wwjLLmQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/16ndalhtlp5zp00ikk7f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#safe-area" class="anchor"&gt;
  &lt;/a&gt;
  Safe Area
&lt;/h1&gt;

&lt;p&gt;Since we can display content underneath the status bar now, we'll have to make sure that the white text will always be readable (e.g. with a decorative shadow or ensuring dark background colors) and that there will be no interactive elements underneath. Also we might have to take the notch into account, which some newer iOS versions have:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--puVRhApS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ofha1w80q6vpy3uqi4x7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--puVRhApS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ofha1w80q6vpy3uqi4x7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To solve those problems we can utilize the &lt;code&gt;safe-area&lt;/code&gt; CSS env variables (supported since iOS &amp;gt;= 11.1 and Chrome &amp;gt;= 69):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;you&lt;/span&gt; &lt;span class="err"&gt;can&lt;/span&gt; &lt;span class="err"&gt;also&lt;/span&gt; &lt;span class="err"&gt;use&lt;/span&gt; &lt;span class="err"&gt;fallback&lt;/span&gt; &lt;span class="err"&gt;values&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As an example, I implemented a sticky navigation bar vue component for my app, which has an element with the top safe-area applied as height. It will be transparent as long as the &lt;code&gt;transparent&lt;/code&gt; property is &lt;code&gt;true&lt;/code&gt; and the user has not scrolled down. Here's the crucial of the component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- NavigationBar.vue --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sticky top-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-safe-area-inset-top"&lt;/span&gt;
        &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"{
            'bg-black': !transparent
                        || (transparent &amp;amp;&amp;amp; scrollTop &amp;gt; 0)
        }"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.h-safe-area-inset-top&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.bg-black&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;scrollListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollListener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have a question, don't hesitate to leave a comment. Happy coding and designing! 👨🏼‍💻&lt;/p&gt;

</description>
      <category>pwa</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>How To Use TypeScript In A Node.js and Express Project</title>
      <author>Catalin Pit</author>
      <pubDate>Thu, 07 Jan 2021 09:28:27 +0000</pubDate>
      <link>https://dev.to/catalinmpit/how-to-use-typescript-in-a-node-js-and-express-project-kdc</link>
      <guid>https://dev.to/catalinmpit/how-to-use-typescript-in-a-node-js-and-express-project-kdc</guid>
      <description>&lt;p&gt;&lt;a href="https://catalins.tech/youtube"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5DVdz3IX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ivskd3ka7wry6ednarok.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;In this tutorial, you will learn how to use Typescript in a Node.js and Express project. The purpose of the tutorial is to show how to create a project with the mentioned technologies. Its purpose is not to debate whether you should add TypeScript or not.&lt;/p&gt;

&lt;p&gt;Before going further, the prerequisites are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic knowledge in Typescript, Node.js and Express&lt;/li&gt;
&lt;li&gt;Having a Node version from v12 upwards, including Node 12.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#1-set-up-the-project" class="anchor"&gt;
  &lt;/a&gt;
  1. Set up the project
&lt;/h1&gt;

&lt;p&gt;The first step is to create a directory for the project and initialise it. Run the following commands to create an empty directory called &lt;code&gt;typescript-nodejs&lt;/code&gt;, and change the current directory to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir typescript-nodejs
cd typescript-nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now that you are in the &lt;code&gt;typescript-nodejs&lt;/code&gt; directory, you have to initialise the Node project. To do so, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using the &lt;code&gt;-y&lt;/code&gt; flag in the above command generates the &lt;code&gt;package.json&lt;/code&gt; file with the default values. Instead of adding information like the name and description of the project ourselves, npm initialises the file with default values.&lt;/p&gt;

&lt;p&gt;The project is initialised, and thus you can move to the next section - adding the project dependencies.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-add-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  2. Add dependencies
&lt;/h1&gt;

&lt;p&gt;The next step is to add the project dependencies. Those are the Express framework and Typescript. Add these dependencies by running the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express
npm install typescript ts-node @types/node @types/express --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Why save everything Typescript-related as &lt;code&gt;devDependencies&lt;/code&gt;? Even though you write the code using Typescript, the code gets compiled back to vanilla JavaScript. Typescript is not needed per se to run the application. Thus, since Typescript is used only by developers, it's saved as a dev dependency.&lt;/p&gt;

&lt;p&gt;Moving forward, your &lt;code&gt;package.json&lt;/code&gt; should look as follows after installing all the dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;typescript-nodejs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^4.17.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;devDependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@types/express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^4.17.9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@types/node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^14.14.20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts-node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^9.1.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;typescript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^4.1.3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keywords&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;license&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ISC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-configure-typescript" class="anchor"&gt;
  &lt;/a&gt;
  3. Configure TypeScript
&lt;/h1&gt;

&lt;p&gt;So far, you only installed Typescript, but you cannot use it yet. The reason is that you need to configure it. You need to create a file called &lt;code&gt;tsconfig.json&lt;/code&gt;, which indicates that the directory is the root of a TypeScript or JavaScript project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx tsc --init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Running the above command creates the &lt;code&gt;tsconfig.json&lt;/code&gt; file where we can customise the Typescript configuration. The newly created file contains lots of code, most of which is commented out. However, there are some settings you need to know about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;target&lt;/strong&gt; -&amp;gt; using this option, you can specify wich ECMAScript version to use in your project. For instance, if you set the &lt;code&gt;target&lt;/code&gt; to ES5 and then you use arrow functions, the code is compiled to an equivalent ES5 function. The available versions are 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;module&lt;/strong&gt; -&amp;gt; with this option, you can specify which module manager to use in the generated JavaScript code. You can choose between the following values 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. The most common module manager and the default one is &lt;code&gt;commonjs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;outDir&lt;/strong&gt; -&amp;gt; with this option, we can specify where to output the vanilla JavaScript code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;rootDir&lt;/strong&gt; -&amp;gt; the option specifies where are the TypeScript files located.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;strict&lt;/strong&gt; -&amp;gt; the option is enabled by default, and it enabes strict type-checking options.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;esModuleInterop&lt;/strong&gt; -&amp;gt; this option is true by default, and it enables interoperability between CommonJS and ES modules. How does it do it? It does it by creating namespace objects for all imports.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For in-depth information about all the options available, I recommend checking the &lt;a href="https://www.staging-typescript.org/tsconfig"&gt;TypeScript TSConfig Reference&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-create-express-server" class="anchor"&gt;
  &lt;/a&gt;
  4. Create Express server
&lt;/h1&gt;

&lt;p&gt;With TypeScript configured, it's time to create the Express web server. First of all, create the file &lt;code&gt;index.ts&lt;/code&gt; (attention to the file extension) by running &lt;code&gt;touch index.ts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After creating the file, write the following code inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Well done!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The application is listening on port 3000!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now you have a simple web server that shows "Well done!" when you access &lt;code&gt;localhost:3000&lt;/code&gt;. The server is super simple, and without taking advantage of TypeScript. However, the purpose of this tutorial is to make the technologies work together and create a boilerplate. From here, you can build any application you want.&lt;/p&gt;

&lt;p&gt;Whenever you make changes and want to run the application, you need to compile TypeScript to vanilla JavaScript. To do that, you need to run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx tsc --project ./
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The command &lt;code&gt;tsc&lt;/code&gt; compiles TypeScript to JavaScript. The flag &lt;code&gt;--project&lt;/code&gt; specifies from where to pick the TS files. Lastly, &lt;code&gt;./&lt;/code&gt; specifies the root of the project.&lt;/p&gt;

&lt;p&gt;If you go into the &lt;code&gt;build&lt;/code&gt; folder, you should see the compiled JavaScript code. That is, the code compiled from the TypeScript code you wrote.&lt;/p&gt;

&lt;p&gt;However, we can simplify the process a little bit, and you will see how in the next section.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-create-scripts" class="anchor"&gt;
  &lt;/a&gt;
  5. Create scripts
&lt;/h1&gt;

&lt;p&gt;It can be tedious to write &lt;code&gt;npx tsc --project ./&lt;/code&gt; each time you want to compile your code. As a result, we can add a script in &lt;code&gt;package.json&lt;/code&gt; to make the process easier. &lt;/p&gt;

&lt;p&gt;Add the following line of code in &lt;code&gt;package.json&lt;/code&gt; under &lt;code&gt;scripts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"build": "tsc --project ./"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now you can run &lt;code&gt;npm run build&lt;/code&gt; to compile your code. This way, it's simpler and quicker.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this tutorial, you learnt how to create a TypeScript + Node.js + Express boilerplate. This is just the tip of the iceberg, so you can build any application you want from here.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Understanding closures</title>
      <author>M V Ganesh Kumar</author>
      <pubDate>Thu, 07 Jan 2021 03:14:30 +0000</pubDate>
      <link>https://dev.to/mvganeshkumar06/understanding-closures-57dh</link>
      <guid>https://dev.to/mvganeshkumar06/understanding-closures-57dh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Before trying to understand what are closures and how it works we have to understand what is scope, lexical environment, scope chain, and how they work.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#scope" class="anchor"&gt;
  &lt;/a&gt;
  Scope
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Everything that is present in the current execution context is said to be in the current scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Note if you don't know what an execution context is and how JavaScript reads and executes code, I highly recommend you to read my previous post &lt;a href="https://dev.to/mvganeshkumar06/understanding-hoisting-2jdb" alt="Understanding Hoisting"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's take an example to understand the scope.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Welcome &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Welcome John Smith&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;During the execution of the above code, a global execution context is created and pushed onto the call stack.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The global execution context contains the variable name with the value of John.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the greet function is invoked a new local execution context is created and push on top of the global execution context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This local execution context contains the variable surname with a value Smith.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now the surname is said to have a &lt;code&gt;local scope&lt;/code&gt; or in other words, the scope of surname is inside the greet function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is because the surname is available only inside the local execution context created by the greet function and it will accessible only inside this function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also the variable name is said to have a &lt;code&gt;global scope&lt;/code&gt; or in other words, the scope of name is global.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is because the variable name is available inside the global execution context and it will accessible everywhere.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lexical-environment" class="anchor"&gt;
  &lt;/a&gt;
  Lexical environment
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Whenever an execution context is created a lexical environment is also created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lexical environment is the execution context along with the reference to the lexical environment of the parent execution context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Think of it as a container that consists of the current execution context and a reference to the lexical environment of the parent execution context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We'll see a visual example of how the lexical environment works using the below code.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Welcome &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;welcome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 

&lt;span class="nx"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Welcome John Smith&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Below is the representation of the lexical environments formed during the execution of the above code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rf4Cffjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9eaj20wsdhepgk8z9smu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rf4Cffjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9eaj20wsdhepgk8z9smu.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first container is the lexical environment for the greet function. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It consists of a local execution context where the variable surname exists and it has a reference to the parent lexical environment which is for the introduce function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The lexical environment of the introduce function contains the variable name and the function greet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It also has a reference to its parent which is the global lexical environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The global lexical environment contains the variable welcome and it has a reference to its parent which is null.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#scope-chain" class="anchor"&gt;
  &lt;/a&gt;
  Scope chain
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The above image representing multiple lexical environments linked together by references is what is called the scope chain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Whenever you are trying to access a variable, the JavaScript engine searches for that variable in the current scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If it is not found it uses the reference in the lexical environment and moves a level above in the scope chain and searches for the variable in the parent scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is repeated until the variable is found or the scope chain is exhausted.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is the role of the scope chain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now that we have covered the required prerequisites let us look at closures.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#closures" class="anchor"&gt;
  &lt;/a&gt;
  Closures
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A lexical environment is what is called as closure or in other words it is referred to as a function bundled together along with the surrounding scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since a closure is just a lexical environment every function in JavaScript forms a closure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's see the same example again to understand closures.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Welcome &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;welcome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 

&lt;span class="nx"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Welcome John Smith&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here the function greet forms a closure. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will have access to all the variables present inside the current scope as well as in the parent scope even after the parent function has finished its execution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generally, when a function is done with its execution all the memory will be removed or garbage collected in order to save memory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But here due to closure when invoking the function welcome the greet function will be executed and it will still have access to the variable name even after the function introduce is done with its execution.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-use-of-closures" class="anchor"&gt;
  &lt;/a&gt;
  What is the use of closures
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One of the main use of closures is to have data privacy where the variables inside the outer function will be accessible only by the inner function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the above case the variable name is private and only the greet function can access it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is because the greet function is returned and when it is invoked later it still remembers the variable name due to closures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Note that closures may lead to memory wastage as the variables that are present in the outer function will not be removed even after the execution of the outer function.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But modern JavaScript engines like V8 tend to optimize this and they remove those variables that are not reachable by any reference.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A scope refers to the variable and functions present in the current execution context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lexical environment is the current execution context along with the reference of the parent lexical environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is created whenever an execution context is created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A scope chain is the chain of multiple lexical environments linked together by references.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript engine uses the scope chain to identify whether the variable is accessible or not.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A closure is just a lexical environment or in other words, it is a function bundled together along with the surrounding scope.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What is useCallback hook in React? </title>
      <author>Rahul</author>
      <pubDate>Thu, 07 Jan 2021 02:21:08 +0000</pubDate>
      <link>https://dev.to/rahxuls/what-is-usecallback-hook-in-react-1o4f</link>
      <guid>https://dev.to/rahxuls/what-is-usecallback-hook-in-react-1o4f</guid>
      <description>&lt;p&gt;New post in the React series about the &lt;strong&gt;useCallback&lt;/strong&gt; hook. Everything you need to know. &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-is-usecallback" class="anchor"&gt;
  &lt;/a&gt;
  What is useCallback?
&lt;/h3&gt;

&lt;p&gt;Do you remember the useMemo hook which we saw in the last post? The useCallback hook is also very similar and it returns a memoized callback. &lt;/p&gt;

&lt;p&gt;The useCallback hook is very useful in dealing with referential equality situations to prevent unnecessary renders. &lt;/p&gt;

&lt;p&gt;Let's understand this in a good way: &lt;/p&gt;

&lt;p&gt;Consider a case where we have to maintain two counters inside a single component. Each counter has its independent control. &lt;/p&gt;

&lt;p&gt;Now, even if you increment one counter, the other one will rerender(because they are in the same component). &lt;/p&gt;

&lt;p&gt;This may not be an issue in the case of a simple counter, however. if it is a slow and expensive function, you would want to avoid this. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-use-the-usecallback-hook" class="anchor"&gt;
  &lt;/a&gt;
  How to use the &lt;em&gt;useCallback&lt;/em&gt; hook?
&lt;/h3&gt;

&lt;p&gt;The ideal solution in the previous case is that, if the state value of the other counter remains unchanged then it should not be rendered. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mlnvWTuC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609985967484/PevALZ1Cb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mlnvWTuC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609985967484/PevALZ1Cb.png" alt="Black Gold Stars Glitter Happy New Year Card.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;// Counter 1 -&amp;gt; If you increment this, the other counter function will be recreated. &lt;br&gt;
// Counter 2 -&amp;gt; Similarly, if you increment this, the whole component will rerender and the other counter function will be recreated. &lt;/p&gt;

&lt;p&gt;So to fix this issue, can wrap both the counter functions in a &lt;strong&gt;useCallback&lt;/strong&gt;. The only when the state is changed the function will be recreated. &lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memoizedCallback&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Memoized callback function&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;//Dependency array: The function will rerun only if any of the value from this array changes.&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The concept of remembering the function so that we don't have to recreate it on every render is known as Memoization. &lt;/p&gt;

&lt;p&gt;As we saw in the last post that we already have &lt;strong&gt;useMemo&lt;/strong&gt; hook for this. When why is &lt;strong&gt;useCallback&lt;/strong&gt; even required? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-the-usecallback-hook" class="anchor"&gt;
  &lt;/a&gt;
  When to use the useCallback hook?
&lt;/h3&gt;

&lt;p&gt;The major difference between useMemo and useCallback is that useMemo returns a memoized value, whereas useCallback returns a memoized function. &lt;/p&gt;

&lt;p&gt;So if your memoized function is receiving some external parameters and performing some calculation based on that, then it makes sense to use the useCallback hook. &lt;/p&gt;

&lt;p&gt;However, if you are only concerned about the memoized value, then probably useMemo is the best option. &lt;/p&gt;

&lt;p&gt;MOST OF THE TIME YOU SHOULD NOT BOTHER OPTIMIZING UNNECESSARY RERENDERS. &lt;/p&gt;

&lt;p&gt;However, there are situations when rendering can take a substantial amount of time (think highly interactive Graphs/ Charts/ Animations). Thanks to the pragmatic nature of React, there's an escape hatch via useMemo and useCallback. &lt;/p&gt;




&lt;p&gt;😎Thanks For Reading | Happy Coding ⚡&lt;/p&gt;

&lt;p&gt;%%[bmc]&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How MongoDB Makes Frontend Easier and Backend More Efficient</title>
      <author>Kevin Mezu</author>
      <pubDate>Thu, 07 Jan 2021 02:15:01 +0000</pubDate>
      <link>https://dev.to/uzomezu/mongodb-is-weird-but-i-like-it-25b</link>
      <guid>https://dev.to/uzomezu/mongodb-is-weird-but-i-like-it-25b</guid>
      <description>&lt;p&gt;A document database like MongoDB used mostly within the MERN stack, makes for some interesting design choices in fullstack development. Methods like &lt;code&gt;remove()&lt;/code&gt; or &lt;code&gt;findByIdAndDelete()&lt;/code&gt; are mysterious and almost &lt;em&gt;too&lt;/em&gt; simple, but it definitely allows for cleaner, more consistent relay between front and backend. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todo-lists-deleting-tasks" class="anchor"&gt;
  &lt;/a&gt;
  To-Do Lists - Deleting Tasks
&lt;/h2&gt;

&lt;p&gt;One of the fundamentals of MERN projects are To-Do lists. I read a post once that compared all of React Development basically to making a To-Do list. JavaScript has Arrays and Objects as methods of storing data. Adding to both of these things is quite simple. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#add-to-an-array" class="anchor"&gt;
  &lt;/a&gt;
  Add to an Array
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//declare an array using brackets&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;starBursts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;//Add strawberry to the array&lt;/span&gt;
&lt;span class="nx"&gt;starBursts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;strawberry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;starBursts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the console we would see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; ['apple', 'orange', 'banana', 'strawberry']
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In similar fashion for a redux reducer we would find it easy to append an array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toDoReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD-TO-DO&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;toDoReducer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deleting-todos" class="anchor"&gt;
  &lt;/a&gt;
  Deleting To-Dos
&lt;/h3&gt;

&lt;p&gt;Adding to JavaScript arrays is quite simple, yet deleting items may become an arduous task.&lt;/p&gt;

&lt;p&gt;Suppose I want to delete a specific To-Do Object from a todoList array. JavaScript has a few options for this with &lt;code&gt;.pop()&lt;/code&gt;, &lt;code&gt;.splice()&lt;/code&gt;, and &lt;code&gt;.shift()&lt;/code&gt; methods. The most popular way, in our case, would use &lt;code&gt;.IndexOf()&lt;/code&gt; and &lt;code&gt;.splice()&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// array = [2, 9]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above notation is a common way to remove information from an Array. However involving redux, we quickly begin to see how this is a problem when we call the entire state using &lt;code&gt;[...state]&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mongodb" class="anchor"&gt;
  &lt;/a&gt;
  MongoDB
&lt;/h3&gt;

&lt;p&gt;Mongo Db solves this issue using the &lt;code&gt;remove()&lt;/code&gt; function. Mongoose is full of appropriately named functions like these, that turn our JavaScript acrobatics into simple Async functions. Using Id's MongoDB is able to simplify our complex Data needs without nesting data into tables. &lt;/p&gt;

&lt;p&gt;Assume we pass an object with a specified ID to the backend and wish to delete it. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//express router for deletion&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/deleteTodo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//grab the correct todo from database&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deletedToDo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deletedToDo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//use async await to avoid issues in event loop&lt;/span&gt;
&lt;span class="c1"&gt;//remove using .remove() function&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;deletedToDo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Todo was Deleted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error in Deletion.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now with Mongoose CRUD methods, our Frontend Engineer would have a simpler time creating a redux store, and relaying data to the backend. We could even go further and utilize &lt;code&gt;findByIdAndDelete()&lt;/code&gt; to delete a specific model without disturbing the current route. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#for-example" class="anchor"&gt;
  &lt;/a&gt;
  For Example:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/deleteTodo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByIdAndDelete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Deleted : &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Having functions within the API frees up space to make more attractive and interactive Frontend/User Interface. &lt;/p&gt;




&lt;p&gt;Resources: &lt;/p&gt;

&lt;p&gt;Mongoose: FindByIdAndDelete() Function. (2020, May 20). Retrieved January 07, 2021, from &lt;a href="https://www.geeksforgeeks.org/mongoose-findbyidanddelete-function/"&gt;https://www.geeksforgeeks.org/mongoose-findbyidanddelete-function/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>mongodb</category>
      <category>node</category>
    </item>
    <item>
      <title>65 Things I wish I knew when I started to Code 🌱🚀</title>
      <author>Madza</author>
      <pubDate>Wed, 06 Jan 2021 21:52:44 +0000</pubDate>
      <link>https://dev.to/madza/65-things-i-wish-i-knew-when-i-started-to-code-20ka</link>
      <guid>https://dev.to/madza/65-things-i-wish-i-knew-when-i-started-to-code-20ka</guid>
      <description>&lt;p&gt;No success story is the same, we all have had our ups and downs in the learning process and things we wish we knew when we started out.&lt;/p&gt;

&lt;p&gt;If you are a new, aspiring developer, these 65 things will prepare you for the long journey ahead. Use them as a shortcut in your own learning path.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#1-coding-is-about-problemsolving" class="anchor"&gt;
  &lt;/a&gt;
  1. Coding is about problem-solving.
&lt;/h3&gt;

&lt;p&gt;Being a programmer is way more than sitting in front of the computer and randomly pressing buttons on the keyboard. It's a powerful tool to solve a lot of real-world problems and make people's lives easier. If you are capable to do it, you will always be looked after.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-golden-rule-is-planning" class="anchor"&gt;
  &lt;/a&gt;
  2. The golden rule is planning.
&lt;/h3&gt;

&lt;p&gt;Each and every successful project starts with lots of planning. Make sure you identify the goal, define tasks, know your audience, etc. Use a pen and paper or any online wireframing tool and try to come up with a clear schema of what your solution would look like. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-the-content-is-king" class="anchor"&gt;
  &lt;/a&gt;
  3. The content is king.
&lt;/h3&gt;

&lt;p&gt;Without content your site is empty. If you are dealing with static content, make sure it is well presented. If the content is dynamic always try to project what type of content you will create or receive and design your layout, code, and database structures based on that. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-coding-should-be-the-last-phase-of-a-project" class="anchor"&gt;
  &lt;/a&gt;
  4. Coding should be the last phase of a project.
&lt;/h3&gt;

&lt;p&gt;Beginners may think that every project always starts with coding. It's actually just the technical implementation of all the planning that was done before and should be the last step of solving the problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-you-have-everything-at-your-fingertips" class="anchor"&gt;
  &lt;/a&gt;
  5. You have everything at your fingertips.
&lt;/h3&gt;

&lt;p&gt;It's not the 50s or 60s anymore, where you would have to go to the library to study some topic. All the info you need is within reach of the hand. Use your brain and the internet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-you-dont-need-extreme-hardware-to-code" class="anchor"&gt;
  &lt;/a&gt;
  6. You don't need extreme hardware to code.
&lt;/h3&gt;

&lt;p&gt;Cutting edge processor, massive amounts of RAM, and 5 monitors are all optional. A mid-range laptop is more than enough to get started out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-you-dont-need-to-be-great-at-math" class="anchor"&gt;
  &lt;/a&gt;
  7. You don't need to be great at math.
&lt;/h3&gt;

&lt;p&gt;Coding has often been associated with some geniuses with a 200+ IQ, based on the movies we have seen. It could get math-heavy in topics like artificial intelligence, robotics, cryptography, etc, but in order to start, you need to know just the basic operations. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-finding-the-right-workflow-is-not-easy" class="anchor"&gt;
  &lt;/a&gt;
  8. Finding the right workflow is not easy.
&lt;/h3&gt;

&lt;p&gt;Each of us has different preferences. Experiment with different extensions and settings. It will take lots of time to understand what works for you and how to tie everything together. But it will be very rewarding for your productivity later on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-the-perfect-timing-is-now" class="anchor"&gt;
  &lt;/a&gt;
  9. The perfect timing is now.
&lt;/h3&gt;

&lt;p&gt;Saving in bookmarks is just a fancy word for procrastination. Your best bet to be productive is to do it now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-syncing-makes-you-mobile" class="anchor"&gt;
  &lt;/a&gt;
  10. Syncing makes you mobile.
&lt;/h3&gt;

&lt;p&gt;Sync all the browser and IDE/code editor extensions and settings on every machine you work on. It will assure that you work in the same environment wherever you are.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-there-are-multiple-ways-of-achieving" class="anchor"&gt;
  &lt;/a&gt;
  11. There are multiple ways of achieving.
&lt;/h3&gt;

&lt;p&gt;Once I started to code, I thought the logic in code is very strict and has to follow a certain pattern. In reality, the only strict variable is the syntax of the language used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-naming-things-is-hard" class="anchor"&gt;
  &lt;/a&gt;
  12. Naming things is hard.
&lt;/h3&gt;

&lt;p&gt;It might sound like an easy task at the beginning, but you will find out how challenging it can be, especially for larger-scale projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-take-mistakes-as-lessons" class="anchor"&gt;
  &lt;/a&gt;
  13. Take mistakes as lessons.
&lt;/h3&gt;

&lt;p&gt;If you take any success story, you will find it's actually a continuous try and error pattern, persistence and curiosity are the keys.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-recreating-is-10x-easier-than-writing-groundup" class="anchor"&gt;
  &lt;/a&gt;
  14. Recreating is 10X easier than writing ground-up.
&lt;/h3&gt;

&lt;p&gt;When re-creating an existing app, you have a clear understanding of the layout and building principles of the project. And those are often the most challenging parts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-its-important-to-find-your-niche" class="anchor"&gt;
  &lt;/a&gt;
  15. It's important to find your niche.
&lt;/h3&gt;

&lt;p&gt;Wandering around from niche to niche will take you nowhere. Define your interest and research the fields available before jumping into one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#16-be-curious-about-why-things-work" class="anchor"&gt;
  &lt;/a&gt;
  16. Be curious about why things work.
&lt;/h3&gt;

&lt;p&gt;Always try to discover the under-the-hood stuff. Don't be enough with seeing stuff somehow magically working.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#17-tools-are-your-keys-to-productivity" class="anchor"&gt;
  &lt;/a&gt;
  17. Tools are your keys to productivity.
&lt;/h3&gt;

&lt;p&gt;A man/woman is only as good as his/her tools. Invest time in creating a proper tool-stack as it pays off big time!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#18-passionate-projects-keep-you-going" class="anchor"&gt;
  &lt;/a&gt;
  18. Passionate projects keep you going.
&lt;/h3&gt;

&lt;p&gt;When it comes to side project ideas, pick something you are truly interested in. This will boost your motivation as you care for the end result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#19-its-a-marathon-not-a-sprint" class="anchor"&gt;
  &lt;/a&gt;
  19. It's a marathon, not a sprint.
&lt;/h3&gt;

&lt;p&gt;The development space is constantly evolving, so prepare yourself for continuous learning. By starting too fast, you will get tired quickly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#20-people-you-follow-are-the-information-you-consume" class="anchor"&gt;
  &lt;/a&gt;
  20. People you follow are the information you consume.
&lt;/h3&gt;

&lt;p&gt;Pay attention to the people you follow on social media. That dictates the quality of the feed you read and the information you take in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#21-do-not-reinvent-the-wheel" class="anchor"&gt;
  &lt;/a&gt;
  21. Do not reinvent the wheel.
&lt;/h3&gt;

&lt;p&gt;Before jumping into the project, take a look at what other developers have used to solve similar problems. There should already be the solution for virtually anything, it's just a matter of how good are you at searching.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-its-easy-to-get-carried-away" class="anchor"&gt;
  &lt;/a&gt;
  22. It's easy to get carried away.
&lt;/h3&gt;

&lt;p&gt;Being active in the community is a great thing, but be aware it will often lead you to discover more optimized technologies, more modern-looking UIs, etc. That does not always mean your current stack is bad and you should switch it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#23-tutorials-often-mislead-you" class="anchor"&gt;
  &lt;/a&gt;
  23. Tutorials often mislead you.
&lt;/h3&gt;

&lt;p&gt;Tutorials are mostly based on already pre-coded and re-factored code. Once you start comparing yourself to it, you get desperate, cause you can not come up with the solutions that fast and write as clean code on the first go. Be aware it's only a bright side of a coin and the creators struggled, too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#24-tutorials-wont-make-you-independent" class="anchor"&gt;
  &lt;/a&gt;
  24. Tutorials won't make you independent.
&lt;/h3&gt;

&lt;p&gt;Watching or reading a tutorial might be good for getting an overview of the tech, but they will not help you to stand up on your feet. Try to read official docs besides to develop your analytical thinking and try to come up with your own solutions. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#25-no-tech-is-perfect" class="anchor"&gt;
  &lt;/a&gt;
  25. No tech is perfect.
&lt;/h3&gt;

&lt;p&gt;Each and every tech has it's own advantages and disadvantages. When in doubt, put your alternatives side by side, do some research on them, and compare how they tackle particular tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#26-your-ability-to-pick-up-stuff-matters" class="anchor"&gt;
  &lt;/a&gt;
  26. Your ability to pick up stuff matters.
&lt;/h3&gt;

&lt;p&gt;When applying for a company, the chances are you are not gonna be familiar with their tech stack. What matters is not how many technologies you know but how fast you can pick up the particular tech you come across.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#27-version-control-is-a-must" class="anchor"&gt;
  &lt;/a&gt;
  27. Version control is a must.
&lt;/h3&gt;

&lt;p&gt;Clients often ask for previous designs and are undecided on features. Version control is a must to save you and also assures your code is always backed up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#28-bugs-can-be-really-intimidating" class="anchor"&gt;
  &lt;/a&gt;
  28. Bugs can be really intimidating.
&lt;/h3&gt;

&lt;p&gt;Be prepared for challenging bugs that can take hours or even days to fix. You will be intimidated by the low productivity levels during those times but will be elevated once you fix them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#29-learn-what-not-to-learn" class="anchor"&gt;
  &lt;/a&gt;
  29. Learn what not to learn.
&lt;/h3&gt;

&lt;p&gt;Nowadays it's easy to get confused in the vast ocean of technologies. Ironically, one of the best skills today is to learn what not to learn.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#30-reading-code-makes-you-better-too" class="anchor"&gt;
  &lt;/a&gt;
  30. Reading code makes you better, too.
&lt;/h3&gt;

&lt;p&gt;By writing your own code, you are reflecting on what you know. It's important to read code by other devs, to learn different design patterns and best practices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-be-humble-and-others-will-respect-you" class="anchor"&gt;
  &lt;/a&gt;
  31. Be humble and others will respect you.
&lt;/h3&gt;

&lt;p&gt;Celebrate your achievements inside, but be humble about them outside. Bragging won't get you far.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-being-a-perfectionist-will-slow-you-down" class="anchor"&gt;
  &lt;/a&gt;
  32. Being a perfectionist will slow you down.
&lt;/h3&gt;

&lt;p&gt;Aiming for quality over quantity is a great thing. Tho don't over exaggerate, as you will end up with hundreds of unfinished projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#33-open-source-is-awesome" class="anchor"&gt;
  &lt;/a&gt;
  33. Open source is awesome.
&lt;/h3&gt;

&lt;p&gt;From individuals to large companies, open-source has bloomed in the community. It's a wonderful thing and I believe together we are making better projects. Make sure you study the best practices and design patterns used by other people.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#34-the-diploma-is-optional" class="anchor"&gt;
  &lt;/a&gt;
  34. The diploma is optional.
&lt;/h3&gt;

&lt;p&gt;Clients often do not care about the diploma, but your practical ability to solve their problems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#35-break-it-down-when-you-get-stuck" class="anchor"&gt;
  &lt;/a&gt;
  35. Break it down when you get stuck.
&lt;/h3&gt;

&lt;p&gt;Often times coming up with a solution may seem hard as the problem is too comprehensive. Break it down into chunks and tackle each piece bit by bit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#36-corporate-companies-need-you-for-crud-apps" class="anchor"&gt;
  &lt;/a&gt;
  36. Corporate companies need you for CRUD apps.
&lt;/h3&gt;

&lt;p&gt;The heart of corporate companies is mostly CRUD operations. Learn and be ready to work with them daily, if you are planning to apply. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#37-the-project-is-never-fully-finished" class="anchor"&gt;
  &lt;/a&gt;
  37. The project is never fully finished.
&lt;/h3&gt;

&lt;p&gt;There will always be ways to improve and optimize each project. Think of it more like the project meets the requirements and is good enough for being shipped.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#38-good-code-is-easy-to-read-and-maintain" class="anchor"&gt;
  &lt;/a&gt;
  38. Good code is easy to read and maintain.
&lt;/h3&gt;

&lt;p&gt;Whether or not you are working alone, always try to write code as somebody else will work with it. In trickier parts leave some comments, explaining the working principles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#39-the-first-language-is-always-the-hardest" class="anchor"&gt;
  &lt;/a&gt;
  39. The first language is always the hardest.
&lt;/h3&gt;

&lt;p&gt;I've seen people often asking what's the hardest language to learn. In reality, the difficulty is related to your experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#40-googling-and-using-stack-overflow-is-acceptable" class="anchor"&gt;
  &lt;/a&gt;
  40. Googling and using Stack Overflow is acceptable.
&lt;/h3&gt;

&lt;p&gt;Those resources are there for you to help. Don't be ashamed of Googling or reading SO in front of someone. Know for a fact, they do, too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#41-communication-skills-are-underrated" class="anchor"&gt;
  &lt;/a&gt;
  41. Communication skills are underrated.
&lt;/h3&gt;

&lt;p&gt;The code alone will not always determine your success. It's important to practice interaction with people.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#42-sharpen-your-negotiation-skills" class="anchor"&gt;
  &lt;/a&gt;
  42. Sharpen your negotiation skills.
&lt;/h3&gt;

&lt;p&gt;Knowing all the cutting edge tech has no power if you do not know how to negotiate. They need you not the other way around.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#43-having-an-online-presence-is-important" class="anchor"&gt;
  &lt;/a&gt;
  43. Having an online presence is important.
&lt;/h3&gt;

&lt;p&gt;Dozens of local projects have no meaning if no one knows about them. Build yourself a great online presence to promote them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#44-always-be-aware-of-the-2080-rule" class="anchor"&gt;
  &lt;/a&gt;
  44. Always be aware of the 20/80 rule.
&lt;/h3&gt;

&lt;p&gt;Keep in mind that the last 20% of a project takes 80% of the time. So think twice before reporting any progress updates to a client.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#45-dont-overengineer-without-a-cause" class="anchor"&gt;
  &lt;/a&gt;
  45. Don't over-engineer without a cause.
&lt;/h3&gt;

&lt;p&gt;It's always a good practice to aim for a state where there are no more features to remove rather than add.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#46-frameworks-come-and-go" class="anchor"&gt;
  &lt;/a&gt;
  46. Frameworks come and go.
&lt;/h3&gt;

&lt;p&gt;It is 10X more valuable to learn a tech that they are based on, this way you are all set to pick up a particular framework if the necessity arises.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#47-knowing-something-well-is-better-than-pretend-to-know-a-bit-of-everything" class="anchor"&gt;
  &lt;/a&gt;
  47. Knowing something well is better than pretend to know a bit of everything.
&lt;/h3&gt;

&lt;p&gt;Instead of trying to pick up and master everything, do some research on the field you are interested in, study the available stacks, pick one and master it to the core. Trying to become a jack of all trades will ultimately leave you a master of none.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#48-testing-is-there-for-a-reason" class="anchor"&gt;
  &lt;/a&gt;
  48. Testing is there for a reason.
&lt;/h3&gt;

&lt;p&gt;Make a good habit of writing tests. Despite you might feel you are doing unnecessary work at first, they will help you save lots of time, especially in large code-bases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#49-achievements-boost-your-motivation-best" class="anchor"&gt;
  &lt;/a&gt;
  49. Achievements boost your motivation best.
&lt;/h3&gt;

&lt;p&gt;Appreciate all those 'a-ha' moments when learning, finally getting challenging features to work, seeing people being amazed, and feeling valuable.  Treat them as fuel for your motivation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#50-do-not-put-up-more-than-you-can-carry" class="anchor"&gt;
  &lt;/a&gt;
  50. Do not put up more than you can carry.
&lt;/h3&gt;

&lt;p&gt;Find a fine line between choosing a problem of a scale, that is challenging enough for you to learn something new, but also narrow enough to be solvable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#51-do-not-compare-yourself-to-others" class="anchor"&gt;
  &lt;/a&gt;
  51. Do not compare yourself to others.
&lt;/h3&gt;

&lt;p&gt;It's easy to get frustrated if you compare yourself to the achievements of other devs. You learn at your own rate and it's perfectly fine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#52-do-not-take-criticism-personally" class="anchor"&gt;
  &lt;/a&gt;
  52. Do not take criticism personally.
&lt;/h3&gt;

&lt;p&gt;Constructive criticism is valuable feedback, pointing out the mistakes or improvements you did not see yourself. Ultimately it will lead to a better quality product. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#53-everyone-has-written-a-bad-code" class="anchor"&gt;
  &lt;/a&gt;
  53. Everyone has written a bad code.
&lt;/h3&gt;

&lt;p&gt;Don't worry about looking at the code you have written a few years back from now. It might seem like you don't believe your eyes and you might feel shame. Tho remember it's actually a clear sign, that you have progressed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#54-one-finished-project-is-better-than-10-halffinished-ones" class="anchor"&gt;
  &lt;/a&gt;
  54. One finished project is better than 10 half-finished ones.
&lt;/h3&gt;

&lt;p&gt;Try to work on one or a couple of projects at a time and try to follow the idea-execution pattern. Remember that deployed projects are those that count.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#55-the-best-way-to-learn-is-by-teaching-others" class="anchor"&gt;
  &lt;/a&gt;
  55. The best way to learn is by teaching others.
&lt;/h3&gt;

&lt;p&gt;In order to teach others, you have to study the concept yourself. This assures you get to know the concept to the core and is a win-win as you share your knowledge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#56-you-are-never-ready-to-apply-for-a-job" class="anchor"&gt;
  &lt;/a&gt;
  56. You are never ready to apply for a job.
&lt;/h3&gt;

&lt;p&gt;Learning to code is a journey, not a destination, so you will always feel like being in the middle to achieve something. Don't let that fool you and apply anyway.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#57-the-hype-train-is-real" class="anchor"&gt;
  &lt;/a&gt;
  57. The hype train is real.
&lt;/h3&gt;

&lt;p&gt;Be aware of the trends, but only to the point, where you understand their main working principles and use cases. That way you will know which problems it solves best and will pick up the actual tool just when the necessity arises. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#58-practice-leads-to-mastery" class="anchor"&gt;
  &lt;/a&gt;
  58. Practice leads to mastery.
&lt;/h3&gt;

&lt;p&gt;Repetition is the mother of all knowledge and one of your safest bets to master something is to be persistent in practicing it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#59-focus-on-the-indexes-not-the-content" class="anchor"&gt;
  &lt;/a&gt;
  59. Focus on the indexes, not the content.
&lt;/h3&gt;

&lt;p&gt;Nowadays what matters is to find information fast. If you know what you need and where to look, it's only a matter of time to pick it up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#60-be-a-sponge-for-knowledge" class="anchor"&gt;
  &lt;/a&gt;
  60. Be a sponge for knowledge.
&lt;/h3&gt;

&lt;p&gt;Develop a habit to learn each and every day in order to stay competitive and knowledgeable. Pay attention to whom you subscribe to. Seek quality over quantity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#61-learn-to-say-no" class="anchor"&gt;
  &lt;/a&gt;
  61. Learn to say no.
&lt;/h3&gt;

&lt;p&gt;If you will never say no to anything, others will start to take advantage of it sooner or later and you will end up working more than you should often.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#62-notetaking-is-your-rescue-for-writing-block" class="anchor"&gt;
  &lt;/a&gt;
  62. Note-taking is your rescue for writing block.
&lt;/h3&gt;

&lt;p&gt;Whatever you do and wherever you are, always try to track down your ideas. Create a back-log of information for the times you are feeling less inspired.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#63-schedule-the-week-and-prioritize" class="anchor"&gt;
  &lt;/a&gt;
  63. Schedule the week and prioritize.
&lt;/h3&gt;

&lt;p&gt;Try to dedicate some time to plan ahead. That way it is easier to identify all the tasks you deal with and prioritize the execution order of them. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#64-taking-breaks-make-wonders" class="anchor"&gt;
  &lt;/a&gt;
  64. Taking breaks make wonders.
&lt;/h3&gt;

&lt;p&gt;If you get stuck, try to do nothing coding-related for a while. Spend time with your family, or practice your hobbies or go for a jog. Often times you will re-visit the project and come up with the solution easily.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#65-sports-and-proper-sleep-boost-productivity" class="anchor"&gt;
  &lt;/a&gt;
  65. Sports and proper sleep boost productivity.
&lt;/h3&gt;

&lt;p&gt;When it comes to productivity, you will often do more with 8 hours of sleep and 4 hours of work, than the other way around. Combine it with regular physical activities for the full effort. &lt;/p&gt;




&lt;p&gt;Writing has always been my passion and it gives me pleasure to help and inspire people. If you have any questions, feel free to reach out!&lt;/p&gt;

&lt;p&gt;Connect me on &lt;a href="https://twitter.com/madzadev"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/madzadev/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://github.com/madzadev"&gt;GitHub&lt;/a&gt; and &lt;a href="https://dev.to/madza"&gt;DEV&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Subscribe to my &lt;a href="https://blog.madza.dev"&gt;Blog&lt;/a&gt; for more articles like this.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How long does it take to learn Python</title>
      <author>Simon Holdorf</author>
      <pubDate>Wed, 06 Jan 2021 21:41:15 +0000</pubDate>
      <link>https://dev.to/thesmartcoder/how-long-does-it-take-to-learn-python-237j</link>
      <guid>https://dev.to/thesmartcoder/how-long-does-it-take-to-learn-python-237j</guid>
      <description>&lt;p&gt;In this post I want to elaborate on how long it takes to learn the basics of the Python programming language. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-overview" class="anchor"&gt;
  &lt;/a&gt;
  Content Overview
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-1"&gt;What is Python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-2"&gt;Why Python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-3"&gt;How long does it take to learn Python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-4"&gt;Why Python is a great choice for beginners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-python" class="anchor"&gt;
  &lt;/a&gt;
  What is Python? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Python is a powerful, dynamic, and flexible programming language. It has an elegant syntax that is easy to read. It supports multiple programming paradigms, including functional, object-oriented, and procedural. &lt;/p&gt;

&lt;p&gt;Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than would be possible in languages such as C++ or Java. The language provides constructs intended to enable clear programs on both a small and large scale.&lt;/p&gt;

&lt;p&gt;The language was conceived in the late 1980s by Guido van Rossum during his work on the ABC programming language, though it began to take its current form in 1990. Van Rossum's aim was to create a "highly readable" programming language that would also be successful in an educational setting (the original ABC was based around the concept of teaching programming as a second language). In 1989, Guido van Rossum created the first implementation of this new programming language: originally named "Python", but renamed "Python 1" before its public release. This initial implementation was written in C and ran on Unix workstations (although not on any Unix kernel versions released earlier than 2.2).&lt;/p&gt;

&lt;p&gt;You can use Python to do just about anything from web development, systems administration, machine learning, artificial intelligence (AI), and scientific computing. &lt;/p&gt;

&lt;p&gt;It’s also commonly used for scripting applications and creating desktop applications.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-python" class="anchor"&gt;
  &lt;/a&gt;
  Why Python? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Python is an excellent language for beginners in computer science. It's free and open-source (as opposed to commercial languages such as Java) so there are no licensing fees. You can get started with Python easily as it comes with an interactive shell (known as the Python interpreter). &lt;/p&gt;

&lt;p&gt;It's readable, which means that the code is easy for anyone to understand, even if they have no background in programming. &lt;/p&gt;

&lt;p&gt;Python has the concept of “batteries included” which means it comes with modules that are pre-written and ready for use right out of the box. And it's object-oriented which helps programmers organize their code and think about problems from multiple angles.&lt;/p&gt;

&lt;p&gt;Python also has a very active community of developers and users. Every new release of Python has improved the performance of the language. Python runs on Windows, Mac OS X/macOS, Linux/Unix, and many other platforms. &lt;/p&gt;

&lt;p&gt;Additionally, since Python is used by Google, YouTube, Pinterest, and Dropbox, for example, there are plenty of job opportunities for those who learn the technology well. This probably isn't going to be your only programming language - most developers are polyglots who know several languages well - but it's a great place to start!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-long-does-it-take-to-learn-python" class="anchor"&gt;
  &lt;/a&gt;
  How long does it take to learn Python? &lt;a href="name-3"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In general, around 8 weeks. It depends on the amount of time and effort you’re willing to put into learning the language, as well as your prior programming experience. Python has a very friendly syntax, so it's easy to get started. But if you want to be a serious Python developer, you'll have to constantly learn and sharpen your skills.&lt;/p&gt;

&lt;p&gt;With that said, if you are capable of committing between 10 and 15 hours per week for about eight weeks to learn Python, then you will likely learn enough of the fundamentals to be productive with the language within that time frame. You should also expect this learning curve to improve your computer programming skills in general. &lt;/p&gt;

&lt;p&gt;Here are some tips for when learning Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Learn how to use the interpreter. You can simply type "python" in your terminal and start playing with it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn how variables work. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn about classes, methods, and functions. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand the basics of OOP (Object Oriented Programming). If you don't know what that means, don't worry! It will all make sense later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn about lists, dictionaries, and tuples. Those are some of the most common data structures used in Python programming. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand basic list operations such as slicing and concatenation (combining lists). That will save you some time when writing code!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Practice making your own programs from scratch! Don't just copy-paste code from tutorials or Stack Overflow answers into your projects without understanding what they do! &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get familiar with common errors like SyntaxError, IndentationError, NameError, AttributeError, TypeError, etc… These errors are usually caused by typos or bad syntax – so make sure every line of code is correct before moving on with your program! &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use IDEs like PyCharm or Spyder for easier editing / debugging / testing of your programs. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn how modules work in Python – Modules are files containing classes/functions/variables that can be imported into other python scripts/projects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#why-python-is-a-great-choice-for-beginners" class="anchor"&gt;
  &lt;/a&gt;
  Why Python is a great choice for beginners &lt;a href="name-4"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;There are many reasons why Python is a fantastic choice for beginners:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is easy to learn and use. &lt;/li&gt;
&lt;li&gt;It is powerful enough for most applications. &lt;/li&gt;
&lt;li&gt;There are lots of resources available.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take a look at the reasons above in more detail:  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy to Learn and Use&lt;/strong&gt;&lt;br&gt;
Python was designed with an emphasis on readability, so it is easier to learn than many other languages (including C++). It is also free of some quirks and oddities that make other languages difficult to learn (such as C++’s unneeded complexity). &lt;/p&gt;

&lt;p&gt;In addition, Python has an active community that contributes to documentation, tutorials, and other educational materials to help new users get started quickly. So you can spend your time learning Python instead of fighting it! &lt;/p&gt;

&lt;p&gt;And when you do run into problems, there are plenty of people who can help you out on the internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Powerful Enough for Most Applications&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Python has all the power needed for most common tasks: You can read and write files, access databases such as MySQL or Oracle, create GUIs, parse XML or JSON data, handle email messages or network requests, etc. &lt;/p&gt;

&lt;p&gt;However Python doesn’t have some features that are often used in low-level programming (e.g., pointers), so it is not appropriate for every application domain; in particular, it may be too high-level for systems programming or graphics programming. &lt;/p&gt;

&lt;p&gt;But this isn’t much of a limitation since there are good alternatives for these domains. And if you do need something that Python doesn’t have, you can always use a lower-level language (e.g., C) in conjunction with Python.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lots of Resources Available&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
There are lots of resources available to help you learn the language: You can find lots of tutorials, books, and other educational materials online. And there are many communities where you can ask questions or get help when you run into problems.&lt;/p&gt;




&lt;p&gt;I hope you learned that Python is a great choice for beginners and that you can learn the basic concepts in a short period of time if you are willing to put the hours in. However, if you want to become really good in Python, much as in other programming languages you have to constantly learn and adapt!&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>todayilearned</category>
      <category>programming</category>
    </item>
    <item>
      <title>Building your  personal website</title>
      <author>Amanda </author>
      <pubDate>Wed, 06 Jan 2021 19:16:46 +0000</pubDate>
      <link>https://dev.to/mandareis/building-your-own-personal-website-cpo</link>
      <guid>https://dev.to/mandareis/building-your-own-personal-website-cpo</guid>
      <description>&lt;p&gt;As I approach graduation day at my boot camp, I decided to work on my brand. Over the holidays, I started building a website to display all of my work.&lt;br&gt;
It was time to put everything I had learned to the test. &lt;br&gt;
This blog post is about the experience and the tools that I used along the way. Please note that this is my personal experience and not a set of guides, but I do hope you take something from this. &lt;/p&gt;

&lt;p&gt;I figured that the first step was to get excited about this, and everything would fall into place.&lt;br&gt;
Well, it turns out that coming up with designs for websites is a tough thing to do. I had these half ideas of where I wanted certain elements, styles, and colors to go, but I couldn't see the big picture. &lt;/p&gt;

&lt;p&gt;So I started looking for inspiration online. I looked through Pinterest, searched for people's portfolios, and eventually landed on a website called &lt;a href="https://dribbble.com"&gt;Dribbble&lt;/a&gt;.&lt;br&gt;
Dribble is a website for designers to share and promote their work as well as hire a designer. You can look through the explore tab for the popular design and designers or research specific themes. &lt;br&gt;
I knew I wanted something minimalistic and easy to navigate.&lt;br&gt;
After only a few minutes of looking through the designs, I knew where I wanted to start!&lt;br&gt;
Behold! &lt;/p&gt;

&lt;p&gt;I had a black background!&lt;/p&gt;

&lt;p&gt;Kidding! &lt;/p&gt;

&lt;p&gt;I mean, the background is black, but I did feel inspired enough to come up with a design. &lt;/p&gt;

&lt;p&gt;So then came the time to begin building the app, using React, of course. I used &lt;a href=""&gt;Jamboard&lt;/a&gt;(not my favorite but couldn't think of anything else, neither did I want to pay for an app) and my iPad Pro to start sketching the design, as well as the components I would need. &lt;br&gt;
The idea was to use React to build the website, but I wanted to add an admin page, so the backend was built with Rails (which is what I am most familiar with at the current time).&lt;/p&gt;

&lt;p&gt;I am slowly falling in love with React and had set the goal to learn about Hooks over the winter break.&lt;br&gt;
I knew I wanted to use only Hooks for my small app, and I set out to learn as much as I could. &lt;br&gt;
So like any React super fan, I started reading the documentation, &lt;br&gt;
and watched this video(as most people have)&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dpw9EHDh2bM"&gt;"React Today and Tomorrow and 90% Cleaner React With Hooks"&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I got my black background, some HTML, basic CSS, my functional components with their states, and all that is left to do is make sense of it.  I used &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; for the basics of adding containers, rows, and columns, but from early on I knew I wanted to do most of the CSS myself. &lt;/p&gt;

&lt;p&gt;The plan was to display every blog post or GitHub link in a beautiful carousel. I wanted to find a library out there that had the code ready and then add the pretty to it, and I did! I found a library for the carousel of my dreams.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/9wZIavvv35hM0g7vZJ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/9wZIavvv35hM0g7vZJ/giphy.gif" alt="carousel-high-five"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a few days of working with the carousel and  I hit tons of obstacles trying to customize it to my liking. &lt;br&gt;
The lesson there: &lt;br&gt;
Do a thorough research of the library if you want to implement them on your website. &lt;br&gt;
In the end, I had to decide to ditch the carousel and build something from scratch. Getting rid of the carousel now meant that the design would be compromised.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Txh1UzI7d0aqs/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Txh1UzI7d0aqs/giphy.gif" alt="kuzco-sad"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It proved to be an opportunity for me to work with animation and CSS. Also, to learn how to compromise. I was upset I had wasted hours trying to fix something that would not work. However, it provided me the chance to learn about third-party libraries, and sure enough, it came in handy when I had to add animation.&lt;/p&gt;

&lt;p&gt;I will be the first person to tell you that I did not know the first thing about animation. I think it's fascinating, but I did not imagine how complex it can be. After exploring multiple libraries, I landed on &lt;a href="https://www.framer.com/motion/"&gt;Framer Motion&lt;/a&gt;.&lt;br&gt;
Read through most of the documentation and knew it would allow me to do most of the things I needed.&lt;/p&gt;

&lt;p&gt;Ta-da! &lt;br&gt;
I have a nice transition of mouseOver/mouseLeave between divs!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kpk3tZ2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://amanda.depaula.xyz/assets/hover-demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kpk3tZ2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://amanda.depaula.xyz/assets/hover-demo.gif" alt="divs-transition"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I relied heavily on &lt;a href="https://fontawesome.com/"&gt;Font Awesome&lt;/a&gt; for all of the icons you see above and all of the buttons I have on the site. &lt;/p&gt;

&lt;p&gt;The experience of putting together something for myself, exactly the way I wanted was what kept me so motivated. &lt;br&gt;
I spent a ridiculous amount of hours working on it and I feel really proud of the work I did. None of it was easy, and at times I got so frustrated I just had to walk away. But what I took from this is that I do like coding and learning new things, and after an intense 4 months or so of Bootcamp, it's good to be reminded of that.&lt;/p&gt;

&lt;p&gt;I regret to say I don't have the site to link here yet because I am deciding where to deploy it. Once it's out there, I will be sure to refer back to this and link it.&lt;/p&gt;

&lt;p&gt;For a list of all other resources used:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cdnjs.com/"&gt;cdnjs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://animate.style/"&gt;Animate.style&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://css-tricks.com/"&gt;Css-tricks&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://reactrouter.com/"&gt;React Router&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>newbie</category>
      <category>website</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding MVC pattern in Nodejs</title>
      <author>Emmanuel Etukudo</author>
      <pubDate>Wed, 06 Jan 2021 18:52:44 +0000</pubDate>
      <link>https://dev.to/eaetukudo/understanding-mvc-pattern-in-nodejs-2bdn</link>
      <guid>https://dev.to/eaetukudo/understanding-mvc-pattern-in-nodejs-2bdn</guid>
      <description>&lt;p&gt;This is part two of the &lt;a href="https://dev.to/eaetukudo/test-driven-development-with-nodejs-express-mongoose-jest-1l42"&gt;Test-driven Development with Nodejs, Express, Mongoose &amp;amp; Jest&lt;/a&gt;, in part one, we set up our development environment and ran our first test. In this tutorial, we will focus on building the endpoints using the MVC Architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#definition-of-terms" class="anchor"&gt;
  &lt;/a&gt;
  Definition of terms
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MVC - Model View Controler&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Model View Controller is a software architectural pattern that involves the separation of the application logic into three interconnected elements the Model, View, and Controller.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restful API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;REST is an acronym for Representation State Transfer, API on the other hand is an acronym for Application Programme Interface. A RESTful API is an architectural style for an application program interface (API) that uses HTTP requests to access and use data. &lt;/p&gt;

&lt;p&gt;I surmised you are familiar with the terms involved in this tutorial. Let's get started.&lt;/p&gt;

&lt;p&gt;In the previous tutorial, we had a very basic folder structure, with few dependencies. Let's install the required dependencies for our API development.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i --save-dev body-parser dotenv nodemon
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After installation, your package.json file should look like the one below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "tdd-with-nodejs",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "jest",
    "start": "nodemon index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "body-parser": "^1.19.0",
    "dotenv": "^8.2.0",
    "express": "^4.17.1",
    "jest": "^26.6.3",
    "mongoose": "^5.11.9",
    "nodemon": "^2.0.6"
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You notice we have configured our initialization script to run with nodemon, nodemon will keep track of every change made to our index.js file and refresh our application accordingly. Next, Let's set up a server. create a new file within the root directory of your application named** index.js** and paste the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require('dotenv').config();
const mongoose =  require("mongoose");
//const articles = require("./routes/article.routes");
const bodyParser =  require("body-parser");

const app = exepress();
const port = 8000;

mongoose.connect(process.env.mongoURI, {useNewUrlParser: true, useCreateIndex: true, useUnifiedTopology: true })
.then(res =&amp;gt; console.log(`Connection Succesful ${res}`))
.catch(err =&amp;gt; console.log(`Error in DB connection ${err}`));

//body-parser config;
app.use(exepress.json());
app.use(bodyParser.urlencoded({extended: true }));
app.use(bodyParser.json());

app.get("/", (req, res) =&amp;gt; {
    res.send(`&amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;`)
});

app.listen(port, () =&amp;gt; {
    console.log(`Application is listening at port ${port}`);
});

//register the enpoints
//app.use("/api/v1/articles", articles);

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Don't forget to create a &lt;strong&gt;.env&lt;/strong&gt; file and add your database URI like so: &lt;strong&gt;mongoURI=mongodb+srv://your-db-uri&lt;/strong&gt;. Next, start the application by typing the command below on your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm run start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should get a response on your terminal that reads: &lt;strong&gt;Application is listening at port 8000&lt;/strong&gt; &amp;amp; &lt;strong&gt;Connection Succesful [object Object]&lt;/strong&gt;.  If you open &lt;strong&gt;&lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;&lt;/strong&gt; you should get &lt;strong&gt;"Hello!"&lt;/strong&gt; logged to your screen as well. &lt;/p&gt;

&lt;p&gt;This tutorial intends to teach you how to properly structure your &lt;strong&gt;Nodjs&lt;/strong&gt; application to fit into the MVC pattern, so, we would be separating our business logic from our controller and routes files. We will learn more about this in the Layered Structure tutorial which is the final tutorial for this series.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-the-model-articlejs" class="anchor"&gt;
  &lt;/a&gt;
  Building the Model (Article.js)
&lt;/h3&gt;

&lt;p&gt;Next, let's create our Model. Create a new folder within the root directory of the project, navigate into the folder, and create a new file named &lt;strong&gt;Article.js&lt;/strong&gt;, and copy-paste the code below to create the model for our API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require("mongoose");
const Schema = mongoose.Schema;


const articleSchema = Schema({

    title:{
        type: String,
        required: true,
    },

    body:{
        type: String,
        required: true,
    },

    article_image: {
        type: String,
        required: false,
    },

    date:{
        type: Date,
        default: Date.now(),
    }

});


module.exports = Article = mongoose.model("Article", articleSchema);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our model is very &lt;strong&gt;basic&lt;/strong&gt;, it has a &lt;strong&gt;title&lt;/strong&gt;,  &lt;strong&gt;body&lt;/strong&gt;, and &lt;strong&gt;date&lt;/strong&gt; object. You can learn more about building &lt;strong&gt;MongoDB&lt;/strong&gt; Schemas using Mongoose by reading the official doc  &lt;a href="https://mongoosejs.com/docs/guide.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-the-article-service-articleservicejs" class="anchor"&gt;
  &lt;/a&gt;
  Building the Article Service (ArticleService.js)
&lt;/h3&gt;

&lt;p&gt;To build the &lt;strong&gt;ArticleService.js&lt;/strong&gt; you need to create a folder named services to house our &lt;strong&gt;ArticleService.js&lt;/strong&gt; file. Copy-paste the code below into your &lt;strong&gt;ArticleService.js&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Article = require("../models/Article");

module.exports = class ArticleService{
    static async getAllArticles(){
        try {
            const allArticles = await  Article.find();
            return allArticles;
        } catch (error) {
            console.log(`Could not fetch articles ${error}`)
        }
    }

    static async createArticle(data){
        try {

            const newArticle = {
                title: data.title,
                body: data.body,
                article_image: data.article_image
            }
           const response = await new Article(newArticle).save();
           return response;
        } catch (error) {
            console.log(error);
        } 

    }
    static async getArticlebyId(articleId){
        try {
            const singleArticleResponse =  await Article.findById({_id: articleId});
            return singleArticleResponse;
        } catch (error) {
            console.log(`Article not found. ${error}`)
        }
    }

    static async updateArticle(title, body, articleImage){
            try {
                const updateResponse =  await Article.updateOne(
                    {title, body, articleImage}, 
                    {$set: {date: new Date.now()}});

                    return updateResponse;
            } catch (error) {
                console.log(`Could not update Article ${error}` );

        }
    }

    static async deleteArticle(articleId){
        try {
            const deletedResponse = await Article.findOneAndDelete(articleId);
            return deletedResponse;
        } catch (error) {
            console.log(`Could  ot delete article ${error}`);
        }

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#building-the-controller-articlecontrollerjs" class="anchor"&gt;
  &lt;/a&gt;
  Building the controller (article.controller.js)
&lt;/h3&gt;

&lt;p&gt;Next, lets' start writing our API endpoints, create a new folder within your root directory named &lt;strong&gt;controllers&lt;/strong&gt;, navigate into the folder, and create a new file named &lt;strong&gt;article.controller.js&lt;/strong&gt;. copy-paste the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const ArticleService = require("../services/ArticleService");

module.exports = class Article{

   static async apiGetAllArticles(req, res, next){
       try {
         const articles = await ArticleService.getAllArticles();
         if(!articles){
            res.status(404).json("There are no article published yet!")
         }
         res.json(articles);
       } catch (error) {
          res.status(500).json({error: error})
       }

   }

   static async apiGetArticleById(req, res, next){
      try {
         let id = req.params.id || {};
         const article = await ArticleService.getArticlebyId(id);
         res.json(article);
      } catch (error) {
         res.status(500).json({error: error})
      }
   }

   static async apiCreateArticle(req, res, next){
      try {
         const createdArticle =  await ArticleService.createArticle(req.body);
         res.json(createdArticle);
      } catch (error) {
         res.status(500).json({error: error});
      }
   }

   static async apiUpdateArticle(req, res, next){
      try {
         const comment = {}
         comment.title        = req.body.title;
         comment.body         = req.body.body;
         comment.articleImage = req.body.article_image

         const updatedArticle = await ArticleService.updateArticle(comment);

         if(updatedArticle.modifiedCount === 0){
            throw new Error("Unable to update article, error occord");
         }

         res.json(updatedArticle);

      } catch (error) {
         res.status(500).json({error: error});
      }
   }

   static async apiDeleteArticle(req, res, next){
         try {
            const articleId = req.params.id;
            const deleteResponse =  await ArticleService.deleteArticle(articleId)
            res.json(deleteResponse);
         } catch (error) {
            res.status(500).json({error: error})
         }
   }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#building-the-routes-articleroutesjs" class="anchor"&gt;
  &lt;/a&gt;
  Building the routes (article.routes.js)
&lt;/h3&gt;

&lt;p&gt;To communicate with our endpoints we need to set up our routes with corresponding requests. Create a new folder named &lt;strong&gt;routes&lt;/strong&gt;, inside the folder, create a new file named &lt;strong&gt;article.routes.js&lt;/strong&gt;. You can choose to name the folder whatever you like but it is always nice to maintain meaningful directory and file names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const  express =  require("express");
const router = express.Router();
const ArticleCtrl = require("../controllers/article.controller");


router.get("/", ArticleCtrl.apiGetAllArticles);
router.post("/", ArticleCtrl.apiCreateArticle);
router.get("/article/:id", ArticleCtrl.apiGetArticleById);
router.put("/article/:id", ArticleCtrl.apiUpdateArticle);
router.delete("/article/:id", ArticleCtrl.apiDeleteArticle);

module.exports =  router;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you've followed the tutorial up to this point, your folder structure should actually look like the snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── tdd-with-nodejs
 ├── controllers
     ├── article.controller.js
 ├── models
     ├── Article.js
 ├── routes
     ├── article.routes.js
 ├── services
     ├── articleService.js
├── test
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#putting-it-all-together" class="anchor"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h3&gt;

&lt;p&gt;When working with the MVC pattern always ensure you maintain the Separation of Concern (SoC) technique. Separation of concerns (SoC) is a design principle for separating software applications into distinct sections such that each section addresses a separate concern. A concern is a set of information that affects the code of a Software Application. We will dive deeper into this topic in the next tutorial which is the last for this series.  &lt;/p&gt;

&lt;p&gt;Before we conclude let's test one of the endpoints. Send a &lt;strong&gt;POST&lt;/strong&gt; request to the &lt;strong&gt;/api/v1/articles&lt;/strong&gt; endpoint using an API testing tool of your choice. In my case, &lt;strong&gt;Postman&lt;/strong&gt;  You should get the response object as a response for your newly created article similar to the snippet below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EB8smhul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609954092824/Ye7AcjIb9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EB8smhul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609954092824/Ye7AcjIb9.png" alt="Screenshot 2021-01-06 at 18.25.03.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for this tutorial. congratulations on making it thus far in this series. See you in the next tutorial.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>How Prime Numbers Keep the Internet Secure</title>
      <author>Sun-Li Beatteay</author>
      <pubDate>Wed, 06 Jan 2021 17:32:09 +0000</pubDate>
      <link>https://dev.to/sunnyb/how-prime-numbers-keep-the-internet-secure-4ok7</link>
      <guid>https://dev.to/sunnyb/how-prime-numbers-keep-the-internet-secure-4ok7</guid>
      <description>&lt;p&gt;Whether you know it or not, you use prime numbers every day. Do you see that lock symbol in the address bar of your web browser? The one that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLKPNGJq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/338/1%2A0clIqJx7ENY7_5wxWZ2tsg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLKPNGJq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/338/1%2A0clIqJx7ENY7_5wxWZ2tsg.png" alt="https icon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That lock means you’re using prime numbers at this very moment. That’s because the internet uses prime numbers. In fact, prime numbers are so ingrained into the fabric of our daily lives that the world would be a drastically different place without them. We’d still be doing all our banking in person and buying everything in cash. And forget about texting, because we’d still all be pen pals.&lt;/p&gt;

&lt;p&gt;So what is it about prime numbers that make them so special?&lt;/p&gt;

&lt;p&gt;Firstly, they’re unique. There aren’t any combination of numbers that can be multiplied together to create a prime number.&lt;/p&gt;

&lt;p&gt;Secondly, every number can be broken into it’s prime components. For example, 10 can be broken down into:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10 = 2 * 5
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lastly, while the average human might not be able to look at this number and immediately detect if it’s prime …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;9307398526401816703683197763617206082269079617576835286211259044095385462270542532346398139788788003092515521098292832872130802035097419307557532476688659
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;… &lt;a href="https://www.wolframalpha.com/input/?i=Is+9307398526401816703683197763617206082269079617576835286211259044095385462270542532346398139788788003092515521098292832872130802035097419307557532476688659+a+prime+number%3F"&gt;it’s relatively simple for computers.&lt;/a&gt; You might’ve written your own primality checker in the past, similar to this …&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// shout out to Reddit for the correction&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isPrime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;zero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;zero&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;zero&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;… and know that many conventional methods for checking prime numbers is slow. But there are more advanced methods, such as the &lt;a href="https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test"&gt;Miller-Rabin primality test&lt;/a&gt;, that make it very fast.&lt;/p&gt;

&lt;p&gt;It’s for all of these reasons that prime numbers are the perfect tools for encryption!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ys_uZSjy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2A15oA4PRmW0kiVDXZ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ys_uZSjy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2A15oA4PRmW0kiVDXZ" alt="lock on door"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encryption" class="anchor"&gt;
  &lt;/a&gt;
  Encryption
&lt;/h3&gt;

&lt;p&gt;For those who don’t know, &lt;em&gt;encryption&lt;/em&gt; is the act of turning information into an unreadable format called a &lt;em&gt;cipher&lt;/em&gt;. Decryption is the opposite process of turning a cipher back into the original information.&lt;/p&gt;

&lt;p&gt;In other words, encryption allows us to keep information private and out of the hands of people who might use it for malicious purposes. That’s why it has become a cornerstone of the modern internet.&lt;/p&gt;

&lt;p&gt;Without encryption, I wouldn’t be able to do most of the things I do online, such as buy groceries, pay off debts, or message my friends — at least not securely. Encryption prevents hackers from stealing my banking information and spying on my private conversations.&lt;/p&gt;

&lt;p&gt;It’s not just the internet that uses encryption but many modern devices, such as computers, smartphones, or even smart fridges. They all use encryption. Suffice it to say, encryption is important and everywhere.&lt;/p&gt;

&lt;p&gt;But how does encryption work?&lt;/p&gt;

&lt;p&gt;Encryption algorithms use keys to encrypt and decrypt data. How those keys are used depends on the type of encryption, of which there are two: &lt;em&gt;symmetric&lt;/em&gt; and &lt;em&gt;asymmetric.&lt;/em&gt; Both of which have different use cases.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#symmetric-encryption" class="anchor"&gt;
  &lt;/a&gt;
  Symmetric encryption
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V52XBBlz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AR2u5ryd_qmKp0xNVS_IaOg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V52XBBlz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AR2u5ryd_qmKp0xNVS_IaOg.jpeg" alt="symmetric encryption"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Symmetric encryption&lt;/em&gt; gets its name because it uses the same key for both encryption and decryption. Since it uses a single key for both encryption and decryption, symmetric encryption is very fast — but fragile. The key must always be kept private and only shared between trusted parties.&lt;/p&gt;

&lt;p&gt;Because of this, one of the main uses for symmetric encryption is securing &lt;a href="https://en.wikipedia.org/wiki/Data_at_rest"&gt;data at rest&lt;/a&gt;. This means encrypting devices like computers, databases, or IoT devices. If you remember the &lt;a href="https://en.wikipedia.org/wiki/FBI%E2%80%93Apple_encryption_dispute"&gt;drama that occurred between Apple and the FBI&lt;/a&gt; — that was a battle over iPhone encryption.&lt;/p&gt;

&lt;p&gt;While symmetric encryption works well, it has an inherent flaw. In order for multiple parties to have encoded communication via symmetric encryption, they must all agree on a key ahead of time. And in the context of the internet, where you’re communicating with hundreds of servers a day half-way across the world, that’s not possible.&lt;/p&gt;

&lt;p&gt;That’s where asymmetric encryption comes in.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#asymmetric-encryption" class="anchor"&gt;
  &lt;/a&gt;
  Asymmetric encryption
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7URqfg5h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1032/1%2AlUpCaxOkE78xv1wq0aw2Fw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7URqfg5h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1032/1%2AlUpCaxOkE78xv1wq0aw2Fw.jpeg" alt="asymmetric encryption"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Asymmetric encryption uses two keys, one for encryption and one for decryption. This works because the keys are complements of one another. When they’re used together, they cancel each other out — similar to how complement colors cancel one another out into white.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h_WecbHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ARfTSnJiGEAcLTQbG2a-K1A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h_WecbHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ARfTSnJiGEAcLTQbG2a-K1A.png" alt="asymmetric encryption"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Correction on the above image: Cipher should be orange&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The key used for encryption is known as the &lt;em&gt;public key.&lt;/em&gt; As you might guess, it’s safe to share this key with anyone.&lt;/p&gt;

&lt;p&gt;The decryption key, on the other hand, is called the &lt;em&gt;private key&lt;/em&gt; because it must be kept private. Only the holder of the private key can decrypt ciphers that were encrypted with the public key. Even if a malicious user were to intercept a ciphertext, they’d just see gibberish.&lt;/p&gt;

&lt;p&gt;This makes asymmetric encryption an ideal tool for sharing sensitive data. Not only that, but since a private key should only be owned by a single entity, it works well for authentication as well. That’s exactly how it’s used in the &lt;a href="https://www.thesslstore.com/blog/explaining-ssl-handshake/#the-tls-handshake-authentication"&gt;TLS handshake&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-trapdoor" class="anchor"&gt;
  &lt;/a&gt;
  The trapdoor
&lt;/h3&gt;

&lt;p&gt;One of the reasons that asymmetric encryption is as important as it is is because it works as a &lt;a href="https://en.wikipedia.org/wiki/Trapdoor_function"&gt;&lt;em&gt;trapdoor function&lt;/em&gt;&lt;/a&gt;v.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y3fRuypp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A0rJ5jW93x-uCv8DmAF89Ug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y3fRuypp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A0rJ5jW93x-uCv8DmAF89Ug.png" alt="trapdoor function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means it’s very simple to execute in one direction but very difficult to reverse — unless you have special information, otherwise known as the &lt;em&gt;trapdoor&lt;/em&gt; or &lt;em&gt;secret.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the context of asymmetric encryption, it’s very simple to encrypt data but very difficult to decrypt it using only the public key. It becomes simple again with the private key.&lt;/p&gt;

&lt;p&gt;But not all asymmetric-encryption algorithms are built the same. How laborious it is to reverse the trapdoor function determines an algorithm’s security. To see just how secure asymmetric encryption can be, let's explore one of the most popular algorithms in use today: &lt;a href="https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29"&gt;RSA&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rsa-encryption" class="anchor"&gt;
  &lt;/a&gt;
  RSA encryption
&lt;/h3&gt;

&lt;p&gt;RSA was invented in 1977 by three cryptographers: Ron Rivest, Adi Shamir, and Leonard Adleman — hence the name. Since its inception, it has spread to nearly every corner of the earth.&lt;/p&gt;

&lt;p&gt;If you’ve ever used &lt;a href="https://en.wikipedia.org/wiki/Secure_Shell"&gt;Secure Shell (SSH&lt;/a&gt;) …&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Lq_7GJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/638/0%2A3j7cZSTCnlh5Sr-T.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Lq_7GJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/638/0%2A3j7cZSTCnlh5Sr-T.jpg" alt="ssh key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;… or &lt;a href="https://en.wikipedia.org/wiki/GNU_Privacy_Guard"&gt;GNU Privacy Guard (GPG)&lt;/a&gt; …&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QEo7qVuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1054/1%2Aj5eaQFW9qCCdB_6l91wvmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QEo7qVuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1054/1%2Aj5eaQFW9qCCdB_6l91wvmw.png" alt="gpg key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;… you have RSA to thank for it. However, it’s most known for its use in &lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;TLS&lt;/a&gt; and HTTPS to prevent &lt;a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack"&gt;&lt;em&gt;man-in-the-middle&lt;/em&gt;&lt;/a&gt; attacks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TKtVJOom--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1216/1%2AV1pZz8y65jDiNM5TTvxrKw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TKtVJOom--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1216/1%2AV1pZz8y65jDiNM5TTvxrKw.png" alt="tls handeshake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While RSA is nearly half a century old, it’s one of the most commonly used asymmetric-encryption algorithms in the world. Its ubiquity is a testament to its security.&lt;/p&gt;

&lt;p&gt;But why is it so secure? Short answer: prime numbers. Long answer? That’ll involve some math. But the best answer would be to try and break it ourselves.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#breaking-rsa" class="anchor"&gt;
  &lt;/a&gt;
  Breaking RSA
&lt;/h3&gt;

&lt;p&gt;Here’s the scenario: We’re hackers trying to impersonate Medium’s server. We want to intercept all traffic going to Medium’s website in order to steal user credentials and ransom their data.&lt;/p&gt;

&lt;p&gt;Using Wireshark, we’re able to get a copy of Medium’s RSA public key and website certificate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bRattDvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ApYJ1B7A3EaPndkQ2u9b8eA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bRattDvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ApYJ1B7A3EaPndkQ2u9b8eA.png" alt="RSA Public key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But in order to impersonate Medium and fool users into connecting to our phishing server, we need the private key. Luckily, all is not lost.&lt;/p&gt;

&lt;p&gt;One thing I haven’t mentioned is that RSA keys are just numbers. An RSA private key is just a single number, which we’ll call &lt;strong&gt;d&lt;/strong&gt;. The public key is made up of two numbers, &lt;strong&gt;e&lt;/strong&gt; and &lt;strong&gt;N&lt;/strong&gt;. And &lt;strong&gt;N&lt;/strong&gt; is the product of two more numbers, &lt;strong&gt;p&lt;/strong&gt; and &lt;strong&gt;q&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I know, that’s a lot of numbers to track of. But it’s just those last two numbers, &lt;strong&gt;p&lt;/strong&gt; and &lt;strong&gt;q&lt;/strong&gt;, that we need to focus on. Because according to &lt;a href="https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29#Key_generation"&gt;RSA’s key-generation algorithm&lt;/a&gt;, if we know &lt;strong&gt;e&lt;/strong&gt;, &lt;strong&gt;p&lt;/strong&gt;, and &lt;strong&gt;q&lt;/strong&gt;,  we can recreate the private key.&lt;/p&gt;

&lt;p&gt;“Well, perfect,” one might say. “Since we have the public key, we know &lt;strong&gt;e&lt;/strong&gt; and &lt;strong&gt;N&lt;/strong&gt;. And since we know &lt;strong&gt;N&lt;/strong&gt;, we just need to split it apart to get &lt;strong&gt;p&lt;/strong&gt; and &lt;strong&gt;q&lt;/strong&gt;. How hard could that be?”&lt;/p&gt;

&lt;p&gt;Not so fast, person I just made up to ask loaded questions — &lt;strong&gt;p&lt;/strong&gt; and &lt;strong&gt;q&lt;/strong&gt; are &lt;em&gt;prime&lt;/em&gt; numbers. Gasp!&lt;/p&gt;

&lt;p&gt;I mentioned before that detecting that generating prime numbers and checking if they’re prime are relatively simple for computers. However, what isn’t simple is &lt;a href="https://en.wikipedia.org/wiki/Integer_factorization#Prime_decomposition"&gt;&lt;em&gt;prime factorization&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;How hard, you might ask?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H__Eblpt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/834/0%2A9fuvNgQhJu2k5oLe" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H__Eblpt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/834/0%2A9fuvNgQhJu2k5oLe" alt="graph showing how long it takes to factor numbers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RSA typically uses numbers 1024, 2048, or 4096 bits long. As you can see in the graph above, it only takes seconds to minutes to create &lt;strong&gt;N&lt;/strong&gt;, but it’d take millions to billions of years to factor it apart.&lt;/p&gt;

&lt;p&gt;The reason for this is — for average, nonquantum computers — there isn’t a fast method for factoring a number into its prime components. One of the best methods we know is the &lt;a href="https://mathworld.wolfram.com/NumberFieldSieve.html"&gt;Number Field Sieve&lt;/a&gt;, but even then, for a number like this, it will take a while:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;12647218591793774062037539860814590913847656969568852342569985866826731647633698490555162899129013020883082990527279827064849704038819915244363097120031062841681483530795022535252488366169730386558454292994968234214045666016756933262308367238453012386845278265898125397947728757013541963782671274800429212175737617916738370351721854897974375037404102868790995317383226110430324268401945063200233204784127599950729869495397377610047121343931821194220803396259107891220452870079636709770538139479748696178546655932056530040495898965404702415803790560056325250086900175615221136804225865647753477561884491932551643726743
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;While it’s not impossible, the level of effort is astronomical and not worth it. We’d all be long dead by the time we could generate Medium’s private key.&lt;/p&gt;

&lt;p&gt;So long story short, prime numbers are pretty darn hard to break. And that’s how they keep the internet secure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sa0cwWa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AtPa6QkbjAJjy_GKx" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sa0cwWa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AtPa6QkbjAJjy_GKx" alt="lock on door"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parting-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Parting Thoughts
&lt;/h3&gt;

&lt;p&gt;As a software developer, I’m often intimidated by all the different moving parts on the internet. It can feel like a magical and bewildering place. And as a result, I usually feel like I have no idea how any of it works or what I’m doing.&lt;/p&gt;

&lt;p&gt;But any time I learn something new about the systems I use on a daily basis, the world becomes just a little less chaotic and magical. I hope this article has helped demystify some of the mysteries of the internet for you as well.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>computerscience</category>
      <category>programming</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Career Advice for Junior Developers</title>
      <author>Tyler Hawkins</author>
      <pubDate>Wed, 06 Jan 2021 16:15:03 +0000</pubDate>
      <link>https://dev.to/thawkin3/career-advice-for-junior-developers-4cme</link>
      <guid>https://dev.to/thawkin3/career-advice-for-junior-developers-4cme</guid>
      <description>&lt;p&gt;Software engineers early in their careers often ask me, "How can I level up quickly?"&lt;/p&gt;

&lt;p&gt;In other words, how can I become an effective contributor in the shortest amount of time possible? How can I familiarize myself with our massive codebase? How do I learn all the things I should know?&lt;/p&gt;

&lt;p&gt;Starting a new job can be stressful, even as a senior engineer, and it can be especially overwhelming when it's your first programming job. So, let's look at four strategies for leveling up as a junior developer so that you can hit the ground running.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-ask-lots-of-questions" class="anchor"&gt;
  &lt;/a&gt;
  1.  Ask lots of questions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f37bzEQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ot5i4wb8tp82olt5txes.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f37bzEQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ot5i4wb8tp82olt5txes.jpeg" alt="Asking a question"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by Camylla Battani on Unsplash



&lt;p&gt;First, ask questions – lots of them. And perhaps more importantly, don't be afraid to ask questions. Working up the courage to ask questions can be hard, because doing so means admitting that you don't know everything. But why should you? &lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;Software engineering is such a broad field&lt;/a&gt; that it's impossible for anyone to know everything about everything.&lt;/p&gt;

&lt;p&gt;Asking questions, especially in an open forum like in one of your company's Slack channels, puts you in a vulnerable position. You may wonder, "Will others look down on me because I don't know this thing? Will I lose credibility as a software engineer?" In those moments, it's important to remind yourself of a few things:&lt;/p&gt;

&lt;p&gt;First, everyone has to start somewhere. Even software engineers that have 30 years of experience were once in your shoes, trying to get their bearings in this expansive industry.&lt;/p&gt;

&lt;p&gt;Second, if you have a question, it's highly likely that several other people also have the same question. Having the courage to ask will help you as well as your colleagues.&lt;/p&gt;

&lt;p&gt;Third, &lt;a href="https://en.wikipedia.org/wiki/Impostor_syndrome"&gt;impostor syndrome&lt;/a&gt; affects everyone. Everyone at some point feels like they're not good enough, that they don't deserve to be where they are, that if their colleagues realized how little they knew, they'd be exposed as a fraud. Don't listen to that voice.&lt;/p&gt;

&lt;p&gt;Fourth, when you ask your question in a public forum, it becomes documentation you can refer back to later. That's why I always encourage engineers who send me private messages on Slack to instead post their questions in public Slack channels. Then, the whole team or organization can chime in to help answer, other people who may have the same question are benefitted, and the conversation is searchable for others who have this question in the future.&lt;/p&gt;

&lt;p&gt;Now, a note to engineers on the receiving end of the question: The vulnerability created when someone asks a question in a public forum places a sacred trust in your hands. It's up to you to determine the culture of your company. Is this company and team a place that is psychologically safe, where people are free to ask questions without being berated or looked down on? Be wise in how you respond, lest you create an environment in which your colleagues are afraid to speak up.&lt;/p&gt;

&lt;p&gt;When Google conducted research to determine &lt;a href="https://rework.withgoogle.com/blog/five-keys-to-a-successful-google-team/"&gt;which factors contribute to a high-performing team&lt;/a&gt;, psychological safety was the number one contributor. Team members need to feel safe and that they are able to be vulnerable around one another.&lt;/p&gt;

&lt;p&gt;So, that being said, what sort of questions might you ask as a junior developer in order to be more effective? Here are a few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can you give me a walkthrough of our app's architecture? What frameworks and libraries do we use?&lt;/li&gt;
&lt;li&gt;Can you give me a walkthrough of our codebase directory structure? Where does the code live? How is it organized?&lt;/li&gt;
&lt;li&gt;What does the development process look like? What type of &lt;a href="https://www.atlassian.com/git/tutorials/comparing-workflows"&gt;Git workflow&lt;/a&gt; do we use?&lt;/li&gt;
&lt;li&gt;What does the &lt;a href="https://devcenter.heroku.com/articles/git"&gt;release process&lt;/a&gt; look like? How does new code get into production? How frequently is new code released?&lt;/li&gt;
&lt;li&gt;Why was [Feature X] implemented the way it was?&lt;/li&gt;
&lt;li&gt;Why do we use [Library A] rather than [Library B]?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact, these are all fantastic questions for anyone to ask when starting a new job, not just junior developers.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-ask-for-help-when-you-need-it" class="anchor"&gt;
  &lt;/a&gt;
  2. Ask for help when you need it
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7KHgudPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pa2bqgq6gmt7y7wbnd18.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7KHgudPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pa2bqgq6gmt7y7wbnd18.jpeg" alt="Asking for help"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by Amy Hirschi on Unsplash



&lt;p&gt;Along similar lines, it's important to ask for help when you need it.&lt;/p&gt;

&lt;p&gt;Wrestling with a difficult task is a crucial part of learning how to problem-solve and troubleshoot. If someone is always there to hold your hand, you won't be able to progress as quickly. But, there comes a point where it's wiser to accept that you need help.&lt;/p&gt;

&lt;p&gt;An excellent rule of thumb is: If you get stuck on something, try for 15 more minutes, and then, if you're still stuck, you must ask for help.&lt;/p&gt;

&lt;p&gt;This puts a time box on your task. It also requires you to spend a little more time on the problem before asking for help, so you aren't allowed to immediately give up. What's more, you may be motivated by the time limitation to figure it out, because maybe you really don't want to have to ask for help!&lt;/p&gt;

&lt;p&gt;If the 15-minute time limit has expired and you still feel stuck, you must ask for help. You may think it's noble to continue struggling along on your own, but remember that you're being paid for the work you do. It's not fiscally responsible for you to spend hours and hours on something without making any progress, especially if a colleague can give you a quick pointer to get you unblocked. Your teammates can be a great resource for you and are there to help.&lt;/p&gt;

&lt;p&gt;Whether they know it or not, experienced teachers and mentors will often use Vygotsky's &lt;a href="https://en.wikipedia.org/wiki/Zone_of_proximal_development"&gt;zone of proximal development&lt;/a&gt; theory as well as &lt;a href="https://en.wikipedia.org/wiki/Zone_of_proximal_development#Scaffolding"&gt;scaffolding&lt;/a&gt; when helping junior developers. The zone of proximal development (ZPD) is "the distance between what a learner can do without help, and what they can do with support from someone with more knowledge or expertise." Scaffolding is the technique of providing guidance to a student to help them operate within the ZPD.&lt;/p&gt;

&lt;p&gt;So, a helpful mentor gives the junior developer just enough guidance to enable them to complete their task, or the mentor provides just enough information to unblock them in whatever phase of development they may be.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-be-continuously-learning" class="anchor"&gt;
  &lt;/a&gt;
  3. Be continuously learning
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qgi-Mf4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yaao3r9vbtwzvh14epm0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qgi-Mf4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yaao3r9vbtwzvh14epm0.jpeg" alt="Reading"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by Adeolu Eletu on Unsplash



&lt;p&gt;The field of software engineering is constantly changing. New languages are created, once-popular libraries and frameworks are dethroned by newcomers, and design trends come and go. In order to keep up in this fast-paced world, you must be continuously learning. Software engineers don't just attend college or a dev bootcamp, graduate, get a job, and then never learn anything new again. Learning is something we do every day.&lt;/p&gt;

&lt;p&gt;The "10,000 hour rule" was popularized by Malcolm Gladwell's book, &lt;a href="https://www.amazon.com/Outliers-Story-Success-Malcolm-Gladwell/dp/0316017930"&gt;Outliers&lt;/a&gt;, back in 2008. This rule states that it takes roughly 10,000 hours of doing something to become an expert at it. While it makes sense that the more you practice something, the better you'd get at it, &lt;a href="https://www.6seconds.org/2018/02/09/the-great-practice-myth-debunking-the-10000-hour-rule-and-what-you-actually-need-to-know-about-practice/"&gt;the 10,000 hour rule has been debunked&lt;/a&gt; by others several times since the book's publication.&lt;/p&gt;

&lt;p&gt;It turns out that what's really important is not just how much you practice, but how you practice. There is a difference between "practice" and "deliberate practice."&lt;/p&gt;

&lt;p&gt;When learning to play a musical instrument, you have to be deliberate in how and what you practice. If you're learning a particular song, you don't just run through the song over and over. It's not effective to simply play it from start to finish each time. There will likely be sections of the song that are more challenging than others. If you are engaging in deliberate practice, you might play the same four measures over and over until you nail them, and then move on to another part of the song.&lt;/p&gt;

&lt;p&gt;The same concept applies to software engineering. Don't just muddle through things. Be deliberate in what you are trying to learn.&lt;/p&gt;

&lt;p&gt;If you feel like you struggle with writing unit tests, go watch a &lt;a href="https://www.pluralsight.com/"&gt;Pluralsight&lt;/a&gt; course for two hours on unit testing with &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; (or whatever testing framework is relevant to your programming language).&lt;/p&gt;

&lt;p&gt;If you are trying to learn &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, go read the docs – the &lt;a href="https://reactjs.org/docs/getting-started.html"&gt;React docs&lt;/a&gt; are actually really good!&lt;/p&gt;

&lt;p&gt;Make it a point to understand some of the basics of the technologies your company uses. Get familiar with &lt;a href="https://aws.amazon.com/"&gt;AWS&lt;/a&gt;, &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;, or whatever &lt;a href="https://www.heroku.com/developers"&gt;IaaS/PaaS providers&lt;/a&gt; you use. If you're a frontend developer, learn the UI framework or library your company uses, like &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;, &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, or &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;. If you're frequently working with databases, learn about the differences between &lt;a href="https://www.geeksforgeeks.org/difference-between-sql-and-nosql/"&gt;SQL and NoSQL databases&lt;/a&gt; as well as their respective strengths and weaknesses.&lt;/p&gt;

&lt;p&gt;In other words, take time to "sharpen the saw." This term, coined by Stephen R. Covey, is the last habit in his book &lt;a href="https://www.franklincovey.com/the-7-habits/"&gt;The 7 Habits of Highly Effective People&lt;/a&gt;. To quote Dr. Covey, "We must never become too busy sawing to take time to sharpen the saw."&lt;/p&gt;

&lt;p&gt;It's easy to fall into the trap of only completing task work during work hours. After all, you're on the clock, and your employer is paying you to be there, so you should be "working," right? However, that type of thinking is short-sighted. It's like trying to cut down a large tree with a saw for hours while never taking time to sharpen the saw. The time you spend sharpening the saw is time not spent cutting down the tree. But with a sharper saw, the more effective your cuts will be. You'll actually be able to cut the tree down in less time than it would have taken to cut the tree down had you not stopped to sharpen the saw.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instructure.com/bridge/taxonomy/term/56?newhome=bridge&amp;amp;page=2"&gt;Good employers recognize this truth&lt;/a&gt;, and they actively encourage employees to spend a few hours each week doing some intentional learning. Don't feel guilty about taking time to read an article or watch a video tutorial during work hours. When you do these things as part of your deliberate skill-sharpening practice, you'll become a far more effective engineer than you would be if you solely focused on task work 100% of the time.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-participate-in-code-reviews" class="anchor"&gt;
  &lt;/a&gt;
  4. Participate in code reviews
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-6yKtGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dikojefykfuwpjymi5ug.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-6yKtGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dikojefykfuwpjymi5ug.jpeg" alt="Code review"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by heylagostechie on Unsplash



&lt;p&gt;Finally, participate in code reviews. All respectable software companies have a code review process in place to help keep the code quality of their codebase high. Code reviews are generally thought of as a gate-keeping practice – you want to make sure that good design patterns are used, that the &lt;a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"&gt;code is clean&lt;/a&gt;, that it is adequately tested, and that potential negative consequences are avoided.&lt;/p&gt;

&lt;p&gt;But, perhaps just as important, code reviews also serve as a knowledge-sharing process. When you create a new merge request and ask others to review your code, you are inviting them to give you feedback. There may be all sorts of things they'll come back with: ways you could &lt;a href="https://martinfowler.com/books/refactoring.html"&gt;refactor your code&lt;/a&gt;, a better data structure or design pattern to use, violations of best practices you haven't learned yet. Code reviews are one of the best learning opportunities out there, and they're baked right into the development process!&lt;/p&gt;

&lt;p&gt;Code reviews can be a somewhat emotional experience. You are asking people to critique your creation, so it's easy to let your ego get involved. When that happens, take a step back and remember: Even if some of your code is bad, that doesn't make you a bad developer. Take your ego out of the equation and remember the end goal of producing high-quality code and sharing knowledge.&lt;/p&gt;

&lt;p&gt;When preparing a merge request, always be respectful of your reviewers' time. They are taking time out of their day to help you, so be sure you have good commit messages, a helpful merge request description, and have already reviewed the code yourself. As a reviewer, nothing is more frustrating than reviewing code with no context or seeing commented-out code and badly formatted code everywhere. The best advice on this subject I've read comes from Michael Lynch's article &lt;a href="https://mtlynch.io/code-review-love/"&gt;How to Make Your Code Reviewer Fall in Love with You&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the flip side, don't be afraid to also review other engineers' code, even code from more senior engineers. No one is perfect, and senior engineers make mistakes too. By reviewing code from engineers with more experience, you'll be able to see how they write code, structure code, name variables, and tackle difficult problems. By observing and then emulating the coding style of your more senior peers, you can quickly level up the quality of your own code.&lt;/p&gt;

&lt;p&gt;Google has excellent guidelines for the &lt;a href="https://google.github.io/eng-practices/review/reviewer/"&gt;code reviewer&lt;/a&gt; and also for the &lt;a href="https://google.github.io/eng-practices/review/developer/"&gt;code author&lt;/a&gt; whose code is being reviewed. I'd highly recommend reading both.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you take away only one thing from this article, I hope that you remember to be intentional in your learning. Find out what you need to know and what you want to know, and focus on those things. Be deliberate in your practice. Be curious. Have a hunger to learn. Adopting this mindset will put you on the right path for a long and successful career.&lt;/p&gt;

&lt;p&gt;Best of luck to you!&lt;/p&gt;

</description>
      <category>career</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>heroku</category>
    </item>
    <item>
      <title>CSS Loading Animation - Morphing Icons Effect (clip-path, @keyframes)</title>
      <author>crayoncode</author>
      <pubDate>Wed, 06 Jan 2021 15:04:22 +0000</pubDate>
      <link>https://dev.to/crayoncode/css-loading-animation-morphing-icons-effect-clip-path-keyframes-45i</link>
      <guid>https://dev.to/crayoncode/css-loading-animation-morphing-icons-effect-clip-path-keyframes-45i</guid>
      <description>&lt;p&gt;Today let's get creative by building a morphing loading animation with icons having only 8 points and a few lines of CSS. &lt;/p&gt;

&lt;p&gt;Read the full article or watch me code this on Youtube:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/M513LHCRluk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/crayon-code/embed/wvzjENy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#markup" class="anchor"&gt;
  &lt;/a&gt;
  Markup
&lt;/h2&gt;

&lt;p&gt;This time we need almost no markup, as only a &lt;code&gt;div.morph-loader&lt;/code&gt; is required, which is  going to be shaped through a changing &lt;code&gt;clip-path&lt;/code&gt;;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"morph-loader"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#basic-css" class="anchor"&gt;
  &lt;/a&gt;
  Basic CSS
&lt;/h2&gt;

&lt;p&gt;The basic CSS code is mostly about sizing the &lt;code&gt;div&lt;/code&gt; and giving it some color. The &lt;code&gt;animation&lt;/code&gt; is configured to run infinitely often and has a special &lt;code&gt;cubic-bezier&lt;/code&gt; easing function that makes the &lt;code&gt;clip-path&lt;/code&gt; quickly transition to the next shape and then maintaining the shape for a brief moment. So its quite steep in the beginning but then flattens out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.morph-loader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4s&lt;/span&gt; &lt;span class="n"&gt;morph&lt;/span&gt; &lt;span class="nf"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.11&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.79&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.11&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-animation-itself" class="anchor"&gt;
  &lt;/a&gt;
  The animation itself
&lt;/h2&gt;

&lt;p&gt;Now, for the animation itself it is simply a list of polygons whereas all polygon consist of exactly eight points. &lt;em&gt;Only then the Browser can morph from one polygon to the next.&lt;/em&gt; Otherwise it will just "jump".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$path-octagon-small&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="m"&gt;37&lt;/span&gt;&lt;span class="mi"&gt;.5%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;62&lt;/span&gt;&lt;span class="mi"&gt;.5%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;75%&lt;/span&gt; &lt;span class="m"&gt;37&lt;/span&gt;&lt;span class="mi"&gt;.5%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;75%&lt;/span&gt; &lt;span class="m"&gt;62&lt;/span&gt;&lt;span class="mi"&gt;.5%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;62&lt;/span&gt;&lt;span class="mi"&gt;.5%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;37&lt;/span&gt;&lt;span class="mi"&gt;.5%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;25%&lt;/span&gt; &lt;span class="m"&gt;62&lt;/span&gt;&lt;span class="mi"&gt;.5%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;25%&lt;/span&gt; &lt;span class="m"&gt;37&lt;/span&gt;&lt;span class="mi"&gt;.5%&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$path-star&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;58%&lt;/span&gt; &lt;span class="m"&gt;42%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;58%&lt;/span&gt; &lt;span class="m"&gt;58%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;42%&lt;/span&gt; &lt;span class="m"&gt;58%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;42%&lt;/span&gt; &lt;span class="m"&gt;42%&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$path-shift-star&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="m"&gt;58%&lt;/span&gt; &lt;span class="m"&gt;42%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;42%&lt;/span&gt; &lt;span class="m"&gt;58%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$path-thunder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="m"&gt;60%&lt;/span&gt; &lt;span class="m"&gt;42%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;80%&lt;/span&gt; &lt;span class="m"&gt;42%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;40%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;38%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;55%&lt;/span&gt; &lt;span class="m"&gt;55%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;35%&lt;/span&gt; &lt;span class="m"&gt;55%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;60%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;80%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nv"&gt;$path-triangle-1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="m"&gt;25%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="m"&gt;75%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="m"&gt;25%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="m"&gt;25%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="m"&gt;25%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="m"&gt;25%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="m"&gt;25%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
   &lt;span class="m"&gt;25%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nv"&gt;$path-triangle-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
   &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
   &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
   &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
   &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
   &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
   &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
   &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$clip-paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nv"&gt;$path-octagon-small&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$path-star&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$path-shift-star&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$path-thunder&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$path-triangle-1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$path-triangle-2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;$path-octagon-small&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And finally, from that list, the &lt;code&gt;@keyframes&lt;/code&gt; are generated dynamically. So first the step size is calculated and then the actual percentage is interpolated into the &lt;code&gt;@keyframes&lt;/code&gt; rule. All that changes throughout each keyframe is simply the &lt;code&gt;clip-path&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$step&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$clip-paths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nt"&gt;morph&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@each&lt;/span&gt; &lt;span class="nv"&gt;$clip-path&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$clip-paths&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$current&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$clip-path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nv"&gt;$current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$current&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$step&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-it-colorful" class="anchor"&gt;
  &lt;/a&gt;
  Making it colorful
&lt;/h2&gt;

&lt;p&gt;Since everything's greater with color, let's add some color transitions to each step. Therefore we need as many color codes as there are icons and we'll just add them to each keyframe:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="mh"&gt;#d4aee0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="mh"&gt;#44abac&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="mh"&gt;#b2dd57&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="mh"&gt;#fdc82e&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="mh"&gt;#8975b4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="mh"&gt;#2ca7d8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="mh"&gt;#d4aee0&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$step&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$clip-paths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nt"&gt;morph&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@each&lt;/span&gt; &lt;span class="nv"&gt;$clip-path&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$clip-paths&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$current&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$clip-path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$colors&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nv"&gt;$current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$current&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$step&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And that's already it. Feel free to experiment with the shapes. If you want to create your own shapes, it's easy to use something like inkscape and a 100px x 100px canvas, so the coordinates already provide you with the correct percentages for the polygons.&lt;br&gt;
Also bear in mind that the order of the points is quite important, as the first point of the previous polygon is directly interpolated into the first point of the next polygon. This can create awesome effects (e.g. from star to shift-star) or make it quite messy, but this is a pure matter of experimenting. The easiest way is probably to "roll" through the points, i.e. repeatedly move the first point to the end of the list or the other way round.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>css</category>
      <category>webdev</category>
      <category>ui</category>
    </item>
  </channel>
</rss>
