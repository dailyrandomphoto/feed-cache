<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>New Year Resolution Tracker with Weekly Automated Reports</title>
      <author>Alex</author>
      <pubDate>Thu, 13 Jan 2022 17:30:39 +0000</pubDate>
      <link>https://dev.to/alexyct/new-year-resolution-tracker-with-weekly-automated-reports-o27</link>
      <guid>https://dev.to/alexyct/new-year-resolution-tracker-with-weekly-automated-reports-o27</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;For the MongoDB Atlas Hackathon, we created a web app to help you track and achieve your new year resolutions in 2022! Link to the project: &lt;a href="https://nyrtracker.vercel.app/"&gt;https://nyrtracker.vercel.app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is difficult staying on top of your new year resolutions. Two key reasons why people, including myself, fail to stay on top of their resolutions include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forgetting about them over time&lt;/li&gt;
&lt;li&gt;Not knowing how to better achieve&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, our web app uses MongoDB to address these issues by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sending daily reminders for you to log data and track your progress&lt;/li&gt;
&lt;li&gt;Sending automated weekly reports to summarise your progress, provide insights on how you can better achieve your goals, and prompt you to write journals.&lt;/li&gt;
&lt;li&gt;Providing a dashboard to visualise your data/progress, display the insights in your weekly report, and provide a space to add memos about your resolutions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is an effective way to automate the data collection and analysis process that many of us go through (and forget about over time). Given the time constraints of the hackathon, our web app only supports exercising as a new year resolution.&lt;/p&gt;

&lt;p&gt;Try out the app on &lt;a href="https://nyrtracker.vercel.app/"&gt;https://nyrtracker.vercel.app/&lt;/a&gt; by signing up with your Google account. Alternatively, you can check out screenshots and a demo video below in this post. Enjoy!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Automation Innovation: We use MongoDB Atlas Serverless Instances to automate the weekly data aggregation and analysis I perform regarding my new year resolution progress tracking.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/alexyct"&gt;
        alexyct
      &lt;/a&gt; / &lt;a href="https://github.com/alexyct/new-year-resolution-tracker"&gt;
        new-year-resolution-tracker
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h3&gt;
Overview of My Submission&lt;/h3&gt;
&lt;p&gt;For the MongoDB Atlas Hackathon, we created a web app to help you track and achieve your new year resolutions in 2022! Link to the project: &lt;a href="https://nyrtracker.vercel.app/" rel="nofollow"&gt;https://nyrtracker.vercel.app&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is difficult staying on top of your new year resolutions. Two key reasons why people, including myself, fail to stay on top of their resolutions include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Forgetting about them over time&lt;/li&gt;
&lt;li&gt;Not knowing how to better achieve&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, our web app uses MongoDB to address these issues by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sending daily reminders for you to log data and track your progress&lt;/li&gt;
&lt;li&gt;Sending automated weekly reports to summarise your progress, provide insights on how you can better achieve your goals, and prompt you to write journals.&lt;/li&gt;
&lt;li&gt;Providing a dashboard to visualise your data/progress, display the insights in your weekly report, and provide a space to add memos about your resolutions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is an effective way to automate the data…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/alexyct/new-year-resolution-tracker"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Some technologies we used:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; &amp;amp; &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mongodb.com/"&gt;MongoDB&lt;/a&gt; Atlas Serverless Instances&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://axios-http.com/docs/intro"&gt;Axios&lt;/a&gt; for HTTP requests&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://next-auth.js.org/"&gt;Next-auth&lt;/a&gt; for authentication&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodemailer.com/"&gt;Nodemailer&lt;/a&gt; &amp;amp; &lt;a href="https://www.easycron.com/"&gt;Easycron&lt;/a&gt; for daily and weekly emails&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/chart"&gt;Google Charts&lt;/a&gt; for data visualisation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Some screenshots of the app:&lt;/strong&gt;&lt;br&gt;
Dashboard&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----qdC_Ex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhtl78mvafrq3ngbr5uz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----qdC_Ex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhtl78mvafrq3ngbr5uz.png" alt="Dashboard" width="880" height="855"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add Data Screen&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x3SR1836--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zaeqq0tq79gq7oagsp7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x3SR1836--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zaeqq0tq79gq7oagsp7h.png" alt="Add Data Screen" width="880" height="855"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add Memo Screen&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zEJaox7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3l9hoyo735qjwjz77sj7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zEJaox7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3l9hoyo735qjwjz77sj7.png" alt="Add Memo Screen" width="880" height="855"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Weekly Report Email&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fIhzyy2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0m7p087a4tix2zlbjt3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fIhzyy2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0m7p087a4tix2zlbjt3.png" alt="Weekly Report Email" width="880" height="364"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Mobile&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GCgf39pN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo66n93vgk1exa71pof1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GCgf39pN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo66n93vgk1exa71pof1.png" alt="Mobile View" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For judges of the Hackathon, we recognise that you may not have time to actually try to app and wait a week for the automated reports. So if you sign in to the app, you will see buttons that sends you a demo of the weekly automated report (as well as demo of the daily reminders).&lt;/p&gt;

&lt;p&gt;Hope you like our project!&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>How to show recent GitHub activities on your profile readme</title>
      <author>Sachin Chaurasiya</author>
      <pubDate>Thu, 13 Jan 2022 17:17:50 +0000</pubDate>
      <link>https://dev.to/sachinchaurasiya/how-to-show-recent-github-activities-on-your-profile-readme-23he</link>
      <guid>https://dev.to/sachinchaurasiya/how-to-show-recent-github-activities-on-your-profile-readme-23he</guid>
      <description>&lt;p&gt;We all know Github is a great platform to collaborate with people and contribute to open source projects.   daily, we do perform some activities on GitHub like creating an issue, creating a pull request, code review and all other things.&lt;/p&gt;

&lt;p&gt;These are the activities that get added to our contributions and we get a green square for each day with our contributions counts.&lt;/p&gt;

&lt;p&gt;For Example, contribution count graph like this,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0k6sUCqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642088656573/WeTNEMO3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0k6sUCqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642088656573/WeTNEMO3f.png" alt="image.png" width="880" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we click on any box we will get activities of that day something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VXLud94x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642088945299/-GcVzoR6N.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VXLud94x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642088945299/-GcVzoR6N.png" alt="image.png" width="880" height="676"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can see my activities of date &lt;code&gt;10th October 2021&lt;/code&gt;, I created some commits and opened some issues.&lt;/p&gt;

&lt;p&gt;Have you ever thought of showing your GitHub activities on your Profile Readme?&lt;/p&gt;

&lt;p&gt;You will be thinking like is that even possible? yes, it is possible and today in this article, we will be discussing how to show our recent GitHub activities on our profile readme.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;p&gt;We will be going to use Github Actions that will help us to create a workflow to show our recent activities on Profile readme.&lt;/p&gt;

&lt;p&gt;before jumping into the setup let's first discuss what are GitHub actions and what they are used for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-github-actions"&gt;
  &lt;/a&gt;
  What are GitHub actions?
&lt;/h2&gt;

&lt;p&gt;GitHub actions are a set of events and workflow, whenever specified events happen to your GitHub repository it will run the associated workflow for it.&lt;/p&gt;

&lt;p&gt;want to learn more about Github actions, you can get started from &lt;a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cP0I9w2coGU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-activity-readme"&gt;
  &lt;/a&gt;
  GitHub - Activity - Readme
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GitHub - Activity - Readme&lt;/strong&gt; is a Github action that will update your profile readme with recent GitHub activity.&lt;/p&gt;

&lt;p&gt;It is created by &lt;strong&gt;James George&lt;/strong&gt; you can check his profile &lt;a href="https://github.com/jamesgeorge007"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;to work with this action we will need to set up a workflow that will be running automatically to update the profile readme with recent activities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-workflow"&gt;
  &lt;/a&gt;
  Setting up workflow
&lt;/h3&gt;

&lt;p&gt;we can easily set up this workflow in our profile repository to capture and update profile readme with recent activities.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-the-raw-github-endraw-folder-in-your-profile-repository-if-it-does-not-exist"&gt;
  &lt;/a&gt;
  Create the &lt;code&gt;.github&lt;/code&gt; folder in your profile repository if it does not exist.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; mkdir .github
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-the-raw-workflows-endraw-folder-inside-the-raw-github-endraw-folder-if-it-does-not-exist"&gt;
  &lt;/a&gt;
  Create the &lt;code&gt;workflows&lt;/code&gt; folder inside the &lt;code&gt;.github&lt;/code&gt;folder if it does not exist.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;mkdir .github/workflows
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-the-raw-workflownameyml-endraw-file-inside-raw-workflows-endraw-folder"&gt;
  &lt;/a&gt;
  Create the &lt;code&gt;{workflowname}.yml&lt;/code&gt; file inside &lt;code&gt;workflows&lt;/code&gt; folder.
&lt;/h4&gt;

&lt;p&gt;where you can replace  &lt;strong&gt;workflow name&lt;/strong&gt; with your workflow name. I will give the name &lt;code&gt;update-readme.yml&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; update-readme.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after creating a workflow file add this content to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update README&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*/5&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt; &lt;span class="c1"&gt;# Runs every 5 minutes.&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update this repo's README with recent activity&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;jamesgeorge007/github-activity-readme@master&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;COMMIT_MSG&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Updated&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;README&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;with&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;recent&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;activity"&lt;/span&gt;
          &lt;span class="na"&gt;MAX_LINES&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#here-we-have-three-main-components-of-the-workflow"&gt;
  &lt;/a&gt;
  Here we have three main components of the workflow
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;on&lt;/li&gt;
&lt;li&gt;jobs&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's discuss them one by one&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;name&lt;/strong&gt; is the name of the workflow after workflow run If you see the actions tab in your repository you will get workflow runs like this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RXRkDeiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642090901545/UQ3bn-6LK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RXRkDeiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642090901545/UQ3bn-6LK.png" alt="image.png" width="880" height="90"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;on&lt;/strong&gt; is used for defining what action you want to run this workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;here we are running this workflow on &lt;code&gt;schedule&lt;/code&gt; using a cron job to run this workflow every 5 minutes automatically.&lt;/p&gt;

&lt;p&gt;If you don't know much about cron syntax this may be helpful for you&lt;br&gt;
&lt;a href="https://crontab.guru"&gt;The quick and simple editor for cron schedule expressions&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;jobs&lt;/strong&gt; is used for defining what to do when an event happens on our repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;here we are defining only one job that is &lt;strong&gt;build&lt;/strong&gt; which will commit on our repository with the message &lt;strong&gt;Update this repo's README with recent activity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;for jobs, we will need to define what environment it will be running and we are running this job on &lt;code&gt;ubuntu&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;also, we will need to define what steps to use, something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      - uses: actions/checkout@v2
      - uses: jamesgeorge007/github-activity-readme@master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;env&lt;/code&gt; is used for automatic token authentication.&lt;br&gt;
you don't need to worry about &lt;code&gt;secrets.GITHUB_TOKEN&lt;/code&gt; will automatically get referred from your GitHub account.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you notice we are using the &lt;code&gt;with&lt;/code&gt; attribute for 2nd action that is &lt;code&gt;jamesgeorge007/github-activity-readme@master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;here we are providing 2 options &lt;code&gt;COMMIT_MSG&lt;/code&gt; and &lt;code&gt;MAX_LINES&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;COMMIT_MSG - Commit message used while committing to the repository.&lt;/li&gt;
&lt;li&gt;MAX_LINES - The most number of lines should populate in your readme file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, I hope we are clear with all the components of a workflow.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-last-step-is-to-add-this-content-to-your-profile-raw-readmemd-endraw-file"&gt;
  &lt;/a&gt;
  The Last step is to add this content to your profile &lt;code&gt;README.md&lt;/code&gt; file.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Recent Activity :zap:
&amp;lt;!--START_SECTION:activity--&amp;gt;
&amp;lt;!--END_SECTION:activity--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Think of it like a block that will get replaced by your recent activities.&lt;/p&gt;

&lt;p&gt;For Example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Recent Activity :zap:

&amp;lt;!--START_SECTION:activity--&amp;gt;
1. 🎉 Merged PR [#2197](https://github.com/open-metadata/OpenMetadata/pull/2197) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
2. ❗️ Closed issue [#2040](https://github.com/open-metadata/OpenMetadata/issues/2040) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
3. ❗️ Closed issue [#2028](https://github.com/open-metadata/OpenMetadata/issues/2028) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
4. ❗️ Closed issue [#2156](https://github.com/open-metadata/OpenMetadata/issues/2156) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
5. 🗣 Commented on [#2156](https://github.com/open-metadata/OpenMetadata/issues/2156) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
6. 🎉 Merged PR [#2154](https://github.com/open-metadata/OpenMetadata/pull/2154) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
7. ❗️ Closed issue [#2087](https://github.com/open-metadata/OpenMetadata/issues/2087) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
8. ❗️ Opened issue [#2156](https://github.com/open-metadata/OpenMetadata/issues/2156) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
9. ❗️ Opened issue [#2147](https://github.com/open-metadata/OpenMetadata/issues/2147) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
10. ❗️ Closed issue [#1876](https://github.com/open-metadata/OpenMetadata/issues/1876) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
&amp;lt;!--END_SECTION:activity--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example of my profile readme with recent activities&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W6R9YFdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642092043619/6FPB6gSY4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W6R9YFdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642092043619/6FPB6gSY4.png" alt="image.png" width="880" height="372"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;we discussed what are github actions and why they are used for.&lt;/li&gt;
&lt;li&gt;we did set up the workflow to update our profile readme with recent activities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/marketplace/actions/github-activity-readme"&gt;GitHub - Activity - Readme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Sachin-chaurasiya"&gt;Sachin Chaurasiya Github Profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that’s it for this topic. Thank you for reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/sachin-chaurasiya"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://twitter.com/sachindotcom"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/sachin87"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y61HrVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-blue.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How do you review CSS?</title>
      <author>William Iommi</author>
      <pubDate>Thu, 13 Jan 2022 16:32:12 +0000</pubDate>
      <link>https://dev.to/wiommi/how-do-you-review-css-20fi</link>
      <guid>https://dev.to/wiommi/how-do-you-review-css-20fi</guid>
      <description>&lt;p&gt;What is your workflow when you have to do a tech review and there are a bunch of CSS-like files?&lt;br&gt;
Do you follow some guidelines? Do you build the feature branch somewhere? Or you just close your eyes 🙈, click on the 'Viewed' checkbox and let the QA guys do the rest? 😬&lt;/p&gt;

&lt;p&gt;👇👇👇&lt;/p&gt;

</description>
      <category>css</category>
      <category>productivity</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Developer Twitter Chats</title>
      <author>Kendall</author>
      <pubDate>Thu, 13 Jan 2022 16:25:36 +0000</pubDate>
      <link>https://dev.to/kendallkerr/developer-twitter-chats-4hf8</link>
      <guid>https://dev.to/kendallkerr/developer-twitter-chats-4hf8</guid>
      <description>&lt;p&gt;Hi! Does anyone have any insight into good Twitter chats for developers? Thanks in advance!&lt;/p&gt;

</description>
      <category>help</category>
    </item>
    <item>
      <title>Kaimono-MongoDB Atlas Hackathon Submission.</title>
      <author>Shivang Mishra</author>
      <pubDate>Thu, 13 Jan 2022 16:25:27 +0000</pubDate>
      <link>https://dev.to/shivangm24/kaimono-mongodb-atlas-hackathon-submission-mo7</link>
      <guid>https://dev.to/shivangm24/kaimono-mongodb-atlas-hackathon-submission-mo7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;My project is a E-Commerce Grocery store based on MERN Stack technology, I used the Mongo Atlas Search Feature in the search bar of the website with auto search configuration. Allowing users to search items all over website, it shows the item that matches the word or else show the item closest to the word typed by user.&lt;/p&gt;

&lt;p&gt;My Search Index Configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "mappings": {
    "dynamic": false,
    "fields": {
      "name": [
        {
          "foldDiacritics": false,
          "maxGrams": 5,
          "minGrams": 1,
          "tokenization": "edgeGram",
          "type": "autocomplete"
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;E-Commerce Creation&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ShivangM"&gt;
        ShivangM
      &lt;/a&gt; / &lt;a href="https://github.com/ShivangM/Kaimono-MongoDB-Atlas-Hackathon"&gt;
        Kaimono-MongoDB-Atlas-Hackathon
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ShivangM/Kaimono-MongoDB-Atlas-Hackathon"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UsiEepEHqFE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y0_rsIkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eenvlc449u3is0l2d2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y0_rsIkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eenvlc449u3is0l2d2q.png" alt="Image description" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was really fun for me participating in this hackathon and by building this project I came to learn different MongoDB features which would be really helpful in my future projects.&lt;/p&gt;

&lt;p&gt;Contributor: Shivang Mishra ( &lt;a class="mentioned-user" href="https://dev.to/shivangm24"&gt;@shivangm24&lt;/a&gt; )&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>Search for any comments in the Rick Roll music video</title>
      <author>benthecoder</author>
      <pubDate>Thu, 13 Jan 2022 16:20:31 +0000</pubDate>
      <link>https://dev.to/benthecoder1/search-comments-for-the-rick-roll-music-video-25no</link>
      <guid>https://dev.to/benthecoder1/search-comments-for-the-rick-roll-music-video-25no</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;The main idea of the app is a filter feature for YouTube video comments. I sometimes do &lt;code&gt;CMD + F&lt;/code&gt; and look for particular comments and I thought it would be fun to make an app that filters out only comments I'm interested in.&lt;/p&gt;

&lt;p&gt;In my app, any user can search for comments in the popular rick roll video – Rick Astley's Never Gonna Give You Up.  There was restrictions in getting all the comment data however, due to the API quota restrictions. There's also the fact that there are new comments to the video every single day (2,047,723 comments as of the day this article is published)&lt;/p&gt;

&lt;p&gt;Nonetheless, I was only able to get ~1 million comments, which I believe is more than enough for this little side project.&lt;/p&gt;

&lt;p&gt;To build the web app, I used streamlit because it's easy to use and is great out-of-the-box. It has well designed components and I don't have to worry about web dev. &lt;/p&gt;

&lt;p&gt;To build the search functionality, I used MongoDB Atlas Search, which was great and simple to set up. I loved the fact that I could test my search index before writing any code.&lt;/p&gt;

&lt;p&gt;You can try out the app in the link below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://share.streamlit.io/benthecoder/yt-comments-mongodb-search/main/yt_comments/app.py"&gt;https://share.streamlit.io/benthecoder/yt-comments-mongodb-search/main/yt_comments/app.py&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Choose Your Own Adventure&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/benthecoder/yt-comments-mongodb-search"&gt;Github Repo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;App result for the query - "rickrolled"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yAbKSVMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16npsxau6a5nx8jhbx0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yAbKSVMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16npsxau6a5nx8jhbx0z.png" alt="rickrolled query result" width="880" height="529"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;data frame output of result&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MQ-DLMBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrsxvbcdpy45281t2x90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MQ-DLMBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrsxvbcdpy45281t2x90.png" alt="data frame output" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;App result for query - "music"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UoI2emLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8ocrr4q54pnrmo94qh4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoI2emLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8ocrr4q54pnrmo94qh4.png" alt="music query result" width="880" height="771"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>Why you have to use className in React, but not in Preact?</title>
      <author>Nikita Grechino</author>
      <pubDate>Thu, 13 Jan 2022 16:14:09 +0000</pubDate>
      <link>https://dev.to/fromaline/why-you-have-to-use-classname-in-react-but-not-in-preact-3fdm</link>
      <guid>https://dev.to/fromaline/why-you-have-to-use-classname-in-react-but-not-in-preact-3fdm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#state-of-things"&gt;
  &lt;/a&gt;
  State of things
&lt;/h2&gt;

&lt;p&gt;We all know this simple rule. Use &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt; if you write JSX.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleReactComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Example React component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://reactjs.org/docs/introducing-jsx.html#specifying-attributes-with-jsx"&gt;React docs warns&lt;/a&gt; us about this convention straightaway. And it goes even further, you need to specify all HTML attributes in &lt;code&gt;camelCase&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Okay, if it's the way things work, we can get used to it. Since JSX is different from HTML in a lot of ways, it's somewhat justifiable.&lt;/p&gt;

&lt;p&gt;Wait a moment. We actually &lt;strong&gt;can&lt;/strong&gt; use &lt;code&gt;class&lt;/code&gt; in JSX, but only if we would use Preact instead of React.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExamplePreactComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Example Preact Component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it's a legitimate &lt;a href="https://preactjs.com/guide/v10/differences-to-react#raw-html-attributeproperty-names"&gt;documented&lt;/a&gt; feature, not a coincidence or a bug. So, the question is - why? &lt;br&gt;
Why do we &lt;strong&gt;have to&lt;/strong&gt; &lt;code&gt;camelCase&lt;/code&gt; all HTML attributes in React, but not in Preact?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: If you aren't familiar with JSX, but want to read and understand this article anyway, check out &lt;a href="https://dev.to/fromaline/hyperscript-the-hidden-language-of-react-3d1f"&gt;my other article&lt;/a&gt;, where we take a look at what JSX is and how it works under the hood.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-reason-behind-the-rule"&gt;
  &lt;/a&gt;
  The reason behind the rule
&lt;/h2&gt;

&lt;p&gt;First thing first, let's clearly define the reason behind this rule in React.&lt;br&gt;
The official React docs have a quite vague explanation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since JSX is closer to JavaScript than to HTML, React DOM uses &lt;code&gt;camelCase&lt;/code&gt; property naming convention instead of HTML attribute names.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's hard to say solely from this explanation what the real reason is.&lt;br&gt;
So, let's google it and try to find more info!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#its-a-reserved-keyword"&gt;
  &lt;/a&gt;
  It's a reserved keyword
&lt;/h3&gt;

&lt;p&gt;There is &lt;a href="https://www.geeksforgeeks.org/why-react-uses-classname-over-class-attribute/#:~:text=Explanation%3A%20The%20only%20reason%20behind,className%20instead%20of%20class%20attribute."&gt;an article&lt;/a&gt; about this problem on GeeksForGeeks. Let's consider an explanation from it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The only reason behind the fact that it uses className over class is that the &lt;em&gt;&lt;strong&gt;class&lt;/strong&gt;&lt;/em&gt; is a reserved keyword in JavaScript and since we use JSX in React which itself is the extension of JavaScript, we have to use className instead of the class attribute.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First of all, yeah, technically speaking &lt;code&gt;class&lt;/code&gt; is a reserved keyword in JavaScript for making, so-called, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class"&gt;class declarations&lt;/a&gt; like this one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Polygon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we actually &lt;strong&gt;can&lt;/strong&gt; use &lt;code&gt;class&lt;/code&gt; keyword in JavaScript without much trouble.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;otherObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;otherObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may think, it didn't work last time I checked! And you'll be right.&lt;br&gt;
This works only in modern versions of JavaScript. So that's the point? Not exactly.&lt;br&gt;
In older versions of JavaScript, you may easily achieve the same thing by explicitly turning the &lt;code&gt;class&lt;/code&gt; property into a string literal like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;otherObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;otherObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, maybe the real reason is separate from this whole reserved-keyword issue. Maybe, it's the JSX itself!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-a-jsxspecific-issue"&gt;
  &lt;/a&gt;
  It's a JSX-specific issue
&lt;/h3&gt;

&lt;p&gt;Just think about it. JSX is an &lt;strong&gt;extension&lt;/strong&gt; of JavaScript, not one-to-one clone or so. That's why even though it's tightly coupled with JS, it may propose some other restrictions.&lt;/p&gt;

&lt;p&gt;Let's battle-test this theory. We'll declare a simple component with a &lt;code&gt;className&lt;/code&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll put it through Babel transpiler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/*#__PURE__*/&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;a href="https://babeljs.io/repl#?browsers=defaults&amp;amp;build=&amp;amp;builtIns=false&amp;amp;corejs=3.6&amp;amp;spec=false&amp;amp;loose=false&amp;amp;code_lz=MYewdgzgLgBApgDwIYFsAOAbOMC8MA8AJgJYBuMwGSEEAcqnDgEQBmIITAfABJwYYgYAdxAAnDIQCE-APQlSnIA&amp;amp;debug=false&amp;amp;forceAllTransforms=true&amp;amp;shippedProposals=false&amp;amp;circleciRepo=&amp;amp;evaluate=false&amp;amp;fileSize=true&amp;amp;timeTravel=false&amp;amp;sourceType=module&amp;amp;lineWrap=true&amp;amp;presets=react&amp;amp;prettier=false&amp;amp;targets=&amp;amp;version=7.16.9&amp;amp;externalPlugins=&amp;amp;assumptions=%7B%7D"&gt;Live example&lt;/a&gt; in Babel REPL, in case you want to check yourself.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The result is pretty much expected and fully valid. Now let's try another one. Let's use &lt;code&gt;class&lt;/code&gt; instead of &lt;code&gt;className&lt;/code&gt; in this try.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And after transpilation we get this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/*#__PURE__*/&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;a href="https://babeljs.io/repl#?browsers=defaults&amp;amp;build=&amp;amp;builtIns=false&amp;amp;corejs=3.6&amp;amp;spec=false&amp;amp;loose=false&amp;amp;code_lz=MYewdgzgLgBApgDwIYFsAOAbOMC8MA8AJgJYBuMwGSEEOARAGYgh0B8AEnBhiDAO4gAThkIBCfAHoSpVkA&amp;amp;debug=false&amp;amp;forceAllTransforms=true&amp;amp;shippedProposals=false&amp;amp;circleciRepo=&amp;amp;evaluate=false&amp;amp;fileSize=true&amp;amp;timeTravel=false&amp;amp;sourceType=module&amp;amp;lineWrap=true&amp;amp;presets=react&amp;amp;prettier=false&amp;amp;targets=&amp;amp;version=7.16.9&amp;amp;externalPlugins=&amp;amp;assumptions=%7B%7D"&gt;Live example&lt;/a&gt; of this try in Babel REPL.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First of all, it's fully valid, as well as, the former one.&lt;br&gt;
Secondly, Babel transpiles this snippet, like it was nothing new or weird for him. So, it seems like JSX isn't an issue either.&lt;/p&gt;

&lt;p&gt;Okay, maybe we'll face some issues in the render phase. Because JSX in itself is just syntax and it doesn't create UI on its own. We need to render JSX somewhere to see the end UI. So we'll try to do exactly that to see, if some problems may arise.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#its-a-render-function-problem"&gt;
  &lt;/a&gt;
  It's a render function problem
&lt;/h3&gt;

&lt;p&gt;Let's create a simple render function from scratch because obviously React won't allow us to use its render mechanism with &lt;code&gt;class&lt;/code&gt; instead of &lt;code&gt;className&lt;/code&gt;.&lt;br&gt;
Our render function will render the result of &lt;code&gt;React.createElement&lt;/code&gt; to the DOM. But what does the result of &lt;code&gt;React.createElement&lt;/code&gt; look like?&lt;br&gt;
&lt;code&gt;React.createElement&lt;/code&gt; returns, so-called, &lt;strong&gt;virtual node&lt;/strong&gt;. &lt;br&gt;
It looks like this in our case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="na"&gt;$typeof&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;_owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what is a virtual node anyway?&lt;br&gt;
Virtual node or vnode, in short, is just a lightweight representation of a given UI structure. In the case of the browser, the virtual node represents the real DOM node. React uses virtual nodes to construct and maintain, so-called, virtual DOM, which itself is a representation of real DOM.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: If you want to dig into this whole virtual madness, let me know in the comments and I'll make an article, where we'll go through the whole concept of virtual DOM and make our own implementation of it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To implement the render function and check how things work, we only need three basic properties of the vnode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// defines the type of a given vnode&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// defines all passed React props and HTML attributes of a given vnode&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// contains children of a given vnode&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Sidenote: If you want to understand what other properties are and why they are here, let me know in the comments section and I'll make detailed articles with a deep explanation of each individual property.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now with new knowledge we are fully ready to create our own render function for vnode tree. &lt;br&gt;
Let's start with the basics and create element of the passed type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's handle the props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;  
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's recursively add our children and handle edge-case, in which a child is a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;  
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last missing piece is actual mounting. So let's do it now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderedExample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderedExample&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we're good to go. It's time to test how the render function will handle our virtual node with the &lt;code&gt;class&lt;/code&gt; prop.&lt;/p&gt;

&lt;p&gt;It works like a charm!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vd2Jtgoc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642006796053/tNzjaI4g5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vd2Jtgoc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642006796053/tNzjaI4g5.png" alt="screenshot.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://codesandbox.io/s/jsx-render-function-example-nq55s?file=/src/index.js"&gt;Live example&lt;/a&gt; on CodeSandbox.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It renders the &lt;code&gt;div&lt;/code&gt; with correct class &lt;code&gt;foo&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I added this simple bit of CSS to test if our class is in place. And it is, you can verify it yourself!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;coral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are completely sure, that the reason behind &lt;code&gt;className&lt;/code&gt; usage is not connected somehow to render function. We are sure because we implemented the render function, that uses &lt;code&gt;class&lt;/code&gt; ourselves. &lt;br&gt;
Now what? Maybe we should agree that it's some kind of convention and leave things as they are? No, we should take an even closer look at the problem.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-different-approach-to-the-problem"&gt;
  &lt;/a&gt;
  A different approach to the problem
&lt;/h2&gt;

&lt;p&gt;You see, there is a JS framework, called &lt;a href="https://preactjs.com/"&gt;Preact&lt;/a&gt;. It's an alternative to React with the same API. &lt;br&gt;
And there is a very interesting statement on its official page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V5KIzNH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642016822259/y8aSULZup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V5KIzNH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642016822259/y8aSULZup.png" alt="preact official page.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Closer to the DOM&lt;/em&gt;. Hmm, it's the exact thing, we are looking for. We try to use &lt;code&gt;class&lt;/code&gt;, which is a native way of adding CSS classes in DOM. And Preact uses this approach, it becomes clear from its &lt;a href="https://preactjs.com/guide/v10/differences-to-react/#raw-html-attributeproperty-names"&gt;official docs&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Preact aims to closely match the DOM specification supported by all major browsers. When applying &lt;code&gt;props&lt;/code&gt; to an element, Preact &lt;em&gt;detects&lt;/em&gt; whether each prop should be set as a property or HTML attribute. This makes it possible to set complex properties on Custom Elements, but it also means you can use attribute names like &lt;code&gt;class&lt;/code&gt; in JSX:&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This:&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// ...is the same as:&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, let's dig into Preact source code to figure out why it works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explore-source-code"&gt;
  &lt;/a&gt;
  Explore source code
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Here is a &lt;a href="https://github.com/preactjs/preact/blob/master/src/create-element.js#L14"&gt;link&lt;/a&gt; to the source file on GitHub, in case you want to follow along.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's take a look at Preact &lt;code&gt;createElement&lt;/code&gt; function, which serves similar purpose as &lt;code&gt;React.createElement&lt;/code&gt;. Here's a snippet from the function body.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;normalizedProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
            &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ref&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;normalizedProps&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Preact &lt;code&gt;createElement&lt;/code&gt; function filters out only two properties, &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt;, and passes others to &lt;code&gt;normalizedProps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: If you're asking yourself, why Preact filters out &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt; and how these special props are handled internally by Preact, let me know in the comments section. I'll make detailed articles about these two props.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then Preact passes the resulting &lt;code&gt;normalizeProps&lt;/code&gt; to another function, called &lt;code&gt;createVNode&lt;/code&gt;, and returns the result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createVNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;normalizedProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's dig into &lt;code&gt;createVNode&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/preactjs/preact/blob/master/src/create-element.js#L55"&gt;Source file on GitHub&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createVNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// No props transformation here&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="c1"&gt;// No props transformation here either&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It becomes obvious from the snippet, that the &lt;code&gt;createVNode&lt;/code&gt; function doesn't do any transformations with passed &lt;code&gt;props&lt;/code&gt;. It just returns the &lt;code&gt;props&lt;/code&gt; in the new &lt;code&gt;vnode&lt;/code&gt; object. And &lt;code&gt;vnode&lt;/code&gt; object is just a representation of a given DOM element and it'll be rendered to the real DOM in the future, as we now know.&lt;/p&gt;

&lt;p&gt;So the question is, how does Preact know either it is a complex property or HTML attribute if it passes all properties directly to the &lt;code&gt;vnode&lt;/code&gt;, that gets rendered in the end? For example, how does the event system work in this setup? &lt;br&gt;
Maybe the answer lies in the render phase? Let's give this guess a shot.&lt;/p&gt;

&lt;p&gt;There is a function, called &lt;code&gt;setProperty&lt;/code&gt;, which is responsible for setting a property value on a DOM node, as you may have gathered. This function is the main mechanism of setting properties to DOM nodes in Preact.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/preactjs/preact/blob/master/src/diff/props.js#L56"&gt;Source file on GitHub&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isSvg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;o&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So Preact actually checks whether the property name corresponds to some event and adds an event listener if it's the case. &lt;br&gt;
Such distinction allows Preact to deal with events passed through &lt;code&gt;onClick&lt;/code&gt;, &lt;code&gt;onInput&lt;/code&gt;, and other props like these, but at the same time allows to use standard HTML properties, like  &lt;code&gt;class&lt;/code&gt; instead of unique-to-JSX &lt;code&gt;className&lt;/code&gt;.&lt;br&gt;
But how does Preact handle user-defined custom props? The answer lies in the question itself.&lt;/p&gt;

&lt;p&gt;You see, we as a developers, may only pass custom properties to our own components. For example, let's define custom &lt;code&gt;UserDefinedComponent&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// UserDefinedComponent.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserDefinedComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;exampleFunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;brandText&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;exampleFunc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;brandText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UserDefinedComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And render it in the &lt;code&gt;App&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;UserDefinedComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./UserDefinedComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserDefinedComponent&lt;/span&gt; 
            &lt;span class="na"&gt;exampleFunc&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;brandText&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you may see, there is no way how &lt;code&gt;exampleFunc&lt;/code&gt; and &lt;code&gt;brandText&lt;/code&gt; would be passed to the real HTML elements. And even if you intentionally do this, the browser will just ignore unknown properties, Preact doesn't need to additionally validate them on its side.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But why does React use &lt;code&gt;camelCase&lt;/code&gt; property naming convention instead of HTML attribute names, anyway?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-last-question"&gt;
  &lt;/a&gt;
  The last question
&lt;/h2&gt;

&lt;p&gt;There is no clear answer to this question. We may only make a few guesses.&lt;/p&gt;

&lt;p&gt;Maybe, it's really just a convention, that was proposed when React wasn't event public.&lt;/p&gt;

&lt;p&gt;Or maybe, React developers want to match &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/className"&gt;the JavaScript API&lt;/a&gt; more closely, than HTML one. Because in JS the standard way to access &lt;code&gt;Element&lt;/code&gt; class property is &lt;code&gt;Element.className&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;classList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new-example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It doesn't really matter at this point why they've done so. What matters is, that we now understand all nitty-gritty details about it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#today-we-learned"&gt;
  &lt;/a&gt;
  Today we learned
&lt;/h3&gt;

&lt;p&gt;Let's sum up what we learned today.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The reason why React uses the &lt;code&gt;camelCase&lt;/code&gt; property is probably not one of these:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;class&lt;/code&gt; is a reserved keyword in JavaScript&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;camelCase&lt;/code&gt; properties can't be handled by JSX&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;camelCase&lt;/code&gt; properties mess up render function&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Preact uses standard HTML properties, because:

&lt;ul&gt;
&lt;li&gt;It aims to closely match the DOM specification&lt;/li&gt;
&lt;li&gt;It detects whether each prop should be set as a property or HTML attribute&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Digging into source code is more fun, than frightening 😄&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#im-looking-forward-to-similar-articles-what-should-i-do"&gt;
  &lt;/a&gt;
  I'm looking forward to similar articles, what should I do?
&lt;/h3&gt;

&lt;p&gt;First of all, if you &lt;em&gt;really&lt;/em&gt; like this post leave a comment or/and a reaction to let me know, that I am going in the right direction. Any constructive feedback, either positive or negative, will be welcomed 🙏&lt;/p&gt;

&lt;p&gt;If you want more content like this right now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You may check out my &lt;a href="https://dev.to/fromaline/series/16231"&gt;Deep dive into React codebase weekly series&lt;/a&gt;, where we take a thorough look at React source code.&lt;/li&gt;
&lt;li&gt;As I already mentioned, I have &lt;a href="https://dev.to/fromaline/hyperscript-the-hidden-language-of-react-3d1f"&gt;an article about obscured history behind JSX&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want more content like this next week:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow me on &lt;a href="https://dev.to/fromaline"&gt;dev.to&lt;/a&gt;, I am going to post an episode of the &lt;em&gt;Deep-dive-into-React-codebase series&lt;/em&gt; this Sunday (January 16) at 6:00 am UTC+0.&lt;/li&gt;
&lt;li&gt;Follow me on &lt;a href="https://blog.fromaline.com/"&gt;hashnode&lt;/a&gt;, I'll try to do my best to post an article every week or even make a special hashnode-exclusive series.&lt;/li&gt;
&lt;li&gt;Follow me on &lt;a href="https://twitter.com/fromaline"&gt;Twitter&lt;/a&gt;, if you want to know about every article I made and also read their sum-ups in threads.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Converting to Vite (Part 2)</title>
      <author>Matthew Foley</author>
      <pubDate>Thu, 13 Jan 2022 16:08:35 +0000</pubDate>
      <link>https://dev.to/opensauced/converting-to-vite-part-2-3li0</link>
      <guid>https://dev.to/opensauced/converting-to-vite-part-2-3li0</guid>
      <description>&lt;p&gt;In this post, I'm going to describe some of the snags that we encountered as we transitioned to Vite - at their best, snags become lessons!&lt;/p&gt;

&lt;p&gt;Open Sauced is a Progressive Web Application (PWA), and this includes the use of a Service Worker.  In my personal understanding, a Service Worker definition should be packaged as a standalone JavaScript file. When you look at how bundling is done in Vite, it will generate a &lt;code&gt;vendor.xyz.js&lt;/code&gt; file, an &lt;code&gt;index.xyz.js&lt;/code&gt; file, and otherwise pass through static assets in the &lt;code&gt;public&lt;/code&gt; directory as-is. Our webpack configuration on the other hand was configured to handle our &lt;code&gt;src/service-worker.js&lt;/code&gt; in a specific way. For that reason, we needed to move our &lt;code&gt;src/service-worker.js&lt;/code&gt; file to &lt;code&gt;public/service-worker.js&lt;/code&gt;, and move around the associations in our &lt;code&gt;src/index.js&lt;/code&gt; file. Another thing we had to learn about was the way Vite handles &lt;a href="https://vitejs.dev/guide/env-and-mode.html"&gt;environment variables&lt;/a&gt;.  Our application would look at whether the application was in production or development mode (and also whether it was being served locally) in order to decide whether to register the service worker. For a project using Webpack, you usually refer to these as &lt;code&gt;process.env.VARIABLE&lt;/code&gt; and the value is statically set in the bundling process. Vite does something a bit different, but instead you would need to refer to &lt;code&gt;import.meta.env.VARIABLE&lt;/code&gt; and only a handful of things are pre-set for you and otherwise you need to use a variable naming convention to have something statically included in the bundle. Fortunately, most of the variables we needed to use were included by default, so it was easy to get working (or so we thought). We tweaked and tweaked some more, and in the end, we just ended up using the &lt;a href="https://dev.to%20raw%20%60vite-plugin-pwa%60%20endraw%20"&gt;https://github.com/antfu/vite-plugin-pwa&lt;/a&gt; extension to handle everything, while moving most of our PWA manifest to &lt;code&gt;vite.config.ts&lt;/code&gt;. It's great to know how things work under the hood, but sometimes you just get better results with a plugin!&lt;/p&gt;

&lt;p&gt;Another thing that we ran into dealt with the fact that some libraries end up just a little bit differently in development bundling than in production bundling.  When developing, Vite takes advantage of ESM to let the browser effectively cache your dependencies, separated out into module files.  In production, everything is bundled into one vendor file. Libraries can export different compiled versions between these two situations. We were having a lot of trouble that we isolated down to a specific component, that in turn used the &lt;code&gt;react-markdown&lt;/code&gt; library. After reading through &lt;a href="https://github.com/vitejs/vite/issues/3592"&gt;issues&lt;/a&gt; for this one and its dependencies, we found that there was a circular reference in one of &lt;code&gt;react-markdown&lt;/code&gt;'s dependencies that only showed up in production bundles. &lt;/p&gt;

&lt;p&gt;The most straightforward fix for the circular reference was to update &lt;code&gt;react-markdown&lt;/code&gt; through one major revision, but this introduced a new snag.  In this major revision, &lt;code&gt;react-markdown&lt;/code&gt; changed to &lt;a href="https://github.com/remarkjs/react-markdown/blob/main/changelog.md#700---2021-08-13"&gt;ESM only&lt;/a&gt;, which would be fine for Vite, but not for our testing approach for &lt;code&gt;jest&lt;/code&gt; (other than experimentally, &lt;a href="https://jestjs.io/docs/ecmascript-modules"&gt;so I learned&lt;/a&gt;. &lt;a class="mentioned-user" href="https://dev.to/0vortex"&gt;@0vortex&lt;/a&gt; and I got some help from &lt;a class="mentioned-user" href="https://dev.to/jasonericdavis"&gt;@jasonericdavis&lt;/a&gt; on Discord to mock the &lt;code&gt;react-markdown&lt;/code&gt; component in Jest (bypassing the need for ESM support) as part of a &lt;a href="https://github.com/open-sauced/open-sauced/pull/1333"&gt;preparatory PR&lt;/a&gt;, and we got back on track.&lt;/p&gt;

&lt;p&gt;One takeaway that I had from this was the practice of stepping beyond running &lt;code&gt;vite dev&lt;/code&gt;, and running &lt;code&gt;vite build&lt;/code&gt; and &lt;code&gt;vite preview&lt;/code&gt; as well, in order to verify what would run in production. We use Netlify deploy previews in Open Sauced, and running both &lt;code&gt;vite build&lt;/code&gt; and &lt;code&gt;vite preview&lt;/code&gt; helps with reproducing production issues locally. We updated our &lt;code&gt;package.json&lt;/code&gt; to reflect these &lt;a href="https://vitejs.dev/guide/#command-line-interface"&gt;CLI commands&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I would love to hear from others what kind of experience they had switching from Webpack to Vite!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Cover image Photo by &lt;a href="https://unsplash.com/@william07?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;william william&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/container-ship?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;. I chose this one because I felt like &lt;a class="mentioned-user" href="https://dev.to/0vortex"&gt;@0vortex&lt;/a&gt; and I were the tugboats!&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

</description>
      <category>webpack</category>
      <category>vite</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Sending Text Messages with Javascript and Twilio</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 13 Jan 2022 15:46:10 +0000</pubDate>
      <link>https://dev.to/codesphere/sending-text-messages-with-javascript-and-twilio-2hpp</link>
      <guid>https://dev.to/codesphere/sending-text-messages-with-javascript-and-twilio-2hpp</guid>
      <description>&lt;p&gt;Twilio has become a favorite among devs looking to integrate messaging, calls, and streaming into their web and mobile apps. Their APIs are some of the most comprehensive and simple on the market, making it great for bootstrapping projects.&lt;/p&gt;

&lt;p&gt;In today’s tutorial, we’re going to be using Twilio’s messaging API to send text messages with Javascript. If you want us to cover any other Twilio services, let us know in the comments!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-setup"&gt;
  &lt;/a&gt;
  The Setup
&lt;/h3&gt;

&lt;p&gt;Before you start writing your NodeJS application, you need to set some things up&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install NodeJS on your computer.&lt;/li&gt;
&lt;li&gt;Before building your NodeJS application, you need to create a Twilio account to get data that will help you run your application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#to-set-up-your-twilio-account"&gt;
  &lt;/a&gt;
  To set up your Twilio account:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://www.twilio.com/try-twilio"&gt;https://www.twilio.com/try-twilio&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Enter the information required and accept the Terms of Service.&lt;/li&gt;
&lt;li&gt;Next, you will be asked a few questions by Twilio to aid you in using the platform. Answer them to finally reach your dashboard.&lt;/li&gt;
&lt;li&gt;Once you have signed up, the first thing you need to do is verify our email address.&lt;/li&gt;
&lt;li&gt;Add a phone number and verify that as well using OTP.&lt;/li&gt;
&lt;li&gt;Your dashboard will now display your “ACCOUNT SID” and “AUTH TOKEN”. Twilio hides “AUTH TOKEN” by default to keep your account safe from misuse.&lt;/li&gt;
&lt;li&gt;The dashboard will also display your account’s “TRIAL BALANCE”. This balance keeps decreasing as you keep using Twilio’s features.&lt;/li&gt;
&lt;li&gt;Twilio trial accounts only let you send texts to verified phone numbers. So you need to add any numbers and verify them using OTP before you can text them using the Twilio API.&lt;/li&gt;
&lt;li&gt;Generate a Twilio trial number. This number will act as the sender’s number inside your application.&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#the-application"&gt;
  &lt;/a&gt;
  The Application
&lt;/h3&gt;

&lt;p&gt;Follow the steps below to create your NodeJS application for sending texts using the Twilio API.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a folder with a Javascript file called &lt;code&gt;app.js&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Using the terminal, run &lt;code&gt;npm init&lt;/code&gt; inside the folder you just created. Accept all the defaults that pop on the terminal.&lt;/li&gt;
&lt;li&gt;Using the terminal again run the following command to install the Twilio dependency: &lt;code&gt;npm install twilio&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Our application will make use of the “ACCOUNT SID” and the “AUTH TOKEN” you received when you created the Twilio account. You can directly copy those inside your application but that’s not secure, hence not recommended. We will make use of JavaScript environment variables which will grab the values from a file for local use.&lt;/li&gt;
&lt;li&gt;To make use of environment variables you need to install a package called dotenv by running the following command in the terminal: &lt;code&gt;npm install dotenv&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Now create a file named .env inside your project folder. Add your Twilio “ACCOUNT SID” and “AUTH TOKEN” to this file as shown below
TWILIO_ACCOUNT_SID=
TWILIO_AUTH_TOKEN=
Note: Never share your account sid or auth token with anyone.&lt;/li&gt;
&lt;li&gt;We’ll then invoke the Twilio API like so&lt;/li&gt;
&lt;/ol&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;There you have it! When you run this javascript file (with ‘node app.js’) you should get a message on the number mentioned in the “to” field. Since this is a trial account your message will have “Sent from your Twilio trial account” prepended to it. Also, as mentioned before, you can only send texts to verified mobile numbers from a trial account. If you try to send a text to an unverified number the Twilio API will generate an error message. Every text you send will reduce the trial balance in your Twilio account.&lt;/p&gt;




&lt;p&gt;Well, you did it. You just created a basic application using NodeJS with Twilio API to send texts. When you are ready to show off your web app to the world, deploy it on &lt;a href="https://link.codesphere.com/HR"&gt;Codesphere&lt;/a&gt;, the first bottle-neck free cloud platform.&lt;/p&gt;

&lt;p&gt;Let us know in the comments what you plan to build using the Twilio API!&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>a flying quadcopter in three.js</title>
      <author>Roman Guivan</author>
      <pubDate>Thu, 13 Jan 2022 15:43:33 +0000</pubDate>
      <link>https://dev.to/roman_guivan_17680f142e28/a-flying-quadcopter-in-threejs-10ha</link>
      <guid>https://dev.to/roman_guivan_17680f142e28/a-flying-quadcopter-in-threejs-10ha</guid>
      <description>&lt;p&gt;What's up &lt;strong&gt;HACKERS&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;I've gotten into flying fpv drones recently &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qUN-754-oms"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;em&gt;my very first cute DVRs montage here&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So i got curious if i could quickly put something that resembles flying a quad, in browser, myself. &lt;/p&gt;

&lt;p&gt;First i kinda hoped THREE.js just has QUADCOPTER CAMERA CONTROLS in &lt;code&gt;/examples/&lt;/code&gt; but no chance :( &lt;/p&gt;

&lt;p&gt;Don't get me wrong, there's a whole ton of good quadcopter simulators &lt;a href="https://www.liftoff-game.com/"&gt;Liftoff being my favourite&lt;/a&gt; the journey is the reward tho, so if you have a similar itch or just curious - you're welcome to this insane journey of mine  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#work-in-progress-demo-video-here"&gt;
  &lt;/a&gt;
  WORK IN PROGRESS DEMO VIDEO HERE
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9gAUaamdoeQ"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#things-i-think-ill-need"&gt;
  &lt;/a&gt;
  Things i think i'll need
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;renderer: Gotta be THREE.js This (and unity) are all i know&lt;/li&gt;
&lt;li&gt;3d physics engine: &lt;a href="https://schteppe.github.io/cannon.js/"&gt;Cannon.js&lt;/a&gt; and &lt;a href="https://github.com/kripken/ammo.js/"&gt;Ammo.js&lt;/a&gt; seem pretty inactive in recent years. Perhaps the boys just GOT IT DONE, and it's perfect like that. I don't know. In my search for a "more recent" development i have picked &lt;a href="https://github.com/lo-th/Oimo.js/"&gt;Oimo.js&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-very-highlevel-architecture-of-this-whole-thing"&gt;
  &lt;/a&gt;
  The very high-level architecture of this whole thing
&lt;/h3&gt;

&lt;p&gt;If you have read my best-seller "match three game tutorial" series, you know there's an update() loop for rendering the graphics. With physics engine we would essentially have two separate update loops: loop one would update rigid body physics calculations, loop two would just display them as meshes on screen (duh) &lt;/p&gt;

&lt;p&gt;Upforce of fans, tilting - all gonna become applied forces in physics engine, yaw is just angular velocity on OY for example.&lt;/p&gt;

&lt;p&gt;Oh, and we need to implement controls. Luckily for me &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API"&gt;gamepad api&lt;/a&gt; also applies to any RC radio you could connect to a PC for playing a sim, so my &lt;a href="https://betafpv.com/products/literadio-2-se-radio-transmitter"&gt;&lt;br&gt;
LiteRadio 2 SE Radio&lt;/a&gt; works (as it should) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-ive-put-together-in-a-weekend"&gt;
  &lt;/a&gt;
  What i've put together in a weekend
&lt;/h3&gt;

&lt;p&gt;Is available &lt;a href="https://three-drone.netlify.app/"&gt;here&lt;/a&gt; Keyboard controls are difficult to wrestle with, and your gamepad axis most probably gonna be inverted (my xbox ones are) so ehh.. GOOD LUCK i guess?  Also: REMEMBER THE VIDEO, remember HOW GOOD I WAS? Exactly. It's possible, just git good or something. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#things-id-like-to-do-next"&gt;
  &lt;/a&gt;
  Things i'd like to do next:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Pitch and roll act like some super-stable mode right now, i'd like them to be more like AIR/ACRO, i.e. rotate the quad. Thing is - with angular velocities on Z and X axis it just gets real weird, so i'm still kinda working on it&lt;/li&gt;
&lt;li&gt;sounds would be good, duh &lt;/li&gt;
&lt;li&gt;forking &lt;a href="https://noclip.website/"&gt;https://noclip.website/&lt;/a&gt; so i can fly around GTA III map, and GTA: SA map, and .. DARK SOULS map (if i want to) &lt;/li&gt;
&lt;li&gt;getting source somewhere public &lt;/li&gt;
&lt;li&gt;writing one more of these once at least one of the steps is done &lt;/li&gt;
&lt;li&gt;controls settings so you can invert any axis you want for your radio/gamepad &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-thing-im-most-proud-of"&gt;
  &lt;/a&gt;
  The thing i'm most proud of
&lt;/h3&gt;

&lt;p&gt;The propellers are spinning, man, Looks awesome. More throttle - MORE SPIN, gee soo cool&lt;/p&gt;

&lt;p&gt;Hit me up if you have any questions, ANY questions, i mean it! I'll try to answer them all.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;for example&lt;/em&gt;: &lt;/p&gt;

&lt;p&gt;Q: HEY ROMAN, WHATS UP WITH &lt;a href="https://store.steampowered.com/app/1771240/Piano_Rocker/?beta=1"&gt;PIANO ROCKER&lt;/a&gt;?&lt;br&gt;
A: SOON&lt;/p&gt;

</description>
      <category>fpv</category>
      <category>three</category>
      <category>javascript</category>
      <category>drone</category>
    </item>
    <item>
      <title>MongoDB Submission Post Trader Chart</title>
      <author>Joshua Evuetapha</author>
      <pubDate>Thu, 13 Jan 2022 15:33:49 +0000</pubDate>
      <link>https://dev.to/joshuajee/mongodb-submission-post-trader-chart-18nb</link>
      <guid>https://dev.to/joshuajee/mongodb-submission-post-trader-chart-18nb</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;This is a charting software for doing technical analysis on the Forex, Crypto and Stock market etc. It comes with Trend indicators like the Moving Average, Bollinger Band, Ichimoku Kinkō Hyō. It also comes with oscillators like the Relative strength index, Moving Average Convergence Divergence and Average True Range.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Prime Time: Stock Analysis&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;

&lt;p&gt;Checkout the repo for source code &lt;br&gt;
&lt;a href="https://github.com/Joshuajee/Trader-Chart"&gt;https://github.com/Joshuajee/Trader-Chart&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://trader-chart.herokuapp.com/"&gt;Click Here&lt;/a&gt; to view the app&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;All data stored in MongoDB Atlas &lt;code&gt;Timeseries&lt;/code&gt; collection for storing the data for each asset.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#built-with"&gt;
  &lt;/a&gt;
  Built With
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mongodb.com/"&gt;Mongodb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/"&gt;Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://formidable.com/open-source/victory/"&gt;Victory Chart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  DEMO
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/w-agp1JobQU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://trader-chart.herokuapp.com/"&gt;Click Here&lt;/a&gt; for Live Demo&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FBtqOPo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vepta02a3pc0urd9jckz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FBtqOPo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vepta02a3pc0urd9jckz.png" alt="EURUSD CHART" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_7-n_Czj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46t5eac6kjj1yqd9tu7s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_7-n_Czj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46t5eac6kjj1yqd9tu7s.png" alt="Indicator Modal" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0RHPImwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yim6vvlxl2dmj14b9y0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0RHPImwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yim6vvlxl2dmj14b9y0s.png" alt="Ichimoku Modal" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZOt7a1U_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0emn3t170jvvocwfxpsv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZOt7a1U_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0emn3t170jvvocwfxpsv.png" alt="Color Picker" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_loRp6KG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mglknv8z59f28mutt7az.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_loRp6KG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mglknv8z59f28mutt7az.png" alt="IChimoku Cloud" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ADXn6A5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/158hkpcucrquwf0w07l3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ADXn6A5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/158hkpcucrquwf0w07l3.png" alt="Oscilators" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--llmsc1nT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5bcyv79jgj9tzvq5vjd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--llmsc1nT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5bcyv79jgj9tzvq5vjd.png" alt="Bollinger Band and Average True Range" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>Conceito de Merge — Git e Github</title>
      <author>Luiz Eduardo Prado Veltroni</author>
      <pubDate>Thu, 13 Jan 2022 14:41:43 +0000</pubDate>
      <link>https://dev.to/eduardoopv/conceito-de-merge-git-e-github-4j0g</link>
      <guid>https://dev.to/eduardoopv/conceito-de-merge-git-e-github-4j0g</guid>
      <description>&lt;p&gt;Após conhecermos a tão famosa &lt;strong&gt;Branch&lt;/strong&gt; que tem como propósito &lt;em&gt;dividir&lt;/em&gt; a linha original do desenvolvimento do projeto, precisamos &lt;em&gt;"trazer"&lt;/em&gt; de volta para a branch main/master, dei uma breve explicação de como fazer isso em &lt;em&gt;&lt;a href="https://dev.to/eduardoopv/conceito-de-branch-git-e-github-2bfe"&gt;Conceito de branch&lt;/a&gt;&lt;/em&gt;, porém chegou a hora de se aprofundar no &lt;strong&gt;merge&lt;/strong&gt; e resolver os possíveis conflitos que irão aparecer(uma hora ou outra).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#merge"&gt;
  &lt;/a&gt;
  Merge
&lt;/h2&gt;

&lt;p&gt;O &lt;a href="https://git-scm.com/book/pt-br/v2/Branches-no-Git-O-b%C3%A1sico-de-Ramifica%C3%A7%C3%A3o-Branch-e-Mesclagem-Merge"&gt;merge&lt;/a&gt;(mesclagem) é o jeito do Git de pegar duas branchs e unificar em apenas um histórico. O comando &lt;code&gt;git merge&lt;/code&gt; permite que você pegue as linhas de desenvolvimento independentes criadas pelo &lt;code&gt;git branch&lt;/code&gt; e junta elas em apenas uma ramificação.&lt;/p&gt;

&lt;p&gt;É de extrema importância ter algo bem claro na hora de realizar um merge, sempre a branch que você está &lt;strong&gt;(HEAD)&lt;/strong&gt; vai ser a que vai "receber" a branch, sendo atualizado para refletir a mesclagem, a branch alvo não sofre nenhum tipo de alteração.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge&lt;/code&gt; é usado sempre depois do &lt;code&gt;git checkout&lt;/code&gt; para selecionar o branch atual que irá receber e com o &lt;code&gt;git branch -d&lt;/code&gt; para excluir o branch alvo obsoleto.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EM46LrJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0tg9kcg9dlp2vuy5hbd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EM46LrJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0tg9kcg9dlp2vuy5hbd.jpg" alt="Ilustração de varias ramificações" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#merge-na-pr%C3%A1tica"&gt;
  &lt;/a&gt;
  Merge na prática
&lt;/h2&gt;

&lt;p&gt;Vamos utilizar um exemplo prático, digamos que você desenvolveu um &lt;em&gt;Header&lt;/em&gt; bem básico representado pela branch &lt;em&gt;feat/header (Nomenclatura tirada do &lt;a href="https://www.atlassian.com/br/git/tutorials/comparing-workflows/gitflow-workflow"&gt;Git Flow&lt;/a&gt;, explicarei futuramente)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2BsUGL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxymop9un20l1zge3mrt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2BsUGL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxymop9un20l1zge3mrt.png" alt="Branch criada com o header" width="851" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depois de ter criado uma branch com &lt;code&gt;git checkcout -b feat/header&lt;/code&gt; &lt;em&gt;(Lembrando que a flag -b do checkout cria uma branch e já move para ela)&lt;/em&gt;, realizamos as criações necessárias e commitamos o arquivo &lt;code&gt;index.html&lt;/code&gt; com &lt;code&gt;git commit -am "feat: header"&lt;/code&gt;&lt;em&gt;(Lembrando que a flag -am adiciona os arquivos e já realiza o commit)&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Agora o que precisamos fazer para juntar essa nova feature na branch principal, precisamos ir para a branch receptora, sempre atento para onde o HEAD está apontado, e realizamos o merge. Uma vez que a branch ficou obsoleta podemos excluir ela.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGG7axpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv50fa19tamwks65obow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGG7axpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv50fa19tamwks65obow.png" alt="Output após o comando merge" width="807" height="214"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#resolvendo-conflitos"&gt;
  &lt;/a&gt;
  Resolvendo Conflitos
&lt;/h2&gt;

&lt;p&gt;Durante o processo de criação e branchs e a junção com o merge, é possível que mais de um desenvolvedor edite a mesma linha de código, com isso o Git gera um conflito, por ter dois commits o Git não sabe qual utilizar, e não consegue resolver esse problema sozinho, é necessário que o usuário decida qual é o correto.&lt;/p&gt;

&lt;p&gt;Digamos que você ficou responsável por editar um link do header e um colega recebeu uma task para alterar a logo do footer, porém acabou adicionando alguns caracteres sem querer no link que você está alterando.&lt;/p&gt;

&lt;p&gt;Primeiro você cria uma nova branch de correção e realiza a alteração, cria um commit e mescla com a branch master, durante esse processo um colega adicionou o caractere acidental e realizou um commit na master.&lt;/p&gt;

&lt;p&gt;Nossa alteração:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hAKhZjju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tf9bhrnpy7kpsx4fjah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hAKhZjju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tf9bhrnpy7kpsx4fjah.png" alt="Alterações no Index.html" width="803" height="213"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Acidente: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--85wmJfTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ys7bgr54ci700kzdsh18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--85wmJfTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ys7bgr54ci700kzdsh18.png" alt="Index.html com as alterações acidentais" width="361" height="194"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Você finalizou todas as alterações e da um &lt;code&gt;git checkout master&lt;/code&gt; que será a branch receptora, e realiza o &lt;code&gt;git merge fix/header&lt;/code&gt;, e acaba vendo um output no terminal &lt;em&gt;CONFLICT&lt;/em&gt;, e repara que algo mudou no editor de texto (&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Terminal: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DbGktyVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipvy4mcdaf78ezogm36m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DbGktyVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipvy4mcdaf78ezogm36m.png" alt="Output terminal conflict" width="489" height="132"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visual Studio Code:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0h6mI0j---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygsgjuxkkrgzwzu63p7s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0h6mI0j---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygsgjuxkkrgzwzu63p7s.png" alt="Vistual Studio Code resolvendo conflito" width="702" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reparamos que ele adicionou alguns caracteres:&lt;br&gt;
&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; Branch receptora (HEAD)&lt;br&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; Branch de mesclagem (fix/header)&lt;br&gt;
&lt;code&gt;=======&lt;/code&gt; Separa as branchs, o de cima represente a branch recepctora e de baixo a de mesclagem.&lt;/p&gt;

&lt;p&gt;E podemos ver que existe um menu (clicavel) acima do conflito, nele existe algumas opções rápidas que podemos realizar, as mais importantes são:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Accept Current Change&lt;/code&gt;: Irá aceitar a branch receptora, nesse caso ele iria manter os caracteres acidentais.&lt;br&gt;
&lt;code&gt;Accept Incoming Change&lt;/code&gt;: Irá aceitar a alteração realizada no header, nesse caso seria "Conheça nossa empresa"&lt;br&gt;
&lt;code&gt;Accpet Both Changes&lt;/code&gt;: Ele aceita as duas modificações, criando então duas linhas, uma com os caracteres e outra com as alterações.&lt;/p&gt;

&lt;p&gt;No nosso caso queremos aceitar apenas o &lt;code&gt;Accept Incoming Change&lt;/code&gt; para manter as alterações que realizamos na branch &lt;code&gt;fix/header&lt;/code&gt;, podemos ver que nada muda, por que os arquivos conflitantes agora estão como &lt;em&gt;"&lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging"&gt;Unmerged&lt;/a&gt; patch"&lt;/em&gt;, precisamos adicionar ele no próximo commit &lt;code&gt;git add .&lt;/code&gt; e criar um commit de resolução &lt;code&gt;git commit -m "resolve conflitos no header"&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xHQEs1NX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/klwqxajl58krft2qmb0m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xHQEs1NX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/klwqxajl58krft2qmb0m.png" alt="Terminal de commit do conflito" width="519" height="450"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;E pronto temos o nosso conflito mais comum de acontecer resolvido e já podemos excluir a branch obsoleta das modificações.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>programming</category>
      <category>braziliandevs</category>
    </item>
  </channel>
</rss>
