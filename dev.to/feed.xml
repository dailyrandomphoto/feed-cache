<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>GraphQL Editor - the journey from  initial release to version 5.0</title>
      <author>Tomek Poniatowicz</author>
      <pubDate>Tue, 07 Dec 2021 11:57:24 +0000</pubDate>
      <link>https://dev.to/graphqleditor/graphql-editor-the-journey-from-initial-release-to-version-50-8k1</link>
      <guid>https://dev.to/graphqleditor/graphql-editor-the-journey-from-initial-release-to-version-50-8k1</guid>
      <description>&lt;p&gt;From the very beginning of our adventure with GraphQL, we were impressed by how great its community is. The amount of content, libraries and great tools generated by GraphQL users amazed us from the very start. The more time we spent working with GraphQL the more things we saw that could be improved to make working with it easier and better. We also knew that we wanted to give something back to its wonderful community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-origins"&gt;
  &lt;/a&gt;
  The origins
&lt;/h2&gt;

&lt;p&gt;Three years ago we were working on quite a schema with a lot of complicated relationships, then a thought occurred to us:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"It would be nice to be able to visualize it well enough to understand all the connections."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes there were several solutions on the market that would let us do that, but hey everyone knows how it works. The question always arises, why not do it differently, better, and most importantly in our own way. A few days after saying:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"OK, lets do it"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;came&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"What if we could build a GraphQL scheme out of visual blocks?"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and that's how it all started. We begun with the PoC version, which included just these two functionalities, namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GraphQL schema visualization,&lt;/li&gt;
&lt;li&gt;the ability to build it using viusal elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qLvDxpDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxf3ptvt6s4i3jml1etq.png" alt="Old GraphQL Editor UI" width="656" height="464"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;The very first version of GraphQL Editor from 2018&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Our project has been very warmly received by the GraphQL community which resulted in quickly amassing &lt;a href="https://github.com/graphql-editor"&gt;3 000 stars on GitHub&lt;/a&gt;. Users were not only happy to use these two simple features but also started suggesting some cool new ones. Users were not only happy to use these two simple features but also started suggesting some cool features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new-in-graphql-editor-50"&gt;
  &lt;/a&gt;
  What's new in GraphQL Editor 5.0
&lt;/h2&gt;

&lt;p&gt;When we started we had a roadmap in mind which we tried to stick to, as much as it was possible. But with all the additional feedback we also kept adding features suggested by the community, which after more than 2 years has led us to the point we are at now, namely the release of &lt;strong&gt;&lt;a href="https://graphqleditor.com/"&gt;GraphQL Editor 5.0&lt;/a&gt;&lt;/strong&gt;.  &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sLDuHRMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q5z9y3nsul6i9v9f1eu.png" alt="New GraphQL Editor UI" width="880" height="550"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Many graph improvements &amp;amp; various view modes&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;So once again we would like to thank all our users for their valuable feedback, including those that were critical, it all really helped us improve. So without further ado, let's get into the new features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#microservices"&gt;
  &lt;/a&gt;
  Microservices
&lt;/h3&gt;

&lt;p&gt;It's the most exciting as well as the most requested feature. What's even more satisfying about it finally being released, is that, we've been trying to figure out how to tackle this one since the first release of GraphgQL Editor. &lt;strong&gt;GraphQL Microservices&lt;/strong&gt; allow users instantly deploy their GraphQL backend prototypes using JavaScript or TypeScript. What's worth mentioning is microservices is powered by our open-source library called Stucco.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/graphql-editor"&gt;Stucco&lt;/a&gt; is a backend engine for our microservices. Its main goal is to keep you in charge of your infrastructure decisions. No risk of vendor lock-in, no worries. With Stucco you can use TypeScript, JavaScript or Golang to create GraphQL backends &amp;amp; deploy them easily using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GraphQL Editor Shared worker&lt;/li&gt;
&lt;li&gt;Local environment&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Kubernetes &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can deploy microservices directly from our built-in Live Editor (similar to those you may know from Git-based platforms), but the recommended way is to do it using &lt;a href="https://github.com/graphql-editor/graphql-editor-cli"&gt;graphql-editor-cli&lt;/a&gt;. Although microservices are great for testing and development purposes, we do not recommend using them on production as they run on very small machines with rate limit of 200 requests per minute &amp;amp; 1 000 000 requests per month. Additionally this feature is very much work-in-progress and is being released mostly because we need live testers to iterate on it and improve it.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9JXkJFKm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2o3u87fypvkix4q6t3ru.png" alt="Microservices" width="880" height="550"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;With Microservices you can deploy NodeJS GraphQL backends using JavaScript or TypeScript&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#jamstack-engine"&gt;
  &lt;/a&gt;
  JAMStack Engine
&lt;/h3&gt;

&lt;p&gt;Although JAMStack was introduced a couple versions back, in this one it received a significant update. We have added TypeScript and the most popular JS library for building user interfaces support - ReactJS. Among other notable features you can find:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;better ES modules support&lt;/strong&gt; - j just give our Live Service a CDN URL &amp;amp; it will fetch all types from your server and also look for typings,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;relative ES modules imports&lt;/strong&gt; -  now you can have user relative ES module imports inside our online code editor,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;deployment&lt;/strong&gt; - built-in static page deployment feature to easily show off your work to your team or a wider audience.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--61dxKfns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqydfal3to1z1cysjzt1.png" alt="JAMStack engine" width="880" height="550"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;JAMStack with ReactJS, TS support &amp;amp; easy static deployment&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#graphql-cloud"&gt;
  &lt;/a&gt;
  GraphQL Cloud
&lt;/h3&gt;

&lt;p&gt;We want GraphQL Editor to become a self-sufficient IDE for GraphQL based project development. Following this goal we’re adding more and more "responsibilities" for our tools. Now you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create your own queries with ease,&lt;/li&gt;
&lt;li&gt;preview easily using built-in GraphiQL,&lt;/li&gt;
&lt;li&gt;save &amp;amp; access your work anytime you need from any device.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have also added a proxy to support every GraphQL URL &amp;amp; CORS issues which frequently appear during development.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3k-A1iO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohajo2qv4e08amw7l1yy.png" alt="GraphQL Cloud" width="880" height="550"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;GraphQL Cloud offers GraphiQL-like queries preview, configurable mock backend &amp;amp; CORS support&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#last-but-not-least"&gt;
  &lt;/a&gt;
  Last but not least
&lt;/h2&gt;

&lt;p&gt;Aside from core features we have also been working on some quality of life improvements like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Graph improvements&lt;/strong&gt; - the graph module has been significantly improved:

&lt;ul&gt;
&lt;li&gt;node &amp;amp; fields creation is now much faster thanks to keyboard support,&lt;/li&gt;
&lt;li&gt;relation view includes all scalar fields,&lt;/li&gt;
&lt;li&gt;selected node state persists between view,&lt;/li&gt;
&lt;li&gt;code editor view can be toggled anytime now,&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Spotlight menu (CTRL/CMD + K)&lt;/strong&gt; - spotlight menu added for easier navigation,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Color Themes&lt;/strong&gt; - we have added 4 new color themes,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learning center&lt;/strong&gt; - from now on every start, you will be welcomed with recent projects and a learning center to level up your editor skills,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;as well as tons of bug fixes &amp;amp; minor UI improvements.&lt;/p&gt;




&lt;p&gt;So that's basically what we've been working on for the last 12 months. I must say it feels great to be able to finally share all these new features with a broader audience (thanks David!). If your are using GraphQL already I would love to hear your feedback, if not I hope GraphQL Editor would make working with it even more efficient as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If once you start down the GraphQL path, forever will it &lt;br&gt;
dominate your destiny.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#speed-up-your-graphql-api-development"&gt;
  &lt;/a&gt;
  Speed up your GraphQL API development
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphQL Editor&lt;/strong&gt; is a supportive tool for both advanced GraphQL users as well as those taking their first steps with GraphQL APIs. Our all-in-one development environment for GraphQL will help you build, manage &amp;amp; deploy your GraphQL API much faster. &lt;strong&gt;&lt;a href="https://graphqleditor.com"&gt;Try GraphQL Editor for free!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://graphqleditor.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zoIKUCL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ur7var8ljvdb5tzhyjz9.png" alt="Try GraphQL Editor" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>webdev</category>
      <category>programming</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Chrome DevTools 101 (Parte 1)</title>
      <author>gonzalohk</author>
      <pubDate>Tue, 07 Dec 2021 11:55:09 +0000</pubDate>
      <link>https://dev.to/gonzalohk/chrome-devtools-101-parte-1-585f</link>
      <guid>https://dev.to/gonzalohk/chrome-devtools-101-parte-1-585f</guid>
      <description>&lt;h4&gt;
  &lt;a href="#qu%C3%A9-es-debugging"&gt;
  &lt;/a&gt;
  ¿Qué es Debugging?
&lt;/h4&gt;

&lt;p&gt;Debugging es el &lt;strong&gt;proceso de encontrar y resolver defectos dentro de un programa&lt;/strong&gt; (software) que impide su correcto funcionamiento. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#qu%C3%A9-es-el-chrome-devtools"&gt;
  &lt;/a&gt;
  ¿Qué es el Chrome DevTools?
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Es un conjunto de herramientas de creación y depuración de sitios web integrado en Google Chrome&lt;/strong&gt;. Es decir, son herramientas que permiten llevar a cabo pruebas, análisis, monitoreo y optimización de proyectos de desarrollo.&lt;/p&gt;

&lt;p&gt;Por lo general, se utiliza Chrome Devtools para inspeccionar elementos HTML, realizar cambios al CSS, visualizar la consola, monitorear peticiones y agregar breakpoints para depurar el código. Sin embargo, Chrome Devtools ofrece aún más herramientas para realizar tareas de depuración. &lt;/p&gt;

&lt;p&gt;Chrome Devtools viene integrado al navegador, se abre presionando:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;F12 o ⌘ + Shift + I en Mac
&lt;/li&gt;
&lt;li&gt;F12 o Ctrl + Shift + I en Windows y Linux.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Así pues, algunas de estas herramientas y características del Chrome Devtools no son muy conocidas, por lo que podríamos exponer algunas a continuación.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-command-menu"&gt;
  &lt;/a&gt;
  The Command Menu
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Ctrl + Shift + P&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Es también llamado menú de comandos, proporciona una forma rápida de navegar por la interfaz de usuario de Chrome DevTools. En efecto, no permite tener acceso rápido a casi cualquier herramienta y configuración.&lt;/p&gt;

&lt;p&gt;Por ejemplo, podemos cambiar la apariencia e ir al modo dark simplemente ejecutando&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch to dark theme&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--719MTbtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfxhc8w891q1vp0x87y5.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--719MTbtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfxhc8w891q1vp0x87y5.gif%3Fclasses%3Dcenter-block" alt="Switch Dark Mode" width="795" height="543"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por otro lado, sacar una captura completa o parcial de la pantalla podría ser realizada con alguno de estos comandos. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Capture area screenshot&lt;/li&gt;
&lt;li&gt;Capture full size screenshot&lt;/li&gt;
&lt;li&gt;Capture node screenshot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qTRwTwR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by73ogaf538c727dd3d6.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qTRwTwR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by73ogaf538c727dd3d6.gif%3Fclasses%3Dcenter-block" alt="Capture Screenshot" width="869" height="616"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#logpoints"&gt;
  &lt;/a&gt;
  Logpoints
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Source -&amp;gt; Right Click # line code -&amp;gt; Add logpoint …&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Agregar mensajes dentro del código para visualizar el valor de ciertas variables en la consola o identificar flujos es una práctica común, que no está mal, pero resulta ser una mala práctica cuando se abusa de ella. &lt;/p&gt;

&lt;p&gt;En efecto, para evitar escribir manualmente múltiples console.logs dentro de el código se tiene el logpoint. Esta permite inyectar un mensaje console.log en el código fuente en líneas específicas para incluir información importante a ser mostrada en consola. Es decir, se marca de forma similar a un breakpoint, se agrega un mensaje y al recorrer el flujo donde fue marcado este se muestran en la consola sin pausas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rv90syiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmkblcuxdijmd0p232si.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rv90syiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmkblcuxdijmd0p232si.gif%3Fclasses%3Dcenter-block" alt="Logpoints" width="858" height="675"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conditional-breakpoints"&gt;
  &lt;/a&gt;
  Conditional Breakpoints
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Source -&amp;gt; Right Click # line code -&amp;gt; Add Conditional Breakpoint …&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Utilizar Breakpoints para detener la ejecución e inspeccionar paso a paso del código fuente es útil para validar la lógica programada, visualizar variables y localizar errores. No obstante, este proceso podría ser moroso debido a la cantidad de variables y flujos que se suelen tener.&lt;/p&gt;

&lt;p&gt;En tal sentido, a menudo es preciso detenerse en un lugar del programa solo bajo ciertas condiciones o comportamientos, ahí es cuando los Breakpoints Condicionales son una forma más efectiva de depurar el código. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uMKZ7NpO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4xx2aygfb4x2om3io2d.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uMKZ7NpO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4xx2aygfb4x2om3io2d.gif%3Fclasses%3Dcenter-block" alt="Conditional Breakpoints" width="859" height="516"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#network-conditions"&gt;
  &lt;/a&gt;
  Network Conditions
&lt;/h4&gt;

&lt;p&gt;_፧ -&amp;gt; More tools -&amp;gt;  Network Conditions _&lt;/p&gt;

&lt;p&gt;Las pruebas de software se realizan en todo el proceso de desarrollo, es decir pruebas funcionales como no funcionales son ejecutadas continuamente. Sin embargo, cometemos el error de hacer pruebas en condiciones ideales, ignorando la potencia de nuestros equipos/dispositivos que generalmente tiene una buena conexión a internet por encima del usuario final promedio. &lt;/p&gt;

&lt;p&gt;Chrome DevTools permite simular condiciones no ideales con una conexión a internet con menor ancho de banda o incluso un ancho de banda personalizado. Así mismo, editar el User Agent y deshabilitar el caché si fuera requerido.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eezojPqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqhk67er188ci205vvk4.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eezojPqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqhk67er188ci205vvk4.gif%3Fclasses%3Dcenter-block" alt="Network Conditions" width="859" height="636"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#device-toolbar"&gt;
  &lt;/a&gt;
  Device Toolbar
&lt;/h4&gt;

&lt;p&gt;_Ctrl + shift + m _&lt;/p&gt;

&lt;p&gt;El desarrollo de aplicaciones modernas tiene como uno de sus principios ser Mobile First, lo que significa que se debería trabajar primero en la versión móvil y posteriormente en la de escritorio. &lt;/p&gt;

&lt;p&gt;Chrome Devtools permite editar el tamaño del Viewport o seleccionar algún modelo predefinido. También simular un dispositivo móvil de gama media o baja, ambas funciones tienen el fin de probar y validar el las vistas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HCkJestS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqb6mtl6x3nfguwayg8l.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HCkJestS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqb6mtl6x3nfguwayg8l.gif%3Fclasses%3Dcenter-block" alt="Device Toolbar " width="859" height="718"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#devtools-as-editor"&gt;
  &lt;/a&gt;
  Devtools as editor
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Sources -&amp;gt; File System -&amp;gt; Add folder to workspace&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Al inspeccionar los elementos de nuestro proyecto es posible manipular el código fuente con el fin probar cambios inmediatamente y visualizarlos. Sin embargo, estos cambios son temporales, durando solo hasta que se refresque el navegador &lt;/p&gt;

&lt;p&gt;Chrome Devtools puede asociarse directamente al código fuente en nuestra máquina local agregando un Workspace en el File System. En efecto, cualquier cambio que se realice mediante las Devtools se verá reflejado en los archivos del código fuente.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sKzgh9Aa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ym5zarzb2zjn6tnhqejl.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sKzgh9Aa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ym5zarzb2zjn6tnhqejl.gif%3Fclasses%3Dcenter-block" alt="Devtools as editor" width="871" height="625"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#coverage"&gt;
  &lt;/a&gt;
  Coverage
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;፧ -&amp;gt; More tools -&amp;gt;  Coverage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Cuando se trabaja en un proyecto antiguo probablemente Legacy que fue creciendo con el tiempo resulta fácil acumular código muerto. Es decir, probablemente exista código que ya no es utilizado ocupando espacio que debería ser eliminado, pero identificar este código en desuso resulta complejo en proyectos consolidados.&lt;/p&gt;

&lt;p&gt;Chrome Devtools tiene una herramienta denominada coverage que permite ayudarnos a identificar el código no utilizado de manera automática, pero debe ser tratada con cuidado porque podría mostrar falsos positivos para ciertos flujos. Es así que, una vez ejecutada la herramienta, está marca con verde el código en uso y en rojo el código que probablemente no es usado.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qR1CkPeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u028lgk97j7dbghqjq0k.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qR1CkPeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u028lgk97j7dbghqjq0k.gif%3Fclasses%3Dcenter-block" alt="Coverage" width="860" height="569"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pretty-print"&gt;
  &lt;/a&gt;
  Pretty Print
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Source -&amp;gt; Open file -&amp;gt; { }&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Agregar breakpoints en el código de nuestros proyectos para hacer la depuración en un ambiente de desarrollo es una práctica fundamental. Sin embargo, en un ambiente de producción por lo general el código fuente está minificado. En efecto, esto nos impide agregar breakpoints para hacer la depuración y posterior análisis.&lt;/p&gt;

&lt;p&gt;Chrome devtools tiene un funcionalidad denominada Pretty Print que es representada por “{ }” encargada de revertir el proceso de minificado, no en su totalidad, pero resultado en código legible, separado por saltos de línea y tabulación. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NRQMLc_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2rpaqdv8eusw9xdz58p.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NRQMLc_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2rpaqdv8eusw9xdz58p.gif%3Fclasses%3Dcenter-block" alt="Pretty Print" width="858" height="675"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#override-geolocation"&gt;
  &lt;/a&gt;
  Override Geolocation
&lt;/h4&gt;

&lt;p&gt;_፧ -&amp;gt; More tools -&amp;gt;  Sensors _&lt;/p&gt;

&lt;p&gt;Desarrollar aplicaciones para usuarios en todo el mundo y más aún personalizar estas de acuerdo a la región en que se encuentran podría mejorar de sobremanera la experiencia usando la aplicación. Es decir, mostrar mapas, divisas y unidades de forma personalizada se consideran una gran ventaja.&lt;/p&gt;

&lt;p&gt;Para realizar pruebas de geolocalización existen diversas maneras, pero Chrome Devtools   permite sobreescribir la localización de forma más simple con alguna ciudad en particular o mejor aun pudiendo establecer cualquier ubicación deseada mediante coordenadas geográficas.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EGY25T4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wj4qtu4bl3bur9snilcd.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EGY25T4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wj4qtu4bl3bur9snilcd.gif%3Fclasses%3Dcenter-block" alt="Override Geolocation" width="860" height="514"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#live-expression"&gt;
  &lt;/a&gt;
  Live Expression
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Console&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Esta permite fijar en la parte superior de su consola una expresión de la cual se mostrará el valor actual y se actualizará en tiempo real. Es muy útil cuando se escribe la misma expresión de JavaScript en la consola repetidamente.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QHQY3mAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s5dzoy3p5xikiih5saq.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QHQY3mAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s5dzoy3p5xikiih5saq.gif%3Fclasses%3Dcenter-block" alt="Live Expression" width="860" height="661"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Chrome DevTools es mucho más que una herramienta para visualizar código y agregar breakpoints como solemos creer. En efecto, tiene un conjunto de herramientas robustas muy especializadas para hacer la depuración, pruebas, análisis y monitoreo de diferentes maneras. En tal sentido, es muy recomendable estudiarlo y conocer cada nuevo feature que se va agregando constantemente. &lt;/p&gt;

</description>
      <category>devtools</category>
      <category>debugging</category>
    </item>
    <item>
      <title>10 Tips For Launching a Successful SVOD Service</title>
      <author>hermoni versa</author>
      <pubDate>Tue, 07 Dec 2021 11:46:05 +0000</pubDate>
      <link>https://dev.to/hermoniversa/10-tips-for-launching-a-successful-svod-service-3ml</link>
      <guid>https://dev.to/hermoniversa/10-tips-for-launching-a-successful-svod-service-3ml</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.webnexs.com/svod.php"&gt;Subscription Video on Demand&lt;/a&gt;&lt;/strong&gt; is a rapidly growing industry for a variety of reasons. It allows consumers to pay for only the content they want, which is one of the primary reasons why audiences are neglecting cable and other traditional providers. &lt;/p&gt;

&lt;p&gt;Moreover, it provides businesses with a direct line of revenue from consumers without the need to consult with or sell to advertisers. This has the added benefit of freeing users from troubling ad interruptions. SVOD is an excellent solution for businesses that have a dedicated audience that is willing to pay. Businesses that use SVOD make money by selling packaged content in monthly, quarterly, or annual subscriptions and charging their customers a recurring fee. &lt;/p&gt;

&lt;p&gt;In this article, we'll give you some good tips  to help you launch your  successful SVOD service&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#should-you-know-what-svod-is-first"&gt;
  &lt;/a&gt;
  Should you know what SVOD is first?
&lt;/h1&gt;

&lt;p&gt;Subscription video on demand is called SVOD. It allows users to pay a regular price for unlimited access to a huge library of audio and video content for the term of the subscription. For a monthly/annual pay, subscription video on demand (SVOD) services provides access to a library of content, which includes movies, TV series, and other original content. SVOD services are often delivered via streaming, which requires the use of an active internet connection. Netflix and Amazon Prime Video are two major &lt;strong&gt;&lt;a href="https://www.webnexs.com/svod.php"&gt;SVOD businesses&lt;/a&gt;&lt;/strong&gt; that are market leaders. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#svod-model-success"&gt;
  &lt;/a&gt;
  SVOD Model Success
&lt;/h2&gt;

&lt;p&gt;A successful SVOD model will generally have the following features: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Automated operations&lt;/strong&gt; – suitable for managing customer accounts, billing plans, and other logistics (product, price and billing frequency, which can grow exponentially as revenues scale). Manually doing these activities is inefficient, a mistake, and time-consuming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Easy-to-understand customer terms and conditions&lt;/strong&gt; -- simple communication ensuring that customer terms and conditions properly explain purchase information and cancelling options. Customer retention is ensured by including customer support contact details.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Value proposition&lt;/strong&gt;--A major part of SVOD revenue success is the value proposition. When buying a product or service, customers must believe that they are getting better value for their money.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Quick payment methods&lt;/strong&gt; --payments should be as easy as possible. This also applies to any additional measures that need customers to take further steps to activate recurring billing. As a result of these additional options, conversion rates are generally lower.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Larger Profit Margin&lt;/strong&gt;– SVOD delivers larger profit margins than other OTT video monetization options, even with a limited number of users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-following-are-some-helpful-tips-for-launching-an-svod-business"&gt;
  &lt;/a&gt;
  The following are some helpful tips for launching an SVOD business.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#1-prioritize-both-quantity-and-quality-of-content"&gt;
  &lt;/a&gt;
  1. Prioritize both quantity and quality of content
&lt;/h2&gt;

&lt;p&gt;Starting an SVOD service can be ideal for you if you have high-quality content for online consumption. Make sure, though, that you have a substantial library to offer. Content from a variety of genres and categories should also be included.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-make-sure-that-you-have-all-the-necessary-equipment"&gt;
  &lt;/a&gt;
  2. Make sure that you have all the necessary equipment
&lt;/h2&gt;

&lt;p&gt;As a content provider, you must ensure that your audience has access to new content regularly. As a result, you must be financially prepared to regularly acquire or provide new content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-determine-your-speciality"&gt;
  &lt;/a&gt;
  3. Determine your speciality
&lt;/h2&gt;

&lt;p&gt;Finding your speciality also helps in the creation of your company's personal brand. This includes a fantastic website, an easy-to-use platform, and high-quality, original content. Your target audience will be attracted to your brand because of the type of material you give and how simple it is to get that content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-find-the-best-mix-of-monetization-models"&gt;
  &lt;/a&gt;
  4. Find the best mix of monetization models.
&lt;/h2&gt;

&lt;p&gt;The subscription model is the most simple and popular revenue strategy for SVOD. You can, however, combine subscription, transactional, and ad-supported revenue methods to create effectively bundled revenue plans. Choose an appropriate mix and a hybrid revenue model that is most suited for your company and allows you to increase income with reduced expenses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-evaluate-the-opponent"&gt;
  &lt;/a&gt;
  5. Evaluate the opponent
&lt;/h2&gt;

&lt;p&gt;Examine the content of your competition to see what they have to offer. Keep a closer check on what they're buying or investing in when it comes to content. This helps you to spot gaps in your content mix and fill them with expert content that you can charge a premium for. Examine the revenue models of your competitors and design a pricing strategy to draw subscribers. Compare and contrast your content mix with that of your competitors to avoid duplicating content. The first mover always wins when there is a duplication.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-application-of-appropriate-technologies"&gt;
  &lt;/a&gt;
  6. Application of appropriate technologies
&lt;/h2&gt;

&lt;p&gt;Choosing the correct technology is one of the most important components of creating a successful SVOD service.&lt;/p&gt;

&lt;p&gt;It's not easy to set up a streaming service. When creating an SVOD service, it's necessary to consider the following factors:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CDN&lt;/strong&gt;: It basically speeds up the rendering of content by distributing it to multiple locations at the same time, giving your consumers better coverage. Including a CDN in your SVOD platform is a wise choice because your content will be displayed faster to your subscribers, resulting in a better viewing experience. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;DRM (Digital Rights Management)&lt;/em&gt;*: Having a DRM system protects your content against unauthorized reproduction. This protects you from piracy while also ensuring a more consistent cash source.&lt;br&gt;
PCI Compliance: Make sure your platform complies with the PCI Security Standards Council. It means the platform must meet the requirements for processing, storing, and securely transmitting payment credentials.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-support-live-streaming-api"&gt;
  &lt;/a&gt;
  7. Support Live Streaming API
&lt;/h2&gt;

&lt;p&gt;Make sure your SVOD service includes the option to integrate (API) with live streaming feeds for high-traffic content like live sports or award shows. Regularly, you might want to make your content available via live streaming. Cooking videos, for example, can be live-streamed on a weekly basis. This is an excellent method of promoting your subscription-based business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-decide-on-a-price-range"&gt;
  &lt;/a&gt;
  8. Decide on a price range
&lt;/h2&gt;

&lt;p&gt;One of the most critical things to figure out before the launch is pricing.&lt;/p&gt;

&lt;p&gt;Examine your competitors and see how much other SVOD providers charge. If you're not sure how much to charge for your content, offer a similar price to your competitors. Most streaming services provide two or three subscription options: monthly, quarterly, and annual.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-promote-your-content"&gt;
  &lt;/a&gt;
  9. Promote your content
&lt;/h2&gt;

&lt;p&gt;Using adverts to keep your audience engaged is an excellent method. You should promote premium content and future content on your website to remind your viewers of their favourite shows. The number of views for premium content will rise as a result of this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-before-the-launch-test-everything"&gt;
  &lt;/a&gt;
  10. Before the launch, test everything
&lt;/h2&gt;

&lt;p&gt;Conducting a test to ensure that everything is working properly before launching your business online is a good idea. Before submitting the apps to the store, there are a number of things you should evaluate. Check to see if: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All the videos are properly playing&lt;/li&gt;
&lt;li&gt;You like the user interface.&lt;/li&gt;
&lt;li&gt;The website and app have good performance.&lt;/li&gt;
&lt;li&gt;To watch videos, you can pay.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;SVOD is on the rise and shows no signs of slowing. To launch a successful SVOD service, you'll need to develop a strong brand that will connect with your target audience, as well as an effective website with an appealing design and clear customer-focused messaging. To help you build a well-known brand and launch a &lt;strong&gt;&lt;a href="https://www.webnexs.com/svod.php"&gt;successful SVOD business&lt;/a&gt;&lt;/strong&gt;, use the tips listed above.&lt;/p&gt;

</description>
      <category>svodservices</category>
      <category>svodbusiness</category>
      <category>svod</category>
      <category>launchsvodservice</category>
    </item>
    <item>
      <title>I 👿 BRUTALLY 👿 review your crappy sites, first victim is Bhagya Mudgal!</title>
      <author>InHuOfficial</author>
      <pubDate>Tue, 07 Dec 2021 11:41:01 +0000</pubDate>
      <link>https://dev.to/inhuofficial/i-review-your-crappy-sites-first-victim-is-bhagya-mudgal-2cdn</link>
      <guid>https://dev.to/inhuofficial/i-review-your-crappy-sites-first-victim-is-bhagya-mudgal-2cdn</guid>
      <description>&lt;p&gt;Oh dear, I write these angry rants and people are actually silly enough to ask me to review their websites in the comments?&lt;/p&gt;

&lt;p&gt;Strap in as I destroy a young developer's site, with their permission of course!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#they-actually-asked-you-to-do-this"&gt;
  &lt;/a&gt;
  They actually asked you to do this?
&lt;/h2&gt;

&lt;p&gt;Yes, how silly of them! And they did it on &lt;a href="https://dev.to/inhuofficial/dont-add-a-video-background-to-your-landing-page-to-make-it-more-gorgeous-tw-gratuitous-swearing-bja"&gt;one of my angry rants posts&lt;/a&gt; too so I knew they were up for punishment!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/bhagyamudgal"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWrPjWbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VNPhTxBL--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/694278/d8c6156a-47ea-466b-8411-44784c670291.png" alt="bhagyamudgal profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/bhagyamudgal"&gt;
        &lt;span class="comment-username"&gt;Bhagya Mudgal&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2 m:pl-0"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/bhagyamudgal/comment/1k4kg" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Nov 28
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Can you review my Portfolio &lt;a href="https://www.bhagyamudgal.me" rel="nofollow"&gt;bhagyamudgal.me&lt;/a&gt;&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;



&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/inhuofficial"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmbVmdkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HHg2q6g4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_66%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/inhuofficial"&gt;
        &lt;span class="comment-username"&gt;InHuOfficial&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2 m:pl-0"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/inhuofficial/comment/1k4kk" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Nov 28
  &lt;/time&gt;

    • Edited &lt;span&gt;on &lt;time&gt;Nov 28&lt;/time&gt;&lt;/span&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;That very much depends, do you want "a review" where I look at your site and give you a few pointers and tips to improve it.&lt;/p&gt;

&lt;p&gt;Or do you want "A REVIEW" where I pick apart every tiny little thing that isn't absolutely perfect with the site and trash you to within an inch of your life making you wonder why you ever thought you wanted to become a developer? (same as this article, anger is for fun!)&lt;/p&gt;

&lt;p&gt;Happy to do either, if you are brave enough to go for the second option I will do a whole article on it...but it will be brutal 🤣!&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;



&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/bhagyamudgal"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWrPjWbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VNPhTxBL--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/694278/d8c6156a-47ea-466b-8411-44784c670291.png" alt="bhagyamudgal profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/bhagyamudgal"&gt;
        &lt;span class="comment-username"&gt;Bhagya Mudgal&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2 m:pl-0"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/bhagyamudgal/comment/1k4o5" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Nov 29
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I want a genuine review so I am ok with 2nd option.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;See I am not lying, they volunteered to be shredded so here goes (angry man rant mode full engaged!)&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Trigger warnings:&lt;/strong&gt; The anger is for fun but the article will be aggressive and there are likely to be swears. If you are sensitive to either of those things then you should leave now! Oh and if you are a fan of TailWind I bash it repeatedly throughout the article, so you have been warned! 😉&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#first-impressions"&gt;
  &lt;/a&gt;
  First Impressions
&lt;/h2&gt;

&lt;p&gt;When I landed on &lt;a href="https://www.bhagyamudgal.me/"&gt;https://www.bhagyamudgal.me/&lt;/a&gt; I was greeted with a pleasing dark theme and a nice waving hand emoji.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOPL8giA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9mtoeqhunmn5phrmp7d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOPL8giA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9mtoeqhunmn5phrmp7d.png" alt="Bhagya Mudal (a young man with dark hair and wearing a black shirt) website home page, black background with blue headings and navigation buttons, white text with a picture of Bhagya" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aww bless Bhagya, you even have a picture of your handsome face, which is great.&lt;/p&gt;

&lt;p&gt;But you have fallen into that trap of copying shitty ideas from other developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-be-so-weak-with-your-openings"&gt;
  &lt;/a&gt;
  Don't be so weak with your openings.
&lt;/h3&gt;

&lt;p&gt;First the main heading "Hi👋🏻, I am Bhagya Mudgal". &lt;/p&gt;

&lt;p&gt;Talk about a weak opening! Yes I know who you are your name is in the fucking URL. &lt;/p&gt;

&lt;p&gt;Also I don't really care what you are called yet, I have a problem and I want to know if you can fix it!&lt;/p&gt;

&lt;p&gt;That is immediately followed by a typewriter effect telling me all of the things you are! &lt;/p&gt;

&lt;p&gt;When did developers start thinking that they had to list 50 different attributes to make themselves appear interesting? Are we arrogant enough to think people care or it is even relevant? &lt;/p&gt;

&lt;p&gt;Also do you really expect someone to sit there and wait 20+ seconds to read 5 "interesting" factoids about you?&lt;/p&gt;

&lt;p&gt;Ditch the typewriter effect, only developers think it is good.&lt;/p&gt;

&lt;p&gt;Finally let's talk about that nice picture of that beautiful face of yours in pride of place. &lt;/p&gt;

&lt;p&gt;You look smart and professional which is great.&lt;/p&gt;

&lt;p&gt;Unfortunately it looks like you are in the scope of a sniper due to the circular surround and the line across the background! (I added the red dot just to complete the effect!)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DW1SAREn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swbt6nllgsgtfi2iauu7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DW1SAREn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swbt6nllgsgtfi2iauu7.jpg" alt="Bhagya Mudgal on a light background with a line across it. I added a red dot to make it look more like a sniper scope" width="267" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-should-you-do"&gt;
  &lt;/a&gt;
  What should you do!
&lt;/h4&gt;

&lt;p&gt;Bhagya why are you doing this to yourself? &lt;/p&gt;

&lt;p&gt;You were smart enough (or is it stupid enough?!) to ask for a review, how can you not see how weak the first impression is if you just copy crappy developers who have no imagination!&lt;/p&gt;

&lt;p&gt;Rethink this bit. Ask yourself the key questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;why did I build this site, what is my goal?&lt;/li&gt;
&lt;li&gt;what do I want people to do when I finally persuade them to click on my link and visit my site?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the moment the answers are "I don't know" and "look at a pretty animation"?&lt;/p&gt;

&lt;p&gt;Fuck that, I can see you have just started freelancing, that is fucking great! So what do you want?&lt;/p&gt;

&lt;p&gt;My guess is freelancing work! &lt;/p&gt;

&lt;p&gt;But what work? Who do you help? Small businesses, development companies looking for temps and sub contractors? Do you do designs or do you build things from designs?&lt;/p&gt;

&lt;p&gt;Answer those questions before anyone has chance to click that back button. &lt;/p&gt;

&lt;p&gt;I am making this up obviously but something like:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I build high quality software and web experiences that drive customer engagement and improve sales&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fuck me, you are the man I need, where is the contact button!&lt;/p&gt;

&lt;p&gt;No seriously, where the fuck is the contact button?&lt;/p&gt;

&lt;p&gt;Don't make me look for the next action. &lt;/p&gt;

&lt;p&gt;If you want me to contact you then place a "contact me" link (styled like a button) right below the opening paragraph. &lt;/p&gt;

&lt;p&gt;Or if you think I will need more information before making a decision then make the link lead to your projects page with the text "See how I can help".&lt;/p&gt;

&lt;p&gt;And for the love of God will you retake that picture (or photoshop out the background line) so you don't look like you are about to eat the wrong end of a .50 cal armour piercing rifle round?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-the-fuck-is-butter-cms"&gt;
  &lt;/a&gt;
  What the fuck is Butter CMS?
&lt;/h3&gt;

&lt;p&gt;I was going to ask you why you were being a cheapskate and allowing advertising on your site. Then I saw the price of butter CMS and realised you were actually smart!&lt;/p&gt;

&lt;p&gt;Fuck me that is some expensive software (that you really don't need!) for a brochure site!&lt;/p&gt;

&lt;p&gt;$333 a month ($399 a month if you don't want to part with $3996 in one go and pay annually!) for a 100 page maximum website? (they want me to pay extra for page 101?) &lt;/p&gt;

&lt;p&gt;Fuck me I will build you a CMS for $299 a month, how is that for a deal?&lt;/p&gt;

&lt;p&gt;Anyway this isn't a rant about Butter, the point is a big fat advert in the corner of your site is very off-putting! &lt;/p&gt;

&lt;p&gt;Ditch that over priced CMS and take the time to find an open source alternative if you want stuff for free!&lt;/p&gt;

&lt;p&gt;I mean, you spend ages writing an article, promoting it on social media, someone likes what you have to say and finally visits your site, excited that you might be able to help them.&lt;/p&gt;

&lt;p&gt;They see the massive and out of place advert, click it and go away from your site. &lt;/p&gt;

&lt;p&gt;They get confused by Heroku and all manner of words they don't understand, see the expensive prices of the CMS and go back to Google.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visitors are hard to get, don't give people a reason to click away ffs!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-fucking-hurt-me-with-your-markup"&gt;
  &lt;/a&gt;
  You fucking hurt me with your Markup
&lt;/h2&gt;

&lt;p&gt;Oh man, you used an SVG as a button for the mobile menu?&lt;/p&gt;

&lt;p&gt;Rather than cover all the ways you fucked up in detail, I already have a rant perfect for your site:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/they-just-won-t-learn-a-button-is-a-lt-button-gt-accessibility-rants-k1b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;They...just...won't...learn 🤦‍♂️ - a button is a &amp;amp;lt;button&amp;amp;gt;! [Series: Accessibility Rants]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ May 27 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Go on, read that shit before you continue!&lt;/p&gt;

&lt;p&gt;Read it? Good! Now please, for the love of God, will you just use a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; for a button. It is right there in the name.&lt;/p&gt;

&lt;p&gt;This means that people using assistive technology such as a screen reader when viewing your site on a mobile can still reach your navigation and enjoy your site.&lt;/p&gt;

&lt;p&gt;But that isn't the worst of it!&lt;/p&gt;

&lt;p&gt;You used &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;s for your navigation items themselves (on desktop and mobile). Buttons with &lt;code&gt;href&lt;/code&gt;s! It isn't even valid HTML!&lt;/p&gt;

&lt;p&gt;These should be anchors (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;Here is a golden rule to remember what to use - if the URL changes when you click something then it should be an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, otherwise use a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally the links to other pages should also be within a &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element as they are &lt;strong&gt;navigation&lt;/strong&gt; - the HTML spec peeps really outdid themselves making this element easy to remember.&lt;/p&gt;

&lt;p&gt;Yet again this helps screen reader users as they can then navigate the page by regions and find the navigation easily!&lt;/p&gt;

&lt;p&gt;Here is the Markup you should be using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"md:hidden Other TailWind Attrocities"&lt;/span&gt; &lt;span class="na"&gt;aria-controls=&lt;/span&gt;&lt;span class="s"&gt;"main-nav"&lt;/span&gt; &lt;span class="na"&gt;aria-haspopup=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;aria-expanded=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Your SVG for the menu on mobile&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"main-nav"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hidden md:flex"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"Arrrgghhh Tailwind mess"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Your SVG for closing the menu&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-button"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;aria-current=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-button"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-button"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-button"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/projects"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Projects&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-button"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/contact"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fucking simple to make things accessible isn't it! &lt;/p&gt;

&lt;p&gt;First thing you will notice is I added &lt;code&gt;aria-current="page"&lt;/code&gt; to the current pages hyperlink.&lt;/p&gt;

&lt;p&gt;Instead of disabling the navigation item for the current page you can just add this attribute to tell screen readers what page they are on!&lt;/p&gt;

&lt;p&gt;What is even more cool is that you can use this for styling with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.nav-button&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;aria-current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"page"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c"&gt;/*your styles*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well you could have done if you hadn't used TailWind! But there will be plenty of opportunity for me to slip in digs at TailWind throughout the article so I will leave that alone for now.&lt;/p&gt;

&lt;p&gt;Now there are a load of weird attributes I added that you might not recognise.&lt;/p&gt;

&lt;p&gt;Don't worry it isn't your fault that courses don't teach you about accessibility so it all looks scary!&lt;/p&gt;

&lt;p&gt;Let me break it down for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;aria-controls="main-nav"&lt;/code&gt; - This associates the button with the navigation so that screen reader users know what this button is related to. The &lt;code&gt;main-nav&lt;/code&gt; part is the &lt;code&gt;id&lt;/code&gt; of the navigation and that is how we make the link.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;aria-haspopup="true"&lt;/code&gt; - This lets screen reader users know that clicking this button will open some sort of modal / window.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;aria-expanded="false"&lt;/code&gt; - This attribute lets screen reader users know the current state of the modal / popup (that we associated earlier with &lt;code&gt;aria-controls&lt;/code&gt;). It should start as &lt;code&gt;aria-expanded="false"&lt;/code&gt; as the menu isn't open. However when the menu opens you need to change this to &lt;code&gt;aria-expanded="true"&lt;/code&gt; to let screen reader users know that the popup is now visible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a couple of other things to note.&lt;/p&gt;

&lt;p&gt;When I press the "open" button and the menu is displayed you should change the focus to land on your "close" button (which I have changed to a button in the same way I did with the open button).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#svg-accessibility"&gt;
  &lt;/a&gt;
  SVG accessibility
&lt;/h4&gt;

&lt;p&gt;Also with SVGs you need to provide a text alternative.&lt;/p&gt;

&lt;p&gt;Basically at the moment your SVGs do not contain any text that a computer can use to announce what the image is about.&lt;/p&gt;

&lt;p&gt;As we are using these images as the contents of buttons we need to give them a programatically determinable name so a screen reader user knows what the open and close buttons do!&lt;/p&gt;

&lt;p&gt;Luckily SVGs have a way of adding accessible names built in, this is the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"close-title"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"close-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Close&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M6 18L18 6M6 6l12 12"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will notice how I added the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; as the first element above any paths in your SVG.&lt;/p&gt;

&lt;p&gt;Think of the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; as an &lt;code&gt;alt&lt;/code&gt; attribute on an image.&lt;/p&gt;

&lt;p&gt;The only other thing to note is that I used &lt;code&gt;aria-labelledby&lt;/code&gt; and pointed that to the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This is just a way to make the SVG more robust for screen readers.&lt;/p&gt;

&lt;p&gt;Finally I added &lt;code&gt;role="img"&lt;/code&gt;. This tells the browser to treat this SVG like an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element and is just another thing we have to do to make it more robust.&lt;/p&gt;

&lt;p&gt;I know that is a lot to take in but as long as you remember to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add &lt;code&gt;role="img"&lt;/code&gt; to the SVG element, &lt;/li&gt;
&lt;li&gt;add a &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element with a suitable description, &lt;/li&gt;
&lt;li&gt;give the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element a unique ID &lt;/li&gt;
&lt;li&gt;use &lt;code&gt;aria-labelledby&lt;/code&gt; to point to that ID &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;you will be fine, even if you don't understand the exactly why at this stage.&lt;/p&gt;

&lt;p&gt;Finally you should also trap focus within the menu but that is complicated and something for another day, especially as this is a mobile menu so it is less relevant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-new-sin"&gt;
  &lt;/a&gt;
  A new sin!
&lt;/h3&gt;

&lt;p&gt;Here is one I haven't covered before in any of my writing. &lt;/p&gt;

&lt;p&gt;You put a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;...in an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; on your projects page?!?&lt;/p&gt;

&lt;p&gt;What on Earth is that about?&lt;/p&gt;

&lt;p&gt;Your poor browser will be screaming!&lt;/p&gt;

&lt;p&gt;"Ok did he click the button, or the anchor. What should I do? Should I fire both or just one? Who am I? What day is it? Why did you do this too me, why?" - your poor browser&lt;/p&gt;

&lt;p&gt;As an added side effect of this atrocity it means that when tabbing through the page every single linkbutton (a new term! you invented a new shitty element!) has 2 tab stops.&lt;/p&gt;

&lt;p&gt;As each card has 2 linkbuttons within it you have added so many additional tab stops that I got fucking Repetitive Strain Injury (RSI) reviewing your crappy site!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Never&lt;/strong&gt; nest interactive elements (well almost never but that is a long and nuanced conversation). &lt;/p&gt;

&lt;p&gt;Ditch the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; inner container in favour of a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; as the outer anchor (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) is the right element to use here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contact-page"&gt;
  &lt;/a&gt;
  Contact Page
&lt;/h2&gt;

&lt;p&gt;You added labels to your form! You even put them in the right place (just above the relevant input and aligned to the left)&lt;/p&gt;

&lt;p&gt;I was starting to forgive you for the button fiasco and my heart rate had dropped below 150 Beats Per Minute (BPM) finally. Then I noticed that you didn't associate the label with an input! 🤦‍♂️&lt;/p&gt;

&lt;p&gt;Are you trying to give me a fucking heart attack? My heart's BPM is back over 180 now!&lt;/p&gt;

&lt;p&gt;Web Development 101: You need to give your inputs IDs. Then on the relevant label you add &lt;code&gt;for="IdOfRelevantInput"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Really fucking easy!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col my-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"nameInput"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"TailWind Bullshit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"nameInput"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"More TailWind Bullshit"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Enter Your Name"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this does is make sure that a browser can tell a screen reader "this input is linked to this label so please say "Name" to describe this field".&lt;/p&gt;

&lt;p&gt;Oh and by doing that you will be able to click on the label to focus the input as well as the input itself, which is really handy if you are someone with accuracy / dexterity problems (i.e. someone with Parkinson's Disease or Cerebral Palsy).&lt;/p&gt;

&lt;p&gt;There are other problems like the fact that the error messages are not linked to the input, your inputs don't indicate they are invalid etc. etc. but let's start with the basics and link the inputs together first, I can help you with that stuff later or you can read up on making forms accessible.&lt;/p&gt;

&lt;p&gt;Oh and just a heads up, a certain angry accessibility guy not too far from here is going to release a monster article on forms in the next 2 weeks so you may want to keep an eye out for that as it will probably cover all the bits you need to know (and more besides!) 😃!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-page"&gt;
  &lt;/a&gt;
  About Page
&lt;/h2&gt;

&lt;p&gt;Yes I know I am not going in order, tough shit! I like making you have to think!&lt;/p&gt;

&lt;p&gt;Now being really brutal you have to ask: Is the about page actually relevant?&lt;/p&gt;

&lt;p&gt;Well yet again I do not know the goal of the site. If you are looking for love then you are certainly on the right track as this would make an excellent dating profile.&lt;/p&gt;

&lt;p&gt;But if you are looking for work, or looking to get more readers etc. then you need to cut the crap that doesn't matter.&lt;/p&gt;

&lt;p&gt;I like to ask myself the following question when writing copy:&lt;/p&gt;

&lt;p&gt;"Does this tell the person reading it one of the benefits of using my services / reading my stuff" etc.&lt;/p&gt;

&lt;p&gt;In this instance I will offer two variations:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-want-more-readers"&gt;
  &lt;/a&gt;
  You want more readers
&lt;/h3&gt;

&lt;p&gt;"I am a student in New Delhi with a passion for writing.&lt;/p&gt;

&lt;p&gt;I like to write about the MERN stack due to my extensive experience using it in personal projects, for client work and in open source projects.&lt;/p&gt;

&lt;p&gt;I also like to write about my journey and experiences when learning to use new technologies, as I believe this may be useful to others.&lt;/p&gt;

&lt;p&gt;If this is the sort of thing you like to read about then why not connect with me, I love making new friends in the developer community and seeing how we can help and learn from each other:"&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-want-freelance-work-from-other-developers"&gt;
  &lt;/a&gt;
  You want freelance work from other developers
&lt;/h3&gt;

&lt;p&gt;"I am a college student by day and freelancer by night.&lt;/p&gt;

&lt;p&gt;I have created several site clones and helped several clients bring their ideas to life. "You can check out some of my work here" (link to projects and add any client work you have done).&lt;/p&gt;

&lt;p&gt;As a student I am able to offer a fresh perspective on common problems and utilise the latest technologies to help you achieve your end goals.&lt;/p&gt;

&lt;p&gt;I am proficient with [list of 3/4 core items] and can quickly pick up new frameworks if the need arises."&lt;/p&gt;

&lt;p&gt;Hopefully you get the idea, focus in on one thing. There is a saying "Jack of all trades, master of none" here in the UK. It basically means you haven't learned how to do one thing well and so do lots of things to an average or poor level. &lt;/p&gt;

&lt;p&gt;This leads me onto the massive list of technologies on the about page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkR7JM9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wz799mt4277xe7gdhen9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkR7JM9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wz799mt4277xe7gdhen9.png" alt="A total of 22 different logos over 4 rows with no explanations of what technologies these logos relate to" width="735" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It isn't helpful, it actually hurts you. Do you know what people think when they see all of those icons, "What a talented young man who can do everything".&lt;/p&gt;

&lt;p&gt;No I am fucking kidding, they think "yeah right, a student who has worked with all of those technologies is going to know how to do "hello world" at best in each of them and won't be any use!".&lt;/p&gt;

&lt;p&gt;I have no doubt you can do more than hello world in each of those technologies, but you should focus on the ones your are particularly strong on and show maybe 5 / 6 key ones to people.&lt;/p&gt;

&lt;p&gt;Also I would recommend changing them to be a list with the icon for the technology to the left and then the name of the technology and an example of your work with the technology (if applicable).&lt;/p&gt;

&lt;p&gt;This is due to the simple rule of "don't make people think". I was looking at those icons and it took me a few seconds to recognise some of them, and I have been at this for years. &lt;/p&gt;

&lt;p&gt;People have short attention spans and so they will only glance at the icons and then move on, possibly missing the very technology that will trigger them to think "ah, Bhagya uses that and we need someone to do XXX" and get you some work!&lt;/p&gt;

&lt;p&gt;A final thought here is if you want work from small businesses you need to scrap this page entirely as it stands.&lt;/p&gt;

&lt;p&gt;They do not care about tech stacks, small business owners care about what pain points you can fix. &lt;/p&gt;

&lt;p&gt;So if you are after work from small business owners focus on how you can bring them customers, fix problems with their current sites, help bring their next big idea to life etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blogs"&gt;
  &lt;/a&gt;
  Blogs!
&lt;/h2&gt;

&lt;p&gt;Now we are talking, some of your writing!&lt;/p&gt;

&lt;p&gt;Now before I tear you a new one over your shitty code once again let me just say you write well and I enjoyed your articles!&lt;/p&gt;

&lt;p&gt;Sorry, I don't know what came over me, back to the rant!&lt;/p&gt;

&lt;p&gt;First the blog landing page, &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; heading, check! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kn-JrnCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/toewrpbpv8f6gsz6cfb9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kn-JrnCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/toewrpbpv8f6gsz6cfb9.png" alt="3 blog post cards in light blue on black background, they contain a published date, title, brief description and author information" width="880" height="431"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A list of blog posts...yeah but in a load of nested divs!&lt;/p&gt;

&lt;p&gt;If something is a list, use a fucking list!&lt;/p&gt;

&lt;p&gt;Wrap your posts in a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; and make it easier for people using assistive tech (as it will then announce the number of posts...same principle as the navigation part I mentioned earlier!)&lt;/p&gt;

&lt;p&gt;Also your article "headings" are just styled to look like headings.&lt;/p&gt;

&lt;p&gt;By adding a &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; to contain your headings instead of &lt;code&gt;&amp;lt;p class="text-gray-800 text-xl font-medium mt-4 mb-2 break-words"&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt; it means that people using a screen reader can also navigate by heading levels (the most popular way to navigate a site!)&lt;/p&gt;

&lt;p&gt;It is also good for SEO!&lt;/p&gt;

&lt;p&gt;Also do we really need the fucking "click to read more" in 2021? Meh, minor point but I would ditch that.&lt;/p&gt;

&lt;p&gt;Finally just as an observation but why have you got an author at the bottom of your posts? They are all written by you what is the fucking point? Are you thinking people are going to guest blog for you with your 12 visitors a month? &lt;/p&gt;

&lt;p&gt;Wait until you scale this blog up to be a monster, then add the author info to the blog cards!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-an-actual-post"&gt;
  &lt;/a&gt;
  Now an actual post
&lt;/h3&gt;

&lt;p&gt;Yet again it starts promising, you used a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; for the first heading (honestly I shouldn't be fucking impressed by this but as so many sites fuck this up I suppose I better praise you!)&lt;/p&gt;

&lt;p&gt;Now onto the article headings and...they are &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Why oh fucking why would you do that? What made you think "oh yeah start with a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and then skip to a &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; that makes sense!"&lt;/p&gt;

&lt;p&gt;Do you not like &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;s? Are you h2phobic?&lt;/p&gt;

&lt;p&gt;Fix this shit, don't skip heading levels!&lt;/p&gt;

&lt;p&gt;The irony that one of your articles is called "Signs that bad programmers have" while skipping fucking heading levels is beyond funny, thanks for the laugh!&lt;/p&gt;

&lt;p&gt;The final thing to mention is the publication date. &lt;/p&gt;

&lt;p&gt;This should be located within a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time"&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;&lt;/a&gt; element. This is just good practice!&lt;/p&gt;

&lt;p&gt;When using the &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; element you should also set the &lt;code&gt;datetime&lt;/code&gt; attribute on the element so that computers can understand the date you have entered. So for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;time&lt;/span&gt; &lt;span class="na"&gt;datetime=&lt;/span&gt;&lt;span class="s"&gt;"2021-09-12"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sun Sep 12 2021&lt;span class="nt"&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;You have made fewer mistakes than most "senior" developers so I suppose you deserve some praise for not being as shitty as everyone else.&lt;/p&gt;

&lt;p&gt;Obviously there are still more things I haven't slated you for and I don't want to miss my chance!&lt;/p&gt;

&lt;p&gt;These include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lack of &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; element&lt;/li&gt;
&lt;li&gt;The fact your site "only" scores 90 / 100 on &lt;a href="https://web.dev/measure"&gt;web.dev/measure&lt;/a&gt; - but that is because you are using Client Side Rendering for a brochure site and that is just stupid! Don't worry though you are certainly not alone in this and 90 is respectable enough!&lt;/li&gt;
&lt;li&gt;The fact you don't use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;&lt;code&gt;prefers-reduced-motion&lt;/code&gt;&lt;/a&gt; detection or a way to switch off animations to make sure animations are reduced for people with vestibular disorders.&lt;/li&gt;
&lt;li&gt;The lack of relevant &lt;code&gt;WAI-ARIA&lt;/code&gt; attributes on your contact form that I mentioned earlier.&lt;/li&gt;
&lt;li&gt;using white text on a black background is just as fucking blinding as black text on a white background - find a slightly softer palette ffs! (Yes I am complaining your site has &lt;strong&gt;too much&lt;/strong&gt; contrast...get over it!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can tell I could go on and on and on telling you how many things you fucked up, but I feel like I have done enough damage for one day! &lt;/p&gt;

&lt;p&gt;Hopefully I have succeeded in destroying your site as requested!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You're fucking welcome!&lt;/strong&gt; 😂&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#being-serious-for-a-second"&gt;
  &lt;/a&gt;
  Being serious for a second
&lt;/h2&gt;

&lt;p&gt;Ok the angry man rants are switched off now, I wanted to give my honest opinion.&lt;/p&gt;

&lt;p&gt;I just want to say Bhagya, the site is nice and simple and gets the point across well. &lt;/p&gt;

&lt;p&gt;It may look like a long list but honestly you have done quite well.&lt;/p&gt;

&lt;p&gt;The site is reasonably easy to use with a keyboard, the colour contrast is pretty good, the navigation is clear etc.&lt;/p&gt;

&lt;p&gt;One thing that is hard to get across in angry rants is where the important fixes are. &lt;/p&gt;

&lt;p&gt;The 3 things that you should tackle first from an accessibility perspective are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the labels not being associated with the inputs&lt;/li&gt;
&lt;li&gt;the skipping heading levels problem&lt;/li&gt;
&lt;li&gt;the nested / misuse of buttons and links.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fix those and the site becomes much more usable for people using a screen reader.&lt;/p&gt;

&lt;p&gt;Oh, and I am serious about that picture on the home page, you look really smart but also really like you are about to be taken out due to the unfortunate line behind you! 🤣&lt;/p&gt;

&lt;p&gt;Thanks for letting me unleash the angry man on your site, it was fun (and therapeutic!). &lt;/p&gt;

&lt;p&gt;If you have any questions just let me know and I will try and help / point you to useful information on how to fix stuff.&lt;/p&gt;

&lt;p&gt;Thanks for being my first victim and good luck with the BCA and freelancing!&lt;/p&gt;





&lt;center&gt;&lt;b&gt;Who's next? Anyone else want their site ripping to shreds? Step right up!&lt;/b&gt;&lt;/center&gt;



&lt;p&gt;Oh and I have a super important post going out later today so stay tuned - titled "1000 days to £1million - this should be fun!" so check that out please!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>a11y</category>
      <category>html</category>
    </item>
    <item>
      <title>Establishing Your Cloud Foundation on AWS | AWS White Paper Summary</title>
      <author>Adit Modi</author>
      <pubDate>Tue, 07 Dec 2021 11:37:20 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/establishing-your-cloud-foundation-on-aws-aws-white-paper-summary-11pp</link>
      <guid>https://dev.to/awsmenacommunity/establishing-your-cloud-foundation-on-aws-aws-white-paper-summary-11pp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The increasing breadth and depth of cloud services makes the cloud a powerful enabler of efficiency, agility, and rapid innovation. However, building a foundational AWS Cloud environment requires decisions across multiple AWS and partner products, services, and solutions. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customers are looking for guidance to help them set up and operate an environment that is compatible with their IT practices, and enables their builders and operators while adhering to governance requirements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This whitepaper introduces a guided path approach to help customers build and evolve their AWS Cloud environment based on a consolidated set of definitions, use cases, guidance, and automations. The approach includes people, process, and technology considerations of establishing an AWS Cloud environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The primary business drivers behind moving to the cloud include greater agility, innovation, and scale. When planning a cloud adoption strategy, the number of decisions that you need to make to stand up a production-ready cloud environment is significant. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Decisions that are made early on can affect your ability to enhance and/or scale your environment in the future. This complexity has led customers to look for prescriptive guidance across the range of AWS services that can be used to create a foundational environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Establishing a cloud foundation on AWS requires guidance tailored to your business needs. Using a capability-based approach, you can create an environment to deploy, operate, and govern your workloads. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also enhance the capabilities to extend your environment as your requirements evolve and you deploy additional workloads to the cloud.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Building a foundational environment on AWS can be done with a standard, prescriptive set of capabilities across different functional areas. These capabilities can be used as a structured way to quickly build or expand your AWS Cloud environment, and include use case scenarios and corresponding guidance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can adopt and implement capabilities according to your operational and governance needs. As your business requirements mature, the capability-based approach can be used as a mechanism to verify that your cloud environment is ready to support your workloads and scale as needed. This approach enables you to confidently establish your cloud environment for your builders and your business.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#capabilities"&gt;
  &lt;/a&gt;
  Capabilities
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;To support cloud adoption, AWS recommends that you have a foundational set of capabilities that enable you to deploy, operate, and govern your workloads.&lt;/li&gt;
&lt;li&gt;A capability includes a definition, use case scenarios, opinionated guidance, and supporting automation to establish and operate a specific part of a cloud environment. &lt;/li&gt;
&lt;li&gt;Capabilities are components that can help you plan, implement, and operate your cloud environment, and include people, process, and technology considerations. Capabilities are designed to integrate into your overall technology environment.&lt;/li&gt;
&lt;li&gt;In addition to technology implementation guidance, capabilities include operational guidance (for instance, notifications, event handling, and remediation, as well as team resource skills and processes) needed to stand up and operate each capability. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS has defined a set of 30 capabilities to help you establish a cloud foundation. One way to categorize these capabilities is by functional areas which can help you identify accountable owners and stakeholders in the development, operations, and governance of capabilities. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each capability includes stages of maturity that enable you to implement based on where you are in your cloud journey, including your governance and operational requirements. As your cloud environment grows and matures, the capabilities can be enhanced to meet your new requirements.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#capabilities-definitions"&gt;
  &lt;/a&gt;
  Capabilities definitions
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This section includes high-level definitions for each foundational capability organized by their primary functional area. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Security functional area capabilities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Identity Management &amp;amp; Access Control&lt;/strong&gt; enables your teams to efficiently build and centrally manage the access to your cloud platform environment. The capability enables you to structure your organization, organize your accounts, and set up access to your environment based on a least-privilege model.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Log Storage&lt;/strong&gt; enables you to securely collect and store environment logs centrally within tamper resistant storage. This capability enables you to later evaluate, monitor, alert, and audit access and actions performed on your AWS resources and events.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data Isolation&lt;/strong&gt; enables you to limit access to data at rest and in transit so that data is only accessible to appropriate, authorized entities. This capability also includes the ability to detect misuse and/or unauthorized access, leak, and theft of data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Encryption and Key Management&lt;/strong&gt; refers to the ability to centrally manage encryption keys for different workloads, and the ability to encrypt data at rest and in transit. Access to keys is provided based on least privilege, and usage is monitored to report any anomalies. This capability also includes different patterns of rotation based on requirements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Secrets Management&lt;/strong&gt; applies to managing secrets (access credentials) such as passwords, access keys, other API keys, X.509, or SSH private keys. This capability incudes storage, access control, access logging, revocation, and rotation aspects for managing secrets.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Security Incident Response&lt;/strong&gt; enables you to respond to a security incident. Based on decisions specified in policy, the response involves characterizing the nature of the incident and making changes (which may involve activities including restoration of operational status, identification and remediation of root cause, and gathering evidence pursuant to civil or criminal prosecution).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Forensics&lt;/strong&gt; involve the analysis of log data and evidentially-captured images of potentially compromised resources, to determine whether a compromise occurred (and if so, how). Outcomes of root cause analysis resulting from forensic investigations are typically used to produce and motivate the application of preventative measures.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Patching&lt;/strong&gt; is the ability to deploy sets of changes to update, fix, and/or enhance the operation and security properties of workloads. This includes addressing security vulnerabilities, bug fixes, and other related work. The scope of patching includes operating systems, applications, and any relevant software systems.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Vulnerability &amp;amp; Threat Management&lt;/strong&gt; is the ability to identify vulnerabilities that can affect the environment (availability, performance, or security). This capability enables you to assess the impact and scope (e.g., blast radius) of vulnerabilities and threats, and address/remediate them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Workload Isolation Boundary&lt;/strong&gt; enables you to create and manage isolated environments to contain your newly created or migrated workloads. This approach reduces blast radius of vulnerabilities and threats, and eases the complexity of compliance by providing mechanisms to isolate access to resources.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#central-it"&gt;
  &lt;/a&gt;
  Central IT
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Central IT functional area capabilities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Template Management&lt;/strong&gt; is the ability to create and group reusable templates in a central repository to quickly deploy, manage, and update infrastructure, schemas, golden images, and resources across the environment. This capability includes the necessary processes to create, test, update, and validate the templates when required. These templates are pre-approved implementation patterns using already approved and onboarded AWS services, and are ready to be used by different teams based on requirements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Tagging&lt;/strong&gt; enables you to group sets of resources by assigning metadata to cloud resources for a variety of purposes. These purposes include access control (e.g., ABAC), cost reporting, and automation (e.g., patching for select tagged instances). Tagging can also be used to create new resource constructs for visibility or control (e.g., grouping together resources that make up a microservice, application, or workload). Tagging is fundamental to providing enterprise-level visibility and control.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Metadata Sorting/Searching&lt;/strong&gt; is the ability to search and filter based on metadata applied to tagged resources within your environment. These resources can be accounts, or resources within these accounts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Service Onboarding&lt;/strong&gt; is the ability to review and approve AWS services for use based on consideration of internal, compliance, and regulatory requirements. This capability includes risk assessment, documentation, implementation patterns, and the change communication aspects of service consumption.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Records Management&lt;/strong&gt; enables you to set retention of data according to your internal policies and regulatory requirements, including how to transition data to archive before it is deleted. This data can include financial records, transactional data, audit logs, business records, personally identifiable information (PII), or other data subject to retention policies.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data De-Identification&lt;/strong&gt; is the ability to anonymize subsets of data and information as they are stored and processed to reduce their sensitivity (for example, national ID numbers, trade data, healthcare information), and when required, preserving the underlying data format. This capability also includes the ability to tokenize data (such as credit card numbers, physical address, health care records) to reduce the need to access the underlying sensitive data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Logging &amp;amp; Monitoring&lt;/strong&gt; is the ability to gather and aggregate security and operational data about system and application activities, including near-real-time analysis of data to identify anomalies, indicators of compromise, performance issues, and configuration changes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Governance&lt;/strong&gt; is the ability to implement executive board policies that your AWS Cloud environment must adhere to. This policy includes the rules for your environment, defines risks, and informs alignment of internal policies. As your cloud foundation matures, a portion of this capability is embedded in all other capabilities to ensure adherence to governance requirements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Audit &amp;amp; Assessment&lt;/strong&gt; is the gathering and organizing of documentary evidence to enable internal or independent assessment of your cloud environment, and activities within it, against standards (including information about who accessed what, when, and from where, and what changes happened). This capability allows you to validate assertions that all changes were performed in accordance with policy and via appropriate workflow mechanisms.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Change Management&lt;/strong&gt; enables you to deploy planned alterations to all configurable items that are in an environment within the defined scope, such as production and test. An approved change is an action which alters resource configuration that is implemented with a minimized and accepted risk to existing IT infrastructure.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#operations"&gt;
  &lt;/a&gt;
  Operations
&lt;/h2&gt;

&lt;p&gt;Operations functional area capabilities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Support&lt;/strong&gt; is the ability to troubleshoot an environment, ask questions, submit tickets, integrate into existing ticketing systems, and escalate issues to an appropriate entity for a timely response depending on criticality and support level. Support may also require granting ability to access relevant resources to perform troubleshooting and remediation activities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Rollout/Rollback&lt;/strong&gt; is the defined strategy to roll out application or configuration changes to the environment, or roll back these changes in case of failure. Application and configuration changes can include updated permissions, new policies, new or updated network configuration, new version of the application, or updated software development kits. These configuration changes can also include modifications to the orchestration framework that deploy these changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Backup&lt;/strong&gt; is the ability to make reliable copy of data in a reliable way for retrieval as needed to meet business and security goals, Recovery Point Objective (RPO), and Recovery Time Objective (RTO). Content to be backed up includes: orchestration framework data and configuration, application data, logs, and customer data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Disaster Recovery&lt;/strong&gt; involves the use of automated mechanisms to resume processing of transactions hosted in one physical environment, in a different physical environment in the event that the physical environment where the transactions were originally being processed becomes unexpectedly unavailable.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#software-engineering"&gt;
  &lt;/a&gt;
  Software Engineering
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Software Engineering functional area capabilities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Developer Experience &amp;amp; Tools&lt;/strong&gt; includes the tools and processes required for developers to build and deploy workloads easily to the cloud. This capability spans from storing code, to building workflows, to promoting workloads from test to production environment.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Application Security&lt;/strong&gt; encompasses the protection of application software, and the detection of anomalous behavior in the context of the applications’ interactions with clients. Threats to be addressed include unauthorized access, privilege escalation, and other application-level threats typically characterized in threat frameworks.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#network"&gt;
  &lt;/a&gt;
  Network
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Network functional area capabilities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Network Security&lt;/strong&gt; enables you to design and implement security policies and controls across different levels of the networking stack to protect your resources from external or internal threats to ensure confidentiality, availability, integrity, and usability. This capability includes prevention, detection, and blocking of anomalous network traffic based on monitoring of ingress/egress and lateral data movement.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Network Connectivity&lt;/strong&gt; enables you to design, build, and manage a secure and highly available network cloud infrastructure. This capability provides best practices and resources to automate network infrastructure build, configuration, and expansion.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#finance"&gt;
  &lt;/a&gt;
  Finance
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Finance functional area capabilities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Cloud Financial Management&lt;/strong&gt; provides the ability to manage and optimize your variable expense for cloud services. This capability includes near real-time visibility as well as cost and usage analysis to support decision making (e.g., spend dashboards, optimization, spend limits, chargeback, anomaly detection and response). This capability also includes budget and forecasting, to enable you to have a defined cost optimized architecture for your workloads, to select right pricing model, attributing cost of resources to the relevant teams. This enables you to track, notify, and apply cost optimization techniques across your environment and resources. Expense information is centrally managed and consumed, and access to critical stakeholders can be provided for targeted visibility and decision making.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Resource Inventory Management&lt;/strong&gt; enables visibility and configuration of cloud- based resources that make up an IT-level service or workload. Resources are tracked in the environment along with associated configurations via a system of record (e.g., CMDB for ITSM-managed environments) to enable a larger IT-level system of record for visibility and configuration management of all software, hardware, and firmware resources in the cloud environment.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#working-with-the-capabilities"&gt;
  &lt;/a&gt;
  Working with the capabilities
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Each organization’s cloud adoption journey is unique. To successfully build your cloud environment, you need to understand your organization’s current state, the target state, and the transition required to achieve the target state. As you work on your plan to establish your environment, capabilities can help you drive the conversation and decisions across relevant stakeholders (identified by the functional areas for each capability).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The following graph shows a path that you can follow when planning your environment. It’s based on dependencies between capabilities, and can be used to create a project plan for the implementation of capabilities in your environment. In addition to the dependencies shown (via the arrows), some capabilities apply to the overall environment (for example, Governance, and Audit &amp;amp; Assessment).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JyxDr5DP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogoeemm9s72aykdptwf0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JyxDr5DP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogoeemm9s72aykdptwf0.png" alt="Image description" width="627" height="421"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Capability dependency guided path&lt;/em&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;If you are still exploring the cloud, AWS recommends that you deploy a few proof-of- concepts (POCs) to demonstrate business value to your stakeholders. &lt;/li&gt;
&lt;li&gt;If you are ready to start building a cloud environment to host your workloads on the cloud, this set of defined capabilities can help you build your foundational cloud environment. &lt;/li&gt;
&lt;li&gt;Before getting started with your cloud adoption, AWS recommends that you complete the following activities, and reach out to your account team for more information:

&lt;ul&gt;
&lt;li&gt;Review the list of capabilities and create a timeline for implementing capabilities, accounting for any dependencies.&lt;/li&gt;
&lt;li&gt;Identify the stakeholders in your organization that are responsible for each capability.&lt;/li&gt;
&lt;li&gt;Create an implementation plan and a timeline to build your cloud environment.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;As your requirements change, to help you grow your presence in the AWS Cloud, you can use the defined capabilities to build your own approach using your own tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This whitepaper introduces a capability-based approach to establishing the foundation for your AWS environment, and helps you identify the relevant stakeholders needed to make important decisions along your journey. &lt;/li&gt;
&lt;li&gt;The defined capabilities in this paper are based on current AWS best practices, and the experience of thousands of customers that have built their foundational environment on the AWS Cloud.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://d1.awsstatic.com/whitepapers/establishing-your-cloud-foundation-on-aws.pdf?did=wp_card&amp;amp;trk=wp_card"&gt;Original paper&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Setup &amp; Use Strapi to Store your app's logs</title>
      <author>Shada </author>
      <pubDate>Tue, 07 Dec 2021 11:36:48 +0000</pubDate>
      <link>https://dev.to/strapi/how-to-setup-use-strapi-to-store-your-apps-logs-50l8</link>
      <guid>https://dev.to/strapi/how-to-setup-use-strapi-to-store-your-apps-logs-50l8</guid>
      <description>&lt;p&gt;In most application scenarios, a frontend application produces logs that need to be collected and managed centrally. This is very helpful for being notified when an error occurs or for troubleshooting bugs. &lt;/p&gt;

&lt;p&gt;The market offers many tools that centrally collect logs and let you manage them in a suitable container to support this process. Unfortunately, most of these services require paid subscriptions. &lt;/p&gt;

&lt;p&gt;Moreover, for a small project, adding a layer like this can be overkill. But what about using Strapi as a backend for logging management? This way, you will have your log integrated into your Strapi backend without any additional cost. &lt;/p&gt;

&lt;p&gt;This article explains how to configure Strapi to act as a backend for collecting logging and showing them to the developers. The result of this step-to-step guide is a replicable solution for ingesting logs from any frontend application and the javascript code for connecting.&lt;/p&gt;

&lt;p&gt;So, let’s jump into the article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Install Strapi&lt;/li&gt;
&lt;li&gt;Configure the Strapi backend&lt;/li&gt;
&lt;li&gt;The javascript library&lt;/li&gt;
&lt;li&gt;Test it on a javascript application&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before you can jump into this content, you need to have a basic understanding of the following.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Basic knowledge of JavaScript&lt;/li&gt;
&lt;li&gt;Docker installed&lt;/li&gt;
&lt;li&gt;Basic understanding of Strapi - &lt;a href="https://strapi.io/documentation/developer-docs/latest/getting-started/introduction.html"&gt;get started here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Download and install &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;
# Install Strapi&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first step before starting on the core of the tutorial is to install &lt;strong&gt;Strapi&lt;/strong&gt;. You can create an online account or install it locally. &lt;/p&gt;

&lt;p&gt;For this tutorial, it's equivalent. We will embrace the local installation option for giving you a single repo with source code that can be activated and tested locally with ease (link to the source code at the bottom of this article).&lt;/p&gt;

&lt;p&gt;The first step is to create a file called &lt;code&gt;*docker-compose.yml*&lt;/code&gt; and put this content inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    version: '3'
    services:
      strapi:
        image: strapi/strapi
        environment:
          DATABASE_CLIENT: postgres
          DATABASE_NAME: strapi
          DATABASE_HOST: postgres
          DATABASE_PORT: 5432
          DATABASE_USERNAME: strapi
          DATABASE_PASSWORD: strapi
        volumes:
          - ./app:/srv/app
        ports:
          - '1337:1337'
          - '8080:8080'
        depends_on:
          - postgres
      postgres:
        image: postgres
        environment:
          POSTGRES_DB: strapi
          POSTGRES_USER: strapi
          POSTGRES_PASSWORD: strapi
        volumes:
          - ./data:/var/lib/postgresql/data
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can type the following command, and the environment will start:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get a confirmation that the application is running in the console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rHAHjXXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635926927733_2021-11-03%2B09_08_11-docker-compose.yml%2B-%2Bstrapi%2B-%2BVisual%2BStudio%2BCode.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rHAHjXXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635926927733_2021-11-03%2B09_08_11-docker-compose.yml%2B-%2Bstrapi%2B-%2BVisual%2BStudio%2BCode.png" alt="" width="813" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you can navigate to &lt;a href="http://localhost:1337/admin"&gt;http://localhost:1337/admin&lt;/a&gt;. Just fill the form with your data and click "Let's start".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pD8KeSE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635926642130_2021-10-25%2B14_24_09-Register-admin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pD8KeSE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635926642130_2021-10-25%2B14_24_09-Register-admin.png" alt="" width="476" height="610"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside the configuration panel, we have to activate some plugins. Just click on the Marketplace icon on the left menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6AugrORF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635927915569_2021-11-03%2B09_19_09-Homepage.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6AugrORF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635927915569_2021-11-03%2B09_19_09-Homepage.png" alt="" width="201" height="181"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you can activate the documentation plugin to test the APIs that we will create by clicking the Install button (once you have done this, the button text will change to "Already installed").&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PXKna-SL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635928027062_2021-11-03%2B09_19_39-Marketplace%2B-%2BPlugins.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PXKna-SL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635928027062_2021-11-03%2B09_19_39-Marketplace%2B-%2BPlugins.png" alt="" width="379" height="259"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now Strapi is ready to be configured! Let's continue to the next section!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-the-strapi-backend"&gt;
  &lt;/a&gt;
  Configure the Strapi backend
&lt;/h2&gt;

&lt;p&gt;In this section, we will see how to configure the Strapi backend for ingesting and storing logs. Of course, like a headless CMS, Strapi can manage every kind of data: &lt;/p&gt;

&lt;p&gt;We have to explain how they are made. To do this, we will create a new Content-Type, by clicking the left icon menu "Content-Types Builder".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4QYUx3oW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635928266671_2021-11-03%2B09_19_03-Homepage.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4QYUx3oW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635928266671_2021-11-03%2B09_19_03-Homepage.png" alt="" width="213" height="155"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we can create a new content type by clicking "Create new collection type":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L82Utsq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635928647673_Senza%2Bnomenewcoll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L82Utsq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635928647673_Senza%2Bnomenewcoll.png" alt="" width="285" height="214"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That we will call "Logs", like in the next image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SAjTh8Kf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635921156768_2021-11-02%2B18_12_16-Window.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SAjTh8Kf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635921156768_2021-11-02%2B18_12_16-Window.png" alt="" width="880" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you click "Continue," you will be allowed to add new fields to the content type. The first field to add is the "Message" one, which will store the log message. We will store it in a Long text format because we may have huge messages. &lt;/p&gt;

&lt;p&gt;The first step is to choose the right type of field, like in the next image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CIwBobRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635928712563_2021-11-03%2B09_22_55-Strapi%2B-%2BContent%2BType%2BBuilder.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CIwBobRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635928712563_2021-11-03%2B09_22_55-Strapi%2B-%2BContent%2BType%2BBuilder.png" alt="" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step is to set the field data by typing the name and the base settings, like in the next image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w1PuPS0J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635928753701_2021-11-03%2B09_23_05-Strapi%2B-%2BContent%2BType%2BBuilder.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w1PuPS0J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635928753701_2021-11-03%2B09_23_05-Strapi%2B-%2BContent%2BType%2BBuilder.png" alt="" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is just one of the fields we need. For this basic setup, the list of fields are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;message&lt;/code&gt;, of type text (the one already added in the previous step)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;eventDate&lt;/code&gt; that will contain the date of the log&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;eventLevel&lt;/code&gt; that can be INFO, DEBUG, or ERROR&lt;/li&gt;
&lt;li&gt;A JSON field called data that will store some additional information&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After adding all these fields, the final result should be something like what you see in the next picture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kdVqnpvO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635921156779_2021-11-02%2B20_00_39-Window.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kdVqnpvO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635921156779_2021-11-02%2B20_00_39-Window.png" alt="" width="880" height="301"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another important step is configuring the view to show the most recent logs on top of the list. This can be done easily by editing the view settings like in the next picture. As you can see, we can sort items by &lt;code&gt;date&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt; descending.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--icyS_6Rg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635921156773_2021-11-02%2B19_59_30-Window.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--icyS_6Rg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635921156773_2021-11-02%2B19_59_30-Window.png" alt="" width="880" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can add logs from the interface manually, but this is not our applicative behavior. We need an external system (our frontend application) to send logs by using APIs. Because we have installed the Documentation plugin, we can click on the "Documentation" item on the left menù and land on the documentation page.&lt;/p&gt;

&lt;p&gt;Here we can find a JWT token that we can copy and use later on our app to authenticate web requests. &lt;/p&gt;

&lt;p&gt;You can see it in the next picture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T71aQHfF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635921156776_2021-11-02%2B20_01_17-Window.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T71aQHfF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635921156776_2021-11-02%2B20_01_17-Window.png" alt="" width="820" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, by clicking on "Open the documentation," we will land to the Swagger UI. We can find the "Logs" entity on the list and expand the section, unveiling the Log's APIs like shown in the next picture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JfJphPC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635921156781_2021-11-02%2B20_01_31-Window.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JfJphPC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635921156781_2021-11-02%2B20_01_31-Window.png" alt="" width="406" height="434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Expanding the POST method, we will see a payload prototype to send to the server to create a new log entry. This payload is shown in the next image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZXdvBOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635921259051_2021-11-02%2B19_16_32-Window.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZXdvBOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635921259051_2021-11-02%2B19_16_32-Window.png" alt="" width="372" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After this step, the backend configuration is finished. In this section, we have seen how to configure the server-side part of this tutorial, and now it's time to move on to the client-side and configure a sample application for sending logs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-javascript-library"&gt;
  &lt;/a&gt;
  The javascript library
&lt;/h2&gt;

&lt;p&gt;Since we have the backend service set up, we can start focusing on the client part. Well, this will be very easy and will take a few minutes. All the logic can be implemented by overriding the standard console definition. &lt;/p&gt;

&lt;p&gt;In the next snippet of code, we can see the full implementation of the class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    var console=(function(oldCons){
              return {
                  apiToken: "",
                  url: "",
                  httpPost(log){
                    var xmlhttp = new XMLHttpRequest();                 
                    xmlhttp.open("POST", this.url);
                    xmlhttp.setRequestHeader("Content-Type", "application/json");
                    xmlhttp.setRequestHeader("Authorization", "Bearer "+this.apiToken);
                    xmlhttp.send(JSON.stringify(log));
                  },
                  sendLog(level,input) {
                    var data={}
                    var message="";
                    message=input[0];
                    if(input.length&amp;gt;1){
                      input.splice(0,1);
                      data=input;
                    }
                    var log= {
                          "message": message,
                          "eventDate": new Date(),
                          "eventLevel": level,
                          "data":data
                        };
                      this.httpPost(log);
                      return log;
                  },
                  log: function(...text){
                     var log=this.sendLog("DEBUG",text);
                      oldCons.info(log);
                  },
                  info: function (...text) {
                    var log=this.sendLog("INFO",text);
                    oldCons.info(log);
                  },
                  warn: function (...text) {
                    var log=this.sendLog("WARNING",text);
                    oldCons.warn(log);
                  },
                  error: function (...text) {
                    var log=this.sendLog("ERROR",text);
                    oldCons.error(log);
                  }
              };
          }(window.console));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The library can be easily integrated into every javascript application because it is a simple code snippet with no dependencies. Overriding the console is very smart because every application or framework you have used before is used for logging purposes. &lt;/p&gt;

&lt;p&gt;So, just by injecting this class in the frontend application, your backend will start receiving logs. Note that all the methods support multiple input parameters, so you can call logs by sending a message correlated with log data. Some sample usage of the library are listed in the next snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     console.log(msg,{
            "mydata1":"myvalue1",
            "mydata2":"myvalue2"
          });
    //or
    console.error(msg);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that the javascript library is ready, we can start integrating it on a real-world application!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-it-on-a-javascript-application"&gt;
  &lt;/a&gt;
  Test it on a javascript application
&lt;/h2&gt;

&lt;p&gt;The first step is to create a new application. As the library written in the previous section is plain javascript, we could use any framework. In this example, we used Vue.js. For creating a new application, just run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install &lt;/span&gt;vue
    vue create hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command will create an empty application with a single component called "hello world". The next step is to run the application by typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm run serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The application will be available at the URL &lt;a href="http://localhost:8081"&gt;http://localhost:8081&lt;/a&gt;. Now that the application is up, we have to integrate the library inside the application. We can do that by simply linking the &lt;code&gt;js&lt;/code&gt; into the &lt;code&gt;index.html&lt;/code&gt; file or copying the code in a script tag of the same file. Then we have to configure the client like in the next piece of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html lang=""&amp;gt;
      &amp;lt;head&amp;gt;
        ... code omitted for brevity   
        &amp;lt;!-- &amp;lt;script src="&amp;lt;%= BASE_URL %&amp;gt;log.js"/&amp;gt;  --&amp;gt;
        &amp;lt;script&amp;gt;
          console.url="http://localhost:1337/logs"
          console.apiToken="my apy token";
          window.console = console;
        &amp;lt;/script&amp;gt;
      &amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
        .. code omitted for brevity    
      &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since now, our application will use the console library instead of the standard definition. The final step is to write a component that proves the connection with the backend. We can add to the &lt;code&gt;components/HelloWorld.vue&lt;/code&gt; the following template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;template&amp;gt;
      &amp;lt;div class="hello"&amp;gt;
        &amp;lt;h1&amp;gt;{{ msg }}&amp;lt;/h1&amp;gt;&amp;lt;br&amp;gt;
          &amp;lt;input type="text" v-model="msg" /&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
         &amp;lt;button v-on:click="log()"&amp;gt;LOG&amp;lt;/button&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
         &amp;lt;button v-on:click="info()"&amp;gt;INFO&amp;lt;/button&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
         &amp;lt;button v-on:click="error()"&amp;gt;ERROR&amp;lt;/button&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
         &amp;lt;button v-on:click="warning()"&amp;gt;WARNING&amp;lt;/button&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
         &amp;lt;button v-on:click="messageWithData()"&amp;gt;DATA&amp;lt;/button&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can add to the component the following method for cathing the button click events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    methods: {
        log: function () {
          console.log(this.msg);
        },
        info: function () {
          console.info(this.msg);
        },
        error: function () {
          console.error(this.msg);
        },
        warning: function () {
          console.warn(this.msg);
        },
        messageWithData: function () {
          console.log(this.msg,{
            "mydata1":"myvalue1",
            "mydata2":"myvalue2"
          });
        }
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the code is changed, the application will be automatically reloaded, and you will see the new application running like in the following image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u2VOiXeE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635925502697_2021-11-02%2B19_44_26-Window.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2VOiXeE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635925502697_2021-11-02%2B19_44_26-Window.png" alt="" width="396" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, we can play with buttons sending different messages to the server. You can finally go to the Strapi backend and open the logs section. You will see a list of logs, like in the following image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h3GqIUtB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635925554643_2021-11-02%2B19_58_34-Window.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3GqIUtB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635925554643_2021-11-02%2B19_58_34-Window.png" alt="" width="880" height="175"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you can enter one of the logs received for reading all the details. You will find something similar to what it's shown in the next image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---8uL_9cC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635925593238_2021-11-02%2B19_58_49-Window.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---8uL_9cC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_93C0A6031428D1BFF67932A3D427D67180D627DD351A9AE3819BC5FB2F43FF1E_1635925593238_2021-11-02%2B19_58_49-Window.png" alt="" width="880" height="602"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the previous image, the data sent from the client is stored in Strapi, and you can send messages accompanied by data. That's a great solution for troubleshoot bugs.&lt;/p&gt;

&lt;p&gt;Now that our tutorial is ended is time to think about what we have done and take conclusions!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The great benefit you have with Strapi compared to other headless solutions is that you can customize everything and work on-prem or in the cloud with real control of your application. The example we have seen in this tutorial is easy, but you can imagine evolving to match the real-world need. &lt;/p&gt;

&lt;p&gt;You can set up a solution in minutes and, like in this example, add non-trivial features to your application in minutes. You can add more fields. You can accumulate logs before sending and implement a backend controller that processes multiple logs in a single go. &lt;/p&gt;

&lt;p&gt;This is a starting point for implementing complex solutions. Because Strapi will support for sure any further need, the only limitation it's your fantasy.&lt;/p&gt;

&lt;p&gt;You can download the source code from this &lt;a href="https://github.com/zeppaman/strapi-log"&gt;code repository&lt;/a&gt;, both the Vue.js Frontend and Strapi Backend.&lt;/p&gt;

</description>
      <category>strapi</category>
      <category>app</category>
      <category>logs</category>
      <category>database</category>
    </item>
    <item>
      <title>Tips about Splunk Timecharts</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 07 Dec 2021 11:26:32 +0000</pubDate>
      <link>https://dev.to/adaendra/tips-about-splunk-timecharts-13d2</link>
      <guid>https://dev.to/adaendra/tips-about-splunk-timecharts-13d2</guid>
      <description>&lt;p&gt;In some requests or in some dashboards, you want to have a timechart to visualize &lt;em&gt;(for example)&lt;/em&gt; how much calls you receive for an operation.&lt;/p&gt;

&lt;p&gt;So here are 2 tips which can help you to work with!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#span"&gt;
  &lt;/a&gt;
  Span
&lt;/h2&gt;

&lt;p&gt;By default, the timechart will group the data with a span depending of the time period you choose. But maybe you want to fix this span a particular value.&lt;br&gt;
So here is the parameter&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;timechart &lt;strong&gt;span=&lt;/strong&gt;&lt;em&gt;[time]&lt;/em&gt; ...&lt;br&gt;
Where &lt;strong&gt;time&lt;/strong&gt; is a number associated with a letter to define the time span.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#letters-available"&gt;
  &lt;/a&gt;
  Letters available
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;s&lt;/strong&gt; - &lt;em&gt;second&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;m&lt;/strong&gt; - &lt;em&gt;minute&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;h&lt;/strong&gt; - &lt;em&gt;hour&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;d&lt;/strong&gt; - &lt;em&gt;day&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;w&lt;/strong&gt; - &lt;em&gt;week&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# 1 hour span
index=application_a | timechart span=1h count by name

# 10 seconds span
index=application_b | timechart span=10s count by title
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#thing-to-avoid"&gt;
  &lt;/a&gt;
  Thing to avoid
&lt;/h2&gt;

&lt;p&gt;When you are using the timechart, avoid to have a "&lt;strong&gt;sort&lt;/strong&gt;" in it. It won't be useful and it can alter your result.&lt;/p&gt;

&lt;p&gt;In a larger way, be sure to remove all the treatments which are not useful for your request. It will take more time for your request to be executed and as said, you can retrieve a false result.&lt;/p&gt;




&lt;p&gt;I hope it will help you! 🍺&lt;/p&gt;

</description>
      <category>splunk</category>
      <category>monitoring</category>
      <category>sre</category>
    </item>
    <item>
      <title>Day 10 - Tribute Page | #100DaysOfCode</title>
      <author>MD Jannatin Naim</author>
      <pubDate>Tue, 07 Dec 2021 11:22:10 +0000</pubDate>
      <link>https://dev.to/jannatinnaim/day-10-tribute-page-100daysofcode-1dad</link>
      <guid>https://dev.to/jannatinnaim/day-10-tribute-page-100daysofcode-1dad</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IoEmRYsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmlwxt4ju483jc77vtvm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IoEmRYsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmlwxt4ju483jc77vtvm.jpg" alt="Coding Motivation Banner" width="880" height="1100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-did-i-learn-today"&gt;
  &lt;/a&gt;
  What did I learn today?
&lt;/h3&gt;

&lt;p&gt;I didn't learn anything, but I started working on the Tribute Page project from FCC. I've done some basic page structure setup and nothing else. The site is &lt;a href="https://jnaim.me/TributeToUchihaMadara/"&gt;deployed here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-problems-did-i-face"&gt;
  &lt;/a&gt;
  What problems did I face?
&lt;/h3&gt;

&lt;p&gt;I haven't faced any problems so far making this page. Although, it's just the start. So, problems will ensue soon enough.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-i-want-to-do-tomorrow"&gt;
  &lt;/a&gt;
  What do I want to do tomorrow?
&lt;/h3&gt;

&lt;p&gt;I'll be working on this page tomorrow too as this isn't finished yet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-is-the-experience-so-far"&gt;
  &lt;/a&gt;
  How is the experience so far?
&lt;/h3&gt;

&lt;p&gt;I finally got some experience with setting up a real world project and honestly, it's fun.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/JannatinNaim/"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Service instances in Angular</title>
      <author>Alireza Razinejad</author>
      <pubDate>Tue, 07 Dec 2021 11:15:00 +0000</pubDate>
      <link>https://dev.to/ussdlover/service-instances-in-angular-4aj</link>
      <guid>https://dev.to/ussdlover/service-instances-in-angular-4aj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-instance"&gt;
  &lt;/a&gt;
  What is instance?
&lt;/h2&gt;

&lt;p&gt;In JavaScript instance simply mean a new child has been born with same DNA as their parent, and same DNA mean they have all their parents attributes.&lt;/p&gt;

&lt;p&gt;So here(In JS world) Parent is Class which is, in our case it is service!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-service"&gt;
  &lt;/a&gt;
  What is service?
&lt;/h2&gt;

&lt;p&gt;Service is just another class which have been decorated with &lt;code&gt;@Injectable()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When mark a class with this decorator we actually telling Angular to consider this class as injectable objects which can be used and injected into other classes.&lt;/p&gt;

&lt;p&gt;Take this code as an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyService&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MyService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we run our app this way, we will face error with title &lt;code&gt;Null Injector&lt;/code&gt; which is saying that service is not provided any where so it is not usable!&lt;/p&gt;

&lt;p&gt;That simply mean, this service does not have any instance available for our component to be used!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#we-have-three-way-of-creating-instances"&gt;
  &lt;/a&gt;
  We have three way of creating Instances
&lt;/h1&gt;

&lt;p&gt;Angular give us three way to create instance from our service, and those will cover every use cases we have.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#singleton-instance"&gt;
  &lt;/a&gt;
  Singleton Instance
&lt;/h3&gt;

&lt;p&gt;Singleton mean, we will create only one instance!&lt;/p&gt;

&lt;p&gt;Let's say we need to have a service to handle Authorization operations, of course we do not want to have two instance of that service, because maybe we do not want to use &lt;code&gt;NgRx&lt;/code&gt; as state management as it is too complicate and we are too lazy to learn it!&lt;br&gt;
So can store user related states in our service, but we need to make sure there is only one instance!&lt;/p&gt;

&lt;p&gt;Angular made it as easy as the following code!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;providedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MySingletonService&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key is &lt;code&gt;providedIn&lt;/code&gt; field, which will tell Angular to provide it in root of our app, so we will have one instance of our service in the app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instance-per-module"&gt;
  &lt;/a&gt;
  Instance per module
&lt;/h3&gt;

&lt;p&gt;In the last section we can see we have provided the service in the root of the app.&lt;/p&gt;

&lt;p&gt;But what if we want to create instance of our service per module!&lt;/p&gt;

&lt;p&gt;Let's say we have some main modules that require some functionalities which is the same per each one of them (Like API calls) and also those modules will need to store some state in the service which provide those functionalities (Store API responses) but stored states(data) should be unique per each module.&lt;/p&gt;

&lt;p&gt;The solution is as simple as the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyService&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
 &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;MyService&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;FirstModule&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
 &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;MyService&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SecondModule&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
 &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;MyService&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ThirdModule&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we just provided the service to that module using &lt;code&gt;providers&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;No every component which is declared in those module can safely inject that service and be sure any data which is stored in those services(instances) is unique.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instance-per-component"&gt;
  &lt;/a&gt;
  Instance per component
&lt;/h3&gt;

&lt;p&gt;This is amazing! I use this solution in my every day problem solving!&lt;/p&gt;

&lt;p&gt;This one can help us keep components out of any complex logic and make them highly testable!&lt;/p&gt;

&lt;p&gt;Let's say that have created a Facades layer to simplify access to data layer (Services which is responsible to make API calls and provide data to presentation layer).&lt;/p&gt;

&lt;p&gt;Those facades layers should be exists on their own and they not even need to store anything in them!&lt;/p&gt;

&lt;p&gt;So we can create them only when the component which needed that service is come alive and simply destroy it when component destroyed!&lt;/p&gt;

&lt;p&gt;The solution is as simple as just provide it to component!!!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MySrvice&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
 &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;MyService&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MyService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#how-to-destroy-it-with-component"&gt;
  &lt;/a&gt;
  How to destroy it with component?
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MySrvice&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes!! we can implement &lt;code&gt;OnDestroy&lt;/code&gt; interface/lifecycle on service this way!&lt;/p&gt;

&lt;p&gt;And now we know the three way of creating instances of our services in Angular.&lt;/p&gt;

&lt;p&gt;Thank you for your time and reading this.&lt;br&gt;
Hope you liked.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>frontend</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to create a parallax on pure Javascript</title>
      <author>Anton</author>
      <pubDate>Tue, 07 Dec 2021 10:58:24 +0000</pubDate>
      <link>https://dev.to/antmik/how-to-create-a-parallax-on-pure-javascript-5hgj</link>
      <guid>https://dev.to/antmik/how-to-create-a-parallax-on-pure-javascript-5hgj</guid>
      <description>&lt;p&gt;Everyone at least once has seen parallax effects on a website. They could’ve been simple. Such as a static background on a specific spot while scrolling. On the other hand, these effects can be extremely complex. However usually visually this effect looks impressive.&lt;/p&gt;

&lt;p&gt;Parallax always amazed me. How it’s done in web development. It seemed to me so complex and unachievable. Then after a couple of years of contemplation of beautiful websites using this technique I decided to give it a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is parallax?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The meaning of the word “parallax” refers to a specific technique used in computer graphics. Multiple layers move at different speeds, while the user scrolls a webpage. This number of movements creates an optical illusion. To be honest the technique is not new. Ii was used in the early 1980’s Super Mario Bros game to create the sensation of depth. Then this graphic trick got a second life in web design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tech stack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As already mentioned above here I used vanillaJS (pure JavaScript). Pug templating language was used to accelerate work with HTML. As well as SCSS instead of pure CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What was created and how it works?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It started as an experiment. Though at the end turned into a small library. It requires a small HTML and a few Javascript functions. We have specific classes. Each &lt;code&gt;.prlx-item-inner&lt;/code&gt; can have an animation. Also, each one can have multiple animations. So you can combine for instance zoom with spinning.&lt;/p&gt;

&lt;p&gt;This code can be used on any HTML website. Javascript &lt;em&gt;&lt;code&gt;(function () {} )&lt;/code&gt;&lt;/em&gt; wrapping will prevent conflicting with any other library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reusable classes list&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Directional movements classes: let, right,top,bottom&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;speed- — Can have any number. Ex.: &lt;code&gt;speed-3&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;spin — spinning object&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;zoom — zooms out&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;To structure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The basic elements needed for this are the container and the number of inside elements which gonna is moving on scroll.&lt;/p&gt;

&lt;p&gt;Here is the HTML code: &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#prlx-container
  .text-top
    p Scroll down to see the parallax effect
  .row
    .prlx-item
      .prlx-item-inner.left.speed-3
    .prlx-item
      .prlx-item-inner.top.speed-2.spin
    .prlx-item
      .prlx-item-inner.right
    .prlx-item
      .prlx-item-inner.left.speed-5
    .prlx-item
      .prlx-item-inner.zoom.speed-2
    .prlx-item
      .prlx-item-inner.right.speed-5
    .prlx-item
      .prlx-item-inner.left
    .prlx-item
      .prlx-item-inner.bottom
    .prlx-item
      .prlx-item-inner.right.spin
  .side-dots
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In this example I set &lt;code&gt;.row&lt;/code&gt; element as &lt;em&gt;&lt;code&gt;position:fixed;&lt;/code&gt;&lt;/em&gt;. So it’s always will be visible.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;.prlx-item-inner&lt;/em&gt; has to be &lt;em&gt;position:absolute;&lt;/em&gt; this way we can control it with x,y (top, left) coordinates. It’s parent &lt;em&gt;.prlx-item&lt;/em&gt; is &lt;em&gt;position: relative;&lt;/em&gt;. That way it’s children will move relatively to the parent instead moving relatively the whole viewport.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are three functions responsible for movements. &lt;code&gt;zoom()&lt;/code&gt;, &lt;code&gt;spin()&lt;/code&gt;, &lt;code&gt;move()&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;checkMovement()&lt;/code&gt; check which direction, speed and animation type is set to an element. Then&lt;code&gt;bindMovementsToElement()&lt;/code&gt; binds specific animations to an html element.&lt;/p&gt;

&lt;p&gt;At the end of the file we have &lt;em&gt;&lt;code&gt;window.addEventListener(‘scroll’, ()=&amp;gt;{})&lt;/code&gt;&lt;/em&gt; event which triggered each time scrolling happens and activates animations on html elements.&lt;/p&gt;

&lt;p&gt;That’s it. Nothing more. The code is simple and quick.&lt;/p&gt;

&lt;p&gt;Here is the code itself:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/AntM/embed/YRMoLo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It started as an experiment. Though at the end turned into a small library. Maybe one day I will publish it on github. At the moment anyone can try it on codepen and use on his own website.&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>css</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Cross browser speech synthesis - the hard way and the easy way</title>
      <author>Jan Küster</author>
      <pubDate>Tue, 07 Dec 2021 10:42:24 +0000</pubDate>
      <link>https://dev.to/jankapunkt/cross-browser-speech-synthesis-the-hard-way-and-the-easy-way-353</link>
      <guid>https://dev.to/jankapunkt/cross-browser-speech-synthesis-the-hard-way-and-the-easy-way-353</guid>
      <description>&lt;p&gt;When I implemented my first speech-synthesis app using the &lt;a href="https://wicg.github.io/speech-api/"&gt;&lt;code&gt;Web Speech API&lt;/code&gt;&lt;/a&gt; I was shocked how hard it was to setup and execute it with cross-browser support in mind: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some browsers don't support &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis"&gt;speech synthesis&lt;/a&gt; at all, for instance IE (at least I don't care 🤷‍♂️) and Opera (I do care 😠) and a few more mobile browsers (I haven't decided yet, whether I care or not 🤔). &lt;/li&gt;
&lt;li&gt;On top of that, each browser implements the API differently or with some specific quirks the other browsers don't have&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Just try it yourself&lt;/strong&gt; - go to and execute the &lt;a href="https://mdn.github.io/web-speech-api/speak-easy-synthesis/"&gt;MDN speech synthesis example&lt;/a&gt; on different browsers and different platforms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux, Windows, MacOS, BSD, Android, iOS&lt;/li&gt;
&lt;li&gt;Firefox, Chrome, Chromium, Safari, Opera, Edge, IE, Samsung Browser, Android Webview, Safari on iOS, Opera Mini&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will realize that this example will only work on a subset of these platform-browser combinations. Worst: when you start researching you'll get shocked how quirky and underdeveloped this whole API still is in 2021/2022.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To be fair:&lt;/strong&gt; it is still labeled as experimental technology. However, it's almost &lt;a href="https://www.w3.org/2005/Incubator/htmlspeech/XGR-htmlspeech-20111206/"&gt;10 years&lt;/a&gt; now, since it has been drafted and still is not a living standard.&lt;/p&gt;

&lt;p&gt;This makes it much harder to leverage for our applications and I hope this guide I will help you to get the most out of it for as many browsers as possible.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#minimal-example"&gt;
  &lt;/a&gt;
  Minimal example
&lt;/h2&gt;

&lt;p&gt;Let's approach this topic step-by-step and start with a minimal example that all browsers (that generally support speech synthesis) should run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;speechSynthesis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can simply copy that code and execute it in your browser console.&lt;/p&gt;

&lt;p&gt;If you have basic support you will hear some "default" voice speaking the text &lt;code&gt;'Hello, world!'&lt;/code&gt; and it may sound natural or not, depending on the default "voice" that is used.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#loading-voices"&gt;
  &lt;/a&gt;
  Loading voices
&lt;/h2&gt;

&lt;p&gt;Browsers may detect your current language and select a default voice, if installed. However, this may not represent the desired language you'd like to hear for the text to be spoken.&lt;/p&gt;

&lt;p&gt;In such case you need to load the list of voices, which are instances of &lt;code&gt;SpeechSynthesisVoice&lt;/code&gt;. This is the first greater obstacle where browsers behave quite differently:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load voices sync-style&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;voices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;voices&lt;/span&gt; &lt;span class="c1"&gt;// Array of voices or empty if none are installed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Firefox and Safari Desktop just load the voices immediately in sync-style. This however would return an empty array on Chrome Desktop, Chrome Android and &lt;strong&gt;may&lt;/strong&gt; return an empty Array on Firefox Android (see next section).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load voices async-style&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onvoiceschanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;voices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;voices&lt;/span&gt; &lt;span class="c1"&gt;// Array of voices or empty if none are installed&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This methods loads the voices async, so your overall system needs a callback or wrap it with a &lt;code&gt;Promise&lt;/code&gt;. Firefox Desktop does not support this method at all, although it's defined as property of &lt;code&gt;window.speechSynthesis&lt;/code&gt;, while Safari does not have it at all.&lt;/p&gt;

&lt;p&gt;In contrast: Firefox Android loads the voices the first time using this method and on a refresh has them available via the sync-style method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loading using interval&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some users of older Safari have reported that their voices are not available immediately (while &lt;code&gt;onvoiceschanged&lt;/code&gt; is not available, too). For this case we need to check in a constant interval for the voices:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadVoices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;voices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;maxTimeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loadVoices max timeout exceeded&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;loadVoices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;loadVoices&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;voices&lt;/span&gt; &lt;span class="c1"&gt;// voices loaded and available&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#speaking-with-a-certain-voice"&gt;
  &lt;/a&gt;
  Speaking with a certain voice
&lt;/h2&gt;

&lt;p&gt;There are use-cases, where the default selected voice is not the same language as the text to be spoken. We need to change the voice for the "utterance" to speak.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1-get-a-voice-by-a-given-language"&gt;
  &lt;/a&gt;
  Step 1: get a voice by a given language
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// assume voices are loaded, see previous section&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getVoicebyLang&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lang&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;voice&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;voice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;german&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getVoicebyLang&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;de&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note: Voices have standard language codes, like &lt;code&gt;en-GB&lt;/code&gt; or &lt;code&gt;en-US&lt;/code&gt; or &lt;code&gt;de-DE&lt;/code&gt;. However, on Android's Samsung Browser or Android Chrome voices have underscore-connected codes, like &lt;code&gt;en_GB&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then on Firefox android voices have three characters before the separator, like &lt;code&gt;deu-DEU-f00&lt;/code&gt; or &lt;code&gt;eng-GBR-f00&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, they all start with the language code so passing a two-letter short-code should be sufficient.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2-create-a-new-utterance"&gt;
  &lt;/a&gt;
  Step 2: create a new utterance
&lt;/h3&gt;

&lt;p&gt;We can now pass the voice to a new &lt;code&gt;SpeechSynthesisUtterance&lt;/code&gt; and as your precognitive abilities correctly manifest - there are again some browser-specific issues to consider:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Guten Tag!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;utterance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// I found no browser yet that does not support text&lt;/span&gt;
  &lt;span class="c1"&gt;// as constructor arg but who knows!?&lt;/span&gt;
  &lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;voice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;german&lt;/span&gt; &lt;span class="c1"&gt;// ios required&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;voice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt; &lt;span class="c1"&gt;// // Android Chrome required&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;voiceURI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;voice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;voiceURI&lt;/span&gt; &lt;span class="c1"&gt;// Who knows if required?&lt;/span&gt;

&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pitch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;// API allows up to 10 but values &amp;gt; 2 break on all Chrome&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can now pass the utterance to the speak function as a preview:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// speaks 'Guten Tag!' in German&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-events-and-speak"&gt;
  &lt;/a&gt;
  Step 3: add events and speak
&lt;/h3&gt;

&lt;p&gt;This is of course just the half of it. We actually want to get deeper insights of what's happening and what's missing by tapping into some of the utterance's events:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onstart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// SSML markup is rarely supported&lt;/span&gt;
&lt;span class="c1"&gt;// See: https://www.w3.org/TR/speech-synthesis/&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;

&lt;span class="c1"&gt;// word boundaries are supported by&lt;/span&gt;
&lt;span class="c1"&gt;// Safari MacOS and on windows but&lt;/span&gt;
&lt;span class="c1"&gt;// not on Linux and Android browsers&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onboundary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;

&lt;span class="c1"&gt;// not supported / fired&lt;/span&gt;
&lt;span class="c1"&gt;// on many browsers somehow&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onpause&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onresume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;

&lt;span class="c1"&gt;// finally speak and log all the events&lt;/span&gt;
&lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-4-chromespecific-fix"&gt;
  &lt;/a&gt;
  Step 4: Chrome-specific fix
&lt;/h3&gt;

&lt;p&gt;Longer texts on Chrome-Desktop will be cancelled automatically after 15 seconds. This can be fixed by either chunking the texts or by using an interval of "zero"-latency pause/resume combination. At the same time this fix breaks on Android, since Android devices don't implement &lt;code&gt;speechSynthesis.pause()&lt;/code&gt; as pause but as cancel:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt;

&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onstart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// detection is up to you for this article as&lt;/span&gt;
  &lt;span class="c1"&gt;// this is an own huge topic for itself&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isAndroid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resumeInfinity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;clear&lt;/span&gt;
&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;clear&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resumeInfinity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// prevent memory-leak in case utterance is deleted, while this is ongoing&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resume&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resumeInfinity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Furthermore, some browser don't update the &lt;code&gt;speechSynthesis.paused&lt;/code&gt; property when &lt;code&gt;speechSynthesis.pause()&lt;/code&gt; is executed (and speech is correctly paused). You need to manage these states yourself then.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#issues-that-cant-be-fixed-with-javascript"&gt;
  &lt;/a&gt;
  Issues that can't be fixed with JavaScript:
&lt;/h2&gt;

&lt;p&gt;All the above fixes rely on JavaScript but some issues are platform-specific. You need to your app in a way to avoid these issues, where possible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All browsers on Android actually do a cancel/stop when calling &lt;code&gt;speechSynthesis.pause&lt;/code&gt;; pause is simply not supported on Android 👎&lt;/li&gt;
&lt;li&gt;There are no voices on Chromium-Ubuntu and Ubuntu-derivatives unless the browser is started with a flag 👎&lt;/li&gt;
&lt;li&gt;If on Chromium-Desktop Ubuntu and the very first page wants to load speech synthesis, then there are no voices ever loaded until the page is refreshed or a new page is entered. This can be fixed with JavaScript but it can lead to very bad UX to auto-refresh the page. 👎&lt;/li&gt;
&lt;li&gt;If voices are not installed on the host-OS and there are no voices loaded from remote by the browser, then there are no voices and thus no speech synthesis 👎&lt;/li&gt;
&lt;li&gt;There is no chance to just instant-load custom voices from remote and use them as a shim in case there are no voices 👎&lt;/li&gt;
&lt;li&gt;If the installed voices are just bad users have to manually install better voices 👎&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#making-your-life-easier-with-raw-easyspeech-endraw-"&gt;
  &lt;/a&gt;
  Making your life easier with &lt;code&gt;EasySpeech&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Now you have seen the worst and believe me, it takes ages to implement all potential fixes.&lt;/p&gt;

&lt;p&gt;Fortunately I already did this and published a package to NPM with the intent to provide a common API that handles most issues internally and provide the same experience across browsers (that support &lt;code&gt;speechSynthesis&lt;/code&gt;):&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jankapunkt"&gt;
        jankapunkt
      &lt;/a&gt; / &lt;a href="https://github.com/jankapunkt/easy-speech"&gt;
        easy-speech
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Cross browser Speech Synthesis
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Easy Speech&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://standardjs.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bde227e3207c7143032c0feb73889ffbda8eb1ef234b820b915ccaf74f9c66d7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64655f7374796c652d7374616e646172642d627269676874677265656e2e737667" alt="JavaScript Style Guide"&gt;&lt;/a&gt;
&lt;a href="https://www.repostatus.org/#active" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2261082c77808ea734741b12e535d02d23c4101f6b8dfec807f4ddc5ef2eeec0/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667" alt="Project Status: Active – The project has reached a stable, usable state and is being actively developed."&gt;&lt;/a&gt;
&lt;a href="https://github.com/jankapunkt/easy-speech/actions/workflows/tests.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--epeI6eag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jankapunkt/easy-speech/actions/workflows/tests.yml/badge.svg" alt="Test suite"&gt;&lt;/a&gt;
&lt;a href="https://github.com/jankapunkt/easy-speech/actions/workflows/codeql-analysis.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nj5PvfWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jankapunkt/easy-speech/actions/workflows/codeql-analysis.yml/badge.svg" alt="CodeQL Semantic Analysis"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8941ce460d3b29a0251d69254408f9a6e4a933d267a4316a4108416b1860cda4/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f656173792d737065656368"&gt;&lt;img src="https://camo.githubusercontent.com/8941ce460d3b29a0251d69254408f9a6e4a933d267a4316a4108416b1860cda4/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f656173792d737065656368" alt="npm"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/b164de05851de3a51ddeba04db3bef0713f150f9df29a855638ded9cec2fc305/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e2f656173792d737065656368"&gt;&lt;img src="https://camo.githubusercontent.com/b164de05851de3a51ddeba04db3bef0713f150f9df29a855638ded9cec2fc305/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e2f656173792d737065656368" alt="npm bundle size"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/fc3e1111654817a8302274b84a09df2ecf166ede7a1de2ea4f346ddb5d715885/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f656173792d737065656368"&gt;&lt;img src="https://camo.githubusercontent.com/fc3e1111654817a8302274b84a09df2ecf166ede7a1de2ea4f346ddb5d715885/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f656173792d737065656368" alt="npm bundle size"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cross browser Speech Synthesis&lt;/p&gt;
&lt;p&gt;This project was created, because it's always a struggle to get the synthesis
part of &lt;code&gt;Web Speech API&lt;/code&gt; running on most major browsers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this is not a polyfill package, if your target browser does not
support speech synthesis or the Web Speech API, this package is not usable.&lt;/p&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;p&gt;Install from npm via&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;$ npm install easy-speech&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Import &lt;code&gt;EasySpeech&lt;/code&gt; and first, detect, if your browser is capable of tts (text
to speech):&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;EasySpeech&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'easy-speech'&lt;/span&gt;
&lt;span class="pl-v"&gt;EasySpeech&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;detect&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;it returns an Object with the following information:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-c1"&gt;speechSynthesis&lt;/span&gt;: &lt;span class="pl-v"&gt;SpeechSynthesis&lt;/span&gt;&lt;span class="pl-c1"&gt;|&lt;/span&gt;&lt;span class="pl-c1"&gt;undefined&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;speechSynthesisUtterance&lt;/span&gt;: &lt;span class="pl-v"&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class="pl-c1"&gt;|&lt;/span&gt;&lt;span class="pl-c1"&gt;undefined&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;speechSynthesisVoice&lt;/span&gt;: &lt;span class="pl-v"&gt;SpeechSynthesisVoice&lt;/span&gt;&lt;span class="pl-c1"&gt;|&lt;/span&gt;&lt;span class="pl-c1"&gt;undefined&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;speechSynthesisEvent&lt;/span&gt;: &lt;span class="pl-v"&gt;SpeechSynthesisEvent&lt;/span&gt;&lt;span class="pl-c1"&gt;|&lt;/span&gt;&lt;span class="pl-c1"&gt;undefined&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;speechSynthesisErrorEvent&lt;/span&gt;: &lt;span class="pl-v"&gt;SpeechSynthesisErrorEvent&lt;/span&gt;&lt;span class="pl-c1"&gt;|&lt;/span&gt;&lt;span class="pl-c1"&gt;undefined&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;onvoiceschanged&lt;/span&gt;: &lt;span class="pl-v"&gt;Boolean&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;onboundary&lt;/span&gt;: &lt;span class="pl-v"&gt;Boolean&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;onend&lt;/span&gt;: &lt;span class="pl-v"&gt;Boolean&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;onerror&lt;/span&gt;: &lt;span class="pl-v"&gt;Boolean&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;onmark&lt;/span&gt;: &lt;span class="pl-v"&gt;Boolean&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;onpause&lt;/span&gt;: &lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jankapunkt/easy-speech"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should give it a try if you want to implement speech synthesis the next time. It also comes with a DEMO page so you can easy test and debug your devices there: &lt;a href="https://jankapunkt.github.io/easy-speech/"&gt;https://jankapunkt.github.io/easy-speech/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take a look how it works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;EasySpeech&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;easy-speech&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// sync, returns Object with detected features&lt;/span&gt;
&lt;span class="nx"&gt;EasySpeech&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;EasySpeech&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no speech synthesis:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;EasySpeech&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will not only detect, which features are available but also loads an optimal default voice, based on a few heuristics.&lt;/p&gt;

&lt;p&gt;Of course there is much more to use and the full API is also documented via JSDoc: &lt;a href="https://github.com/jankapunkt/easy-speech/blob/master/API.md"&gt;https://github.com/jankapunkt/easy-speech/blob/master/API.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like it leave a star and please file an issue if you found (yet another) browser-specific issue.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wicg.github.io/speech-api/#tts-section"&gt;https://wicg.github.io/speech-api/#tts-section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis"&gt;https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/alrra/6741915"&gt;https://gist.github.com/alrra/6741915&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ubershmekel/audio-language-tests"&gt;https://github.com/ubershmekel/audio-language-tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/33889107/speech-synthesis-in-chrome-for-android-not-loading-voices"&gt;https://stackoverflow.com/questions/33889107/speech-synthesis-in-chrome-for-android-not-loading-voices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/49506716/speechsynthesis-getvoices-returns-empty-array-on-windows"&gt;https://stackoverflow.com/questions/49506716/speechsynthesis-getvoices-returns-empty-array-on-windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/21947730/chrome-speech-synthesis-with-longer-texts"&gt;https://stackoverflow.com/questions/21947730/chrome-speech-synthesis-with-longer-texts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/34130734"&gt;https://stackoverflow.com/a/34130734&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/68060634"&gt;https://stackoverflow.com/a/68060634&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/48056986"&gt;https://stackoverflow.com/a/48056986&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=582455"&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=582455&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/65883556"&gt;https://stackoverflow.com/a/65883556&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>browser</category>
      <category>javascript</category>
      <category>standards</category>
    </item>
    <item>
      <title>Should you optimize every re-render?</title>
      <author>Kevin Farrugia</author>
      <pubDate>Tue, 07 Dec 2021 10:35:35 +0000</pubDate>
      <link>https://dev.to/imkevdev/should-you-optimize-every-re-render-56me</link>
      <guid>https://dev.to/imkevdev/should-you-optimize-every-re-render-56me</guid>
      <description>&lt;p&gt;Cross-posted from &lt;a href="https://imkev.dev/optimizing-rerenders"&gt;https://imkev.dev/optimizing-rerenders&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the more frequent discussions I have with my colleagues is whether we should be investing the effort to optimize a React re-render (re-render).&lt;/p&gt;

&lt;p&gt;React determines which components need to be re-rendered during the &lt;code&gt;render&lt;/code&gt; phase. During this phase, React traverses the &lt;code&gt;current&lt;/code&gt; Fiber tree and creates a list of &lt;a href="https://reactjs.org/docs/hooks-overview.html#effect-hook"&gt;effects&lt;/a&gt; that need to be applied to the Fiber nodes. The &lt;code&gt;current&lt;/code&gt; tree reflects the state of the application that was used to render the UI. As React processes effects, it clones the current tree and performs these updates on the &lt;code&gt;current&lt;/code&gt; tree, resulting in a new &lt;code&gt;workInProgress&lt;/code&gt; tree. Once all updates are processed, React will flush the &lt;code&gt;workInProgress&lt;/code&gt; tree to the DOM and this will become the &lt;code&gt;current&lt;/code&gt; tree. If you're interested in more detail, I cover the &lt;a href="https://dev.to/react-reconciliation-performance-measures"&gt;React Reconciliation&lt;/a&gt; algorithm in a separate post.&lt;/p&gt;

&lt;p&gt;A render is usually required whenever your props or state change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, if &lt;code&gt;data&lt;/code&gt; changes, then we need to re-render the component with the latest values so these changes are reflected on the screen. Since we know that the component's output is dependent on &lt;code&gt;data&lt;/code&gt;, if &lt;code&gt;data&lt;/code&gt; does not change, then there is no need to recalculate the output as that is also unchanged. This allows us to use &lt;a href="https://reactjs.org/docs/react-api.html#reactmemo"&gt;&lt;code&gt;React.memo&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://reactjs.org/docs/react-api.html#reactpurecomponent"&gt;&lt;code&gt;React.PureComponent&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What we &lt;em&gt;do not&lt;/em&gt; want, is to re-render the component when &lt;code&gt;data&lt;/code&gt; does not change. This is what I refer to as an &lt;em&gt;unnecessary re-render&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-all-rerenders-are-bad"&gt;
  &lt;/a&gt;
  Not all re-renders are bad
&lt;/h2&gt;

&lt;p&gt;Not all re-renders are equal. Some re-renders are more CPU intensive than others. You may debug React re-rendering using the &lt;a href="https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab"&gt;React Profiler&lt;/a&gt; Chrome extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="/media/blog/rerendering.png" class="article-body-image-wrapper"&gt;&lt;img src="/media/blog/rerendering.png" alt="Chrome DevTools React Profiler showing two panels. Left panel shows components which have been re-rendered. Right panel shows time spent on each re-render" title="React Profiler"&gt;&lt;/a&gt; {.centered}&lt;/p&gt;

&lt;p&gt;The left column shows which components have been re-rendered, while the right column shows you how many times the component has re-rendered. Each re-rendering also includes the component's self-time - the time it takes to execute the &lt;code&gt;render()&lt;/code&gt; method for that component.&lt;/p&gt;

&lt;p&gt;In most cases, the time spent rendering each component is a few milliseconds. This has led to the argument that &lt;a href="https://mobile.twitter.com/iamakulov/status/1362397452884717571"&gt;not all unnecessary re-renders are bad&lt;/a&gt;; a statement I have to disagree with*.&lt;/p&gt;

&lt;p&gt;While not all re-renders are equally important, I believe that &lt;em&gt;all&lt;/em&gt; unnecessary re-renders should be eliminated to improve your applications reliability.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ClickCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Update counter&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demo: &lt;a href="https://codesandbox.io/s/re-rendering-demo-cpo2g?file=/src/ClickCounter.js"&gt;/src/ClickCounter.js&lt;/a&gt; {.caption}&lt;/p&gt;

&lt;p&gt;Whenever &lt;code&gt;count&lt;/code&gt; is updated, &lt;code&gt;MyComponent&lt;/code&gt; will be re-rendered, even if it is not dependent on &lt;code&gt;count&lt;/code&gt;. This is caused as you are passing a new array reference on each render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The correct solution would be to create a constant and place it outside of the &lt;code&gt;ClickCounter&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ClickCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Update counter&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demo: &lt;a href="https://codesandbox.io/s/re-rendering-demo-solution-k6p0z?file=/src/ClickCounter.js"&gt;/src/ClickCounter.js&lt;/a&gt; {.caption}&lt;/p&gt;

&lt;p&gt;This no longer renders &lt;code&gt;MyComponent&lt;/code&gt; whenever the user clicks on the &lt;code&gt;button&lt;/code&gt; to update &lt;code&gt;count&lt;/code&gt;. But how much faster is our application following this optimization? Most likely, the improvements are negligible. So does this mean you shouldn't bother optimizing your re-renders?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demo: &lt;a href="https://codesandbox.io/s/re-rendering-demo-bug-tbkhm?file=/src/Demo.js"&gt;/src/Demo.js&lt;/a&gt; { .caption }&lt;/p&gt;

&lt;p&gt;In the example above, we have two instances of &lt;code&gt;MyComponent&lt;/code&gt;; one which re-renders on each render and one which is correctly optimized. The &lt;code&gt;Demo&lt;/code&gt; itself component will render whenever &lt;code&gt;location&lt;/code&gt; changes, using the &lt;code&gt;useLocation&lt;/code&gt; hook from &lt;a href="https://reactrouter.com/"&gt;React Router&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In most cases, these two components will behave identically. But in the first &lt;code&gt;MyComponent&lt;/code&gt;, there is the premise for obscure bugs which would be hidden by causing the component to needlessly re-render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demo: &lt;a href="https://codesandbox.io/s/re-rendering-demo-bug-tbkhm?file=/src/MyComponent.js"&gt;/src/MyComponent.js&lt;/a&gt; { .caption }&lt;/p&gt;

&lt;p&gt;If the rendered output of a component is dependent on more than its props, then needlessly re-rendering the component may hide this issue. In &lt;code&gt;MyComponent&lt;/code&gt;, the rendered output includes the &lt;code&gt;location.pathname&lt;/code&gt;, which would change whenever the URL changes. If the component does not re-render, then the updated &lt;code&gt;location.pathname&lt;/code&gt; would not be visible on the screen. As a result, the &lt;code&gt;MyComponent&lt;/code&gt; which needlessly re-renders would reflect this change on the next render, while the optimized component would not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course in this example, we are simplifying things greatly and the issue is both easy to find and fix. However, from my experience, sometimes these bugs could go unnoticed for a very long time, making them very difficult to debug and eventually resolve.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-unnecessary-rerenders"&gt;
  &lt;/a&gt;
  Other unnecessary re-renders
&lt;/h3&gt;

&lt;p&gt;There are other forms of unnecessary renders. Similar to the new array reference, passing an object or a function will cause the component to re-render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This could be mitigated by either placing the object outside of the component's render method or memoizing the prop using &lt;a href="https://reactjs.org/docs/hooks-reference.html#usememo"&gt;&lt;code&gt;React.useMemo&lt;/code&gt;&lt;/a&gt;. The latter is usually required if the prop is dependent on other prop or state variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt;
    &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React includes &lt;a href="https://reactjs.org/docs/hooks-reference.html#usecallback"&gt;&lt;code&gt;React.useCallback&lt;/code&gt;&lt;/a&gt; which returns a memoized callback function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClickHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Passing a React component as a prop will have a similar effect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And once again, the recommended solution is similar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;While the performance improvements from optimizing every render may not always be significant, maintaining a &lt;a href="https://en.wikipedia.org/wiki/Pure_function"&gt;pure&lt;/a&gt; codebase makes your work more predictable. If the output of every component is dependent on its inputs, then you minimize the risk of unwanted side effects. And you also get good performance "out-of-the-box".&lt;/p&gt;

&lt;p&gt;Let me know what you think. 🤙&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommended-reading"&gt;
  &lt;/a&gt;
  Recommended Reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://indepth.dev/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react"&gt;Inside Fiber: in-depth overview of the new reconciliation algorithm in React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://indepth.dev/posts/1009/in-depth-explanation-of-state-and-props-update-in-react"&gt;In-depth explanation of state and props update in React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;&lt;a href="https://mobile.twitter.com/iamakulov"&gt;Ivan Akulov&lt;/a&gt; is an expert on web performance and I recommend reading &lt;a href="https://3perf.com/"&gt;his work&lt;/a&gt;. This is by no means an attempt at bashing a colleague's work.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@malcoo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Tomáš Malík&lt;/a&gt; on &lt;a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>performance</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
