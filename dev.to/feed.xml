<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Comparing Managed Kubernetes Services: EKS vs. AKS vs. GKE</title>
      <author>Adit Modi</author>
      <pubDate>Fri, 28 May 2021 03:27:36 +0000</pubDate>
      <link>https://dev.to/cloudtech/comparing-managed-kubernetes-services-eks-vs-aks-vs-gke-4l8d</link>
      <guid>https://dev.to/cloudtech/comparing-managed-kubernetes-services-eks-vs-aks-vs-gke-4l8d</guid>
      <description>&lt;p&gt;The way organizations are using Kubernetes has quickly evolved in the past years. All the giant cloud providers offer managed Kubernetes services for their customers so that they can easily automate the deployment, scale, and manage their containerized applications.&lt;/p&gt;

&lt;p&gt;But how do these platforms perform? Do they live up to the hype? How well do they integrate? What’s it like maintaining and working with them? That’s why in this article, we reviewed the Managed Kubernetes solutions from the top cloud providers: Amazon Elastic Kubernetes Service (EKS) from Amazon, Google Kubernetes Engine (GKE) from Google Cloud Platform and Azure Kubernetes Service (AKS) from Microsoft Azure.&lt;/p&gt;

&lt;p&gt;It is best to get a deep understanding and look beyond the price and consider factors like scalability, security, features before making a final decision. We’ve also decided to group the different features available for each managed Kubernetes services in this blog. So, let’s dig in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YQMO62sU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/332uia9o2x2t2nnsikck.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YQMO62sU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/332uia9o2x2t2nnsikck.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Background: Cloud Engineer | AWS Community Builder | AWS Educate Cloud Ambassador | 4x AWS Certified | 3x OCI Certified | 3x Azure Certified.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#general-overview"&gt;
  &lt;/a&gt;
  General Overview
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#amazon-elastic-kubernetes-service"&gt;
  &lt;/a&gt;
  Amazon Elastic Kubernetes Service
&lt;/h1&gt;

&lt;p&gt;Amazon Elastic Kubernetes Service (EKS) is a managed service publicly available in June 2018 to run Kubernetes on AWS. It can be integrated easily with all the services, apps, and protocols that run on a Kubernetes Environment.&lt;/p&gt;

&lt;p&gt;EKS is designed entirely around Kubernetes, so everything you need to manage and deploy containers is included. Whether its seamless integration with the third-party tools for logs and performance metrics or advanced scaling capabilities.&lt;/p&gt;

&lt;p&gt;EKS is an excellent option if you already have an established AWS cloud architecture and want to experiment with Kubernetes or looking forward to migrating workloads on different clouds&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cNuOcRmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgqvrvqx26g8uzk9f5rs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cNuOcRmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgqvrvqx26g8uzk9f5rs.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#azure-kubernetes-service"&gt;
  &lt;/a&gt;
  Azure Kubernetes Service
&lt;/h1&gt;

&lt;p&gt;Azure Kubernetes Service (AKS) is a managed Kubernetes solution that was made available in 2018 by Microsoft. This is a fully managed service that makes containerized apps easy to deploy and manage in the Kubernetes environment.&lt;/p&gt;

&lt;p&gt;AKS runs both on Azure Public Cloud, on-premises, which helps deliver mission-critical applications to customers. AWS also has Government Cloud support for Government and their partners to run sensitive workloads.&lt;/p&gt;

&lt;p&gt;AKS is worth it when it comes to seamless integration with its tools, including Visual Studio and Active Directory and the rest of the Microsoft Cloud SaaS services. If you have an established enterprise agreement with Microsoft, and no preference for any other architecture, then AKS will perfectly suit your requirements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---A_bwO4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8e46ckx192g80jk8trt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---A_bwO4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8e46ckx192g80jk8trt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#google-kubernetes-engine"&gt;
  &lt;/a&gt;
  Google Kubernetes Engine
&lt;/h1&gt;

&lt;p&gt;Kubernetes itself started as a Google’s internal project, so it makes sense that they were the first to deliver managed Kubernetes solution in 2014, known as Google Kubernetes Engine(GKE).&lt;/p&gt;

&lt;p&gt;Google Kubernetes Engine (GKE), as a managed production-grade container orchestration engine, is the most resilient and well-rounded Kubernetes offering when compared to AKS and EKS. It has support for the Istio service mesh out of the box, and gVisor for an extra layer of security between running containers. Also, one of the key benefits of GKE is that service upgrades and new versions are instantly available while other providers take time to provide update releases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ghd11DKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cx28emk64l8xutlb0gf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ghd11DKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cx28emk64l8xutlb0gf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#high-availability-of-clusters"&gt;
  &lt;/a&gt;
  High availability of Clusters
&lt;/h1&gt;

&lt;p&gt;High availability of clusters is crucial if you are running production critical applications on Kubernetes. It ensures your cluster will be available when something goes wrong. For instance, if your services rely on a single data center and it goes down, your services will not be interrupted.&lt;/p&gt;

&lt;p&gt;GKE offers excellent support for highly available clusters in two modes: multi-zonal and regional. There is just one master node in multi-zonal mode, yet there can be many worker nodes across various zones. In regional mode, the master nodes are likewise spanned over all the regional zones to provide superior HA.&lt;/p&gt;

&lt;p&gt;AKS doesn’t provide high availability for their master nodes, as of date. However, the nodes are deployed in Availability Zones, for greater availability.&lt;/p&gt;

&lt;p&gt;EKS likewise provides HA across both workers, and master nodes spanned over different accessibility zones in the same way as GKE’s.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sla"&gt;
  &lt;/a&gt;
  SLA
&lt;/h1&gt;

&lt;p&gt;SLA (service level agreement) is a powerful acronym in all industries, and it is no different within the cloud community.&lt;/p&gt;

&lt;p&gt;All cloud platform providers offer different SLA’s, which guarantees different uptimes according to their availability zones and their region of deployment. For example, Amazon EKS guarantees 99.95% uptime, AKS offers 99.95% when availability zones are enabled, and 99.9% when disabled, andGKE splits its managed Kubernetes clusters, offering 99.5% uptime for Zonal deployments and 99.95% for regional deployments.&lt;/p&gt;

&lt;p&gt;Differences in SLA for Kubernetes control planes also present another area to compare. A Kubernetes control plane is a management infrastructure implemented by the cloud provider to efficiently perform all the essential processes for running your worker nodes.&lt;/p&gt;

&lt;p&gt;It varies by different cloud providers. AKS Control Plane comes free of cost, and you do not pay anything for it. GKE was also free of cost initially, but they have announced they will start charging soon for the control plane. EKS initially charge for their control plan right from the beginning.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resource-availability-with-node-pools"&gt;
  &lt;/a&gt;
  Resource Availability with Node Pools
&lt;/h1&gt;

&lt;p&gt;For different types of workflows, different kinds of machines are allocated to clusters by node pools. For example, storage systems require better storage disks than workflows like visual data analysis, requiring a better CPU and GPU. With node pools, we can provide the best resource available for specific nodes and provide optimal performance on those nodes while not allocating resources to all the cluster nodes.&lt;/p&gt;

&lt;p&gt;GKE and EKS are leading in this since they both provide functionality for node pooling. But AKS, on the other hand, does not provide node grouping and recommends different clusters in different scenarios.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability
&lt;/h1&gt;

&lt;p&gt;GKE, AKS, and EKS all provide you the ability to scale up nodes very quickly, just by using the UI. In autoscaling, GKE is leading as the most mature solution available on the interface. What a user needs to do is just specify the desired VM size and the range of nodes in the node pool. And the rest of the steps are managed by Google Cloud. EKS and AKS come after GKE in auto-scaling because they need some manual configurations to setup.&lt;/p&gt;

&lt;p&gt;GKE also provides further customization in its ability to scale up. Unlike AKS and EKS. In GKE, you can configure to a cluster using the Cluster Autoscaler, which will scale your nodes up or down based on the required workload. That is especially helpful when you have to run short-lived processes. AKS and EKS can also implement auto-scaling policies, but you have to set them manually compared to GKE, which provides Cluster Autoscaler by default.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bare-metal-clusters"&gt;
  &lt;/a&gt;
  Bare Metal Clusters
&lt;/h1&gt;

&lt;p&gt;As understandable by name, Bare metal clusters are deployed on a cloud architecture with no virtualization layer in between, in other words, no VMs. There are various benefits of this technique. The infrastructure overhead reduced drastically, which provide access to more computing and storage resources for application deployments. Access to more computing resources also increases the computing power, which helps reducing latency and downtimes for a particular application request.&lt;/p&gt;

&lt;p&gt;Coming to GKE vs AKS vs EKS for bare-metal performance. EKS allows the use of bare metal nodes. GKE and AKS do not support bare metal nodes. Although EKS does not default to bare metal nodes as they are expensive to deploy.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resource-limits"&gt;
  &lt;/a&gt;
  Resource Limits
&lt;/h1&gt;

&lt;p&gt;Resource limits are handled in a different way across providers — limits are per account with EKS, where AKS handle limits per subscription, and GKE balances limits on a per-project basis. EKS offers a maximum of 100 nodes per cluster, per account. AKS offers 500 nodes per cluster, and GKE offers 5000 nodes per cluster per project.&lt;/p&gt;

&lt;p&gt;While most limits look clear on paper, some are not. In AKS, for example, the maximum number of nodes that you can have depends on whether the node is available in State Set or Availability Set. On the other hand, In EKS, the maximum number of nodes per cluster you can get varies on the node’s instance type. Whereas GKE provides you more highly available nodes without any location variables.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resource-monitoring"&gt;
  &lt;/a&gt;
  Resource monitoring
&lt;/h1&gt;

&lt;p&gt;In terms of resource monitoring, all three cloud providers have offerings. GKE uses Stackdriver for resource monitoring within their Kubernetes cluster. It monitors the master and worker nodes, and all Kubernetes components inside the platform along with logging. AKS offers Azure Monitor to evaluate the health of a container and Application Insights to monitor the Kubernetes components. EKS requires the use of third-party tools and recommends Prometheus for resource monitoring.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rolebased-access-control-rbac"&gt;
  &lt;/a&gt;
  Role-based access control (RBAC)
&lt;/h1&gt;

&lt;p&gt;Role-based access control (RBAC) in Kubernetes allows admins to configure dynamic policies to deny unauthorized access. All the three hosted services providers provide RBAC implementations, but they set it differently. EKS has a slight advantage, with a tighter security policy overall, as it considers RBAC and pod security policies mandatory compared to GKE and AKS.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#availability-as-a-cloud-provider"&gt;
  &lt;/a&gt;
  Availability as a Cloud Provider
&lt;/h1&gt;

&lt;p&gt;All three providers have their offerings available in most regions globally. Google Cloud has the best availability among these three globally. It has services in almost every region following the lead is Azure. Azure comes above AWS after launching services in Latin America and Africa,&lt;/p&gt;

&lt;p&gt;Also, EKS is not available in the AWS government cloud; AKS, however, has one Azure government cloud, whereas Google has no government clouds.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#secure-image-management"&gt;
  &lt;/a&gt;
  Secure Image Management
&lt;/h1&gt;

&lt;p&gt;All three cloud providers offer container image registry services that provide secure image management and stable build creation. But the degree of control these cloud provider provides varies.&lt;/p&gt;

&lt;p&gt;The image signing feature of Azure Container Registry (ACR) provides users with the ability to check their container images’ authenticity. In the same way, immutable image tags in Elastic Container Registry (ECR) allows users to create a secure container builds at all times.&lt;/p&gt;

&lt;p&gt;Lastly, Binary Authorization in GKE prevents deployment of images conflicting with the set policies and triggers the automatic lock-down of those risky images.&lt;/p&gt;

&lt;p&gt;Elastic Container Registry and Azure Container Registry also support resource-based permissions for access controls on a repository level to prevent unauthorized access, which Google container registry does not.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h1&gt;

&lt;p&gt;Each vendor has its specific features, limitations, and pricing plans. Management and deployment of clusters that include master and worker machines running provided at no cost by GKE and AKS. You are charged only for services that you use on the go, such as bandwidth, storage, and virtual machines. In comparison, Amazon EKS costs you $0.10 per hour for each deployed cluster other than the instances and services you are using.&lt;/p&gt;

&lt;p&gt;Concerning the price overall, here are some rough figures to help you determine costs when choosing a Kubernetes platform. This cost comparison assumes that you have 20 worker nodes, and each node has 80 CPU and 320GB of RAM. Billable hours: 14,600 hours per month.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCfXJr54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfmqx1ug9p3we53kqr4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCfXJr54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfmqx1ug9p3we53kqr4s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h1&gt;

&lt;p&gt;AWS, Microsoft Azure, and Google Cloud Platform all are claiming to be the best Managed Kubernetes solution from the past years. It’s on you. Whether you want the advantage of the most mature and budget product of Google or you want to leverage your Microsoft Enterprise Agreement to get better pricing and support on Azure, or you want to make your transition to the cloud easier with EKS on Amazon.&lt;/p&gt;

&lt;p&gt;To find that, its always important to compare storage, network, and compute features for each provider before you decide for a managed Kubernetes service. It is also critical to compare the costs since services can vary between regions and are different for each configuration.&lt;/p&gt;

&lt;p&gt;Completely testing service’s features and capabilities in your environment will ultimately provide the real-time pricing and performance metrics, which will help determine a Kubernetes offering that perfectly suits your business needs.&lt;/p&gt;

&lt;p&gt;Hope this guide helps you understand the Different Managed Kubernetes Services: EKS vs. AKS vs. GKE, feel free to connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn.&lt;/a&gt;&lt;br&gt;
You can view my badges &lt;a href="https://www.youracclaim.com/users/adit-modi/badges"&gt;here.&lt;/a&gt;&lt;br&gt;
If you are interested in learning more about AWS then follow me on &lt;a href="https://github.com/AditModi"&gt;github.&lt;/a&gt;&lt;br&gt;
If you liked this content then do clap and share it . Thank You .&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Coding a React Carousel From Scratch </title>
      <author>nicklevenson</author>
      <pubDate>Fri, 28 May 2021 03:10:11 +0000</pubDate>
      <link>https://dev.to/nicklevenson/coding-a-react-carousel-from-scratch-1f54</link>
      <guid>https://dev.to/nicklevenson/coding-a-react-carousel-from-scratch-1f54</guid>
      <description>&lt;p&gt;I have recently been working on an app for musicians to connect and be matched up with based on similar preferences. I wanted the UX/UI to be something like a tinder swiper where you can scroll through different profile cards. In the past I have used libraries like Bootstrap to achieve the carousel-like presentation, however, I wanted to challenge myself to build that out myself with vanilla JS within my React app. &lt;/p&gt;

&lt;p&gt;My first thoughts were to use CSS animation with toggled classes to move the cards in and out of the screen, however, I quickly found this method ineffective. I soon knew I would have to use JS to solve this problem. So allow me to walk you through my process. &lt;/p&gt;

&lt;p&gt;To start, I needed to have an array of data - recommended musicians to swipe through. This was relatively easy given I had stored those recommendations in my Redux state. All I had to do was map my state to props in the recommended users component like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mapStateToProps = (state) =&amp;gt; {
  return {
    currentUser: state.currentUser.currentUser,
    recommendedUsers: state.currentUser.recommendedUsers,
  };
};

const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {
    fetchUserRecs: () =&amp;gt; dispatch(fetchUserRecs()),
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(RecommendedUsers);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I mapped my the fetch recommended users dispatch function to props as well so when this component mounted in the application, it would fetch this data. &lt;/p&gt;

&lt;p&gt;Now was the time where I had to figure out how to actually implement the carousel-like behavior. After some experimentation, I decided that I would make the container for all the recommended user profiles to be a div that had an overflow hidden property, with a nowrap white-space property. This meant that the div could not break its line and would continue horizontally. I could then manipulate the scrollLeft margin of the container with JS to shift what is in view based on what card is shown. This is what the CSS looked like for the cards-container div, as well as the card class itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.cards-container {
    height: 100%;
    overflow: hidden;
    white-space: nowrap;
  }

 .card {
    display: inline-block;
    width: 100%;
    height: 100%;
    padding: 1rem;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next I had to define some state variables locally in the component itself. I needed to figure out what the index in the array of recommended users of the active card was, so that would be a variable. And then I need a variable to store the current scroll margin to implement. So my component state looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;state = {
    activeIndex: 0,
    margin: 0,
 };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My render function looked something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const shownUserId = this.props?.recommendedUsers[this.state.activeIndex]?.id || null;
      return (
        &amp;lt;div className="recommended-users"&amp;gt;
          &amp;lt;div className="cards-container"&amp;gt;
            {this.props?.recommendedUsers?.map((u, index) =&amp;gt; (
              &amp;lt;div&amp;gt;
                &amp;lt;PreviewUserCard
                  user={u}
                  currentUser={this.props.currentUser}
                  key={u.id}
                  cardChange={this.cardChange}
                  shownUserId={shownUserId}
                /&amp;gt;
              &amp;lt;/div&amp;gt;
            ))}
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      );

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically I was mapping a component called PreviewUserCard that rendered all a user's information for each user in the recommended array. I passed in a local function called cardChange that could be executed within the PreviewUserCard component. This function is what would control the scrollLeft margin and change the active index.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  cardChange = (e) =&amp;gt; {
    if (this.state.activeIndex === this.props.recommendedUsers.length - 1) {
      this.setState({ activeIndex: 0 });
      this.setState({ margin: 0 });
    } else {
      this.setState((state) =&amp;gt; ({
        activeIndex: state.activeIndex + 1,
        margin: state.margin + window.innerWidth
      }));

    }
  };

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, this function first checks if the current activeIndex is at the end of the recommended users array, and if it is, resets the active index to the first card - 0, as well as sets the margin to 0 as well. Otherwise, it will increment the activeIndex by 1 to the next user in the array and set the margin to the window width in addition to the previous margin. This is because a card is the width of the window and by increasing the scrollLeft margin by 100% we are essentially displaying the next card in the div. &lt;/p&gt;

&lt;p&gt;The last part of this puzzle is the incrementally set the scrollLeft value. If we changed it all at once, there would be no carousel effect at all. So I decided to write a function that would be executed whenever the component updated (it will execute whenever the cardChange function is called). This important function is called setMargin, which essentially increments the current scrollLeft value in smaller chunks to give it a nice flow and feeling of swiping. It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  setMargin = () =&amp;gt; {
    const container = document.querySelector(".cards-container");
    let interval = setInterval(() =&amp;gt; {
      let i = container.scrollLeft;
      if (i &amp;lt; this.state.margin) {
        container.scrollLeft = i + window.innerWidth / 100;
        if (container.scrollLeft &amp;gt;= this.state.margin) {
          clearInterval(interval);
        }
      } else {
        container.scrollLeft = i - window.innerWidth / 50;
        if (container.scrollLeft &amp;lt;= this.state.margin) {
          clearInterval(interval);
        }
      }
    }, 1);
  };

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we get the cards container element and set that to a variable. Then, we set an interval which takes the current value of that container scrollLeft margin. It then says, while this current scroll value is less than the component state's margin value (our target value), increment in small amounts the current scrollLeft value until we hit out target scrollLeft value and then clear the interval. If the current scroll value of the container is MORE than our target value, then that means we have reached the end of our array and have reset to 0. We then do a similar thing of changing the current scroll value until we hit our target, however this time we are decrementing down (and doing it faster for a nice effect). &lt;/p&gt;

&lt;p&gt;And that's it! If you've successfully followed along, you now know how to implement this yourself. There probably is a better way to do this, and I would love to implement touch events and smoothing incrementation (now it is all linear so it could be more natural), but for now I am proud to have came up with this method. It would probably be faster to just use a library like React-Carousel, or Bootstrap's Carousel, but this was a fun and enjoyable challenge. Feel free to comment any other solutions you may have to creating a carousel-like presentation. Thanks for reading!&lt;/p&gt;

</description>
      <category>react</category>
      <category>carousel</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>React Navbar Change Background Color on Scroll - React JS - Gatsby</title>
      <author>cesaruseche18</author>
      <pubDate>Fri, 28 May 2021 03:10:04 +0000</pubDate>
      <link>https://dev.to/cesareuseche/react-navbar-change-background-color-on-scroll-react-js-gatsby-2a39</link>
      <guid>https://dev.to/cesareuseche/react-navbar-change-background-color-on-scroll-react-js-gatsby-2a39</guid>
      <description>&lt;p&gt;Currently I'm developing a new website for a client that I have that is a travel agency located in Caracas, Venezuela. I'm using GatsbyJS and Strapi CMS to build the website. &lt;/p&gt;

&lt;p&gt;On this tutorial I want to explain how to build a React Navbar smooth scroll background and logo change with GatsbyJS. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Knowledge of &lt;strong&gt;useState() React Hooks.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Knowledge of &lt;strong&gt;useEffect() React Hooks.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-your-raw-navbarjs-endraw-component"&gt;
  &lt;/a&gt;
  Create your &lt;code&gt;Navbar.js&lt;/code&gt; Component.
&lt;/h3&gt;

&lt;p&gt;In my case I created a &lt;code&gt;Navbar.js&lt;/code&gt; components and a &lt;code&gt;Navbar.css&lt;/code&gt; file where all the styles of the Navbar will live.&lt;/p&gt;

&lt;p&gt;After you have your component boiler plate ready and Imported the useState and useEffect Hooks, create a state with the first element in my case I called &lt;strong&gt;navbar&lt;/strong&gt; as an initial state having a value of false and the second element as function &lt;strong&gt;setNavbar()&lt;/strong&gt; for updating the state.&lt;/p&gt;

&lt;p&gt;Then create a function I called by &lt;strong&gt;changeBackground&lt;/strong&gt; which sets the value of the state &lt;strong&gt;navbar&lt;/strong&gt; to true when we scroll down the page equal to or more than 66px that in my case that is the height of my navbar. This is done with the help of window.scrollY function. I have used this 66px value in accordance with the value of our navbar’s height (66px). Otherwise the state value remains false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/navbar scroll changeBackground function
  const changeBackground = () =&amp;gt; {
    console.log(window.scrollY)
    if (window.scrollY &amp;gt;= 66) {
      setNavbar(true)
    } else {
      setNavbar(false)
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create the rendering of the background color change of the navbar you will have to create a useEffect where you will pass the &lt;strong&gt;changeBackground&lt;/strong&gt; function and an event listener that will be on scroll and passing the &lt;strong&gt;changeBackground&lt;/strong&gt; function, like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;useEffect(() =&amp;gt; {
    changeLogo()
    // adding the event when scroll change Logo
    window.addEventListener("scroll", changeLogo)
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally you will need to add a conditional statement to your navbar tag className like the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;nav className={navbar ? "navbar active" : "navbar"}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope this helps you, if you want to do the same with your navbar logo you will be able to see it since  I'm attaching my whole navbar component down below. Keep coding, keep learning!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useEffect } from "react"
// importing navbar styles
import "../assets/css/navbar.css"
import logo from "../assets/images/logo.svg"
import logoBlue from "../assets/images/logo-blue.svg"
// responsive menu toggle icon
import { FaAlignRight } from "react-icons/fa"
// all the navbar links coming from the links constants
import pageLinks from "../constants/links"
// Link from gatsby
import { Link } from "gatsby"
const Navbar = () =&amp;gt; {
  //navbar scroll when active state
  const [navbar, setNavbar] = useState(false)

  //logo scroll when active
  const [navbarLogo, setNavbarLogo] = useState(logo)

  //navbar scroll changeBackground function
  const changeBackground = () =&amp;gt; {
    console.log(window.scrollY)
    if (window.scrollY &amp;gt;= 66) {
      setNavbar(true)
    } else {
      setNavbar(false)
    }
  }

  useEffect(() =&amp;gt; {
    changeBackground()
    // adding the event when scroll change background
    window.addEventListener("scroll", changeBackground)
  })

  //logo scroll function
  const changeLogo = () =&amp;gt; {
    if (window.scrollY &amp;gt;= 60) {
      setNavbarLogo(logoBlue)
    } else {
      setNavbarLogo(logo)
    }
  }

  useEffect(() =&amp;gt; {
    changeLogo()
    // adding the event when scroll change Logo
    window.addEventListener("scroll", changeLogo)
  })

  return (
    &amp;lt;nav className={navbar ? "navbar active" : "navbar"}&amp;gt;
      &amp;lt;div className="nav-center"&amp;gt;
        &amp;lt;div className="nav-header"&amp;gt;
          &amp;lt;Link to="/"&amp;gt;
            &amp;lt;img src={navbarLogo} alt="logo" /&amp;gt;
          &amp;lt;/Link&amp;gt;
          &amp;lt;button type="button" className="toggle-btn"&amp;gt;
            &amp;lt;FaAlignRight /&amp;gt;
          &amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div className="nav-links"&amp;gt;
          {pageLinks.map(links =&amp;gt; {
            return (
              &amp;lt;Link key={links.id} to={links.url}&amp;gt;
                {links.text}
              &amp;lt;/Link&amp;gt;
            )
          })}
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/nav&amp;gt;
  )
}

export default Navbar

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Follow me on Github &amp;amp; Connect with me on LinkedIn&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cesareuseche"&gt;https://github.com/cesareuseche&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/cesar-useche-profile/"&gt;https://www.linkedin.com/in/cesar-useche-profile/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>gatsby</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Back to Basic: Should we use Flexbox or Grid?</title>
      <author>Theodorus Clarence</author>
      <pubDate>Fri, 28 May 2021 03:09:31 +0000</pubDate>
      <link>https://dev.to/theodorusclarence/back-to-basic-should-we-use-flexbox-or-grid-1h9i</link>
      <guid>https://dev.to/theodorusclarence/back-to-basic-should-we-use-flexbox-or-grid-1h9i</guid>
      <description>&lt;p&gt;Back to Basic will answer some of my questions when I first started learning CSS. Personally, I think when you start learning CSS, it will be very hard, because CSS has about 520 properties that we can use. Of course, we won't use it all, there are many properties that I still didn't know, but there are plenty of properties that we need to understand to be proficient in CSS. This blog will not cover CSS from the really basic ones, but I will try to show you the implementation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you never have used flexbox or grid before, you can check this &lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;flexbox guide&lt;/a&gt; and &lt;a href="https://css-tricks.com/snippets/css/complete-guide-grid/"&gt;grid guide&lt;/a&gt; from css-tricks.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#question"&gt;
  &lt;/a&gt;
  Question
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;When should we use flex or grid?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I first started learning CSS and know about flexbox and grid, I got confused about when to use flexbox and grid. In this blog, I will try to explain my approach on how to choose between flexbox and grid according to the condition.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#use-case-of-using-flex"&gt;
  &lt;/a&gt;
  Use Case of Using Flex
&lt;/h2&gt;

&lt;p&gt;I always use flex to give a layout that only has 1 dimension (horizontal only or vertical). In this blog, I will give you some example of flexbox use case with some of my project that I have made.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-container-that-has-all-elements-in-the-center-both-horizontally-and-vertically"&gt;
  &lt;/a&gt;
  1. Container that has all elements in the center both horizontally and vertically
&lt;/h3&gt;

&lt;p&gt;We usually see this in a landing page&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N6EX96Y4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/theodorusclarence/image/upload/q_auto%2Cf_auto/theodorusclarence/blogs/btb-flexbox-grid/1_aa0dum" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N6EX96Y4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/theodorusclarence/image/upload/q_auto%2Cf_auto/theodorusclarence/blogs/btb-flexbox-grid/1_aa0dum" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To achieve this layout, we only need 3 lines of CSS, I suggest you to memorize this combination, because you will use this in many cases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/*  make sure the parent element has height */&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* css to align vertically and horizontally */&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* If you want to make a full-page,
make sure the container has a height of the viewport */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-divide-page-into-parts"&gt;
  &lt;/a&gt;
  2. Divide page into parts
&lt;/h3&gt;

&lt;p&gt;This layout also commonly seen, usually to divide the container into 2 parts with the same width, we can also make it divide into 3, 4, or as many as you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/theodorus/pen/xxRxVeo"&gt;Codepen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NPqft0Eq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/theodorusclarence/image/upload/q_auto%2Cf_auto/theodorusclarence/blogs/btb-flexbox-grid/2_spnrcs" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NPqft0Eq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/theodorusclarence/image/upload/q_auto%2Cf_auto/theodorusclarence/blogs/btb-flexbox-grid/2_spnrcs" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This layout can be easily achieved by using flex, let's see the HTML first&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello Bambang&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;welcome to my page&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;click me&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unsplash.it/700/600"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"unsplash"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, that &lt;code&gt;div.container&lt;/code&gt; has 2 items which is &lt;code&gt;div.content&lt;/code&gt; and &lt;code&gt;img.content&lt;/code&gt;, so we can make layout that is equal parts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* this will make it divides in equal parts */&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* the first flexbox use case */&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;by using &lt;code&gt;width: 100%&lt;/code&gt; we make the child element to take as much space as possible. Because both of them wants to be 100%, so they compromise and span over 50%&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If we want to make a responsive design with this layout, we can utilize &lt;code&gt;flex-direction&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* add this to make the flex stacked vertically */&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, when we are in a mobile view, flex will stacked vertically (like how HTML normally works), and when we get into larger viewport, flex will make the child elements stack horizontally (check the codepen for demo)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-creating-navbar-using-spacebetween"&gt;
  &lt;/a&gt;
  3. Creating Navbar (using space-between)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://codepen.io/theodorus/pen/KKNKMzx"&gt;Codepen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creating a simple navbar will be very often to do and usually, the layout is spaced apart where the left side is the logo and the right side is the navigation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uD21zOBw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/theodorusclarence/image/upload/q_auto%2Cf_auto/theodorusclarence/blogs/btb-flexbox-grid/3_xefqrr" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uD21zOBw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/theodorusclarence/image/upload/q_auto%2Cf_auto/theodorusclarence/blogs/btb-flexbox-grid/3_xefqrr" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Route&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Route&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;nav&lt;/code&gt; has 2 children which are &lt;code&gt;h3&lt;/code&gt; and &lt;code&gt;ul&lt;/code&gt;. Next, we just need to reset the base style and split the children element with space-between&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;lightblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* this property will make the child spaced apart */&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* remove bullet style */&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* add space between navigation links */&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All of the examples above actually can be made with a grid too. But, by using grid we need to write more CSS than using flexbox&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#use-case-of-using-grid"&gt;
  &lt;/a&gt;
  Use Case of Using Grid
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codepen.io/theodorus/pen/QWGWEQJ"&gt;Codepen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Grid is usually used to make a more complex layout. My way of deciding is: &lt;em&gt;if using flex is too hard, then use grid&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Layouting with flex actually can also be implemented for the complex layout, but using grid will be much easier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#1-making-2-dimensional-layout"&gt;
  &lt;/a&gt;
  1. Making 2 dimensional layout
&lt;/h3&gt;

&lt;p&gt;I usually use grid to create this layout because there is a &lt;code&gt;gap&lt;/code&gt; feature to space them out. Spacing things out using flex is going to be harder if we want to make the design responsive&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ywLkr0wZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/theodorusclarence/image/upload/q_auto%2Cf_auto/theodorusclarence/blogs/btb-flexbox-grid/4_t3tnuj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ywLkr0wZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/theodorusclarence/image/upload/q_auto%2Cf_auto/theodorusclarence/blogs/btb-flexbox-grid/4_t3tnuj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Layout like this will be very easy if using grid, we only need to make it into 2 columns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;item1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;item2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;item3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will simplify the layout by using &lt;code&gt;div.container&lt;/code&gt; and 3 &lt;code&gt;div.item&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* container base layout */&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using &lt;code&gt;grid-template-columns: repeat(2, 1fr)&lt;/code&gt; we set the grid to divide the columns into two, and the &lt;code&gt;item&lt;/code&gt; will follow the rule that we set. Last, we add the &lt;code&gt;gap: 1em&lt;/code&gt; to create some whitespace.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Grid will be very helpful in responsive design, we only need to change the rules on grid-tem to be 1 column when it is on smaller screen size, and make it to 2 columns in the larger screens&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* container base layout */&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* no need to add grid template, because grid defaults to 1 column */&lt;/span&gt;
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-make-layout-with-different-sizes"&gt;
  &lt;/a&gt;
  2. Make layout with different sizes
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://codepen.io/theodorus/pen/GRNRjjY"&gt;Codepen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--68VbnSpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/theodorusclarence/image/upload/q_auto%2Cf_auto/theodorusclarence/blogs/btb-flexbox-grid/5_i0mfuw" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--68VbnSpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/theodorusclarence/image/upload/q_auto%2Cf_auto/theodorusclarence/blogs/btb-flexbox-grid/5_i0mfuw" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I recommend you to use Firefox Dev Tools to see lines indicating the grid numbers.&lt;/p&gt;

&lt;p&gt;We approach this kind of layout by making 4 columns and 2 rows, then we assign the row and col placement on each of the elements. For example, the first picture spans over 2 columns and 2 rows. Check this if you have not understand the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Line-based_Placement_with_CSS_Grid"&gt;grid numbering system&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item item1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;item1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item item2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;item2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item item3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;item3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item item4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;item4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will simplify the layout by using &lt;code&gt;.container&lt;/code&gt; as the parent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* makes the grid into 4 columns and 2 rows */&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.item1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.item2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* you can also give value to item 3 and 4,
but because it follows the natural flow of the grid I won't continue */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;For responsive design, we can put the image according to the rows and columns that we want, we can also change the template&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Use Grid if using flex is getting too complicated&lt;/strong&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally posted on &lt;a href="https://theodorusclarence.com/?ref=devto"&gt;my personal site&lt;/a&gt;, find more &lt;a href="https://theodorusclarence.com/blog?ref=devto"&gt;blog posts&lt;/a&gt; and &lt;a href="https://theodorusclarence.com/library?ref=devto"&gt;code snippets library&lt;/a&gt; I put up for easy access on my site 🚀&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>css</category>
    </item>
    <item>
      <title>35+ Simple CSS Based Pre Loaders</title>
      <author>Kiran Raj R</author>
      <pubDate>Fri, 28 May 2021 02:54:45 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/35-simple-css-based-pre-loaders-gfl</link>
      <guid>https://dev.to/kiranrajvjd/35-simple-css-based-pre-loaders-gfl</guid>
      <description>&lt;p&gt;Pre loader or a loading screen animation is animation which will be displayed before the content of the website get loaded. Pre loaders help to keep users engaged while the page gets loaded. I list here more than 35 simple pre loaders that use only HTML and CSS, no JavaScript. You can customize these the way you like, this will help you to understand how animations work in CSS. Don't just copy, use your creativity to create something more user engaging. Happy Coding.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Click the headings for direct Codepen links&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-dot-based-pre-loaders"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://codepen.io/kiran-r-raj/pen/zYZzxMQ"&gt;Dot Based Pre Loaders&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/zYZzxMQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dot-based-pre-loaders-2"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://codepen.io/kiran-r-raj/pen/wvJqNpy"&gt;Dot Based Pre Loaders 2&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/wvJqNpy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-line-based-pre-loaders"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://codepen.io/kiran-r-raj/pen/YzZxbXy"&gt;Line Based Pre Loaders&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/YzZxbXy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-circle-based-pre-loaders"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://codepen.io/kiran-r-raj/pen/oNZwBxq"&gt;Circle Based Pre Loaders&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/oNZwBxq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>HTML : Simplest way to refresh the page in X seconds</title>
      <author>Rajesh Kumar Yadav</author>
      <pubDate>Fri, 28 May 2021 02:50:49 +0000</pubDate>
      <link>https://dev.to/rajeshkumaryadavdotcom/html-simplest-way-to-refresh-the-page-in-x-seconds-2o69</link>
      <guid>https://dev.to/rajeshkumaryadavdotcom/html-simplest-way-to-refresh-the-page-in-x-seconds-2o69</guid>
      <description>&lt;p&gt;The redirects to the provided URL in 5 seconds. Set to 0 for an immediate redirect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"refresh"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"5;url=http://example.com/"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is super easy, you just have to put this &lt;code&gt;meta&lt;/code&gt; tag inside &lt;code&gt;head&lt;/code&gt; tag of your html page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/tags/att_meta_http_equiv.asp"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rkycom"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With all that being said, I highly recommend you keep learning!&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Please feel free to connect with me on &lt;a href="https://www.linkedin.com/in/www-rajeshkumaryadav-com/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/rky_com"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>May 27th, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 28 May 2021 02:49:11 +0000</pubDate>
      <link>https://dev.to/nickytonline/may-27th-2021-what-did-you-learn-this-week-1m8f</link>
      <guid>https://dev.to/nickytonline/may-27th-2021-what-did-you-learn-this-week-1m8f</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/qKltgF7Aw515K/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/qKltgF7Aw515K/giphy.gif" alt="Information flowing through your brain"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; 
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;




&lt;center&gt;


&lt;/center&gt;

</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>DannJS, a cool, user-friendly neural-network library for JavaScript.</title>
      <author>Calin Baenen</author>
      <pubDate>Fri, 28 May 2021 02:37:16 +0000</pubDate>
      <link>https://dev.to/baenencalin/dannjs-a-cool-user-friendly-neural-network-library-for-javascript-38cg</link>
      <guid>https://dev.to/baenencalin/dannjs-a-cool-user-friendly-neural-network-library-for-javascript-38cg</guid>
      <description>&lt;p&gt;DannJS is a neural-network library for JavaScript.&lt;br&gt;
&lt;a href="https://www.dannjs.org/"&gt;Dannjs (Homepage)&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://github.com/matiasvlevi/Dann"&gt;Dann (GitHub)&lt;/a&gt;.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;&lt;h2&gt;
&lt;b&gt;&lt;/b&gt;&lt;center&gt;Thanks for reading, and checking out Dann.js!&lt;br&gt;Cheers!&lt;/center&gt;
&lt;/h2&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>ai</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>The Power of Personal Podcasting</title>
      <author>swyx</author>
      <pubDate>Fri, 28 May 2021 02:09:23 +0000</pubDate>
      <link>https://dev.to/swyx/the-power-of-personal-podcasting-kkm</link>
      <guid>https://dev.to/swyx/the-power-of-personal-podcasting-kkm</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Listen to &lt;a href="https://swyx.transistor.fm/episodes/the-power-of-personal-podcasting-swyx"&gt;the audio version of this essay here&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What kind of egotistical asshole runs a solo podcast?!&lt;/p&gt;

&lt;p&gt;Loads. Naval Ravikant &lt;a href="https://nav.al/"&gt;has one&lt;/a&gt;. Peter Thiel &lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9hbmNob3IuZm0vcy8zMGVhZDM1Yy9wb2RjYXN0L3Jzcw=="&gt;has one&lt;/a&gt;. James Beshara &lt;a href="https://belowthelinepod.com/"&gt;has one&lt;/a&gt;. Scott Hanselman's has been &lt;a href="https://www.hanselminutes.com/archives"&gt;running for 15 years&lt;/a&gt;. Lex Fridman and Joe Rogan became global celebrities just broadcasting 3 hour long conversations with anyone they wish. (Yeah it seems to be all dudes... let me know if you have other examples)&lt;/p&gt;

&lt;p&gt;And, as of this year.... me.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DpYx0Ouy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t873icsvyz33o5bm73sv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DpYx0Ouy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t873icsvyz33o5bm73sv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-personal-podcast"&gt;
  &lt;/a&gt;
  The Personal Podcast
&lt;/h2&gt;

&lt;p&gt;The defining characteristic of a Personal Podcast to me is that it is primarily driven by the interests of one person exploring their intellectual curiosity under their own name. &lt;/p&gt;

&lt;p&gt;That's it. No co-host banter. No company sponsor, or singular theme, trying to establish thought leadership (ruling out &lt;a href="https://fortelabs.co/blog/basbpodcast/"&gt;Tiago's&lt;/a&gt; or &lt;a href="https://www.swipefiles.com/everything-is-marketing"&gt;Corey's&lt;/a&gt;) to try to sell you something. Purely &lt;a href="https://www.swyx.io/learn-in-public/"&gt;learning in public&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I've increasingly come to like the idea, so on January 15th I started what I've come to call my own "&lt;a href="http://swyx.transistor.fm/"&gt;mixtape&lt;/a&gt;". &lt;/p&gt;

&lt;p&gt;My format is simple: Short audio clips from others on weekdays, long form content from me on weekends. It's been slowly growing to a small listenership, mostly because I have no idea how the hell to market a podcast. This will be my 100th episode, and I think I have fuel in the tank for 100 more. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fIVU92Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zqbpdbxaxff794lx2g8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fIVU92Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zqbpdbxaxff794lx2g8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I thought I should offer some reflections on the occasion of my first 100 episodes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personal-podcast-superpowers"&gt;
  &lt;/a&gt;
  Personal Podcast Superpowers
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Infinite Game&lt;/strong&gt;: the benefit of a personal podcast not being tied to a company or professional topic is that your name is the one thing that is going to last with you for the rest of your life. 

&lt;ul&gt;
&lt;li&gt;I'll grant that it's possible, ideal even, to have your name tied to one topic for the rest of your life, like &lt;a href="https://www.startupsfortherestofus.com/"&gt;Rob Walling&lt;/a&gt;, but it is very rare.&lt;/li&gt;
&lt;li&gt;The personal focus limits your reach, but ensures longevity. Having a personal podcast trains you to play Infinite Games by &lt;strong&gt;playing a game you cannot win&lt;/strong&gt;, since the only goal is to keep going.&lt;/li&gt;
&lt;li&gt;Personal podcasting is a great low stakes way to practice being a &lt;a href="https://www.swyx.io/part-time-creator-manifesto/"&gt;Part Time Creator&lt;/a&gt;, as a means to lock down the time management and productivity tactics to run your own media operation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hot Medium&lt;/strong&gt;: Audio is a much "hotter" medium than text, as &lt;a href="https://alexdanco.com/2019/10/17/the-audio-revolution/"&gt;Alex Danco has pointed out&lt;/a&gt;. 

&lt;ol&gt;
&lt;li&gt;It affords a lot more room for expression: in the same time it takes for someone to read your work, you can convey and evoke vocal emotion, include audio snippets, and even play music to your listeners (Music is the &lt;a href="https://en.wikipedia.org/wiki/Total_addressable_market"&gt;highest TAM&lt;/a&gt; market, period). Voice creates a visceral connection straight into your eardrums, and the rise of truly wireless earbuds like Airpods have only increased this power.&lt;/li&gt;
&lt;li&gt;Even it's constraints are nice: most of us spend all day staring at computer screens, so an audio-only format can be welcome respite during exercise and commutes.&lt;/li&gt;
&lt;li&gt;The power of audio is why, despite being extremely widely read already, both &lt;a href="https://stratechery.com/2020/the-daily-update-podcast/"&gt;Ben Thompson&lt;/a&gt; and &lt;a href="https://www.listennotes.com/podcasts/not-boring-packy-mccormick-trq3Lf8VpJe/"&gt;Packy McCormick&lt;/a&gt; invest time to read out audio versions of their essays every week.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Independence&lt;/strong&gt;: Podcasting is one of the few truly decentralized mediums (although Spotify is doing its best to ruin it). If you can host MP3 files:

&lt;ol&gt;
&lt;li&gt;You cannot be deplatformed whether by &lt;a href="https://www.swyx.io/proving-our-humanity/"&gt;errant algorithm&lt;/a&gt; or arbitrary decision.&lt;/li&gt;
&lt;li&gt;You can run a podcast that will likely outlast any podcasting platform.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Completionism&lt;/strong&gt;: For a huge % of the population, podcasts are the only RSS feed where they regularly have 100% completion rate. 

&lt;ol&gt;
&lt;li&gt;Not everyone will subscribe to your personal podcast, but those who do are &lt;em&gt;far&lt;/em&gt; more likely to consume your content than even newsletter subscribers (where a 50% open rate is considered excellent)&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Superfans&lt;/strong&gt;: You give an extra opportunity for people who want "more where that came from" to do just that.

&lt;ol&gt;
&lt;li&gt;This includes stripping out audio of the video interviews and talks you do, which can be helpful even just for discovery (in other words, even if the visual component is important, it can help your fans learn about content they want to watch)&lt;/li&gt;
&lt;li&gt;You can guard against bitrot and increase discovery by rehosting your own appearances on other podcasts (like &lt;a href="https://swyx.transistor.fm/episodes/weekend-drop-grifters-and-content-creation-traps"&gt;my YouTube interviews&lt;/a&gt; or my &lt;a href="https://swyx.transistor.fm/episodes/basb-week-1-the-capture-habit"&gt;Second Brain Workshops&lt;/a&gt;) on your own feed (instead of requiring your superfans to go find your appearances through an index on your site or just following you closely on social)&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scheduling and Creative Control&lt;/strong&gt;: You don't rely on anyone else and don't need anyone's permission to change formats, take a break, or decide on content mix

&lt;ol&gt;
&lt;li&gt;I started my own podcast because of 3 consecutive weeks of scheduling difficulties with &lt;a href="http://careerchats.transistor.fm/"&gt;my podcast cohost Randall&lt;/a&gt;. To be clear, they were all my fault, but just the inflexibility of having to work with someone else's schedule (for a non-work project) proved very difficult to sustain.&lt;/li&gt;
&lt;li&gt;I can throw in &lt;a href="https://swyx.transistor.fm/episodes/talkbox-byron-chambers-lorenz-rhode-scary-pockets"&gt;music&lt;/a&gt; or &lt;a href="https://swyx.transistor.fm/episodes/35-principles-for-35-years"&gt;personal essays&lt;/a&gt; or &lt;a href="https://swyx.transistor.fm/episodes/weekend-drop-e2e-keyserver-startup-with-ashoat-tevosyan"&gt;angel investment chats&lt;/a&gt; or anything else I feel like anytime I want, as long as I think it'd make for something I myself would want to listen to in future.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a side benefit, podcasting counts as excellent speaking practice - If you know you have a problem with your ums and ah's, there's nothing better to feel the pain than &lt;a href="https://twitter.com/swyx/status/1378422268838076416"&gt;spending hours editing them out&lt;/a&gt; to motivate you to fix that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bring-back-mixtapes"&gt;
  &lt;/a&gt;
  Bring Back Mixtapes
&lt;/h2&gt;

&lt;p&gt;I think of my mixtape as a new format that I don't see anywhere else. Of course, mixtapes themselves are &lt;a href="https://en.wikipedia.org/wiki/Mixtape"&gt;as old as recorded audio&lt;/a&gt;, but they died off in the age of professional podcasting. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Giving Value.&lt;/strong&gt; My formula of short weekday + long weekend is a blend of &lt;a href="https://www.lastweekinaws.com/podcast/"&gt;Corey Quinn's AWS podcast&lt;/a&gt; and Peter Thiel's "&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9hbmNob3IuZm0vcy8zMGVhZDM1Yy9wb2RjYXN0L3Jzcw=="&gt;recycled talks&lt;/a&gt;". I think this is the right blend of "&lt;a href="https://www.garyvaynerchuk.com/the-one-thing-i-didnt-clarify-enough-in-jab-jab-jab-right-hook/"&gt;jab jab jab, right hook&lt;/a&gt;": Giving value on a regular basis, and only infrequently asking for something self serving (my listener's time to listen to my voice drone on).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Curation.&lt;/strong&gt; The weekday episodes clip extensively from other podcasts I listen to. I often get asked about IP rights of doing this, since it is so rarely done — I am mostly relying on &lt;a href="https://en.wikipedia.org/wiki/Fair_use"&gt;fair use&lt;/a&gt; law and asking for forgiveness rather than permission. For what it's worth, every time I've publicly tweeted about an episode clip &lt;a href="https://twitter.com/swyx/status/1382836263011581955"&gt;like with Lynn Jurich&lt;/a&gt; or &lt;a href="https://twitter.com/swyx/status/1372968161620811782"&gt;Shaan Puri&lt;/a&gt;, it's received retweets and even thanks from the people involved in the podcast. As for my listeners, I hope it helps them discover podcasts they haven't heard before, and zoom in to the specific timestamp that I deem most valuable.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Brevity.&lt;/strong&gt; The shortcast format is another innovation - most weekday episodes are edited to under 10 minutes as much as possible. This is part creative constraint, part keen calculation: Everyone else puts out 30, 60, 120, and 180 minute episodes, so I stand out when I drop something that ends in 3 minutes and delivers that single hit you think about for months. It feels like a much smaller ask for hopefully great value.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#downsides"&gt;
  &lt;/a&gt;
  Downsides
&lt;/h2&gt;

&lt;p&gt;I've had my own struggles with the high frequency format as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Audio Editing&lt;/strong&gt;: I've gotten a lot better at putting episodes together with Audacity and Descript, but it is still a massive time sink and often takes 2-5x longer to produce than the final output.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Discoverability:&lt;/strong&gt; Audio just doesn't show up for SEO. This can be mediated by smart titling and including transcripts, but it will just never rank as highly as a standalone blogpost. But perhaps more concerning for ROI on my time, my efforts will never scale through algorithmic recommendations. I have to put in extra effort mentioning it on Twitter or email, and it mostly doesn't do very well due to the platform incongruity.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Analytics:&lt;/strong&gt; While I can track downloads, I don't &lt;em&gt;actually&lt;/em&gt; know if anyone is even listening on the other side. So I do rely on people giving me positive encouragement via email, Discord, or Twitter like &lt;a href="https://twitter.com/nickytonline/status/1392844338925871109?s=20"&gt;this&lt;/a&gt; or &lt;a href="https://twitter.com/ronvoluted/status/1395540202412597251?s=20"&gt;this&lt;/a&gt; or &lt;a href="https://twitter.com/APKoponen/status/1359508767625392131?s=20"&gt;this&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Depth&lt;/strong&gt;: Depressingly, most people don't read the descriptions of podcasts. I love giving further details for people to go down the same path I did, but people can't click on a link in my spoken word.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Commentary&lt;/strong&gt;: People respond to podcasts even less than they read the descriptions, because the medium itself doesn't have an inbuilt feedback layer. I could include my email or a feedback form in every episode, but even then the response rate is super low. And it is many-to-one, rather than many-to-many, where feedback is encouraged because people can see that &lt;em&gt;other people&lt;/em&gt; are giving feedback, and that I am responsive to it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For these reasons, I am thinking about branching out or tweaking the format yet again, to involve YouTube. YouTube has a lot of these downsides mitigated, and the audio can still be stripped out and republished as an audio podcast. However, one downside is amplified: the need to edit &lt;strong&gt;video&lt;/strong&gt; over audio, with correspondingly higher wait times and longer publish cycle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shameless-plug"&gt;
  &lt;/a&gt;
  Shameless Plug
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://swyx.transistor.fm/"&gt;Subscribe to my mixtape&lt;/a&gt; already to experience it yourself, and let me know if you're inspired to start your own!&lt;/p&gt;

</description>
      <category>creators</category>
      <category>podcast</category>
      <category>reflections</category>
    </item>
    <item>
      <title>How Litestream Eliminated My Database Server for $0.03/month</title>
      <author>Michael Lynch</author>
      <pubDate>Fri, 28 May 2021 01:56:34 +0000</pubDate>
      <link>https://dev.to/mtlynch/how-litestream-eliminated-my-database-server-for-0-03-month-5hnp</link>
      <guid>https://dev.to/mtlynch/how-litestream-eliminated-my-database-server-for-0-03-month-5hnp</guid>
      <description>&lt;p&gt;Here's a riddle. My web app keeps all of its data in a SQL database. I can spontaneously tear it down, deploy the code to a different hosting platform, and the app will still serve all the same data. Running my app in production costs $0.03 per month.&lt;/p&gt;

&lt;p&gt;How is this possible?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;That's easy. You have a separate database server running somewhere that stores all of your app's state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No, my app never talks to a remote database server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Oh, then you're using a proprietary, managed datastore like &lt;a href="https://aws.amazon.com/dynamodb/"&gt;Amazon DynamoDB&lt;/a&gt; or &lt;a href="https://cloud.google.com/firestore"&gt;Google Cloud Firestore&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nope, my entire stack is open-source and platform-agnostic.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Then what?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I combined &lt;a href="https://sqlite.org/index.html"&gt;SQLite&lt;/a&gt;, &lt;a href="https://litestream.io/"&gt;Litestream&lt;/a&gt;, and &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My tool is called &lt;a href="https://logpaste.com"&gt;LogPaste&lt;/a&gt;. It allows users to generate shareable URLs for text files. I use it in my open-source &lt;a href="https://tinypilotkvm.com"&gt;KVM over IP device&lt;/a&gt; so that users can easily share diagnostic logs with me.&lt;/p&gt;

&lt;p&gt;Sharing text files isn't exactly revolutionary, but serverless data replication might be. Here's a demo of me migrating my LogPaste app server between two separate hosting platforms: &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt; and &lt;a href="https://fly.io"&gt;fly.io&lt;/a&gt;. There's no database server or data migration step, but all of my data persists between platforms:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://asciinema.org/a/I2HcYheYayeh7aHj23QSY9Vyf"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--44aH_TIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/MTwEeyS.jpg" alt="Still of shell capture of LogPaste in action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The best part is that I didn't need to modify my app's code at all. It just writes to a local SQLite database, and Litestream magically handles data replication in the background.&lt;/p&gt;

&lt;p&gt;In this post, I'll explain how I integrated Litestream into my app and how you can do the same to replace your expensive, complicated database servers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-persistence-for-people-who-hate-database-servers"&gt;
  &lt;/a&gt;
  Data persistence for people who hate database servers
&lt;/h2&gt;

&lt;p&gt;My shameful programmer secret is that I can't maintain a database server.&lt;/p&gt;

&lt;p&gt;I've been building my own software products and services for the past eight years, and I've never used a database server in production. I don't want to be responsible for backups or software upgrades, so anything that requires MySQL, Postgres, or Redis is a dealbreaker for me.&lt;/p&gt;

&lt;p&gt;Instead, I've always used Google-managed datastores like Cloud Datastore, Firebase, and Firestore. But every few years, Google builds a totally new datastore solution, deprecates its old one, and &lt;a href="https://medium.com/@steve.yegge/dear-google-cloud-your-deprecation-policy-is-killing-you-ee7525dc05dc"&gt;dumps all the migration work onto its customers&lt;/a&gt;. I didn't want to create another service on top of a tech stack that Google would probably kill off soon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tza7obBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mtlynch.io/litestream/gcp-deprecations.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tza7obBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mtlynch.io/litestream/gcp-deprecations.png" alt="Screenshot of AppEngine library documentation featuring several deprecation notices"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#litestream-the-serverless-database-server"&gt;
  &lt;/a&gt;
  Litestream: the serverless database server
&lt;/h2&gt;

&lt;p&gt;A few months ago, I saw that &lt;a href="https://twitter.com/benbjohnson"&gt;Ben Johnson&lt;/a&gt;, author of the popular &lt;a href="https://github.com/boltdb/bolt"&gt;Bolt database&lt;/a&gt;, had taken on a new project: &lt;a href="http://litestream.io"&gt;Litestream&lt;/a&gt;. It's a simple, open-source tool that replicates a SQLite database to Amazon's S3 cloud storage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IHRKwaiM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mtlynch.io/litestream/litestream.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IHRKwaiM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mtlynch.io/litestream/litestream.png" alt="Screenshot of Litestream homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seemed neat, but I wasn't particularly excited about it. I never use SQLite, so what did I care?&lt;/p&gt;

&lt;p&gt;I didn't have anything against SQLite, but the design seemed impractical. Unlike other databases that send data to an external server over the network, SQLite writes everything to a local file. I always worried, "What happens if I lose that file?"&lt;/p&gt;

&lt;p&gt;Thinking about it more, I realized I'd dismissed Litestream because I didn't use SQLite. But Litestream solved the very obstacle keeping me from adopting SQLite... Maybe this was worth a try.&lt;/p&gt;

&lt;p&gt;Even better, Litestream could be my ticket out of Google Cloud Platform. SQLite runs anywhere, so I'd have freedom in choosing server hosting platforms. Litestream provides vendor flexibility on the storage side, as it supports any S3-compatible service, including &lt;a href="https://www.backblaze.com/b2/cloud-storage.html"&gt;BackBlaze B2&lt;/a&gt;, &lt;a href="https://wasabi.com/"&gt;Wasabi&lt;/a&gt;, and &lt;a href="https://min.io/"&gt;Minio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Litestream sounded rosy in theory, but you can't judge a technology until you test it in production. I needed a log upload service, and it seemed like the perfect project to test Litestream.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-basic-functionality"&gt;
  &lt;/a&gt;
  Creating the basic functionality
&lt;/h2&gt;

&lt;p&gt;LogPaste needed to accept HTTP PUT requests from the command-line, so I wrote &lt;a href="https://github.com/mtlynch/logpaste/blob/add9e363bd0ea0116d60e759778114ddbc979024/handlers/paste.go#L45L78"&gt;this simple HTTP handler&lt;/a&gt; in Go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;defaultServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pastePut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Read the full HTTP PUT request body as a string.&lt;/span&gt;
    &lt;span class="n"&gt;bodyRaw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"can't read request body"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bodyRaw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Generate a random entry ID.&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;generateEntryId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Store the PUT body in the SQLite database.&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InsertEntry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"can't save entry"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Send a JSON response with the ID we generated.&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;PastePutResponse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://github.com/mtlynch/logpaste/blob/master/store/sqlite/sqlite.go#L56L75"&gt;&lt;code&gt;InsertEntry&lt;/code&gt; implementation&lt;/a&gt; looks how you'd expect. It's a basic SQLite row insertion:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;InsertEntry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;`
  INSERT INTO entries(
    id,
    creation_time,
    contents)
  values(?,?,?)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RFC3339&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This allows LogPaste to accept HTTP requests from the command line like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-X&lt;/span&gt; PUT &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"Hello, world!"&lt;/span&gt; http://localhost:3001
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;:&lt;span class="s2"&gt;"fFnL9cU6"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://localhost:3001/fFnL9cU6
Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That works, but it's writing the SQLite database to the local filesystem. I needed to integrate Litestream to enable cloud storage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#layering-in-litestream-for-cloud-data-syncing"&gt;
  &lt;/a&gt;
  Layering in Litestream for cloud data syncing
&lt;/h2&gt;

&lt;p&gt;One of Litestream's biggest strengths is that it's completely independent of the application it serves. My LogPaste code never calls into a Litestream API, nor does it require any special configuration to allow syncing. Litestream quietly does its job in the background.&lt;/p&gt;

&lt;p&gt;I created &lt;a href="https://hub.docker.com/r/mtlynch/logpaste/"&gt;a custom Docker image&lt;/a&gt; to combine Litestream and LogPaste. Generally, Docker images should hold Just One Service, but I sometimes bend this rule to facilitate deployment. It's orders of magnitude easier to deploy a single, independent Docker container than two containers that need to coordinate with each other.&lt;/p&gt;

&lt;p&gt;LogPaste's &lt;a href="https://github.com/mtlynch/logpaste/blob/a9d9b39e4b78401c68cd54ed3d2fd40838dd7b8b/Dockerfile"&gt;Dockerfile&lt;/a&gt; starts by building the LogPaste binary from source, and then it pulls down the Linux executable for Litestream.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# Build LogPaste from source&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;go build &lt;span class="se"&gt;\
&lt;/span&gt;  &lt;span class="nt"&gt;-mod&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;readonly&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;  &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;  &lt;span class="nt"&gt;-o&lt;/span&gt; /app/server &lt;span class="se"&gt;\
&lt;/span&gt;  ./main.go

&lt;span class="c"&gt;# Download Litestream executable&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;wget &lt;span class="s2"&gt;"https://github.com/benbjohnson/litestream/releases/download/v&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;litestream_version&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;litestream_deb_filename&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, Docker copies a custom &lt;code&gt;litestream.yml&lt;/code&gt; file into the image. This is Litestream's &lt;a href="https://litestream.io/reference/config/"&gt;configuration file&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;access-key-id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${LITESTREAM_ACCESS_KEY_ID}&lt;/span&gt;
&lt;span class="na"&gt;secret-access-key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${LITESTREAM_SECRET_ACCESS_KEY}&lt;/span&gt;
&lt;span class="na"&gt;dbs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${DB_PATH}&lt;/span&gt;
    &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${DB_REPLICA_URL}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;replicas.url&lt;/code&gt; field contains the cloud storage location for my database. &lt;code&gt;access-key-id&lt;/code&gt; and &lt;code&gt;secret-access-key&lt;/code&gt; are the IAM-style credentials Litestream needs to access the cloud storage bucket.&lt;/p&gt;

&lt;p&gt;You can hardcode these values into the configuration file, but Litestream supports environment variables and interpolates them at runtime. That's a convenient feature, as it allows you to keep your &lt;code&gt;litestream.yml&lt;/code&gt; file under source control without storing any sensitive credentials. It also makes the Docker image portable — anyone can create their own LogPaste server by reusing &lt;a href="https://hub.docker.com/r/mtlynch/logpaste/"&gt;my image&lt;/a&gt; and setting environment variables for their cloud storage bucket.&lt;/p&gt;

&lt;p&gt;The next bit of Litestream logic is in LogPaste's &lt;a href="https://github.com/mtlynch/logpaste/blob/a9d9b39e4b78401c68cd54ed3d2fd40838dd7b8b/docker_entrypoint"&gt;&lt;code&gt;docker_entrypoint&lt;/code&gt; script&lt;/a&gt;, which runs when the Docker container launches. It starts by pulling down the app's latest database snapshot from cloud storage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Restore database from S3.&lt;/span&gt;
litestream restore &lt;span class="nt"&gt;-if-replica-exists&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DB_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;-if-replica-exists&lt;/code&gt; flag tells Litestream that it's okay if no snapshots exist on cloud storage yet. Otherwise, you'd have a chicken-and-egg problem. Your app could never launch because there's no cloud database to restore, but Litestream can't replicate the database to cloud storage because the app has never run.&lt;/p&gt;

&lt;p&gt;Next, the entrypoint script spawns a Litestream process, which watches LogPaste's SQLite database and continuously streams any changes to cloud storage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Begin replication to S3 in the background.&lt;/span&gt;
litestream replicate &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DB_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DB_REPLICA_URL&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The minor hack is in that trailing &lt;code&gt;&amp;amp;&lt;/code&gt;. It tells the script to run the Litestream process in the background, which is how I can execute two long-running processes in the same Docker container. Ben Johnson has published &lt;a href="https://github.com/benbjohnson/litestream-s6-example"&gt;a cleaner solution&lt;/a&gt;, but I'm using the hacky version for ease of demonstration.&lt;/p&gt;

&lt;p&gt;The entrypoint script ends by launching the Logpaste app, which is a simple HTTP server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Start LogPaste server.&lt;/span&gt;
/app/server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the Docker container with all the environment variables populated, I use &lt;a href="https://github.com/mtlynch/logpaste#from-docker--cloud-data-replication"&gt;this command&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;LITESTREAM_ACCESS_KEY_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MY-ACCESS-ID
&lt;span class="nv"&gt;LITESTREAM_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MY-SECRET-ACCESS-KEY
&lt;span class="nv"&gt;DB_REPLICA_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;s3://my-bucket-name/db

docker run &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"PORT=3001"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"LITESTREAM_ACCESS_KEY_ID=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LITESTREAM_ACCESS_KEY_ID&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"LITESTREAM_SECRET_ACCESS_KEY=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LITESTREAM_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"DB_REPLICA_URL=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DB_REPLICA_URL&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-p&lt;/span&gt; 3001:3001/tcp &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--name&lt;/span&gt; logpaste &lt;span class="se"&gt;\&lt;/span&gt;
  mtlynch/logpaste
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's how it all fits together in production:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BXBybWBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mtlynch.io/litestream/diagram.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BXBybWBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mtlynch.io/litestream/diagram.jpg" alt="Diagram of how LogPaste, Litestream, Docker, and S3 all fit together"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-logpaste-in-production"&gt;
  &lt;/a&gt;
  Using LogPaste in production
&lt;/h2&gt;

&lt;p&gt;I'm using LogPaste in production for &lt;a href="https://tinypilotkvm.com"&gt;TinyPilot&lt;/a&gt;, my open-source KVM over IP device. Because users run my software on devices they own, I can't see any diagnostic information when they report issues. LogPaste provides a convenient way for users to share their logs with me.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HZUdtrz4SB4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;LogPaste has handled all of TinyPilot's debug logs for the past few months, and it's worked well. The cost for data replication truly is just $0.03 per month:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BL8WU7CC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mtlynch.io/litestream/aws-bill.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BL8WU7CC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mtlynch.io/litestream/aws-bill.png" alt="Screenshot of AWS bill showing $0.03 in S3 charges and $0.00 in data transfer fees"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My use case is, admittedly, fairly gentle. Only a handful of users upload their logs each day, so there may be pain points with this setup under heavier workloads.&lt;/p&gt;

&lt;p&gt;It's also important to note that Litestream can't resolve conflicts between multiple database writes, so each database can have only one application server with write access.&lt;/p&gt;

&lt;p&gt;Still, I've been incredibly impressed with Litestream, and I'm eager to use it in more scenarios.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfhosting-logpaste"&gt;
  &lt;/a&gt;
  Self-hosting LogPaste
&lt;/h2&gt;

&lt;p&gt;If you want to host your own instance of my LogPaste app, it's easy to deploy. You can even customize the text on the homepage so that it says your product's name instead of "LogPaste."&lt;/p&gt;

&lt;p&gt;For example, here's TinyPilot's version:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xy9Ic1Sl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mtlynch.io/litestream/tinypilot-branding.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xy9Ic1Sl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mtlynch.io/litestream/tinypilot-branding.png" alt="Screenshot of TinyPilot's LogPaste instance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've written deployment instructions for a few different platforms:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Platform&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/mtlynch/logpaste/blob/master/docs/deployment/fly.io.md"&gt;fly.io&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free tier allows up to three always-on instances and includes SSL certificates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/mtlynch/logpaste/blob/master/docs/deployment/lightsail.md"&gt;Amazon LightSail&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;$7/month per instance, includes SSL certificates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/mtlynch/logpaste/blob/master/docs/deployment/heroku.md"&gt;Heroku&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free tier allows unlimited on-demand instances, $7/month for SSL certificates on custom domains&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://litestream.io/"&gt;Litestream&lt;/a&gt;: Litestream's official documentation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mtlynch/logpaste"&gt;mtlynch/logpaste&lt;/a&gt;: MIT-licensed source code and documentation for LogPaste.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/benbjohnson/litestream-s6-example"&gt;litestream-s6-example&lt;/a&gt;: A more advanced and robust method for running Litestream alongside your app in a Docker container. It uses &lt;a href="https://github.com/just-containers/s6-overlay"&gt;s6-overlay&lt;/a&gt; to restart the Litestream instance on failure.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Architecture diagram by &lt;a href="https://www.lolo-ology.com/"&gt;Loraine Yow&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks to &lt;a href="https://twitter.com/benbjohnson"&gt;Ben Johnson&lt;/a&gt; for his work on Litestream and his early review of this article. Thanks to the members of the &lt;a href="https://bloggingfordevs.com"&gt;Blogging for Devs Community&lt;/a&gt; for providing feedback on this post.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>litestream</category>
      <category>sqlite</category>
      <category>go</category>
      <category>pastebin</category>
    </item>
    <item>
      <title>Exploring DEV.to API</title>
      <author>Joseph Maurer</author>
      <pubDate>Fri, 28 May 2021 00:02:12 +0000</pubDate>
      <link>https://dev.to/mwrpwr/exploring-dev-to-api-45ni</link>
      <guid>https://dev.to/mwrpwr/exploring-dev-to-api-45ni</guid>
      <description>&lt;p&gt;You often forget that APIs exist for most of the platforms you use. While some companies lock down their APIs to only provide very limited information, DEV.to goes the extra mile to provide an extremely robust API. Let’s go over what is available!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/SJtGzVoA5Uw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Link to Project: &lt;a href="https://www.josephamaurer.com/Projects/DevAPI/RecentDevPosts.html"&gt;https://www.josephamaurer.com/Projects/DevAPI/RecentDevPosts.html&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Link to DEV API Documentation: &lt;a href="https://docs.forem.com/api/"&gt;https://docs.forem.com/api/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;DEV’s API allows for lots of interesting functionality. In the video above, I go over a use case where you pull the latest 100 posts, and create bootstrap cards for each. In each card I display three buttons. The first is either active or disabled if the user has a twitter account. This is useful because I like to retweet articles and tag their creators. The second button is a link to the DEV post. Finally the third button opens the API response for the article.&lt;/p&gt;

&lt;p&gt;While my example showed articles, there are lots of different things that the API can return to you. One of the more interesting functionality is the ability to post an article completely from the API. I have no idea why you would want to do that, but it could be useful. &lt;/p&gt;

&lt;p&gt;All in all, it’s cool to think that this functionality exists, even if you can’t find a practical use case for it. One of the more useful use cases might just be populating your recent articles from your blog to your website. &lt;/p&gt;

&lt;p&gt;Let me know what you would want to do with this API!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>todayilearned</category>
      <category>webdev</category>
      <category>api</category>
    </item>
    <item>
      <title>Simple GUI on Linux Using Zenity and Node.js</title>
      <author>Fernando Raposo da Camara Silva</author>
      <pubDate>Thu, 27 May 2021 23:42:59 +0000</pubDate>
      <link>https://dev.to/ferfox1981/simple-gui-on-linux-using-zenity-and-node-js-2kei</link>
      <guid>https://dev.to/ferfox1981/simple-gui-on-linux-using-zenity-and-node-js-2kei</guid>
      <description>&lt;p&gt;It is incredible the amount of "secret" features on Linux that are not well known until today.&lt;br&gt;
I came across a tool called Zenity the other day. It is related to sending UI notifications on Linux.&lt;br&gt;
Zenity is an open-source tool for displaying simple GUI in shell scripts. It makes scripts more user-friendly by displaying GTK+ dialogs. It is tipically used on shell scripting to improve its usability.&lt;/p&gt;

&lt;p&gt;My goal is to do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use Node.js to access financial data related to Brazilian Treasury Bonds (Tesouro Direto in Brazil);&lt;/li&gt;
&lt;li&gt;Create a mechanism to sistematically check instant treasury rates;&lt;/li&gt;
&lt;li&gt;Use Zenity to pop-up a notification to user;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#acessing-tesouro-direto-data"&gt;
  &lt;/a&gt;
  Acessing Tesouro Direto Data
&lt;/h3&gt;

&lt;p&gt;Tesouro Direto Rates can be found &lt;a href="https://www.tesourodireto.com.br/titulos/precos-e-taxas.htm"&gt;here&lt;/a&gt;. In addition, if you press F12 and check Network Tab, you'll see that the following json is received by the browser:  &lt;a href="https://www.tesourodireto.com.br/json/br/com/b3/tesourodireto/service/api/treasurybondsinfo.json"&gt;https://www.tesourodireto.com.br/json/br/com/b3/tesourodireto/service/api/treasurybondsinfo.json&lt;/a&gt; &lt;br&gt;
We can see that it contains all the current treasury rates up to date.&lt;br&gt;
So, there's not much to do other than to use Node.js to make GET commands and capture that json file as shown bellow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const axios = require('axios');
const { exec } = require("child_process");
const https = require('https');



const instance = axios.create({
  httpsAgent: new https.Agent({
    rejectUnauthorized: false
  })
});

instance.get('https://www.tesourodireto.com.br/json/br/com/b3/tesourodireto/service/api/treasurybondsinfo.json')
.then(x =&amp;gt; {...

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: That &lt;code&gt;rejectUnauthorized: false&lt;/code&gt; is important to be set, otherwise you will get a certificate error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task-scheduler"&gt;
  &lt;/a&gt;
  Task Scheduler
&lt;/h3&gt;

&lt;p&gt;A cron job is a Linux command used for scheduling tasks to be executed sometime in the future. This feature is exactly what is needed to check the desired rates every hour. So, we will use a cron job to call our Node script to get the treasury bond rates every hour.&lt;br&gt;
To create your Cron Job go to:&lt;br&gt;
&lt;code&gt;/var/spool/cron&lt;/code&gt;&lt;br&gt;
And access user's cron tab by typing:&lt;br&gt;
&lt;code&gt;crontab -e&lt;/code&gt;&lt;br&gt;
The README presents orientation about how to schedule commands using crontab by adding some expressionfollowed by the command that needs to be executed.&lt;br&gt;
For instance, if you want your program to run every minute from 10AM to 17PM every weekday, write the following:&lt;br&gt;
&lt;code&gt;* 10-17 * * 1-5 &amp;lt;command&amp;gt;&lt;/code&gt;&lt;br&gt;
In order to ease this task, there is a site called &lt;a href="https://crontab.guru/"&gt;crontab.guru&lt;/a&gt; that helps us to construct the expression. &lt;br&gt;
Note: To schedule cron to run your script EVERY HOUR of EVERY WEEKDAY from 10AM to 17PM, the expression is: 0 10-17 * * 1-5 &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remember to add the full path of Node and script to make the cron tab job to work properly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#notifications-using-zenity"&gt;
  &lt;/a&gt;
  Notifications Using Zenity
&lt;/h2&gt;

&lt;p&gt;Zenity is a tool that enables the generation of dialogs from terminal commands. &lt;a href="https://help.gnome.org/users/zenity/stable/notification.html.en"&gt;Notifications&lt;/a&gt; look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C3mpCZ7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckjsjqgap60xf32vhglv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C3mpCZ7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckjsjqgap60xf32vhglv.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 You can generate them by typing on Terminal:&lt;br&gt;
&lt;code&gt;zenity --notification\&lt;br&gt;
    --window-icon="info" \&lt;br&gt;
    --text="There are system updates necessary!"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There's a good chance that Zenity is alredy installed on your machine (In Ubuntu it is). If you do not have it, please type:&lt;br&gt;
&lt;code&gt;sudo apt-get update -y&lt;/code&gt;&lt;br&gt;
next, type:&lt;br&gt;
&lt;code&gt;sudo apt-get install -y zenity&lt;/code&gt;&lt;br&gt;
To conclude our goals we need a way to make Node run shell commands and process their I/O. This is achieved by using exec library as shown bellow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  exec('zenity --notification --window-icon="info" --text="Taxa Atual TD 2035: IPCA+"' + taxa, (error, stdout, stderr) =&amp;gt; {
    if (error) {
      console.log(`error: ${error.message}`);
      return;
    }
    if (stderr) {
      console.log(`stderr: ${stderr}`);
      return;
    }
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The entire Github project is available &lt;a href="https://github.com/ferfox1981/td-monitor"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fonts:&lt;br&gt;
&lt;a href="https://help.gnome.org/users/zenity/stable/index.html.en"&gt;https://help.gnome.org/users/zenity/stable/index.html.en&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.howtoforge.com/how-to-display-gui-dialogs-in-bash-script-using-zenity/"&gt;https://www.howtoforge.com/how-to-display-gui-dialogs-in-bash-script-using-zenity/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://crontab.guru/"&gt;https://crontab.guru/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>linux</category>
      <category>gui</category>
      <category>cronjob</category>
    </item>
  </channel>
</rss>
