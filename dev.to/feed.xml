<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Reminder ‚Äî Join Us for the MongoDB Atlas Hackathon ‚è∞ </title>
      <author>dev.to staff</author>
      <pubDate>Sat, 01 Jan 2022 04:59:22 +0000</pubDate>
      <link>https://dev.to/devteam/reminder-join-us-for-the-mongodb-atlas-hackathon-k0m</link>
      <guid>https://dev.to/devteam/reminder-join-us-for-the-mongodb-atlas-hackathon-k0m</guid>
      <description>&lt;h4&gt;
  &lt;a href="#the-mongodb-atlas-hackathon-on-dev-closes-on-january-13th-2022-midnight-utc"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The MongoDB Atlas Hackathon on DEV closes on January 13th, 2022 @ midnight UTC.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Don't miss this chance to flex your software development muscles and win up to $1,500 USD ‚Äì and more üëÄ&lt;/strong&gt; &lt;/p&gt;




&lt;p&gt;If you're just returning to your computer after celebrating the winter holidays OR if the end of 2021 has been a busy time for you, we wanted to share a friendly reminder that the &lt;a href="https://dev.to/devteam/announcing-the-mongodb-atlas-hackathon-on-dev-4b6m"&gt;MongoDB Atlas Hackathon on DEV&lt;/a&gt; is ongoing and we'd LOVE to see a submission from you. This is DEV's first-ever hackathon with our friends at MongoDB and we think it's a particularly exciting and fun opportunity to show off your software development skills. Plus, hey, the amazing prizes don't hurt either! How does a grand prize of $1,500 USD in cash sound? How about $300 to the DEV shop, plus a sticker pack and a limited-edition profile badge? ü§© &lt;/p&gt;

&lt;p&gt;Refresher: this hackathon challenges you to build an application utilizing MongoDB Atlas (a collection of cloud database and data services that helps you accelerate and simplify how you use data in your work) and share an overview of your project on DEV. There are five fascinating categories so you can truly build what interests you. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gtgt-full-details-on-how-to-participate-in-the-mongodb-atlas-hackathon-here"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://dev.to/devteam/announcing-the-mongodb-atlas-hackathon-on-dev-4b6m"&gt;&amp;gt;&amp;gt; Full details on how to participate in the MongoDB Atlas Hackathon here&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;




&lt;h3&gt;
  &lt;a href="#additional-tools-amp-reminders"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Additional tools &amp;amp; reminders&lt;/strong&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Questions about MongoDB or the hackathon in general? Head over to our help thread, which is being monitored by the MongoDB and DEV teams&lt;/em&gt;:&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devteam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTihtlIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nJ87SGF6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png" alt="The DEV Team" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zg3sT9Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vHKcEiTe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/3/13d3b32a-d381-4549-b95e-ec665768ce8f.png" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/mongodb-atlas-hackathon-help-thread-3g3a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;MongoDB Atlas Hackathon Help Thread&lt;/h2&gt;
      &lt;h3&gt;dev.to staff for The DEV Team „Éª Dec 13 '21 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#atlashackathon&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mongodb&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#help&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Looking for a chance to connect with other participants? Want to find a project partner or simply share your progress? The community discussion thread is the perfect place to do that&lt;/em&gt;:&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devteam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTihtlIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nJ87SGF6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png" alt="The DEV Team" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zg3sT9Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vHKcEiTe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/3/13d3b32a-d381-4549-b95e-ec665768ce8f.png" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/share-your-mongodb-atlas-hackathon-updates-5g4k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Share your MongoDB Atlas Hackathon Updates!&lt;/h2&gt;
      &lt;h3&gt;dev.to staff for The DEV Team „Éª Dec 13 '21 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#atlashackathon&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mongodb&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#happy-coding-and-enjoy-this-challenge-you-have-just-under-two-weeks-left"&gt;
  &lt;/a&gt;
  Happy coding and enjoy this challenge! You have just under two weeks left!
&lt;/h2&gt;

</description>
      <category>meta</category>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>Introduction to Kubernetes with Amazon EKS</title>
      <author>Donald Sebastian Leung</author>
      <pubDate>Sat, 01 Jan 2022 04:43:26 +0000</pubDate>
      <link>https://dev.to/donaldsebleung/introduction-to-kubernetes-with-amazon-eks-1nj6</link>
      <guid>https://dev.to/donaldsebleung/introduction-to-kubernetes-with-amazon-eks-1nj6</guid>
      <description>&lt;p&gt;&lt;em&gt;You can access key assets in this article &lt;a href="https://github.com/DonaldKellett/k8s-intro-eks"&gt;on GitHub&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this article, we will introduce basic concepts around Kubernetes, followed by a hands-on session where we spin up a Kubernetes cluster on Amazon EKS and deploy a simple website to the cluster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;It is assumed that you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are comfortable with the Linux command line&lt;/li&gt;
&lt;li&gt;Are familiar with the concept of containers; practical experience with Docker would be beneficial&lt;/li&gt;
&lt;li&gt;Have an AWS account&lt;/li&gt;
&lt;li&gt;Possess basic experience in &lt;a href="https://dev.to/donaldsebleung/introduction-to-the-aws-cli-e6o"&gt;configuring and using the AWS CLI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Are aware that following this hands-on session may incur monetary costs and you are solely responsible for any such costs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the prerequisites addressed, let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;Modern applications are often comprised of microservices communicating with each other through the network, instead of as a single, monolithic entity. Each microservice typically runs in its own container, which calls for an efficient and standardized approach for scheduling and managing these containers. Kubernetes is the industry-standard solution that addresses these needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kubernetes"&gt;
  &lt;/a&gt;
  Kubernetes
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://en.wikipedia.org/wiki/Kubernetes"&gt;Kubernetes - Wikipedia&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Kubernetes is a container orchestration tool originally developed by Google, which was released under the open source Apache 2.0 license in 2015 and donated to the Cloud Native Computing Foundation (CNCF), a non-profit organization jointly founded by Google and The Linux Foundation at the same time for this purpose. Kubernetes allows for one or more physical or virtual machines, otherwise known as &lt;em&gt;nodes&lt;/em&gt;, to form a &lt;em&gt;cluster&lt;/em&gt;, on which containerized workloads can be scheduled, deployed and managed with relative ease, providing benefits such as scalability, reliability and high availability.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A Kubernetes cluster consists of one or more nodes, which are further subdivided into &lt;em&gt;control&lt;/em&gt; and &lt;em&gt;worker&lt;/em&gt; nodes. Control nodes reside in the &lt;em&gt;control plane&lt;/em&gt; and are responsible for scheduling and managing where containerized workloads should be run, while worker nodes reside in the &lt;em&gt;data plane&lt;/em&gt; and are responsible for actually running the containerized workloads, as well as reporting the status of these workloads (and the status of the nodes themselves) to the control plane.&lt;/p&gt;

&lt;p&gt;Kubernetes primarily relies on a &lt;em&gt;declarative&lt;/em&gt; configuration model where the Kubernetes administrator specifies one or more YAML files to be &lt;em&gt;applied&lt;/em&gt; to the cluster. Each YAML file describes one or more &lt;em&gt;objects&lt;/em&gt;, logical entities that represent part of a &lt;em&gt;desired&lt;/em&gt; state. The Kubernetes cluster then constantly works towards ensuring that each object exists and that the actual state matches the desired state, taking corrective action whenever necessary to maintain or re-converge to the desired state. We say that the state of the Kubernetes cluster is &lt;em&gt;eventually consistent&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The most basic type of object in a Kubernetes cluster is the &lt;strong&gt;Pod&lt;/strong&gt;. A pod is essentially a wrapper around a container, though it is possible for a pod to hold more than one container. Pods are &lt;em&gt;ephemeral&lt;/em&gt;, meaning that they can be created and destroyed at will, either directly by the Kubernetes administrator, or through higher-level objects such as Deployments that automatically manage such pods. Therefore, one should not expect any particular pod to exist over a prolonged period of time.&lt;/p&gt;

&lt;p&gt;Next, we have &lt;strong&gt;ReplicaSet&lt;/strong&gt;s, where each ReplicaSet manages a fixed number of identical pods (replicas), and works hard to ensure that the specified number of replicas exist. So, if for some reason, a replica in a ReplicaSet terminates, the ReplicaSet will automatically spawn a new replica. Conversely, if an extra replica was somehow created (e.g. by the Kubernetes administrator), the ReplicaSet will automatically terminate a replica.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deployment&lt;/strong&gt;s are another type of object very similar to ReplicaSets, except the former also supports rolling updates and rollbacks with zero downtime. When a new version of the containerized workload is deployed to the cluster, the deployment performs a &lt;em&gt;rolling update&lt;/em&gt;; that is, each pod running the old workload is incrementally replaced by a pod running the new one, until all pods have been replaced and running the new workload. As long as the deployment consists of 2 or more replicas, this guarantees that the application will always be available.&lt;/p&gt;

&lt;p&gt;In order to expose a Deployment to other workloads within the cluster or the outside world, a &lt;strong&gt;Service&lt;/strong&gt; needs to be created for it, which is essentially an abstraction specifying how a particular workload can be contacted through the network, e.g. what IP address and / or port should be used.&lt;/p&gt;

&lt;p&gt;Within a cluster, the workloads can be further segregated into &lt;strong&gt;Namespace&lt;/strong&gt;s, which can be thought of as virtual clusters within the real, physical cluster. This allows related workloads to be grouped together, and for unrelated workloads to be logically separated from one another.&lt;/p&gt;

&lt;p&gt;Finally, Kubernetes allows for &lt;strong&gt;CustomResourceDefinition&lt;/strong&gt;s where a Kubernetes developer and / or administrator can define their own objects to extend the functionality of Kubernetes. Needless to say, this is an advanced topic that casual Kubernetes users should not need to worry too much about.&lt;/p&gt;

&lt;p&gt;With most of the basic concepts cleared, let's get our hands dirty ;-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spinning-up-a-kubernetes-cluster-with-amazon-eks"&gt;
  &lt;/a&gt;
  Spinning up a Kubernetes cluster with Amazon EKS
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html"&gt;Getting started with Amazon EKS&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Amazon EKS stands for Elastic Kubernetes Service and is a &lt;em&gt;managed&lt;/em&gt; Kubernetes offering provided by AWS. The term "managed" roughly means that certain aspects of Kubernetes, such as provisioning each node and connecting them to form the cluster, are managed by the cloud provider so you do not have to worry about it yourself. Of course, this means that there are options for provisioning and configuring a Kubernetes cluster from scratch, which will not be covered in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://minikube.sigs.k8s.io/docs/start/"&gt;Minikube&lt;/a&gt;, &lt;a href="https://kind.sigs.k8s.io/"&gt;kind&lt;/a&gt; for spinning up a single-node cluster, intended primarily for development and testing purposes&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/"&gt;kubeadm&lt;/a&gt; for provisioning a multi-cluster node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a cluster with Amazon EKS and communicate with it, we need two tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;eksctl&lt;/code&gt;: A command-line tool specific to EKS for creating EKS Kubernetes clusters&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;kubectl&lt;/code&gt;: The Kubernetes command-line client, used for communicating with a Kubernetes &lt;em&gt;server&lt;/em&gt; (cluster)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also need AWS CLI version 2 or later, configured with an IAM user with sufficient permissions to create the cluster and its associated resources. If not, you may wish to first go through &lt;a href="https://dev.to/donaldsebleung/introduction-to-the-aws-cli-e6o"&gt;this introductory hands-on session on AWS CLI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Technically, &lt;code&gt;eksctl&lt;/code&gt; is not strictly required and an EKS cluster can be manually created using a combination of the AWS web console and the AWS CLI (and quite possibly with the CLI alone), but the process is rather complex and requires a detailed understanding of the underlying AWS services, roles, permissions, etc. &lt;code&gt;eksctl&lt;/code&gt; manages these complexities for us under the hood so we can easily create a cluster with a single command and focus on deploying our apps to Kubernetes.&lt;/p&gt;

&lt;p&gt;Now, assuming you have AWS CLI v2 installed and an IAM user with sufficient permissions (such as an IAM administrator), let's download &lt;code&gt;kubectl&lt;/code&gt; version 1.21 from AWS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-o&lt;/span&gt; kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also possible to download &lt;code&gt;kubectl&lt;/code&gt; &lt;a href="https://kubernetes.io/docs/tasks/tools/"&gt;from upstream&lt;/a&gt;; they should be the same so it shouldn't make a difference.&lt;/p&gt;

&lt;p&gt;Download the associated checksum file and use it to verify our &lt;code&gt;kubectl&lt;/code&gt; download:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-o&lt;/span&gt; kubectl.sha256 https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl.sha256
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sha256sum&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; kubectl.sha256
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the download was not corrupted, the second command should output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl: OK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, make &lt;code&gt;kubectl&lt;/code&gt; executable and install it somewhere under your PATH:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x ./kubectl
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo mv &lt;/span&gt;kubectl /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, download and install &lt;code&gt;eksctl&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;--silent&lt;/span&gt; &lt;span class="nt"&gt;--location&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;_amd64.tar.gz"&lt;/span&gt; | &lt;span class="nb"&gt;tar &lt;/span&gt;xz &lt;span class="nt"&gt;-C&lt;/span&gt; /tmp
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo mv&lt;/span&gt; /tmp/eksctl /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the installation was successful, running &lt;code&gt;eksctl version&lt;/code&gt; should print an appropriate version number and exit.&lt;/p&gt;

&lt;p&gt;With the tools installed, let's spin up a cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;eksctl create cluster
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see some blue information text printed to the console, and the command may take a while to complete, so do be patient. In my case, it took about 20 minutes before my cluster was ready.&lt;/p&gt;

&lt;p&gt;On success, the last line of output should be similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-12-29 21:30:44 [‚úî]  EKS cluster "beautiful-unicorn-1640783508" in "us-east-1" region is ready
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The name of your cluster (&lt;code&gt;beautiful-unicorn-1640783508&lt;/code&gt; in my case) and the region in which it is deployed (&lt;code&gt;us-east-1&lt;/code&gt;) may vary. Note that you could also have explicitly specified a name and region when creating the cluster by passing in the &lt;code&gt;--name&lt;/code&gt; and &lt;code&gt;--region&lt;/code&gt; flags respectively.&lt;/p&gt;

&lt;p&gt;Now check our Kubernetes version. Note that you should see &lt;em&gt;two&lt;/em&gt; versions: one for the &lt;code&gt;kubectl&lt;/code&gt; client that we downloaded (v1.21.x if you followed the instructions exactly), and one for the server (cluster). However, if &lt;code&gt;kubectl&lt;/code&gt; is not correctly configured to connect to the cluster, you may receive an error when attempting to read the Kubernetes version from the server. Therefore, checking the Kubernetes version also serves to check that the cluster is up and running, and that we can connect to it with &lt;code&gt;kubectl&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl version &lt;span class="nt"&gt;--short&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(omitting the &lt;code&gt;--short&lt;/code&gt; flag prints detailed version information in JSON format)&lt;/p&gt;

&lt;p&gt;Here, I get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Client Version: v1.21.2-13+d2965f0db10712
Server Version: v1.21.2-eks-06eac09
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another thing to note is that the Kubernetes client and server versions should only be &lt;em&gt;at most 1 minor version apart&lt;/em&gt;. So if you downloaded the absolute latest &lt;code&gt;kubectl&lt;/code&gt; version (1.23 at the time of writing), you would see a warning about incompatible Kubernetes client / server versions as the server is at 1.21 which is 2 minor versions behind. In that case, you will have to downgrade your version of &lt;code&gt;kubectl&lt;/code&gt; accordingly.&lt;/p&gt;

&lt;p&gt;Now that our cluster is ready and we can connect to it, let's fetch some info about our cluster.&lt;/p&gt;

&lt;p&gt;Get a list of all clusters we have created with &lt;code&gt;eksctl&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;eksctl get cluster
2021-12-29 21:47:35 &lt;span class="o"&gt;[&lt;/span&gt;‚Ñπ]  eksctl version 0.77.0
2021-12-29 21:47:35 &lt;span class="o"&gt;[&lt;/span&gt;‚Ñπ]  using region us-east-1
NAME                REGION      EKSCTL CREATED
beautiful-unicorn-1640783508    us-east-1   True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get a list of all nodes in our cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get nodes
NAME                             STATUS   ROLES    AGE   VERSION
ip-192-168-23-192.ec2.internal   Ready    &amp;lt;none&amp;gt;   20m   v1.21.5-eks-bc4871b
ip-192-168-61-32.ec2.internal    Ready    &amp;lt;none&amp;gt;   20m   v1.21.5-eks-bc4871b
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get a list of all namespaces in our cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get namespaces
NAME              STATUS   AGE
default           Active   30m
kube-node-lease   Active   30m
kube-public       Active   30m
kube-system       Active   30m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get a list of services in the default namespace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get services
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;   AGE
kubernetes   ClusterIP   10.100.0.1   &amp;lt;none&amp;gt;        443/TCP   31m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get a list of services in the &lt;code&gt;kube-system&lt;/code&gt; namespace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get services &lt;span class="nt"&gt;--namespace&lt;/span&gt; kube-system
NAME       TYPE        CLUSTER-IP    EXTERNAL-IP   PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;         AGE
kube-dns   ClusterIP   10.100.0.10   &amp;lt;none&amp;gt;        53/UDP,53/TCP   32m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get a list of pods in the default namespace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get pods
No resources found &lt;span class="k"&gt;in &lt;/span&gt;default namespace.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are no pods in the default namespace because we haven't deployed any apps yet. However, a number of pods were created in other namespaces (such as &lt;code&gt;kube-system&lt;/code&gt;) for the control plane:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get pods &lt;span class="nt"&gt;--all-namespaces&lt;/span&gt;
NAMESPACE     NAME                       READY   STATUS    RESTARTS   AGE
kube-system   aws-node-ftwmx             1/1     Running   0          28m
kube-system   aws-node-km5k2             1/1     Running   0          29m
kube-system   coredns-66cb55d4f4-8645g   1/1     Running   0          37m
kube-system   coredns-66cb55d4f4-l5wxg   1/1     Running   0          37m
kube-system   kube-proxy-cmpr2           1/1     Running   0          29m
kube-system   kube-proxy-h5phz           1/1     Running   0          28m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command fetches pods from all namespaces. Here, we see all control plane components were automatically deployed to the &lt;code&gt;kube-system&lt;/code&gt; namespace.&lt;/p&gt;

&lt;p&gt;Now that everything is working correctly, let's deploy our first Pod!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-a-single-pod-to-our-eks-cluster"&gt;
  &lt;/a&gt;
  Deploying a single Pod to our EKS cluster
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/sample-deployment.html"&gt;Deploy a sample application&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's first create a namespace for our website, to separate it from other workloads. Recall that Kubernetes favors a declarative approach, whereby we describe objects with YAML configuration files and apply them to the cluster.&lt;/p&gt;

&lt;p&gt;Save the following in a file &lt;code&gt;namespace.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Namespace&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at some of the fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;kind&lt;/code&gt;: Describes the kind of object we are defining; in this case, a &lt;code&gt;Namespace&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;labels&lt;/code&gt;: A set of key-value pairs used to identify and keep track of objects. In this case, we define a single label &lt;code&gt;app&lt;/code&gt; with value &lt;code&gt;donaldsebleung-com&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt;: The name of our object. Here, we call it &lt;code&gt;donaldsebleung-com&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's apply it to our cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; namespace.yaml
namespace/donaldsebleung-com created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As seen above, we apply a YAML configuration file with &lt;code&gt;kubectl apply&lt;/code&gt;. The &lt;code&gt;-f &amp;lt;FILE&amp;gt;&lt;/code&gt; option specifies a single file to apply.&lt;/p&gt;

&lt;p&gt;The output indicates that the namespace was successfully created, but let's list all namespaces again to be safe:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get namespaces
NAME                 STATUS   AGE
default              Active   44h
donaldsebleung-com   Active   8s
kube-node-lease      Active   44h
kube-public          Active   44h
kube-system          Active   44h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also get info for a single object, like so: &lt;code&gt;kubectl get &amp;lt;OBJECT_KIND&amp;gt;/&amp;lt;OBJECT_NAME&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get namespace/donaldsebleung-com
NAME                 STATUS   AGE
donaldsebleung-com   Active   11m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since a namespace primarily exists to partition object within a cluster, they aren't very interesting on their own so we don't see much being printed out. But we can get more information on our namespace by specifying the &lt;code&gt;-o yaml&lt;/code&gt; option, which outputs the information about the object in YAML format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get namespace/donaldsebleung-com &lt;span class="nt"&gt;-o&lt;/span&gt; yaml
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"apiVersion"&lt;/span&gt;:&lt;span class="s2"&gt;"v1"&lt;/span&gt;,&lt;span class="s2"&gt;"kind"&lt;/span&gt;:&lt;span class="s2"&gt;"Namespace"&lt;/span&gt;,&lt;span class="s2"&gt;"metadata"&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"annotations"&lt;/span&gt;:&lt;span class="o"&gt;{}&lt;/span&gt;,&lt;span class="s2"&gt;"labels"&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"app"&lt;/span&gt;:&lt;span class="s2"&gt;"donaldsebleung-com"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="s2"&gt;"name"&lt;/span&gt;:&lt;span class="s2"&gt;"donaldsebleung-com"&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
  creationTimestamp: &lt;span class="s2"&gt;"2021-12-31T09:56:19Z"&lt;/span&gt;
  labels:
    app: donaldsebleung-com
    kubernetes.io/metadata.name: donaldsebleung-com
  name: donaldsebleung-com
  resourceVersion: &lt;span class="s2"&gt;"367633"&lt;/span&gt;
  uid: ef89d626-1437-41b6-b969-db44eaa47d6c
spec:
  finalizers:
  - kubernetes
status:
  phase: Active
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice this contains all the information we specified in our &lt;code&gt;namespace.yaml&lt;/code&gt; file, &lt;em&gt;and more&lt;/em&gt;. Tip: if you're not sure where to start when writing a YAML file for a particular kind of object, printing the YAML configuration for other objects of the same kind could serve as a reference.&lt;/p&gt;

&lt;p&gt;Now let's define a pod in our newly created namespace. Save the following configuration in a &lt;code&gt;pod.yaml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pod&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung/donaldsebleung-com:0.2.0&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8443&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we see that the &lt;code&gt;kind&lt;/code&gt; of object is a &lt;code&gt;Pod&lt;/code&gt; instead of a namespace. Let's look at some new (and existing) fields as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We added an &lt;code&gt;app&lt;/code&gt; label to our pod again, with value &lt;code&gt;donaldsebleung-com&lt;/code&gt;. Unlike the case of the namespace where the label was purely declarative, a label (or set of labels) on a pod has practical uses we'll see shortly&lt;/li&gt;
&lt;li&gt;The name of our pod is &lt;code&gt;donaldsebleung-com&lt;/code&gt;, which is identical to that of our namespace. In general, distinct objects only require distinct names if (1) they belong to the same namespace, and (2) they are the same kind of object&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;namespace&lt;/code&gt; field under &lt;code&gt;metadata&lt;/code&gt; specifies that this pod should be created in the &lt;code&gt;donaldsebleung-com&lt;/code&gt; namespace. If omitted, the pod is created in the &lt;code&gt;default&lt;/code&gt; namespace instead&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;spec&lt;/code&gt; top-level field describes what our pod is actually made of&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;containers&lt;/code&gt;, the &lt;code&gt;name&lt;/code&gt; field specifies the name of a container inside our pod. Recall that a pod can have multiple containers; hence we see a dash &lt;code&gt;-&lt;/code&gt; before the &lt;code&gt;name&lt;/code&gt; field, indicating that we are specifying a &lt;em&gt;list&lt;/em&gt; of containers, though in this case, the length of the list is 1&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;image&lt;/code&gt; field specifies which image our container should be based on. Here, we use an image with tag &lt;code&gt;donaldsebleung/donaldsebleung-com:0.2.0&lt;/code&gt;, built from the following Dockerfile:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ubuntu:focal&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; wget openjdk-11-jdk
&lt;span class="k"&gt;RUN &lt;/span&gt;wget https://github.com/DonaldKellett/donaldsebleung-com/archive/refs/tags/v0.2.0.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;tar &lt;/span&gt;xvf v0.2.0.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm &lt;/span&gt;v0.2.0.tar.gz
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mv &lt;/span&gt;donaldsebleung-com-0.2.0 /app
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;./mvnw package
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["/usr/bin/java", "-jar", "/app/target/personal-website-0.0.1-SNAPSHOT.jar"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;containerPort&lt;/code&gt; field under &lt;code&gt;ports&lt;/code&gt; exposes port &lt;code&gt;8443&lt;/code&gt; from the container. This is because our web server serves an HTTPS web page on port 8443&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; pod.yaml
pod/donaldsebleung-com created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;View pods in our namespace (&lt;code&gt;-n&lt;/code&gt; is short for &lt;code&gt;--namespace&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get pods &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
NAME                 READY   STATUS    RESTARTS   AGE
donaldsebleung-com   1/1     Running   0          85s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we see it's up and running. If not, e.g. you see &lt;code&gt;0/1&lt;/code&gt; under &lt;code&gt;READY&lt;/code&gt;, wait for a short while and run the same command again until the pod is ready.&lt;/p&gt;

&lt;p&gt;Congratulations! You've successfully deployed your first pod to a Kubernetes cluster. But wait - how do we know the web server is &lt;em&gt;actually&lt;/em&gt; up and running? Recall that pods are ephemeral - they can be created and destroyed at will, either by the cluster administrator or by higher-level objects such as deployments - so we cannot rely on a particular pod always being available. To access the web server inside our pod, we'll need to expose our pod to the rest of the cluster (and later, to the outside world) via a Service.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exposing-our-pod-to-the-cluster-via-a-service"&gt;
  &lt;/a&gt;
  Exposing our pod to the cluster via a Service
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/sample-deployment.html"&gt;Deploy a sample application&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Recall that a Service is an abstraction that exposes running workloads (in our case, a single pod). There are 4 types of services at the time of writing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ClusterIP: exposes the workload to the rest of the cluster through an internal IP, but not to the outside world&lt;/li&gt;
&lt;li&gt;NodePort: exposes the workload through a specified port on all nodes in the cluster. This is the simplest way to expose a workload to the outside world, but is rarely the best choice&lt;/li&gt;
&lt;li&gt;LoadBalancer: exposes the workload through a dedicated load balancer. The exact details of how the load balancer is provisioned, etc., depends on the cloud provider&lt;/li&gt;
&lt;li&gt;ExternalName: yet another type of service we won't cover in this article&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;More details about these types of services and how they differ can be found through in &lt;a href="https://medium.com/google-cloud/kubernetes-nodeport-vs-loadbalancer-vs-ingress-when-should-i-use-what-922f010849e0"&gt;this excellent writeup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here, we'll use a &lt;code&gt;ClusterIP&lt;/code&gt; service and explore our website within the cluster shortly. Save the following in a &lt;code&gt;clusterip-service.yaml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;    
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterIP&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https&lt;/span&gt;
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
    &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8443&lt;/span&gt;
    &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, a brief overview of the fields used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Under &lt;code&gt;spec&lt;/code&gt;, we have a &lt;code&gt;selector&lt;/code&gt; field. This selects pods based on their labels that the service should target. Here, we specify that our service should target pods with an &lt;code&gt;app&lt;/code&gt; label of value &lt;code&gt;donaldsebleung-com&lt;/code&gt;. That's why I told you labels on pods are important and not purely decorative. See? ;-)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;ClusterIP&lt;/code&gt;. This produces an internal IP we can use within the cluster to access the service&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;ports&lt;/code&gt;, the first and only item has &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;targetPort&lt;/code&gt; fields. The &lt;code&gt;targetPort&lt;/code&gt; field specifies the port within the pod(s) that network requests should be forwarded to; in this case, &lt;code&gt;8443&lt;/code&gt;, since that's where our web server is listening at. The &lt;code&gt;port&lt;/code&gt; field specifies the port through which the service is accessed from outside&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;protocol&lt;/code&gt; field specifies the transport layer protocol used (e.g. TCP, UDP, ICMP); TCP in our case&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So our service provides an IP within the cluster that forwards HTTPS requests from TCP port 443 (the standard HTTPS port) to TCP port 8443. The net result is that within the cluster, instead of having to access the website as https://&amp;lt;clusterIP&amp;gt;:8443 , we can access it as https://&amp;lt;clusterIP&amp;gt; instead like we would a normal website.&lt;/p&gt;

&lt;p&gt;Apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; clusterip-service.yaml
service/donaldsebleung-com created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Confirm the service is created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get services &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
NAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;   AGE
donaldsebleung-com   ClusterIP   10.100.36.224   &amp;lt;none&amp;gt;        443/TCP   17m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we see an IP &lt;code&gt;10.100.36.224&lt;/code&gt; accessible from within the cluster. Notice that the &lt;code&gt;EXTERNAL-IP&lt;/code&gt; is &lt;code&gt;&amp;lt;none&amp;gt;&lt;/code&gt;, i.e. we still cannot access the service from outside the cluster.&lt;/p&gt;

&lt;p&gt;To access the service from within a cluster, spawn a shell inside our pod:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com &lt;span class="nt"&gt;-it&lt;/span&gt; donaldsebleung-com &lt;span class="nt"&gt;--&lt;/span&gt; /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A breakdown of the command used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;kubectl exec&lt;/code&gt;: similar to &lt;code&gt;docker exec&lt;/code&gt;, but here we execute a command within the specified pod&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-n donaldsebleung-com&lt;/code&gt;: in the &lt;code&gt;donaldsebleung-com&lt;/code&gt; namespace&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-it donaldsebleung-com&lt;/code&gt;: allocate an &lt;strong&gt;i&lt;/strong&gt;nteractive &lt;strong&gt;t&lt;/strong&gt;ty (same as in Docker) for the pod with name &lt;code&gt;donaldsebleung-com&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-- /bin/bash&lt;/code&gt;: pass the remaining arguments to the pod - here we pass in &lt;code&gt;/bin/bash&lt;/code&gt; to execute the Bash shell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If successful, you should see a root shell and the working directory is &lt;code&gt;/app&lt;/code&gt;. In the root shell, fetch the webpage with &lt;code&gt;wget&lt;/code&gt; and print to stdout, replacing &lt;code&gt;10.100.36.224&lt;/code&gt; with &lt;em&gt;your&lt;/em&gt; cluster IP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# wget -qO - https://10.100.36.224 --no-check-certificate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;--no-check-certificate&lt;/code&gt; option is required since the web server uses a self-signed certificate by default.&lt;/p&gt;

&lt;p&gt;If successful, you should see an HTML page being printed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;!--
    Hyperspace by HTML5 UP
    html5up.net | @ajlkn
    Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
--&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we've seen how to expose a service within the cluster, let's see how to do the same but to the outside world. But before that, let's cover Deployments - a higher-level object that manages a ReplicaSet of pods and takes care of rolling updates and rollbacks.&lt;/p&gt;

&lt;p&gt;Clean up our existing pod and service with the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl delete &lt;span class="nt"&gt;-f&lt;/span&gt; clusterip-service.yaml
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl delete &lt;span class="nt"&gt;-f&lt;/span&gt; pod.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;kubectl delete&lt;/code&gt; deletes the object(s) specified in the provided YAML file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-our-first-deployment"&gt;
  &lt;/a&gt;
  Creating our first Deployment
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/sample-deployment.html"&gt;Deploy a sample application&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A Deployment manages a ReplicaSet, which in turn manages a fixed number of replicas of Pods. While a ReplicaSet only ensures that the number of pods remains at the desired number of replicas, a Deployment offers rolling update and rollback functionality as well by replacing pods in the deployment incrementally, so there is no downtime.&lt;/p&gt;

&lt;p&gt;Save the following in a file &lt;code&gt;deployment.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
      &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung/donaldsebleung-com:0.2.0&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8443&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, in the &lt;code&gt;spec&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;replicas&lt;/code&gt; indicates how many pod replicas should be created; in this case 3&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;selector&lt;/code&gt; indicates how the Deployment keeps track of its pods. Here, we &lt;code&gt;matchLabels&lt;/code&gt; where the &lt;code&gt;app&lt;/code&gt; label on the pod is equal to &lt;code&gt;donaldsebleung-com&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;template&lt;/code&gt;: the template to use for each pod in the deployment. Notice this is identical to our &lt;code&gt;pod.yaml&lt;/code&gt; except leaving out &lt;code&gt;apiVersion&lt;/code&gt;, &lt;code&gt;kind&lt;/code&gt; and &lt;code&gt;metadata.name&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; deployment.yaml
deployment.apps/donaldsebleung-com created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check deployments in our namespace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get deployments &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
NAME                 READY   UP-TO-DATE   AVAILABLE   AGE
donaldsebleung-com   3/3     3            3           17m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see here that all 3 replicas of the &lt;code&gt;donaldsebleung-com&lt;/code&gt; deployment are up and running. If not, e.g. you see &lt;code&gt;2/3&lt;/code&gt;, wait a few seconds and try again, until all replicas are up.&lt;/p&gt;

&lt;p&gt;Let's expose our deployment to the outside world using a load balancer. But as per &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html"&gt;Network load balancing on Amazon EKS&lt;/a&gt;, we need to first deploy &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/aws-load-balancer-controller.html"&gt;AWS Load Balancer Controller&lt;/a&gt; to our EKS cluster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-aws-load-balancer-controller-to-our-eks-cluster"&gt;
  &lt;/a&gt;
  Deploying AWS Load Balancer Controller to our EKS cluster
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/aws-load-balancer-controller.html"&gt;AWS Load Balancer Controller&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: this section is highly specific to Amazon EKS and contains a lot of AWS-related details that are not applicable to other managed Kubernetes offerings or Kubernetes in general. Don't feel too bad if you find yourself blindly copy-pasting commands in this section without fully understanding what is going on (-:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First we need to create an IAM OIDC identity provider for our cluster (&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html"&gt;source&lt;/a&gt;) - replace &lt;code&gt;beautiful-unicorn-1640783508&lt;/code&gt; with the actual name of your cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;eksctl utils associate-iam-oidc-provider &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--cluster&lt;/span&gt; beautiful-unicorn-1640783508 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--approve&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now download "an IAM policy for the AWS Load Balancer Controller that allows it to make calls to AWS APIs on your behalf" (&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/aws-load-balancer-controller.html"&gt;source&lt;/a&gt;), and use it to create an IAM policy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-o&lt;/span&gt; iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.3.1/docs/install/iam_policy.json
&lt;span class="nv"&gt;$ &lt;/span&gt;aws iam create-policy &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--policy-name&lt;/span&gt; AWSLoadBalancerControllerIAMPolicy &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--policy-document&lt;/span&gt; file://iam_policy.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now get our account ID and make note of it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;aws sts get-caller-identity
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my case, my account ID is &lt;code&gt;477657529190&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now create an IAM role for use with a Kubernetes service account (view the linked reference article for details), replacing the cluster name and account ID as appropriate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;eksctl create iamserviceaccount &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--cluster&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;beautiful-unicorn-1640783508 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;kube-system &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;aws-load-balancer-controller &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--attach-policy-arn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;arn:aws:iam::477657529190:policy/AWSLoadBalancerControllerIAMPolicy &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--override-existing-serviceaccounts&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--approve&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we are ready to install the AWS Load Balancer Controller itself (-: Install &lt;code&gt;cert-manager&lt;/code&gt; to our cluster for managing certificate-related stuff:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--validate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-f&lt;/span&gt; https://github.com/jetstack/cert-manager/releases/download/v1.5.4/cert-manager.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may take a while to execute (no more than a few dozen seconds) as Kubernetes creates a large number of objects.&lt;/p&gt;

&lt;p&gt;Now download the controller specification:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-Lo&lt;/span&gt; v2_3_1_full.yaml https://github.com/kubernetes-sigs/aws-load-balancer-controller/releases/download/v2.3.1/v2_3_1_full.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the downloaded file &lt;code&gt;v2_3_1_full.yaml&lt;/code&gt; in your favorite text editor (mine is Vim) and make the following changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Delete the &lt;code&gt;ServiceAccount&lt;/code&gt; section of the file. It looks like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ServiceAccount&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app.kubernetes.io/component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;controller&lt;/span&gt;
    &lt;span class="na"&gt;app.kubernetes.io/name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws-load-balancer-controller&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws-load-balancer-controller&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kube-system&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Replace &lt;code&gt;your-cluster-name&lt;/code&gt; in the deployment spec with the actual name of your cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; v2_3_1_full.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, this make take a few seconds.&lt;/p&gt;

&lt;p&gt;To gain peace of mind, verify the controller is properly installed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get deployment/aws-load-balancer-controller &lt;span class="nt"&gt;-n&lt;/span&gt; kube-system
NAME                           READY   UP-TO-DATE   AVAILABLE   AGE
aws-load-balancer-controller   1/1     1            1           105s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Phew, that was complicated! Back to the interesting stuff ;-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#expose-our-deployment-to-the-outside-world-using-a-load-balancer"&gt;
  &lt;/a&gt;
  Expose our deployment to the outside world using a load balancer
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/sample-deployment.html"&gt;Deploy a sample application&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's make a copy of our &lt;code&gt;clusterip-service.yaml&lt;/code&gt;. We'll name the copy &lt;code&gt;loadbalancer-service.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp &lt;/span&gt;clusterip-service.yaml loadbalancer-service.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;code&gt;loadbalancer-service.yaml&lt;/code&gt; and change the line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterIP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;LoadBalancer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yup, that's it. Now apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; loadbalancer-service.yaml
service/donaldsebleung-com created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get the service details. Notice how the type is now &lt;code&gt;LoadBalancer&lt;/code&gt;, and we have an external IP (or DNS name, rather)!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get services &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
NAME                 TYPE           CLUSTER-IP      EXTERNAL-IP                                                              PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;         AGE
donaldsebleung-com   LoadBalancer   10.100.71.229   a9e75f2b7fc344b37becbe607134dfa5-772464237.us-east-1.elb.amazonaws.com   443:32501/TCP   47s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now visit &lt;a href="https://a9e75f2b7fc344b37becbe607134dfa5-772464237.us-east-1.elb.amazonaws.com"&gt;https://a9e75f2b7fc344b37becbe607134dfa5-772464237.us-east-1.elb.amazonaws.com&lt;/a&gt; , replacing the external DNS name as appropriate for your scenario. The browser may display a scary warning about a self-signed certificate. Ignore it, and proceed with viewing the website content:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2xRxcnGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j995h5k1m2dldul1u6wg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2xRxcnGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j995h5k1m2dldul1u6wg.png" alt="donaldsebleung/donaldsebleung-com:0.2.0 on Kubernetes" width="880" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to poke around the website and learn more about me (shameless promotion here :-P). When you're done, continue with the rest of this article.&lt;/p&gt;

&lt;p&gt;You did it! You exposed your deployment to the outside world using a load balancer and saw the results in your browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rolling-updates"&gt;
  &lt;/a&gt;
  Rolling updates
&lt;/h2&gt;

&lt;p&gt;A major advantage of deployments over standalone pods (or even ReplicaSets) is the ability to perform a &lt;em&gt;rolling update&lt;/em&gt; without application downtime. It does this by replacing the pods in the deployment one by one (or as configured in the YAML file) until all the old pods have been replaced by new ones. Let's see this in action.&lt;/p&gt;

&lt;p&gt;Copy our existing &lt;code&gt;deployment.yaml&lt;/code&gt; to &lt;code&gt;deployment-patched.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp &lt;/span&gt;deployment.yaml deployment-patched.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now update the container image used in each of the pods, from &lt;code&gt;donaldsebleung/donaldsebleung-com:0.2.0&lt;/code&gt; to &lt;code&gt;donaldsebleung/donaldsebleung-com:0.2.0-1&lt;/code&gt;, which simply replaces the slogan "IT consultant by day, software developer by night" on the homepage with "Cloud, virtualization and open-source enthusiast", because I've recently realized that the old slogan doesn't fit well with the rest of the content on my website. Your modified &lt;code&gt;deployment-patched.yaml&lt;/code&gt; file should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
      &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung/donaldsebleung-com:0.2.0-1&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8443&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Interested learners may refer to the Dockerfile for &lt;code&gt;0.2.0-1&lt;/code&gt;, which simply applies a patch to the downloaded source code before building the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ubuntu:focal&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; wget patch openjdk-11-jdk
&lt;span class="k"&gt;RUN &lt;/span&gt;wget https://github.com/DonaldKellett/donaldsebleung-com/archive/refs/tags/v0.2.0.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;tar &lt;/span&gt;xvf v0.2.0.tar.gz &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm &lt;/span&gt;v0.2.0.tar.gz
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mv &lt;/span&gt;donaldsebleung-com-0.2.0 /app
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; index.patch .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;patch &lt;span class="nt"&gt;-p0&lt;/span&gt; &amp;lt; index.patch
&lt;span class="k"&gt;RUN &lt;/span&gt;./mvnw package
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["/usr/bin/java", "-jar", "/app/target/personal-website-0.0.1-SNAPSHOT.jar"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the patch, if you're interested:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--- src/main/resources/templates/index.html 2021-12-24 21:54:03.000000000 +0800
+++ src/main/resources/templates/index_new.html 2021-12-30 21:39:42.666305634 +0800
@@ -29,7 +29,7 @@
                    &amp;lt;section id="intro" class="wrapper style1 fullscreen fade-up"&amp;gt;
                        &amp;lt;div class="inner"&amp;gt;
                            &amp;lt;h1&amp;gt;Donald S. Leung&amp;lt;/h1&amp;gt;
-                           &amp;lt;p&amp;gt;IT consultant by day, software developer by night&amp;lt;/p&amp;gt;
+                           &amp;lt;p&amp;gt;Cloud, virtualization and open source enthusiast&amp;lt;/p&amp;gt;
                            &amp;lt;ul class="actions"&amp;gt;
                                &amp;lt;li&amp;gt;&amp;lt;a href="/about" class="button scrolly"&amp;gt;About me&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                            &amp;lt;/ul&amp;gt;
@@ -55,4 +55,4 @@
            &amp;lt;script src="assets/js/main.js"&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;/body&amp;gt;
-&amp;lt;/html&amp;gt;
\ No newline at end of file
+&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; deployment-patched.yaml
deployment.apps/donaldsebleung-com configured
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And refresh your browser multiple times. Notice that the website should be up all the time - there should be no moment where it is not available. Furthermore, for a while, you should see the slogan on the homepage alternate between the old and new versions. Eventually, though, it should converge to the following, which indicates all pods in the deployment have been replaced to use the new container image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mg_WEwV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whk91j2wubiwh5xgei7z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mg_WEwV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whk91j2wubiwh5xgei7z.png" alt="donaldsebleung/donaldsebleung-com:0.2.0-1 on Kubernetes" width="880" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we conclude, let's look at one more feature: autoscaling deployments with HorizontalPodAutoscaler. But first, we need to &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/metrics-server.html"&gt;install the Kubernetes metric server&lt;/a&gt;, which provides aggregate resource usage data needed for autoscaling.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-the-kubernetes-metric-server"&gt;
  &lt;/a&gt;
  Installing the Kubernetes metric server
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/metrics-server.html"&gt;Installing the Kubernetes metrics server&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Just apply the appropriate YAML config, as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now confirm it is properly deployed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get deployment/metrics-server &lt;span class="nt"&gt;-n&lt;/span&gt; kube-system
NAME             READY   UP-TO-DATE   AVAILABLE   AGE
metrics-server   1/1     1            1           83s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're good to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#autoscaling-deployments-with-horizontalpodautoscaler"&gt;
  &lt;/a&gt;
  Autoscaling deployments with HorizontalPodAutoscaler
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/"&gt;HorizontalPodAutoscaler Walkthrough&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Currently, our deployment has a fixed number of 3 pods, which is good enough for testing and demonstration purposes. But what if the web traffic is low at a particular time interval? Would maintaining 3 pods in that case be a waste of resources? On the other hand, what if we experience a sudden surge in traffic? Is 3 pods enough to handle the surge gracefully without degradation in performance?&lt;/p&gt;

&lt;p&gt;Fortunately, through HorizontalPodAutoscaler (HPA), Kubernetes allows you to automatically scale the number of replicas in a Deployment depending on some metric(s) such as CPU utilization per pod. But first, we need to define some resource limits for our pods in the deployment. Save the following in a file &lt;code&gt;deployment-patched-with-limit.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
      &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung/donaldsebleung-com:0.2.0-1&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8443&lt;/span&gt;
        &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;500m&lt;/span&gt;
          &lt;span class="na"&gt;requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;200m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is identical to &lt;code&gt;deployment-patched.yaml&lt;/code&gt; except we added the following part:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;500m&lt;/span&gt;
  &lt;span class="na"&gt;requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;200m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;1m&lt;/code&gt; represents one-thousandth (or 0.001) of a CPU core, so &lt;code&gt;limits.cpu: 500m&lt;/code&gt; means each pod is not allowed to use more than 0.5 CPU cores. &lt;code&gt;requests.cpu: 200m&lt;/code&gt; means that each pod requests 0.2 CPU cores.&lt;/p&gt;

&lt;p&gt;Apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; deployment-patched-with-limit.yaml
deployment.apps/donaldsebleung-com configured
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since Kubernetes favors a declarative approach, notice we did not need to delete the deployment and re-deploy - we just had to apply the new YAML config and Kubernetes will configure the deployment to converge towards the new spec.&lt;/p&gt;

&lt;p&gt;Now save the following in &lt;code&gt;hpa.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;autoscaling/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HorizontalPodAutoscaler&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;maxReplicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
  &lt;span class="na"&gt;minReplicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;scaleTargetRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
    &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;donaldsebleung-com&lt;/span&gt;
  &lt;span class="na"&gt;targetCPUUtilizationPercentage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;maxReplicas&lt;/code&gt; is the maximum number of replicas we should have, regardless of the load. We set this to 10, so there can never be more than 10 replicas&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;minReplicas&lt;/code&gt;: same as &lt;code&gt;maxReplicas&lt;/code&gt; but sets the minimum. Here we make sure we always have at least 1 replica&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;scaleTargetRef&lt;/code&gt;: what object does our HPA target? Here, we target the deployment &lt;code&gt;donaldsebleung-com&lt;/code&gt; by name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;targetCPUUtilizationPercentage&lt;/code&gt;: what percentage of CPU utilization relative to the CPU limit we should aim for in each pod. Here, we specify 50%, i.e. we aim for &lt;code&gt;0.5 * 500m = 250m = 0.25&lt;/code&gt; CPU cores used per pod&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apply the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; hpa.yaml
horizontalpodautoscaler.autoscaling/donaldsebleung-com created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait a few seconds, then query our HPA:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get hpa &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
NAME                 REFERENCE                       TARGETS   MINPODS   MAXPODS   REPLICAS   AGE
donaldsebleung-com   Deployment/donaldsebleung-com   0%/50%    1         10        1          20m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we now have 1 replica instead of 3. This is because there is no traffic to be handled, so the pods aren't using any noticeable amount of CPU. In response, the HPA scaled our deployment down to 1 replica in order to conserve resources.&lt;/p&gt;

&lt;p&gt;Another thing: &lt;code&gt;hpa&lt;/code&gt; is short for &lt;code&gt;horizontalpodautoscaler&lt;/code&gt;. Our command might as well have been:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get horizontalpodautoscalers &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But &lt;code&gt;hpa&lt;/code&gt; is easier to type. In fact, this isn't the only abbreviation we can use:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Object&lt;/th&gt;
&lt;th&gt;Shorthand&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Pod&lt;/td&gt;
&lt;td&gt;&lt;code&gt;po&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ReplicaSet&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rs&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deployment&lt;/td&gt;
&lt;td&gt;&lt;code&gt;deploy&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;&lt;code&gt;svc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;I personally find the full names more descriptive and readable. But if you're lazy, or the full name is insanely long (e.g. &lt;code&gt;horizontalpodautoscaler&lt;/code&gt;), feel free to use the shorthands instead.&lt;/p&gt;

&lt;p&gt;Now try to generate some load by querying the site repeatedly. You might want to open this in a new terminal window (or tab), to keep it running while we make our observations in the original window (replace the external DNS name accordingly):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do &lt;/span&gt;wget &lt;span class="nt"&gt;-qO&lt;/span&gt; - https://a9e75f2b7fc344b37becbe607134dfa5-772464237.us-east-1.elb.amazonaws.com &lt;span class="nt"&gt;--no-check-certificate&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/null&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might even want to run it in multiple terminal windows; I opened a few dozen of them myself (-:&lt;/p&gt;

&lt;p&gt;Wait a short while (maybe a minute or two), and query our HPA again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get hpa &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
NAME                 REFERENCE                       TARGETS   MINPODS   MAXPODS   REPLICAS   AGE
donaldsebleung-com   Deployment/donaldsebleung-com   39%/50%   1         10        10         37m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look, now the CPU utilization has gone up and our HPA responded by scaling our deployment up to 10 replicas!&lt;/p&gt;

&lt;p&gt;Once you're done exploring, stop bombarding the endpoint with requests by closing the appropriate terminal windows / tabs. Wait a few minutes, and you should see the CPU utilization go down again and the number of replicas scaled back down to 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get hpa &lt;span class="nt"&gt;-n&lt;/span&gt; donaldsebleung-com
NAME                 REFERENCE                       TARGETS   MINPODS   MAXPODS   REPLICAS   AGE
donaldsebleung-com   Deployment/donaldsebleung-com   1%/50%    1         10        1          45m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cleanup"&gt;
  &lt;/a&gt;
  Cleanup
&lt;/h2&gt;

&lt;p&gt;Let's delete our namespace. Since we put every other object we've created in this namespace, this should delete those objects as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl delete &lt;span class="nt"&gt;-f&lt;/span&gt; namespace.yaml
namespace &lt;span class="s2"&gt;"donaldsebleung-com"&lt;/span&gt; deleted
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now delete our cluster (replace the name accordingly):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;eksctl delete cluster &lt;span class="nt"&gt;-n&lt;/span&gt; beautiful-unicorn-1640783508
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may take a few minutes. In the end, you should see something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2022-01-01 12:30:38 [‚úî]  all cluster resources were deleted
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this hands-on session, we learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What Kubernetes is&lt;/li&gt;
&lt;li&gt;How it relates to the microservice architecture used in many modern applications&lt;/li&gt;
&lt;li&gt;Key concepts and objects in Kubernetes&lt;/li&gt;
&lt;li&gt;How Kubernetes works; in particular, the declarative approach it favors&lt;/li&gt;
&lt;li&gt;How to actually apply these concepts to a real, multi-node Kubernetes cluster by leveraging a managed Kubernetes offering by AWS known as Amazon EKS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, this is just the tip of the iceberg - there are so many more features in Kubernetes that we have yet to explore. If this article piqued your interest in Kubernetes, consider learning more about it through the following resources (or otherwise):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/"&gt;Official Kubernetes website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/introduction-to-kubernetes"&gt;Introduction to Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/introduction-to-containers-kubernetes-and-openshift"&gt;Introduction to Containers, Kubernetes, and OpenShift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Until then, happy new year!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;DonaldKellett/k8s-intro-eks&lt;/code&gt;: &lt;a href="https://github.com/DonaldKellett/k8s-intro-eks"&gt;https://github.com/DonaldKellett/k8s-intro-eks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Kubernetes - Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Kubernetes"&gt;https://en.wikipedia.org/wiki/Kubernetes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Kubernetes: &lt;a href="https://kubernetes.io/"&gt;https://kubernetes.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Getting started with Amazon EKS: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html"&gt;https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Minikube: &lt;a href="https://minikube.sigs.k8s.io/docs/start/"&gt;https://minikube.sigs.k8s.io/docs/start/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;kind: &lt;a href="https://kind.sigs.k8s.io/"&gt;https://kind.sigs.k8s.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;kubeadm: &lt;a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/"&gt;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Getting started with Amazon EKS - eksctl: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html"&gt;https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Deploy a sample application: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/sample-deployment.html"&gt;https://docs.aws.amazon.com/eks/latest/userguide/sample-deployment.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Service | Kubernetes: &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;https://kubernetes.io/docs/concepts/services-networking/service/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Kubernetes NodePort vs LoadBalancer vs Ingress? When should I use what?: &lt;a href="https://medium.com/google-cloud/kubernetes-nodeport-vs-loadbalancer-vs-ingress-when-should-i-use-what-922f010849e0"&gt;https://medium.com/google-cloud/kubernetes-nodeport-vs-loadbalancer-vs-ingress-when-should-i-use-what-922f010849e0&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Network load balancing on Amazon EKS: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html"&gt;https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;AWS Load Balancer Controller: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/aws-load-balancer-controller.html"&gt;https://docs.aws.amazon.com/eks/latest/userguide/aws-load-balancer-controller.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Create an IAM OIDC provider for your cluster: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html"&gt;https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Installing the Kubernetes metrics server: &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/metrics-server.html"&gt;https://docs.aws.amazon.com/eks/latest/userguide/metrics-server.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;HorizontalPodAutoscaler Walkthrough: &lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/"&gt;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Introduction to Kubernetes: &lt;a href="https://www.edx.org/course/introduction-to-kubernetes"&gt;https://www.edx.org/course/introduction-to-kubernetes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Introduction to Containers, Kubernetes, and OpenShift: &lt;a href="https://www.edx.org/course/introduction-to-containers-kubernetes-and-openshift"&gt;https://www.edx.org/course/introduction-to-containers-kubernetes-and-openshift&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>kubernetes</category>
      <category>aws</category>
      <category>cloud</category>
      <category>containers</category>
    </item>
    <item>
      <title>Host static website for free in less than 10 minutes.</title>
      <author>vedant-jain03</author>
      <pubDate>Sat, 01 Jan 2022 03:26:08 +0000</pubDate>
      <link>https://dev.to/vedantjain03/host-static-website-for-free-in-less-than-10-minutes-27j1</link>
      <guid>https://dev.to/vedantjain03/host-static-website-for-free-in-less-than-10-minutes-27j1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-github"&gt;
  &lt;/a&gt;
  What is github?
&lt;/h1&gt;

&lt;p&gt;GitHub, Inc. is a provider of Internet hosting for software development and version control using Git. It offers the distributed version control and source code management functionality of Git, plus its own features.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-git"&gt;
  &lt;/a&gt;
  What is git?
&lt;/h1&gt;

&lt;p&gt;Git is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite.
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Github Account.&lt;/li&gt;
&lt;li&gt;Git installed and configured with your github account.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#my-folder-structure"&gt;
  &lt;/a&gt;
  My folder structure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dgeJsXYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckra96z0niegf5eyd71x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgeJsXYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckra96z0niegf5eyd71x.jpg" alt="Image description" width="197" height="275"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-repository-in-github"&gt;
  &lt;/a&gt;
  Create repository in github.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a new repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-pOTqOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cg7u5hdp0yc0bu4nu5u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-pOTqOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cg7u5hdp0yc0bu4nu5u.jpg" alt="Image description" width="317" height="107"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configure repository details.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Make repository name shorter that will result to short URL.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJG0-7SJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv6ctmncvas8mndsp8tm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJG0-7SJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv6ctmncvas8mndsp8tm.jpg" alt="Image description" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The repository has to be public unless you are a pro member in github. I have access to create private repository as I have pro member tag on my github profile.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Commit the files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start git bash and add these lines of code one by one.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m 'my first commit'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote add origin https://github.com/{username}/{repository name}.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Refresh the github repository page and you will see all files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure github pages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to settings.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ayYb-q1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t41k6vholf21amvdcnj1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayYb-q1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t41k6vholf21amvdcnj1.jpg" alt="Image description" width="880" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zUOrkKdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e6e7obt7qmp8m3w50r6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zUOrkKdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e6e7obt7qmp8m3w50r6.jpg" alt="Image description" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select branch and save it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4nO2igSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/huvw61sf25k9cnm6019t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4nO2igSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/huvw61sf25k9cnm6019t.jpg" alt="Image description" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ofoe3dq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cup3c4m2svputvuu3jo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ofoe3dq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cup3c4m2svputvuu3jo.jpg" alt="Image description" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;You will get redirected&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Your work is done&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Refresh the page and you will see the deployed link.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wF2he2NK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggo9nucajwh4o0nlxkge.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wF2he2NK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggo9nucajwh4o0nlxkge.jpg" alt="Image description" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>github</category>
      <category>git</category>
      <category>css</category>
    </item>
    <item>
      <title>Doctoring your application configuration</title>
      <author>/dev/dull/alastair</author>
      <pubDate>Sat, 01 Jan 2022 02:15:00 +0000</pubDate>
      <link>https://dev.to/dev_dull/doctoring-your-application-configuration-31f</link>
      <guid>https://dev.to/dev_dull/doctoring-your-application-configuration-31f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#opinion-code-for-configuration-handling-is-ugly"&gt;
  &lt;/a&gt;
  Opinion: Code for configuration handling is ugly
&lt;/h2&gt;

&lt;p&gt;If you've ever written a statement that looks something like &lt;code&gt;my_setting = config.value if config.value else some_default&lt;/code&gt; and hated it, then I expect we can agree that handling application configuration is a miserable thing to code for. Its boring to write, ugly to read, and annoying to ensure that all user configuration options have sane default values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clIyUXmn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u17p2cpia2j16hao3cnw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clIyUXmn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u17p2cpia2j16hao3cnw.gif" alt="Oscar the Grouch - I'll be miserable here in my trash can" width="640" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;argparse&lt;/code&gt; library can go a long way to making things better, but if you need to set dozens of options, or if your application supports plugins with configuration requirements unknown to the main program, it becomes harder to simply &lt;code&gt;add_argument&lt;/code&gt; our way back to sanity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pYKzaszq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw9kj8qn2yxout70uujl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pYKzaszq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw9kj8qn2yxout70uujl.gif" alt="Mad scientist (black and white) - We'll see if I'm crazy or not!" width="640" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In these cases, it makes more sense to opt for a configuration file. Also, it would be nice if our application code didn't care about the configuration file at all, where we had a single source of truth to count on being correct.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-classy"&gt;
  &lt;/a&gt;
  Getting Classy
&lt;/h2&gt;

&lt;p&gt;When I've hit the point in my development process where I have the basic functionality working and I've settled on the basics of how the program will flow, I like to create a new python file &lt;code&gt;constfig.py&lt;/code&gt; and define the class &lt;code&gt;_C&lt;/code&gt; where the 'C' stands for both "constants" and "config" (üé∂ and that's good enough for me. Both config and constants start with C üé∂). By convention, I lead the with an underscore to signal to the other developers on the project that the class isn't intended to be implemented directly, and at the end of the file I create an instance of &lt;code&gt;_C()&lt;/code&gt; called &lt;code&gt;C&lt;/code&gt; which can be imported and will contain all the information needed by the application.&lt;/p&gt;

&lt;p&gt;For example, let's implement a simple dice rolling API endpoint using Flask which returns a JSON formatted string. For this type of application we would want to be able to easily configure the IP address and port that the service listens on, so let's define our &lt;code&gt;_C&lt;/code&gt; class, establish the variable names, pre-populate the variables with some reasonable default values, and then create an instance of our class named &lt;code&gt;C&lt;/code&gt; which the user is meant to import from our file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'0.0.0.0'&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;

&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have certain values which will never change at runtime, but if our specification changes later, we don't want to have to hunt down all instances of that value in our code, so let's also add our constant values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Constant values
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON_RESPONSE_KEYWORD_D6ROLL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'d6_roll'&lt;/span&gt;

        &lt;span class="c1"&gt;# User configurable values
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'0.0.0.0'&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;

&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our constant values and our configurable variables with sane defaults, let's import &lt;code&gt;C&lt;/code&gt; (the instance of &lt;code&gt;_C&lt;/code&gt;) into our main Flask application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;constfig&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;  &lt;span class="c1"&gt;# Our constants + config = constfig
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/rolld6'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;roll_d6&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON_RESPONSE_KEYWORD_D6ROLL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now give it a quick run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;python3 roll.py 
 &lt;span class="k"&gt;*&lt;/span&gt; Serving Flask app &lt;span class="s2"&gt;"roll"&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;lazy loading&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;*&lt;/span&gt; Environment: production
   WARNING: This is a development server. Do not use it &lt;span class="k"&gt;in &lt;/span&gt;a production deployment.
   Use a production WSGI server instead.
 &lt;span class="k"&gt;*&lt;/span&gt; Debug mode: off
INFO:werkzeug: &lt;span class="k"&gt;*&lt;/span&gt; Running on http://0.0.0.0:8080/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and test to make sure all looks good so far.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; localhost:8080/rolld6 | python3 &lt;span class="nt"&gt;-m&lt;/span&gt; json.tool
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"d6_value"&lt;/span&gt;: 3
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#operate-on-your-raw-self-endraw-"&gt;
  &lt;/a&gt;
  üßë‚Äç‚öïÔ∏è Operate on your &lt;code&gt;self&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Now that we have our application and our &lt;code&gt;_C&lt;/code&gt; class, we're ready for it to poke at its own guts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rqKyG-jC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09jhssp7r21n4woz0izi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rqKyG-jC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09jhssp7r21n4woz0izi.gif" alt="Characters from the TV show Scrubs in an operating room. One of them is asking what is going on" width="466" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's add the function &lt;code&gt;load_config&lt;/code&gt; which will open up our configuration file &lt;code&gt;config.yaml&lt;/code&gt;, and then use the &lt;code&gt;setattr&lt;/code&gt; function to update our own values at startup (when Python runs &lt;code&gt;from constfig import C&lt;/code&gt;). Python's ability to alter its own state is knows as "reflection" or "reflective programming".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yaml&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Constant values - and a "gotcha!"
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON_RESPONSE_KEYWORD_D6ROLL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'d6_roll'&lt;/span&gt;

        &lt;span class="c1"&gt;# User configurable values
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'0.0.0.0'&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;

        &lt;span class="c1"&gt;# Load user config (override defaults above)
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;config_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'config.yaml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;config_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SafeLoader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Don't handle badly formatted YAML. Let the parser inform the user of the error.
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                    &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScannerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The file config.yaml should be structured as type dict, but got type &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Configuration file config.yaml is missing. Using default values.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now create our &lt;code&gt;config.yaml&lt;/code&gt; file containing key:value pairs where the key matches the name of our configuration items&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;LISTEN_IP&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;127.0.0.1&lt;/span&gt;
&lt;span class="na"&gt;LISTEN_PORT&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's fire up the service again...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;python3 roll.py 
 &lt;span class="k"&gt;*&lt;/span&gt; Serving Flask app &lt;span class="s2"&gt;"roll"&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;lazy loading&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;*&lt;/span&gt; Environment: production
   WARNING: This is a development server. Do not use it &lt;span class="k"&gt;in &lt;/span&gt;a production deployment.
   Use a production WSGI server instead.
 &lt;span class="k"&gt;*&lt;/span&gt; Debug mode: off
 &lt;span class="k"&gt;*&lt;/span&gt; Running on http://127.0.0.1:32000/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and this time we see that the default values have been overridden by those in the configuration file. Specifically, we're now listening on the loopback IP, and that our port number has changed as expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gotta-catch-that-gotcha"&gt;
  &lt;/a&gt;
  Gotta' catch that "gotcha!"
&lt;/h2&gt;

&lt;p&gt;The problem with this method is that we open ourselves up to having the configuration file change values that should not be changed. For example, if we set &lt;code&gt;JSON_RESPONSE_KEYWORD_D6ROLL: this is bad&lt;/code&gt; in &lt;code&gt;config.yaml&lt;/code&gt; then make a request to our endpoint, we see that we've indirectly altered our application's response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; http://127.0.0.1:32000/rolld6 | python3 &lt;span class="nt"&gt;-m&lt;/span&gt; json.tool
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"this is bad"&lt;/span&gt;: 4
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QeRbZlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbn0etfi9pgpegsvi0aj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QeRbZlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbn0etfi9pgpegsvi0aj.gif" alt="American Psycho - I know my behavior can be erratic sometimes" width="500" height="243"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While the fix here isn't hard, this bad behavior underscores the importance of the order in which we set out values. Let's move our constant values to where they are being set &lt;em&gt;after&lt;/em&gt; the values in our configuration file by adding a &lt;code&gt;finally&lt;/code&gt; clause to our try/except block on &lt;code&gt;load_config()&lt;/code&gt; and call our new method &lt;code&gt;set_constants()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yaml&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# User configurable values
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'0.0.0.0'&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;

        &lt;span class="c1"&gt;# Load user config (override defaults above)
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_constants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Constant values
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON_RESPONSE_KEYWORD_D6ROLL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'d6_value'&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;config_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'config.yaml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;config_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SafeLoader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Don't handle badly formatted YAML. Let the parser inform the user of the error.
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                    &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScannerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The file config.yaml should be structured as type dict, but got type &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Configuration file config.yaml is missing. Using default values.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_constants&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...then launch again using our "bad" (which tries to set &lt;code&gt;JSON_RESPONSE_KEYWORD_D6ROLL&lt;/code&gt;) configuration file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;python3 roll.py 
 &lt;span class="k"&gt;*&lt;/span&gt; Serving Flask app &lt;span class="s2"&gt;"roll"&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;lazy loading&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;*&lt;/span&gt; Environment: production
   WARNING: This is a development server. Do not use it &lt;span class="k"&gt;in &lt;/span&gt;a production deployment.
   Use a production WSGI server instead.
 &lt;span class="k"&gt;*&lt;/span&gt; Debug mode: off
 &lt;span class="k"&gt;*&lt;/span&gt; Running on http://127.0.0.1:32000/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and of course test the result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; http://127.0.0.1:32000/rolld6 | python3 &lt;span class="nt"&gt;-m&lt;/span&gt; json.tool
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"d6_value"&lt;/span&gt;: 5
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tada! A single source of truth for your Python application!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U7vpcng7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1ray01bjhblp10j7grl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U7vpcng7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1ray01bjhblp10j7grl.gif" alt="The Yellow Ranger from the 90s TV show Power Rangers does a dance move and then a yellow explosion happens in the background (...and frankly, it looks like she farted). I have probably accidentally spent an hour of my life watching this gif while editing this post" width="400" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-hate-this-but-i-need-validation"&gt;
  &lt;/a&gt;
  You hate this, but I need validation
&lt;/h2&gt;

&lt;p&gt;Yes, I hear you bemoan, "I've got a children's song about cookies stuck in my head, I'm half way through a pack of Oreos, and this seems like an abstraction that makes it harder to see how the configuration is loaded."&lt;/p&gt;

&lt;p&gt;Yeah, this solution is probably not for everyone, but I've hidden the superpower of this method behind a mild mannered alter-ego.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1WoLXBJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ife9ar06iqdh8oryrb4p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1WoLXBJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ife9ar06iqdh8oryrb4p.gif" alt="Actor Christopher Reeve playing Clark Kent takes off his glasses, only to realize that he might be giving himself away as Superman" width="640" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The real power is automatic validation of your configuration simply by importing &lt;code&gt;C&lt;/code&gt;. To do this, let's define the function &lt;code&gt;validate_config()&lt;/code&gt;, write some basic assertions to validate the configuration, and then call the function after we have successfully loaded the yaml file and set the constant values in our class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yaml&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Default values for user configurable items
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'0.0.0.0'&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;

        &lt;span class="c1"&gt;# Load user config (override defaults above)
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_constants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Constant values
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON_RESPONSE_KEYWORD_D6ROLL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'d6_value'&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;config_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'config.yaml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;config_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SafeLoader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Don't handle badly formatted YAML. Let the parser inform the user of the error.
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                    &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScannerError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The file config.yaml should be structured as type dict, but got type &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Configuration file config.yaml is missing. Using default values.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_constants&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# Validate our config file
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validate_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Validate LISTEN_IP
&lt;/span&gt;        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;'LISTEN_IP is not a string value'&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'LISTEN_IP has an unexpected number of octets'&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnumeric&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt; &lt;span class="s"&gt;'LISTEN_IP is not a valid IP address.'&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_IP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt; &lt;span class="s"&gt;'LISTEN_IP is not a valid IP address.'&lt;/span&gt;

        &lt;span class="c1"&gt;# Validate LISTEN_PORT
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnumeric&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;'LISTEN_PORT must be a whole number.'&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTEN_PORT&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;65536&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'LISTEN_PORT is outside expected range.'&lt;/span&gt;


&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and just as an example, let's put a deliberate typo in our configuration file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;LISTEN_IP&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;127.0.0.1x&lt;/span&gt;  &lt;span class="c1"&gt;# My fingers are fat :-(&lt;/span&gt;
&lt;span class="na"&gt;LISTEN_PORT&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, have a couple of opportunities to validate our configuration.&lt;/p&gt;

&lt;p&gt;For example, at runtime...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;python3 roll.py 
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;"roll.py"&lt;/span&gt;, line 1, &lt;span class="k"&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
    from constfig import C  &lt;span class="c"&gt;# Our constants + config = constfig&lt;/span&gt;
  File &lt;span class="s2"&gt;"/Users/adrong/PycharmProjects/constfig/constfig.py"&lt;/span&gt;, line 33, &lt;span class="k"&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
    validate_config&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;"/Users/adrong/PycharmProjects/constfig/constfig.py"&lt;/span&gt;, line 14, &lt;span class="k"&gt;in &lt;/span&gt;validate_config
    assert all&lt;span class="o"&gt;([&lt;/span&gt;a.isnumeric&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;a &lt;span class="k"&gt;in &lt;/span&gt;C.LISTEN_IP.split&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="o"&gt;)])&lt;/span&gt;, &lt;span class="s1"&gt;'LISTEN_IP is not a valid IP address.'&lt;/span&gt;
AssertionError: LISTEN_IP is not a valid IP address.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... or run &lt;code&gt;constfig.py&lt;/code&gt; directly to validate your configuration in your test or deployment pipelines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;user@host:~ &lt;span class="nv"&gt;$ &lt;/span&gt;python3 constfig.py 
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;"constfig.py"&lt;/span&gt;, line 33, &lt;span class="k"&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
    validate_config&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;"constfig.py"&lt;/span&gt;, line 14, &lt;span class="k"&gt;in &lt;/span&gt;validate_config
    assert all&lt;span class="o"&gt;([&lt;/span&gt;a.isnumeric&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;a &lt;span class="k"&gt;in &lt;/span&gt;C.LISTEN_IP.split&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="o"&gt;)])&lt;/span&gt;, &lt;span class="s1"&gt;'LISTEN_IP is not a valid IP address.'&lt;/span&gt;
AssertionError: LISTEN_IP is not a valid IP address.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#small-but-mighty"&gt;
  &lt;/a&gt;
  Small, but mighty
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGR0eE3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q02hnor9agpbcqvdb3il.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGR0eE3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q02hnor9agpbcqvdb3il.gif" alt="The cartoon character Mighty Mouse eating a hole into a wheel of cheese, crawling into it, then eating it so fast it becomes a whirlwind that transforms into the hero mouse" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a relatively small amount of code that, with some tweaks, can source configuration from a database, from environment variables, from command line arguments, and can have validation code that can reconcile configuration from any combination of those sources. This pattern for handling configuration has enabled me to quickly create configuration handling in a standardized way, across multiple tools , that members of other teams have found approachable and easy to manage.&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>React Js roadmap - 2022</title>
      <author>Samuel Lucas</author>
      <pubDate>Sat, 01 Jan 2022 01:55:34 +0000</pubDate>
      <link>https://dev.to/sam_lukaa/react-js-roadmap-2022-4p96</link>
      <guid>https://dev.to/sam_lukaa/react-js-roadmap-2022-4p96</guid>
      <description>&lt;p&gt;It's so exhausting trying to figure out where to start or head to while learning something, something like React Js, so much tutorials(videos and PDFs) out there but where exactly is the starting point and what are the things needed to learn so that I can be very good at React Js?&lt;/p&gt;

&lt;p&gt;Hello üëã, I'm Lucas and I'll be walking you through the React Js roadmap for 2022 - here you'll know so what you should learn to become a real react developer, and what you need to apply for the next job.&lt;/p&gt;

&lt;p&gt;The best way to become a pro in this profession is by constantly keeping yourself up-to-date by reading docs of whatever technology you wish to learn. Take for example, if I were to post a tutorial on React, in the next few months it will be outdated because a newer version would be out and surely better, but then the docs would be updated. That's why you should learn to read docs first.&lt;/p&gt;

&lt;p&gt;To develop yourself in React Js, you need certain level of knowledge in JavaScript itself. Let's see what you should know:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Data Types(objects &amp;amp; arrays)&lt;/li&gt;
&lt;li&gt;Dom manipulation&lt;/li&gt;
&lt;li&gt;Asynchronous&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Knowing these I can assure you success on your journey to learning React Js.&lt;/p&gt;

&lt;p&gt;One of the best places to learn all these from is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you're expected to know as a React Js developer are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;Props&lt;/li&gt;
&lt;li&gt;States&lt;/li&gt;
&lt;li&gt;Inspecting/developer's tools&lt;/li&gt;
&lt;li&gt;Hooks(useState, useEffect, useContext...)&lt;/li&gt;
&lt;li&gt;Redux&lt;/li&gt;
&lt;li&gt;Styling UI (chakra UI, tailwind...)&lt;/li&gt;
&lt;li&gt;Testing(jest...)&lt;/li&gt;
&lt;li&gt;API consumption (a good &lt;a href="https://www.robinwieruch.de/react-hooks-fetch-data/"&gt;recommendation&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A very good place to learn is from the &lt;a href="https://reactjs.org/tutorial/tutorial.html"&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ensure you add every of your project to github.&lt;/p&gt;

&lt;p&gt;Some cool projects you can work on are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Weather app (teaches you to fetch api)&lt;/li&gt;
&lt;li&gt;To-do app(teaches you how to pass props and other things)&lt;/li&gt;
&lt;li&gt;E-commerce(teaches you to fetch api and use stores - such as redux. Instead of writing the backend, simply use &lt;a href="https://commercejs.com/"&gt;Commerce Js&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While doing all these, don't be afraid of applying for jobs. Do not be afraid. Follow good resum·∫πÃÅ template. No matter how many times you get turned down, &lt;strong&gt;DO NOT GIVE UP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Don't be afraid to take on projects(not free, but paid). Why should I take paid projects/contract offers? The moment you collect part payment upon accepting the project, you'll know you've got to just finish it. But if it's unpaid, you might never complete or do it as supposed.&lt;/p&gt;

&lt;p&gt;Talking about projects, how do you start building one? Consider this: I'm a react js developer but projects always seem complex to me, how do I go about with that? &lt;/p&gt;

&lt;p&gt;The most important thing is this; no matter how small or huge the project is, always break it down into components. Example, let's create our very own Facebook.&lt;/p&gt;

&lt;p&gt;What are the features you'll ask? &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;View posts&lt;/li&gt;
&lt;li&gt;Create post&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's assume this is all what it does.&lt;/p&gt;

&lt;p&gt;Knowing this info already, all you need to do is very simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a component that fetches (GET) from the API and display the results.&lt;/li&gt;
&lt;li&gt;Create a component that sends (POST) via API - within that component, you'll have input button for the post and send button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Building with react is very easy if you learn to break things down into components&lt;/p&gt;

&lt;p&gt;Quickly, take this test. Break Twitter home page into components and comment your answer.&lt;/p&gt;

&lt;p&gt;If this post really does help, kindly leave a like and share. Thanks.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Git shortcuts (alias)</title>
      <author>CSJcode</author>
      <pubDate>Sat, 01 Jan 2022 01:30:54 +0000</pubDate>
      <link>https://dev.to/csjcode/git-shortcuts-alias-4bnc</link>
      <guid>https://dev.to/csjcode/git-shortcuts-alias-4bnc</guid>
      <description>&lt;p&gt;Shortcuts and aliases I was compiling as I was setting up a new laptop, and thought I'd share them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-get-situated-with-where-we-are-starting"&gt;
  &lt;/a&gt;
  Lets get situated with where we are starting
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$ cat ~/.gitconfig&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[user]
        name = Foo Bar
        email = example@example.com
[init]
        defaultBranch = main
[alias]
        co = checkout
        br = branch
        ci = commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#git-shortcuts-1-git-alias-or-2-gitshell-alias"&gt;
  &lt;/a&gt;
  Git Shortcuts: (1) Git alias or (2) Git+Shell alias
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Make git shortcuts in a git alias - pattern (note: --global is normally used for a dev's user account, but you could use --system for all accounts, --local for the local repo only)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.&amp;lt;alias&amp;gt; &amp;lt;commands&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make git shortcuts in shell (bash/zsh etc.) alias - pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ alias &amp;lt;alias&amp;gt;='&amp;lt;commands&amp;gt;'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example: use shortcut "gl" to list git user aliases, including adding, listing and removing the alias.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git config --global alias.gl 'config --global -l'

$ git gl

[...]
init.defaultbranch=main
alias.co=checkout
alias.br=branch
alias.ci=commit
[...]

$ alias gconf='git gl'

$ gconf

[...]
init.defaultbranch=main
alias.co=checkout
alias.br=branch
alias.ci=commit
[...]

$ alias -p

alias gconf='git gl'

$ unalias gconf

$ gconf
bash: gconf: command not found

$ alias -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use could also use this to see settings:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --list&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;file:/Users/foobar/.gitconfig  alias.com=checkout main
file:/Users/foobar/.gitconfig  alias.p=push
file:.git/config        core.repositoryformatversion=0
file:.git/config        core.filemode=true
file:.git/config        core.bare=false
file:.git/config        core.logallrefupdates=tru
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;$ git config user.email&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;example@example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;$ git config user.name&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Foo bar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;$ git config --global  user.email "myname@gmail.com"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global user.name "firstname lastname"&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.co checkout&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.com "checkout main"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.br branch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.a add&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.cm 'commit -m'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.p push&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.mr merge&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.rb rebase&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.rbc rebase  --continue&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.st status&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  git st

On branch main
Your branch is up to date with 'origin/main'.

Untracked files:
  (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)
        git-aliases.md

nothing added to commit but untracked files present (use "git add" to track)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#git-reset"&gt;
  &lt;/a&gt;
  Git Reset
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; do not use this config unless you are sure you know what you are doing, it could result in losing code permanently if you misuse this or make a mistake. &lt;/p&gt;

&lt;p&gt;Use a test repo first, until you are sure about what is going on.&lt;/p&gt;

&lt;p&gt;see: What's the difference between git reset --mixed, --soft, and --hard? &lt;a href="https://stackoverflow.com/questions/3528245/whats-the-difference-between-git-reset-mixed-soft-and-hard"&gt;https://stackoverflow.com/questions/3528245/whats-the-difference-between-git-reset-mixed-soft-and-hard&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As stated in the link above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--soft: uncommit changes, changes are left staged (index).
--mixed (default): uncommit + unstage changes, changes are left in working tree.
--hard: uncommit + unstage + delete changes, nothing left.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Undo last local commmit, to HEAD (uncommit, keeps in stage)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.rs reset --soft HEAD~1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Undo last local commmit, to HEAD (uncommit unstage)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.rmx reset --mixed HEAD~1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Undo local edits to HEAD (DANGER, permanent, caution)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.rh reset --hard HEAD~1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;List of all commits - summary&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.l1 'log --oneline'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;61eee34 (HEAD -&amp;gt; main, origin/main, origin/2-first-app-counter, 2-first-app-counter) Counter app
e9a23b9 (2-first-app) Hello world
bcc8bf2 Start fresh
abf9f0a (origin/1-hello-world, 1-hello-world) Basic hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last commit&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.last 'log -1 HEAD --stat'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git last&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Author: Foo bar &amp;lt;example@example.com&amp;gt;
Date:   Fri Dec 31 14:54:47 2021 -0800

    Counter app example

 counter.sol | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remote comfigured repos&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.rv 'remote -v'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git rv&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;origin  https://github.com/foobar/Hello-World.git (fetch)
origin  https://github.com/foobar/Hello-World.git (push)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Search for specific strings (put string after -F)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.se '!git rev-list --all | xargs git grep -F'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Cherry-pick &lt;/p&gt;

&lt;p&gt;more info: &lt;a href="https://www.atlassian.com/git/tutorials/cherry-pick"&gt;https://www.atlassian.com/git/tutorials/cherry-pick&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git config --global alias.ch cherry-pick&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Change the commit message:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global commit.template ~/.gitmessage.txt&lt;/code&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
    </item>
    <item>
      <title>Software Design</title>
      <author>jptkao</author>
      <pubDate>Sat, 01 Jan 2022 00:39:55 +0000</pubDate>
      <link>https://dev.to/jptkao/software-design-2i83</link>
      <guid>https://dev.to/jptkao/software-design-2i83</guid>
      <description>&lt;p&gt;What‚Äôs a certain constant about technology ? &lt;/p&gt;

&lt;p&gt;It is CHANGES! A lot of them. Those changes keep changing our lives, sometimes slowly sometimes fast, blazing fast. (Respond to change)&lt;/p&gt;

&lt;p&gt;Imagine the lovers of bread and butter before the glorious arrival of the toaster, with their little pans heat up one side them the other, all that time spent. Suddenly one day technology comes and gives them the perfect equal heated sides on a toast. What a beauty, life has finally meaning!&lt;/p&gt;

&lt;p&gt;Our designs are always being influenced by new frameworks, new libraries, new requisites. We‚Äôre always learning all those new things that seem to never end. If there existed some constant on our designs other than new things to learn life would be easier.&lt;/p&gt;

&lt;p&gt;I‚Äôm starting a series of single page articles to create a common ground for people interested in software design study what can always be used while coding. &lt;/p&gt;

&lt;p&gt;We start discussing a set of ideas used to avoid code that slows us down. The goal is to respond to change instead of adding unnecessary complexity on our designs. Those concepts are everywhere so why bother to read it here ?&lt;/p&gt;

&lt;p&gt;My main objective is that we can always remember those ideas in a structured and hierarchically organized matter. And as soon as knew ideas appear the articles are going to be improved. For this I‚Äôm counting on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visual representation of the ideias.&lt;/li&gt;
&lt;li&gt;Repo with every version of the articles.&lt;/li&gt;
&lt;li&gt;Code exemples for each main idea.&lt;/li&gt;
&lt;li&gt;Engagement of the readers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As developers we want to move deliberately instead of rushing aimlessly, following good disciplines that have proven efficient short and long term. Make each side of the toast perfectly crunchy.&lt;/p&gt;

&lt;p&gt;The first series is about Object Oriented Programming and the SOLID principles. &lt;/p&gt;

&lt;p&gt;Finally a visual representation to organize our studies.&lt;br&gt;
In the next post, we're going to discuss &lt;a href=""&gt;the "Pillars" of OOP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pb5r40_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwjeux59f553p0git5yl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pb5r40_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwjeux59f553p0git5yl.png" alt="OOP and SOLID Principles" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Post on the &lt;a href="https://github.com/jptkao/Blog_posts/blob/main/Software_Design/OO/Openning_Software_Design.md"&gt;repo&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>agile</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Lessons Learned from Advent of Code (in JavaScript and Haskell)</title>
      <author>Caleb Weeks</author>
      <pubDate>Fri, 31 Dec 2021 23:10:32 +0000</pubDate>
      <link>https://dev.to/sethcalebweeks/lessons-learned-from-aoc-2021-2b3b</link>
      <guid>https://dev.to/sethcalebweeks/lessons-learned-from-aoc-2021-2b3b</guid>
      <description>&lt;p&gt;This year, I tried doing &lt;a href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt; for the first time. My goal was to write code solutions in Haskell and JavaScript with more or less equivalent implementations. I have been learning functional programming academically for five or six years, so Advent of Code gave me an opportunity to practice what I have been learning. Unfortunately, things didn't go exactly as planned, so here are some of the lessons I learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#lesson-1"&gt;Don't rush learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lesson-2"&gt;Just start somewhere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lesson-3"&gt;Functional programming has different flavors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lesson-4"&gt;Functional programming in JavaScript is meh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lesson-5"&gt;Use the strengths of the language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dont-rush-learning"&gt;
  &lt;/a&gt;
  Don't rush learning &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The first two days of Advent of Code went according to plan. I came up with relatively concise solutions in Haskell that translated to idiomatic JavaScript, then wrote blog posts summarizing my approach. Day three took me significantly longer to solve, and I was spending too much time coding and writing at the neglect of my family. I took a break for a couple weeks before finally solving day four.&lt;/p&gt;

&lt;p&gt;Although I have spent a lot of time learning functional programming from an academic perspective, putting it into practice with real problems required more deliberation. I am certainly not going to give up, but I recognize that forcing myself to solve a problem each day with a difficulty growth rate that was larger than my learning growth rate was unhealthy. My plan is to continue practicing Haskell using &lt;a href="https://exercism.org/"&gt;Exercism&lt;/a&gt;, which makes learning pretty much any language an exciting journey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#just-start-somewhere"&gt;
  &lt;/a&gt;
  Just start somewhere &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Part of the reason that I hadn't started programming in Haskell earlier was that I was unsure about what it would take to get started. I was amazed at how easy it was to install the necessary tooling. The &lt;a href="https://marketplace.visualstudio.com/items?itemName=haskell.haskell"&gt;VSCode Extension&lt;/a&gt; that I installed enables inline code evaluation using a certain comment syntax that made it really easy to test small parts of my code. Truthfully, I avoided any IO or other side effect producing code in Haskell and just focused on the data processing and algorithmic sections of the problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functional-programming-has-different-flavors"&gt;
  &lt;/a&gt;
  Functional programming has different flavors &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;My definition of functional programming has been shaped by my studies on category theory, particularly through the writings and videos of &lt;a href="https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/"&gt;Bartosz Milewski&lt;/a&gt; and others. I enjoyed learning about monoids, functors, monads, algebraic data types, typeclasses, currying, and more. Haskell has been the quintessential functional programming language in my view, and if a language claimed to support functional programming, there were certain features that it needed to have.&lt;/p&gt;

&lt;p&gt;JavaScript in particular supports many of the features I considered to be essential to functional programming. ES6 arrow functions make writing curried and higher order functions a breeze. But for many programmers, the lack of algebraic data types, persistent data structures, or pattern matching disqualify JavaScript as a real functional programming language.&lt;/p&gt;

&lt;p&gt;I recently started learning Elixir, and it has many amazing features I would want in a language. All data structures are immutable, there are no statements only expressions, and there is both literal and structural pattern matching. Unfortunately, currying is very difficult to write idiomatically, and the dearly loved pipe operator passes data as the first parameter to a function instead of the last (both resulting from the dynamic type system combined with the support of pattern matching).&lt;/p&gt;

&lt;p&gt;I think the essence of functional programming can be summarized as the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Discouraged use of mutability&lt;/li&gt;
&lt;li&gt;Encouraged use of higher order functions&lt;/li&gt;
&lt;li&gt;Support for composition of effects and data
More on this topic in the near future.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#functional-programming-in-javascript-is-meh"&gt;
  &lt;/a&gt;
  Functional programming in JavaScript is meh &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I have been a huge proponent of functional programming in JavaScript. As seen throughout this series, the Haskell solutions can almost always be translated into decent looking JavaScript code. But as some have pointed out, the lack of certain features such as persistent data structures or tail call optimization makes it impossible to implement many real world applications. Using something like &lt;a href="https://immutable-js.com/"&gt;ImmutableJS&lt;/a&gt; would probably help, but replacing every single data structure with something from a library is objectionable.&lt;/p&gt;

&lt;p&gt;If you are stuck writing JavaScript, I would still encourage the functional programming approach, but you'll have to watch out for certain strategies that just won't work because the language does not support them. (By the way, TypeScript does not solve any of these issues and makes some of them worse.) Elitist functional programmers would disallow the use of chainable/fluent code, but I personally think that is the best approach to writing clean code in JavaScript. I certainly wouldn't go out of my way to implement method chains for every object in my code, but any library that adheres to the &lt;a href="https://github.com/fantasyland/fantasy-land"&gt;Fantasy Land spec&lt;/a&gt; (including &lt;a href="https://ramdajs.com/"&gt;Ramda&lt;/a&gt;) already provides some great chainable methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-the-strengths-of-the-language"&gt;
  &lt;/a&gt;
  Use the strengths of the language &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As already mentioned in the previous section, a certain flavor of functional programming can be quite elegant in JavaScript. The simplicity of the object model makes it very convenient to organize and operate on data. Dynamic typing and type coercion allows you to take certain shortcuts (unless you are trying to sort a list of numbers...). Use the strengths of whatever language you are using to your advantage. It is good to push the boundaries of the language to create new things. For example, &lt;a href="https://styled-components.com/"&gt;styled components&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/graphql-request"&gt;GraphQL&lt;/a&gt; have normalized the use of tagged template literals for domain specific languages (DSLs). But in general, you'll have a much better time working with the grain of the language than against it.&lt;/p&gt;

</description>
      <category>functional</category>
      <category>programming</category>
      <category>javascript</category>
      <category>haskell</category>
    </item>
    <item>
      <title>React Local State and Redux State (Without Hooks)</title>
      <author>Katie Hodgkinson</author>
      <pubDate>Fri, 31 Dec 2021 23:10:27 +0000</pubDate>
      <link>https://dev.to/chdev/react-local-state-and-redux-state-without-hooks-25f2</link>
      <guid>https://dev.to/chdev/react-local-state-and-redux-state-without-hooks-25f2</guid>
      <description>&lt;p&gt;I was recently tasked with adding a feature to an existing original application. The application, however, largely uses a Redux store for state management. So, given the nature of the feature that was added, here's how I used local state in a Redux-managed application:&lt;/p&gt;

&lt;p&gt;The project is a basic savings calculator that logs transactions (both deposits and withdraws) and tallies the total amount saved at all times. Each transaction is associated with a goal, or reason for allocating the funds. The app also contains a search page, among other attributes. &lt;/p&gt;

&lt;p&gt;Through use of React Router, I have all of the transactions logged displayed under the "Transaction History" page, a.k.a. the route "/transactions" in the url. The task given to me was to add a button to this page that would sort the transactions by amount when clicked, and when clicked again, re-displays the transaction list as it originally appeared. &lt;/p&gt;

&lt;p&gt;Like I mentioned, the app's state is being managed by a Redux store, with the exception of a controlled form for adding a transaction, which uses local state. I knew that adding this button should also be something that has its own local state because the list being displayed is directly dependent on whether or not the button has been clicked to sort. In other words, the local state being used only in the button is what determines the list being rendered in the browser. So, I added this short declaration of local state inside of a component that is also tied to state being managed by the Redux store:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;state = {
      sorted: false
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, we have a baseline for the state to use in the context of this sort button.&lt;/p&gt;

&lt;p&gt;Now of course it's important we actually have a button to work with, so I set the button up as follows (again, within the context of a larger component):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button onClick={() =&amp;gt; this.setState({sorted: !this.state.sorted})}&amp;gt;Click to Sort&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, I'm allowing the button to be toggled, by clicking, to change the value of "sorted" from state from "true" to "false" and display the data accordingly. &lt;/p&gt;

&lt;p&gt;Further, I then implemented a ternary statement testing the condition of state in order to know what should be rendered. The ternary basically states that if the value of "sorted" from state is equal to "false," the data should display as it normally does. However, on the inverse, when the button is clicked, the local state is set opposite and the data is displayed, sorted by amount from least to greatest. Here is what the ternary looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{this.state.sorted ? sortedTransactions.map(t =&amp;gt; &amp;lt;TransactionCard key={t.id} {...t} /&amp;gt; )  : this.props.transactions.map(t =&amp;gt; &amp;lt;TransactionCard key={t.id} {...t} /&amp;gt; )}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am using the return value of sortedTransactions if the value of "sorted" is true, whereas otherwise I am pulling the transactions from the Redux store by way of both the connect() function and mapStateToProps and displaying them as they do by default. Here is what the sortedTransactions variable looks like, for reference:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const sortedTransactions = [...this.props.transactions].sort((a, b) =&amp;gt; (a.amount - b.amount))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With these steps I was able to successfully implement the sort button and complete the task, which strengthened my confidence in mixing local state with Redux state in a React application. It also never hurts to brush up on using the sort() function, in fact I had to read up on the documentation for the function while completing this feature to figure out how to sort the data in the way I was being asked, which was from lowest amount to greatest. &lt;/p&gt;

&lt;p&gt;It was also with this project in general that I realized how local and Redux state can be mixed in an application. What I've deduced, is that deciding whether or not to use Redux versus local state can sometimes come down to just preference or importance/weight of the feature, among plenty of other things. &lt;/p&gt;

&lt;p&gt;Here are the links to both the front end repository as well as the Rails back end repository:&lt;br&gt;
&lt;a href="https://github.com/katiekatiekatiee/banking-frontend"&gt;Front&lt;/a&gt; | &lt;a href="https://github.com/katiekatiekatiee/banking-backend"&gt;Back&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to make a Nuxt.Js application SEO friendly</title>
      <author>David Emaye</author>
      <pubDate>Fri, 31 Dec 2021 22:34:51 +0000</pubDate>
      <link>https://dev.to/davidemaye/how-to-make-a-nuxtjs-application-seo-friendly-132a</link>
      <guid>https://dev.to/davidemaye/how-to-make-a-nuxtjs-application-seo-friendly-132a</guid>
      <description>&lt;p&gt;If you want to use Nuxt.js for your web application's quick and responsive UI, you need also know how to use Nuxt.js to create an SEO-friendly application. In this article, we'll look at how we can improve the SEO performance of our Nuxtjs website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-seo"&gt;
  &lt;/a&gt;
  What is SEO
&lt;/h2&gt;

&lt;p&gt;SEO (Search Engine Optimization) is the process of taking efforts to improve the ranking of a website or piece of content on Google.&lt;br&gt;
The main distinction between SEO and sponsored content is that SEO involves "organic" ranking, which means you don't have to pay to be in that spot. To put it another way, search engine optimization is the process of improving a piece of online material so that it appears near the top of a search engine's page when someone searches for something.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#nuxtjs-and-seo"&gt;
  &lt;/a&gt;
  Nuxt.js and SEO
&lt;/h2&gt;

&lt;p&gt;Nuxt, one of the most popular Vue frameworks for new web apps, can greatly improve your app performance and SEO. One of the most important Nuxt configurations is the mode, as it determines how your app is built, deployed, and served. There are three main types of web apps out there today:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Classic Single-Page App (SPA)&lt;/li&gt;
&lt;li&gt;Universal/Isomorphic Web App (UWA)&lt;/li&gt;
&lt;li&gt;Pre-Rendered Single-Page App&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is important to use the Universal mode for SEO and here is why:&lt;br&gt;
In a classic SPA, the HTML served to the client is relatively empty, and JavaScript dynamically renders HTML once it gets to the client. Because of this, you may see a "white flicker" before the webpage is fully loaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wAxDyLFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xil6y2wwslh2xwukt9zi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAxDyLFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xil6y2wwslh2xwukt9zi.jpg" alt="Classic SPA" width="880" height="348"&gt;&lt;/a&gt;&lt;br&gt;
While in a UWA, JavaScript renders the initial HTML the same way SPAs do, but now the JavaScript runs on your Nuxt server before the content is sent back to the client. This way, the client receives the rendered HTML immediately, and will behave like a classic SPA afterwards. This is done so that search engine crawlers can interpret and index our website's pages. As a result, Universal mode is important for SEO.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J6ytbi-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9q5zuafbw6n6usr5pn3k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J6ytbi-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9q5zuafbw6n6usr5pn3k.jpg" alt="UWA" width="880" height="348"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;New App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/js/app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that our setup is complete, we should install some npm packages to improve our SEO by &lt;strong&gt;adding a Dynamic Sitemap&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A sitemap is a blueprint of your website that help search engines find, crawl and index all of your website‚Äôs content. Sitemaps also tell search engines which pages on your site are most important. We will include a sitemap in our app, but first we must install the nuxt module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @nuxtjs/sitemap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @nuxtjs/sitemap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We only need to add an entry to our nuxt.config.js file after installing the sitemap module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nuxtjs/sitemap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Next we Add Google Analytics.&lt;/strong&gt;&lt;br&gt;
Google Analytics is a web analytics service that provides statistics and basic analytical tools for search engine optimization (SEO) and marketing purposes.To use Google Analytics with Nuxtjs, simply install the following module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev @nuxtjs/google-analytics
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add --dev @nuxtjs/google-analytics
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;If you are using Nuxt &amp;lt; v2.9, you have to install the module as dependency (without --dev or --save-dev)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We also need to add an entry to our nuxt.config.js file after installing the Google Analytics module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;buildModules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nuxtjs/google-analytics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we must link this nuxt application to our Google Analytics account. To do so, we must include the Google Analytics ID in nuxt.config.js.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;googleAnalytics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UA-XXX-X&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Now we Add Meta Tags&lt;/strong&gt;&lt;br&gt;
Nuxt lets you define all default  tags for your application inside the nuxt.config.js file using the head property. This is very useful for adding a default title and description tag for SEO purposes or for setting the viewport or adding the favicon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my website title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;viewport&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width=device-width, initial-scale=1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;hid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my website description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;icon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image/x-icon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/favicon.ico&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note that this code above will give you the same title and description on every page&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Adding titles and meta for each page can be done by setting the &lt;code&gt;head&lt;/code&gt; property inside your script tag on every page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;hid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home page description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Use &lt;code&gt;head&lt;/code&gt; as an object to set a title and description only for the home page&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;hid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home page description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all there is to it; these steps will undoubtedly boost your SEO performance. However, keep in mind that this isn't all there is to SEO; there are many other factors to consider.&lt;/p&gt;

&lt;p&gt;Thank you for Reading&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>nuxt</category>
      <category>seo</category>
    </item>
    <item>
      <title>Self-Taught Developer Journal, Day 29: TOP JavaScript Fundamentals Part 2 - Practice and Knowledge Check</title>
      <author>Jennifer Tieu</author>
      <pubDate>Fri, 31 Dec 2021 22:12:18 +0000</pubDate>
      <link>https://dev.to/jennifer_tieu/self-taught-developer-journal-day-29-top-javascript-fundamentals-part-2-practice-and-knowledge-check-10e0</link>
      <guid>https://dev.to/jennifer_tieu/self-taught-developer-journal-day-29-top-javascript-fundamentals-part-2-practice-and-knowledge-check-10e0</guid>
      <description>&lt;p&gt;Today I completed The Odin Project JS Fundamentals Part 2 Knowledge Check Section after reviewing all of the materials.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#knowledge-check"&gt;
  &lt;/a&gt;
  Knowledge Check
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;What are the eight data types in JavaScript?&lt;/strong&gt;
Numbers, BigInt, Strings, null, undefined, Boolean, Objects, Symbols&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Which data type is NOT primitive?&lt;/strong&gt;
Objects&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is the relationship between null and undefined?&lt;/strong&gt;
The expression, &lt;code&gt;null == undefined&lt;/code&gt;, returns true when using the loose equality operator, "==", but not for, "==="&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is the difference between single, double, and backtick quotes for strings?&lt;/strong&gt;
Single and double both behave the same. Backtick quotes can format strings with variables and expressions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is the term for embedding variables/expressions in a string?&lt;/strong&gt;
Template literals&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Which type of quote lets you embed variables/expressions in a string?&lt;/strong&gt;
Backticks&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How do you embed variables/expressions in a string?&lt;/strong&gt;
${...}&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How do you escape characters in a string?&lt;/strong&gt;
Put a blackslash, "\", in front of a character&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What are methods?&lt;/strong&gt;
Actions performed on Objects&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is the difference between slice/substring/substr?&lt;/strong&gt;
Slice extracts a part of a string and returns the extracted part in a new string.
Substring is similar to slice, but can't use negatives indices
Substr is similar to slice, but the second parameter specifies the length of the extracted part.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What are the three logical operators and what do they stand for?&lt;/strong&gt;
&amp;amp;&amp;amp; (AND), || (OR), ! (NOT) &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What are the comparison operators?&lt;/strong&gt;
Operators that compare values between operands&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What are truthy and falsy values?&lt;/strong&gt;
Values that return the boolean value true or false&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What are the falsy values in JavaScript?&lt;/strong&gt;
0, empty string, null, NaN, and undefined&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What are conditionals?&lt;/strong&gt;
evaluates whether a statement/expression is true or false&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is the syntax for an if/else conditional?&lt;/strong&gt;
Refer to end&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is the syntax for a switch statement?&lt;/strong&gt;
Refer to end&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is the syntax for a ternary operator?&lt;/strong&gt;
&lt;code&gt;condition ? value1: value2;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What is nesting?&lt;/strong&gt;
Putting a statement inside of another statement, therefore nesting them.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For Question 16:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if {
  ...
} else {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;For Question 17:&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;switch (condition) {&lt;br&gt;
  case a:&lt;br&gt;
    code block&lt;br&gt;
    break&lt;br&gt;
  default:&lt;br&gt;
    code block&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#resources"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Resources&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/landing-page"&gt;The Odin Project Landing Page Project&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Module.createRequire is not a function</title>
      <author>Anayo Oleru</author>
      <pubDate>Fri, 31 Dec 2021 22:07:07 +0000</pubDate>
      <link>https://dev.to/anayooleru/modulecreaterequire-is-not-a-function-345a</link>
      <guid>https://dev.to/anayooleru/modulecreaterequire-is-not-a-function-345a</guid>
      <description>&lt;p&gt;&lt;em&gt;Anayo Debugging 2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is one simpler issue, but the simplest bug can be the biggest at times, so I made sure I document it and can help anyone out there too.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bug"&gt;
  &lt;/a&gt;
  Bug
&lt;/h1&gt;

&lt;p&gt;In my react project's root I have a GitLab-ci.yml file that automatically runs whenever I push a commit to the server. It triggers a notification to the runner I specified, and then it processes the series of tasks I specified.&lt;/p&gt;

&lt;p&gt;Which involves building and deploying.&lt;/p&gt;

&lt;p&gt;This is a legacy React project, and had long been updated. After upgrading the packages I git committed. Build built successfully but deployment failed. With the following error:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IUHPQ91I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2zgkx89i7undg7bpd0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUHPQ91I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2zgkx89i7undg7bpd0i.png" alt="Image description" width="869" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h1&gt;

&lt;p&gt;I read through the error to understand what the problem really was, and I found it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Module.createRequire is not a function
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That was the only error that was reasonably clear indeed and meant something.&lt;/p&gt;

&lt;p&gt;So I Googled it, and I found out that it's an issue with Create React App, it's always on or looking for the latest, which means the Node engine version has to always be the latest and that includes my npm version, else some things might break.&lt;/p&gt;

&lt;p&gt;So in essence whatever machine running that project has to have Node &amp;gt;= 14.0.0 and npm &amp;gt;= 5.6&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#fix"&gt;
  &lt;/a&gt;
  Fix
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;My GitLab-ci.yml contains a Docker image with a node version of 10.15.3, so there is a need to upgrade.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;image: giona69/node-10.15.3-aws-eb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;And I temporarily replaced the docker image with the latest node.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;image: node:14.18.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Rebuilt Node-Sass&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I added &lt;br&gt;
&lt;code&gt;npm rebuild node-sass&lt;/code&gt; &lt;br&gt;
to the deploy script&lt;/p&gt;

&lt;p&gt;And Voila!! That fixed the issue. These weeks has been simple, this is the issues I have been experiencing.&lt;/p&gt;




&lt;p&gt;My name is Anayo Oleru, I specialise in Backend Development(NodeJS &amp;amp; ExpressJS), but I am experienced with Web frontend(ReactJS) and mobile(React-native). And I am open to offers in these fields.&lt;/p&gt;

&lt;p&gt;You can follow me on Twitter at &lt;a class="mentioned-user" href="https://dev.to/anayooleru"&gt;@anayooleru&lt;/a&gt; or send an email to: &lt;a href="mailto:anayo_oleru@outlook.com"&gt;anayo_oleru@outlook.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers and take care.&lt;/p&gt;

</description>
      <category>react</category>
      <category>gitlap</category>
      <category>deployment</category>
      <category>nodeversion</category>
    </item>
  </channel>
</rss>
