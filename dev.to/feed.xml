<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Functional programming in python</title>
      <author>Aswin Barath</author>
      <pubDate>Wed, 27 Jan 2021 15:26:45 +0000</pubDate>
      <link>https://dev.to/aswin2001barath/functional-programming-in-python-42fi</link>
      <guid>https://dev.to/aswin2001barath/functional-programming-in-python-42fi</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In computer science, functional programming is a programming paradigm where programs are constructed by applying and composing functions. (Wikipedia)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#need-for-functional-programmingfp" class="anchor"&gt;
  &lt;/a&gt;
  Need for Functional Programming(FP)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The usage of Functional Programming provides us with separation of concern where we can separate data and logic separately. Hence, the code becomes &lt;em&gt;clear&lt;/em&gt; and &lt;em&gt;easy to understand&lt;/em&gt; to a developer.&lt;/li&gt;
&lt;li&gt;Functional Programming follows the &lt;em&gt;DRY (Do not Repeat Yourself)&lt;/em&gt; principle.&lt;/li&gt;
&lt;li&gt;Code which follows Functional Programming practice is &lt;em&gt;memory-efficient&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The codebase which implements Functional Programming will also be &lt;em&gt;easy to extend and maintain&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pure-functions" class="anchor"&gt;
  &lt;/a&gt;
  Pure functions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;One of the important concepts in functional programming is the usage of &lt;strong&gt;pure functions&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A function is said to be a &lt;em&gt;Pure function&lt;/em&gt; if:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1) Given the same input, the function will always return the same output.&lt;/p&gt;

&lt;p&gt;2) The function must not produce any &lt;em&gt;side effects&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Side effects&lt;/strong&gt; are things that a function does that affect the outside world, that is they change the state of the program.&lt;/li&gt;
&lt;li&gt;Changing the data in a variable, printing output can be considered as some examples of side effects of a function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider the following simple example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aG0VmWf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lipceb5cbltvuuylxsqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aG0VmWf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lipceb5cbltvuuylxsqf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The function square will always return only the square of a given number and will not change anything in the outside world.&lt;br&gt;
This type of functions are also called &lt;strong&gt;declarative functions&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#note" class="anchor"&gt;
  &lt;/a&gt;
  Note:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;But, technically it's not possible to use pure functions everywhere as we may need to change the state of the code.&lt;/li&gt;
&lt;li&gt;Although, it's a good practice to use pure functions as many places as possible.&lt;/li&gt;
&lt;li&gt;And the &lt;em&gt;fact&lt;/em&gt; here is that it highly probable to face bugs and errors occur in non-pure functions rather than in pure functions.&lt;/li&gt;
&lt;li&gt;Python provides us with some useful pure functions which are built-in python.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#pure-functions-in-python" class="anchor"&gt;
  &lt;/a&gt;
  Pure Functions in python:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;map()&lt;/li&gt;
&lt;li&gt;filter()&lt;/li&gt;
&lt;li&gt;zip()&lt;/li&gt;
&lt;li&gt;reduce()&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#1-map" class="anchor"&gt;
  &lt;/a&gt;
  1) map()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;map() accepts two arguments - a function and an iterable.&lt;/li&gt;
&lt;li&gt;Consider the above example of square function, we can make use of map() function to quickly apply the function to a given iterable like a list of numbers:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tsXs5DhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nlk0ynd655xvqbsni04e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tsXs5DhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nlk0ynd655xvqbsni04e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[4, 36, 100]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The most common and useful use case of map() function is to receive multiple unknown numbers of input from the user:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpE3lyUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5yh2k05ao8kf45wlwhn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpE3lyUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5yh2k05ao8kf45wlwhn5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter some numbers: 2 5 3 7 4
Check your numbers: [2, 5, 3, 7, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-filter" class="anchor"&gt;
  &lt;/a&gt;
  2) filter()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;filter() function filters any given iterable based on the specified function.&lt;/li&gt;
&lt;li&gt;Consider the following example where the filter() function filters only the items which satisfy the condition of the given &lt;code&gt;only_even()&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aDmytKc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4se1zxrb81g5zgjcs7wu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDmytKc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4se1zxrb81g5zgjcs7wu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2, 4, 6, 8, 10]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-zip" class="anchor"&gt;
  &lt;/a&gt;
  3) zip()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When we need to zip two iterables literally, we use the zip() function.&lt;/li&gt;
&lt;li&gt;We can add as many iterables as we want inside a zip() function.&lt;/li&gt;
&lt;li&gt;Consider the following example with two iterables:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ltOMZlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kk0of0fmulej6ojcxhwp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ltOMZlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kk0of0fmulej6ojcxhwp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[('Iron Man', 'Batman'), ('Spider-Man', 'Superman')]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;zip() function binds together the corresponding index items in a tuple and inserts into a list function (as I specified as the list() function).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-reduce" class="anchor"&gt;
  &lt;/a&gt;
  4) reduce()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;reduce() function is part of a functools module - a standard python library.&lt;/li&gt;
&lt;li&gt;Consider the following example, where the reduce() function accumulates the given list values and provides a final output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xyVet6IH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5swwddumg7fjsstm59la.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xyVet6IH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5swwddumg7fjsstm59la.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Unlike other functions, the reduce() function accepts three arguments.&lt;/li&gt;
&lt;li&gt;From the example, you can see that the function accumulate() accepts two arguments &lt;code&gt;acc&lt;/code&gt; and &lt;code&gt;item&lt;/code&gt; and returns the sum.&lt;/li&gt;
&lt;li&gt;Here, the reduce() function passes the last argument 0 as acc at first and the first item from the list, then it accumulates and passes the sum as acc for the next list item and so on until all the list items are accumulated and the result is displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#code-along-and-learn-more" class="anchor"&gt;
  &lt;/a&gt;
  Code along and learn more...
&lt;/h4&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Day 34 Of 100DaysOfCode : Python Code To Find Count Of Mail</title>
      <author>Durga Pokharel</author>
      <pubDate>Wed, 27 Jan 2021 15:04:28 +0000</pubDate>
      <link>https://dev.to/iamdurga/day-34-of-100daysofcode-python-code-to-find-count-of-mail-4ddh</link>
      <guid>https://dev.to/iamdurga/day-34-of-100daysofcode-python-code-to-find-count-of-mail-4ddh</guid>
      <description>&lt;p&gt;Today is my 34 day of #100DaysOfCode and Python. Today I tried to write some code on python access to web data and data structure on python. Complete some assignment on coursera.&lt;/p&gt;

&lt;p&gt;Below is the python code I tried to write to find the count of mail from the file and from whom maximum times mail come.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#python-code" class="anchor"&gt;
  &lt;/a&gt;
  Python Code
&lt;/h1&gt;

&lt;p&gt;At first we open file. Set counts to zero at first. There is empty list for mails. I write simple loop to find the mail. There is empty dictionary to store mail as a key and number of count as a value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fhand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'mbox-short.txt'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;emails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fhand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# print('Debug:', words)
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;'From'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;#print(emails)
&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;#print(d)
&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;nd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])))}&lt;/span&gt;
&lt;span class="n"&gt;nd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The output of this code is given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'cwen@iupui.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'david.horwitz@uct.ac.za'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'zqian@umich.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'gsilver@umich.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'louis@media.berkeley.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'rjlowe@iupui.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'stephen.marquard@uct.ac.za'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'ray@media.berkeley.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'gopal.ramasammycook@gmail.com'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'antranig@caret.cam.ac.uk'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s"&gt;'wagnermr@iupui.edu'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To find by whom we got maximum mail is find by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"This &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;())[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; send mail most i.e &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;())[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; times."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Output is,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;cwen&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;iupui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edu&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;blockquote class="twitter-tweet"&gt;
&lt;br&gt;
&lt;p&gt;Day 34 Of &lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#100DaysOfCode&lt;/a&gt; and &lt;a href="https://twitter.com/hashtag/Python?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Python&lt;/a&gt; &lt;br&gt;* Web access on python&lt;br&gt;* Data structure on python&lt;br&gt;* Python program to find the maximum count of mail.&lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#100DaysOfCode&lt;/a&gt; ,&lt;a href="https://twitter.com/hashtag/CodeNewbie?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#CodeNewbie&lt;/a&gt; ,&lt;a href="https://twitter.com/hashtag/Python?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Python&lt;/a&gt; ,&lt;a href="https://twitter.com/hashtag/beginners?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#beginners&lt;/a&gt; &lt;a href="https://t.co/pTaNyNoczI"&gt;pic.twitter.com/pTaNyNoczI&lt;/a&gt;&lt;/p&gt;— Durga Pokharel (@mathdurga) &lt;a href="https://twitter.com/mathdurga/status/1354440046322057220?ref_src=twsrc%5Etfw"&gt;January 27, 2021&lt;/a&gt;&lt;br&gt;
&lt;/blockquote&gt; 

</description>
      <category>100daysofcode</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>python</category>
    </item>
    <item>
      <title>How to use Notion as an Issue Tracker</title>
      <author>Maegan Wilson</author>
      <pubDate>Wed, 27 Jan 2021 14:19:19 +0000</pubDate>
      <link>https://dev.to/maeganwilson_/how-to-use-notion-as-an-issue-tracker-3oab</link>
      <guid>https://dev.to/maeganwilson_/how-to-use-notion-as-an-issue-tracker-3oab</guid>
      <description>&lt;p&gt;First off, this is a video on YouTube. If you like it and watch it, please head over to YouTube and give it a like.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1Qs2pFvt8tg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Alright, if you're reading this it's because you want to read the points in the video. Here are the two major topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Notion&lt;/li&gt;
&lt;li&gt;Why I use Notion as an issue tracker&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-notion" class="anchor"&gt;
  &lt;/a&gt;
  What is Notion
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.notion.so/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7i9eriur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qyw9qg0ddu10nr5nc5ms.png" alt="Notion.so website before logging in"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notion brands itself as an "All-in-one Workspace" and as a major tool for teams. It's a web app that can be used to create a "wiki" style document. You can add links to other notion documents, photos, and website links as well. YouTube videos can also be put in to the documents, which is pretty neat.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-i-use-notion-as-an-issue-tracker" class="anchor"&gt;
  &lt;/a&gt;
  Why I use Notion as an issue tracker
&lt;/h1&gt;

&lt;p&gt;The main reason I like to use Notion as an issue tracker is the database feature. Another reason I like using Notion is that I can share a page quickly to the web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#databases" class="anchor"&gt;
  &lt;/a&gt;
  Databases
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ywCsAv3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4am0a59wbxdod44eb849.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ywCsAv3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4am0a59wbxdod44eb849.png" alt="My issue tracking for iHog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This database can be setup with whatever properties you want. The choices I use are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Text: Enter whatever text you want&lt;/li&gt;
&lt;li&gt;Number: I use this to associate to a GitHub issue&lt;/li&gt;
&lt;li&gt;Multi-select: Think of these as chain-able tags&lt;/li&gt;
&lt;li&gt;Select: Think of these as non-chain-able tags&lt;/li&gt;
&lt;li&gt;Links: Put a link to anywhere on the internet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another bonus to the database feature is that you can have different views to present the data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lqd5DXyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/icqxy2assdhqwlg1kktv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lqd5DXyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/icqxy2assdhqwlg1kktv.png" alt="View options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you create a view, then you can sort and filter the data based on the databse properties. I have a property called progress and a Board view that has the columns based on the progress. The progress is a select since an issue can only be in one state at a time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zX85IFF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rzjkpyi9ew65ziizstgr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zX85IFF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rzjkpyi9ew65ziizstgr.png" alt="Progress view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then utilizing filters and sorts you can quickly see specific issues for a release or any other property in the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fIpbVkSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2uyc9l3x9i6xjhaqme48.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fIpbVkSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2uyc9l3x9i6xjhaqme48.png" alt="Using filters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These filters and sorting capabilities make Notion such a great tool for me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sharing-a-web-page" class="anchor"&gt;
  &lt;/a&gt;
  Sharing a web page
&lt;/h2&gt;

&lt;p&gt;You can share a web page with the internet if you need to. Anyone can access it and click on links. This makes it quite easy to make a one page website and share to other places.&lt;/p&gt;

&lt;p&gt;Another nice thing is on that page, you can add a linked database that can be filtered and used in the page. In the image below, I have 2 views of the issue tracker. You can click on the image and see it live.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.notion.so/ihog/v2021-1-425b31a2f2684b1ba356ecf8dfbb7be4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BxzJ7FuV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q5wfxtz782x7cr2eschq.png" alt="Release notes page"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;That's what I have about Notion!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#links-as-a-thanks-for-reading" class="anchor"&gt;
  &lt;/a&gt;
  Links as a thanks for reading!
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/"&gt;Notion website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/parttimedeveloper/51efdc27322e42e88df74ce6722bacba?v=fd70df00e81c4b19b3dab9b086e28ca6"&gt;Template of my issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I work on iHog live every Tuesday and Thursday at 6:45am CST on my Twitch. Please go check it out and join me for a stream! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitch.tv/maeganwilson_"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9YxLpJlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4si8aq4fh7rtdr8ehvr5.png" alt="Twitch https://twitch.tv/maeganwilson_"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've created a discord for to discuss development topics, technology, and other random things! If you want to join click the image below!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.gg/HmGYbNHmun"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ns65p7O2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gtm1w4zfv62datsjoynw.png" alt="Discord invite https://discord.gg/HmGYbNHmun"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>developertips</category>
    </item>
    <item>
      <title>Demystifying the Frontend Technical Interview</title>
      <author>Alexa Tuskey</author>
      <pubDate>Wed, 27 Jan 2021 14:12:26 +0000</pubDate>
      <link>https://dev.to/lasertuskey/demystifying-the-frontend-technical-interview-1oba</link>
      <guid>https://dev.to/lasertuskey/demystifying-the-frontend-technical-interview-1oba</guid>
      <description>&lt;p&gt;I’m going to state the obvious here: technical interviews are hard. It’s an unnatural thing, having a near-stranger (or several) watch as you face off with a problem you may or may not have encountered before, in an unfamiliar environment, &lt;em&gt;with a time limit&lt;/em&gt;. For the majority of us, we are used to doing most of our work alone, in the comfort of our own setup, free from judging eyes and time constraints (outside of deadlines, of course). So how is one supposed to ace something that seems designed to make you fail?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I’m not claiming to know how every technical interview is handled. Different companies have different processes, so do your homework beforehand via Glassdoor, or better yet, networking with people who currently work there. I wanted to write this article because I’ve seen so many talented developers let nerves/imposter syndrome/stress freeze them up when I know they know what they’re doing. I hope this perspective from other side will give you a confidence boost to let your hard work and talent shine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-dont-need-to-finish" class="anchor"&gt;
  &lt;/a&gt;
  You don’t need to finish.
&lt;/h2&gt;

&lt;p&gt;I want to see &lt;em&gt;how&lt;/em&gt; you work. I could care less how quickly you do it. You aren’t going to be working like this if we hire you, so why would I expect you to hackertype like your life depended on it? Take a deep breath, and take your time. If you want talk through what you’re doing and use me as your rubber duck, great. If you’d prefer to concentrate in silence, no problem. I want to see how you approach the problem, if you write pseudocode, what methods you try and if something doesn’t work as expected, how you get around it. I’ve seen really good developers get choked up and freeze because they’re watching the clock. While it’s much easier said than done to relax, just know that speed does not necessarily equate understanding in my eyes, so take your time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-okay-to-ask-to-look-something-up" class="anchor"&gt;
  &lt;/a&gt;
  It’s okay to ask to look something up.
&lt;/h2&gt;

&lt;p&gt;You’ve probably heard the phrase, that good developers are good Googlers. It’s true! The more experience you get as a developer, the better questions you know to ask. Plus, we are expected to know a lot of information! Different languages, different syntaxes, different tools. Why would I expect you to memorize everything you’ve ever learned if I use search engines daily in my own workflow? If you need a refresher on the syntax of the Fetch API, don’t be afraid to ask to look it up really quick. I can see the difference between someone who understands what they’re doing, and someone who is just trying to look up answers to quickly copy and paste.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-careful-with-frameworkslibraries" class="anchor"&gt;
  &lt;/a&gt;
  Be careful with frameworks/libraries.
&lt;/h2&gt;

&lt;p&gt;Unless you are very comfortable using a framework or a library in a sandbox environment, skip it for Vanilla JS/plain CSS. You may be used to working with one in a pre-setup environment, whether it was set up by someone else or by a meta-framework like Nuxt, but trying to set one up in a sandbox while you’re against the clock can lead to stress and disaster. Depending on the seniority of the role, if you don’t have much experience with frameworks but are strong with Vanilla and plain CSS, that’s going to look a lot better than fumbling with the set up and syntax of a framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-open-to-advice" class="anchor"&gt;
  &lt;/a&gt;
  Be open to advice.
&lt;/h2&gt;

&lt;p&gt;If I see you getting stuck and the right questions just aren’t coming, I’ll try my best to drop some helpful tidbits to point you in the right direction because I want you to succeed. Not everyone likes taking advice though, especially if it isn’t their preferred way of doing things. You are free to solve your problem however you want, but if you don’t even consider a different way (without explaining &lt;em&gt;why&lt;/em&gt;), I might question how you’ll work within our team and with other developers. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One more little secret:&lt;/strong&gt; I get nervous interviewing people too. Am I coming off as welcoming and friendly? Do &lt;em&gt;I&lt;/em&gt; sound like I know what I’m doing? Will I know the answer if I’m asked a question? Remember: you are interviewing your interviewer too (as weird as that sounds). Would you like working with/for this person? Does the team you will be working with seem supportive and inclusive? Does the challenge you are being given seem fair to the role and skill level that you are interviewing for? Practicing these questions internally beforehand helps humanize your interviewer and generally makes the process a little less scary. Remember, a good company/interviewer/human should be rooting for you too.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>interview</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Using Framer Motion to make page transitions in React</title>
      <author>Sam Piggott</author>
      <pubDate>Wed, 27 Jan 2021 13:10:23 +0000</pubDate>
      <link>https://dev.to/sam_piggott/using-framer-motion-to-make-page-transitions-in-react-5ma</link>
      <guid>https://dev.to/sam_piggott/using-framer-motion-to-make-page-transitions-in-react-5ma</guid>
      <description>&lt;p&gt;In this short tutorial, we'll be learning how we can use the &lt;code&gt;AnimatePresence&lt;/code&gt; component provided by Framer Motion to create our very own page transitions when navigating between pages in React!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Eg4JHYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/el44fn3e1jk9aczsva18.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Eg4JHYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/el44fn3e1jk9aczsva18.gif" alt="Animation Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll be using React Router for this example - but this same principle should work for other router implementations, too (have tested with the &lt;strong&gt;Next.js&lt;/strong&gt; router and it worked with no issues!)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#watch-the-video-tutorial" class="anchor"&gt;
  &lt;/a&gt;
  Watch the Video Tutorial:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codesnap.io/course/react-bites/framer-motion-page-transitions"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7SrUxAQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/BxK9xNo.png" alt="Video Tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also download the source code from the link above, too!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-the-required-packages" class="anchor"&gt;
  &lt;/a&gt;
  Installing the required packages
&lt;/h3&gt;

&lt;p&gt;First of all, let's install the required packages into our React project. We'll need React Router for navigation, and Framer Motion for the transition behaviour.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add react-router-dom framer-motion
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-a-browserrouter-to-our-app" class="anchor"&gt;
  &lt;/a&gt;
  Adding a BrowserRouter to our app
&lt;/h3&gt;

&lt;p&gt;Next, in the top-level component where &lt;code&gt;ReactDOM.Render&lt;/code&gt; is called (for me, &lt;code&gt;index.tsx&lt;/code&gt;), we'll want to wrap our app's container in an instance of &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; from &lt;code&gt;react-router&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, we'll add the necessary imports to &lt;code&gt;index.tsx&lt;/code&gt;...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, we'll wrap our top-level component in an instance of this router.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; // &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;--&lt;/span&gt; &lt;span class="na"&gt;Adding&lt;/span&gt; &lt;span class="na"&gt;this&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;
      &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; // &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;--&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="na"&gt;and&lt;/span&gt; &lt;span class="na"&gt;this&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
  &lt;span class="err"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="na"&gt;React&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;,
  document.getElementById('root')
);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#building-a-simple-switch" class="anchor"&gt;
  &lt;/a&gt;
  Building a simple switch
&lt;/h3&gt;

&lt;p&gt;Next, we'll need to make some changes to the component immediately beneath the top-level component (in our example, the &lt;code&gt;App&lt;/code&gt; component).&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;App&lt;/code&gt; component, we'll set up a basic routing system for our app. In this example, we're only going to be navigating between two simple pages - so we just need a &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; and two &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; components to get us going.&lt;/p&gt;

&lt;p&gt;So let's import those in our &lt;code&gt;App.tsx&lt;/code&gt; file first...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then below, we'll return our simple switch from our &lt;code&gt;App&lt;/code&gt; component. For clarity, &lt;code&gt;Page1&lt;/code&gt; and &lt;code&gt;Page2&lt;/code&gt; components can be any valid React component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Page1&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Page2&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-animatepresence-from-framer-motion" class="anchor"&gt;
  &lt;/a&gt;
  Adding AnimatePresence from Framer Motion
&lt;/h3&gt;

&lt;p&gt;Now, it's time to add the animation! First, we'll wrap our &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; in the &lt;code&gt;&amp;lt;AnimatePresence&amp;gt;&lt;/code&gt; component from Framer Motion. Let's import that first...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AnimatePresence&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;framer-motion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, let's wrap our app in that new component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AnimatePresence&lt;/span&gt; &lt;span class="na"&gt;exitBeforeEnter&lt;/span&gt; &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Page1&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Page2&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AnimatePresence&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Transitions with &lt;code&gt;AnimatePresence&lt;/code&gt; only work when the child immediately below the &lt;code&gt;AnimatePresence&lt;/code&gt; component changes. In that case, that's our &lt;code&gt;Switch&lt;/code&gt; component. We'll need to add some props to help &lt;code&gt;AnimatePresence&lt;/code&gt; recognise when that change has occurred.&lt;/p&gt;

&lt;p&gt;Once again, in &lt;code&gt;App.tsx&lt;/code&gt;, we're going to import the &lt;code&gt;useLocation&lt;/code&gt; hook from &lt;code&gt;react-router&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And now, let's add the &lt;code&gt;location&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; props to our &lt;code&gt;Switch&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AnimatePresence&lt;/span&gt; &lt;span class="na"&gt;exitBeforeEnter&lt;/span&gt; &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt; &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Page1&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Page2&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AnimatePresence&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-the-transition-effect-parameters-to-our-page-components" class="anchor"&gt;
  &lt;/a&gt;
  Adding the transition effect parameters to our page components
&lt;/h3&gt;

&lt;p&gt;Great news - we're done with our App component. Now, let's add some animations to our pages, and we should be ready to go!&lt;/p&gt;

&lt;p&gt;Here's the &lt;code&gt;Page1&lt;/code&gt; component I'm working with. It's super simple - just a simple &lt;code&gt;div&lt;/code&gt; with some styles, and a &lt;code&gt;Link&lt;/code&gt; to our other page in the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Page1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is page 1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Go to Page 2
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To trigger an animation when this &lt;code&gt;Page1&lt;/code&gt; component is mounted, we'll need to wrap it in a special component called &lt;code&gt;motion.div&lt;/code&gt; which is provided by Framer Motion. So, let's import that...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;motion&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;framer-motion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, we'll wrap our &lt;code&gt;Page1&lt;/code&gt; component in our new &lt;code&gt;motion.div&lt;/code&gt; component, and provide some props to perform the animation when it's mounted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Page1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
      &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is page 1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Go to Page 2
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, we've added three new props to our &lt;code&gt;motion.div&lt;/code&gt; component here, too.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;initial&lt;/strong&gt; - This is the style of the component at the &lt;strong&gt;beginning&lt;/strong&gt; of the animation when it is &lt;strong&gt;animating in&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;animate&lt;/strong&gt; - This is the style of the component at the &lt;strong&gt;end&lt;/strong&gt; of the animation when it is &lt;strong&gt;animating in&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;exit&lt;/strong&gt; - This is the style of the component at the &lt;strong&gt;end&lt;/strong&gt; of the animation when it is &lt;strong&gt;animating out&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;transition&lt;/strong&gt; - Transition configuration. Here, we're specifying how long we want the duration to last for (in our case, 0.5 seconds).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With those props in place, we can expect the following behaviour:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When the prop is first mounted, it is invisible (&lt;code&gt;scaleY: 0&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Then, it will immediately animate over 0.5 seconds to be visible (&lt;code&gt;scaleY: 1&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;When it is animating out, it will resize back down before it is removed from the DOM (&lt;code&gt;scaleY: 0&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, the only other thing we need to do is wrap our other page components that we wish to animate using the same method.&lt;/p&gt;

&lt;p&gt;I'm animating between two pages (&lt;code&gt;Page1&lt;/code&gt; and &lt;code&gt;Page2&lt;/code&gt; in this example), so I'll need to wrap &lt;code&gt;Page2&lt;/code&gt; in a &lt;code&gt;motion.div&lt;/code&gt; tag, too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Page2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
      &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is page 2&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/page1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Go to Page 1
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#and-were-done" class="anchor"&gt;
  &lt;/a&gt;
  And we're done!
&lt;/h3&gt;

&lt;p&gt;And with that, we are done! We have successfully set up a fancy animation when navigating between pages in React.&lt;/p&gt;

&lt;p&gt;You should now also have all the knowledge you need to customise your transition styles, too. Each page can also have different transition styles - the sky's the limit!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codesnap" class="anchor"&gt;
  &lt;/a&gt;
  CodeSnap
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://codesnap.io"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IwgicCou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mwdAzpU.png" alt="CodeSnap Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you enjoyed this course, I'm uploading tutorial videos, courses, articles and plenty more. If you'd like to see more of this content, please consider signing up for the mailing list over on &lt;a href="https://codesnap.io"&gt;&lt;strong&gt;CodeSnap.io&lt;/strong&gt;&lt;/a&gt;. It encourages me to make more videos and articles just like this one 🙏&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building HTTP server with Ruby</title>
      <author>Arnab Sen</author>
      <pubDate>Wed, 27 Jan 2021 12:43:56 +0000</pubDate>
      <link>https://dev.to/arnabsen1729/building-http-server-with-ruby-17ad</link>
      <guid>https://dev.to/arnabsen1729/building-http-server-with-ruby-17ad</guid>
      <description>&lt;p&gt;&lt;em&gt;The article was originally posted &lt;a href="https://arnabsen.rocks/posts/building_server_from_scratch/"&gt;here&lt;/a&gt;. Some of the gifs are not displayed here due to dev.to's restrictions.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-web-server" class="anchor"&gt;
  &lt;/a&gt;
  What is a web server?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A web server is a program that takes a request to your website from a user and does some processing on it.&lt;/strong&gt; Then, it might give the request to the application layer. A few of the most popular web servers are Nginx, Apache. (They have more features like reverse proxy, load balancing, and many others, as well, but primarily they act as web servers)&lt;/p&gt;

&lt;p&gt;Now, let me ask a question. The server that runs on your localhost during the development is that a web server? Cause, whatever request you sent, it processes it and then loads up the appropriate page. So, it might seem like a webserver, but more technically it is called an &lt;strong&gt;app server&lt;/strong&gt;.  The &lt;strong&gt;app server&lt;/strong&gt; loads the code and keeps the app in memory. When your app server gets a request from your web server, it tells your app about it. After your app is done handling the request, the app server sends the response back to the webserver (and eventually to the user). For rails in particular there are many app servers like Unicorn, Puma, Thin, Rainbows.&lt;/p&gt;

&lt;p&gt;But if there are so many servers that are tested by the community and used by thousands, why should we bother building another? Well, by building one from scratch we will have a better knowledge of how these works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-actions-does-an-http-server-actually-perform" class="anchor"&gt;
  &lt;/a&gt;
  What actions does an HTTP server actually perform?
&lt;/h2&gt;

&lt;p&gt;So, let's break down what an HTTP server does.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dJ-q-m-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnabsen.rocks/images/tutorial-3/http-working.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJ-q-m-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnabsen.rocks/images/tutorial-3/http-working.png" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps-involved" class="anchor"&gt;
  &lt;/a&gt;
  Steps involved
&lt;/h3&gt;

&lt;p&gt;So when we visit a particular URL, it sends a particular HTTP request to the server. Now, what is an HTTP request? It is an application-level protocol that every application connected to the internet has to agree upon. There are many other protocols like FTP (File Transfer Protocol), TCP (Transmission Control Protocol), SMTP (Simple Mail Transfer Protocol). &lt;strong&gt;HTTP or HyperText Transfer Protocol&lt;/strong&gt; is just very popular among these and is used by web applications and web servers to communicate among themselves.&lt;/p&gt;

&lt;p&gt;So, when we type one URL in the browser. It makes an &lt;strong&gt;HTTP "request"&lt;/strong&gt; to the web server, to which the webserver processes that request and sends back an &lt;strong&gt;HTTP "response"&lt;/strong&gt; which gets rendered to the user in the browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#history" class="anchor"&gt;
  &lt;/a&gt;
  History
&lt;/h3&gt;

&lt;p&gt;The first HTTP standard was released in 1996 which was HTTP/1.0 by Tim Berners Lee. Now we have HTTP/2 which is a more efficient expression of HTTP's semantics "on the wire" and was published in 2015. Also, did you know that there is another successor which is HTTP 3 which is already in use by over 4% of the websites (It used UPDP instead of TCP for the transport protocol)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-should-we-start" class="anchor"&gt;
  &lt;/a&gt;
  How should we start?
&lt;/h2&gt;

&lt;p&gt;So we would need a tool that will listen for bi-directional communication between client and server. Basically a &lt;strong&gt;socket&lt;/strong&gt;. &lt;strong&gt;Socket&lt;/strong&gt; is nothing but an endpoint for two-way communication between two programs running on a network i.e endpoints of a &lt;em&gt;bidirectional communications channel&lt;/em&gt;. So it has to be bound to a port so the TCP layer can find the application that the data is sent to, the server forms the listener socket and the client reaches out to the socket. We will not be implementing sockets. Ruby already has a socket implemented in their standard library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"socket"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The socket library provides specific classes for handling the common transports as well as a generic interface for handling the rest, basically it interacts with the OS level and performs the necessary actions for us.&lt;/p&gt;

&lt;p&gt;What should be the basic processes of the webserver&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Listen for connections&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parse the request&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Process and send the response&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-listen-for-connections" class="anchor"&gt;
  &lt;/a&gt;
  1. Listen for connections
&lt;/h3&gt;

&lt;p&gt;First, let's open a port and listen to all messages sent to that particular port. We can do that using the &lt;code&gt;TCPServer.new&lt;/code&gt;  or &lt;code&gt;TCPServer.open&lt;/code&gt; method. [ According to the docs they are synonymous ]&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"socket"&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Feel free to choose any port, but make sure it is available.  Use the command "netstat -lntu" to look for the ports that are currently used by a process, don't use those.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we would like to loop infinitely to process our incoming connections. When a client connects to our server, &lt;code&gt;server.accept&lt;/code&gt; will return a Ruby Socket, which can be used like any other ruby I/O object. Since the connection was made by a request we would also love to read that request, which we can do using &lt;code&gt;gets&lt;/code&gt;  method. It will return the first line of the request.&lt;/p&gt;

&lt;p&gt;So now we have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"socket"&lt;/span&gt;

&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt; &lt;span class="c1"&gt;# to get a port from the ARG&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Client connected..."&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Request: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gets&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;How to test this?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open up two terminals in one run the ruby script, and in the other open up &lt;code&gt;irb&lt;/code&gt;.  Now follow my commands:&lt;/p&gt;

&lt;p&gt;On the other terminal I write the commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"socket"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;soc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TCPSocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;soc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hello There"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2cAeT09Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://arnabsen.rocks/images/tutorial-3/test.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2cAeT09Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://arnabsen.rocks/images/tutorial-3/test.gif" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A much easier way to test is to run the script and visit that port using the browser. If your port is &lt;code&gt;8000&lt;/code&gt; just visit&lt;br&gt;
&lt;code&gt;http://localhost:8000&lt;/code&gt;. You will see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Client connected...
Request: GET / HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;or can use the curl command for the same.&lt;/p&gt;

&lt;p&gt;Why just &lt;code&gt;GET / HTTP/1.1&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;Because when you sent a request it gets parsed into a multi-line string. Try to run the command &lt;code&gt;curl -v localhost:8000&lt;/code&gt; you will notice something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*   Trying ::1:8000...
* Connected to localhost (::1) port 8000 (#0)
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: localhost:8000
&amp;gt; User-Agent: curl/7.74.0
&amp;gt; Accept: */*
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And in our script we used &lt;code&gt;session.gets&lt;/code&gt; which only takes one line in the IO stream as input. So, let's replace that with  &lt;code&gt;readpartial(2048)&lt;/code&gt; . Here 2048 represents the byte of data we would love to read. We can increase that, but for our case, it is enough.&lt;/p&gt;

&lt;p&gt;So far we have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"socket"&lt;/span&gt;

&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Request: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;readpartial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now run the script and the curl command again. It will print all of the HTTP request data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q8cbjapx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnabsen.rocks/images/tutorial-3/2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8cbjapx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnabsen.rocks/images/tutorial-3/2.png" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-parsing-the-http-request" class="anchor"&gt;
  &lt;/a&gt;
  2. Parsing the HTTP request
&lt;/h3&gt;

&lt;p&gt;Right now we are just receiving the request as a string, we need to parse it so that our server can understand and further process it.&lt;/p&gt;

&lt;p&gt;Let's look into the request once again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; GET / HTTP/1.1  &lt;span class="c"&gt;# GET is the method, the / is the path, the HTTP part is the protocol&lt;/span&gt;
 Host: localhost:8000 &lt;span class="c"&gt;# Headers&lt;/span&gt;
 User-Agent: curl/7.74.0
 Accept: &lt;span class="k"&gt;*&lt;/span&gt;/&lt;span class="k"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first line gives us&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;method&lt;/li&gt;
&lt;li&gt;path&lt;/li&gt;
&lt;li&gt;protocol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the lines after that comes under the header. So we write this function that will parse the raw request string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request_string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;method: &lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;version: &lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;path: &lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;headers: &lt;/span&gt;&lt;span class="n"&gt;parse_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_string&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It calls another &lt;code&gt;parse_headers&lt;/code&gt; to parse the headers&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;":"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;
    &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now instead of just printing the request do it this way&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;ap&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;readpartial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I am using &lt;code&gt;awesome_print&lt;/code&gt; to display the data in a formatted manner you can replace that with &lt;code&gt;puts&lt;/code&gt;. Now you would get something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YMIfkyNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnabsen.rocks/images/tutorial-3/3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMIfkyNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnabsen.rocks/images/tutorial-3/3.png" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-process-and-send-the-http-response" class="anchor"&gt;
  &lt;/a&gt;
  3. Process and send the HTTP response
&lt;/h3&gt;

&lt;p&gt;Now since we have all the data we now have to prepare and send the response. If the path of the request is "/" which refers to the home we will respond with something like &lt;code&gt;index.html&lt;/code&gt;  else, if it was something else like &lt;code&gt;localhost:8000/about.html&lt;/code&gt; then we will respond with that path &lt;code&gt;about.html&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsed_req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parsed_req&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;
        &lt;span class="n"&gt;respond_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;respond_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What &lt;code&gt;respond_with&lt;/code&gt; is supposed to is to check if the file exists, if it does then respond with the file, else return a 404.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;respond_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exists?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ok_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;binread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;error_response&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the responses, we will be sending a string of this format. This is according to the HTTP spec. You can read more about the HTTP spec &lt;a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s2"&gt;"HTTP/1.1 &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="s2"&gt;"Content-Length: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\#&lt;/span&gt;&lt;span class="s2"&gt;{body}&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So our, &lt;code&gt;ok_response&lt;/code&gt; and &lt;code&gt;error_respnse&lt;/code&gt; will be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ok_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;MyServer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;code: &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;body: &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;error_response&lt;/span&gt;
    &lt;span class="no"&gt;MyServer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;code: &lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now after we have our response we can send it back to the client. I have refactored the codes a little bit, you can find the entire code here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/arnabsen1729/http-server-ruby"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KgH5pSCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github-readme-stats.vercel.app/api/pin/%3Fusername%3Darnabsen1729%26repo%3Dhttp-server-ruby" alt="ReadMe Card"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once everything is in place, we can finally run the script and visit the URL &lt;code&gt;http://localhost:8000&lt;/code&gt; it will render all the contents of &lt;code&gt;index.html&lt;/code&gt;. Also if you have any other pages in the same folder like &lt;code&gt;about.html&lt;/code&gt; visiting &lt;code&gt;http://localhost:8000/about.html&lt;/code&gt; will render that as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kH_S-d00--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dklq40i3g81duh2m8u72.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kH_S-d00--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dklq40i3g81duh2m8u72.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yayy!! We have successfully built our own HTTP server&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>You Are Using Emojis The Wrong Way ❌</title>
      <author>Ludal 🚀</author>
      <pubDate>Wed, 27 Jan 2021 10:55:14 +0000</pubDate>
      <link>https://dev.to/iamludal/you-are-using-emojis-the-wrong-way-i71</link>
      <guid>https://dev.to/iamludal/you-are-using-emojis-the-wrong-way-i71</guid>
      <description>&lt;p&gt;As a web, mobile or software developer, you’re probably including &lt;em&gt;emojis&lt;/em&gt; in your application &lt;strong&gt;the wrong way&lt;/strong&gt;. This is why.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#starting-with-an-example" class="anchor"&gt;
  &lt;/a&gt;
  Starting With An Example
&lt;/h1&gt;

&lt;p&gt;The common mistake programmers make when it comes to include emojis in their application, is to simply &lt;strong&gt;copy&lt;/strong&gt; them, for instance from a website such as &lt;a href="https://emojipedia.org"&gt;Emojipedia&lt;/a&gt;, and then &lt;strong&gt;paste&lt;/strong&gt; it into the source code. &lt;/p&gt;

&lt;p&gt;This is also what I used to do.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Source code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;
  I'm a pretty header! 🎉
&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Output:
&lt;h2&gt;I'm a pretty header! 🎉&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#the-problem" class="anchor"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h1&gt;

&lt;p&gt;As you can see, including emojis that way seems to work just &lt;strong&gt;fine&lt;/strong&gt;. The emoji we copy-pasted is rendered the way we wanted, &lt;strong&gt;yee-haw!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, imagine being &lt;strong&gt;so proud&lt;/strong&gt; of the application or feature you just created that you want to showcase it, let's say, to your &lt;strong&gt;grandparents&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OUcbN71M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/625/0%2Ah37eAJKCXfdj5Wut.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OUcbN71M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/625/0%2Ah37eAJKCXfdj5Wut.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you might have guessed, your grandparents may not have the latest smartphone or laptop on the market. It might &lt;strong&gt;not display emojis at all&lt;/strong&gt;, or just the emoji you used is &lt;strong&gt;not supported yet&lt;/strong&gt; by their device.&lt;/p&gt;

&lt;p&gt;Hence, this is what they could see:&lt;/p&gt;


&lt;center&gt;&lt;h2&gt;I'm a pretty header! ▯&lt;/h2&gt;&lt;/center&gt;

&lt;p&gt;Probably not what you wanted them to see...&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#why-does-this-happen-" class="anchor"&gt;
  &lt;/a&gt;
  Why Does This Happen ?
&lt;/h1&gt;

&lt;p&gt;From &lt;a href="https://www.phonearena.com/news/How-do-Emoji-work-a-guide-to-Emoji-history-nature-and-usage_id88761"&gt;phonearena&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Emoji works exactly the same way as regular text — a Unicode code point corresponds to every character in the Unicode catalog, Emoji included. When a device sends a message, it sends a series of Unicode code points. When another device receives said message, it interprets the code points and displays letters, numbers and Emojis. It’s actually a bit more complicated than that, but this is the basic principle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, the emoji is interpreted &lt;strong&gt;by the device&lt;/strong&gt;, which means that their appearance may &lt;strong&gt;vary from one device to another&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Thus, it may not appear the way you wanted the user to see it, and possibly alter your application’s design…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zRdUbnE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9ANIKiZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zRdUbnE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9ANIKiZ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The gift emoji, displayed by different devices.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#the-workaround" class="anchor"&gt;
  &lt;/a&gt;
  The Workaround
&lt;/h1&gt;

&lt;p&gt;Fortunately, whether you are a web, mobile or software developer, there is a &lt;strong&gt;quick and easy&lt;/strong&gt; workaround for this problem, and that is &lt;a href="https://twemoji.twitter.com/"&gt;Twemoji&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lu2upBk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/625/0%2ABjQnY7Flwat1f-fP.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lu2upBk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/625/0%2ABjQnY7Flwat1f-fP.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This open source project by &lt;a href="http://twitter.com/"&gt;Twitter&lt;/a&gt; converts Unicode emoji characters into normal &lt;a href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics"&gt;SVG&lt;/a&gt; images, which are icons you can enlarge &lt;strong&gt;as much as you like without losing any quality&lt;/strong&gt; — also known as vector images.&lt;/p&gt;

&lt;p&gt;This way, your emojis will be &lt;strong&gt;displayed in the same way on all devices&lt;/strong&gt; that are able to display images — which means, any smartphone and PC.&lt;/p&gt;

&lt;p&gt;Now let’s dive into a concrete example. We’ll use the &lt;em&gt;Twemoji&lt;/em&gt; library into our web application.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-the-html-code" class="anchor"&gt;
  &lt;/a&gt;
  1. The HTML Code
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
  I'm a pretty header! 🎉
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://twemoji.maxcdn.com/v/latest/twemoji.min.js"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#2-the-javascript-code" class="anchor"&gt;
  &lt;/a&gt;
  2. The JavaScript Code
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;twemoji&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Yes, that’s all you need! 😲&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#3-adding-a-bit-of-style" class="anchor"&gt;
  &lt;/a&gt;
  3. Adding A Bit Of Style
&lt;/h2&gt;

&lt;p&gt;The previous code will create a new &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element, with the &lt;code&gt;emoji&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;draggable=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"emoji"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"🎉"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://twemoji.maxcdn.com/v/13.0.1/72x72/1f389.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;However, if we don’t add any CSS styles, this is what the output looks like…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r3P3-XgP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ezL6uJr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3P3-XgP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ezL6uJr.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hence, just add these 6 lines to your CSS file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.emoji&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;vertical-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-.1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;We set the width and height the same as the surrounding text, and vertically center the emoji.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And now see the final output…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WVrfsVno--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9qsTzwf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WVrfsVno--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9qsTzwf.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how your emoji will look like &lt;strong&gt;on all devices&lt;/strong&gt; using your application. Awesome! Right?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Accessibility is important&lt;/strong&gt;: your users should be able to see any content of your application. The little trick we’ve seen in this article is in fact used in &lt;a href="https://discord.app/"&gt;Discord&lt;/a&gt; applications, and also in other famous ones — even Twitter itself.&lt;/p&gt;

&lt;p&gt;Now, you can showcase your brand new projects to your grandparents, &lt;strong&gt;no matter what old device&lt;/strong&gt; they are using. 😏&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/SYLxVuYVxMjAU9uZUK/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/SYLxVuYVxMjAU9uZUK/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this article was helpful for you! Will you now include Twemoji in your projects? Let me know in the comments!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>mobile</category>
      <category>a11y</category>
      <category>twitter</category>
    </item>
    <item>
      <title>Understanding React hooks</title>
      <author>Elizabeth</author>
      <pubDate>Wed, 27 Jan 2021 08:53:58 +0000</pubDate>
      <link>https://dev.to/ilizette/understanding-react-hooks-48mm</link>
      <guid>https://dev.to/ilizette/understanding-react-hooks-48mm</guid>
      <description>&lt;p&gt;Hooks are now inevitable for React developers who use functional components. I struggled with the concepts of hooks when I started with reactjs, and I couldn't find an exact tutorial that would explain it well. So I'm writing this and hoping to help someone else, you know. Let's get in there right away.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-hooks-and-why-should-i-care" class="anchor"&gt;
  &lt;/a&gt;
  What are hooks and why should I care?
&lt;/h2&gt;

&lt;p&gt;So, during the early days of React, if a developer needs a state that will change later on. They will have to use a class component. But using classes in Javascript could be &lt;a href="https://dev.to/smalluban/do-we-really-need-classes-in-javascript-after-all-91n"&gt;stressful for developers for a lot of reasons&lt;/a&gt;. So, in other for programmers like me (that still struggle with understanding classes in javascript) to keep using react the React team introduced hooks when they released React version 16.8. 0.&lt;/p&gt;

&lt;p&gt;So what are hooks? according to the Reactjs team&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;They let you use state and other React features without writing a class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hooks lets you use some of the superpowers that react has without using a class. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rules-of-using-hooks" class="anchor"&gt;
  &lt;/a&gt;
  Rules of using hooks
&lt;/h2&gt;

&lt;p&gt;We all hate rules, don't we? But without rules, a lot of things will go wrong. I will list out some of the rules you need to follow to use hooks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can only use hooks in functional components, not classes or a regular javascript function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You cannot use react hooks inside of conditional statements, loops, or nested functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Whenever you're creating a custom hook, you should always prefix it with "use". for example if I have a hook that checks the size of my window, I'd call that hook useWindowSize. We'll address this better when we're creating custom hooks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To know more about the rules of hooks you can read the &lt;a href="https://reactjs.org/docs/hooks-rules.html"&gt;Rules of hooks page&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-using-hooks" class="anchor"&gt;
  &lt;/a&gt;
  Let's start using hooks
&lt;/h2&gt;

&lt;p&gt;For the rest of this article, we'd be exploring the different hooks in react and how to create our very own hook.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usestate" class="anchor"&gt;
  &lt;/a&gt;
  useState
&lt;/h3&gt;

&lt;p&gt;react state is one of the most popular reasons why hooks were created. A React state lets a component declare and manage data internally. useState makes the component re-render whenever you change the value in the state. Let's take a look at this example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from 'react';


const CompName = () =&amp;gt; {
 const [userName] = useState('Elizabeth');
 return (
   &amp;lt;div&amp;gt;
     Hello World! my name is {userName}
   &amp;lt;/div&amp;gt;
 )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the code above we are using the state hook. As you can see I passed 'Elizabeth' to the hook. Also, you'd notice that the hook returns an array. The first index of the array will return the value that was passed to the hook (you can name it whatever you want). In our case, Elizabeth. The second index of the array returns a function that allows us to modify the state. &lt;/p&gt;

&lt;p&gt;Let's modify our example above to display whatever is being passed to a form.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#show-some-magic" class="anchor"&gt;
  &lt;/a&gt;
  Show some magic
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from 'react';


const ShowHide = () =&amp;gt; {
  const [show, setShow] = useState(false);
  return (
    &amp;lt;div&amp;gt;
     &amp;lt;button onClick={() =&amp;gt; setShow(!show)}&amp;gt;{show ? 'Show me 
      some magic' : 'Hide the magic'}&amp;lt;/button&amp;gt;
       {show &amp;amp;&amp;amp; (&amp;lt;p&amp;gt;Some magic&amp;lt;/p&amp;gt;)}
     &amp;lt;/div&amp;gt;
   )
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the code above, we're using the state to show and hide some magic😁 Here's the output of the code.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/fancy-bird-4zguk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#using-arrays-and-objects" class="anchor"&gt;
  &lt;/a&gt;
  Using arrays and objects
&lt;/h5&gt;

&lt;p&gt;The state hook can also accept arrays and objects. However, setting an object state is quite different from setting a string state. Imagine you have an object with different properties and you want to update the value of one property in that object, the example below wouldn't be the right way to update your state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const [person, setPerson] = useState({name: 'Tolulope', age: '34'});
  setPerson({name: 'Tofa'});

console.log(person);
// expected result: name: 'Tofa'
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/winter-wood-lx1wb"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;if you click on the update name button above you'd see that the age disappears. This is because the new object passed into setPerson overrides what was previously in the object.&lt;/p&gt;

&lt;p&gt;The setState accepts a parameter that contains the previous state. So in order to set an object state using our previous code, you spread the previous state and then pass the property you would like to update like the example below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setState((prevState) =&amp;gt; 
 {
  ...prevState,
  name: 'Tofa'
 })
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The example above will first of all copy what was in the previous state, then update the name property to "Tofa".&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#usestate-and-functions" class="anchor"&gt;
  &lt;/a&gt;
  UseState and functions
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;useState&lt;/code&gt; also accepts functions, for example, if you have a case where you have to do some complex calculation in order to set your state, you'll want it to run just once you pass a function to the useState. Passing a function to your useState will only make that function run once, which is once the component mounts.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/confident-nightingale-gg6jf"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;You can do more with states so I'd advise you to try exploring the possibilities.&lt;/p&gt;

&lt;p&gt;In my next post, I'd be talking about another hook called useEffect.&lt;br&gt;
If you enjoyed this post please like and share. If you have questions please feel free to drop them in the comments section. In the main time. Keep coding and doing amazing things.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>hooks</category>
      <category>firstyearincode</category>
    </item>
    <item>
      <title>Pyswahili (Python for non-english speakers)</title>
      <author>Jordan Kalebu</author>
      <pubDate>Wed, 27 Jan 2021 07:46:59 +0000</pubDate>
      <link>https://dev.to/kalebu/pyswahili-python-for-non-english-speakers-1mj5</link>
      <guid>https://dev.to/kalebu/pyswahili-python-for-non-english-speakers-1mj5</guid>
      <description>&lt;p&gt;A month ago I started an open-source project titled &lt;strong&gt;Pyswahili&lt;/strong&gt;, which acts as a middleware to help non-English speakers get started with Python Programming using Swahili based keywords.&lt;/p&gt;

&lt;p&gt;With just a twist of the dictionary file, you could make the python understand your custom language keywords.&lt;/p&gt;

&lt;p&gt;The Project is available on GitHub as open-source under MIT Public License&lt;/p&gt;

&lt;p&gt;Here is the link&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kalebu"&gt;
        Kalebu
      &lt;/a&gt; / &lt;a href="https://github.com/Kalebu/pyswahili"&gt;
        pyswahili
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A programming language built  on top of Python to easily allow Swahili speakers to get started with programming without ever knowing English
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
pyswahili&lt;/h1&gt;
&lt;p&gt;A programming language built over Python to easily allow swahili speakers to get started with programming without ever knowing english&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pyswahili&lt;/strong&gt; is not a completely independent language but more of a swahili version of &lt;strong&gt;python language&lt;/strong&gt;, syntax and language grammar is
equivalent to python one with only change of &lt;strong&gt;keywords&lt;/strong&gt; from english to swahili.&lt;/p&gt;
&lt;h2&gt;
pyswahili Transpiler&lt;/h2&gt;
&lt;p&gt;Transpiler(Pyswahili) is for converting the swahili version of python to english version so that it can be intepreted by the python Intepreter&lt;/p&gt;
&lt;h2&gt;
extension ?&lt;/h2&gt;
&lt;p&gt;There is no official extension for pyswahili, so for now &lt;strong&gt;.py&lt;/strong&gt; is fine.&lt;/p&gt;
&lt;h2&gt;
Repl vs Script&lt;/h2&gt;
&lt;p&gt;Similar to Python, Pyswahili supports both modes; the Read-evaluate-print(&lt;strong&gt;Repl&lt;/strong&gt;) loop and Script mode
Repl enable you to interactively execute pyswahili code line by line without requiring to write a complete program while on other side &lt;strong&gt;Script mode&lt;/strong&gt; requires you
to write your Pyswahili code on a file and run it…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kalebu/pyswahili"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>python</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Accidental complexity and closed source</title>
      <author>stereobooster</author>
      <pubDate>Wed, 27 Jan 2021 05:21:57 +0000</pubDate>
      <link>https://dev.to/stereobooster/accidental-complexity-and-closed-source-2mmm</link>
      <guid>https://dev.to/stereobooster/accidental-complexity-and-closed-source-2mmm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#accidental-complexity" class="anchor"&gt;
  &lt;/a&gt;
  Accidental complexity
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;All software construction involves essential tasks, the fashioning of the complex conceptual structures that compose the abstract software entity, and accidental tasks, the representation of these abstract entities in programming languages and the mapping of these onto machine languages within space and speed constraints. Most of the big past gains in software productivity have come from removing artificial barriers that have made the accidental tasks inordinately hard, such as severe hardware constraints, awkward programming languages, lack of machine time.&lt;/p&gt;

&lt;p&gt;– &lt;a href="http://faculty.salisbury.edu/~xswang/Research/Papers/SERelated/no-silver-bullet.pdf"&gt;No Silver Bullet — Essence and Accident in Software Engineering&lt;/a&gt;, Frederick P. Brooks, Jr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Accidental complexity is non-essential tasks, but other tasks we are forced to solve to start solving what we meant to do in the first place.&lt;/p&gt;

&lt;p&gt;Brooks continues:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How much of what software engineers now do is still devoted to the accidental, as opposed to the essential? &lt;strong&gt;Unless it is more than 9/10 of all effort, shrinking all the accidental activities to zero time will not give an order of magnitude improvement&lt;/strong&gt;. Therefore it appears that the time has come to address the essential parts of the software task, those concerned with fashioning abstract conceptual structures of great complexity. I suggest:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exploiting the mass market to avoid constructing what can be bought.&lt;/li&gt;
&lt;li&gt;Using rapid prototyping as part of a planned iteration in establishing software requirements.&lt;/li&gt;
&lt;li&gt;Growing software organically, adding more and more function to systems as they are run, used, and tested.&lt;/li&gt;
&lt;li&gt;Identifying and developing the great conceptual designers of the rising generation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;In 1987 Brooks considered that most of the accidental complexity was resolved and we need to address essential complexity. But is this the case now?&lt;/p&gt;

&lt;p&gt;At the same time (in 1980) Hal Abelson and Gerald Jay Sussman started a course at MIT (&lt;a href="https://stereobooster.com/posts/legendary-mit-6.001/"&gt;6.001&lt;/a&gt;). Later, in 1985, based on this course they wrote a book - Structure and Interpretation of Computer Programs aka SICP aka wizard book.&lt;/p&gt;

&lt;p&gt;In 1997 the course was discontinued and here is what Sussman said about it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sussman said that in the 80s and 90s, &lt;strong&gt;engineers built complex systems by combining simple and well-understood parts&lt;/strong&gt;. The goal of SICP was to provide the abstraction language for reasoning about such systems. Today, this is no longer the case. — &lt;a href="https://web.archive.org/web/20160504164044/http://www.posteriorscience.net/?p=206"&gt;Why MIT stopped teaching SICP&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So what happened in the period from 1980 to 1997 that changed the picture?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sussman pointed out that engineers now routinely write code for complicated hardware that they don’t fully understand (and often can’t understand because of &lt;strong&gt;trade secrecy&lt;/strong&gt;.) The same is true at the software level, since programming environments consist of gigantic libraries with enormous functionality. According to Sussman, his students spend most of their time reading manuals for these libraries to figure out how to stitch them together to get a job done. He said that programming today is “More like science. You grab this piece of library and you poke at it. You write programs that poke it and see what it does. And you say, ‘Can I tweak it to do the thing I want?'”. The “analysis-by-synthesis” view of SICP — where you build a larger system out of smaller, simple parts — became irrelevant. Nowadays, we do programming by poking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I see two problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we started to solve more complex problems that require more complex software and hardware (essential complexity)&lt;/li&gt;
&lt;li&gt;we need to work with software and hardware for which we don’t have source code, so we can rely on documentation (which can be incomplete and imprecise) or on reverse engineering closed systems, what Sussman called “poking”. (accidental complexity)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I want to focus on the second part. We constantly have to deal with closed source systems today, even though we have more open-source software (and hardware) than they hand in the 80s.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-story-aws-api-gateway" class="anchor"&gt;
  &lt;/a&gt;
  My story - AWS API Gateway
&lt;/h2&gt;

&lt;p&gt;This is just a small story - to illustrate what I’m talking about.&lt;/p&gt;

&lt;p&gt;Fast forward to the 2020s. Let’s say I need to implement an endpoint to download the CSV file. If I would use Rails for it, I can easily finish the task in half of a day.&lt;/p&gt;

&lt;p&gt;I searched internet on how to stream CSV file, here are key points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;headers["Content-Disposition"] = "attachment; filename=...&lt;/code&gt;,&lt;code&gt;headers["X-Accel-Buffering"] = "no"&lt;/code&gt;, &lt;code&gt;headers.delete("Content-Length")&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;Enumerator&lt;/code&gt; and &lt;code&gt;self.response_body = ...&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;find_each&lt;/code&gt;, which will perform queries to the database in batches&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the task is done. An endpoint can stream big CSV files. &lt;strong&gt;But…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I also need to deploy this endpoint behind AWS API Gateway:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It means that I need to provide authorization with “Authenticating Requests (AWS Signature Version 4)”. Ok. But if I will provide Authorisation through header it means that I can’t use the link directly (&lt;code&gt;&amp;lt;a href="..."&amp;gt;&lt;/code&gt;) I need to use JS to provide headers.

&lt;ul&gt;
&lt;li&gt;Or maybe I can use query params? I found official documentation which says &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"&gt;it is possible to pass params through query params&lt;/a&gt;, but this article is about S3 not about API Gateway&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;It also means that I need to configure AWS API Gateway to pass through CSV response. Most of the documentation of Gateway talks about JSON (and XML). CSV never mentioned. Can I do it? I have no idea. The only documentation which seems to be related is &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-content-encodings-examples-image-lambda.html"&gt;this one&lt;/a&gt;. And it doesn’t explain much I need to experiment to see if it works.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AWS documentation is bad, but this is because documentations of any big system is bad. The problem here is that if it would be opensource I could at least read the source code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-irony" class="anchor"&gt;
  &lt;/a&gt;
  The Irony
&lt;/h3&gt;

&lt;p&gt;Recently ElasticSearch changed its license in an attempt to pushback against AWS (&lt;a href="https://www.elastic.co/blog/why-license-change-AWS"&gt;read here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In response, AWS decided to fork ElasticSearch. And the title of the article where they said it is &lt;a href="https://aws.amazon.com/blogs/opensource/stepping-up-for-a-truly-open-source-elasticsearch/"&gt;“Stepping up for a truly open source Elasticsearch”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;AWS, while you at it, maybe you will opensource API Gateway as well? So I could read the source code instead of poking. So I could run it locally instead of waiting for deployments for 15 minutes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps" class="anchor"&gt;
  &lt;/a&gt;
  PS
&lt;/h2&gt;

&lt;p&gt;This is just one story. I’m sure you have a lot of the same stories. Why do we do it to ourselves? Sigh.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>opensource</category>
      <category>watercooler</category>
      <category>ruby</category>
    </item>
    <item>
      <title>How to Build a Skeleton Layout in React</title>
      <author>Kyle Luke</author>
      <pubDate>Wed, 27 Jan 2021 03:16:18 +0000</pubDate>
      <link>https://dev.to/lukekyl/how-to-build-a-skeleton-layout-in-react-21hb</link>
      <guid>https://dev.to/lukekyl/how-to-build-a-skeleton-layout-in-react-21hb</guid>
      <description>&lt;p&gt;The use of a Skeleton Layout for asynchronous content is becoming more and more popular across mobile and web apps alike. Google, Facebook, LinkedIn, Youtube and many more use a skeleton layout to display what the content and layout might look like, before it loads. Using one in your own project is a nice styling effect for your users, and also might just improve the SEO of your project in the near future by reducing "&lt;a href="https://dev.to/ben/fixing-cumulative-layout-shift-41ja"&gt;cumulative layout shift&lt;/a&gt;". This post shows you how easy it is to add a skeleton layout that updates after asynchronous content is loaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RKvEPLBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2As7uxK77a0FY43NLe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RKvEPLBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2As7uxK77a0FY43NLe.png" alt="LinkedIn Skeleton Layout Example from: https://uxdesign.cc/what-you-should-know-about-skeleton-screens-a820c45a571a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#isloaded-state" class="anchor"&gt;
  &lt;/a&gt;
  isLoaded State
&lt;/h3&gt;

&lt;p&gt;React allows for us to set state from &lt;code&gt;isLoaded: false&lt;/code&gt; to &lt;code&gt;isLoaded: true&lt;/code&gt; when an asynchronous function has completed. This will be the basis for which set of content we will display. We will create two CSS classes for our content based on the isLoaded state: &lt;code&gt;.loading&lt;/code&gt; and &lt;code&gt;.loaded&lt;/code&gt;. We will then do an if statement that will return the JSX for the &lt;code&gt;.loaded&lt;/code&gt; content, IF &lt;code&gt;isLoaded = true&lt;/code&gt;. If &lt;code&gt;isLoaded = false&lt;/code&gt;, the app will return the JSX for the &lt;code&gt;.loading&lt;/code&gt; content, which will be out skeleton layout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// JSX
class App extends React.Component {
  constructor(props){
    super(props);

    this.state = {
      isLoaded: false,
      asyncData: []
    }
  };

render(){

    asyncFunction = () =&amp;gt; {
        // Async function fetches asyncData, and upon fetch updates state from `isLoaded:false` to `isLoaded:true`
    }

    if(this.state.isLoaded===true){
        // If state.isLoaded=true, component will render complete layout and async content
          return(
            &amp;lt;&amp;gt;
              &amp;lt;LayoutContent className="loaded" /&amp;gt;
            &amp;lt;/&amp;gt;
          );
        } 

    return(
      // While state.isLoaded=false, component will only render skeleton layout
        &amp;lt;&amp;gt;
            &amp;lt;LayoutContent className="loading" /&amp;gt;
        &amp;lt;/&amp;gt;
    );
};
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css" class="anchor"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;

&lt;p&gt;The CSS we need to style will include our two classes: &lt;code&gt;.loading&lt;/code&gt; and &lt;code&gt;.loaded&lt;/code&gt;. This gives you a little freedom for how you would like your skeleton layout to look, but I chose an &lt;a href="https://dev.to/stackfindover/youtube-loading-animation-using-html-and-css-44c2"&gt;animated approach from StackFindOver&lt;/a&gt; for the styling for the CodePen example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Skeleton Layout styles and animation
.loading {
    position: relative;
    background: #cccccc;
}
.loading:after {
    content: "";
    display: block;
    position: absolute;
    top:0;
    width: 100%;
    height: 100%;
    transform: translateX(-100px);
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    animation: loading 0.8s infinite;
}
@keyframes loading {
    100% {
        transform: translateX(100%);
    }
}

// Loaded styling
.loaded {
    // Styles
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Some additional things to note when it comes to CSS styling:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Width and Height of components should be defined to reduce content jumping&lt;/li&gt;
&lt;li&gt;Consider using CSS Flexbox for responsive components with max-width/height defined&lt;/li&gt;
&lt;li&gt;If component sizes vary based on content consider adding an "overflow-y: scroll" property&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example-application" class="anchor"&gt;
  &lt;/a&gt;
  Example Application
&lt;/h3&gt;

&lt;p&gt;Feel free to steal some of the code from this &lt;a href="https://codepen.io/lukekyl/pen/NWRZZoW"&gt;CodePen example&lt;/a&gt;, but note you will likely need to adjust some of the styling to fit your own application. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lukekyl/embed/NWRZZoW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Skeleton layouts not only give your application a fun and useful loading screen as asynchronous content loads, but also might just improve you application's SEO and user experience. Hopefully this blog post and the example gives you some ideas on how to apply a skeleton layout in your own project!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have you used a Skeleton Layout in your project?&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Comment if you have used a similar method, or have suggestions for improvements!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>css</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>PHP Cheatsheet for Rubyists</title>
      <author>Liz Laffitte</author>
      <pubDate>Wed, 27 Jan 2021 03:11:40 +0000</pubDate>
      <link>https://dev.to/lizlaffitte/php-cheatsheet-for-rubyists-198p</link>
      <guid>https://dev.to/lizlaffitte/php-cheatsheet-for-rubyists-198p</guid>
      <description>&lt;p&gt;This is a quick cheatsheet for every Rubyist struggling to remember PHP syntax.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variables" class="anchor"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;br&gt;
Variable names can begin with an alphanumeric character or an underscore, but not a number. Local variables don't require any keywords. Variables are case sensitive (name and Name are two different variables). Conventionally, variables begin with a lowercase letter, and snakecase is used for multi-word variable names. You must assign a value to a variable when it is initialized, even if that value is 0, an empty string, or nil.&lt;/p&gt;

&lt;p&gt;Instance variables are initialized with the @ symbol, class variables with two @@, and global variables with a $.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "Ginny"
Name = "Jennifer" 
p name # "Ginny"
p Name # "Jennifer"
your_name = "Ted"
_energy = nil
@@name = "Liz"
$tater = "Tot"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PHP&lt;/strong&gt;&lt;br&gt;
PHP variables &lt;strong&gt;always&lt;/strong&gt; start with a dollar sign ($) and all variable declarations (all lines in PHP actually) must end with a semicolon (;).  Other than that, PHP and Ruby variables have very similar rules. Variables names can start only with an alphanumeric character or an underscore, never a number. Variables are case sensitive.&lt;/p&gt;

&lt;p&gt;However, you can declare a PHP variable without assigning it a value. Also, multi-word variables names can be camel- or snakecase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php
$tatertots;
$name = "Liz";
$hours_of_sleep = 0;
$tatertots = 3;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comments" class="anchor"&gt;
  &lt;/a&gt;
  Comments
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;br&gt;
Single line comments begin with a hash.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p "Pay attention to this." #ignore this
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Multiline comments begin with &lt;code&gt;=begin&lt;/code&gt; and end with &lt;code&gt;=end&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p "Print this."
=begin
Don't print this.
Also, don't look at this.
It's not pretty enough to be part of Ruby.
=end
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's very common to see hashes across multiple lines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p "This is common"
#Even though
#they are
#for single lines
#technically
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PHP&lt;/strong&gt;&lt;br&gt;
Single line comments start with two forward slashes ( // ). Multi-line PHP comments start with a forward slash and a star (/&lt;em&gt;) and end with a star and a forward slash (&lt;/em&gt;/), similar to multiline CSS comments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php
echo "This will print to the screen." //But this will be ignored.
/*
This will also be ignored
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arrays" class="anchor"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;br&gt;
There are two ways to create an array in Ruby:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my_array = Array.new
your_array = [1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PHP&lt;/strong&gt;&lt;br&gt;
There is a grand total of one way to create an array in PHP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php
$this_array = array(1, 2, 3);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>php</category>
      <category>cheatsheet</category>
      <category>ruby</category>
      <category>syntax</category>
    </item>
  </channel>
</rss>
