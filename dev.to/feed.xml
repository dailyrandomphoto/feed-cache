<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Free Social Networking Websites Design
</title>
      <author>Moinul_h</author>
      <pubDate>Tue, 12 Oct 2021 11:10:04 +0000</pubDate>
      <link>https://dev.to/gphmoinul/free-social-networking-websites-design-4k39</link>
      <guid>https://dev.to/gphmoinul/free-social-networking-websites-design-4k39</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A1FbU68x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wj8hj2m9hhd20d35ydt6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A1FbU68x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wj8hj2m9hhd20d35ydt6.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi Designers! Social Networking Websites Design is a page with form tied together for your social media brand.  Here we will be posting updates and important news for this network so stay tuned in. For now, you can register on this page for updates when they become available or you can visit one of the many pages in our Social Networking Websites Design which you can find at the bottom of every page on the website.&lt;/p&gt;

&lt;p&gt;You will get it with 3 types of files to customize, these are Figma, Sketch, and Adobe XD.&lt;/p&gt;

&lt;p&gt;A proven way to get more people to click on your website in the SERPs is to have a title that evokes strong emotions. Notice that we didn’t say kind of emotions, just strong emotions. That is, it doesn’t matter what kind of emotions are evoked as long as the emotions are strong enough.&lt;/p&gt;

&lt;p&gt;This Free Social Networking Websites Design, web app design available file Figma, Sketch, Adobe XD&lt;/p&gt;

&lt;p&gt;Download up to fourteen thousand web templates, mobile app templates, illustrations, 3d illustrations, SVG icons, and graphic assets for Figma, Sketch, and Adobe XD. from UIHUT.&lt;/p&gt;

&lt;p&gt;UIHUT is a design resources platform for UX/UI designers, developers, and founders. Our high-quality design resources will help you to speed up the design process. Resources:&lt;/p&gt;

&lt;p&gt;1000+ Web Templates (Figma, Sketch, XD)&lt;br&gt;
 2500+ Illustrations (Figma, Sketch, XD)&lt;br&gt;
8000+ SVG Icons&lt;br&gt;
500+ Mobile App Screens (Figma, Sketch, XD)&lt;br&gt;
 100+ UI Assets for Web Application (Figma, Sketch, XD)&lt;br&gt;
After all, you can go to UIHUT use this coupon code ‘moy10’ to get a 10% extra off for a lifetime deal.&lt;/p&gt;

&lt;p&gt;We are uploading more resources every day.&lt;/p&gt;

</description>
      <category>socialnetworking</category>
      <category>freeuidesign</category>
      <category>uiuxdesign</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Day 4 of 100 Days of Code &amp; Scrum: Sleep Deprived Coding </title>
      <author>Rammina</author>
      <pubDate>Tue, 12 Oct 2021 11:07:40 +0000</pubDate>
      <link>https://dev.to/rammina/day-4-of-100-days-of-code-scrum-sleep-deprived-coding-13ni</link>
      <guid>https://dev.to/rammina/day-4-of-100-days-of-code-scrum-sleep-deprived-coding-13ni</guid>
      <description>&lt;p&gt;Good morning, everyone!&lt;/p&gt;

&lt;p&gt;Today, it could be pretty challenging to keep up with the 100 days of code challenge because of impediments. Not only am I sleep-deprived, I also have to go out for five hours for my weekly physical therapy session, as well as buy some groceries.&lt;/p&gt;

&lt;p&gt;However, I will do my best to commit to my plans!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bbCEH4Bu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ourf85t0b8untcu5neok.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bbCEH4Bu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ourf85t0b8untcu5neok.jpg" alt="Rambo Thumbsup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I began to finally understand &lt;code&gt;ApolloProvider&lt;/code&gt;, &lt;code&gt;ApolloClient&lt;/code&gt;, &lt;code&gt;createHttpLink&lt;/code&gt;, and &lt;code&gt;InMemoryCache&lt;/code&gt;. I also practiced &lt;code&gt;useQuery&lt;/code&gt; and &lt;code&gt;useMutation&lt;/code&gt;, but I couldn't understand them yet.&lt;/p&gt;

&lt;p&gt;Let's see if I can grasp these concepts today...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Pretty rough day and I got distracted a lot, but I managed to commit anyway!&lt;/p&gt;

&lt;p&gt;Here are some of the things I've learned:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphql"&gt;
  &lt;/a&gt;
  GraphQL
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I prefer making a &lt;code&gt;graphql&lt;/code&gt; folder to separate the definitions, it also makes my files cleaner and organized&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useQuery&lt;/code&gt; - used to retrieve data from the server. it takes in a query document and returns &lt;code&gt;loading&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;data&lt;/code&gt; - typically is what the frontend developer is concerned, which contains the data retrieved from the server&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;error&lt;/code&gt; - if ever the request fails, it will contain information about what went wrong&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;loading&lt;/code&gt; - indicates whether the request is ongoing if it's &lt;code&gt;true&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useMutation&lt;/code&gt; - used to change data in the server, it takes in a mutation document and &lt;code&gt;options&lt;/code&gt; object as the second parameter which contains properties such as &lt;code&gt;variables&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;p&gt;The Scrum Master serves the Product Owner in several ways, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ensuring that goals, scope, and product domain are understood by everyone on the Scrum Team as well as possible&lt;/li&gt;
&lt;li&gt;Finding techniques for effective Product Backlog management&lt;/li&gt;
&lt;li&gt;Helping the Scrum Team understand the need for clear and concise Product Backlog items&lt;/li&gt;
&lt;li&gt;Understanding product planning in an empirical environment&lt;/li&gt;
&lt;li&gt;Ensuring the Product Owner knows how to arrange the Product Backlog to maximize value&lt;/li&gt;
&lt;li&gt;Understanding and practicing agile practices&lt;/li&gt;
&lt;li&gt;Facilitating Scrum events as requested or needed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RjAQAZUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mfjcc488fqhyg1quysy3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RjAQAZUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mfjcc488fqhyg1quysy3.png" alt="Sleep More Code More"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How is everyone doing in their learning journey? Feel free to chat with me in the comments and/via DM!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>100daysofcode</category>
      <category>graphql</category>
    </item>
    <item>
      <title>[Golang] Sorting String In Alphabetical Order</title>
      <author>kuldeep_singh</author>
      <pubDate>Tue, 12 Oct 2021 10:54:48 +0000</pubDate>
      <link>https://dev.to/mavensingh/golang-sorting-string-in-alphabetical-order-147b</link>
      <guid>https://dev.to/mavensingh/golang-sorting-string-in-alphabetical-order-147b</guid>
      <description>&lt;p&gt;In this article we are going to learn about how we can sort strings in golang the order we are going to implement is ascending order. If you are not familiar what ascending and descending order is let me explain you about it or if you knows then you can skip that part.&lt;/p&gt;

&lt;p&gt;What is Ascending Order?&lt;br&gt;
Ascending order is a method of arranging numbers from smallest value to largest value. The order goes from left to right. Ascending order is also sometimes named as increasing order. For example, a set of natural numbers are in ascending order, such as 1, 2, 3, 4, 5, 6, 7, 8… and same for the alphabets as well. The inverse method of increasing order is descending order, where the numbers are arranged in decreasing order of values.&lt;/p&gt;

&lt;p&gt;What is Descending Order? &lt;/p&gt;

&lt;p&gt;If the information is sorted from highest to lowest, it is said to be in descending order. For example 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 are arranged in descending order. In other words, if the numbers are arranged from the largest to the smallest number, it is said to be in descending order.&lt;/p&gt;

&lt;p&gt;In simple words, descending order is defined as an arrangement in the highest to lowest format. These concepts are related to decimals, numbers, fractions or amount of money.&lt;/p&gt;

&lt;p&gt;Example of Descending Order&lt;/p&gt;

&lt;p&gt;24, 20, 18, 12, 7 are arranged in descending order.&lt;/p&gt;

&lt;p&gt;This is also known as decreasing order of numbers.&lt;/p&gt;

&lt;p&gt;So now we knows what is ascending and descending order then let's move forward main part which is runes.&lt;/p&gt;

&lt;p&gt;What is Rune in Golang?&lt;br&gt;
Rune literals are just 32-bit integer values (however they're untyped constants, so their type can change). They represent unicode codepoints. For example, the rune literal 'a' is actually the number 97.&lt;/p&gt;

&lt;p&gt;We have covered all reading part which was important while we were going to code, So let's start writing code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func alphasort(str []rune, depth int) {
    for x := range str {
        y := x + 1
        for y = range str {
            if str[x] &amp;lt; str[y] {
                str[x], str[y] = str[y], str[x]
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checkout Here for more methods on bubble sort implementation:&lt;br&gt;
&lt;a href="https://kdsingh4.blogspot.com/2021/10/golang-sort-string-in-alphabetical-order.html"&gt;https://kdsingh4.blogspot.com/2021/10/golang-sort-string-in-alphabetical-order.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checkout More Algorithms Solutions: &lt;a href="https://kdsingh4.blogspot.com/search/label/algorithm?&amp;amp;max-results=5/feed/"&gt;https://kdsingh4.blogspot.com/search/label/algorithm?&amp;amp;max-results=5/feed/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't Forget To Subscribe My Youtube Channel as well:&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UCXhmNqWQ50zitqIdTgS7s8Q"&gt;https://www.youtube.com/channel/UCXhmNqWQ50zitqIdTgS7s8Q&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>SolidJS vs React: I've Built the Same App On Both Libraries.
</title>
      <author>Oğuzhan Olguncu</author>
      <pubDate>Tue, 12 Oct 2021 10:44:14 +0000</pubDate>
      <link>https://dev.to/ogzhanolguncu/solidjs-vs-react-i-ve-built-the-same-app-on-both-libraries-4cfa</link>
      <guid>https://dev.to/ogzhanolguncu/solidjs-vs-react-i-ve-built-the-same-app-on-both-libraries-4cfa</guid>
      <description>&lt;p&gt;&lt;strong&gt;SolidJS&lt;/strong&gt; has gained lots of popularity lately due to having a close relationship with React. It has a declarative nature like React, useState and useEffect like hooks, JSX, ContextAPI, Portals, Error Boundaries. And it gets even better; Solid is much faster in terms of execution and has a lot smaller bundle size. Because it does not carry the burden of Virtual DOM, which means SolidJS uses real DOM instead. When your state changes, SolidJS updates only the code that depends on it.&lt;/p&gt;

&lt;p&gt;I built the same app with minimal dependencies, &lt;strong&gt;Axios&lt;/strong&gt; for fetch requests and &lt;strong&gt;TailwindCSS&lt;/strong&gt; for styling. Thanks to core API similarities in both libraries. Before creating this app, I haven't yet had a chance to try Solid. So, I built the app as if I'm using React. Beware, this article does not aim to teach React, or Solid only tries to point out the differences and similarities in both libraries. Let's get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchEpisodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;optionalUrl&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EpisodeResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(optionalUrl ?? 'https://rickandmortyapi.com/api/episode');

const App: FC = () =&amp;gt; &lt;span class="si"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;episodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEpisodes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;EpisodeResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inView&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useInView&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;triggerOnce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchMoreEpisodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Fetching episodes with axios&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inView&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;fetchMoreEpisodes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fetchMoreEpisodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inView&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetchEpisodes&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setEpisodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex justify-center items-center flex-col p-10"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;" font-medium text-4xl my-5"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Rick and Morty&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1000px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;episodes&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EpisodeWrapper&lt;/span&gt;
            &lt;span class="na"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;viewRef&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;episodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;;

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solid"&gt;
  &lt;/a&gt;
  Solid
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchEpisodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;optionalUrl&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EpisodeResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(optionalUrl ?? 'https://rickandmortyapi.com/api/episode');

const App: Component = () =&amp;gt; &lt;span class="si"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;episodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEpisodes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;EpisodeResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchMoreImages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Fetching episodes with axios&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleScroll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fetchMoreImages&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleScroll&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setEpisodes&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchEpisodes&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;onCleanup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleScroll&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex justify-center items-center flex-col p-10"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;" font-medium text-4xl my-5"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Rick and Morty&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1000px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;For&lt;/span&gt; &lt;span class="na"&gt;each&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;episodes&lt;/span&gt;&lt;span class="p"&gt;()?.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EpisodeWrapper&lt;/span&gt; &lt;span class="na"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;For&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;;

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apart from some syntactic differences they are pretty much the same. In Solid we use &lt;strong&gt;useSignal&lt;/strong&gt; hook instead of &lt;strong&gt;useState&lt;/strong&gt; hook. Only difference between these hooks, in &lt;strong&gt;useState&lt;/strong&gt; we can directly call the &lt;code&gt;episodes&lt;/code&gt;, but in &lt;strong&gt;useSignal&lt;/strong&gt; we have to invoke it just like a function, because it's a function. If we are using Typescript we can give generic type to our signal just like we do in React.&lt;/p&gt;

&lt;p&gt;In React we call our API's in &lt;code&gt;useEffect&lt;/code&gt; to supply inital data for states. But, in Solid we can either call lifecycle method called &lt;code&gt;onMount&lt;/code&gt; or you can ditch, &lt;code&gt;onMount&lt;/code&gt; and use &lt;code&gt;createResource&lt;/code&gt; &lt;a href="https://www.solidjs.com/examples/asyncresource"&gt;hook&lt;/a&gt;. This hook works like a custom fetch — useFetch — takes a function and returns a promise, loading and error status. But, for the sake of ease&lt;br&gt;
I'll go with &lt;code&gt;onMount&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To handle side-effects in Solid we have a hook called &lt;code&gt;createEffect&lt;/code&gt; this particular hook quite similar to &lt;code&gt;useEffect&lt;/code&gt; but it has some quirks. Instead of taking dependencies manually&lt;br&gt;
it automatically binds itself to state inside that causes changes. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// Logs count every time it changes&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Going back to our original example. So, we want to run &lt;code&gt;handleScroll&lt;/code&gt; each time person scrolls. We create &lt;code&gt;createEffect&lt;/code&gt; and call our event listener. That's it. For the return part, in React we generally use map to iterate over the state, but it Solid we have a built in option called &lt;code&gt;For&lt;/code&gt;. It's actually a component which receives &lt;code&gt;each&lt;/code&gt; in our case it's &lt;code&gt;episodes&lt;/code&gt; state and &lt;code&gt;fallback&lt;/code&gt; option to show loading or anything you want. And, good part is you don't have to deal with keys in Solid it automatically handles it for you.&lt;/p&gt;

&lt;p&gt;By the way, you can pass props just like you pass props in React everything is the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benchmarks"&gt;
  &lt;/a&gt;
  Benchmarks
&lt;/h2&gt;

&lt;p&gt;Benchmarks criteria will be performance profiling in Chrome Dev Tools and final bundle sizes. Let's start with Performance profiling. The performance tab shows an overall breakdown of CPU activity into four categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loading: Making network requests and parsing HTML&lt;/li&gt;
&lt;li&gt;Scripting: Parsing, compiling, and running JavaScript code, also includes Garbage Collection (GC)&lt;/li&gt;
&lt;li&gt;Rendering: Style and layout calculations&lt;/li&gt;
&lt;li&gt;Painting: Painting, compositing, resizing and decoding images&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NMEKz3j1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61qa2v3sn1ip8pa5v10s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NMEKz3j1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61qa2v3sn1ip8pa5v10s.jpg" alt="benchmark-react-solid"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The left side is React, and the right is Solid. As you can see Scripting part is almost 3x faster, Rendering almost 2x faster, Painting part is abnormally faster.&lt;/p&gt;

&lt;p&gt;If we went down a level deep on the scripting part, we see why.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3FRIj7sV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ru0epuqjc6i1e8z263xb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3FRIj7sV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ru0epuqjc6i1e8z263xb.PNG" alt="rect-performnce"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solid"&gt;
  &lt;/a&gt;
  Solid
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M6epYgum--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdg2w4pjvht6k1m07svp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6epYgum--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdg2w4pjvht6k1m07svp.PNG" alt="solid-performnce"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React first makes a Function Call which evaluates and commits VDOM into DOM, then makes the XHR calls. Since Solid does not have to deal with VDOM to DOM, it skips that part and starts requests right away. By the way, if you are wondering about what Functional Call and XHR Load, means you can check this site &lt;a href="https://developer.chrome.com/docs/devtools/evaluate-performance/performance-reference/"&gt;Event References&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bundle sizes of apps:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Va7rS8GR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1bvgbdcpvdno8pipxrc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Va7rS8GR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1bvgbdcpvdno8pipxrc.PNG" alt="rect-bundle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solid"&gt;
  &lt;/a&gt;
  Solid
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HNTbStT1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is2jh8mpn03d7yfhaf7j.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HNTbStT1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is2jh8mpn03d7yfhaf7j.PNG" alt="solid-bundle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;SolidJS definitely doing some things or maybe most of the things better than React, but in my humble opinion, the biggest problem for Solid is the ecosystem. React has an enourmous ecosystem it has components, hooks, patterns for everything. Think something and try serching that thing in npm, and I bet you will find something regarding your needs. Right now Solid's selling point is being fast. In benchmarks it says&lt;br&gt;
it is quite close to vanilla JS.&lt;/p&gt;

&lt;p&gt;It is close to vanilla JS, but we are missing the key thing here. People are not going with React because it is fast, and people even know it isn't. They are going with React because of the massive community and tooling ecosystem around it. But I believe that SolidJS has a bright future and, as the community gets bigger and bigger, it'll be even better.&lt;/p&gt;

</description>
      <category>solidjs</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Menggunakan Flash Message Untuk Notifikasi Dengan Codeigniter 4</title>
      <author>MedanInCode</author>
      <pubDate>Tue, 12 Oct 2021 10:18:22 +0000</pubDate>
      <link>https://dev.to/medanincode/menggunakan-flash-message-untuk-notifikasi-dengan-codeigniter-4-4afd</link>
      <guid>https://dev.to/medanincode/menggunakan-flash-message-untuk-notifikasi-dengan-codeigniter-4-4afd</guid>
      <description>&lt;p&gt;Pada tutorial kali ini akan membahas penggunakan Flash Message pada Codeigniter 4.&lt;strong&gt;Flash Message&lt;/strong&gt; sendiri digunakan untuk memberikan feedback berupa informasi success,warning,error,info dll.&lt;/p&gt;

&lt;p&gt;Di tutorial ini akan digunakan framework bootstrap 4 untuk menampilkan hasil &lt;strong&gt;Flash Message&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#membuat-flash-message"&gt;
  &lt;/a&gt;
  Membuat Flash Message
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#membuat-view"&gt;
  &lt;/a&gt;
  Membuat View
&lt;/h5&gt;

&lt;p&gt;Pertama buat file view &lt;strong&gt;index.php&lt;/strong&gt; di folder &lt;strong&gt;app\Views&lt;/strong&gt;.Lalu isikan dengan kode dibawah ini.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Styles --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Flash Message&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getFlashData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alert alert-success alert-dismissible fade show"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;&amp;lt;?=&lt;/span&gt; &lt;span class="nf"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getFlashData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close"&lt;/span&gt; &lt;span class="na"&gt;data-dismiss=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;times;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;

    &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getFlashData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'danger'&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alert alert-danger alert-dismissible fade show"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;&amp;lt;?=&lt;/span&gt; &lt;span class="nf"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getFlashData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'danger'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close"&lt;/span&gt; &lt;span class="na"&gt;data-dismiss=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;times;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;

    &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getFlashData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'info'&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alert alert-info alert-dismissible fade show"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;&amp;lt;?=&lt;/span&gt; &lt;span class="nf"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getFlashData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'info'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close"&lt;/span&gt; &lt;span class="na"&gt;data-dismiss=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;times;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?=&lt;/span&gt; &lt;span class="nf"&gt;base_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'setpesan/success'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-success"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Kirim Pesan Success&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?=&lt;/span&gt; &lt;span class="nf"&gt;base_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'setpesan/info'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-info"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Kirim Pesan Info&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?=&lt;/span&gt; &lt;span class="nf"&gt;base_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'setpesan/danger'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-danger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Kirim Pesan Danger&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"table table-striped mt-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Nama&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Umur&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Budi&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;12&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Scripts --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pada kode diatas bisa dilihat untuk kita perlu mengcheck terlebih dahulu apakah &lt;strong&gt;Flash Message&lt;/strong&gt; ada &lt;strong&gt;if(session()-&amp;gt;getFlashData('info'))&lt;/strong&gt; ,jika ada kita cetak &lt;strong&gt;session()-&amp;gt;getFlashData('info')&lt;/strong&gt;, &lt;strong&gt;info&lt;/strong&gt; itu merupakan nama yang kita set dari controller.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#membuat-router"&gt;
  &lt;/a&gt;
  Membuat Router
&lt;/h5&gt;

&lt;p&gt;Ubah file &lt;strong&gt;Router.php&lt;/strong&gt; di &lt;strong&gt;app\Config&lt;/strong&gt; tambahkan kode dibawah&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$routes&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Home::index'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$routes&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/setpesan/(:alpha)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'Home::setPesan/$1'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;highlight&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="nc"&gt;Kita&lt;/span&gt; &lt;span class="n"&gt;menambahkan&lt;/span&gt; &lt;span class="n"&gt;dua&lt;/span&gt; &lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="n"&gt;satu&lt;/span&gt; &lt;span class="n"&gt;untuk&lt;/span&gt; &lt;span class="n"&gt;halaman&lt;/span&gt; &lt;span class="n"&gt;awal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;satu&lt;/span&gt; &lt;span class="n"&gt;lagi&lt;/span&gt; &lt;span class="n"&gt;untuk&lt;/span&gt; &lt;span class="n"&gt;setpesan&lt;/span&gt; &lt;span class="n"&gt;dengan&lt;/span&gt; &lt;span class="n"&gt;parameter&lt;/span&gt; &lt;span class="n"&gt;tipe&lt;/span&gt; &lt;span class="n"&gt;pesan&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;

&lt;span class="c1"&gt;##### Merubah Controller&lt;/span&gt;

&lt;span class="nc"&gt;Kita&lt;/span&gt; &lt;span class="n"&gt;akan&lt;/span&gt; &lt;span class="n"&gt;menggunakan&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="n"&gt;bawaan&lt;/span&gt; &lt;span class="n"&gt;yang&lt;/span&gt; &lt;span class="n"&gt;sudah&lt;/span&gt; &lt;span class="n"&gt;ada&lt;/span&gt; &lt;span class="n"&gt;saat&lt;/span&gt; &lt;span class="n"&gt;mendowload&lt;/span&gt; &lt;span class="nc"&gt;Codeigniter&lt;/span&gt; &lt;span class="mf"&gt;4.&lt;/span&gt;&lt;span class="nc"&gt;Ubah&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nc"&gt;Home&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;di&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nc"&gt;app\Controllers&lt;/span&gt;&lt;span class="o"&gt;**.&lt;/span&gt;&lt;span class="nc"&gt;Lalu&lt;/span&gt; &lt;span class="n"&gt;isi&lt;/span&gt; &lt;span class="n"&gt;dengan&lt;/span&gt; &lt;span class="n"&gt;kode&lt;/span&gt; &lt;span class="n"&gt;dibawah&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;highlight&lt;/span&gt; &lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Home&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;BaseController&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;setPesan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$tipe&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;base_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$tipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Pesan '&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$tipe&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pada kode diatas fungsi &lt;strong&gt;setPesan&lt;/strong&gt; akan meredirect ke halaman awal dan membuat &lt;strong&gt;flash message&lt;/strong&gt; dengan nama seperti parameter &lt;strong&gt;$tipe&lt;/strong&gt; berisi &lt;strong&gt;Pesan&lt;/strong&gt;.Jika tidak ingin menggunakan &lt;strong&gt;with&lt;/strong&gt; bisa juga dengan &lt;strong&gt;setFlashData&lt;/strong&gt; seperti dibawah ini.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Home&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;BaseController&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;setPesan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$tipe&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nf"&gt;session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setFlashData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$tipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Pesan '&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$tipe&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;base_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/dashboard'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kemudian kita coba jalankan ,tekan salah satu link misalnya &lt;strong&gt;Kirim Pesan Success&lt;/strong&gt; jika sudah benar maka akan keluar hasil seperti dibawah ini.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3gh0x_LL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medanincode.com/img/tutorial/ci4/flash.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3gh0x_LL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medanincode.com/img/tutorial/ci4/flash.png" alt="Menggunakan Flash Message Untuk Notifikasi Dengan Codeigniter 4&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sekian tutorialnya,jika ada yang kurang mengerti silahkan bertanya.&lt;/p&gt;

</description>
      <category>codeigniter</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Creating Static Documentation For GraphQL APIs Using GraphQL SDL</title>
      <author>Roy Derks</author>
      <pubDate>Tue, 12 Oct 2021 09:53:57 +0000</pubDate>
      <link>https://dev.to/stepzen/creating-static-documentation-for-graphql-apis-using-graphql-sdl-njj</link>
      <guid>https://dev.to/stepzen/creating-static-documentation-for-graphql-apis-using-graphql-sdl-njj</guid>
      <description>&lt;p&gt;The main reason for writing API documentation is to make your API understandable to other developers that want to use it. GraphQL APIs often only have an interactive playground available that serves as a sandbox for the API and documentation. But working with GraphQL can be very confusing to developers that only worked with REST APIs in the past, making a playground-like GraphiQL hard to use. It makes perfect sense for developers new to GraphQL and non-technical people to add static documentation with references to interactive examples to your API. In the same way, as you can dynamically create documentation for REST APIs based on OpenAPI or Swagger specification, you can also generate documentation based on GraphQL SDL. In this post, you'll be learning how to do this using StepZen API templates and a library called SpectaQL.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: You can find the repository with the complete source code for this post &lt;a href="https://github.com/stepzen-samples/stepzen-spectaql-docs"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-graphql-api-with-stepzen"&gt;
  &lt;/a&gt;
  Setting up a GraphQL API with StepZen
&lt;/h2&gt;

&lt;p&gt;Before you can create documentation, you need to create a GraphQL API first. With StepZen, you can create GraphQL APIs within minutes by using any API Templates already available or designing a custom GraphQL schema. For this post, you'll be using the API Template for the &lt;a href="https://openweathermap.org/"&gt;OpenWeatherMap API&lt;/a&gt; that can provide us with weather reports for over 200,000 cities worldwide, based on addresses or coordinates.&lt;/p&gt;

&lt;p&gt;To set up a new GraphQL API with StepZen, you need to create an account first and follow the getting started steps &lt;a href="https://stepzen.com/docs/quick-start"&gt;here&lt;/a&gt;. After which, you need to create a new directory and move into that directory on your local machine first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir my-api &amp;amp;&amp;amp; cd my-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this directory, you can run the following command that will import the API Template for the OpenWeatherMap API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stepzen import openweathermap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CLI will then ask you to provide a name for the endpoint, the suggested name, or a custom one. For this post, you can name the endpoint: &lt;code&gt;api/weatherreport&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You don't need an API key to use the OpenWeatherMap API, so you can get started with exploring the API right away. After the import of the API Template has been completed, you can run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stepzen start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will create a GraphQL API based on the GraphQL SDL defined in &lt;code&gt;index.graphql&lt;/code&gt; and &lt;code&gt;weatherreport/weatherreport.graphql&lt;/code&gt; in your local directory. This GraphQL API will be available through a local proxy at &lt;a href="//weatherreport/weatherreport.graphql"&gt;weatherreport/weatherreport.graphql&lt;/a&gt; or directly from &lt;code&gt;https://{stepzen_username}.stepzen.net/api/weatherreport/__graphql&lt;/code&gt; (replace &lt;code&gt;{stepzen_username}&lt;/code&gt; with your own).&lt;/p&gt;

&lt;p&gt;Through GraphiQL, you can see one operation defined in the GraphQL schema, the &lt;code&gt;weatherReport&lt;/code&gt; query. This query requires you to provide coordinates, which are values for latitude and longitude. To get these values, you can use geocoding to transform any address into a combination of latitude and longitude, making it easy to highlight it on a map. There are several ways to get these values from the browser using a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API"&gt;Geolocation API&lt;/a&gt; or to use third-party APIs. The first one is the easiest when you're building a web application, so let's use the second option for now. One of the most popular third-party APIs for geocoding is the Google Maps API. With this API, you can request geocoding information based on an address, the White House in Washington D.C., and get the latitude longitude combination.&lt;/p&gt;

&lt;p&gt;You can use the APIs from Google Maps if you have requested an API Key, but you can also use it through the Maps JavaScript API, accessible from their &lt;a href="https://developers.google.com/maps/documentation/geocoding/overview#Geocoding"&gt;documentation&lt;/a&gt; directly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W1JhP8Cq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stepzen.com/images/blog/creating-static-documentation-map.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W1JhP8Cq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stepzen.com/images/blog/creating-static-documentation-map.png" alt="Google Maps API Geocoding"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the address &lt;code&gt;1600 Pennsylvania Avenue, Washington, D.C., USA&lt;/code&gt;, you receive the coordinates &lt;code&gt;38.897663&lt;/code&gt; and &lt;code&gt;-77.036574&lt;/code&gt;, the latitude-longitude combination.&lt;/p&gt;

&lt;p&gt;With these coordinates, you can check today's weather at the White House using the OpenWeatherAPI that we've made available through GraphQL with StepZen, using the following query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GetWeatherReport&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;weatherReport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;38.897663&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;-77.036574&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;feelsLike&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The response of this API will be returned on the second panel in our GraphiQL interface, as you can see in the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YWZ-DcLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stepzen.com/images/blog/creating-static-documentation-graphiql.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YWZ-DcLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stepzen.com/images/blog/creating-static-documentation-graphiql.jpg" alt="GraphiQL Playground for OpenWeatherMap API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find more information on the response by using the schema tab in GraphiQL on the right, which tells us the meaning of the variables. You now know that the response includes a description of the weather (like cloudy with a chance of sun), the temperature, and the temperature unit.&lt;/p&gt;

&lt;p&gt;But if you're not familiar with GraphQL or haven't created a query yourself before, this way of introspecting a GraphQL API can be very confusing. Therefore, having static documentation next to interactive documentation in a GraphiQL playground can be very helpful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-static-documentation"&gt;
  &lt;/a&gt;
  Creating static documentation
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://openweathermap.org/current"&gt;official documentation&lt;/a&gt; of OpenWeatherMap REST API is an excellent example of static documentation. It provides both text and code examples to get you started on using the API. For REST APIs the documentation is often generated from their API specification, defined in an Open API or Swagger format. GraphQL APIs don't have a specification in this format but instead rely on their schema. In the previous section, you used the GraphiQL playground, which uses an introspection query to get all the information from our GraphQL API using its schema. This introspection query can, however, also generate static documentation for this GraphQL schema.&lt;/p&gt;

&lt;p&gt;For this, we'll be using a library called &lt;a href="https://github.com/anvilco/spectaql"&gt;SpectaQL&lt;/a&gt;, which is based on the popular library Spectacle that works with Open API and Swagger specifications. SpectaQL can be installed globally on your machine from npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g spectaql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the installation is complete, you can configure SpectaQL using a &lt;code&gt;config.yaml&lt;/code&gt; file that you can place in the root of your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;spectaql&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;logoFile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./logo.svg&lt;/span&gt;

&lt;span class="na"&gt;introspection&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;{stepzen_api_endpoint}'&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;apikey&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{stepzen_api_key}'&lt;/span&gt;

&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;StepZen - OpenWeatherMap GraphQL API&lt;/span&gt;
  &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Access&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;current&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;weather&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;data&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;any&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;location&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;on&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Earth&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;including&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;over&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;200,000&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;cities.&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Using&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;GraphQL!&lt;/span&gt;


    &lt;span class="s"&gt;[View&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;GraphiQL&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;playground](http://localhost:5000/api/weatherreport)'&lt;/span&gt;
  &lt;span class="na"&gt;contact&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;StepZen Support&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://stepzen.com/docs&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;support@stepzen.com&lt;/span&gt;

&lt;span class="na"&gt;servers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;{stepzen_api_endpoint}'&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Production&lt;/span&gt;
    &lt;span class="na"&gt;production&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this file, we've configured that the GraphQL API is available at &lt;code&gt;{stepzen_api_endpoint},&lt;/code&gt; which you should replace with the endpoint to where the GraphQL instance of the OpenWeatherMap API is running. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This GraphQL API will be available through a local proxy at weatherreport/weatherreport.graphql or directly from https://{stepzen_username}.stepzen.net/api/weatherreport/__graphql (replace {stepzen_username} with your own).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You'll also need to define your StepZen API Key (&lt;code&gt;{stepzen_api_key}&lt;/code&gt;), which you can find on your &lt;a href="https://stepzen.com/account"&gt;account page&lt;/a&gt;, as this URL is only accessible with authentication for security reasons. Also, we've passed additional metadata like a logo, description, and contact details that will be added to the documentation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When you're running &lt;code&gt;stepzen start&lt;/code&gt; on your local machine, it will also make an instance of GraphiQL available at &lt;a href="http://localhost:5000/api/weatherreport"&gt;http://localhost:5000/api/weatherreport&lt;/a&gt;; this endpoint is only available on your local device. It shouldn't be used to access this GraphQL API unless to use GraphiQL.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should now be able to run SpectaQL to create the documentation, which could take up to 1 minute depending on your machine, with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx spectaql -D config.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;SpectaQL will create your documentation in a new directory called &lt;code&gt;public&lt;/code&gt; consisting of JavaScript, HTML, and CSS. The local path to a logo file that you defined in &lt;code&gt;config.yml&lt;/code&gt; will is used to copy the logo to this newly created directory. You can view the documentation by opening the file &lt;code&gt;public/index.html&lt;/code&gt; in a browser, which should look something like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RF9A-PV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stepzen.com/images/blog/creating-static-documentation-browser1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RF9A-PV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stepzen.com/images/blog/creating-static-documentation-browser1.jpg" alt="Static documentation with SpectaQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides the metadata you configured in &lt;code&gt;config.yml,&lt;/code&gt; this APIs GraphQL schema lists all the possible operations and types and is introspected to document them. There is no additional information available for the operations of return types yet, but you can directly add these in the GraphQL SDL. These descriptions in the schema will be parsed by SpectaQL and displayed in the static documentation. In the file &lt;code&gt;weatherreport/weatherreport.graphql&lt;/code&gt;, you can add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;A type that describes the weather report and its
fields&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WeatherReport&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;City&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;City&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Float&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;feelsLike&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Float&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;"""&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;weather&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;geographic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;coordinates&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;"""&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;weatherReport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;City&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;City&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;geo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WeatherReport&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;connector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;__openweathermap_weather_location_connector__&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;owm_default&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Descriptions for the type &lt;code&gt;WeatherReport&lt;/code&gt; and the &lt;code&gt;weatherReport&lt;/code&gt; query are added as multi-line descriptions, while the fields and arguments for these types are added in a single line. When these descriptions are included in the schema, they will also be available through an introspection query. This is important, as the introspection query adds the schema information to both the GraphiQL playground and the static documentation generator from SpectaQL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NvFFOHfU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stepzen.com/images/blog/creating-static-documentation-browser2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NvFFOHfU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stepzen.com/images/blog/creating-static-documentation-browser2.jpg" alt="Detailed descriptions using GraphQL SDL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or view the description directly from GraphiQL, which you can reach at the URL &lt;a href="http://localhost:5000/api/weatherreport"&gt;http://localhost:5000/api/weatherreport&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-and-next-steps"&gt;
  &lt;/a&gt;
  Conclusion and next steps
&lt;/h2&gt;

&lt;p&gt;Documentation for any GraphQL API starts with an introspection query, a simple but powerful way to explore any GraphQL API. The introspection query will give you information on the GraphQL schema and is used by other tools like GraphiQL and SpectaQL. With GraphiQL, you get access to a playground that lets you introspect the GraphQL schema and execute the available operations for a GraphQL endpoint. But having a playground like GraphiQL isn't sufficient if you want users of all levels to integrate with your GraphQL API. Therefore adding static documentation about your endpoint can be a good addition. With the open-source library SpectaQL, you can do all this with just a few lines of codes, making it almost as simple as building and deploying a GraphQL API with StepZen. Also, you can add descriptions for type, fields, arguments, and operations using just GraphQL SDL.&lt;/p&gt;

&lt;p&gt;What comes next? So far, you've learned how to create static documentation based on a GraphQL API locally, but the next step would be to integrate this into your CI/CD and deploy this documentation on a server. Combining with your CI/CD can be done by adding the command to run SpectaQL to your deployment steps. At the same time, StepZen can be &lt;a href="https://www.netlify.com/blog/2021/06/10/how-to-build-a-database-driven-jamstack-site/"&gt;integrated with Netlify&lt;/a&gt; to deploy the static documentation. You can find the repository with the complete source code for this post &lt;a href="https://github.com/stepzen-samples/stepzen-spectaql-docs"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Want to learn more about &lt;a href="https://stepzen.com/docs/quick-start"&gt;StepZen&lt;/a&gt;? Try it out here or ask any question on the Discord &lt;a href="https://discord.com/invite/9k2VdPn2FR"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>documentation</category>
      <category>javascript</category>
      <category>api</category>
    </item>
    <item>
      <title>Advanced Javascript Functions</title>
      <author>John Wanjema</author>
      <pubDate>Tue, 12 Oct 2021 09:49:26 +0000</pubDate>
      <link>https://dev.to/luxacademy/advanced-working-with-functions-d0b</link>
      <guid>https://dev.to/luxacademy/advanced-working-with-functions-d0b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-javascript-functions"&gt;
  &lt;/a&gt;
  What is a Javascript functions
&lt;/h2&gt;

&lt;p&gt;A function is a block of organized,reusable code that is used to perform a single,related action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-working-with-functions"&gt;
  &lt;/a&gt;
  Advanced Working with Functions
&lt;/h2&gt;

&lt;p&gt;Function basics include function declarations,passing parameters and function scope.&lt;br&gt;
check out this article that cover into to Javascript functions.&lt;br&gt;
&lt;a href="https://dev.to/luxacademy/javascript-functions-257f"&gt;Javascript Functions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article we are going to discuss the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The new function&lt;/li&gt;
&lt;li&gt;Immediately invoked functions&lt;/li&gt;
&lt;li&gt;closures&lt;/li&gt;
&lt;li&gt;Arrow functions&lt;/li&gt;
&lt;li&gt;This keyword&lt;/li&gt;
&lt;li&gt;The call method&lt;/li&gt;
&lt;li&gt;The apply method&lt;/li&gt;
&lt;li&gt;The bind method&lt;/li&gt;
&lt;li&gt;Default parameters&lt;/li&gt;
&lt;li&gt;Rest parameters&lt;/li&gt;
&lt;li&gt;Spread parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#the-new-function"&gt;
  &lt;/a&gt;
  The new function
&lt;/h2&gt;

&lt;p&gt;The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function &lt;/span&gt;Car&lt;span class="o"&gt;(&lt;/span&gt;make, model, year&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  this.make &lt;span class="o"&gt;=&lt;/span&gt; make&lt;span class="p"&gt;;&lt;/span&gt;
  this.model &lt;span class="o"&gt;=&lt;/span&gt; model&lt;span class="p"&gt;;&lt;/span&gt;
  this.year &lt;span class="o"&gt;=&lt;/span&gt; year&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

const car1 &lt;span class="o"&gt;=&lt;/span&gt; new Car&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'VW'&lt;/span&gt;, &lt;span class="s1"&gt;'GTI'&lt;/span&gt;, 2017&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

console.log&lt;span class="o"&gt;(&lt;/span&gt;car1.make&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; // VW
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#immediately-invoked-function-expressioniife"&gt;
  &lt;/a&gt;
  Immediately Invoked Function Expression(IIFE)
&lt;/h3&gt;

&lt;p&gt;An IIFE Lets us group our code and have it work in isolation,independent of any other code.&lt;br&gt;
Invokes a function right away where its defined.&lt;br&gt;
This prevents functions and variables from polluting the global object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function &lt;/span&gt;hello&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    console.log&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; //Hello
&lt;span class="o"&gt;})()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make it a function expression, we assign it to a variable or use it in another expression.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closures"&gt;
  &lt;/a&gt;
  closures
&lt;/h3&gt;

&lt;p&gt;A closure is a feature in JavaScript where a function inner scope has access to the outer scope.&lt;br&gt;
In the example below closure help keep message within the scope and it can be accessed in the getMessage function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;let &lt;/span&gt;greeting &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;let &lt;/span&gt;message &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;let &lt;/span&gt;getMessage &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return &lt;/span&gt;message&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        getMessage: getMessage
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;})()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

console.log&lt;span class="o"&gt;(&lt;/span&gt;greeting.message&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; //Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h3&gt;

&lt;p&gt;Arrow functions were introduced ES6.Refers to anonymous functions with their own unique syntax.Simpler way to create a function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;shorter syntax&lt;/li&gt;
&lt;li&gt;this derives it value from  enclosing &lt;a href="https://en.wikipedia.org/wiki/Scope_(computer_science)"&gt;lexical scope&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#shortcomings"&gt;
  &lt;/a&gt;
  Shortcomings.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; Arrow functions don't have their own this value.&lt;/li&gt;
&lt;li&gt;No argument object - we can't reference arguments
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;let &lt;/span&gt;greet &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Hello world'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;let &lt;/span&gt;message &lt;span class="o"&gt;=&lt;/span&gt; greet&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
console.log&lt;span class="o"&gt;(&lt;/span&gt;message&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; //Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there is one parameter parenthesis are optional.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;let &lt;/span&gt;greet &lt;span class="o"&gt;=&lt;/span&gt; name &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; + name&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#this-keyword"&gt;
  &lt;/a&gt;
  This keyword
&lt;/h3&gt;

&lt;p&gt;Refers to the owner of the function we are executing&lt;br&gt;
So if it's a standard function,this refers to the global window object;otherwise it can refer to the object that a function is a method of.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;let &lt;/span&gt;message &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    name: &lt;span class="s1"&gt;'john'&lt;/span&gt;,
    regularFunction&lt;span class="o"&gt;(&lt;/span&gt;name&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        console.log&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello'&lt;/span&gt; + this.name&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,

    arrowFunction: &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; console.log&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hi'&lt;/span&gt; + this.name&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

message.regularFunction&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; // Hello John
message.arrowFunction&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;// Hi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-call-method"&gt;
  &lt;/a&gt;
  The call method
&lt;/h3&gt;

&lt;p&gt;The call() allows for a function/method belonging to one object to be assigned and called for a different object.&lt;br&gt;
call() provides a new value of this to the function/method. &lt;br&gt;
With call(), you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;let &lt;/span&gt;car1 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; brand: &lt;span class="s1"&gt;'Vw'&lt;/span&gt;, color: &lt;span class="s1"&gt;'blue'&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;let &lt;/span&gt;car2 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; brand: &lt;span class="s1"&gt;'Toyota'&lt;/span&gt;, color: &lt;span class="s1"&gt;'white'&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;let &lt;/span&gt;returnCarBrand &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    console.log&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Car brand is '&lt;/span&gt; + this.brand&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

returnCarBrand.call&lt;span class="o"&gt;(&lt;/span&gt;car1&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; // Car brand is Vw
returnCarBrand.call&lt;span class="o"&gt;(&lt;/span&gt;car2&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; // Car brand is Toyota
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-apply-method"&gt;
  &lt;/a&gt;
  The apply method
&lt;/h3&gt;

&lt;p&gt;The apply() method calls a function with a given this value, and arguments provided as an array.&lt;br&gt;
Same syntax as call difference is that call accepts an argument list, while apply accepts a single array of arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function &lt;/span&gt;bookTitle&lt;span class="o"&gt;(&lt;/span&gt;name, author&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    console.log&lt;span class="o"&gt;(&lt;/span&gt;name + &lt;span class="s1"&gt;'is written by '&lt;/span&gt; + author&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    console.log&lt;span class="o"&gt;(&lt;/span&gt;this&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
bookTitle.apply&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'HTML &amp;amp; CSS: Design and Build Web Sites'&lt;/span&gt;, &lt;span class="s1"&gt;'Jon Duckett'&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-bind-method"&gt;
  &lt;/a&gt;
  The bind method
&lt;/h3&gt;

&lt;p&gt;Allows to make a copy of a function and then change the value of this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;let &lt;/span&gt;book &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    author: &lt;span class="s1"&gt;'Mary'&lt;/span&gt;,
    getAuthor: &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return &lt;/span&gt;this.author&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;let &lt;/span&gt;book2 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; author: &lt;span class="s1"&gt;'John'&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;let &lt;/span&gt;getAuthorcopy &lt;span class="o"&gt;=&lt;/span&gt; book.getAuthor.bind&lt;span class="o"&gt;(&lt;/span&gt;book2&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
console.log&lt;span class="o"&gt;(&lt;/span&gt;getAuthorcopy&lt;span class="o"&gt;())&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; // John
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#default-parameters"&gt;
  &lt;/a&gt;
  Default parameters
&lt;/h3&gt;

&lt;p&gt;Allow named parameters to be initialized with default values if no value or undefined is passed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function &lt;/span&gt;sayHi&lt;span class="o"&gt;(&lt;/span&gt;message, name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    console.log&lt;span class="o"&gt;(&lt;/span&gt;message + name&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rest-parameters"&gt;
  &lt;/a&gt;
  Rest parameters
&lt;/h3&gt;

&lt;p&gt;The rest parameter syntax allows a function to accept an indefinite number of arguments as an array.&lt;br&gt;
Rest parameters should always come after regular parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;let &lt;/span&gt;sayHi &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function &lt;/span&gt;greet&lt;span class="o"&gt;(&lt;/span&gt;...names&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    names.forEach&lt;span class="o"&gt;(&lt;/span&gt;name &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; console.log&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hi '&lt;/span&gt; + name&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
greet&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Welcome'&lt;/span&gt;, &lt;span class="s1"&gt;'John'&lt;/span&gt;, &lt;span class="s1"&gt;'Mary'&lt;/span&gt;, &lt;span class="s1"&gt;'James'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; // Hi John // Hi Mary // Hi James
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#spread-operator"&gt;
  &lt;/a&gt;
  Spread Operator
&lt;/h3&gt;

&lt;p&gt;Allows an a function to take an array as an argument and spread out its elements so that they can be assigned  to individual parameters&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function &lt;/span&gt;greet&lt;span class="o"&gt;(&lt;/span&gt;user1, user2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    console.log&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello'&lt;/span&gt; + user1 +&lt;span class="s1"&gt;' and '&lt;/span&gt; + user2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;let &lt;/span&gt;names &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'John'&lt;/span&gt;,&lt;span class="s1"&gt;'Mary'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
greet&lt;span class="o"&gt;(&lt;/span&gt;...names&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; //Hello John and Mary
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Compose Generator - Deploy your App in Seconds</title>
      <author>Marc Auberer</author>
      <pubDate>Tue, 12 Oct 2021 09:38:22 +0000</pubDate>
      <link>https://dev.to/marcauberer/compose-generator-deploy-your-app-in-seconds-21o6</link>
      <guid>https://dev.to/marcauberer/compose-generator-deploy-your-app-in-seconds-21o6</guid>
      <description>&lt;p&gt;Application deployment with Docker and Kubernetes is easier than ever before, but could it even be much faster and much more seamless? This is where Compose Generator comes into play by helping you with common Docker tasks with a command line interface.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MIG-e4zF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwkkyic5v2tcx0nxx8m2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MIG-e4zF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwkkyic5v2tcx0nxx8m2.png" alt="Compose Generator logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-a-project"&gt;
  &lt;/a&gt;
  Deploy a project
&lt;/h2&gt;

&lt;p&gt;With Compose Generator you only have to do the following four steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install Compose Generator (instructions below)&lt;/li&gt;
&lt;li&gt;Clone repository of your project from a VCS&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;compose-generator install&lt;/code&gt; to install Docker and Docker Compose (can be skipped if you have Docker and Docker Compose already installed)&lt;/li&gt;
&lt;li&gt;Run&lt;code&gt;compose-generator -r&lt;/code&gt; to generate your deployment configuration and run it subsequently&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Swdv2BD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40pglfauugbss1eyzrld.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Swdv2BD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40pglfauugbss1eyzrld.gif" alt="Screencast animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets dive a bit further into Compose Generator to better point out the various advantages and why you should consider using it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-docker-compose-configurations"&gt;
  &lt;/a&gt;
  Generate Docker Compose configurations
&lt;/h2&gt;

&lt;p&gt;Compose Generator can be seen as a deployment assistant and acts like a wrapper around your Docker installation. As you see above, Compose Generator can be used to install Docker and Docker Compose on your system, so you only need to care about installing Compose Generator in the first place. The main feature of Compose Generator is - as the name might suggest - to generate the Docker Compose configuration for your project. Moreover, Compose Generator can generate secrets (like e.g. database credentials, etc.), manage volumes, networks, environment variables and much more.&lt;/p&gt;

&lt;p&gt;In the following example, we’re going to deploy a basic Angular Application, connected to a Spring Boot API and a MySQL database. Compose Generator supports a wide variety of service templates (tendence growing), which you can find listed &lt;a href="https://www.compose-generator.com/supported-services/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-stack-deployment"&gt;
  &lt;/a&gt;
  Example stack deployment
&lt;/h2&gt;

&lt;p&gt;However it is recommended to install Compose Generator on your host system as described &lt;a href="https://www.compose-generator.com/install/linux"&gt;here&lt;/a&gt;, for this beginners guide you can also run it as Docker container, by executing following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock 
     &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:/cg/out chillibits/compose-generator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Docker pulls the image and runs it in interactive mode. The &lt;code&gt;$(pwd)&lt;/code&gt; placeholder stands for the current path on your Docker host system and gets mapped to the &lt;code&gt;/cg/out&lt;/code&gt; directory within the container. This means, that the resulting output files, like &lt;code&gt;docker-compose.yml&lt;/code&gt; will later be located in the directory, in which you execute the command above.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---0O8gxSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44okpm4gg6dullkg478s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---0O8gxSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44okpm4gg6dullkg478s.png" alt="CLI view 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Compose Generator asks you for the name of your project and if you want to create a production-ready configuration instead of the default development config, which hides your services behind a proxy. Compose Generator offers a variety of predefined service templates, which you can arrange for your needs like in a building block system. For our example, we will select &lt;code&gt;Angular&lt;/code&gt; in the frontend section, &lt;code&gt;Spring with Maven&lt;/code&gt; in the backend section and &lt;code&gt;MySQL&lt;/code&gt; in the database section. For each item you select from the templates list, Compose Generator asks you service-specific questions, that are important for setting them up. After having answered all questions for &lt;code&gt;MySQL&lt;/code&gt; you can see, that Compose Generator pre-selected PhpMyAdmin, because it is the default db admin system for MySQL. You can deselect it or press enter to continue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhinwh_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vegf2rhr6fpxzpmz6eaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhinwh_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vegf2rhr6fpxzpmz6eaq.png" alt="CLI view 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: You can execute &lt;code&gt;compose-generator -a&lt;/code&gt; to launch the Compose Generator Cli in advanced mode. Then you also get questions for advanced stack customization. Find more information about cli options of the generate sub-command &lt;a href="https://www.compose-generator.com/usage/generate/#options"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After having all questions answered, Compose Generator will generate following file structure in the directory where it was called in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;current directory
├─volumes
│ ├─volume1
│ ├─volume2
│ ├─volume3
│ └─...
├─.gitignore
├─.cg.yml
├─docker-compose.yml
└─environment.env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;docker-compose.yml&lt;/code&gt; file contains your Docker Compose configuration. If your containers require any secrets, they are stored in the &lt;code&gt;environment.env&lt;/code&gt; file, which will be attached to all regarding containers at runtime. As you see above, Compose Generator also creates the volume directories for you. Depending on the stack template you’re choosing, there already will be files in the volume directories (such as configuration files, etc.) to take as much workload off your shoulders as possible.&lt;br&gt;
The &lt;code&gt;.gitignore&lt;/code&gt; file in the root directory contains the &lt;code&gt;environment.env&lt;/code&gt; file to not accidentally committing any secrets to a VCS.&lt;br&gt;
&lt;code&gt;.cg.yml&lt;/code&gt; is a configuration file for Compose Generator itself to remember some selections of yours.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#removing-services-from-a-configuration"&gt;
  &lt;/a&gt;
  Removing services from a configuration
&lt;/h2&gt;

&lt;p&gt;Imagine, you have generated a stack with &lt;code&gt;Angular&lt;/code&gt;, &lt;code&gt;Spring with Maven&lt;/code&gt;, &lt;code&gt;MySQL&lt;/code&gt; and &lt;code&gt;PhpMyAdmin&lt;/code&gt;, but you want to switch to MongoDB as you have to deal with more document-like data structures in your Spring application.&lt;br&gt;
What you can do is to ask Compose Generator to remove the services &lt;code&gt;MySQL&lt;/code&gt; and &lt;code&gt;PhpMyAdmin&lt;/code&gt; and add &lt;code&gt;MongoDB&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;To remove the first two, you can execute the following command in the directory where the &lt;code&gt;docker-compose.yml&lt;/code&gt; file for your configuration lives:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;compose-generator remove
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select the two services &lt;code&gt;MySQL&lt;/code&gt; and &lt;code&gt;PhpMyAdmin&lt;/code&gt; and press the enter key. Compose Generator will remove those services from your compose configuration without leaving residues, e.g. unused volumes, networks, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-services-to-a-configuration"&gt;
  &lt;/a&gt;
  Adding services to a configuration
&lt;/h2&gt;

&lt;p&gt;To now add the service for &lt;code&gt;MongoDB&lt;/code&gt;, you can execute following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;compose-generator add mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After answering all questions, the &lt;code&gt;docker-compose.yml&lt;/code&gt; file should now contain a service &lt;code&gt;database-mongodb&lt;/code&gt; and the services &lt;code&gt;database-mysql&lt;/code&gt; and &lt;code&gt;db-admin-phpmyadmin&lt;/code&gt; should be gone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading-about-compose-generator"&gt;
  &lt;/a&gt;
  Further reading about Compose Generator
&lt;/h2&gt;

&lt;p&gt;The key concept behind Compose Generator is, that it is durable and extensible. Therefore it is possible to create own predefined service templates and add them to the list of selectable services. If you do so, feel free to hand it in as a community contribution on GitHub!&lt;/p&gt;

&lt;p&gt;There will be more upcoming articles about in-depth information about creating predefined service templates and all available cli sub-commands!&lt;/p&gt;




&lt;p&gt;Thank you for interest and for reading this article.&lt;br&gt;
If you want to learn more about Compose Generator, please visit the official documentation at &lt;a href="https://www.compose-generator.com"&gt;www.compose-generator.com&lt;/a&gt; and the open source project on GitHub (&lt;a href="https://github.com/compose-generator"&gt;github.com/compose-generator&lt;/a&gt;).&lt;/p&gt;

</description>
      <category>docker</category>
      <category>go</category>
      <category>opensource</category>
      <category>devops</category>
    </item>
    <item>
      <title>Building a Live Audio Streaming React Native App with Agora</title>
      <author>Ekaansh Arora</author>
      <pubDate>Tue, 12 Oct 2021 09:36:55 +0000</pubDate>
      <link>https://dev.to/ekaansharora/building-a-live-audio-streaming-react-native-app-with-agora-3be2</link>
      <guid>https://dev.to/ekaansharora/building-a-live-audio-streaming-react-native-app-with-agora-3be2</guid>
      <description>&lt;p&gt;Live audio streaming is increasingly popular across a wide range of uses, from live podcasts and interviews to live music performances. The possibilities are endless once you have a few users engaging with an audience in real-time.&lt;/p&gt;

&lt;p&gt;There’s an easy way to accomplish live audio streaming using the Agora React Native SDK. In this tutorial, we’ll walk through building a live audio broadcasting app that can have multiple broadcasters and host thousands of users by utilizing the Agora Audio SDK. We’ll go over the structure, setup, and execution of the app before diving into the code. The open-source code is available &lt;a href="https://github.com/EkaanshArora/Agora-RN-Audio-Broadcast"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ll be using &lt;a href="https://www.npmjs.com/package/react-native-agora/"&gt;Agora RTC SDK for React Native&lt;/a&gt; for the example. I’m using v3.2.2 at the time of writing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-agora-account"&gt;
  &lt;/a&gt;
  Creating an Agora Account
&lt;/h2&gt;

&lt;p&gt;Sign up at &lt;a href="https://console.agora.io/"&gt;https://console.agora.io/&lt;/a&gt; and log in to the dashboard.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nwk3KVBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/337/1%2ApAkpJsnCJZx1VVzFw2TFiw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nwk3KVBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/337/1%2ApAkpJsnCJZx1VVzFw2TFiw.png" alt="Agora Console"&gt;&lt;/a&gt;&lt;br&gt;
Navigate to the Project List tab under the Project Management tab and create a project by clicking the blue Create button.&lt;/p&gt;

&lt;p&gt;Create a project and retrieve the App ID. (When prompted to use App ID + Certificate, select only App ID.) The App ID will be used to authorize your requests while you’re developing the application, without generating tokens.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: This guide does not implement token authentication which is recommended for all RTE apps running in production environments. For more information about token-based authentication within the Agora platform please refer to this guide: &lt;a href="https://docs.agora.io/en/Video/token?platform=All%20Platforms"&gt;https://docs.agora.io/en/Video/token?platform=All%20Platforms&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#structure-of-our-example"&gt;
  &lt;/a&gt;
  Structure of Our Example
&lt;/h2&gt;

&lt;p&gt;This is the structure of the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── android
├── components
│ └── Permission.ts
│ └── Style.ts
├── ios
├── App.tsx
├── index.js
.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#running-the-app"&gt;
  &lt;/a&gt;
  Running the App
&lt;/h2&gt;

&lt;p&gt;You’ll need to have a recent version of Node.js and NPM installed;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure you’ve set up an Agora account, set up a project, and generated an App ID (as discussed above).&lt;/li&gt;
&lt;li&gt;Download and extract the ZIP file from the master branch.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; to install the app dependencies in the unzipped directory.&lt;/li&gt;
&lt;li&gt;Navigate to &lt;code&gt;./App.tsx&lt;/code&gt; and enter the App ID as &lt;code&gt;appId: YourAppIdHere&lt;/code&gt; in the state declaration.&lt;/li&gt;
&lt;li&gt;If you’re building for iOS, open a terminal and execute cd ios &amp;amp;&amp;amp; pod install.&lt;/li&gt;
&lt;li&gt;Connect your device, and run npx react-native run-android / npx react-native run-ios to start the app. Give it a few minutes to build the app and install it on your device.&lt;/li&gt;
&lt;li&gt;Once you see the home screen on your mobile device (or emulator), click the start call button on the device.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it. You should have an audio broadcast going between the two devices.&lt;/p&gt;

&lt;p&gt;The app uses &lt;code&gt;channel-x&lt;/code&gt; as the channel name.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#before-we-dive-into-the-code-lets-get-a-few-basics-out-of-the-way"&gt;
  &lt;/a&gt;
  Before we dive into the code, let’s get a few basics out of the way:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We’ll use the Agora RTC (Real-time Communication) SDK to connect to a channel and join an audio call.&lt;/li&gt;
&lt;li&gt;We can have multiple users broadcasting to a channel. All users as an audience on that channel can listen to the broadcasters.&lt;/li&gt;
&lt;li&gt;The audience can dynamically switch to a broadcaster role.&lt;/li&gt;
&lt;li&gt;The Agora RTC SDK uses unique IDs (UIDs) for each user. To associate these UIDs with a username, we’ll use the Agora RTM (Real-time Messaging) SDK to signal the username to others on the call. We’ll discuss how it’s done below.
Let’s take a look at how the code works:&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#apptsx"&gt;
  &lt;/a&gt;
  App.tsx
&lt;/h2&gt;

&lt;p&gt;App.tsx will be the entry point into the app. We’ll have all our code in this file. When you open the app, there will be a username field with three buttons: to join the call, end the call, and toggle our user role between broadcaster and audience.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;We start by writing the used import statements. Next, we define an interface for our application state containing the following:&lt;br&gt;
&lt;code&gt;appId&lt;/code&gt;: our Agora App ID&lt;br&gt;
&lt;code&gt;token&lt;/code&gt;: token generated to join the channel&lt;br&gt;
&lt;code&gt;isHost&lt;/code&gt;: boolean value to switch between audience and broadcaster&lt;br&gt;
&lt;code&gt;channelName&lt;/code&gt;: name for the channel&lt;br&gt;
&lt;code&gt;joinSucceed&lt;/code&gt;: boolean value to store if we’ve connected successfully&lt;br&gt;
&lt;code&gt;rtcUid&lt;/code&gt;: local user’s UID on joining the RTC channel&lt;br&gt;
&lt;code&gt;myUsername&lt;/code&gt;: local user’s name to log in to RTM&lt;br&gt;
&lt;code&gt;usernames&lt;/code&gt;: a dictionary associating RTC UIDs of remote users to their usernames that we’ll get using RTM&lt;br&gt;
&lt;code&gt;peerIds&lt;/code&gt;: an array to store the UIDs of other users in the channel&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We define a class-based component: the &lt;code&gt;_rtcEngine&lt;/code&gt; variable will store the instance of the &lt;code&gt;RtcEngine&lt;/code&gt; class, and the &lt;code&gt;_rtmEngine&lt;/code&gt; variable will store the instance of the &lt;code&gt;RtmEngine&lt;/code&gt; class, which we can use to access the SDK functions.&lt;/p&gt;

&lt;p&gt;In the constructor, we set our state variables and request permission for recording audio on Android. (We use a helper function from &lt;code&gt;permission.ts&lt;/code&gt;, as described below.) When the component is mounted, we call the &lt;code&gt;initRTC&lt;/code&gt; and &lt;code&gt;initRTM&lt;/code&gt; functions, which initialize the RTC and RTM engines using the App ID. When the component unmounts, we destroy our engine instances.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rtc-initialization"&gt;
  &lt;/a&gt;
  RTC Initialization
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
We use the App ID to create our engine instance. Next, we set &lt;code&gt;channelProfile&lt;/code&gt; to Live Broadcasting and &lt;code&gt;clientRole&lt;/code&gt; based on our &lt;code&gt;isHost&lt;/code&gt; state variable value.

&lt;p&gt;The RTC triggers a &lt;code&gt;userJoined&lt;/code&gt; event for each user present when we join the channel and for each new user who joins later. The &lt;code&gt;userOffline&lt;/code&gt; event is triggered when a user leaves the channel. We use event listeners to sync our &lt;code&gt;peerIds&lt;/code&gt; array.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Audience members don’t trigger the userJoined/userOffline event.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#rtm-initialization"&gt;
  &lt;/a&gt;
  RTM Initialization
&lt;/h2&gt;

&lt;p&gt;We’re using RTM to send our username to other usernames on the call. And this is how we associate our usernames with our RTC UID&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When a user joins a channel, we send a message to all channel members as &lt;code&gt;UID:Username&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;On receiving a channel message, all users add the key-value pair to their username dictionary.&lt;/li&gt;
&lt;li&gt;When a new user joins, all members on the channel send a peer message to that user in the same schema &lt;code&gt;UID:Username&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;On receiving peer messages, we do the same (add the key-value pair to the dictionary) and update our usernames.
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

Following our plan, we attach event listeners with functions to populate and update usernames on &lt;code&gt;channelMessageReceived&lt;/code&gt; (broadcast message to channel), &lt;code&gt;messageReceived&lt;/code&gt; (peer message), and &lt;code&gt;channelMemberJoined&lt;/code&gt; events. We also create a client on the engine using the same App ID.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#functions-for-our-buttons"&gt;
  &lt;/a&gt;
  Functions for Our Buttons
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
The &lt;code&gt;toggleRole&lt;/code&gt; function updates the state and calls the &lt;code&gt;setClientRole&lt;/code&gt; function with the correct argument based on the state.&lt;br&gt;
The &lt;code&gt;startCall&lt;/code&gt; function checks if a username is entered. It then joins the RTC channel. It also logs in to RTM, joins the channel, and sends the channel message for the username, as we discussed before.&lt;br&gt;
The &lt;code&gt;endCall&lt;/code&gt; function leaves the RTC channel, sends a message that is used to remove the username from our remote users dictionary, and then leaves and logs out of RTM.

&lt;h2&gt;
  &lt;a href="#rendering-our-ui"&gt;
  &lt;/a&gt;
  Rendering Our UI
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
We define the render function for displaying buttons to start and end the call as well as to toggle roles. We define a function &lt;code&gt;_renderUsers&lt;/code&gt; that renders a list of all broadcasters and audience members.

&lt;h2&gt;
  &lt;a href="#permissionts"&gt;
  &lt;/a&gt;
  Permission.ts
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
We’re exporting a helper function to request microphone permissions from the Android OS.

&lt;h2&gt;
  &lt;a href="#stylets"&gt;
  &lt;/a&gt;
  Style.ts
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
The Style.ts file contains the styling for the components.

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That’s how easy it is to build a live audio streaming app. For more information about building applications using Agora SDKs, take a look at the &lt;a href="https://docs.agora.io/en/Video/landing-page?platform=React%20Native"&gt;Agora Video Call Quickstart Guide&lt;/a&gt; and &lt;a href="https://docs.agora.io/en/Video/API%20Reference/react_native/index.html"&gt;Agora API Reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I invite you to join the &lt;a href="https://www.agora.io/en/join-slack/"&gt;Agora Developer Slack community&lt;/a&gt;. You can ask any questions about Agora in the &lt;code&gt;#react-native-help-me&lt;/code&gt; channel.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>tutorial</category>
      <category>mobile</category>
      <category>javascript</category>
    </item>
    <item>
      <title>#7 Best Artificial intelligence technologies and there Websites🔥</title>
      <author>Deepak Gupta</author>
      <pubDate>Tue, 12 Oct 2021 09:26:25 +0000</pubDate>
      <link>https://dev.to/deepakguptacoder/7-best-artificial-intelligence-technologies-and-there-websites-28k4</link>
      <guid>https://dev.to/deepakguptacoder/7-best-artificial-intelligence-technologies-and-there-websites-28k4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#hello-everyone"&gt;
  &lt;/a&gt;
  Hello everyone! 🖤
&lt;/h1&gt;

&lt;p&gt;In this article, we look into Best Artificial intelligence technologies.&lt;br&gt;
We are using Artificial intelligence in our daily life I will tell you the best #7th website of the artificial intelligence it's help you to grow and build your knowledge.&lt;br&gt;
.&lt;br&gt;
Website are are given below and disruption also.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1robotic-process-automation"&gt;
  &lt;/a&gt;
  1.&lt;a href="https://www.turbotic.com/campaigns/robotics-operations-center?gclid=Cj0KCQjw5JSLBhCxARIsAHgO2Se8atXKde8vsqTV23wLSVqGJi2Rgi-gHu3N-IKKZ6jtvoazKSdKlTsaArgBEALw_wcB"&gt;Robotic Process Automation&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S1eIL2z4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07u63lqg71r952g5epnj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S1eIL2z4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07u63lqg71r952g5epnj.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Robotic process is the process of the machine work in our world every place to using this AI to saving time and making process easy.&lt;br&gt;
.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2cyber-defense"&gt;
  &lt;/a&gt;
  2.&lt;a href="https://www.google.com/search?q=cyber+defense+artificial+intelligence&amp;amp;client=ms-android-vivo&amp;amp;sxsrf=AOaemvL4EpPYi4ctNMhmmAO55Q2qhIbzyw%3A1634022805536&amp;amp;ei=lTVlYYaGILib4t4P1KGhGA&amp;amp;oq=Cyber+Defense+art&amp;amp;gs_lcp=ChNtb2JpbGUtZ3dzLXdpei1zZXJwEAEYADIGCAAQFhAeMgYIABAWEB4yBQghEKABOgQIABBHOg0ILhDHARDRAxBDEJMCOgQIABBDOgoILhDHARDRAxBDOgUIABCABDoICAAQgAQQyQNQljFYgTpguURoAHABeACAAZICiAHVBpIBBTAuMi4ymAEAoAEByAEIwAEB&amp;amp;sclient=mobile-gws-wiz-serp#fpstate=form_ad_n1s0p1"&gt;Cyber Defense&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XayIhDJs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k4p098st7cve36ivgmk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XayIhDJs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k4p098st7cve36ivgmk.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Cyber Defense is the Cyber Security to save and protect your data and personal thing from the hacker's.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3machine-learning-platforms"&gt;
  &lt;/a&gt;
  3.&lt;a href="https://www.simplilearn.com/sem-landing/master-program/bundle_id/117/template/2?utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_term=%2Bmachine%20%2Blearning&amp;amp;utm_content=1428905907-78938469271-362537006817&amp;amp;utm_device=m&amp;amp;utm_campaign=Search-DataCluster-DSAI-AIML-IN-Main-AllDevice-adgroup-AIML-Machinelearning-Course-BMM-New&amp;amp;gclid=Cj0KCQjw5JSLBhCxARIsAHgO2ScDBtTYsGlu3H2y8AseAbEOB880mODf4DSc3wIhSiJKSjsiR_F4gosaAhWXEALw_wcB"&gt;Machine Learning Platforms&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HRaF18D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xc2jutyqe90aqa066wct.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HRaF18D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xc2jutyqe90aqa066wct.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Machine Learning Platforms&lt;br&gt;
A platform for automating and accelerating the delivery lifecycle of predictive applications capable of processing big data using machine learning or related techniques.”&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4biometrics"&gt;
  &lt;/a&gt;
  4.&lt;a href="https://www.kentcam.com/camattendance/?gclid=Cj0KCQjw5JSLBhCxARIsAHgO2ScnSa4-0o8Qpgwqy16W1BsFCcGQoygil5hJaRTA3A48Px2tYwCBfosaAqKrEALw_wcB"&gt;Bio-metrics&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZK_8zWg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mz6hilvg7cij3ksxg2v0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZK_8zWg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mz6hilvg7cij3ksxg2v0.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Biometrics is one of the AI which is Using your daily life example; school, company, factories, college etc.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5emotion-recognition"&gt;
  &lt;/a&gt;
  5.&lt;a href="https://www.neom.com/en-us/whatistheline?utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=2195_AO_RPL_Search_Clicks_IN_CPC_Text_T1_EN_27Apr21_30Nov21_3242_SmartCity&amp;amp;utm_content=SmartCity&amp;amp;gclid=Cj0KCQjw5JSLBhCxARIsAHgO2Sd0WoSvj9Y2EVIkj1bgthnbPSwPrgszyhEnnB6ATOeEvj0n2bKvEXEaAt9rEALw_wcB"&gt;Emotion Recognition&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IuHbJ_GC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfb5yltu54tnw1693yvp.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IuHbJ_GC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfb5yltu54tnw1693yvp.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Emotion AI refers to artificial intelligence that detects your face and emotion reaction also and interprets human emotional signals. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6content-creation"&gt;
  &lt;/a&gt;
  6.&lt;a href="https://mydukaan.io/blog/ai-content-creation-tools/"&gt;Content Creation&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E3bT6K79--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqiibs44utaqrq0tj72v.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E3bT6K79--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqiibs44utaqrq0tj72v.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Content Intelligence is a subset of AI that allows marketers to use machine learning algorithms to optimize content for consumption and distribution.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7speech-recognition"&gt;
  &lt;/a&gt;
  7.&lt;a href="https://www.hpe.com/in/en/solutions/artificial-intelligence.html?jumpid=ps_pwnsy6fgh7_aid-520042864&amp;amp;ef_id=Cj0KCQjw5JSLBhCxARIsAHgO2SdlfrepFz0VI6QcFhqHCPYHap3mTIoeTpb142YC81w8KnvwoBdrSUUaAml6EALw_wcB:G:s&amp;amp;s_kwcid=AL!13472!3!541195828265!p!!g!!ai%20intelligence!14386686690!127123177875&amp;amp;"&gt;Speech Recognition&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ArB1w-mb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5imzs43l5kr0kringuv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ArB1w-mb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5imzs43l5kr0kringuv.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Speech recognition is the voice command to your device&lt;br&gt;
It's the most of the people are using children's also using this AI..&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#i-hope-you-found-this-article-useful-if-you-need-any-help-please-let-me-know-in-the-comment-section"&gt;
  &lt;/a&gt;
  I hope you found this article useful, if you need any help please let me know in the comment section.💯
&lt;/h3&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>webpack</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My portfolio journey #1</title>
      <author>Prince</author>
      <pubDate>Tue, 12 Oct 2021 09:25:42 +0000</pubDate>
      <link>https://dev.to/nguhprince/my-portfolio-journey-1-3eh</link>
      <guid>https://dev.to/nguhprince/my-portfolio-journey-1-3eh</guid>
      <description>&lt;p&gt;Hi, I'm Prince. I'm in the final year of my 3 year CS program and very soon I'll be out looking for a job. To prepare for that I thought it wise to begin creating a portfolio site and at the time of writing I am looking at some example portfolios. &lt;/p&gt;

&lt;p&gt;Being someone who is not very comfortable with design, UI/UX (pretty much anything that is supposed to be visually compelling) it was a pretty daunting task. I thought looking at some example sites was going to help, it did, but then I realized those sites had loads of great visual content and animations which I don't think I could implement successfully. &lt;/p&gt;

&lt;p&gt;This realization put me down a bit but the truth is your first portfolio doesn't have to be some out-of-earth looking thingamajig, it just has to exist. So I decided to go simple and start by making a simple wireframe of a site I was able to build from the ground up. I am going to be documenting my journey as I am advancing. I will include tips / tutorials on how I created my website and since I have no clients (yet) I will also talk about the pet projects I put on my site and what motivated my choice of them.&lt;/p&gt;

&lt;p&gt;Wish me luck. &lt;/p&gt;

&lt;p&gt;PS: here are links to some resources that helped me along the way&lt;br&gt;
&lt;a href="https://www.freecodecamp.org/news/coding-projects-to-include-in-your-frontend-portfolio/"&gt;https://www.freecodecamp.org/news/coding-projects-to-include-in-your-frontend-portfolio/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.seanhalpin.design/"&gt;https://www.seanhalpin.design/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://blog.jemimaabu.com/how-i-built-my-perfect-score-portfolio-website#how-to-get-a-perfect-lighthouse-score-on-your-website"&gt;https://blog.jemimaabu.com/how-i-built-my-perfect-score-portfolio-website#how-to-get-a-perfect-lighthouse-score-on-your-website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
      <category>css</category>
    </item>
    <item>
      <title>New Luos get started tutorial</title>
      <author>Emanuel Allely</author>
      <pubDate>Tue, 12 Oct 2021 09:17:22 +0000</pubDate>
      <link>https://dev.to/luos/new-luos-get-started-tutorial-19kc</link>
      <guid>https://dev.to/luos/new-luos-get-started-tutorial-19kc</guid>
      <description>&lt;p&gt;⭐ Curious about how Luos is easy to use? Try our new get started tutorial to get the flavor of the new way to think, create, maintain and evolve embedded systems. Luos is open-source 👩‍💻&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VcK-LJ-gnDo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>opensource</category>
      <category>embedded</category>
      <category>luos</category>
    </item>
  </channel>
</rss>
