<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Integrating MapBox with Next.js — the Cheaper Alternative to Google Maps</title>
      <author>Niharika Khanna</author>
      <pubDate>Sat, 05 Dec 2020 08:18:49 +0000</pubDate>
      <link>https://dev.to/niharikak101/integrating-mapbox-with-next-js-the-cheaper-alternative-to-google-maps-g39</link>
      <guid>https://dev.to/niharikak101/integrating-mapbox-with-next-js-the-cheaper-alternative-to-google-maps-g39</guid>
      <description>&lt;p&gt;Lately, I’ve been working on creating an &lt;a href="//sustaynably.com"&gt;online platform for eco hotels and resorts&lt;/a&gt;, and found myself needing to render a map with some clickable marker pins (which we are going to reproduce in this tutorial). After scouring the internet with possible solutions, two immediate options sprung up — Google Maps and MapBox. While most of us are familiar with Google Maps because of the overwhelming presence it has in all our lives, integrating it in an application, I found, is less than ideal. Building a bootstrapped project, I wanted to keep the costs at a minimum and Google Map’s &lt;a href="https://cloud.google.com/maps-platform/pricing"&gt;pricing structure&lt;/a&gt; would mean that the costs would begin to add up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-mapbox" class="anchor"&gt;
  &lt;/a&gt;
  Enter MapBox!
&lt;/h2&gt;

&lt;p&gt;With a competitive &lt;a href="https://www.mapbox.com/pricing/"&gt;pricing structure&lt;/a&gt; (the first 50,000 requests on web are free) and an easy-to-use and well documented API, MapBox is a good alternative to Google Maps. It is also built on top of &lt;a href="https://www.openstreetmap.org/"&gt;OpenStreetMap&lt;/a&gt;, which is an open source mapping project. Win, win!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-we-building" class="anchor"&gt;
  &lt;/a&gt;
  What are we building?
&lt;/h2&gt;

&lt;p&gt;We’re going to be querying MapBox’s search api to get some locations of an infamous coffee shop called Greggs, focusing our search on the Greater London region. Then, we are going to render these places in our MapBox &lt;code&gt;&amp;lt;Map&amp;gt;&lt;/code&gt; component with a bunch of clickable markers. On click, these markers will display some dismissible popups.&lt;/p&gt;

&lt;p&gt;The finished product will look something like,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O4XPJr1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8ihpmagd55bqx9jmevyw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O4XPJr1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8ihpmagd55bqx9jmevyw.png" alt="map"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#lets-code" class="anchor"&gt;
  &lt;/a&gt;
  Let's Code!
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#make-a-mapbox-account-to-get-your-access-token" class="anchor"&gt;
  &lt;/a&gt;
  Make a MapBox account to get your access token
&lt;/h2&gt;

&lt;p&gt;The first thing you will need to do is to make a MapBox account so that you can get an access token. We will use this token to make requests to the various MapBox APIs.&lt;br&gt;
Once you have your access token, it is time to set up your very own Next.js project and integrate all the juicy functionality that MapBox provides.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup-a-new-nextjs-project-skip-this-if-you-already-have-a-project-of-your-own" class="anchor"&gt;
  &lt;/a&gt;
  Setup a new Next.js project (Skip this if you already have a project of your own)
&lt;/h2&gt;

&lt;p&gt;Setting up a Next.js project is straightforward, you can either follow the instructions laid out in the &lt;a href="https://nextjs.org/learn/basics/create-nextjs-app"&gt;official documentation&lt;/a&gt; or run the following command to set up a new Next.js project (Make sure you have Node.js installed).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app mapbox-project
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;mapbox-project&lt;/code&gt; directory and run the development server by running &lt;code&gt;npm run dev&lt;/code&gt; or &lt;code&gt;yarn dev&lt;/code&gt; . Et Voila! Your Next.js project is up and running!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-a-mapbox-map" class="anchor"&gt;
  &lt;/a&gt;
  Setup A MapBox Map
&lt;/h2&gt;

&lt;p&gt;Next up, it’s time to render a MapBox map in our project. We do this by adding a &lt;a href="https://github.com/visgl/react-map-gl"&gt;MapBox library&lt;/a&gt; written by the team at Uber called react-map-gl. This contains a suite of React components for MapBox. Add this library to your project by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add react-mapbox-gl
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With this, we’re going to create a Map component which will live in &lt;code&gt;components/Map.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create your Map.js file and add the following code to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";
import ReactMapGL from "react-map-gl";
export default function Map() {
  const [viewport, setViewport] = useState({
  width: "100%",
  height: "100%",
  // The latitude and longitude of the center of London
  latitude: 51.5074,
  longitude: -0.1278,
  zoom: 10
});
return &amp;lt;ReactMapGL
  mapStyle="mapbox://styles/mapbox/streets-v11"
  mapboxApiAccessToken={process.env.MAPBOX_KEY}
  {...viewport}
  onViewportChange={(nextViewport) =&amp;gt; setViewport(nextViewport)}
  &amp;gt;
&amp;lt;/ReactMapGL&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is not going to work just yet. One of the biggest features of Next.js is the server side rendering it offers. MapBox, however, requires the global window object in order to work correctly. If you are server side rendering your app, you will need to dynamically import it into your page. This means that instead of importing it like a regular component,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Map from '../components/Map'
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will have to import it dynamically. We will do this by using Next.js &lt;code&gt;dynamic imports&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;pages/index.js&lt;/code&gt; file (or wherever you’re rendering your Map component) add the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Map = dynamic(() =&amp;gt; import("../components/Map"), {
  loading: () =&amp;gt; "Loading...",
  ssr: false
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This means that our MapBox component will now selectively be rendered client side. Perfect!&lt;/p&gt;

&lt;p&gt;The only thing we need to do now is to add MapBox’s CSS files to our project. The easiest way to do this is to modify your existing &lt;code&gt;_app.js&lt;/code&gt; or by adding a custom &lt;code&gt;_document.js&lt;/code&gt; file. Then add a link to the CSS to the &lt;code&gt;&amp;lt;Head&amp;gt;&lt;/code&gt; in your render function. You can get the latest version of the CSS files in their &lt;a href="https://docs.mapbox.com/mapbox-gl-js/api/"&gt;API documentation&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;head&amp;gt;
&amp;lt;link href='https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css' rel='stylesheet' /&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Perfect. Your Map should now be up and running! Let’s take this a step further and try rendering some clickable pins on our map.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-mapboxs-search-api-to-fetch-a-list-of-landmarks" class="anchor"&gt;
  &lt;/a&gt;
  Use MapBox’s search API to fetch a list of landmarks
&lt;/h2&gt;

&lt;p&gt;MapBox has a really handy geocoding API which you can be used to fetch a list of locations, with their latitudes and longitudes. We’re going to be fetching a list of Greggs (a take-away fast food and coffee shop) in London and render them as pins on our Map.&lt;br&gt;
First, let’s query our list by adding a simple fetch call to the Mapbox geocoding API. We want to search within the geographic bounds of London and want to cap our search at 10 results (London is huge and Londoner’s love their Gregg’s vegan sausage rolls. We don’t want to overwhelm ourselves with all the possibilities!). MapBox’s Geocoding Place Search API takes the following parameters, with some additional query strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/geocoding/v5/mapbox.places/{search_text}.json
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will be using the limit query parameter to cap our results at 10, and the bbox parameter to specify the latitudinal and longitudinal bounds of London.&lt;br&gt;
With all this in mind, our search url will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://api.mapbox.com/geocoding/v5/mapbox.places/greggs.json?access_token=${process.env.MAPBOX_KEY}&amp;amp;bbox=-0.227654%2C51.464102%2C0.060737%2C51.553421&amp;amp;limit=10

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can use this url, to make a simple fetch call in our page. Our modified page will now look something like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Map = dynamic(() =&amp;gt; import("../components/Map"), {
  loading: () =&amp;gt; "Loading...",
  ssr: false
});
const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/greggs.json?access_token=${process.env.MAPBOX_KEY}&amp;amp;bbox=-0.227654%2C51.464102%2C0.060737%2C51.553421&amp;amp;limit=10`;
export default function IndexPage() {
  const [locations, setLocations] = useState([]);
  useEffect(() =&amp;gt; {
    const fetchLocations = async () =&amp;gt; {
      await fetch(url).then((response) =&amp;gt;
        response.text()).then((res) =&amp;gt; JSON.parse(res))
      .then((json) =&amp;gt; {
        setLocations(json.features);
      }).catch((err) =&amp;gt; console.log({ err }));
    };
    fetchLocations();
  }, []);
  return (&amp;lt;Container&amp;gt;
    &amp;lt;Map /&amp;gt;
  &amp;lt;/Container&amp;gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We now have a list of 10 Greggs locations!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-our-search-results-to-render-pins-on-our-map" class="anchor"&gt;
  &lt;/a&gt;
  Using our search results to render pins on our map
&lt;/h2&gt;

&lt;p&gt;Now that we have a list of places, we can render these on a Map. &lt;code&gt;react-map-gl&lt;/code&gt; comes with a handy &lt;code&gt;&amp;lt;Marker&amp;gt;&lt;/code&gt; component that makes our task pretty straight forward. First we need to pass these locations to our &lt;code&gt;&amp;lt;Map&amp;gt;&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (&amp;lt;Container&amp;gt;
    &amp;lt;Map locations={locations} /&amp;gt;
  &amp;lt;/Container&amp;gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, within out Map component, we need to render a pin for each of these locations by passing their latitude and longitude to the &lt;code&gt;&amp;lt;Marker&amp;gt;&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Our final Map component will look something like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";
import ReactMapGL, { Marker } from "react-map-gl";
export default function Map({ locations }) {
  const [viewport, setViewport] = useState({
    width: "100%",
    height: "100%",
    // The latitude and longitude of the center of London
    latitude: 51.5074,
    longitude: -0.1278,
    zoom: 10
  });
return &amp;lt;ReactMapGL
  mapStyle="mapbox://styles/mapbox/streets-v11"
  mapboxApiAccessToken={process.env.MAPBOX_KEY}
  {...viewport}
  onViewportChange={(nextViewport) =&amp;gt; setViewport(nextViewport)}
  &amp;gt;
  {locations.map((location) =&amp;gt; (
    &amp;lt;div key={location.id}&amp;gt;
      &amp;lt;Marker
      latitude={location.center[1]}
      longitude={location.center[0]}
      offsetLeft={-20}
      offsetTop={-10}&amp;gt;
        &amp;lt;span role="img" aria-label="push-pin"&amp;gt;📌&amp;lt;/span&amp;gt;
      &amp;lt;/Marker&amp;gt;
    &amp;lt;/div&amp;gt;
  ))}
&amp;lt;/ReactMapGL&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-the-pins-clickable" class="anchor"&gt;
  &lt;/a&gt;
  Making the pins clickable
&lt;/h2&gt;

&lt;p&gt;We’re almost there! The last thing we want to do to make these maps fully functioning and interactive, is to add a popup with the name of the place. Again, Mapbox comes with a handy Popup component that makes this easy to do. We will simply add an onClick handler to our pins which will capture the details of the selected location, then we will pass the latitude and the longitude of the selected location to our &lt;code&gt;&amp;lt;Popup&amp;gt;&lt;/code&gt; component. It’ll all be clear in a second!&lt;br&gt;
Within the Map component, add a &lt;code&gt;useState&lt;/code&gt; hook to capture the selected location.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default function Map({ locations }) {
  // UseState hook
  const [selectedLocation, setSelectedLocation] = useState({})
  const [viewport, setViewport] = useState({
    width: "100%",
    height: "100%",
    // The latitude and longitude of the center of London
    latitude: 51.5074,
    longitude: -0.1278,
    zoom: 10
  });
......
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will also modify the render block to add an onClick handler and the &lt;code&gt;&amp;lt;Popup&amp;gt;&lt;/code&gt; component that we just mentioned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;......
return &amp;lt;ReactMapGL
  mapStyle="mapbox://styles/mapbox/streets-v11"
  mapboxApiAccessToken={process.env.MAPBOX_KEY}
  {...viewport}
  onViewportChange={(nextViewport) =&amp;gt; setViewport(nextViewport)}
  &amp;gt;
  {locations.map((location) =&amp;gt; (
    &amp;lt;div key={location.id}&amp;gt;
      &amp;lt;Marker
      latitude={location.center[1]}
      longitude={location.center[0]}
      offsetLeft={-20}
      offsetTop={-10}&amp;gt;
        &amp;lt;a onClick={() =&amp;gt; {
          setSelectedLocation(location);
        }}&amp;gt;
          &amp;lt;span role="img" aria-label="push-pin"&amp;gt;📌&amp;lt;/span&amp;gt;
        &amp;lt;/a&amp;gt;
      &amp;lt;/Marker&amp;gt;
      {selectLocation.id === location.id ? (
      &amp;lt;Popup
      onClose={() =&amp;gt; setSelectedLocation({})}
      closeOnClick={true}
      latitude={location.center[1]}
      longitude={location.center[0]}&amp;gt;
        {location.place_name}
      &amp;lt;/Popup&amp;gt;) : (false)}
    &amp;lt;/div&amp;gt;
  ))}
&amp;lt;/ReactMapGL&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;&amp;lt;Popup&amp;gt;&lt;/code&gt; component takes an onClose handler which sets the selectedLocation to {}.&lt;/p&gt;

&lt;p&gt;And that is all! We’ve managed to render a map, rendered some pins on our map and managed to make them clickable with popups! Here’s our final result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0_4j2_xi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lk5uzokv8h1bm1s7x79j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0_4j2_xi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lk5uzokv8h1bm1s7x79j.png" alt="map"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mapbox</category>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What It’s Like Being A Newbie Dev</title>
      <author>Eric Fortney</author>
      <pubDate>Sat, 05 Dec 2020 04:38:39 +0000</pubDate>
      <link>https://dev.to/efortney28/what-it-s-like-being-a-newbie-dev-4coh</link>
      <guid>https://dev.to/efortney28/what-it-s-like-being-a-newbie-dev-4coh</guid>
      <description>&lt;p&gt;It’s not easy being a new Dev. We get this overwhelming feeling of “what in the hell am I supposed to do now?”- at least, I do. What’s the next project? What’s the next thing to learn? Why does everything look so bad? &lt;/p&gt;

&lt;p&gt;Well, I’m slowly starting to learn that it does get easier. The more I use React, or Vue, or whatever framework you want to use, the more I understand. It’s almost cliché at this point but, “just dive into projects, you’ll learn” really is true. &lt;/p&gt;

&lt;p&gt;The hard part, though, is figuring out what do we make? Another Twitter clone? Another todo app? I’m not sure about y’all, but I didn’t want to go with the same-ole-same-ole apps. &lt;/p&gt;

&lt;p&gt;So what did I make?&lt;br&gt;
Well, something I found useful to me. I’m also a photographer so I wanted a website where people could go and see my work, that’s where &lt;a href="https://ericfortney.netlify.app"&gt;my portfolio&lt;/a&gt; came from. I wanted something fast, easy to add to, and stylish. I would say 2/3 were achieved. &lt;/p&gt;

&lt;p&gt;But going along the lines of what to build, think about what you like to do besides coding. For me, I love space, rockets, and Formula 1. So I built a web app that uses the r/SpaceX API to display when the next SpaceX launch is. You can check out that small SPA &lt;a href="https://eloquent-heyrovsky-8d7e72.netlify.app/"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;But that honestly doesn’t help with the never ending question of “am I good enough?”&lt;/p&gt;

&lt;p&gt;From my experience, nothing tells you “yes, you are ready.” You will know; you will feel it. You will have a feeling of “Yes, I’m finally ready”&lt;/p&gt;

&lt;p&gt;And then you will get rejected, and rejected, and rejected. It sucks. I hate it. I get rejected daily. But I’m not letting it stop me. &lt;/p&gt;

&lt;p&gt;It takes minimal effort to apply for jobs. It takes all the effort to keep going. Build more. Learn more. Do more. &lt;/p&gt;

&lt;p&gt;It gets easier, but it’s never easy. &lt;/p&gt;

&lt;p&gt;What’s your feelings as a newbie? I’d love to hear in the comments! &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Devise and JWT in Rails</title>
      <author>Daniel Hintz</author>
      <pubDate>Sat, 05 Dec 2020 02:09:03 +0000</pubDate>
      <link>https://dev.to/dhintz89/devise-and-jwt-in-rails-2mlj</link>
      <guid>https://dev.to/dhintz89/devise-and-jwt-in-rails-2mlj</guid>
      <description>&lt;p&gt;I needed to implement Devise and JWT using Rails (Rails 5), and I thought, how hard could this be?  Boy was I naive...  Now there is a lot of information out there on how to do this, but each resource was using a different method and nothing really seemed to work.  Well, I've finally figured it out and I want to share it with the world for 2 reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It may save someone days of researching and trial-and-error.&lt;/li&gt;
&lt;li&gt;Selfishly, I want to know where I can go to look it up for next time&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Warning, this post will assume some knowledge of Rails and a few popular gems, it's a little bit more advanced than my normal stuff so far.  So here we go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work" class="anchor"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;First thing's first, there are a few ways this can be handled.  There is (was?) a Devise-JWT gem that integrated JWT and worked very similarly to Devise's regular flow.  When I tried to go that route, it did not work and I wasted many, many hours troubleshooting.  I did eventually succeed in registration, but the sign_in functionality was still not working.  It's very probable that this was do to user error, but regardless, I found my way to be much simpler.&lt;/p&gt;

&lt;p&gt;Here's how it works.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iejTrjD5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wsmcg0zovzuqxyexu5fh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iejTrjD5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wsmcg0zovzuqxyexu5fh.png" alt="Devise and JWT Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So basically, you can really think about this in two steps.  Step 1 is the standard devise-driven authentication.  Step 2 is passing the JSON Web Token back and forth.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementation" class="anchor"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#project-generation" class="anchor"&gt;
  &lt;/a&gt;
  Project Generation
&lt;/h4&gt;

&lt;p&gt;First, let's build our project.  Since we don't need the full Rails functionality because we'll be setting up a separate front-end, we can use the --api flag &lt;code&gt;rails new example-project --api&lt;/code&gt;.  One of the effects of this flag is that the project will be set up without rails sessions - this is important.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#gemfile" class="anchor"&gt;
  &lt;/a&gt;
  Gemfile
&lt;/h4&gt;

&lt;p&gt;Once we've built our project, first thing we'll do is build out the Gemfile.  For the purposes of our authentication flow, we'll need 3 gems&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;devise&lt;/code&gt; for actual authentication &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;jwt&lt;/code&gt; for handling the JSON Web Tokens we'll be passing back and forth.
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bcrypt&lt;/code&gt; for password-related unit testing - this only needs to be included in the test environment because otherwise it's included in Devise.&lt;/li&gt;
&lt;li&gt;BONUS: I pretty much always add &lt;code&gt;pry&lt;/code&gt; to help with debugging, and it comes in real handy when I need to check what params are coming over.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#devise-initializer" class="anchor"&gt;
  &lt;/a&gt;
  Devise Initializer
&lt;/h4&gt;

&lt;p&gt;To configure Devise, we'll run &lt;code&gt;rails generate devise:install&lt;/code&gt; from our console to create an initializer file: config/initializers/devise.rb. The good news is that we can largely keep the default configuration; the only special thing we need to do is to set &lt;code&gt;config.skip_session_storage = [:http_auth]&lt;/code&gt; &lt;em&gt;(about quarter way down the file)&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#user-model" class="anchor"&gt;
  &lt;/a&gt;
  User Model
&lt;/h4&gt;

&lt;p&gt;Now we need to set up our user model.  Devise has a special way to do this by running &lt;code&gt;rails generate devise User&lt;/code&gt;. This command creates a User model and prefills it with some Devise functionality, it also creates a database 'devise_create_users' migration, and adds a line to the routes file: &lt;code&gt;devise_for :users&lt;/code&gt; which creates routes to the default Devise Controllers.&lt;/p&gt;

&lt;p&gt;Once the User model is created, we can finish configuring Devise by selecting which modules we want and adding it after the &lt;code&gt;devise&lt;/code&gt; macro.  For my app, I just used the basic defaults: &lt;code&gt;devise :database_authenticatable, :registerable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;One last thing before we can call the User model ready.  Since a given JSON Web Token (JWT) will be associated to a given user, it makes sense to think of a user "creating" their token.  Additionally, the goal is to get as much of the app's logic in the models, so to address both of these concerns we will place the logic of creating a JWT in the User model.  Here we use the JWT gem to encode a token containing only the user's id.  How can the id be the only thing we need you ask?  Thinking back to our "How Does It Work" Diagram above, remember that the user will need to pass in their credentials as parameters at the sign-in page and, if successful, the server will issue an encrypted token for them.  This is that token, so it will only be used to authenticate that the user is who they say they are once they've &lt;strong&gt;already logged in&lt;/strong&gt; and they try to make a subsequent call to the API.  Thus, we only need a way to identify the user: their unique &lt;code&gt;id&lt;/code&gt; attribute works perfectly for this purpose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def generate_jwt
  JWT.encode({id: id, exp: 60.days.from_now.to_i}, Rails.application.secrets.secret_key_base)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#routes" class="anchor"&gt;
  &lt;/a&gt;
  Routes
&lt;/h4&gt;

&lt;p&gt;As stated above, the &lt;code&gt;rails generate devise User&lt;/code&gt; generator will create a route for us automatically that looks like this: &lt;code&gt;devise_for :users&lt;/code&gt;.  For our purposes, the default controllers aren't going to work on their own because they are meant to operate via sessions, which we will not have in our api-only implementation.  So, we'll need to overwrite some of the default functionality - to do this, we need to point to custom registrations and sessions controllers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;devise_for :users,
controllers: {
  registrations: :registrations,
  sessions: :sessions
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#database" class="anchor"&gt;
  &lt;/a&gt;
  Database
&lt;/h4&gt;

&lt;p&gt;Also stated above, the &lt;code&gt;rails generate devise User&lt;/code&gt; generator will create our database migration for us, so the only change we need to make is uncommenting any non-default modules you added in your User model, as well as adding any custom fields you may need.  Once you're done, run &lt;code&gt;rake db:migrate&lt;/code&gt; and we're done here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intermission-coffee-break" class="anchor"&gt;
  &lt;/a&gt;
  Intermission (Coffee Break)
&lt;/h2&gt;

&lt;p&gt;We've gotten through a lot already, but there's quite a bit more to come, so before we get into the controllers, which contain most of our logic and functionality, take a quick breather and grab a fresh cup of coffee.  If you're following along, this is a good time to double check that everything is correct in your app so far...&lt;/p&gt;

&lt;p&gt;Ready to continue?  Okay, let's do this!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#controllers" class="anchor"&gt;
  &lt;/a&gt;
  Controllers
&lt;/h2&gt;

&lt;p&gt;There are three controllers that we're going to be concerned with for this, and each of these 3 controllers will have a specific job from the diagram at the top of this article.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;Application Controller&lt;/strong&gt; is where we will process a JWT when a user sends a request to our API.  It's vital to keep in mind that the Application Controller is not concerned with credentials - it simply checks for a valid JWT.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Registrations Controller&lt;/strong&gt; is where a user will create his/her credentials, and it will assign the JWT to the user once complete.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Sessions Controller&lt;/strong&gt; is where a user will authenticate his/her credentials and it will assign the JWT to the user if successful.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#application-controller-lt-actioncontrollerapi" class="anchor"&gt;
  &lt;/a&gt;
  Application Controller &amp;lt; ActionController::API
&lt;/h4&gt;

&lt;p&gt;We will set up our JWT processing functionality first because, once a JWT is assigned, we'll want to check to make sure it's working correctly.  Since we know that we will be passing in JSON, we will start off the Application Controller with the following line &lt;code&gt;respond_to :json&lt;/code&gt;. Since all other controllers inherit from the Application Controller, we only need to do this for this controller - it will automatically be passed down to the rest.  This is also where we'll want to provide our app with similar private methods to what the standard Devise implementation would give us, so let's set up our authentication method &lt;code&gt;authenticate_user!&lt;/code&gt; as well as a &lt;code&gt;signed_in?&lt;/code&gt; and &lt;code&gt;current_user&lt;/code&gt; method, then we'll look at how to get them to work.&lt;/p&gt;

&lt;p&gt;For our &lt;code&gt;authenticate_user!&lt;/code&gt;, we know that we want this to reject a user as unauthorized unless they are correctly signed in.  We also know we'll eventually have a &lt;code&gt;signed_in?&lt;/code&gt; method available, so let's go ahead and proceed using that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def authenticate_user!(options = {})
  head :unauthorized unless signed_in?
end
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But for this to work, of course, we need to define &lt;code&gt;signed_in?&lt;/code&gt;.  Default Devise does this by checking the session for the presence of a user_id.  We won't have a session for this, but what we &lt;em&gt;will&lt;/em&gt; have is a JWT.  We now know that we need a method to somehow pull a user's &lt;code&gt;id&lt;/code&gt; out of the JWT and return it.  Let's call it &lt;code&gt;@current_user_id&lt;/code&gt; and use that future value in our signed_in? method like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def signed_in?
  @current_user_id.present?
end
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;While we're at it, since we know that we'll have a &lt;code&gt;@current_user_id&lt;/code&gt; to work with, let's use it to define our current_user method too.  We need this to take the id and search our database for a corresponding user record:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def current_user
  @current_user ||= super || User.find(@current_user_id)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's easy enough, essentially just copying the Devise methods, now we just have to find a way to extract that id from a passed JWT.  One final reminder: remember that this controller is &lt;strong&gt;NOT&lt;/strong&gt; meant to make sure that the user authenticates against his/her credentials, it's just to see whether they are signed in or not by looking at the JWT.  If a user &lt;em&gt;HAS&lt;/em&gt; a valid JWT, it means that they have correctly authenticated their credentials and the server &lt;em&gt;gave&lt;/em&gt; them one.  With that in mind, this is actually super simple using the &lt;code&gt;jwt&lt;/code&gt; gem:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def process_token
  jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.secrets.secret_key_base).first
  @current_user_id = jwt_payload['id']
end
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That will work, assuming that there IS an Auth header, and that it has a valid JWT.  I'm not willing to bet that either of these are always going to happen, so let's put some error handling around it.  We want to throw an error if an invalid JWT is sent, but not if there is no Auth header sent at all:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def process_token
  if request.headers['Authorization'].present?
    begin
      jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1].remove('"'), Rails.application.secrets.secret_key_base).first
      @current_user_id = jwt_payload['id']
    rescue JWT::ExpiredSignature, JWT::VerificationError, JWT::DecodeError
      head :unauthorized
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There!  Now there's just one last step.  We need to make sure that the token is processed before we try to take any other action.  To do this, we just need to add &lt;code&gt;before_action :process_token&lt;/code&gt; underneath &lt;code&gt;respond_to :json&lt;/code&gt;.  Now whenever our app is called, it will process the token (if provided) and &lt;em&gt;then&lt;/em&gt; take whatever action is required.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#registrations-controller-lt-deviseregistrationscontroller" class="anchor"&gt;
  &lt;/a&gt;
  Registrations Controller &amp;lt; Devise::RegistrationsController
&lt;/h4&gt;

&lt;p&gt;Okay, next step is to provide our app the ability to register a new user and assign them a JWT to be passed to our Application Controller for processing. As long as we're just using the default attributes for Devise (and calling them "sign_up_params", we don't need to worry about whitelisting parameters because Devise is already doing it for us.  The reason we need to have our own controller is so that we can have the user instance build its token for the controller to deliver it.  On the client side, we would use this returned token to store in a &lt;code&gt;httpOnly&lt;/code&gt; cookie, &lt;em&gt;(or whatever other storage option you prefer)&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def create
  user = User.new(sign_up_params)

  if user.save
  token = user.generate_jwt
    render json: token.to_json
  else
    render json: { errors: { 'email or password' =&amp;gt; ['is invalid'] } }, status: :unprocessable_entity
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#sessions-controller-lt-devisesessionscontroller" class="anchor"&gt;
  &lt;/a&gt;
  Sessions Controller &amp;lt; Devise::SessionsController
&lt;/h4&gt;

&lt;p&gt;Finally, the last step in our implementation!  Just gotta set up the Sessions Controller so that a user can return and sign back in, and it works the same way as the Registrations Controller.  The user will submit params through the front-end, including their email, which our API will use to query the database and return our user instance.  Then we'll validate that the password they provided matches the stored password and, if successful, we will distribute a JWT:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def create
  user = User.find_by_email(sign_in_params[:email])

  if user &amp;amp;&amp;amp; user.valid_password?(sign_in_params[:password])
    token = user.generate_jwt
    render json: token.to_json
  else
    render json: { errors: { 'email or password' =&amp;gt; ['is invalid'] } }, status: :unprocessable_entity
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrapup" class="anchor"&gt;
  &lt;/a&gt;
  Wrap-Up
&lt;/h2&gt;

&lt;p&gt;So there it is.  This is how I was finally able to get JWT working with server-side authentication using Devise, the de-facto standard for Rails.  Once I realized that JWT is really a separate process from authenticating credentials, it wasn't so bad to figure out.  Let me know what you think in the comments.  Is there a better way to combine these two gems?  Are there major issues with this implementation?  If you've successfully used &lt;code&gt;devise-jwt&lt;/code&gt;, what is the secret??&lt;/p&gt;

&lt;p&gt;Thanks so much for reading and hanging in there to the end!  Below this is just the final code (minus Gemfile and Initializer), in case you want to see it all in one place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-code" class="anchor"&gt;
  &lt;/a&gt;
  Full Code:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# User.rb
class User &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :recoverable, :rememberable, :validatable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable, :registerable

  def generate_jwt
    JWT.encode({id: id, exp: 60.days.from_now.to_i}, Rails.application.secrets.secret_key_base)
  end

end


# Routes.rb
Rails.application.routes.draw do
  devise_for :users,
  controllers: {
    registrations: :registrations,
    sessions: :sessions
  }

  root to: "home#index"
end


# Database Schema
  create_table "users", force: :cascade do |t|
    t.string "email", default: "", null: false
    t.string "encrypted_password", default: "", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["email"], name: "index_users_on_email", unique: true
  end


# ApplicationController.rb
class ApplicationController &amp;lt; ActionController::API
  respond_to :json
  before_action :process_token

  private

  # Check for auth headers - if present, decode or send unauthorized response (called always to allow current_user)
  def process_token
    if request.headers['Authorization'].present?
      begin
        jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.secrets.secret_key_base).first
        @current_user_id = jwt_payload['id']
      rescue JWT::ExpiredSignature, JWT::VerificationError, JWT::DecodeError
        head :unauthorized
      end
    end
  end

  # If user has not signed in, return unauthorized response (called only when auth is needed)
  def authenticate_user!(options = {})
    head :unauthorized unless signed_in?
  end

  # set Devise's current_user using decoded JWT instead of session
  def current_user
    @current_user ||= super || User.find(@current_user_id)
  end

  # check that authenticate_user has successfully returned @current_user_id (user is authenticated)
  def signed_in?
    @current_user_id.present?
  end

end


# RegistrationsController.rb
class RegistrationsController &amp;lt; Devise::RegistrationsController

  def create
    user = User.new(sign_up_params)

    if user.save
      token = current_user.generate_jwt
      render json: token.to_json
    else
      render json: { errors: { 'email or password' =&amp;gt; ['is invalid'] } }, status: :unprocessable_entity
    end
  end

end


# SessionsController.rb
class SessionsController &amp;lt; Devise::SessionsController

  def create
    user = User.find_by_email(sign_in_params[:email])

    if user &amp;amp;&amp;amp; user.valid_password?(sign_in_params[:password])
      token = current_user.generate_jwt
      render json: token.to_json
    else
      render json: { errors: { 'email or password' =&amp;gt; ['is invalid'] } }, status: :unprocessable_entity
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>rails</category>
      <category>authentication</category>
      <category>jwt</category>
      <category>devise</category>
    </item>
    <item>
      <title>Celebrating 25 Years of JavaScript</title>
      <author>Danielle Adams</author>
      <pubDate>Fri, 04 Dec 2020 22:04:10 +0000</pubDate>
      <link>https://dev.to/heroku/celebrating-25-years-of-javascript-2c29</link>
      <guid>https://dev.to/heroku/celebrating-25-years-of-javascript-2c29</guid>
      <description>&lt;p&gt;JavaScript turns 25 years old today. While it’s made an impact on my career as a developer, it has also impacted many developers like me and users around the world. To commemorate the our favorite language, we’ve collected 25 landmark events that have shaped the path of what the JavaScript ecosystem looks like today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1995" class="anchor"&gt;
  &lt;/a&gt;
  1995
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#1-javascript-is-created" class="anchor"&gt;
  &lt;/a&gt;
  1) JavaScript is created
&lt;/h4&gt;

&lt;p&gt;In 1995, Brendan Eich, a developer at Netscape, known for their Netscape browser, was tasked with building a client-side scripting language that paired well with Java. While it may not be the language that you know and love today, JavaScript was written in 10 days with features we still use today, such as first-class functions. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1997" class="anchor"&gt;
  &lt;/a&gt;
  1997
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#2-ecmascript-is-released" class="anchor"&gt;
  &lt;/a&gt;
  2) ECMAScript is released
&lt;/h4&gt;

&lt;p&gt;Despite JavaScript being created 2 years before, there was a need to create open standards for the language if it would be used across multiple browser types. In 1997, Netscape and Microsoft came together under Ecma International to form the first standardization of the JavaScript language, resulting in the first iteration of ECMAScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1999" class="anchor"&gt;
  &lt;/a&gt;
  1999
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#3-internet-explorer-gets-an-early-xmlhttp-object" class="anchor"&gt;
  &lt;/a&gt;
  3) Internet Explorer gets an early XMLHTTP Object
&lt;/h4&gt;

&lt;p&gt;Some will recall using &lt;code&gt;iframe&lt;/code&gt; tags in the browser to avoid reloading a user’s page with a new request. In March of 1999, Internet Explorer 5.0 is shipped with &lt;code&gt;XMLHTTP&lt;/code&gt;, a browser API that could enable developers to take advantage of background requests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2001" class="anchor"&gt;
  &lt;/a&gt;
  2001
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#4-javascript-gets-its-own-data-format" class="anchor"&gt;
  &lt;/a&gt;
  4) JavaScript gets its own data format
&lt;/h4&gt;

&lt;p&gt;In 2001, JSON was first introduced via &lt;a href="http://json.org/"&gt;json.org&lt;/a&gt;. In 2006, an RFC proposing JSON, JavaScript Object Notation, was opened for review with the proposal of more than one type of HTTP call to fulfill a website: one that would fulfill a browser’s needs and the other would provide application state. Thanks to its simplicity, JSON would gain traction as the standard and continues to be used today. (&lt;a href="http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"&gt;Source&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2005" class="anchor"&gt;
  &lt;/a&gt;
  2005
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#5-shifts-towards-ajax" class="anchor"&gt;
  &lt;/a&gt;
  5) Shifts towards AJAX
&lt;/h4&gt;

&lt;p&gt;After other browsers followed Internet Explorer in supporting background requests for updating clients without reloading pages, a researcher penned the term as Asynchronous JavaScript and XML, or AJAX, highlighting the shift in web development and JavaScript to asynchronous code. (&lt;a href="https://web.archive.org/web/20150910072359/http://adaptivepath.org/ideas/ajax-new-approach-web-applications/"&gt;Source&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2006" class="anchor"&gt;
  &lt;/a&gt;
  2006
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#6-first-publicly-released-developer-tools" class="anchor"&gt;
  &lt;/a&gt;
  6) First publicly released Developer Tools
&lt;/h4&gt;

&lt;p&gt;With more complexity being enabled in the browser, there was a need for tooling to keep up. Firebug was created in 2005 as the first Developer Tool to debug in Mozilla’s Firefox browser. It was the first piece of tooling that provided developers the ability to inspect and debug directly from the browser. (&lt;a href="https://hacks.mozilla.org/2017/10/saying-goodbye-to-firebug/"&gt;Source&lt;/a&gt;)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-jquery-is-released" class="anchor"&gt;
  &lt;/a&gt;
  7) jQuery is released
&lt;/h4&gt;

&lt;p&gt;jQuery can be considered the pioneer of what we know today as modern front-end web development, and it has gone to influence many libraries and frameworks today. At its height, being a JavaScript developer and being a jQuery developer were interchangeable. The library extends the JavaScript language to easily create single-page applications with DOM-traversal, event handling, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2008" class="anchor"&gt;
  &lt;/a&gt;
  2008
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#8-creation-of-v8" class="anchor"&gt;
  &lt;/a&gt;
  8) Creation of V8
&lt;/h4&gt;

&lt;p&gt;As websites went from HTML pages to JavaScript applications, it was imperative that the browsers hosting these applications keep up. From 2007 to 2010, many browsers made major releases to keep up with the growing demand from JavaScript compute power. When Chrome was released, the browser’s JavaScript engine, V8, was released as a separate project. V8 was a landmark project with Its “just-in-time” compiler and would be used in future projects as a reliable and fast JavaScript runtime. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-the-first-native-developer-tools" class="anchor"&gt;
  &lt;/a&gt;
  9) The first native Developer Tools
&lt;/h4&gt;

&lt;p&gt;In addition to the release of V8, Chrome introduced developers to another innovation: Developer Tools that are native to the browser. At the time, features only included element inspection and looking at resources, but the tool was an upgrade from the current tooling and would influence an entire suite of developer tools for front-end development. (&lt;a href="https://web.archive.org/web/20080923064954/http://blogs.computerworld.com/three_hidden_chrome_features_youll_love"&gt;Source&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2009" class="anchor"&gt;
  &lt;/a&gt;
  2009
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#10-commonjs-moves-to-standardize-modules" class="anchor"&gt;
  &lt;/a&gt;
  10) CommonJS moves to standardize modules
&lt;/h4&gt;

&lt;p&gt;In an effort to modularize JavaScript code and take code bases from single file scripts to multi-file source code, the CommonJS project was an effort to elevate JavaScript into language for application development. CommonJS modules would influence the Node.js module system.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#11-nodejs-takes-javascript-to-the-backend" class="anchor"&gt;
  &lt;/a&gt;
  11) Node.js takes JavaScript to the back-end
&lt;/h4&gt;

&lt;p&gt;JavaScript had gained momentum as a language for the browser for many years before making its way to the back-end. In 2009, an engineer at Joyent, Ryan Dahl, introduced Node.js, an asynchronous event-driven JavaScript runtime at JSConf EU.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#12-coffeescript-sprinkles-syntactic-sugar" class="anchor"&gt;
  &lt;/a&gt;
  12) CoffeeScript sprinkles syntactic sugar
&lt;/h4&gt;

&lt;p&gt;Long before types were popularized in JavaScript, there was CoffeeScript, a programming language that compiles to JavaScript and was inspired by Ruby, Python and Haskell. The compiler was originally written in Ruby and didn’t require compatibility from dependencies because it compiled to JavaScript, and it gained traction for exposing the good parts of JavaScript in a simple way. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2010" class="anchor"&gt;
  &lt;/a&gt;
  2010
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#13-nodejs-gets-its-first-package-manager" class="anchor"&gt;
  &lt;/a&gt;
  13) Node.js gets its first package manager
&lt;/h4&gt;

&lt;p&gt;Shortly after Node.js was introduced, npm was created. npm (short for Node package manager) would eventually create the standard in managing dependencies for both front-end and back-end applications making it easier to publish, install, and manage shared source code with a project file, the package.json. npm also provided the npm registry, which would supply hundreds of thousands of applications a database to retrieve Node.js dependencies.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#14-express-has-its-initial-release" class="anchor"&gt;
  &lt;/a&gt;
  14) Express has it’s initial release
&lt;/h4&gt;

&lt;p&gt;Inspired by Ruby’s Sinatra, Express.js was released in 2010. It was released with the intention of being a minimal, un-opinionated web framework that provided routing, middleware, and other HTTP utilities. According to GitHub, Express remains the most popular framework for back-end JavaScript developers to date.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#15-modern-javascript-mvc-frameworks-are-born" class="anchor"&gt;
  &lt;/a&gt;
  15) Modern JavaScript MVC frameworks are born
&lt;/h4&gt;

&lt;p&gt;While back-end JavaScript was gaining traction, front-end MVC frameworks were starting to pop up. Most notably, Backbone.js and AngularJS (later rewritten and released as Angular) were starting to be adopted and loved by JavaScript developers. Backbone’s approach to front-end was well-suited for mirroring an application’s business logic, while Angular took a declarative approach that enables a robust web application in the browser. Both frameworks would go on to influence later front-end libraries and frameworks, such as React, Ember.js, and Vue.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2011" class="anchor"&gt;
  &lt;/a&gt;
  2011
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#16-emberjs-stresses-convention-over-configuration" class="anchor"&gt;
  &lt;/a&gt;
  16) Ember.js stresses convention over configuration
&lt;/h4&gt;

&lt;p&gt;In 2011, a forked version of an earlier project called SproutCore, is renamed to Ember.js. Ember introduces JavaScript developers the concept of convention over configuration, in which the developer does not have to think about design decisions that can be standardized across code bases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2012" class="anchor"&gt;
  &lt;/a&gt;
  2012
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#17-static-types-are-introduced-to-javascript-developers" class="anchor"&gt;
  &lt;/a&gt;
  17) Static types are introduced to JavaScript developers
&lt;/h4&gt;

&lt;p&gt;2012 was a big year for static typed languages. JavaScript was, until then, a dynamically typed language by design, in that it doesn’t require the developer to declare types when initializing variables or other data structures. Enter TypeScript - an extension of JavaScript that allows developers to write typed JavaScript that is syntactically similar to JavaScript and compiles to JavaScript. Microsoft made the initial release of the project in October of 2012.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2013" class="anchor"&gt;
  &lt;/a&gt;
  2013
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#18-the-world-reacts-to-react" class="anchor"&gt;
  &lt;/a&gt;
  18) The world reacts to React
&lt;/h4&gt;

&lt;p&gt;In 2013, a developer at Facebook, Jordan Walke, presents a new JavaScript library that does not follow the then-popular MVC convention of JS frameworks. (&lt;a href="https://www.youtube.com/watch?v=GW0rj4sNH2w"&gt;Source&lt;/a&gt;) React, a component-based library that was simply the V of MVC, would go on to become one of the most popular libraries of today. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#19-electron-puts-nodejs-into-desktop-applications" class="anchor"&gt;
  &lt;/a&gt;
  19) Electron puts Node.js into desktop applications
&lt;/h4&gt;

&lt;p&gt;Additionally, with the rising popularity of Node.js, there was momentum to repurpose the runtime or other uses. GitHub made use of Node.js as a library with Chromium’s rendering engine and created Electron for desktop applications. Notable desktop applications that use Electron include GitHub Desktop, Slack, and Visual Studio Code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2015" class="anchor"&gt;
  &lt;/a&gt;
  2015
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#20-release-of-es2015es6" class="anchor"&gt;
  &lt;/a&gt;
  20) Release of ES2015/ES6
&lt;/h4&gt;

&lt;p&gt;The 6th edition of ECMAScript was released in June of 2015. This specification was anticipated by many JavaScript developers for its inclusion of popular features such as support for export and import of modules (ES modules), declaring constants, and more. (Source (&lt;a href="http://es6-features.org/)"&gt;http://es6-features.org/)&lt;/a&gt;) While the previous version of ECMAScript (ES5) had been released 6 years before, much of the standards released had been worked on since ES3, which was released 16 years before. (&lt;a href="http://www.ecma-international.org/ecma-262/6.0/index.html"&gt;Source&lt;/a&gt;)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#21-graphql-emerges-as-a-rest-alternative" class="anchor"&gt;
  &lt;/a&gt;
  21) GraphQL emerges as a REST alternative
&lt;/h4&gt;

&lt;p&gt;In 2015, Facebook released GraphQL as an open source project, a querying language for APIs that simplifies request calls between clients and servers to resolve the differences between server-side data schemas and client-side data needs. (&lt;a href="https://engineering.fb.com/2015/09/14/core-data/graphql-a-data-query-language/"&gt;Source&lt;/a&gt;) Due to its popularity, the project would eventually be moved to its own GraphQL Foundation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#22-node-v4-is-released" class="anchor"&gt;
  &lt;/a&gt;
  22) Node v4 is released
&lt;/h4&gt;

&lt;p&gt;2015 was notable for back-end JavaScript developers because it marked the merging of io.js back into Node.js. Just a year before, Node was forked as io.js in an effort adapt quicker release cycles. When io.js was merged back in, it had already released v3, so it was natural to release Node v4 after the merge as a fresh start for the combined projects. Hereafter, Node would adapt a release cycle that would keep it up to date with the latest V8 releases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2016" class="anchor"&gt;
  &lt;/a&gt;
  2016
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#23-javascript-developers-are-introduced-to-lock-files" class="anchor"&gt;
  &lt;/a&gt;
  23) JavaScript developers are introduced to lock files
&lt;/h4&gt;

&lt;p&gt;In the months following an infamous “left-pad” incident (&lt;a href="https://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm"&gt;Source&lt;/a&gt;), Yarn was released to the JavaScript ecosystem. Yarn was created out of need for more consistency across machines and offline environments running the same JavaScript applications. Yarn introduced the autogenerated lockfile to the JavaScript ecosystem, which would influence package managers to look at developer experience differently moving forward. (&lt;a href="https://engineering.fb.com/2016/10/11/web/yarn-a-new-package-manager-for-javascript/"&gt;Source&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2019" class="anchor"&gt;
  &lt;/a&gt;
  2019
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#24-node-js-openjs" class="anchor"&gt;
  &lt;/a&gt;
  24) Node + JS = OpenJS
&lt;/h4&gt;

&lt;p&gt;After years of the JS Foundation and Node.js Foundation operating separately, the two organizations merge and become the OpenJS Foundation with goals to increase collaboration and provide a united home for projects across the JavaScript ecosystem. (&lt;a href="https://www.linuxfoundation.org/news/2018/10/node-js-foundation-and-js-foundation-announce-intent-to-create-joint-organization-to-support-the-broad-node-js-and-javascript-communities/"&gt;Source&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2020" class="anchor"&gt;
  &lt;/a&gt;
  2020
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#25-deno-makes-a-splash-with-the-initial-release" class="anchor"&gt;
  &lt;/a&gt;
  25) Deno makes a splash with the initial release
&lt;/h4&gt;

&lt;p&gt;This year, Node.js creator, Ryan Dahl, made the initial release of Deno, a JavaScript and TypeScript engine that, again, is built on top of V8. The project has generated a lot of interest because of its first-class TypeScript support and, of course, inspiration taken from Node.js.&lt;/p&gt;

&lt;p&gt;While these landmarks highlight some exciting moments in JavaScript history, there are countless other honorable mentions and important contributions too. The JavaScript ecosystem would not be where it was without the hard work to of developers around the world today. Every pull request, conference talk, and blog post has inspired the next innovation. For that, we thank all of you for your contributions and look forward to the bright future of JavaScript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>npm</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to use Regular Expressions in JavaScript</title>
      <author>Charlotte</author>
      <pubDate>Fri, 04 Dec 2020 21:41:34 +0000</pubDate>
      <link>https://dev.to/char502/how-to-use-regular-expressions-in-javascript-5n2</link>
      <guid>https://dev.to/char502/how-to-use-regular-expressions-in-javascript-5n2</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;"Some people, when confronted with a coding problem, think "I know, I'll use regular expressions." Now they have two problems."&lt;/p&gt;

&lt;p&gt;Jamie Zawinski (world class hacker)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are Regular Expressions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A regular expression (RegEx) is &lt;a href="https://www.computerhope.com/jargon/r/regex.htm"&gt;a string of text that allows you to create patterns that help match, locate, and manage text&lt;/a&gt;. To those well versed in this dark art, RegEx can be incredibly powerful, to the rest of us they can be a source of bewilderment and confusion - or so I thought. A closer look at them recently while practicing algorithm problems for interviews revealed to me they are perhaps not as tricky as I once believed and can be extremely useful. While the subject is extensive and cannot possibly be covered in one article I wish to share a few key things that really opened my eyes to how powerful RegEx can be.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testing for a match on a string&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What if you needed to know if a string has a particular word in it? You could just do the below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The cat sat on the mat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/sat/&lt;/span&gt;

&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// result: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This basically 'tests' the string to see if the word 'sat' exists in the string.&lt;/p&gt;

&lt;p&gt;The / / in line 2 identifies to JavaScript that the characters in between are part of the regular expression. The RegEx variable can just then be combined with the test( ) method to check the string.&lt;/p&gt;

&lt;p&gt;As the result is just a returned boolean (true or false), it can be easily combined with an if/else statement or ternary operator to continue with further actions depending on whether the string is present or not.&lt;/p&gt;

&lt;p&gt;Used with an if/else statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The cat sat on the mat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/sat/&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The word sat can be found in the string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The word sat is not in the string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// result: 'The word sat can be found in the string'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Used with a ternary operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The cat sat on the mat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/sat/&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The word sat can be found in the string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The word sat is not in the string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// result: 'The word sat can be found in the string'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To further enhance this, the RegEx can include 'i' at the end of the expression like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;sat&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will make the test case insensitive so will ensure the match is true whether the word to be found has a capital letter or not.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Return the actual matched characters not just true or false&lt;/strong&gt;&lt;br&gt;
What if you need to capture the match itself for further use rather than just confirming whether the match is there or not?&lt;/p&gt;

&lt;p&gt;This can be achieved using the match( ) method. Note the syntax order is slightly different here (RegEx inside the parenthesis).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;989hjk976&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-z&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/gi&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// result: [h, j, k]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The [ ] specifies a character range (in this case any lower case letters from a-z); anything within this range will be a match. You could search for numbers instead using [0-9] or capitals using [A-Z] . You can also shorthand this by using '\w' (without quotes) which matches any word character equal to '[a-zA-Z0-9_]' (note the included underscore).&lt;/p&gt;

&lt;p&gt;The 'g' stands for global which means, 'show all the matches, not just the first one' (the RegEx reads from left to right when searching and will stop on the first positive match unless you specify otherwise).&lt;/p&gt;

&lt;p&gt;There are other flags and switches you can use if you need to be more specific:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The '+'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc123DEF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+/g&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;// result: ['abc', DEF]&lt;/span&gt;

&lt;span class="c1"&gt;//Note the + which means match 1 or more in a row&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The '.'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc123DEF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-z&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;./g&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;// result: ['ab', 'c1']&lt;/span&gt;

&lt;span class="c1"&gt;// The '.' means, 'include 1 more (of any character) after the matched string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The '^'&lt;/p&gt;

&lt;p&gt;You can also choose to NOT match something using the '^' but be careful WHERE you use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onlyReturnIfConsonant&lt;/span&gt;  &lt;span class="err"&gt;​&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;[^&lt;/span&gt;&lt;span class="sr"&gt;aeiou&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;  

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// onlyReturnIfConsonant("bananas"); // result: ['b']&lt;/span&gt;

&lt;span class="c1"&gt;// onlyReturnIfConsonant("email"); // result: null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The '^' OUTSIDE the [ ] means only check the START of the string.&lt;/p&gt;

&lt;p&gt;The '^' INSIDE the [ ] means match any character NOT in the specified set. So here only words starting with a consonant will return a result.&lt;/p&gt;

&lt;p&gt;The order can be important so accuracy is required when constructing the RegEx.&lt;/p&gt;

&lt;p&gt;There are many other flags and switches and these can often be used in combination with each other (when it makes logical sense to) but these give an example of some of the things that are possible. A great resource covering more of the specifics regarding RegEx and match( ) can be found &lt;a href="https://medium.com/front-end-weekly/a-practical-beginners-guide-to-regex-regular-expressions-2faccbda117d"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting in place using regEx and split( )&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What if, instead of just capturing the match you wanted that match to perform an action at the same time. One possible scenario concerns the use of the split( ) method. This method divides a string into an ordered list of substrings and returns them in an array. This can be very useful but how do you describe how you want the string to be separated? This is where RegEx is really helpful. An example below shows a potential use case inside a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;separateAString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;+|&lt;/span&gt;&lt;span class="se"&gt;\_&lt;/span&gt;&lt;span class="sr"&gt;+|&lt;/span&gt;&lt;span class="se"&gt;(?=[&lt;/span&gt;&lt;span class="sr"&gt;A-Z&lt;/span&gt;&lt;span class="se"&gt;])&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;separateAString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TheCat_Sat onTheMat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// result: ['The', 'Cat', 'Sat', 'On', 'The', 'Mat'] (before join())&lt;/span&gt;

&lt;span class="c1"&gt;// result: 'The Cat Sat On The Mat' (after join(" "), with spaces now included)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;As you can see, the RegEx has made this possible but what on earth does it mean?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="o"&gt;+|&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="o"&gt;+|&lt;/span&gt;&lt;span class="p"&gt;(?&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mI30FJQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tk7jipk195ldrs69v6pa.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mI30FJQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tk7jipk195ldrs69v6pa.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The \s looks for any whitespace characters (the + means 1 or more).&lt;/p&gt;

&lt;p&gt;The _ looks for any underscores, this is an example of an escaped character, where the character is defined literally (as it is) rather than some special programmatic meaning i.e. if 's' is used it is treated as an actual 's', if an '\s' is used it is treated as a whitespace character. It is not completely necessary here (an underscore doesn't need to be escaped in JavaScript) but it has been used here just to give an example. A '+' is also included here to capture 1 or more occurrences of where the underscore may be found.&lt;/p&gt;

&lt;p&gt;The '( )' means a capture group, this is a way to treat multiple characters as a single unit.&lt;/p&gt;

&lt;p&gt;The '?=[A-Z]' inside the '( )' is an example of a positive lookahead which, in this case, means: 'split a string just before any capital letter'.&lt;/p&gt;

&lt;p&gt;The | means 'or' in RegEx and is demonstrated here separating the 3 parts of the expression so: 'split wherever there is a whitespace or an underscore or just before a capital letter'. This ability to chain together different parts of an expression highlights one of the reasons RegEx can be so powerful.&lt;/p&gt;

&lt;p&gt;The join( ) method then completes the process by converting the array back into a string. The ' ' (as a specified argument in join( )) makes sure a space is added to each location in the string as specified by the split( ) method before it.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amending in place using regex and replace( )&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a final example, what if you wanted to find something in a string and replace what you've found with something else in a single step? This can be achieved with the replace( ) method.&lt;br&gt;&lt;br&gt;
Here is a basic example of replace( ) used inside a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;replaceExample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Game&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;replaceExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is a Test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// result: 'This is a Game'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The method takes two arguments, the first is the part of the passed in string to be replaced, the second is what to replace the string with.&lt;/p&gt;

&lt;p&gt;The first argument can be a string or a regular expression. If a string is used (as per the example above) only the first occurance be be replaced so already RegEx can prove it's value here (remember the 'g' flag).&lt;/p&gt;

&lt;p&gt;The example below shows a regex example with replace( ):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;separateStrings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;([&lt;/span&gt;&lt;span class="sr"&gt;a-z&lt;/span&gt;&lt;span class="se"&gt;])([&lt;/span&gt;&lt;span class="sr"&gt;A-Z&lt;/span&gt;&lt;span class="se"&gt;])&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$1 $2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;separateStrings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AnotherStringToSeparate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// result: 'Another String To Separate'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This demonstrates a new technique.&lt;/p&gt;

&lt;p&gt;This example includes two capture groups, remember the '( )' from a previous example? The first contains a range of lowercase letters [a-z]. The second contains a range of uppercase letters [A-Z].&lt;/p&gt;

&lt;p&gt;The second parameter '$1 $2' is a direct reference to these capture groups. $1 refers to the first capture group ([a-z]), $2 refers to the second capture group ([A-Z]). By taking these together in quotes and putting a space between them like so: '$1 $2' you are saying 'wherever a lowercase letter is next to an uppercase letter put a space between them'. If you do the following: '$1-$2' the string will contain a '-' between each word like this: 'Another-String-To-Separate'. This is quite a dynamic feature and could enable any number of possibilities depending on how you structure your code and RegEx. When I found this out I thought it was pretty cool!&lt;/p&gt;

&lt;p&gt;Adding spaces or characters isn't the only thing you can do either, the example below shows how you can define two capture groups then switch them round as if you were shuffling a pack of cards:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shuffleAWord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;^&lt;/span&gt;&lt;span class="se"&gt;[^&lt;/span&gt;&lt;span class="sr"&gt;aeiou&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)(\w&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$2$1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;shuffleAWord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="c1"&gt;// result: 'aingr'&lt;/span&gt;

&lt;span class="c1"&gt;// in this case '$1' is 'gr', '2' is 'ain'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first capture group '(^[^aeiou]+)' gathers all the consonants from the beginning of the word and stops when it gets to a vowel. In this example this returns as 'gr'.&lt;/p&gt;

&lt;p&gt;The second capture group gathers up all alphanumeric characters (\w*) not picked up in the first group. The '*' means 'match 0 or more of the characters referred to before it'. In this example, this returns as 'ain'.&lt;/p&gt;

&lt;p&gt;The second parameter in the replace method again shows a reference to the capture groups '$1 and $2' but this time they have been switched around and joined together '$2$1'. This then results in the following: 'aingr'.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The above examples are deliberately contrived but their purpose is to show how configurable and flexible RegEx can be when used with the methods JavaScript provides. There are many other examples but this is just a sample of those I recently found useful.&lt;/p&gt;

&lt;p&gt;In conclusion to this article there are just some final points worth mentioning.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Despite it's power and usefulness, it is &lt;a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/"&gt;advised not to overuse RegEx&lt;/a&gt; because it can make your code difficult to read&lt;/li&gt;
&lt;li&gt;If a RegEx string looks like it has the power to confuse, make sure to add some comments to help clarify what it's doing&lt;/li&gt;
&lt;li&gt;Keep it as simple and as readable as possible&lt;/li&gt;
&lt;li&gt;Constructing RegEx can be tricky but there are some really useful tools out there such as &lt;a href="https://regex101.com/"&gt;this one&lt;/a&gt; and &lt;a href="https://regexr.com/"&gt;this one&lt;/a&gt; which can make the process much easier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this article is helpful, if anyone would like to share any tips or tricks they have found particularly helpful in the world of RegEx please share them in the comments.&lt;/p&gt;

&lt;p&gt;Thanks for reading&lt;/p&gt;

</description>
      <category>regex</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Easily Implement User Authentication in React With Easybase</title>
      <author>Michael Bagley</author>
      <pubDate>Fri, 04 Dec 2020 21:39:46 +0000</pubDate>
      <link>https://dev.to/mbagley1020/how-to-easily-implement-user-authentication-in-react-gac</link>
      <guid>https://dev.to/mbagley1020/how-to-easily-implement-user-authentication-in-react-gac</guid>
      <description>&lt;p&gt;Hello! Today I'm going to detail how to easily implement user authentication in your react projects. I'll keep it as brief as possible.&lt;/p&gt;

&lt;p&gt;1) In your project directory, install the easybase-react library with &lt;code&gt;npm i easybase-react&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;2) Wrap your application's root component in the &lt;code&gt;EasybaseProvider&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;EasybaseProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEasybase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;easybase-react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EasybaseProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProjectUser&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;EasybaseProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;3) Create a project at &lt;a href="https://easybase.io"&gt;Easybase&lt;/a&gt; and download your &lt;code&gt;ebconfig.js&lt;/code&gt; token. Pass this to the &lt;code&gt;EasybaseProvider&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;EasybaseProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEasybase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;easybase-react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ebconfig&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ebconfig.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EasybaseProvider&lt;/span&gt; &lt;span class="na"&gt;ebconfig&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ebconfig&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProjectUser&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;EasybaseProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;4) Create a component that uses &lt;code&gt;isUserSignedIn()&lt;/code&gt; for conditional rendering based on the user's authentication status.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ProjectUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isUserSignedIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signUp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useEasybase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isUserSignedIn&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You're signed in!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;User not authenticated :( &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;5) Implement workflow for users to sign in and sign up via the &lt;code&gt;signUp()&lt;/code&gt; and &lt;code&gt;signIn()&lt;/code&gt; functions from the &lt;code&gt;useEasybase&lt;/code&gt; hook. Your component could work as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;usernameValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUsernameValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;passwordValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPasswordValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isUserSignedIn&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You're signed in!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;getUserAttributes&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                Clicking me only works if your authenticated!
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FrameRenderer&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Username&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;usernameValue&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setUsernameValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;passwordValue&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPasswordValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usernameValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;passwordValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                Sign In
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;signUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usernameValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;passwordValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                Sign Up
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A few notes on this implementation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can use &lt;code&gt;onSignIn()&lt;/code&gt; to run a callback function whenever a user signs in (manually from the &lt;code&gt;signIn()&lt;/code&gt; function or automatically from temporary tokens stored on a user's device).&lt;/li&gt;
&lt;li&gt;Creating an easybase account is free.&lt;/li&gt;
&lt;li&gt;Authenticated users can also make valid calls to your tables in Easybase. Here's some info on &lt;a href="https://easybase.io/react/2020/09/20/The-Best-Way-To-Add-A-Database-To-Your-React-React-Native-Apps/"&gt;stateful database array w/ Easybase and React&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>serverless</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 04 Dec 2020 16:58:58 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-2e3d</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-2e3d</guid>
      <description>&lt;p&gt;Another week is coming to a close!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week — what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Landing a new job&lt;/li&gt;
&lt;li&gt;Getting some exercise... or whatever else might spark joy ❤️&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I hope you all have a great weekend!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/TfizjuBxsXFuPNb4Ch/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/TfizjuBxsXFuPNb4Ch/giphy.gif" alt="Hip Hop Friday"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>What is API....</title>
      <author>AnkitaBagale</author>
      <pubDate>Fri, 04 Dec 2020 16:43:49 +0000</pubDate>
      <link>https://dev.to/ankitabagale/what-is-api-1m99</link>
      <guid>https://dev.to/ankitabagale/what-is-api-1m99</guid>
      <description>&lt;p&gt;Ever wondered how travel booking sites are able to list thousands of flights and hotels for a destination and showcase the cheapest option...&lt;br&gt;
The answer is &lt;strong&gt;API&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In technical terms, &lt;strong&gt;API&lt;/strong&gt; is &lt;strong&gt;Application Programming Interface.&lt;/strong&gt; The name itself says it's an interface between two programs.&lt;br&gt;
APIs let your application communicate with other applications without having to know how they’re implemented.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-api" class="anchor"&gt;
  &lt;/a&gt;
  Why API?
&lt;/h3&gt;

&lt;p&gt;Consider you are developing translation app which takes user input in English and shows translated text in Korean language. Now to implement this if you go on developing the whole program which will translate user words in Korean, you will end up making your code more complex and will spend a lot of time.&lt;br&gt;
Instead, if you use API for translation, you just need to program to take user input and display translated output. You don't need to know how the translation is taking place. Another application will have program to translate it and API will get that translated text for you. &lt;br&gt;
This can simplify app development, saving time and money. Let's see how API works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-api-work" class="anchor"&gt;
  &lt;/a&gt;
  How does API work?
&lt;/h3&gt;

&lt;p&gt;Consider you are at a restaurant and you requested Noodles to waiter. Waiter will go to the kitchen(where your Noodles are being prepared) and get your order from kitchen back to you. You may not even know how to prepare the noodles.&lt;/p&gt;

&lt;p&gt;In this above example, &lt;strong&gt;waiter&lt;/strong&gt; is &lt;strong&gt;API&lt;/strong&gt;. &lt;strong&gt;You&lt;/strong&gt; are your &lt;strong&gt;translation app&lt;/strong&gt;. &lt;strong&gt;Noodles&lt;/strong&gt; are &lt;strong&gt;translated text&lt;/strong&gt; for user's English input. &lt;strong&gt;Kitchen&lt;/strong&gt; is &lt;strong&gt;another application&lt;/strong&gt;(which have program to translate to Korean language).&lt;/p&gt;

&lt;p&gt;API allows software applications to talk to each other. but how do API transfer information then?&lt;br&gt;
There are four types of actions an API can take:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. GET: Requests data from server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET&lt;/code&gt; requests are the most common and widely used methods in APIs and websites. The &lt;code&gt;GET&lt;/code&gt; method is used to retrieve data from a resource. Like in translation app, translation app requests for translated text for user input text. &lt;code&gt;GET&lt;/code&gt; method of API brings response from server of that actual translating app. This response content is transmitted in the XML/JSON files. &lt;br&gt;
See below screenshot, if &lt;code&gt;GET&lt;/code&gt; method successfully brings response(translated text), it gives success code 200. If server is down or server is not found, it gives error code 400 in response. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ypeV-RC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qocqjgg8w6grf31sqr4i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ypeV-RC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qocqjgg8w6grf31sqr4i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since a &lt;code&gt;GET&lt;/code&gt; request is only requesting data and not modifying any resource, it's considered a safe and idempotent method.&lt;br&gt;
Idempotent means making multiple identical requests must produce the same result every time until server content is not changed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. POST: Sends new information to a server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In web services, &lt;code&gt;POST&lt;/code&gt; requests are used to send data to the API server to create new data in resource. &lt;br&gt;
Consider you are filling a sign up form, when you enter your personal information and click on sign up, it takes entered data in format of XML/JSON/query parameters as &lt;code&gt;POST&lt;/code&gt; request to the server where all the signed up users data gets stored.&lt;br&gt;
If personal information is successfully stored in server, then we get 200 status code for &lt;code&gt;POST&lt;/code&gt; request in response.&lt;br&gt;
&lt;code&gt;POST&lt;/code&gt; request is not idempotent. Every time we send data to store using &lt;code&gt;POST&lt;/code&gt; request, it creates new data in resource.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. PUT: Makes changes to existing data on server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PUT&lt;/code&gt; request is same as &lt;code&gt;POST&lt;/code&gt; request. Difference is &lt;code&gt;PUT&lt;/code&gt; request is idempotent. Every time we send data using &lt;code&gt;PUT&lt;/code&gt; request to the API server to create data in resource, it checks if the data in resource is already present, if present then it updates the existing data in resource. If not present, it creates data in resource.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. DELETE: Removes existing info from server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DELETE&lt;/code&gt; operations are idempotent. If you &lt;code&gt;DELETE&lt;/code&gt; data, it’s removed from the resource. Requesting &lt;code&gt;DELETE&lt;/code&gt; data second time will return a 404 error code in response.&lt;/p&gt;




&lt;p&gt;It is important that we know what basically happens when we include anything new in our programs. I hope beginners will find this article helpful when working with APIs.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Practical Guide to SVG for Web to Print [+ 4 Free Tools]</title>
      <author>Tanya</author>
      <pubDate>Fri, 04 Dec 2020 16:03:25 +0000</pubDate>
      <link>https://dev.to/tetyanailchenko/a-practical-guide-to-svg-for-web-to-print-4-free-tools-158l</link>
      <guid>https://dev.to/tetyanailchenko/a-practical-guide-to-svg-for-web-to-print-4-free-tools-158l</guid>
      <description>&lt;p&gt;When it comes to creating or just adding graphical assets to the website, you can choose raster formats like popular PNG, JPG, GIF, or vector, like SVG, AI, or EPS. Nevertheless, using SVG format on the web is gaining popularity and becomes a powerful tool in the hands of designers, developers, and even printers. If you want to create logos, icons, animation, or use the image for print, SVG format is as applicable as ever. Let’s get deep into this, and we will explain what SVG is, how to use this, and why this is in demand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-svg" class="anchor"&gt;
  &lt;/a&gt;
  What is SVG?
&lt;/h2&gt;

&lt;p&gt;SVG, or Scalable Vector Graphic, is a vector-based graphics in &lt;a href="https://www.w3schools.com/xml/default.asp"&gt;XML format&lt;/a&gt; which is used for the web and works with JavaScript, CSS, DOM, and other standards. Basically, an SVG image contains lines and curves, which can have any color value. However, some complicated SVG files can have embedded PNG, JPG images, or SVG image itself.&lt;/p&gt;

&lt;p&gt;Created with XML, vector images can be scaled to any size without losing resolution and still can look like high-quality images, even in huge sizes. Unlike PNG, the larger the image, the less the quality. Let’s take a look at the example of zoomed SVG and PNG images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4NxAgmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/Xq1TSLfDbRMM0bgsqkcS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4NxAgmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/Xq1TSLfDbRMM0bgsqkcS.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-benefits-of-using-svg" class="anchor"&gt;
  &lt;/a&gt;
  What benefits of using SVG?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Scalable and adaptive to all screens&lt;/strong&gt;. All SVG assets are displayed in good quality on different screens like desktop, mobile, tablets, etc. Providing users high-grade images regardless of their devices is one of the main parts of an excellent user experience. &lt;/li&gt;
&lt;li&gt;You can use a &lt;strong&gt;text editor&lt;/strong&gt; to work with simple SVG graphics, for example, Notepad. This can significantly save your time on installing additional software and figuring out how to work with this. However, for the more complex graphic configuration, you may need to use some tools. I will provide a list of them at the end of the article.&lt;/li&gt;
&lt;li&gt;SVG is &lt;strong&gt;supported by all modern browsers&lt;/strong&gt; like Safari, Chrome, Firefox, etc.&lt;/li&gt;
&lt;li&gt;Compared to raster images, SVG has a &lt;strong&gt;smaller file size&lt;/strong&gt;. It is known that site speed plays a crucial role. Typically, the user leaves the page if it takes longer than 3 seconds to load. Therefore, having SVG assets instead of PNG can improve this indicator.&lt;/li&gt;
&lt;li&gt;SVG can be not only static. Because SVG format works with JavaScript, you can &lt;strong&gt;create animation&lt;/strong&gt;, which can significantly improve your website performance. &lt;/li&gt;
&lt;li&gt;Regardless of size, SVG images are &lt;strong&gt;high-quality&lt;/strong&gt;, which is well suited for printing.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-does-the-svg-file-consist-of" class="anchor"&gt;
  &lt;/a&gt;
  What does the SVG file consist of?
&lt;/h2&gt;

&lt;p&gt;SVG file consists of text - SVG markup. Every SVG file starts with a &lt;em&gt;&lt;/em&gt; tag, which contains the image’s width and height attributes. After this tag, you can add any shapes you need to create the desired graphic. For example, let’s start with a basic SVG image that contains only one line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;svg height="210" width="500"&amp;gt;
  &amp;lt;line x1="30" y1="100" x2="400" y2="20" 
   style="stroke:rgb(115, 3, 252);stroke-width:4" /&amp;gt;
&amp;lt;/svg&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yK7tpRwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/K6jxJZ0ZPgQbVrSktNmh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yK7tpRwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/K6jxJZ0ZPgQbVrSktNmh.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SVG uses a two-dimensional system of coordinates. This system starts from the top left corner (0,0). As you can see, the  contains the start point - &lt;em&gt;x1,y1&lt;/em&gt;, the endpoint - &lt;em&gt;x2,y2&lt;/em&gt;, style attribute defining color in RGB, and the line width. You may have already noticed that this code contains some HTML code. This means that every SVG graphics can be embedded into an HTML page directly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shapes" class="anchor"&gt;
  &lt;/a&gt;
  Shapes
&lt;/h2&gt;

&lt;p&gt;The line is just one of the basic predefined shapes which you can use for graphic creation. &lt;br&gt;
You can also draw other shapes like &lt;em&gt;circle, rectangle, ellipse, polyline, and polygon&lt;/em&gt; using respective XML tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;circle cx="190" cy="120" r="100" 
          stroke="black" stroke-width="1" 
          fill="white" /&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XV3Fzz9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/nAyXxHHotRCAtetMGh27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XV3Fzz9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/nAyXxHHotRCAtetMGh27.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;polygon points="230,20 270,200 130,240" 
           style="fill:white;stroke:black; 
           stroke-width:1" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ZXWY38h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/7gcDpQadQh9H6RHh0oxF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ZXWY38h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/7gcDpQadQh9H6RHh0oxF.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-complex-shapes" class="anchor"&gt;
  &lt;/a&gt;
  More complex shapes
&lt;/h2&gt;

&lt;p&gt;Having basic shapes allows you to create plain assets. However, what if you want to create a more complicated design with unusual shapes? Here is why the &lt;em&gt;&lt;/em&gt; was created for. This attribute allows you to create curves, open and clothed paths and is one of the most adaptable SVG elements. If you want to use &lt;em&gt;&lt;/em&gt;, we recommend using professional tools for SVG creation instead of plain text editors. &lt;/p&gt;

&lt;p&gt;The idea of &lt;em&gt;&lt;/em&gt; is that all lines or shapes are built sequentially, from one point to another point. The tag &lt;em&gt;&lt;/em&gt; has a main &lt;em&gt;attribute d&lt;/em&gt;, which consists of commands that can create graphics.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the rectangle created using a path.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svg&amp;gt;
    &amp;lt;path d="M0,0 L300,0 L300,100 L0,100 Z" 
    style="fill:rgb(200,50,170)"/&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;M&lt;/em&gt; set coordinates of the first point. In our case, this point starts from the top left corner. &lt;em&gt;L&lt;/em&gt; means draw the line from the current point to the specified one. &lt;em&gt;Z&lt;/em&gt; is used to complete the path and closes it. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YESkhZuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/nJf1r0wPlPDMIwOJ3dRe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YESkhZuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/nJf1r0wPlPDMIwOJ3dRe.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same result you will get if you use the basic shape.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svg&amp;gt;
  &amp;lt;rect width="300" height="100" 
  style="fill:rgb(200,50,170)" /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;&lt;/em&gt; has many other commands that allow you to draw arcs, curves, horizontal or vertical connections with two points. You can read more about all path commands &lt;a href="https://www.w3schools.com/graphics/svg_path.asp"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-i-add-text-to-svg" class="anchor"&gt;
  &lt;/a&gt;
  Can I add text to SVG?
&lt;/h2&gt;

&lt;p&gt;Yes, text can be added to SVG using the &lt;em&gt;&lt;/em&gt; tag. As for other elements, you should define coordinates for your text. Text color, size, and font values are also feasible. Please consider that font size should not be bigger than y coordinates because your text will look not entirely. You can also apply a style to your text using CSS properties. For example, &lt;em&gt;font-style, font-weight, text-transform&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Text in SVG is indexed flawlessly, so it is an excellent opportunity to keep improving your SEO. Regardless this is a standalone file or file embedded in HTML, search engines can recognize the text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svg &amp;gt;
  &amp;lt;text x="80" y="60" font-size="40" 
   font-weight="bold" fill="green"&amp;gt; 
   Text here!
  &amp;lt;/text&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OGUYI7oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/gC8c0R3LqtZJt8ysNEDY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OGUYI7oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/gC8c0R3LqtZJt8ysNEDY.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, adding text through &lt;em&gt;&lt;/em&gt; tag can cause some problems with the font-family attribute. For example, when you specify a &lt;em&gt;font-family&lt;/em&gt; that is not available on the user’s web browser or is not installed on the desktop, tablet, etc., then this font will not be displayed correctly, or a font similar to it will be used instead. This may be risky, especially for those who sell personalized products for their decoration industries struggling to satisfy customers’ needs. In Liveart, we handle this by using vectorized text. We convert TTF, WOFF, OTF, or PFB files to JS file, where every symbol has its own &lt;em&gt;&lt;/em&gt;. This approach allows displaying text correctly without the additional need to install the font. &lt;/p&gt;

&lt;p&gt;Using vectorized text is also a good approach when you need to convert your SVG file to PNG, JPG, or PDF and use it for printing, as text elements will be displayed precisely with the font preserving. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strokes-filters-effect-and-shadows" class="anchor"&gt;
  &lt;/a&gt;
  Strokes, filters, effect, and shadows
&lt;/h2&gt;

&lt;p&gt;To have your design more sophisticated, you can apply some filters, effects, and strokes. Strokes are used to define the color of a line or text. Besides color, you can set line thickness using the &lt;em&gt;stroke-width&lt;/em&gt; property or even create dashed lines with the &lt;em&gt;stroke-dasharray&lt;/em&gt; property*.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svg&amp;gt;
    &amp;lt;path stroke="black" stroke-width="6" 
     stroke-dasharray="10,10" 
     d="M10 20 L230 20" /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1fxkf35x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/stroke_svg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1fxkf35x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/stroke_svg.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When working with strokes outline, you may face some issues with the stroke-width attribute. By default, width changes are applied to the outside and inside and cause changes in text thickness itself. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Old version of LiveArt HTML5 Designer (v0.10).&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h4L7VEIp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://img.newtonideas.com/LiveArt%2520HTML5%2520%281%29.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h4L7VEIp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://img.newtonideas.com/LiveArt%2520HTML5%2520%281%29.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strokes in web to print requires preserving the initial appearance of the text - size, thickness, etc. In the last version of LiveArt Designer, this issue was solved by changing only the outside part of the stroke while saving the original text size. Having a properly configured stroke is an essential part of output generation and its further usage. Here you can check how strokes should work:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Actual version of LiveArt HTML5 Designer (v1.0).&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2VOadYY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://img.newtonideas.com/Custom%2520Web2Print%2520Editor%2520Live%2520Demo%2520%282%29.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2VOadYY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://img.newtonideas.com/Custom%2520Web2Print%2520Editor%2520Live%2520Demo%2520%282%29.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are also a lot of filter elements that you can apply to your graphics. For example, &lt;em&gt;&lt;/em&gt; for blur effect, &lt;em&gt;&lt;/em&gt; for shadow effect, or &lt;em&gt;&lt;/em&gt; for blending two images, and many others.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svg&amp;gt;
 &amp;lt;defs&amp;gt;
  &amp;lt;filter id="f0" x="0" y="0"&amp;gt;
    &amp;lt;feGaussianBlur in="SourceGraphic" stdDeviation="15" /&amp;gt;
  &amp;lt;/filter&amp;gt;
 &amp;lt;/defs&amp;gt;
 &amp;lt;rect width="200" height="200" stroke="black" stroke-width="5" 
  fill="red" filter="url(#f0)" /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---SRfhPYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/filter_svg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---SRfhPYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/filter_svg.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To identify the unique filter name, we should use the &lt;em&gt;id&lt;/em&gt; attribute. You can also control the blur size with the &lt;em&gt;stdDeviation&lt;/em&gt; attribute.&lt;/p&gt;

&lt;p&gt;Unfortunately, filters are not supported by all browsers. Google Chrome supports filters only from version 8.0, Safari - from version 6.0, Opera - from version 9.6, Internet Explorer from version 10.0, and Firefox from version 3.0. To provide your users with a good experience, make sure that a default element (without filters) looks good.&lt;/p&gt;

&lt;p&gt;When talking about the web to print, it is quite risky to use filters for production output as we are not entirely sure that the customer’s browser will support this. However, LiveArt uses filters to visualize products and create a good impression during customization. We show some parts with thread effect for products like socks to get the product preview as real as possible. One more case where effects can be applied is custom jewelry products or custom tags. For such products, we suggest applying an effect to the text to make it more visible on the reference that will be used for the stamping.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z8BE5IUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/tag.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z8BE5IUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/tag.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can achieve a stamped effect not only with SVG filters but also using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow"&gt;CSS based on text-shadow property&lt;/a&gt;, yet the last one has no SVG filter flexibility and features.&lt;/p&gt;

&lt;p&gt;More about SVG in LiveArt&lt;/p&gt;

&lt;p&gt;LiveArt relies on the SVG format and considers it as one of the most convenient and flexible in usage. Developing robust solutions for more than ten years, we understood that vector format is useful for our customers. Therefore, we have implemented the support of multicolored SVG graphics in our &lt;a href="https://www.liveartdesigner.com/live-demo/html5-product-designer"&gt;online design software&lt;/a&gt;, which you can use from our free artwork gallery or upload your own. SVG format allows you to resize the image to any size without getting a “Low-resolution warning.” Moreover, SVG is easy to output and ready to use without any extra conversions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S-Xl3Clo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/artwork_svg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S-Xl3Clo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/artwork_svg.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As well as graphics preparation, LiveArt also uses SVG format for product preparations, especially for multicolored uniforms. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jvEqTvK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/product_svg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jvEqTvK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.newtonideas.com/product_svg.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These graphics need preliminary preparation. If you are interested in preparing vector graphics, you can check our &lt;a href="https://docs.liveartdesigner.com/graphics-preparation.html"&gt;documentation&lt;/a&gt; or see our &lt;a href="https://www.youtube.com/watch?v=jnIY3N5_-yg&amp;amp;ab_channel=LiveArtDesigner"&gt;YouTube video&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free-tools" class="anchor"&gt;
  &lt;/a&gt;
  Free tools
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#inkscape" class="anchor"&gt;
  &lt;/a&gt;
  Inkscape
&lt;/h3&gt;

&lt;p&gt;Inkscape is an open-source tool for creating vector-based graphics. This tool allows rendering primitive shapes, changing colors, applying filters, adding text, working with paths, and object transformation. Developed for working with SVG files, this tool became one of the most popular free tools among designers and developers. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#snapsvg" class="anchor"&gt;
  &lt;/a&gt;
  Snap.svg
&lt;/h3&gt;

&lt;p&gt;Snap.svg is one of the most popular JavaScript libraries that was developed for working with SVG. It is entirely open-source, free, and not inferior in functionality to such libraries as SVG.js, Two.js, and D3.js. This library can work with existing SVG files and as well as with Snap generated. This library has a powerful API that can be useful for developers. Besides static SVG files, you can create animation and provide more engagement to your website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-draw" class="anchor"&gt;
  &lt;/a&gt;
  Method Draw
&lt;/h3&gt;

&lt;p&gt;Method Draw is a straightforward online SVG editor. You do not need to install it on your desktop because this tool is available online, and you even do not need to sign up. The interface is straightforward and easy to use but provides a robust set of tools for graphic creation. You can export graphics as SVG and PNG. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svgomg" class="anchor"&gt;
  &lt;/a&gt;
  SVGOMG
&lt;/h3&gt;

&lt;p&gt;SVGOMG is a free UI wrapper over SVGO that was created by Jake Archibald for optimizing and simplifying SVG images. This tool has a lot of features like removing metadata, raster images, viewbox, hidden element, empty text, and even prettify your markup. You can preview all changes by simply clicking on the respective buttons. This software is useful for developers and can help with SVG preparation for further work.&lt;/p&gt;

&lt;p&gt;Thanks for reading! Welcome to share your experience working with SVG format. Any ideas where you could use it as a developer?&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>design</category>
    </item>
    <item>
      <title>Follow #adventofcode if you're into that kind of thing</title>
      <author>Ben Halpern</author>
      <pubDate>Fri, 04 Dec 2020 15:50:10 +0000</pubDate>
      <link>https://dev.to/ben/follow-adventofcode-if-you-re-into-that-kind-of-thing-19nf</link>
      <guid>https://dev.to/ben/follow-adventofcode-if-you-re-into-that-kind-of-thing-19nf</guid>
      <description>&lt;p&gt;Advent of code is going on, and I just felt like nudging folks towards that DEV tag if you're interested in following along.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mileswatson" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iIENA1-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--iquHW-9U--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/513901/79e991df-e4a8-4466-9482-ca710de87f85.jpeg" alt="mileswatson image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mileswatson/why-you-should-be-doing-advent-of-code-it-s-not-too-late-to-start-3n83" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why You Should Be Doing Advent of Code (it's not too late to start)&lt;/h2&gt;
      &lt;h3&gt;Miles Watson ・ Dec  2 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#adventofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#algorithms&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__tag ltag__tag__id__16515"&gt;
  
    .ltag__tag__id__16515 .follow-action-button{
      background-color: #22500A !important;
      color: #FF8B8B !important;
      border-color: #22500A !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="/t/adventofcode" class="ltag__tag__link"&gt;adventofcode&lt;/a&gt; 
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Posts about the Advent of Code challenges 🎄🎅🏻
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Happy coding ❤️&lt;/p&gt;

</description>
      <category>adventofcode</category>
      <category>meta</category>
    </item>
    <item>
      <title>WTF really is full-stack? Breaking down confusion on software roles and job descriptions</title>
      <author>Barry</author>
      <pubDate>Fri, 04 Dec 2020 15:18:31 +0000</pubDate>
      <link>https://dev.to/_bkern/wtf-really-is-full-stack-breaking-down-confusion-on-software-roles-and-job-descriptions-21fa</link>
      <guid>https://dev.to/_bkern/wtf-really-is-full-stack-breaking-down-confusion-on-software-roles-and-job-descriptions-21fa</guid>
      <description>&lt;p&gt;Software job descriptions and roles are filled with a bunch of noise. They span front-end technologies and frameworks, back-end technologies and frameworks, sometimes they mention types or styles of programming, sometimes they mention certain tooling related to something specific,  and they sprinkle in some cloud terminology for fun. Am I qualified? Do I need to know web development to get a job? What is full-stack? It is very confusing. &lt;/p&gt;

&lt;p&gt;While I don't think we will see all this confusion go away, I want to provide you with my view of the world based on my experiences. I think seeing through my perspective can help you better categorize potential roles and what they might be about. Additionally, for those that really do not know what is out there, I hope this helps you choose where you may want to start. &lt;/p&gt;

&lt;p&gt;What makes this complex is these things change based on industry, level, company size, amongst other things. The smaller a company you join the more responsibilities and roles you might have. If you join a very large corporation you might be more focused on a smaller set of responsibilities. Every piece of software is unique but I think that a lot of them share common characteristics and roles you might find. &lt;/p&gt;

&lt;p&gt;At the highest level I break down software development into three buckets:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnhiEzjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bkern.dev/static/1072340d3df3a6c45a5de3bff1e7e53c/8ce52/bucketsprogramming.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnhiEzjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bkern.dev/static/1072340d3df3a6c45a5de3bff1e7e53c/8ce52/bucketsprogramming.png" alt="buckets of programming"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#related-to-development" class="anchor"&gt;
  &lt;/a&gt;
  Related to development
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Roles that you interact with as an engineer, may not start out as (but could), and you could always transition to&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;project management and BA's&lt;/li&gt;
&lt;li&gt;QA/QE/SDET&lt;/li&gt;
&lt;li&gt;UX/XD&lt;/li&gt;
&lt;li&gt;Designer&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#specializations" class="anchor"&gt;
  &lt;/a&gt;
  Specializations
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Mostly programming but involves other things depending on specialization. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Devops&lt;/li&gt;
&lt;li&gt;Mobile&lt;/li&gt;
&lt;li&gt;Systems Programming&lt;/li&gt;
&lt;li&gt;Data Engineering&lt;/li&gt;
&lt;li&gt;Data Science&lt;/li&gt;
&lt;li&gt;Proprietary Software&lt;/li&gt;
&lt;li&gt;Games&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-rest-of-the-programming-that-is-not-100-the-other-two" class="anchor"&gt;
  &lt;/a&gt;
  The rest of the programming that is not 100% the other two
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Full-time programming that doesn't fit any of the specializations. Still tons of fun and awesome&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Front-End&lt;/li&gt;
&lt;li&gt;Back-End&lt;/li&gt;
&lt;li&gt;Full-Stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Does this cover everything? No, for sure I missed things. The strangest part is honestly it's hard to box in anyone one person/role. Most likely, you could find yourself doing a little of many of these while focusing primarily on one area. That is totally normal for me. Check out this abstract piece of art:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--45nFJtNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bkern.dev/static/082b1a9294d14f1f84b33a534ff1689e/c08c5/jene-stephaniuk--MCrF6hnojU-unsplash.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--45nFJtNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bkern.dev/static/082b1a9294d14f1f84b33a534ff1689e/c08c5/jene-stephaniuk--MCrF6hnojU-unsplash.jpg" alt="abstract art"&gt;&lt;/a&gt;&lt;br&gt;
Similar to this but thinking of your role or career as a blank canvas - I doubt your canvas will be solidly one color. Could it? yea. But my opinion is most people do a mix of a lot of things or move around during their career. Your canvas might end up more like this piece of art? There are a million variations and they are all great. No one way is better for your career.   &lt;/p&gt;

&lt;p&gt;I break all these down below to help inform you. The point isn't to divide us or say X is greater than Y. I am creating this so you can better understand what's out there. Selfishly, I wish I had this when I started. I had no idea about the programming world and no one to explain it to me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#roles-on-a-team-that-are-not-what-i-think-of-as-juniorstarting-engineering-but-you-could-transition-to-if-they-interest-you" class="anchor"&gt;
  &lt;/a&gt;
  Roles on a team that are not what I think of as junior/starting engineering &lt;em&gt;but&lt;/em&gt; you could transition to if they interest you:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#some-form-of-project-managementbusiness-analysts" class="anchor"&gt;
  &lt;/a&gt;
  Some form of project management/business analysts:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You will not program here &lt;/li&gt;
&lt;li&gt;You often encounter lots of mention of Agile, Scrum, PMP, etc. All software management related.&lt;/li&gt;
&lt;li&gt;I highlight this because the best people in this role &lt;em&gt;understand&lt;/em&gt; software and I have seen people successfully transition to these roles if they decide that is their passion. &lt;/li&gt;
&lt;li&gt;If you can straddle the technical/business gap you provide a lot of value. You can explain technical concepts and ideas and sell them to the business. You can also take what the business wants and communicate effectively with the engineering team to get these changes planned and implemented.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#quality-assurance-quality-engineering-software-developer-in-test" class="anchor"&gt;
  &lt;/a&gt;
  Quality Assurance / Quality Engineering / Software Developer in Test
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You definitely will program here however not &lt;em&gt;all&lt;/em&gt; the time&lt;/li&gt;
&lt;li&gt;You will be focused on testing&lt;/li&gt;
&lt;li&gt;This may sound boring but there are a lot of engineering problems in this layer and interesting things to work on&lt;/li&gt;
&lt;li&gt;You must love quality and details etc. &lt;/li&gt;
&lt;li&gt;Communication and attention to detail are very important in this role. &lt;/li&gt;
&lt;li&gt;You must understand software and its components well. &lt;/li&gt;
&lt;li&gt;I have seen some people recommend this as a way to get in the door and transition to full-time software engineering (My thought here is I don't know and wherever you think you are going to start be direct and ask about a move like this)&lt;/li&gt;
&lt;li&gt;I have seen entry-level/junior jobs as a developer in test so I misspoke&lt;/li&gt;
&lt;li&gt;I have also seen software engineers transition to this and be very successful&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#user-experience-interaction-design" class="anchor"&gt;
  &lt;/a&gt;
  User Experience / interaction design
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Not much if any programming here&lt;/li&gt;
&lt;li&gt;Most of what they produce is wireframes or mock-ups that demonstrate flows/interactions&lt;/li&gt;
&lt;li&gt;A lot of focus on the user and how they interact with the software. &lt;/li&gt;
&lt;li&gt;There is specific training for these types of individuals and if you only know engineering it might take some work to retrain for this area.&lt;/li&gt;
&lt;li&gt;These roles are vital to ensure what your building is going to work for the clients/consumers.&lt;/li&gt;
&lt;li&gt;As an engineer /power user of most tooling you forget how people interact with your site and what might be confusing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#designer" class="anchor"&gt;
  &lt;/a&gt;
  Designer
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Sometimes gets grouped with UX &lt;/li&gt;
&lt;li&gt;Similar? skillset but focused more on the look and feel of the site&lt;/li&gt;
&lt;li&gt;Produces static assets for sites/software in the proper format&lt;/li&gt;
&lt;li&gt;Strong background in graphic design&lt;/li&gt;
&lt;li&gt;Strong CSS skills and can publish style guides or work on styling for the site&lt;/li&gt;
&lt;li&gt;Sometimes programming in front-end technologies but usually programming is not their main task.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#specializations" class="anchor"&gt;
  &lt;/a&gt;
  Specializations
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#security" class="anchor"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Strong programming skills&lt;/li&gt;
&lt;li&gt;Strong computer/software security skills&lt;/li&gt;
&lt;li&gt;Strong knowledge of Linux / DevOps &lt;/li&gt;
&lt;li&gt;This role varies wildly because there are so many things it could mean&lt;/li&gt;
&lt;li&gt;Some roles only do audits, some work specifically administering certain tools, some do penetration testing, others focus solely on say identity and access management. &lt;/li&gt;
&lt;li&gt;this area is extremely large and hard to summarize&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#devops" class="anchor"&gt;
  &lt;/a&gt;
  DevOps
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This is another umbrella term that can mean a million things&lt;/li&gt;
&lt;li&gt;Some programming is typically involved in the glue code that customizes existing products &lt;/li&gt;
&lt;li&gt;Strong knowledge of Linux helps&lt;/li&gt;
&lt;li&gt;Containers/ VMs/ and friends&lt;/li&gt;
&lt;li&gt;Kubernetes might pop up&lt;/li&gt;
&lt;li&gt;Knowledge of one or more cloud providers (Azure/Aws/GCP top 3)&lt;/li&gt;
&lt;li&gt;You might work more in system programming rather than web programming &lt;/li&gt;
&lt;li&gt;Ultimately idea is using code/templates to automate infrastructure &lt;/li&gt;
&lt;li&gt;Strong troubleshooting skills needed&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#mobile" class="anchor"&gt;
  &lt;/a&gt;
  Mobile
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I separated this because I see it as a specialty. You can obviously 'share' code in certain frameworks and perhaps write everything in javascript (flutter or react-native or who knows) &lt;/li&gt;
&lt;li&gt;However I always see a need an area for native mobile development&lt;/li&gt;
&lt;li&gt;This is all external  observation but I see some people who only do ios/swift and some who only do android however I also see a lot of people that love mobile and go between the two&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#systems-programming" class="anchor"&gt;
  &lt;/a&gt;
  Systems Programming
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Entire focus on programming related to systems  ugh my definition sucks here is Wikipedia&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;System programming (or systems programming) is the activity of programming system software. The primary distinguishing characteristic of systems programming when compared to application programming is that application programming aims to produce software which provides services to the user (e.g. word processor), whereas systems programming aims to produce software which provides services to the computer hardware (e.g. disk defragmenter). It requires a greater degree of hardware awareness.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;languages (c and its variants, go, rust, I'm sure others)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#data-engineering" class="anchor"&gt;
  &lt;/a&gt;
  Data Engineering
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This is an umbrella term as well but I see a whole group of programmers that are focused on moving data/ consuming data/ analyzing data that is separate from everything else. &lt;/li&gt;
&lt;li&gt;General DB knowledge is good but typically a lot of different frameworks and tools used based on needs&lt;/li&gt;
&lt;li&gt;Some of this is done  and could be in proprietary software like data visualization software (this is an entire career field)&lt;/li&gt;
&lt;li&gt;Some of this could be all in Hadoop / Spark looking to move data around &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#data-science" class="anchor"&gt;
  &lt;/a&gt;
  Data Science
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Another umbrella term. Tons of hype and buzz wordiness so be careful but there is a lot of opportunities here&lt;/li&gt;
&lt;li&gt;AI/ML  live here &lt;/li&gt;
&lt;li&gt;specialized knowledge necessary &lt;/li&gt;
&lt;li&gt;a lot of training options and from what I see even degree programs&lt;/li&gt;
&lt;li&gt;Definitely programming but focused on this world &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#proprietary-software" class="anchor"&gt;
  &lt;/a&gt;
  Proprietary Software
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This is an umbrella term to represent tooling and software that one could spend a lifetime administering and doing some type of programming&lt;/li&gt;
&lt;li&gt;Mainly Salesforce comes to mind but I know others exist&lt;/li&gt;
&lt;li&gt;Very specialized in that you need inherent knowledge about the software and how it works to use it/customize it/ extend it&lt;/li&gt;
&lt;li&gt;Lots of certifications available here to help you learn&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#games" class="anchor"&gt;
  &lt;/a&gt;
  Games
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lots of math&lt;/li&gt;
&lt;li&gt;very specialized&lt;/li&gt;
&lt;li&gt;some roles overlap in this world like UX/designers/project managers/QA &lt;/li&gt;
&lt;li&gt;Unity, Unreal fit in here.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-rest-of-the-programming-that-is-not-100-the-other-two" class="anchor"&gt;
  &lt;/a&gt;
  The rest of the programming that is not 100% the other two
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#frontend" class="anchor"&gt;
  &lt;/a&gt;
  Front-End
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I like to define the Front-End as everything from the API layer upwards&lt;/li&gt;
&lt;li&gt;Most likely Javascript or some flavor of language that ultimately produces JS&lt;/li&gt;
&lt;li&gt;Other technologies exist thought for what it is worth&lt;/li&gt;
&lt;li&gt;The front end technologies and frameworks seem to evolve at a faster pace than the back-end so a lot of constant learning&lt;/li&gt;
&lt;li&gt;Usually I see this role share responsibilities from other areas (design/UX/QA) and it just depends on the role&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#backend" class="anchor"&gt;
  &lt;/a&gt;
  Back-End
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I like to define this as everything from the API on down&lt;/li&gt;
&lt;li&gt;Tons of language options, frameworks, it really depends on the place you end up and what their 'stack' is&lt;/li&gt;
&lt;li&gt;Usually I see this role share responsibilities from other areas (DevOps/QA/Front-End) again it all &lt;em&gt;depends&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Produce services / APIs/contracts for consumers &lt;/li&gt;
&lt;li&gt;There is a lot of interesting software that lurks in this area that doesn't provide services to the web but perhaps deals with moving data around or keeping things in synch. &lt;/li&gt;
&lt;li&gt;Interacts with data layers / involved with potentially many persistence/caching technologies&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fullstack" class="anchor"&gt;
  &lt;/a&gt;
  Full-Stack
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This term is ambiguous and everyone defines it differently. Its not my favorite term because of this and if you see a use that confuses or if someone asks you if you are full-stack or you see it used in a description my best advice is to ask for clarity. &lt;/li&gt;
&lt;li&gt;I think of it as someone that does work in both the back end and front end&lt;/li&gt;
&lt;li&gt;These could be separate languages/ the same languages/ etc &lt;/li&gt;
&lt;li&gt;You could use a framework that assists in doing it all in one and maybe that to whoever is full-stack &lt;/li&gt;
&lt;li&gt;It's quite hard these days to know everything well - I have no doubts you could for your particular solution but I think that's why there are specializations these days. &lt;/li&gt;
&lt;li&gt;Ultimately, find what you like - if you like doing front end and back end work that's awesome and find roles that let you do both&lt;/li&gt;
&lt;li&gt;Some places will have separate teams for these two and you won't be able to concurrently do both. Some places will let you. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One last thing. You don't need to pick exactly one &lt;em&gt;'thing'&lt;/em&gt;. In fact, I think saying you will only do &lt;em&gt;'x'&lt;/em&gt; without trying at least some other stuff is hazardous very early in your career. Even if you do pick an 'x' remember you learned 'x' and you can learn z,y,q, etc. You are never stuck and can always work on moving around. It might take some work and you might have to ramp up on other things or change employers to find something different but that is ok! All of these areas are fun, 'good', and could be a career. It's most important you are happy with your work.&lt;/p&gt;

&lt;p&gt;If you liked this article, check out: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/_bkern/my-1-tip-for-developers-starting-out-4381"&gt;My #1 tip for new developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/_bkern/how-to-be-one-of-the-best-junior-developers-76f"&gt;How to be one of the best junior developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What do you think? Do you still have any confusion? Let me know on Twitter and &lt;a href="https://twitter.com/_bkern"&gt;follow me there&lt;/a&gt; for more development, programming, and general software engineering content. &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>Using Docker Containers In Jobs - GitHub Actions</title>
      <author>Mihindu Ranasinghe</author>
      <pubDate>Fri, 04 Dec 2020 15:13:35 +0000</pubDate>
      <link>https://dev.to/mihinduranasinghe/using-docker-containers-in-jobs-github-actions-3eof</link>
      <guid>https://dev.to/mihinduranasinghe/using-docker-containers-in-jobs-github-actions-3eof</guid>
      <description>&lt;p&gt;👉 Prerequisites &lt;/p&gt;

&lt;p&gt;If you are new to GitHub Actions, I suggest you to read these articles&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/mihinduranasinghe/introduction-to-github-actions-part-1-1d6p"&gt;Introduction to Github Actions - GitHub Actions (Part 1)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/mihinduranasinghe/working-with-environment-variables-github-actions-part-2-46po"&gt;Working with environment variables - GitHub Actions(Part 2)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/mihinduranasinghe/working-with-external-actions-github-actions-part-3-3895"&gt;Working with external actions - GitHub Actions (Part 3)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;As we discussed in previous articles, we can run our workflows in virtual machines by using operating systems that GitHub Actions provides as GitHub Hosted Runners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-docker-container" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Using Docker Container&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We can use a docker container which will be installed on the the  virtual machine &amp;amp; then instead of running directly on virtual machine, our workflow will runs on a particular container.&lt;/p&gt;

&lt;p&gt;&lt;i&gt; &lt;strong&gt;This can be an image from Docker Hub.&lt;/strong&gt; &lt;/i&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#docker-hub" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Docker Hub&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Docker Hub is the platform which allows users to create, manage, and deliver their container applications. Docker Hub is the largest library of container images.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--44VZ_TKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hnsyfj4zh1y5cg4phukr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--44VZ_TKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hnsyfj4zh1y5cg4phukr.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you click on an image (For example Node), you can see all the dockerfile links with the respective tags.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kyEkqQ1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wiior329v7okszi25woe.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kyEkqQ1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wiior329v7okszi25woe.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-to-use-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to use ?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You have to provide the, &lt;br&gt;
&lt;strong&gt;publisher-dockerhub-username : docker-image-tag&lt;/strong&gt; with the image tag under the "container:" &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can not use containers on windows and mac-os virtual machines.&lt;/li&gt;
&lt;li&gt;We can use containers only on ubuntu machines.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
name: workflow-name
on: push

jobs:
  job-name:
    runs-on: ubuntu-latest
    container:
      image: dockerhub-username:docker-image-tag

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;container&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;push&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;node-docker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node:14.15.0-alpine3.12&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Also you can provide some other parameters like environment variables, ports &amp;amp; options...etc&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;container&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;push&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;node-docker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node:14.15.0-alpine3.12&lt;/span&gt;

     &lt;span class="c1"&gt;#env:&lt;/span&gt;
     &lt;span class="c1"&gt;#  ENV1: Available to this container only&lt;/span&gt;

     &lt;span class="c1"&gt;#ports: To expose our container&lt;/span&gt;

     &lt;span class="c1"&gt;#options: --cpus 1 --host&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So in next figure you can confirm that steps are running inside the container we initialized with dockerhub image, instead of running directly on the virtual machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;container&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;push&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;node-docker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node:14.15.0-alpine3.12&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
         &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Log the node version&lt;/span&gt;
           &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
             &lt;span class="s"&gt;node -v&lt;/span&gt;
             &lt;span class="s"&gt;cat /etc/os-release  &lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we echo the node version of the image and some operating system information of the docker container.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WSsNQGDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tnwy3fccih0i9gwtgeds.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WSsNQGDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tnwy3fccih0i9gwtgeds.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#we-can-also-specify-multiple-containers-to-run-as-services" class="anchor"&gt;
  &lt;/a&gt;
  We can also specify multiple containers to run as services.
&lt;/h2&gt;

&lt;p&gt;If you have an application to run multiple services, you might need multiple images to run in our virtual machine. Normally we use &lt;strong&gt;Docker-Compose&lt;/strong&gt; to do something like that, **but in GitHub Actions we have a similar way to run this type of applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-multiple-docker-containers-in-a-job" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Running multiple docker containers in a job.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Instead of having container here, we can provide "services: "&lt;br&gt;
We can give the services as docker-images under the "services:" and they run as separate containers in our virtual machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;workflow-name&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;push&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;job-name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;service-name-1&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dockerhub-username:docker-image-1&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
           &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;3001:3000&lt;/span&gt;

      &lt;span class="na"&gt;service-name-2&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dockerhub-username:docker-image-2&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
           &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;4001:4000&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get from service-1&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://localhost:3001/api/users&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get from service-2&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://localhost:4001/api/items&lt;/span&gt;


      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;post a user example&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;curl&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-x&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;POST&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;http://localhost:3001/api/user&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-H&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;'Content-Type:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;application/json'&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-d&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;'{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;username"\&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;\"hello"\, \"address"\&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sampleaddress"&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here it creates two containers for service-1 &amp;amp; service-2 inside our virtual machine&lt;/p&gt;

&lt;p&gt;In order to communicate between those two containers, we can use the service-name as the host name in the app.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#running-docker-containers-in-individual-steps" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Running docker containers in individual steps.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In GitHub Actions, we can use different containers in different steps as well. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We can use "with:" key to provide inputs to this container in the particular step&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can give an &lt;strong&gt;entrypoint&lt;/strong&gt; in &lt;strong&gt;with:&lt;/strong&gt; key and override the entrypoint of the dockerfile&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To find some entrypoints of the echo, node ...etc use this commands&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ex 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type -a  echo
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Output - Entrypoint of echo in ubuntu:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo is  /bin/echo
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Ex 2 :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type -a  node
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Output - Entrypoint of node in ubuntu:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node is  usr/local/bin/echo
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Use this "type -a " command in ubuntu to find some Entrypoints of the installed tools &amp;amp; softwares.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;container&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;push&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;node-docker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node:14.15.0-alpine3.12&lt;/span&gt;
      &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
         &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Log the parent container node version&lt;/span&gt;
           &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
             &lt;span class="s"&gt;node -v &lt;/span&gt;
           &lt;span class="c1"&gt;# Echo the node version of the parent container&lt;/span&gt;


         &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Log the step container node version&lt;/span&gt;
           &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker://node:12.14.1-alpine3.10&lt;/span&gt;
           &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
             &lt;span class="na"&gt;entrypoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;usr/local/bin/echo&lt;/span&gt;
             &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;-v&lt;/span&gt;
            &lt;span class="c1"&gt;# Echo the node version of this step container based on this 12.14.1-alpine3.10 image&lt;/span&gt;


         &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Step with docker to echo a string&lt;/span&gt;
           &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker://node:12.14.1-alpine3.10&lt;/span&gt;
           &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
             &lt;span class="na"&gt;entrypoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/bin/echo&lt;/span&gt;
             &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Hello Docker !&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Push the workflow file into the repository &amp;amp; check the &lt;strong&gt;Actions&lt;/strong&gt; window of the repository&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Outputs:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;v14.15.0
v12.14.1
Hello Docker !

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;👉 What's Next?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=""&gt;Trigger workflows manually using the repository dispatch event&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thank-you" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Thank You&lt;/strong&gt;
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#hope-you-all-enjoyed-and-learned-something-from-this-let-me-know-your-comments-and-suggestions-in-the-discussion-section" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Hope you all enjoyed and learned something from this. Let me know your comments and suggestions in the discussion section.&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;

</description>
      <category>github</category>
      <category>docker</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
