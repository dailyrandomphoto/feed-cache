<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Embrace Working From Home</title>
      <author>‚Ç≥GEEK</author>
      <pubDate>Tue, 24 Aug 2021 02:51:10 +0000</pubDate>
      <link>https://dev.to/ageekdev/how-to-embrace-working-from-home-155o</link>
      <guid>https://dev.to/ageekdev/how-to-embrace-working-from-home-155o</guid>
      <description>&lt;p&gt;Even before the COVID-19 pandemic made working from home routine for millions, increasing numbers of people had been saying goodbye to their onerous commute to work. Many kinds of work can be done just as effectively, if not more so, from a home office.&lt;/p&gt;

&lt;p&gt;Whether you are a freelancer, an &lt;a href="https://ageek.dev/become-an-indie-maker"&gt;indie maker&lt;/a&gt;, an indie developer, a company part-timer, or a full-time employee who just doesn't hit the office on certain days or at all, working from home is a way to escape the daily grind.&lt;/p&gt;

&lt;p&gt;For employers, &lt;a href="https://ageek.dev/remote-working"&gt;remote working&lt;/a&gt; can boost productivity, reduce turnover, and lower organizational costs, while employees enjoy perks like flexibility and the lack of a commute.&lt;/p&gt;

&lt;p&gt;Efficiency and flexibility are some of the top reasons that people want to work from home, along with shorter hours.&lt;/p&gt;

&lt;p&gt;But sometimes flexibility is too much of a good thing. When your office is always there, waiting, with that deadline looming over your head, it's pretty hard to just close the door and pretend you've left for the day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deep-work"&gt;
  &lt;/a&gt;
  Deep Work
&lt;/h2&gt;

&lt;p&gt;Working from home takes a lot of effort to be effective. It's going to be a sizable time commitment. But just how big of a time commitment do I need to find success?&lt;/p&gt;

&lt;p&gt;So how many hours should I work per week? There's no correct answer. The hours I work are a meaningless measure as long as I'm not making money. Popular recommends are extensive work hours, substantial sacrifices, giving up sleep, 60 to 100 hours per week, and on and on.&lt;/p&gt;

&lt;p&gt;You know what I do everyday? Write some code, answer a question, send an email, check Facebook, write some code, check on babies, write some more code!&lt;/p&gt;

&lt;p&gt;Each switch consumes my energy and time, both of which are finite resources. The most critical effect of constant task switching is that I never enter a state of deep focus and concentration.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The bottom line is to work as many hours as I can without harming my personal life, productivity and overall health.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The real question is can I still be successful if I work less hours? No one can promise that, but there are tons of researches show that working intensely (deep work) is better than longer hours (shallow work), and I'll still have a bit of time for myself and my family.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shallow work&lt;/strong&gt; is the present reality for a lot of people, characterized by a distracted work mindset and un-engaging tasks that return mediocre results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deep work&lt;/strong&gt; involves picking a single task and focusing on it without any distraction, expected to increase productivity and improve work quality.&lt;/p&gt;

&lt;p&gt;Scientists generally agree that the ideal daily working time is around 6 hours, and more concentrated in the morning. This is what being practiced in Sweden, and they are currently experiencing significant success.&lt;/p&gt;

&lt;p&gt;To start embracing deep work, I put aside 4 hours of highly-focused distraction-free in the morning for difficult tasks like writing new content or developing new product features. Anything unimportant will be done during rest of the day as shallow work.&lt;/p&gt;

&lt;p&gt;Initially day-to-day attempts at deep work don‚Äôt feel adequate for a goal I'm striving towards; it does take time to change the temptation of long working hours. I often combine deep work with batch working lifestyle, buffering tasks for the whole weeks or months ahead.&lt;/p&gt;

&lt;p&gt;According to my personal tracking statistics, the result surprises me after couple months following deep work strategy, I accomplished more work as twice as before when I worked literally 10 to 12 hours daily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#batch-working"&gt;
  &lt;/a&gt;
  Batch Working
&lt;/h2&gt;

&lt;p&gt;After years of being highly multitasking, I have been feeling so stressful and less productive, harder to achieve something significant, and tend to finish only less important tasks in to-do lists.&lt;/p&gt;

&lt;p&gt;Multitasking has become such a regular part of my life that I believe I do it well, until I found out that this lifestyle can cause brain damage.&lt;/p&gt;

&lt;p&gt;Multitasking might seem like I'm accomplishing multiple things at the same time, but what I'm really doing is quickly shifting my attention and focus from one thing to the next.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Batch working&lt;/strong&gt; is highly-focused, topic-specific forms of working, dividing my workflow into different long time blocks (days, weeks, months) of one topic instead of jumping around from task to task constantly.&lt;/p&gt;

&lt;p&gt;Instead of repeating the same thing day after day, I only have to do it every month or so and then are able to work in a state of focus instead of scrambling.&lt;/p&gt;

&lt;p&gt;Some people like focusing by days, where I prefer to focus by ‚Äúproject‚Äù. However you decide, it will help me become more efficient, free up mental space, creates a feeling of being ‚Äúahead‚Äù, reduces stress, and allows you to think with strategy.&lt;/p&gt;

&lt;p&gt;The main thing that batch working brings to your business is efficiency. When your plan is clear for the day, it is easy to show up, focus in for an hour or two, and get the job DONE. Instead of half-done, or 99% done, it sets the stage for focused work that is wildly efficient. With just a few hours of focused work, you can be done with one task and not have to think about it again.&lt;/p&gt;

&lt;p&gt;I‚Äôve tried batching my days (terrible, I barely got anything ‚Äòbatched‚Äô and barely got through my workload), batching my weeks (I got round to my ‚Äòbatching tasks‚Äô by Thursday, so‚Ä¶. not great) and batching whole months (so far, this one seems to be working pretty well for me).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#worklife-balance"&gt;
  &lt;/a&gt;
  Work-Life Balance
&lt;/h2&gt;

&lt;p&gt;Work-life balance is the state of equilibrium where a person equally prioritizes the demands of one's career and the demands of one's personal life. It has numerous positive effects, including less stress, a lower risk of burnout and a greater sense of well-being.&lt;/p&gt;

&lt;p&gt;But no entity can be optimally efficient at more than one thing. The more limited the goals, the higher one‚Äôs chance of efficiency. A multipurpose machine ‚Äì human or corporate ‚Äì is always going to be less efficient than one which is dedicated to a single purpose.&lt;/p&gt;

&lt;p&gt;Focusing on one thing to the exclusion of all others has its costs. We might well accept a measure of inefficiency ‚Äì in professional and personal life ‚Äì in exchange for diversity and less boredom.&lt;/p&gt;

&lt;p&gt;Some days, you might focus more on work, while other days you might have more time and energy to pursue your hobbies or spend time with your loved ones.&lt;/p&gt;

&lt;p&gt;Work-life balance will mean different things to different people because, after all, we all have different life commitments. In our always-on world, balance is a very personal thing, and only you can decide the lifestyle that suits you best.&lt;/p&gt;

&lt;p&gt;I prefer to prioritize than balance my work-life, balancing seems illusive and temporary to me. I do think the will toward mastery is deeply wired into most of us, it can be deeply uncomfortable along the way and we doubt our ability to become expert.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>remote</category>
    </item>
    <item>
      <title>Java Interfaces</title>
      <author>Patricia Nicole</author>
      <pubDate>Tue, 24 Aug 2021 01:26:46 +0000</pubDate>
      <link>https://dev.to/pat_the99/java-interfaces-306o</link>
      <guid>https://dev.to/pat_the99/java-interfaces-306o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#interfaces-in-java"&gt;
  &lt;/a&gt;
  üìå Interfaces in Java
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;An interface is a reference type, similar to a class that can contain &lt;strong&gt;only&lt;/strong&gt; constants, method signatures, default methods, static methods and nested types. &lt;/li&gt;
&lt;li&gt;Interfaces cannot be instantiated - they can only be implemented by classes and extended by other interfaces.&lt;/li&gt;
&lt;li&gt;Note that an interface can extend any number of interfaces. The interface declaration can include a comma-separated list of all the interfaces that it extends.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-interface-body"&gt;
  &lt;/a&gt;
  The Interface Body
&lt;/h3&gt;

&lt;p&gt;The interface body can contain &lt;strong&gt;abstract methods, default methods and static methods&lt;/strong&gt;. All of these methods in an interface are &lt;strong&gt;implicitly&lt;/strong&gt; &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, and &lt;code&gt;final&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#implementing-an-interface"&gt;
  &lt;/a&gt;
  Implementing an Interface
&lt;/h4&gt;

&lt;p&gt;A class can implement more than one interface. The &lt;code&gt;implements&lt;/code&gt; keyword is followed by a comma-separated list of the interfaces implemented by the class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-an-interface-as-a-type"&gt;
  &lt;/a&gt;
  Using an Interface as a Type
&lt;/h3&gt;

&lt;p&gt;When a new interface is defined, a new reference data type is defined. The interface names can be used anywhere a data type can be used. If a variable is assigned an interface type, any object assigned to it must be an instance of a class that implements the interface.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#evolving-interfaces"&gt;
  &lt;/a&gt;
  Evolving Interfaces
&lt;/h3&gt;

&lt;p&gt;To avoid the scenario where implementing classes need to change because of the additions to the implemented interface:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new interface that extends to the changed interface. In this way, implementing classes only need to change what interface to implement, whether the child or the parent. Now users of the code can choose to continue to use the old interface or to upgrade to the new interface.&lt;/li&gt;
&lt;li&gt;Alternatively, new methods can be defined as default methods. Since implementations are provided for default methods,  users who have classes that implement interfaces enhanced with default or static methods do not have to modify or recompile them to accomodate the additional methods.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#default-methods"&gt;
  &lt;/a&gt;
  Default Methods
&lt;/h3&gt;

&lt;p&gt;Default methods enable one to add new functionality to the interfaces of the library to ensure binary compatibility with code written for older versions of that interfaces.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A default method in an interface is defined with the &lt;code&gt;default&lt;/code&gt; keyword at the beginning of the method signature. All method declarations in an interface, including default methods are implicityly public so the &lt;code&gt;public&lt;/code&gt; modifier can be omitted.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#extending-interfaces-that-contain-default-methods"&gt;
  &lt;/a&gt;
  Extending Interfaces that Contain Default Methods
&lt;/h4&gt;

&lt;p&gt;When an interface with a default method is extended, &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There is no need to mention the default method at all, which lets the extended interface inherit the default method&lt;/li&gt;
&lt;li&gt;The default method can be redeclared which makes it abstract&lt;/li&gt;
&lt;li&gt;The default method can be redefined by overriding it&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#static-methods"&gt;
  &lt;/a&gt;
  Static Methods
&lt;/h3&gt;

&lt;p&gt;A static method can also be defined in an interface. It is a method that is associated with the class in which it is defined rather than with any object. Every instance of the class shares its static methods. Now this helps in organizing helper methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrating-default-methods-into-existing-libraries"&gt;
  &lt;/a&gt;
  Integrating Default Methods into Existing Libraries
&lt;/h3&gt;

&lt;p&gt;Default methods enable the addition of new functionality to existing interfaces and ensure binary compatibilty with code written for older versions of those interfaces. In particular, default methods enable the addition of methods that accept lambda expressions as parameters to existing interfaces.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;An interface declaration can contain method signatures, default methods, static methods and constant definitions. The only methods that have implementations are default and static methods&lt;/li&gt;
&lt;li&gt;A class that implements an interface must implement all the mothods declared in the interface.&lt;/li&gt;
&lt;li&gt;An interface name can be used anywhere a type can be used.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cheers to continued learning üçª!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  RESOURCES
&lt;/h3&gt;

&lt;p&gt;[1] &lt;a href="https://docs.oracle.com/javase/tutorial/java/concepts/interface.html"&gt;Java Doc, What is an Interface&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Learn How Dataclasses Work in Python</title>
      <author>Jerry Ng</author>
      <pubDate>Tue, 24 Aug 2021 01:16:35 +0000</pubDate>
      <link>https://dev.to/jerrynsh/learn-how-dataclasses-work-in-python-37a2</link>
      <guid>https://dev.to/jerrynsh/learn-how-dataclasses-work-in-python-37a2</guid>
      <description>&lt;p&gt;It is common for us to work with simple data structures such as a Tuple (&lt;code&gt;tuple&lt;/code&gt;) or a Dictionary (&lt;code&gt;dict&lt;/code&gt;) in Python. We use them almost everywhere and every day in our lives programmers to store data.&lt;/p&gt;

&lt;p&gt;For instance, we can represent a car object with the code example below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Using Dictionary
&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Model X"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"brand"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Tesla"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# OR using Tuple
&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Model X"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Tesla"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yet, these basic data structures become less ideal when we have to deal with more complex data. Here, we would need to remember that car represents a car Dictionary or Tuple in our app, not some string or integer.&lt;/p&gt;

&lt;p&gt;Using Tuple to represent our car object in the example above works just fine if we only have three fields (&lt;code&gt;name&lt;/code&gt;, &lt;code&gt;brand&lt;/code&gt;, and &lt;code&gt;price&lt;/code&gt;). As we add more fields into our car object such as &lt;code&gt;manufacturer&lt;/code&gt;, &lt;code&gt;condition&lt;/code&gt;, etc., we would need to remember our attributes' order.&lt;/p&gt;

&lt;p&gt;For the case of using Dictionary, we would not able to use &lt;a href="https://www.askpython.com/python/built-in-methods/dot-notation"&gt;dot notation&lt;/a&gt; (i.e. &lt;code&gt;car.name&lt;/code&gt;) to access our attributes. Plus, a deep-nested Dictionary tends to be very messy to work with.&lt;/p&gt;

&lt;p&gt;Here, we are going to talk about better alternatives to our regular Dictionary or Tuple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topics-covered"&gt;
  &lt;/a&gt;
  Topics covered
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Named Tuple&lt;/li&gt;
&lt;li&gt;  Data Classes, a better alternative to Named Tuple&lt;/li&gt;
&lt;li&gt;  Customizing Data Classes&lt;/li&gt;
&lt;li&gt;  When to use Data Classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs start!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#named-tuple-to-the-rescue"&gt;
  &lt;/a&gt;
  Named Tuple To The Rescue
&lt;/h2&gt;

&lt;p&gt;A more common approach is to use Named Tuple (&lt;code&gt;namedtuple&lt;/code&gt;) from Python's built-in &lt;a href="https://docs.python.org/3/library/collections.html"&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;Using our car example above here is what Named Tuple would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;

&lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Car'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'brand'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'price'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Much better. So, why not just use Named Tuple all the time?&lt;/p&gt;

&lt;p&gt;Well, Named Tuple does come with its own sets of restrictions. Besides not being able to assign a default value to our car properties, Named Tuple is immutable by nature.&lt;/p&gt;

&lt;p&gt;Here‚Äôs an explanation from PEP &lt;a href="https://www.python.org/dev/peps/pep-0557/#why-not-just-use-namedtuple"&gt;on why we shouldn‚Äôt just use Named Tuple&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Moreover, using Dictionary, Tuple, or even Named Tuple does not allow us to have custom class methods, which begs the question: why not just use the regular &lt;a href="https://docs.python.org/3/tutorial/classes.html?"&gt;Python Class&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#python-class"&gt;
  &lt;/a&gt;
  Python Class
&lt;/h2&gt;

&lt;p&gt;In Python, everything is an object, and most objects have attributes and methods. Typically, we would use &lt;code&gt;class&lt;/code&gt; in Python to create our own custom objects with their own properties and methods.&lt;br&gt;
Using our previous example to create a simple car object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;brand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brand&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;


&lt;span class="n"&gt;car1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;car2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;car1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;car2&lt;/span&gt; &lt;span class="c1"&gt;# False. We need to write our own __eq__ method to handle this.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every time a new property is added to our car object, we would need to pass them into the &lt;code&gt;__init__&lt;/code&gt; method. What if we needed to add a more descriptive representation of our car object to our &lt;code&gt;__repr__&lt;/code&gt; method? What if we need to compare two car instances of the same car object?&lt;/p&gt;

&lt;p&gt;Honestly, things aren‚Äôt that bad when we‚Äôre only dealing with a single car object. But what if we have to add more classes such as &lt;code&gt;Manufacturer&lt;/code&gt;, &lt;code&gt;CarDealer&lt;/code&gt;, etc.?&lt;/p&gt;

&lt;p&gt;As you can already tell, the signs of code duplication are everywhere, and it smells! Truth to be told, unless we actually need custom methods, we might be better off using Named Tuple.&lt;/p&gt;

&lt;p&gt;As the bearer of bad news, this is often not the case in real life.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#enter-data-classes"&gt;
  &lt;/a&gt;
  Enter Data Classes
&lt;/h2&gt;

&lt;p&gt;Introduced in Python 3.7, &lt;a href="https://docs.python.org/3/library/dataclasses.html"&gt;Data Classes&lt;/a&gt; (&lt;code&gt;dataclasses&lt;/code&gt;) providers us with an easy way to make our class objects less verbose. To simplify, Data Classes are just regular classes that help us abstract a tonne of boilerplate codes.&lt;/p&gt;

&lt;p&gt;To rewrite our previous example with Data Class, we simply have to decorate our basic class with &lt;code&gt;@dataclass&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="c1"&gt;# Supports typing out of the box!
&lt;/span&gt;    &lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;

&lt;span class="n"&gt;car1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;car2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;car1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;car2&lt;/span&gt; &lt;span class="c1"&gt;# True. __eq__ is generated automatically.
&lt;/span&gt;
&lt;span class="n"&gt;car2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="c1"&gt;# Supports dot annotation!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The best part of Data Class is that it automatically generates common &lt;a href="https://www.geeksforgeeks.org/dunder-magic-methods-python/"&gt;Dunder methods&lt;/a&gt; in the class such as the &lt;code&gt;__repr__&lt;/code&gt; and &lt;code&gt;__eq__&lt;/code&gt;, eliminating all the duplicated code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customizing-data-class"&gt;
  &lt;/a&gt;
  Customizing Data Class
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In certain cases, we might need to customize our Data Class fields:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# To exclude this field from comparison
&lt;/span&gt;   &lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# To hide fields in __repr__
&lt;/span&gt;   &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;
   &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'New'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To override what happens after &lt;code&gt;__init__&lt;/code&gt; inside our newly created Data Class, we can declare a &lt;code&gt;__post_init__&lt;/code&gt; method. For example, we can easily override the price of the car based on its initialized condition:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;
   &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'New'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__post_init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"Old"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;30_000&lt;/span&gt;

&lt;span class="n"&gt;old_car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130_000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Old'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Car(name='Model X', price=100000, condition='Old')
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To make our Data Class immutable, we simply have to add &lt;code&gt;@dataclass(frozen=True)&lt;/code&gt; as our decorator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another good use case of Data Class is when we need to deal with nested Dictionary. Here‚Äôs a simple example of what a Data Class could do:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ...
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CarDealer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;car3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model S'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;car4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model Y'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;car_dealer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CarDealer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;car3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;car4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# CarDealer(cars=[Car(name='Model S', price=89000, condition='New'), Car(name='Model Y', price=54000, condition='New')])
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, in case it wasn‚Äôt obvious, Data Class supports inheritance too as they indeed behave just like our good old regular class.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#so-when-to-use-data-class"&gt;
  &lt;/a&gt;
  So, when to use Data Class?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#vs-named-tuple"&gt;
  &lt;/a&gt;
  vs. Named Tuple
&lt;/h3&gt;

&lt;p&gt;The use of Data Class is most often compared with the use of Named Tuple. For the most part, Data Class offers the same advantage if not more than Named Tuple.&lt;/p&gt;

&lt;p&gt;In the case where you need to &lt;a href="https://www.w3schools.com/python/python_tuples_unpack.asp"&gt;unpack&lt;/a&gt; your variables, you might want to consider using Named Tuple instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vs-dictionary"&gt;
  &lt;/a&gt;
  vs. Dictionary
&lt;/h3&gt;

&lt;p&gt;When our Dictionary has a fixed set of keys where their corresponding values have fixed types, it is almost always better to use Data Class.&lt;/p&gt;

&lt;p&gt;In short, the rule of thumb is rather simple, if you create a Dictionary or a Class that mostly consists of attributes about the underlying data, use Data Class. It saves you a bunch of time.&lt;/p&gt;

&lt;p&gt;Finally, Data Class also preserves type information for each property, which is a huge added advantage!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;Again, there is nothing wrong with just creating regular classes in Python. However, that could mean writing a lot of repetitive and boilerplate code just to set up our class instance.&lt;/p&gt;

&lt;p&gt;To summarize what we went through, Data Class is great because it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Saves time and reduce code duplication&lt;/li&gt;
&lt;li&gt;  Offers more flexibility, it can be mutable or immutable&lt;/li&gt;
&lt;li&gt;  Supports inheritance&lt;/li&gt;
&lt;li&gt;  Allows for customization and default values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don‚Äôt get me wrong. Not every class in Python needs to be a Data Class. A Data Class is not a silver bullet.&lt;/p&gt;

&lt;p&gt;For the most part, we should always keep in mind that we shouldn‚Äôt complicate things if we don‚Äôt have to. As long as we‚Äôre not dealing with something overly complex, a good old Dictionary might just do the job.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to save data in localStorage using JavaScript</title>
      <author>Michael Burrows</author>
      <pubDate>Tue, 24 Aug 2021 00:36:42 +0000</pubDate>
      <link>https://dev.to/michaelburrows/how-to-save-data-in-localstorage-using-javascript-994</link>
      <guid>https://dev.to/michaelburrows/how-to-save-data-in-localstorage-using-javascript-994</guid>
      <description>&lt;p&gt;In this tutorial you‚Äôll learn how to use &lt;code&gt;localStorage&lt;/code&gt; a property of the window interface that allows you to access a storage object from the browser. To give you an understanding of how &lt;code&gt;localStorage&lt;/code&gt; works we‚Äôll be building a simple note taking application that will save and delete data in the &lt;code&gt;localStorage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let‚Äôs get started by creating a form to add new notes and an unordered list to display the saved notes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"note-form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"note-input"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"+ Add Note"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"note-submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Save&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"notes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now for the JavaScript functionality, first we‚Äôll declare variables for the HTML elements we‚Äôll be working with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noteForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;note-form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noteInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;note-input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noteSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;note-submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also save any existing notes to a &lt;code&gt;noteStorage&lt;/code&gt; variable to make them easier to work with. If there isn‚Äôt any notes in the &lt;code&gt;localStorage&lt;/code&gt; yet we‚Äôll just an empty array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;notesStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we‚Äôll add the functionality to save a new note when the form is submitted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;noteForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;notesStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noteInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notesStorage&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;listBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noteInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;noteInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This pushes the new note into into the &lt;code&gt;notesStorage&lt;/code&gt; then updates the &lt;code&gt;notes&lt;/code&gt; in the &lt;code&gt;localStorage&lt;/code&gt;. We then call a &lt;code&gt;listBuilder&lt;/code&gt; function which adds the note to the unordered list element in our HTML markup, here‚Äôs the code for that function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listBuilder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;note&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &amp;lt;button onclick="deleteNote(this)"&amp;gt;x&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The notes are now being saving in localStorage and displayed in the HTML. However if the page is refreshed the notes would no longer display in the HTML so we need to loop through each of the notes in &lt;code&gt;localStorage&lt;/code&gt; when the page is loaded and re-render them in the HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getNotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;getNotes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;listBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last thing we need to do is add the functionality for the delete button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteNote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;notesStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notesStorage&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gets the index of the list item to delete and removes it from both the HTML and &lt;code&gt;localStorage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That‚Äôs all for this tutorial. Hopefully it‚Äôs given you an understanding of how to work with data in the &lt;code&gt;localStorage&lt;/code&gt;. A full working example of the code used in this tutorial is available to download from &lt;a href="https://gist.github.com/w3collective/9e6a99f4d828734676a12b2db2ff61e5"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Getting Started with Redis in Nodejs</title>
      <author>Keith Holliday</author>
      <pubDate>Tue, 24 Aug 2021 00:16:14 +0000</pubDate>
      <link>https://dev.to/thehollidayinn/getting-started-with-redis-in-nodejs-28ec</link>
      <guid>https://dev.to/thehollidayinn/getting-started-with-redis-in-nodejs-28ec</guid>
      <description>&lt;p&gt;This was originally posted here: &lt;a href="https://koalatea.io/node-js-redis-getting-started/"&gt;https://koalatea.io/node-js-redis-getting-started/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;When building large scale applications, there comes a need for scaling. There are many places to start with scaling, but one place my be scaling your reads. Let's say that you have a read heavy application, like an ecommerce store or a comment system.&lt;br&gt;
You may want to consider caching to address this concerns. Redis is a good place to start (and to end) when solving this problems.&lt;br&gt;
In this article we will get started with Redis in Nodejs.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#more-about-redis-and-caching"&gt;
  &lt;/a&gt;
  More about Redis and Caching
&lt;/h2&gt;

&lt;p&gt;Caching is a large topic that is outlined here: &lt;a href="https://github.com/donnemartin/system-design-primer#cache"&gt;https://github.com/donnemartin/system-design-primer#cache&lt;/a&gt;. We will simply introduce Redis here and in later articles, we will learn to implement this practices on large scale features.&lt;/p&gt;

&lt;p&gt;Redis is use for a lot more than caching. For example, queues are implemented in Redis using bullqueue: &lt;a href="https://optimalbits.github.io/bull/"&gt;https://optimalbits.github.io/bull/&lt;/a&gt;. I highly recommend checking out this package (and the bullq UI). This is a great start to scaling out services, not just microservices. You can&lt;br&gt;
read about more use cases for redis here: &lt;a href="https://redis.com/blog/5-industry-use-cases-for-redis-developers/"&gt;https://redis.com/blog/5-industry-use-cases-for-redis-developers/&lt;/a&gt;, and I will write articles in the future about implementing this features later on.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-project"&gt;
  &lt;/a&gt;
  Creating the project
&lt;/h2&gt;

&lt;p&gt;Let's create the project as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;redis-example
&lt;span class="nb"&gt;cd &lt;/span&gt;redis-example
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;span class="nb"&gt;touch &lt;/span&gt;index.js
&lt;span class="nb"&gt;touch &lt;/span&gt;docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-redis"&gt;
  &lt;/a&gt;
  Setting up Redis
&lt;/h2&gt;

&lt;p&gt;For setting up Redis, I would recommend using a service for you in prod. Azure for example, has a great redis service that scales easily.  However, you will want to learn redis and eventually how to scale it yourself. This will help with debugging cloud services or eventually, saving money and not using them.&lt;/p&gt;

&lt;p&gt;We will start our intro to redis via using docker compose. Create a &lt;code&gt;docker-compose.yml&lt;/code&gt; file and add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.2"&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;redis&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;redis:alpine"&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis-server&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;6379:6379"&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$PWD/redis-data:/var/lib/redis&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$PWD/redis.conf:/usr/local/etc/redis/redis.conf&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;REDIS_REPLICATION_MODE=master&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensure you have docker installed and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installing-redis-modules"&gt;
  &lt;/a&gt;
  Installing Redis Modules
&lt;/h2&gt;

&lt;p&gt;There are two modules I see often used in nodejs. I will tend towards&lt;br&gt;
&lt;code&gt;ioredis&lt;/code&gt; as it has built in support for promises and many other features in redis.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;ioredis
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#writing-the-code"&gt;
  &lt;/a&gt;
  Writing the Code
&lt;/h2&gt;

&lt;p&gt;Let's start by opening up the index.js file and importing our module. We will also connect to the redis server. By default, the module will assume we are using localhost on port 6379, which is what we setup in our docker compose file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ioredis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's run some redis commands. We will start very basic with the &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; commands. As implied by the names, the set command will set a key and the get will retrieve the key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note, I usually create a main funciton to start a node file that will be an entry. We can call the above using a self invoking funciton. Eventually in later version of node we will not need this as we will be able to call &lt;code&gt;await&lt;/code&gt; at the root level.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the full file for context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ioredis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-redis-gui"&gt;
  &lt;/a&gt;
  A Redis GUI
&lt;/h2&gt;

&lt;p&gt;Often over looked in the community is the use of a UI. Many are outdated or hard to run. One that I often use is &lt;code&gt;patrikx3/redis-ui&lt;/code&gt;. Although a little&lt;br&gt;
clunky, it usually does what I need. I will also suggest getting use to the redis-cli to help where GUIs cannot.&lt;/p&gt;

&lt;p&gt;You can download the GUI here: &lt;a href="https://github.com/patrikx3/redis-ui"&gt;https://github.com/patrikx3/redis-ui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have that downloaded, open up the app. Then go to Settings -&amp;gt; New Connection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kkTlSaJ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/a9aa100971642b0a2968ebf9fd132e7e/1c3a5/redis-new-connection.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kkTlSaJ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/a9aa100971642b0a2968ebf9fd132e7e/1c3a5/redis-new-connection.png" alt="new connection" title="redis connection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type in the following to connect to local, then hit the "Add" button at the bottom.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--swOAPx24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/64121405161e88741cc02fba8e8b5a04/914c7/redis-connect.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--swOAPx24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/64121405161e88741cc02fba8e8b5a04/914c7/redis-connect.png" alt="new connect" title="redis connect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, click the bottom right, then select your localhost to connect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mwRq7Pcb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/b1eba0ceca5c6320e9f02e3e1c32aede/87a80/redis-add.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mwRq7Pcb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/b1eba0ceca5c6320e9f02e3e1c32aede/87a80/redis-add.png" alt="redis add" title="redis add"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click Home and then you should see a screen like below, but with no keys on the left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xb74F24R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/cc0ddbcc3bb0e61d9e5053f76e8aa50d/d30ee/redis-home.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xb74F24R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/cc0ddbcc3bb0e61d9e5053f76e8aa50d/d30ee/redis-home.png" alt="new home" title="redis home"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>redis</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Create a Fastify server</title>
      <author>Thomas Bnt</author>
      <pubDate>Mon, 23 Aug 2021 23:51:00 +0000</pubDate>
      <link>https://dev.to/thomasbnt/create-a-fastify-server-23lg</link>
      <guid>https://dev.to/thomasbnt/create-a-fastify-server-23lg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.fastify.io/"&gt;Fastify&lt;/a&gt; is a &lt;strong&gt;web server framework&lt;/strong&gt; like ExpressJS but with &lt;em&gt;better performances&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.fastify.io/benchmarks/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qB8EKpsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dh58y5oa54arc78g0ok4.png" alt="Benchmark on the website Fastify.io"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ecosystem is pretty cool, he &lt;a href="https://www.fastify.io/ecosystem/"&gt;adds multiple plugins&lt;/a&gt;. But in this first test, I only add &lt;strong&gt;fastify-static&lt;/strong&gt; for getting .html files. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-code-"&gt;
  &lt;/a&gt;
  Let's code !
&lt;/h2&gt;

&lt;p&gt;At the first time, create a void folder and install Fastify and fastify-static.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i fastify fastify-static
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create an &lt;strong&gt;app.js&lt;/strong&gt;, it's your root file. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#into-the-appjs"&gt;
  &lt;/a&gt;
  Into the app.js
&lt;/h2&gt;

&lt;p&gt;You can write the basis of this file for creating a new Fastify server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;&lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify-static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/public/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// In this example, when you get localhost:3000, ou have the time&lt;/span&gt;
&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;about.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#public-html-pages"&gt;
  &lt;/a&gt;
  Public HTML pages
&lt;/h2&gt;

&lt;p&gt;Create a &lt;strong&gt;/public&lt;/strong&gt; folder and a &lt;strong&gt;about.html&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VsByx-Q0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqf234ealz2lmr2bxihs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VsByx-Q0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqf234ealz2lmr2bxihs.png" alt="Create your public folder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#end"&gt;
  &lt;/a&gt;
  End
&lt;/h2&gt;

&lt;p&gt;It's a very short post, but I demonstrate how to simply start a server with &lt;strong&gt;Fastify&lt;/strong&gt;. As this is the first time I use it, there might be some errors. Don't hesitate to give me feedback in the comments ! üëçüèº&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.fastify.io/docs/latest/Getting-Started/"&gt;Getting Started with Fastify&lt;/a&gt;&lt;/p&gt;




&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;‚òï&lt;/th&gt;
&lt;th&gt;Check my &lt;a href="https://twitter.com/thomasbnt_"&gt;Twitter account&lt;/a&gt;. You can see many projects and updates. You can also &lt;a href="https://www.buymeacoffee.com/thomasbnt/?via=thomasbnt"&gt;support me on Buy Me a Coffee&lt;/a&gt;.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>fastify</category>
    </item>
    <item>
      <title>Loading Initial Data with Spring Boot</title>
      <author>Emmanuel Ogbinaka</author>
      <pubDate>Mon, 23 Aug 2021 23:08:30 +0000</pubDate>
      <link>https://dev.to/imanuel/loading-initial-data-with-spring-boot-58mi</link>
      <guid>https://dev.to/imanuel/loading-initial-data-with-spring-boot-58mi</guid>
      <description>&lt;p&gt;With SpringBoot + Hibernate we can easily manage our database. By default, all classes marked with the &lt;code&gt;@Entity&lt;/code&gt; annotation in our packages are used to create tables automatically.&lt;/p&gt;

&lt;p&gt;Well, there are times we need more fine-grained control over the database alterations according to our requirements.&lt;br&gt;
In this post I'll be sharing lights on one of those scenarios: &lt;strong&gt;Auto-populating or loading initial values into our tables&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;SpringBoot has some reservations for situations as this. We make use of the &lt;code&gt;data.sql&lt;/code&gt; file in Spring to actualise this.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This file should be saved in the directory:&lt;br&gt;
&lt;code&gt;src/main/resources/&lt;/code&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Hint: Same location as &lt;code&gt;application.properties&lt;/code&gt; file.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we run the project with this file on the resources directory, Spring will pick it up and use it for populating the database.&lt;/p&gt;

&lt;p&gt;As an example, we can decide to load initial values for the &lt;code&gt;Role&lt;/code&gt; entity as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO Role (name) VALUES ('USER');
INSERT INTO Role (name) VALUES ('ADMIN');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you start your application, spring will attempt to load these data into the &lt;code&gt;Role&lt;/code&gt; table which at this time does not exist which will cause the program to fail, so we need to add the following config to &lt;code&gt;application.properties&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;spring.jpa.defer-datasource-initialization=true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells spring to delay the data initialisation process. Now start your spring application, and you should be able to see the values 'USER' &amp;amp; 'ADMIN' in the Role table.&lt;/p&gt;

&lt;p&gt;Hope you find this helpful. You can leave a comment to contribute. Thanks!&lt;/p&gt;

</description>
      <category>springboot</category>
      <category>java</category>
      <category>hibernate</category>
      <category>jpa</category>
    </item>
    <item>
      <title>How to Build Java Applications Today: #50</title>
      <author>Karsten Silz</author>
      <pubDate>Mon, 23 Aug 2021 22:42:48 +0000</pubDate>
      <link>https://dev.to/ksilz/how-to-build-java-applications-today-50-48pg</link>
      <guid>https://dev.to/ksilz/how-to-build-java-applications-today-50-48pg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;I think Eclipse IDE is in trouble, my app store adventures, Git 2.33, Spring Boot 2.5.4 &amp;amp; 2.4.10, Micronaut 3.0, Quarkus 2.1.3, Payara CE 5.2021.6 &amp;amp; EE 5.30.0, and Spring Tools 4.11.1&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#readme"&gt;
  &lt;/a&gt;
  README
&lt;/h2&gt;

&lt;p&gt;Welcome to¬†my weekly newsletter "How To Build Java Applications Today"! I read all the Java newsletters so¬†&lt;strong&gt;you&lt;/strong&gt;¬†don't have to! And it's "Java news with a smile".&lt;/p&gt;

&lt;p&gt;If you like my newsletter, then &lt;a href="https://bpfnl.substack.com"&gt;subscribe to it on Substack&lt;/a&gt;! Or read it on &lt;a href="https://dev.to/ksilz/series/11995"&gt;dev.to&lt;/a&gt;,  the &lt;a href="https://thejavacafe.com/ksilz/series/1"&gt;Java Cafe&lt;/a&gt;, or &lt;a href="https://ksilz.medium.com"&gt;Medium&lt;/a&gt;. Even better: Share it with people who may be interested.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#quote-of-the-week"&gt;
  &lt;/a&gt;
  Quote of the Week
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;‚ÄåA man's silence is wonderful to listen to.&lt;/em&gt;&lt;br&gt;
Amazingly, &lt;a href="http://www.quotationspage.com/quote/32998.html"&gt;Thomas Hardy&lt;/a&gt;, a &lt;a href="https://en.wikipedia.org/wiki/Thomas_Hardy"&gt;British writer&lt;/a&gt;, described a silence &lt;strong&gt;before&lt;/strong&gt; everybody stared at their phones.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#standup"&gt;
  &lt;/a&gt;
  Stand-Up
&lt;/h2&gt;

&lt;p&gt;Last week I submitted the apps from my start-up for app store review. How did it go? Read on below! &lt;/p&gt;

&lt;p&gt;My wife &amp;amp; I also booked a vacation week in the sun (i.e., outside England) for September. Let's hope that we can actually go! But fear not - I'll publish my little newsletter during our vacation, too!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#advertisement"&gt;
  &lt;/a&gt;
  ADVERTISEMENT
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#22-years-of-fullstack-java-for-hire-next-january"&gt;
  &lt;/a&gt;
  22 YEARS OF FULL-STACK JAVA FOR HIRE NEXT JANUARY
&lt;/h3&gt;

&lt;p&gt;I‚Äôm a full-stack Java developer with 22 years of experience, looking for a project in January 2022, in Milton Keynes, London, or remote. I‚Äôll work as a contractor or fixed-term employee but don‚Äôt take permanent positions. &lt;/p&gt;

&lt;p&gt;Interested? Then check out my resume &amp;amp; work samples!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ksilz.com/"&gt;Check out my resume &amp;amp; work samples &lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bookmarks"&gt;
  &lt;/a&gt;
  Bookmarks
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#i-think-eclipse-ide-is-in-trouble"&gt;
  &lt;/a&gt;
  I think Eclipse IDE is in Trouble
&lt;/h4&gt;

&lt;p&gt;Why do I think that the Eclipse IDE is in trouble? Because they &lt;strong&gt;changed&lt;/strong&gt;. Most organizations don‚Äòt like change, especially the "70 projects under one roof" ones like Eclipse IDE. So they only change when they are in a crisis. So what‚Äòs the crisis, and what‚Äòs the change?&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;crisis&lt;/strong&gt; is competition from Microsoft‚Äòs free cross-platform and cross-language IDE Visual Studio Code (VS Code). And the &lt;strong&gt;change&lt;/strong&gt; is the establishment of a &lt;a href="https://www.eclipse.org/org/workinggroups/eclipse-ide-charter.php"&gt;Working Group (WG)&lt;/a&gt; "to ensure the continued sustainability, integrity, evolution and adoption of the Eclipse IDE'. The &lt;a href="https://newsroom.eclipse.org/news/announcements/open-source-leader-eclipse-foundation-launches-eclipse-ide-working-group"&gt;press release&lt;/a&gt; quotes a founding WG member: "We believe the IDE needs to be more relevant and attractive for end users, committers, tool developers, and those who build applications upon it."&lt;/p&gt;

&lt;p&gt;Look, I‚Äòm rooting for Eclipse IDE here. I used it daily for about fifteen years, starting way back in 2001 when Eclipse won a shoot-out against Netbeans in our team. But I switched to the paid IntelliJ version a couple of years ago because it was a better Java IDE for me, and it had better web development support.&lt;/p&gt;

&lt;p&gt;Now I already wrote about the Eclipse IDE Working Group in &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-5ca"&gt;issue #41&lt;/a&gt;. But the research for &lt;a href="https://www.infoq.com/news/2021/08/eclipse-ide-wg-established"&gt;my InfoQ article&lt;/a&gt; made it look worse:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comparing the 2021-06 release with the 2020-06 one shows a marked decline in the sub-project activity: "The overall number of sub-projects shrank by 7%, the sub-projects with a release decreased from 63% to 47%, and the sub-projects with a release one year or older nearly tripled from 8% to 22%." Now we don't know how much the COVID pandemic contributed here. But VS Code grew a lot in the timeframe (see below).&lt;/li&gt;
&lt;li&gt;Frequent readers know that I &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-5ca"&gt;complain about the Eclipse IDE ‚ÄûWhat‚Äòs New" page&lt;/a&gt; loudly. But rightfully so: It‚Äòs a mess, and it's worse than I thought. The &lt;a href="https://www.eclipse.org/eclipseide/2021-06/noteworthy/"&gt;2021-06 version&lt;/a&gt; touts 70 projects but only &lt;a href="https://projects.eclipse.org/releases/2021-06"&gt;lists 68&lt;/a&gt;. Only 14 out of 32 projects with a new release are included, but also 10 that didn't have a release. And the links we do get? Here's what I said before: "Some look like &lt;a href="https://www.eclipse.org/graphiti/pages/whats-new-0.18.html"&gt;it's 1995&lt;/a&gt;, some &lt;a href="https://www.eclemma.org/changes.html"&gt;lost the links altogether&lt;/a&gt;, some don't know that &lt;a href="https://bugs.eclipse.org/bugs/buglist.cgi?list_id=20343413&amp;amp;product=ECP&amp;amp;query_format=advanced&amp;amp;target_milestone=1.26.0"&gt;strike-through text is hard to read&lt;/a&gt;, some look &lt;a href="https://wiki.eclipse.org/CDT/User/NewIn103"&gt;Eclipse-like&lt;/a&gt;, and &lt;a href="https://www.eclipse.org/Xtext/releasenotes.html#/releasenotes/2021/03/02/version-2-25-0"&gt;some don't&lt;/a&gt;." There are dozens, maybe hundreds of developers working on a release - and then the first impression gets ruined so radically &amp;amp; ruefully. üòû&lt;/li&gt;
&lt;li&gt;Stack Overflow asked 83,500 developers &lt;a href="https://insights.stackoverflow.com/survey/2021#section-most-loved-dreaded-and-wanted-collaboration-tools"&gt;about collaboration tools&lt;/a&gt;: 69% of 12,955 respondents dread using Eclipse IDE; only NetBeans scored worse. Now 79% of 58,026 developers love VS Code - strong numbers, both absolute and relative.&lt;/li&gt;
&lt;li&gt;VS Code &lt;a href="https://www.infoq.com/news/2021/07/visual-studio-code-java-ide/"&gt;boosted&lt;/a&gt; its Java capabilities earlier this year and plans to do more, including Gradle support (see the &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-528"&gt;last issue&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;According to recent Snyk and JRebel surveys, about a quarter of all Java developers already use VS Code, growing rapidly year-over-year (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-5ca"&gt;issue #41&lt;/a&gt; and &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-4b3"&gt;issue #27&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;From what I can see, VS Code is rapidly becoming one thing we never had - the default IDE for all developers. Microsoft claimed 14 million users half a year ago, up 5 million in 2020. And now that flywheel is in motion and hard to stop because every technology/tool vendor will ensure that they have a VS Code plugin. That makes VS Code more useful which attracts more users, and so on. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now I think (hope!) that Eclipse is still a better Java IDE than VS Code. A cross-language IDE like VS Code will probably be worse than specialized IDEs - at least initially. But VS Code doesn't &lt;strong&gt;have&lt;/strong&gt; to be better: As a free product, we can always use it in &lt;strong&gt;addition&lt;/strong&gt; to our specialized IDEs. That's how it snuck into my life: As a &lt;a href="https://www.jetbrains.com/webstorm/"&gt;WebStorm&lt;/a&gt; replacement for building static websites. And once we're getting used to using VS Code, we're asking ourselves: "Well, why can't I use that for Java, too? Let me try‚Ä¶"&lt;/p&gt;

&lt;p&gt;A product that's dreaded by users, a decline in sub-projects, a rapidly growing competitor that's becoming the industry standard - I don't envy the Eclipse IDE WG. But change takes time, so we shouldn't expect big changes this year. What will they do? What &lt;strong&gt;can&lt;/strong&gt; they do? I'll keep you posted!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.infoq.com/news/2021/08/eclipse-ide-wg-established"&gt;My InfoQ article&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#over-the-fence"&gt;
  &lt;/a&gt;
  Over the Fence
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#my-app-store-adventures"&gt;
  &lt;/a&gt;
  My App Store Adventures
&lt;/h4&gt;

&lt;p&gt;I'm the technical co-founder of a &lt;a href="https://yourhomeingoodhands.co.uk"&gt;UK start-up&lt;/a&gt;. We offer an app to organize a cat-sitter business. It's actually two apps: A web app to manage customers, bookings, and visits. And iOS/Android apps to do the visits. Our apps aren't fully open for business yet, but we still wanted to be in the app stores.&lt;/p&gt;

&lt;p&gt;I've never put an app into an app store before. So I was a bit nervous before I submitted our app for review last week. I mean the news is full of app store review horror stories, mostly about Apple: Vague &amp;amp; nit-picky rules, inconsistent rule application, delays of weeks or months, rejections that crush businesses.&lt;/p&gt;

&lt;p&gt;We tested the apps lot. We also created test accounts for the app reviewers with fake customer data and detailed instructions for the web application. And all that was on top of the usual app launch tasks - screenshots in various sizes, app description, privacy statements, etc.&lt;/p&gt;

&lt;p&gt;So, how did it go?&lt;/p&gt;

&lt;p&gt;Splendidly, I'm relieved to say. Our iOS app was approved within &lt;strong&gt;12 hours&lt;/strong&gt;, the Android one in &lt;strong&gt;4.5 days&lt;/strong&gt; (which included a weekend). Neither submission needed a single change to our app!&lt;/p&gt;

&lt;p&gt;I can only guess why it went so smoothly. First of all, I think we were just lucky. Maybe our cat Max charmed the socks off of our reviewers - we used him as the &lt;a href="https://yourhomeingoodhands.co.uk/images/screenshots/ios/add%20note%20notch%20filled.png"&gt;example for adding notes&lt;/a&gt;. Perhaps a business-to-business app like ours attracts less scrutiny than consumer offerings. Or it's the summer. I'm sure I'll suffer from "review rage" in the future, but for now, I'm a happy camper!&lt;/p&gt;

&lt;p&gt;I was surprised by some faulty app store details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our app is only in Apple's UK iOS App Store. Now my Apple user account is tied to a different App Store country. And on iOS, opening the link to our UK App Store page tells me as much. On the Mac, the link just shows a blank page, as if the link was broken.&lt;/li&gt;
&lt;li&gt;The Google Play Store dashboard gave us a Play Story link &lt;strong&gt;immediately&lt;/strong&gt; once the review process started. The problem: The link didn't work at all &lt;strong&gt;until&lt;/strong&gt; the app was in the Play Store - it was broken for 4.5 days! At least Apple was so clever to only show the link &lt;strong&gt;after&lt;/strong&gt; the app was approved. And it still took about 30 minutes before that link worked!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://yourhomeingoodhands.co.uk"&gt;My start-up website&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#releases"&gt;
  &lt;/a&gt;
  Releases
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#git-233"&gt;
  &lt;/a&gt;
  Git 2.33
&lt;/h4&gt;

&lt;p&gt;Git releases typically have few changes that affect our daily coding lives. Version 2.33 is no different. It's actually version*&lt;em&gt;s&lt;/em&gt;* 2.33 and 2.32 because the latter never received a proper highlight reel. &lt;/p&gt;

&lt;p&gt;Two things caught my attention: A new merge algorithm called &lt;code&gt;merge-ort&lt;/code&gt; "is likely to become the default strategy in a future version of Git". It's faster and supposedly less buggy. Now being the only developer in my current projects, merge conflicts rarely raise their ugly heads. üòè&lt;/p&gt;

&lt;p&gt;The other thing is a speed-up of checkouts through parallelization. You can configure the number of threads to use, set to "auto" here: &lt;code&gt;git config --global checkout.workers 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.blog/2021-08-16-highlights-from-git-2-33/"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#spring-boot-254-amp-2410"&gt;
  &lt;/a&gt;
  Spring Boot 2.5.4 &amp;amp; 2.4.10
&lt;/h4&gt;

&lt;p&gt;The Spring Boot releases that were foreshadowed by &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-528"&gt;last week's&lt;/a&gt; Spring Data releases are here. They have &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.5.4"&gt;35 changes (2.5.4)&lt;/a&gt; and &lt;a href="https://spring.io/blog/2021/08/19/spring-boot-2-4-10-is-now-available"&gt;29 (2.4.10)&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://spring.io/blog/2021/08/19/spring-boot-2-5-4-available-now"&gt;Announcement 2.5.4&lt;/a&gt;, &lt;a href="https://spring.io/blog/2021/08/19/spring-boot-2-4-10-is-now-available"&gt;announcement 2.4.10&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#micronaut-30"&gt;
  &lt;/a&gt;
  Micronaut 3.0
&lt;/h4&gt;

&lt;p&gt;Quarkus isn't the only new Java framework nipping at the heels of Spring Boot - Micronaut is another one. And it just released version 3.0. The biggest change is that Project Reactor is the new reactive framework instead of RxJava2. Or, as Oracle would say: "You swapped out the thing that will be killed by Project Loom!" (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-528"&gt;last week's issue&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;What else? Annotations aren't automatically inherited anymore, a migration away from Oracle's &lt;code&gt;javax.annoatation&lt;/code&gt; namespace, and improvements in Inversion of Control (IOC), server filters, and GraalVM support.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://micronaut.io/2021/08/18/micronaut-framework-3-released/"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#quarkus-213"&gt;
  &lt;/a&gt;
  Quarkus 2.1.3
&lt;/h4&gt;

&lt;p&gt;Everybody's favorite "supersonic" Java framework has the fourth release in as many weeks. We're getting &lt;a href="https://github.com/quarkusio/quarkus/releases/tag/2.1.3.Final"&gt;41 changes&lt;/a&gt; this time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-2-1-3-final-released/"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#payara-ce-520216-amp-ee-5300"&gt;
  &lt;/a&gt;
  Payara CE 5.2021.6 &amp;amp; EE 5.30.0
&lt;/h4&gt;

&lt;p&gt;Payara started as the commercially supported version of Oracle's GlassFish Java EE application server back in 2014. These days, it's a Jakarta EE &amp;amp; MicroProfile application server.&lt;/p&gt;

&lt;p&gt;The monthly release brought &lt;a href="https://docs.payara.fish/community/docs/release-notes/release-notes-2021-6.html"&gt;13 changes&lt;/a&gt; to the open-source Community Edition (CE) and &lt;a href="https://docs.payara.fish/enterprise/docs/release-notes/release-notes-30-0.html"&gt;16 changes&lt;/a&gt; to the Enterprise Edition (EE). Both versions are now compatible with MicroProfile 4.1 (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-3b0"&gt;issue #48&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.payara.fish/whats-new-in-the-august-2021-payara-platform-release"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#spring-tools-4111"&gt;
  &lt;/a&gt;
  Spring Tools 4.11.1
&lt;/h4&gt;

&lt;p&gt;The first maintenance release drops eight weeks after version 4.11 (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-ff1"&gt;issue #42&lt;/a&gt;) and fixes bugs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spring.io/blog/2021/08/18/spring-tools-4-11-1-released"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h2&gt;

&lt;p&gt;Karsten Silz is the author of this newsletter. He is a full-stack web &amp;amp; mobile developer with 22 years of Java experience, author, speaker, and marathon runner. Karsten got a Master's degree in Computer Science at the Dresden University of Technology (Germany) in 1996.&lt;/p&gt;

&lt;p&gt;Karsten has worked in Europe and the US. He co-founded a software start-up in the US in 2004. Karsten led product development for 13 years and left after the company was sold successfully. He co-founded the UK SaaS start-up "&lt;a href="https://yourhomeingoodhands.co.uk/"&gt;Your Home in Good Hands&lt;/a&gt;" as CTO in 2020. Since 2019, Karsten also works as a contractor in the UK.&lt;/p&gt;

&lt;p&gt;Karsten has¬†&lt;a href="https://bpfnl.substack.com/"&gt;this newsletter&lt;/a&gt;, a¬†&lt;a href="https://betterprojectsfaster.com/"&gt;developer website&lt;/a&gt;, and a¬†&lt;a href="https://ksilz.com/"&gt;contractor site&lt;/a&gt;. He's on¬†&lt;a href="https://www.linkedin.com/in/ksilz/"&gt;LinkedIn&lt;/a&gt;,¬†&lt;a href="https://twitter.com/karsilz"&gt;Twitter&lt;/a&gt;, and¬†&lt;a href="https://github.com/ksilz"&gt;GitHub&lt;/a&gt;. Karsten is also an &lt;a href="https://www.infoq.com/profile/Karsten-Silz"&gt;author at InfoQ&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>bpf</category>
    </item>
    <item>
      <title>Create an Animated SVG Favicon With CSS</title>
      <author>Nathan</author>
      <pubDate>Mon, 23 Aug 2021 22:00:01 +0000</pubDate>
      <link>https://dev.to/natclark/create-an-animated-svg-favicon-with-css-320p</link>
      <guid>https://dev.to/natclark/create-an-animated-svg-favicon-with-css-320p</guid>
      <description>&lt;p&gt;As of writing this, most major browsers support &lt;a href="https://caniuse.com/?search=favicon%20svg"&gt;SVG favicons&lt;/a&gt; (with the exception of Safari).&lt;/p&gt;

&lt;p&gt;In SVG files, we can add custom inline CSS. And in CSS, we can animate just about anything.&lt;/p&gt;

&lt;p&gt;So, let's animate a favicon!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-simple-svg-favicon"&gt;
  &lt;/a&gt;
  Setting up a simple SVG favicon
&lt;/h2&gt;

&lt;p&gt;First, let's create a simple 32x32 SVG with a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle"&gt;circle&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"32px"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"32px"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 100 100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- We will write some styles here! --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"#60f"&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"45"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's save this masterpiece to a file called &lt;code&gt;favicon.svg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While we can view this file directly, it is more realistic to test it out on a real browser tab.&lt;/p&gt;

&lt;p&gt;To accomplish this, just link to it from the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element of a web page, making sure to replace any existing favicon tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"shortcut icon"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/svg+xml"&lt;/span&gt; &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"32x32"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"favicon.svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If necessary, remember to replace "&lt;code&gt;favicon.svg&lt;/code&gt;" with the path to your favicon file!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-zoom-animation"&gt;
  &lt;/a&gt;
  Adding a zoom animation
&lt;/h2&gt;

&lt;p&gt;It's now time to start animating our favicon.&lt;/p&gt;

&lt;p&gt;First, let's add a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag to our SVG file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"32px"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"32px"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 100 100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;/* We will write some styles here! */&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"#60f"&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"45"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag, let's write a simple &lt;a href="https://www.w3docs.com/learn-css/keyframes.html"&gt;keyframe animation&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;zooming&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;       
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;       
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a mesmerizing "zooming" effect.&lt;/p&gt;

&lt;p&gt;Let's apply it to our &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;zooming&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;       
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;       
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4s&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="nb"&gt;both&lt;/span&gt; &lt;span class="n"&gt;zooming&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;will-change&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-a-spooky-animation"&gt;
  &lt;/a&gt;
  Adding a spooky animation
&lt;/h2&gt;

&lt;p&gt;Here is one more example animation that creates a "ghost" effect:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;ghost&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;       
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;       
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4s&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="nb"&gt;both&lt;/span&gt; &lt;span class="n"&gt;ghost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;will-change&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's really no limits to what kind of animation you can add to your favicon, so get creative with it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improving-accessibility"&gt;
  &lt;/a&gt;
  Improving accessibility
&lt;/h2&gt;

&lt;p&gt;Not everyone likes animations, and it might make some people sick.&lt;/p&gt;

&lt;p&gt;So, for users with browsers configured to request reduced motion, we can disable our animation by tacking this handy snippet on to the end of our SVG's &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There's definitely some pros and cons to using animated favicons.&lt;/p&gt;

&lt;p&gt;Animated favicons are very unique and can leave visitors with a lasting impression of your site.&lt;/p&gt;

&lt;p&gt;But it remains uncertain whether they will gain (or retain) full browser support, and they can easily be an accessibility concern.&lt;/p&gt;

&lt;p&gt;Anyway, I hope you enjoyed creating an animated favicon!&lt;/p&gt;

</description>
      <category>css</category>
      <category>design</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Installing Jupyter Notebook</title>
      <author>Daniel Dominguez</author>
      <pubDate>Mon, 23 Aug 2021 21:57:41 +0000</pubDate>
      <link>https://dev.to/dominguezdaniel/installing-jupyter-notebook-1a9b</link>
      <guid>https://dev.to/dominguezdaniel/installing-jupyter-notebook-1a9b</guid>
      <description>&lt;p&gt;Data science isn‚Äôt just about mining and analyzing data. A good data scientist needs to be able to present data to non-technical people in a way that they can understand. Sure, this could be done in a series of PowerPoint slides. However, there are tools out there specifically designed for this purpose&lt;/p&gt;

&lt;p&gt;Jupyter Notebook is more than just a text editor. It is a tool that lets you run code inside a document and display the outputs. It can print text, draw graphs, and query data all within a single work-frame. Jupyter Notebooks is web-based, making it platform-independent and accessible from a wide range of devices.&lt;/p&gt;

&lt;p&gt;The bare installation of Jupyter Notebooks has the core features you need to code and display your data analysis. However, a lot of efficiencies can be gained by installing a handful of extensions, transforming the authoring experience from being a tad tedious to a smooth ride. It can be a lot like writing code in Sublime Text after being acclimated to an IDE (Integrated development environment).&lt;/p&gt;

&lt;p&gt;Installing Jupyter Notebook extensions is a simple and streamlined process. The first step is to install Nbextensions via the command line.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install jupyter_contrib_nbextensions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If your system does not recognize the pip command, you will need to install that first using the command line.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;py -m pip --version&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you have Nbextensions installed, the process for installing extensions is as simple as running Jupyter Notebook and navigating to the Nbextensions tab that will now be available.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;On my next post, I'll share the "5 Essential Jupyter Notebook Extensions" follow me to stay tuned!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>jupyter</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Mas e os loops em Elixir?</title>
      <author>Willian Frantz</author>
      <pubDate>Mon, 23 Aug 2021 21:54:27 +0000</pubDate>
      <link>https://dev.to/wlsf/mas-e-os-loops-em-elixir-3d0k</link>
      <guid>https://dev.to/wlsf/mas-e-os-loops-em-elixir-3d0k</guid>
      <description>&lt;p&gt;Se voc√™ est√° vindo de uma linguagem de paradigma imperativo, orientada a objetos, muito provavelmente voc√™ vai esbarrar nessa pergunta do t√≠tulo.&lt;/p&gt;

&lt;p&gt;Pois bem, &lt;strong&gt;Elixir&lt;/strong&gt; n√£o possui esse termo em seu vocabul√°rio. Apesar de ser poss√≠vel iterar sobre uma lista de elementos utilizando o &lt;code&gt;for&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isso n√£o significa que o &lt;strong&gt;Elixir&lt;/strong&gt; possui &lt;em&gt;loops&lt;/em&gt;, esse &lt;code&gt;for&lt;/code&gt; nada mais √© do que uma chamada nativa ao &lt;em&gt;List Comprehensions&lt;/em&gt; do &lt;strong&gt;&lt;a href="https://erlang.org/doc/programming_examples/list_comprehensions.html"&gt;Erlang&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Curioso n√©? Como fazer para lidar com uma cole√ß√£o de itens ent√£o? &lt;/p&gt;

&lt;p&gt;H√° 2 maneiras de trabalhar com este tipo de problema, sendo elas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;High Order Functions (map, reduce, filter, find, etc...)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Recursividade&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#high-order-functions"&gt;
  &lt;/a&gt;
  High Order Functions
&lt;/h2&gt;

&lt;p&gt;√â muito comum se deparar com uma situa√ß√£o onde voc√™ tem uma lista de elementos e precisa manipular os dados dela.&lt;/p&gt;

&lt;p&gt;E para isso podemos utilizar fun√ß√µes como &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;reduce&lt;/em&gt;, &lt;em&gt;filter&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;Digamos que voc√™ precise multiplicar todos os elementos da sua lista por 2, isso deveria ser um problema trivial, certo?&lt;/p&gt;

&lt;p&gt;A implementa√ß√£o desse problema em &lt;em&gt;js&lt;/em&gt; utilizando uma estrutura de repeti√ß√£o &lt;em&gt;(loop)&lt;/em&gt; seria mais ou menos assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Em Elixir √© poss√≠vel resolver isso com &lt;code&gt;map/2&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comparando os exemplos acima, diferente da estrutura de repeti√ß√£o, com o &lt;code&gt;map/2&lt;/code&gt; n√£o √© necess√°rio definir nada al√©m da f√≥rmula para mapear os dados da minha lista, onde a f√≥rmula √© &lt;code&gt;x -&amp;gt; x * 2&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;O pr√≥prio &lt;code&gt;map/2&lt;/code&gt; faz o resto do trabalho aplicando a f√≥rmula pra cada elemento da nossa lista, e gerando uma nova lista ao final da execu√ß√£o.&lt;/p&gt;

&lt;p&gt;Segue o mesmo conceito para as demais fun√ß√µes, como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;map/2&lt;/code&gt; manipula os elementos e gera uma nova lista&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;filter/2&lt;/code&gt; filtra os elementos e gera uma nova lista&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;reduce/2&lt;/code&gt; manipula os elementos acumulando seus resultados anteriores&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Existem diversos tipos de &lt;em&gt;&lt;a href="https://elixirschool.com/en/lessons/basics/enum/"&gt;High Order Functions&lt;/a&gt;&lt;/em&gt; dispon√≠veis no Elixir, feitas para facilitar a sua vida na hora de resolver problemas sejam eles triviais ou n√£o.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recursividade"&gt;
  &lt;/a&gt;
  Recursividade
&lt;/h2&gt;

&lt;p&gt;Mesmo que voc√™ seja uma pessoa de linguagens imperativas, o termo recursividade ainda √© algo familiar!&lt;/p&gt;

&lt;p&gt;E o que √© recursividade? √â uma forma de iterar sob listas (ou n√£o), onde a fun√ß√£o chama ela pr√≥pria at√© atingir uma condi√ß√£o de parada.&lt;/p&gt;

&lt;p&gt;Um exemplo muito conhecido sobre recursividade, √© o c√°lculo fatorial de um n√∫mero, onde &lt;code&gt;4! = 4 x 3 x 2 x 1 = 24&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Destrinchando esse c√°lculo, ter√≠amos algo semelhante a:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;4! = 3! * 4
   = 2! * 3
   = 1! * 2
   = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Considerando o exemplo acima, a condi√ß√£o de parada para essa execu√ß√£o √© o valor 1. Quando a fun√ß√£o fatorial receber como argumento o valor 1, ela dever√° retornar 1 e as outras execu√ß√µes devem se basear neste valor, exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;4! = (6) * 4 = 24
   = (2) * 3
   = (1) * 2
   = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Em par√™nteses&lt;/strong&gt;: resultado da chamada fatorial anterior.&lt;/p&gt;

&lt;p&gt;A implementa√ß√£o em &lt;strong&gt;JS&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Essa mesma fun√ß√£o em &lt;strong&gt;Elixir&lt;/strong&gt; fica assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nota-se que na chamada recursiva, a fun√ß√£o &lt;code&gt;fact/1&lt;/code&gt; chama a si mesma passando o &lt;code&gt;argumento - 1&lt;/code&gt;, e quando essa fun√ß√£o √© chamada com o valor 1, ela retorna somente o valor 1 e encerra sua execu√ß√£o em cadeia.&lt;/p&gt;

&lt;p&gt;Vamos analisar mais de perto essa chamada do &lt;code&gt;fact/1&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Considere que estamos chamando fatorial com o argumento 4 (4!)&lt;/span&gt;

&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="c1"&gt;# Esse ser√° o retorno&lt;/span&gt;
&lt;span class="c1"&gt;# Ele estar√° chamando fact(3) e multiplicando por 4.&lt;/span&gt;
&lt;span class="c1"&gt;# E assim sucessivamente...&lt;/span&gt;

&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# Essa abordagem gera uma cadeia de chamadas que precisam ser resolvidas.&lt;/span&gt;
&lt;span class="c1"&gt;# Quando a chamada em cadeia chega na nossa condi√ß√£o de parada (1)&lt;/span&gt;
&lt;span class="c1"&gt;# O processador come√ßa a desencadear essas chamadas que empilhamos.&lt;/span&gt;
&lt;span class="c1"&gt;# Seguindo assim:&lt;/span&gt;

&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Implementar uma fun√ß√£o &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Factorial"&gt;fatorial&lt;/a&gt;&lt;/em&gt; utilizando recursividade √© bem simples, n√©? Mas se formos considerar a explica√ß√£o que acabamos de ver, isso pode se tornar um problema?&lt;/p&gt;

&lt;p&gt;Imagine que temos uma fun√ß√£o que precisar√° iterar milhares de vezes para resolver um determinado problema, precisaremos empilhar v√°rias chamadas n√£o-resolvidas na nossa pilha de chamadas, e isso poder√° estourar o limite da pilha.&lt;/p&gt;

&lt;p&gt;Para esse problema em espec√≠fico, h√° uma solu√ß√£o chamada &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Tail_call"&gt;Tail Call Optimization&lt;/a&gt;&lt;/strong&gt; (ou TCO). Com  &lt;strong&gt;TCO&lt;/strong&gt; √© poss√≠vel eliminar essas chamadas n√£o-resolvidas que uma fun√ß√£o recursiva costuma criar.&lt;/p&gt;

&lt;p&gt;O pulo do gato quando aplicamos &lt;em&gt;Tail Call Optimization&lt;/em&gt; em uma fun√ß√£o recursiva √© que essa fun√ß√£o saiba o valor processado em todas as suas chamadas, sendo assim, ela n√£o depende do desencadeamento para encontrar o valor final de sua execu√ß√£o.&lt;/p&gt;

&lt;p&gt;E como podemos fazer isso? Segue o exemplo de uma chamada sem TCO:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# nossa condi√ß√£o de parada&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# fun√ß√£o fatorial recursiva&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;com TCO:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# nossa condi√ß√£o de parada&lt;/span&gt;
&lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;

&lt;span class="c1"&gt;# fun√ß√£o fatorial recursiva&lt;/span&gt;
&lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A grande diferen√ßa, √© que na fun√ß√£o fatorial com TCO, ela sabe exatamente o valor da sua execu√ß√£o.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fact(4) -&amp;gt; fact(4 - 1, 4)
fact(3, 4) -&amp;gt; fact(3 - 1, (4 * 3)) -&amp;gt; fact(2, 12)
fact(2, 12) -&amp;gt; fact(2 - 1, (12 * 2)) -&amp;gt; fact(1, 24)
fact(1, 24) -&amp;gt; 24
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Portanto, quando a nossa fun√ß√£o chega na sua condi√ß√£o de parada, n√£o √© necess√°rio desencadear todas as chamadas anteriores e seus respectivos c√°lculos. Ela s√≥ precisa retornar seu valor final (24) para a fun√ß√£o que originou a sua chamada &lt;code&gt;fact(4)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fato curioso:&lt;/strong&gt; Por padr√£o, &lt;strong&gt;Elixir/Erlang&lt;/strong&gt; implementam &lt;em&gt;Tail Call Optimization&lt;/em&gt;, por isso a utiliza√ß√£o de recursividade √© algo muito comum e encorajada! Inclusive as &lt;em&gt;High Order Functions&lt;/em&gt; s√£o implementadas atrav√©s de recursividade, no final das contas.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclus√£o
&lt;/h2&gt;

&lt;p&gt;Elixir √© amor, Erlang √© vida.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urp37THI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xUPOqo6E1XvWXwlCyQ/giphy.gif%3Fcid%3Decf05e47ku92k1x33lofok9qn7hwhy8jtxr7f8b8a3e7evnz%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urp37THI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xUPOqo6E1XvWXwlCyQ/giphy.gif%3Fcid%3Decf05e47ku92k1x33lofok9qn7hwhy8jtxr7f8b8a3e7evnz%26rid%3Dgiphy.gif%26ct%3Dg" alt="thats all"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>erlang</category>
    </item>
    <item>
      <title>Spotify Front</title>
      <author>Osama</author>
      <pubDate>Mon, 23 Aug 2021 21:35:59 +0000</pubDate>
      <link>https://dev.to/bluec4p/spotify-front-247e</link>
      <guid>https://dev.to/bluec4p/spotify-front-247e</guid>
      <description>&lt;p&gt;Buenas !&lt;/p&gt;

&lt;p&gt;Llevo un par de semanas pensando en hacerme mi propio portafolio con ideas personales sin seguir ning√∫n tutorial, y as√≠ fue c√≥mo naci√≥ el primer proyecto que voy a agregar a mi portafolio.&lt;/p&gt;

&lt;p&gt;Spotify Front es un intento de replicar una vista aleatoria de la aplicaci√≥n de spotify en el navegador.&lt;/p&gt;

&lt;p&gt;La vista a replicar es la siguiente: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ohP1ZCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf1gyjxsmk6pu1237des.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ohP1ZCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf1gyjxsmk6pu1237des.png" alt="Official-Spotify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sncB7qNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/az3xn4maqun309god4i7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sncB7qNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/az3xn4maqun309god4i7.png" alt="Spotify-Front"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El proyecto estaba enfocado en poner a prueba mis habilidades en maquetaci√≥n sin usar ning√∫n tipo de librer√≠a ni framework. Tambi√©n se dej√≥ de lado el tema de las animaciones y los hovers, ya que el prop√≥sito de este proyecto era aprender/mejorar el manejo de distintas propiedades en CSS y realizar un buen nombramiento de clases para que se entienda mas o menos la estructura del proyecto.&lt;/p&gt;

&lt;p&gt;Les dejo el enlace por aqu√≠ por si quieren visitar el repositorio en donde lo tengo todo guardado y commiteado por si me quieren dar cualquier tipo de feedback: &lt;a href="https://github.com/blueC4P/spotify-front"&gt;https://github.com/blueC4P/spotify-front&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Saludos ! ‚úå&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>spanish</category>
    </item>
  </channel>
</rss>
