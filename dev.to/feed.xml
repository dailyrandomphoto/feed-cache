<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Wa! My API on the npm!!!</title>
      <author>jsong89</author>
      <pubDate>Sat, 27 Nov 2021 02:45:23 +0000</pubDate>
      <link>https://dev.to/juuuuuuun/wa-my-api-on-the-npm-1i94</link>
      <guid>https://dev.to/juuuuuuun/wa-my-api-on-the-npm-1i94</guid>
      <description>&lt;h1&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  OverView
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#what-i-have-done"&gt;
  &lt;/a&gt;
  What I have done
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#partners-experience"&gt;
  &lt;/a&gt;
  Partner's experience
&lt;/h2&gt;

&lt;p&gt;Will be updated when partner tested my npm package.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-test-about-partners-npm-package"&gt;
  &lt;/a&gt;
  My test about partner's npm package
&lt;/h2&gt;

&lt;p&gt;Will be updated when partner's npm package is visible.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#with-closing-final-lab"&gt;
  &lt;/a&gt;
  With Closing Final Lab..
&lt;/h1&gt;

</description>
      <category>npm</category>
      <category>javascript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How I structure my React.js projects</title>
      <author>Jaakko</author>
      <pubDate>Sat, 27 Nov 2021 01:54:00 +0000</pubDate>
      <link>https://dev.to/bjakyt/how-i-structure-my-reactjs-projects-4cmc</link>
      <guid>https://dev.to/bjakyt/how-i-structure-my-reactjs-projects-4cmc</guid>
      <description>&lt;p&gt;Structuring React applications into files and folders is an opinionated topic, because there is no right or wrong way to do it. I decided to share how I have structured my projects lately. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Highly opinionated!&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#single-file"&gt;
  &lt;/a&gt;
  Single file
&lt;/h3&gt;

&lt;p&gt;React projects usually start with an &lt;code&gt;src/&lt;/code&gt; folder and one &lt;code&gt;src/App.tsx&lt;/code&gt; file with an App component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GGuAk12M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ej5es5a20cdybqrn7ngj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GGuAk12M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ej5es5a20cdybqrn7ngj.png" alt="1" width="880" height="958"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At some point, your app has more features, more lines, and you will need to make smaller standalone components:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KR92HM-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/forl9qz4dcqawmteaz3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KR92HM-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/forl9qz4dcqawmteaz3v.png" alt="2" width="880" height="1757"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes it's OK to have multiple components in one file, especially if those components are tightly coupled to the main component. Often it's better to use multiple files because eventually, that one file is not sufficient anymore.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-files"&gt;
  &lt;/a&gt;
  Multiple files
&lt;/h3&gt;

&lt;p&gt;Instead of having all our code in one file, we can split these components into multiple files. At this point, as our project is still quite small, I would do it like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KIge0vVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpc5jl5y2b6f6d2b91s4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KIge0vVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpc5jl5y2b6f6d2b91s4.png" alt="3" width="880" height="538"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, List component exports only &lt;code&gt;List&lt;/code&gt;, but it also has the &lt;code&gt;ListItem&lt;/code&gt; component, which is not exported.&lt;/p&gt;

&lt;p&gt;If you want to take it to the next level, you can start using directories instead of files. I would also extract the &lt;code&gt;ListItem&lt;/code&gt; from &lt;code&gt;List&lt;/code&gt; and make it its own standalone component inside &lt;code&gt;src/components/List/partials&lt;/code&gt; subdirectory:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nUF4L19X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88h4a8te8e7ximsgjpdm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nUF4L19X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88h4a8te8e7ximsgjpdm.png" alt="Image description" width="880" height="653"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From now on, I would only use &lt;code&gt;/components&lt;/code&gt; directory for reusable components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#folder-separation"&gt;
  &lt;/a&gt;
  Folder separation
&lt;/h3&gt;

&lt;p&gt;Next, we separate features from components. Let's say we need to create an &lt;code&gt;useUser&lt;/code&gt; hook, so we'll create a dedicated &lt;code&gt;hooks&lt;/code&gt; directory and put it in there: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XFQS1exa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x86dawzg1zgtk6b63h5d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XFQS1exa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x86dawzg1zgtk6b63h5d.png" alt="4" width="880" height="729"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That &lt;code&gt;hooks&lt;/code&gt; folder is meant for reusable hooks only. If you have a hook that is used by one component only, it should remain in the component's own file (or directory). &lt;/p&gt;

&lt;p&gt;That same principle applies to many other things as well. For example, if we need to create a reusable service - we'll create a &lt;code&gt;services&lt;/code&gt; directory and put our service in there:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P11moDXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6t2prz9s1274xpof6zsz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P11moDXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6t2prz9s1274xpof6zsz.png" alt="5" width="880" height="806"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#separated-views"&gt;
  &lt;/a&gt;
  Separated views
&lt;/h3&gt;

&lt;p&gt;When we create separate directories for everything that's reusable and keep the non-reusable stuff only where it is used, we've come a long way.&lt;/p&gt;

&lt;p&gt;Lastly, I want to create a directory called &lt;code&gt;views&lt;/code&gt;. Those views are basically a representation of the url. For example, a directory &lt;code&gt;User&lt;/code&gt; could mean &lt;code&gt;https://&amp;lt;url&amp;gt;/user&lt;/code&gt; and so on.&lt;/p&gt;

&lt;p&gt;These views can of course import reusable services or components, but they also have their own subdirectories for non-reusable stuff.&lt;/p&gt;

&lt;p&gt;Here's an example, how my project structure could look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gvk1ah2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/klbc1mn1cty4nrfvwhln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gvk1ah2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/klbc1mn1cty4nrfvwhln.png" alt="6" width="880" height="924"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Changelog #0003 — 📦 HTTPie command generation</title>
      <author>Cláudia Delgado</author>
      <pubDate>Sat, 27 Nov 2021 01:30:20 +0000</pubDate>
      <link>https://dev.to/pie/changelog-0003-httpie-command-generation-231f</link>
      <guid>https://dev.to/pie/changelog-0003-httpie-command-generation-231f</guid>
      <description>&lt;p&gt;Friday! It's the time to let you know what have we been up to. Check out what's new this week 👇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#httpie-for-web-amp-desktop"&gt;
  &lt;/a&gt;
  HTTPie for Web &amp;amp; Desktop
&lt;/h2&gt;

&lt;p&gt;Our mission to provide the best experience to anyone working with APIs continues at full speed. We've reached feature parity with the &lt;a href="https://httpie.io/cli"&gt;terminal version&lt;/a&gt;, launched in a &lt;a href="https://httpie.io/beta"&gt;private beta&lt;/a&gt;, added &lt;a href="https://httpie.io/blog/changelog-0001"&gt;light theme&lt;/a&gt;, &lt;a href="https://httpie.io/blog/changelog-0002"&gt;tabs&lt;/a&gt;, persistency, and more.&lt;/p&gt;

&lt;p&gt;Now we are focusing on a couple of Big Things™. In the meantime, here’s a few goodies across the platform:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#export-requests-to-httpie-for-terminal"&gt;
  &lt;/a&gt;
  📦 Export requests to HTTPie for Terminal
&lt;/h3&gt;

&lt;p&gt;HTTPie for Terminal is still our most beloved child, and we want it to go hand in hand with Web &amp;amp; Desktop. This is the first step in that direction: you can now generate HTTPie commands in the app.&lt;/p&gt;

&lt;p&gt;Open the preview and select the HTTPie option. Check the generated command and copy it to your terminal or share it with a CLI-first colleague. Easy!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resize-panels"&gt;
  &lt;/a&gt;
  ↔️ Resize panels
&lt;/h3&gt;

&lt;p&gt;HTTPie aims to be perfectly tailored to your API requests &amp;amp; responses. We try our best, but you'll always know better. The ultimate power is now yours: you can resize panels.&lt;/p&gt;

&lt;p&gt;Choose your preferred panel's width by clicking and dragging the panel dividers to make them wider or narrower.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reorder-tabs"&gt;
  &lt;/a&gt;
  🔀 Re-order tabs
&lt;/h3&gt;

&lt;p&gt;If you use tabs for organization, you'll probably find this a great addition to our last tabs update. Now you can drag and drop each tab and place them in your preferred order.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improvements"&gt;
  &lt;/a&gt;
  ✨ Improvements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Need to recall when you sent that request? Now you don't need to remember. Check out the timestamp near the  time and size info, at the bottom of the response panel.&lt;/li&gt;
&lt;li&gt;Speaking of that area: when you hover the response size info, you now get more granular time &amp;amp; size stats.&lt;/li&gt;
&lt;li&gt;Introduced orange color for recoverable errors (e.g., invalid JSON in the editor). Red is now used exclusively for blocking issues, and orange is for all others.&lt;/li&gt;
&lt;li&gt;Tab names now omit common URL prefixes like &lt;code&gt;http://&lt;/code&gt; and &lt;code&gt;www.&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fixes"&gt;
  &lt;/a&gt;
  🪲 Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Response headers were a bit mixed up with proxy headers, autch! We fixed it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#httpie-for-terminal"&gt;
  &lt;/a&gt;
  HTTPie for Terminal
&lt;/h2&gt;

&lt;p&gt;There are improvements in the &lt;a href="https://github.com/httpie/httpie"&gt;development version&lt;/a&gt; of &lt;a href="https://httpie.io/cli"&gt;HTTPie for Terminal&lt;/a&gt; as well:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#plugins-management-command"&gt;
  &lt;/a&gt;
  🔌 Plugins management command
&lt;/h3&gt;

&lt;p&gt;HTTPie for Terminal offers extensibility through plugins, and there are over 100+ of them available to try!&lt;/p&gt;

&lt;p&gt;They add things like new authentication methods (&lt;a href="https://github.com/akamai/httpie-edgegrid"&gt;akamai/httpie-edgegrid&lt;/a&gt;), transport mechanisms (&lt;a href="https://github.com/httpie/httpie-unixsocket"&gt;httpie/httpie-unixsocket&lt;/a&gt;), message convertors (&lt;a href="https://github.com/banteg/httpie-image"&gt;banteg/httpie-image&lt;/a&gt;), or simply change how a response is formatted.&lt;/p&gt;

&lt;p&gt;We’ve added a new command, &lt;code&gt;httpie plugins&lt;/code&gt;, to help you manage (&lt;code&gt;install&lt;/code&gt;/&lt;code&gt;uninstall&lt;/code&gt;/&lt;code&gt;list&lt;/code&gt;) plugins. It also solves a long-standing plugins-related issue with non-&lt;code&gt;pip&lt;/code&gt; installations (e.g., via Homebrew) and it's a potential place for many new features to come. (&lt;a href="https://github.com/httpie/httpie/pull/1200"&gt;#1200&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#happy-testing-and-see-you-next-week"&gt;
  &lt;/a&gt;
  Happy testing, and see you next week!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;💁🏻‍♀️ If you’re not on the private beta yet, you can &lt;a href="https://httpie.io/beta"&gt;join the waitlist here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;👉 You can also follow &lt;a href="https://twitter.com/httpie"&gt;@httpie&lt;/a&gt; and join our &lt;a href="https://httpie.io/discord"&gt;Discord community&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Originally published on &lt;a href="https://httpie.io/blog/changelog-0003"&gt;HTTPie blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devtools</category>
      <category>api</category>
      <category>testing</category>
      <category>httpie</category>
    </item>
    <item>
      <title>DGraph Data Modeling: Part 1 - Timestamps</title>
      <author>Jonathan Gamble</author>
      <pubDate>Sat, 27 Nov 2021 00:30:58 +0000</pubDate>
      <link>https://dev.to/jdgamble555/dgraph-data-modeling-part-1-timestamps-5fp0</link>
      <guid>https://dev.to/jdgamble555/dgraph-data-modeling-part-1-timestamps-5fp0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-dgraph"&gt;
  &lt;/a&gt;
  What is DGraph?
&lt;/h2&gt;

&lt;p&gt;In my opinion, &lt;a href="https://dgraph.io/"&gt;DGraph&lt;/a&gt; is the best competition to Firestore there is (and much much more). Imagine Firestore with Subscriptions, plus a Graph Database for complex searching, plus any kind of relational data you can think of, wrapped in a GraphQL interface, or a backend custom language called DQL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timestamps-huh"&gt;
  &lt;/a&gt;
  Timestamps huh?
&lt;/h2&gt;

&lt;p&gt;While DGraph is new and they team works on getting every feature we can think of implemented, Timestamps seems to be one of the most requested features. There is an active &lt;a href="https://github.com/dgraph-io/dgraph/pull/8017"&gt;pull request&lt;/a&gt; on github for this feature (dpeek, seriously thank you for your hard work--also anytime the Dgraph team works on GraphQL Features, thank you guys too!), the feature is not quite available for the public. Once approved, it will be available to non-cloud users immediately (or now if they want to add use a custom backend), and to cloud users hopefully in the next 0 days to 6 months. At that point, I will update this posts, as it will still contain valuable information for some users. It is also good to know that the forementioned feature request will not protect the user from updating their own timestamps (which you don't want), until the &lt;a href="https://discuss.dgraph.io/t/feature-request-update-after-auth-validation/14799"&gt;update after @auth&lt;/a&gt; feature is added. This method will protect it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#okay-so-what-can-i-do-about-it-now"&gt;
  &lt;/a&gt;
  Okay, so what can I do about it now!?
&lt;/h2&gt;

&lt;p&gt;That my friends, is why I wrote this post. You can get your precious timestamps now, if you just model your data a certain way and add a little backend code.&lt;/p&gt;

&lt;p&gt;Granted, you can just create a &lt;a href="https://dgraph.io/docs/graphql/lambda/mutation/"&gt;custom mutation&lt;/a&gt;, which is DGraph's official work around, but then you have to lock all adds and updates on your schema, which is not a good thing. That being said, custom mutations can pretty much solve any problem if you want to just do all mutations with them.&lt;/p&gt;

&lt;p&gt;DGraph currently does not support pre-mutation triggers (hooks), but they do support post-mutation hooks. I have thought about this for a while, as the model is not intuitive until you think about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-on-with-it"&gt;
  &lt;/a&gt;
  Get on with it...
&lt;/h2&gt;

&lt;p&gt;Okay, so here is the setup:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;schema.graphql&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;lambdaOnMutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;hasInverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Timestamp&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;lambdaOnMutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Timestamp&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Timestamp&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ $NEVER: { eq: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;ALWAYS&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; } }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ $NEVER: { eq: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;ALWAYS&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; } }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ $NEVER: { eq: &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;ALWAYS&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; } }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DateTime&lt;/span&gt;
  &lt;span class="nx"&gt;updatedAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DateTime&lt;/span&gt;
  &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Notice there are no required ! symbols on any item related to the timestamps. This is because everything is done in the lambda.&lt;/li&gt;
&lt;li&gt;Notice there is no @hasInverse on anything related to timestamps. This is because everything is handled internally. On a GraphQL delete, one of the two connections will be deleted. The lambda needs the other connection to find the timestamp node to delete it. If you don't understand this, don't worry, just don't use hasInverse on any node related to timestamps.&lt;/li&gt;
&lt;li&gt;We have to create a new node &lt;code&gt;Timestamp&lt;/code&gt; in order to secure it from bad programming or pirate users. Once either the &lt;a href="https://discuss.dgraph.io/t/feature-request-update-after-auth-validation/14799"&gt;update after @auth&lt;/a&gt; is implemented next year, or another feature that adds field level auth, this will not be needed. I will talk more about circumventing this problem in future posts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;lambdas.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateTimestamps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dql&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operation&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;set&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operation&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;createdAt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;updatedAt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;rootUIDs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__typename&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;invType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
        upsert {
            query {
                q(func: type(Timestamp)) 
                @filter(uid_in(Timestamp.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;invType&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)) {
                    t as uid
                }
            }
            mutation @if(eq(len(t), 1)) {
                &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;op&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; {
                    &amp;lt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt; &amp;lt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.timestamp&amp;gt; uid(t) .
                    uid(t) &amp;lt;Timestamp.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;invType&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt; &amp;lt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt; .
                    uid(t) &amp;lt;Timestamp.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt; "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" .
                    uid(t) &amp;lt;dgraph.type&amp;gt; "Timestamp" .
                }  
            }
            mutation @if(eq(len(t), 0)) {
                &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;op&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; {
                    &amp;lt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt; &amp;lt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.timestamp&amp;gt; _:new .
                    _:new &amp;lt;Timestamp.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;invType&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt; &amp;lt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt; .
                    _:new &amp;lt;Timestamp.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt; "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" .
                    _:new &amp;lt;dgraph.type&amp;gt; "Timestamp" .
                }
            }
        }`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addWebHookResolvers&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User.add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;updateTimestamps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User.update&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;updateTimestamps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User.delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;updateTimestamps&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addWebHookResolvers&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post.add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;updateTimestamps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post.update&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;updateTimestamps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post.delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;updateTimestamps&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The beauty of this code is that it can be reused on any node, and you can even use the function within another function if you need to run other post-hook tasks.&lt;/p&gt;

&lt;p&gt;I write everything in typescript as I believe pure javascript is evil. 😈😡&lt;/p&gt;

&lt;p&gt;Simply run &lt;code&gt;tsc lambdas.ts&lt;/code&gt; in your typescript enabled framework (which you should be using) and copy the lambda.js file contents it creates into your lambda text-box on DGraph cloud, or wherever. You can also automate this with the &lt;a href="https://dgraph.io/docs/cloud/cloud-api/lambda/"&gt;Dgraph Cloud API&lt;/a&gt;, but that is for another post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can only use this on a new database, as it will not automatically create timestamps on old data (this should be obvious, but just adding it in case you can't quite wrap your brain around it yet)&lt;/li&gt;
&lt;li&gt;For the moment &lt;a href="https://dgraph.io/docs/graphql/lambda/webhook/"&gt;lambda webhooks&lt;/a&gt; do not run on nested updates, so you if you want this to work for those cases, you will have to also add a webhook on the parent object's add, update, and delete methods, if and only if there is new data coming in on this node.&lt;/li&gt;
&lt;li&gt;This method &lt;strong&gt;DOES&lt;/strong&gt; automatically add, update, and delete timestamps for all other cases. Let me know if you see any bugs.&lt;/li&gt;
&lt;li&gt;You must keep the inverse nodes (ex: Timestamp.post) as &lt;strong&gt;the same name&lt;/strong&gt; as the main node, but lowercase. This is how it automatically knows how to find the node. &lt;/li&gt;
&lt;li&gt;Add all your regular @auth stuff to the parent nodes, as the NEVER auth will prevent them from touching the timestamps.&lt;/li&gt;
&lt;li&gt;A user with the custom claim &lt;code&gt;{ NEVER: 'ALWAYS' }&lt;/code&gt; could technically pierce this @auth, so don't add that!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next up -- following the same pattern -- @cascade Delete --- Coming Soon...&lt;/p&gt;

&lt;p&gt;J&lt;/p&gt;

</description>
      <category>dgraph</category>
      <category>graphql</category>
      <category>graphdb</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Move WSL File System to another Drive</title>
      <author>Camilo Martinez</author>
      <pubDate>Sat, 27 Nov 2021 00:14:32 +0000</pubDate>
      <link>https://dev.to/equiman/move-wsl-file-system-to-another-drive-2a3d</link>
      <guid>https://dev.to/equiman/move-wsl-file-system-to-another-drive-2a3d</guid>
      <description>&lt;p&gt;If the &lt;code&gt;C:&lt;/code&gt; drive is running out of space, we can move our &lt;strong&gt;WSL2&lt;/strong&gt; file system to another drive in a few steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;If we are using an user different than root, we need to know it, running the &lt;code&gt;whoami&lt;/code&gt; command (WSL side):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVw-OEun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03sz2lk06bx7clveee03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVw-OEun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03sz2lk06bx7clveee03.png" alt="who am I" width="880" height="136"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also we need to know the distro name and WSL version, running the &lt;code&gt;wsl --list --verbose&lt;/code&gt; command on PowerShell (Windows Side):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MQuBrBWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9msg5nr4n46iva9rer02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MQuBrBWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9msg5nr4n46iva9rer02.png" alt="WSL list" width="880" height="136"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Knowing the &lt;strong&gt;username:&lt;/strong&gt; &lt;code&gt;equiman&lt;/code&gt;, the linux &lt;strong&gt;distribution:&lt;/strong&gt; &lt;code&gt;Ubuntu&lt;/code&gt;, and confirm that we are using the &lt;code&gt;WSL 2&lt;/code&gt; version, we are ready to...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JoRXazFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9luo23t87clkxk1wzhpx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JoRXazFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9luo23t87clkxk1wzhpx.gif" alt="moving day" width="501" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#move"&gt;
  &lt;/a&gt;
  Move
&lt;/h2&gt;

&lt;p&gt;All next steep need to be done on PowerShell (Windows Side).&lt;/p&gt;

&lt;p&gt;First we need to shutdown WSL to avoid data corruption. Close all WSL terminals that are using it and then run the &lt;code&gt;wsl --shutdown&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Next we are going to create a backup from our &lt;code&gt;Ubuntu&lt;/code&gt; linux distribution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;D:&lt;span class="se"&gt;\b&lt;/span&gt;ackup
wsl &lt;span class="nt"&gt;--export&lt;/span&gt; Ubuntu D:&lt;span class="se"&gt;\b&lt;/span&gt;ackup&lt;span class="se"&gt;\u&lt;/span&gt;buntu.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't worry if you not see progress indicators. This can be take a while depending how much data you have. Maybe it's good idea take a rest.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2i-cHxjE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpzhpd362f1tokfvrxrx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2i-cHxjE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpzhpd362f1tokfvrxrx.gif" alt="waiting" width="640" height="362"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When finish, we need to to unregister the linux distribution from &lt;code&gt;C:&lt;/code&gt; drive. It will also release the disk space.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wsl &lt;span class="nt"&gt;--unregister&lt;/span&gt; Ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, import again on our new disk. I'll use &lt;code&gt;D:&lt;/code&gt; disk as an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;D:&lt;span class="se"&gt;\W&lt;/span&gt;SL
wsl &lt;span class="nt"&gt;--import&lt;/span&gt; Ubuntu D:&lt;span class="se"&gt;\W&lt;/span&gt;SL&lt;span class="se"&gt;\ &lt;/span&gt;D:&lt;span class="se"&gt;\b&lt;/span&gt;ackup&lt;span class="se"&gt;\u&lt;/span&gt;buntu.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default Ubuntu will use root as default user, to switch to our user (&lt;code&gt;equiman&lt;/code&gt; in my case) we need to run this commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$env&lt;/span&gt;:USERPROFILE&lt;span class="se"&gt;\A&lt;/span&gt;ppData&lt;span class="se"&gt;\L&lt;/span&gt;ocal&lt;span class="se"&gt;\M&lt;/span&gt;icrosoft&lt;span class="se"&gt;\W&lt;/span&gt;indowsApps
ubuntu config &lt;span class="nt"&gt;--default-user&lt;/span&gt; equiman
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Ensure replacing &lt;code&gt;equiman&lt;/code&gt; with yours.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Restart WSL running &lt;code&gt;wsl&lt;/code&gt; command and it's done.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;That’s All Folks!&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Happy Coding&lt;/strong&gt; 🖖&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/equiman"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sbQqp7D6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/im18z7jhm102axyxiapk.png" alt="Buy me a coffee" width="222" height="56"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>terminal</category>
      <category>wsl</category>
      <category>linux</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>2 Ways to Implement Binding Adapters</title>
      <author>Vincent T</author>
      <pubDate>Fri, 26 Nov 2021 22:32:11 +0000</pubDate>
      <link>https://dev.to/vtsen/2-ways-to-implement-binding-adapters-4omc</link>
      <guid>https://dev.to/vtsen/2-ways-to-implement-binding-adapters-4omc</guid>
      <description>&lt;p&gt;&lt;strong&gt;One way is using function parameter and another way is using extension function.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There could be more than 2 ways to implement binding adapters, but this is what I know. Let's look at what binding adapters are first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-binding-adapters"&gt;
  &lt;/a&gt;
  What is Binding Adapters?
&lt;/h2&gt;

&lt;p&gt;Binding adapter is used for &lt;strong&gt;implementing custom attribute&lt;/strong&gt; in your layout file. For example, instead of using the default&lt;code&gt;android:text&lt;/code&gt; attribute, you want to customize it by creating a new attribute &lt;code&gt;app:customText&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#default-attribute-raw-androidtext-endraw-"&gt;
  &lt;/a&gt;
  Default Attribute - &lt;code&gt;android:text&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;TextView
    android:id="@+id/textView"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Hello World!"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#custom-attribute-raw-appcustomtext-endraw-"&gt;
  &lt;/a&gt;
  Custom Attribute - &lt;code&gt;app:customText&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;TextView
    android:id="@+id/textView"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    app:customText="@{`Hello World!`}"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To implement custom attribute, we use binding adapters. Binding adapter is part of the data binding library. So you need to include the following in your &lt;code&gt;build.gradle&lt;/code&gt; module file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;android {
    ...
    buildFeatures {
        dataBinding true
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To implement a binding adapter, you need to annotate the function with &lt;code&gt;@BindingAdapter("attribute name here")&lt;/code&gt; together with &lt;code&gt;View&lt;/code&gt; class that you want to bind to. It can be done by passing the &lt;code&gt;View&lt;/code&gt; class (e.g. &lt;code&gt;TextView&lt;/code&gt;) as a function parameter or using the extension function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-pass-raw-view-endraw-as-function-parameter"&gt;
  &lt;/a&gt;
  1.  Pass &lt;code&gt;View&lt;/code&gt; as Function Parameter
&lt;/h2&gt;

&lt;p&gt;I am not sure if this is a standard way (or maybe a recommended way?) but this is in the official documentation. What I learned initially is the second method below (i.e. using the extension function)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@BindingAdapter("customText")
fun setCustomText(view:TextView, item: String) {
    view.text = "My Custom String: $item"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-use-raw-view-endraw-extension-function"&gt;
  &lt;/a&gt;
  2. Use &lt;code&gt;View&lt;/code&gt; Extension Function
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@BindingAdapter("customText")
fun TextView.setCustomText(item: String) {
    text = "My Custom String: $item"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because this is an extension function, you can call it in code directly like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;binding.textView.setCustomText("Hello World!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can do that with the first method too, but the second method is more readable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personally"&gt;
  &lt;/a&gt;
  Personally
&lt;/h2&gt;

&lt;p&gt;I prefer the second method, use the extension function to implement binding adapter. It reflects the actual intention, which is to extend the&lt;code&gt;TextView&lt;/code&gt; functionality.&lt;/p&gt;




&lt;p&gt;Originally published at &lt;a href="https://vtsen.hashnode.dev/2-ways-to-implement-binding-adapters"&gt;https://vtsen.hashnode.dev&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>android</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Auto-fixable import sorting rules for ESLint</title>
      <author>Bartłomiej Stefański</author>
      <pubDate>Fri, 26 Nov 2021 22:29:58 +0000</pubDate>
      <link>https://dev.to/bmstefanski/auto-fixable-import-sorting-rules-for-eslint-laj</link>
      <guid>https://dev.to/bmstefanski/auto-fixable-import-sorting-rules-for-eslint-laj</guid>
      <description>&lt;p&gt;The pretty much standard way of sorting imports in JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3rd party imports first&lt;/li&gt;
&lt;li&gt;then local default exports&lt;/li&gt;
&lt;li&gt;and then local exports&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here's the snippet that sorts them in this exact order and &lt;br&gt;
satisfies my needs completely!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; eslint-plugin-import  

&lt;span class="c"&gt;# or    &lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; eslint-plugin-import
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .eslintrc.js  &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ignoredSortingDirectories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.git&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.vscode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node_modules&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="c1"&gt;/// ... some other configurations  &lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="c1"&gt;// ... your rules  &lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sort-imports&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;ignoreCase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;ignoreDeclarationSort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;  
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;import/order&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  
      &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
      &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="na"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;external&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;builtin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;internal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sibling&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;parent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  
        &lt;span class="na"&gt;pathGroups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;getDirectoriesToSort&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;singleDir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;singleDir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/**`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;internal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})),&lt;/span&gt;  
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;env&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;internal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;  
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;internal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;  
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public/**&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;internal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;after&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;  
        &lt;span class="p"&gt;],&lt;/span&gt;  
        &lt;span class="na"&gt;pathGroupsExcludedImportTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;internal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  
        &lt;span class="na"&gt;alphabetize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
          &lt;span class="na"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
          &lt;span class="na"&gt;caseInsensitive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
        &lt;span class="p"&gt;},&lt;/span&gt;  
      &lt;span class="p"&gt;},&lt;/span&gt;  
    &lt;span class="p"&gt;],&lt;/span&gt;  
    &lt;span class="c1"&gt;// ... your rules  &lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getDirectoriesToSort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getDirectories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ignoredSortingDirectories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getDirectories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;isDirectory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
  &lt;span class="p"&gt;})&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Four tips for staying motivated while learning</title>
      <author>Zach Snoek</author>
      <pubDate>Fri, 26 Nov 2021 22:11:40 +0000</pubDate>
      <link>https://dev.to/zachsnoek/four-tips-for-staying-motivated-while-learning-473e</link>
      <guid>https://dev.to/zachsnoek/four-tips-for-staying-motivated-while-learning-473e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Software engineering is a field that is regularly changing. Thus, developers must be continual learners to stay sharp.&lt;/p&gt;

&lt;p&gt;However, motivating yourself to learn and creating a lasting habit can be difficult, especially if you're self-studying outside of school or work.  Below are four techniques that I use to stay motivated while learning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-reference"&gt;
  &lt;/a&gt;
  Quick reference
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Set deadlines&lt;/li&gt;
&lt;li&gt;Gamify&lt;/li&gt;
&lt;li&gt;Spice it up&lt;/li&gt;
&lt;li&gt;Identify the end goal&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-set-deadlines"&gt;
  &lt;/a&gt;
  1. Set deadlines
&lt;/h2&gt;

&lt;p&gt;Learning without structure can feel like an endless task with no end in sight; it's often nice to have a sense of progress. I've found that artificial deadlines give me something to work toward and cleanly mark progress.&lt;/p&gt;

&lt;p&gt;Here are some examples of deadlines you could set for yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I will study Python for 30 minutes by the end of the day&lt;/li&gt;
&lt;li&gt;I will complete one module of my online JavaScript course by Friday every week&lt;/li&gt;
&lt;li&gt;I will finish two projects by the end of the month&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure to create manageable deadlines; experiment until you find something right for you. You may want to try a large interval at first and narrow it down until you find the sweet spot.&lt;/p&gt;

&lt;p&gt;For example, when I first started blogging, I wanted to publish bi-weekly. I quickly realized that writing and researching a quality post in two weeks wasn't possible for me, so I changed to a monthly schedule.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-gamify"&gt;
  &lt;/a&gt;
  2. Gamify
&lt;/h2&gt;

&lt;p&gt;Deadlines aren't for everyone: you might have better luck incentivizing yourself through gamification.&lt;/p&gt;

&lt;p&gt;For instance, you could implement a basic point system in which you earn a point every day you study SQL. You can use 14 points to treat yourself to a small meal or pay yourself five dollars. Or, you could reward yourself some other way when you've done something five consecutive days.&lt;/p&gt;

&lt;p&gt;I find the most motivation from the &lt;a href="https://lifehacker.com/jerry-seinfelds-productivity-secret-281626"&gt;Seinfeld method&lt;/a&gt;. The idea is that every day you do something––learning in some way, in our case––you put a red X through the day on a calendar. The more days you add X's, the longer the chain of X's gets; your goal is to "not break the chain." This method is essentially point-earning and provides an incentive for showing up consistently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-spice-it-up"&gt;
  &lt;/a&gt;
  3. Spice it up
&lt;/h2&gt;

&lt;p&gt;I've found it helpful to vary how I study the material. I find that learning through one medium can be tiring after a while. Temporarily switching the medium motivates me to keep learning.&lt;/p&gt;

&lt;p&gt;If I'm learning one topic, I find a preferred, primary medium for studying it––typically text. I'll then augment this material with other media such as YouTube videos and podcasts.&lt;/p&gt;

&lt;p&gt;For example, if I'm learning about prototypes in JavaScript, I'll spend most of my time reading Mozilla documentation or other articles. When I've absorbed that material, I'll watch various YouTube videos about prototypes and then try to write code and build something that uses them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-identify-the-end-goal"&gt;
  &lt;/a&gt;
  4. Identify the end goal
&lt;/h2&gt;

&lt;p&gt;Finally, learn with a clear goal in mind, and use this goal to remind yourself why you're learning.&lt;/p&gt;

&lt;p&gt;Why are you learning? Maybe you're preparing for a career change that will boost your income. Or perhaps you're &lt;a href="https://www.swyx.io/learn-in-public/"&gt;learning in public&lt;/a&gt; to help others and gain credibility. (Upward mobility has been a good impetus for me.)&lt;/p&gt;

&lt;p&gt;Remind yourself of this goal frequently: write it down on a sticky note attached to your computer or set a reminder on your phone; whatever is visible to you.&lt;/p&gt;

&lt;p&gt;Most importantly, find a goal that motivates you when you're the most unmotivated. A resilient objective can carry you through the periods when you'd rather watch Netflix or stop learning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;All of these methods might not work for you, but hopefully, you've been able to pick up something helpful. Let me know in the comments if there's a motivation technique you use that I missed!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect
&lt;/h2&gt;

&lt;p&gt;If you enjoyed this post, connect with me on &lt;a href="https://www.linkedin.com/in/zach-snoek-5b327b179/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://github.com/zachsnoek"&gt;GitHub&lt;/a&gt;, and &lt;a href="https://twitter.com/zach_snoek"&gt;Twitter&lt;/a&gt;! You can also &lt;a href="https://mailchi.mp/2df4b6d5458f/signup-page"&gt;subscribe to my mailing list&lt;/a&gt; and get the latest content and news from me.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>motivation</category>
    </item>
    <item>
      <title>What to charge for your app and what’s the value of it?</title>
      <author>Appmaster.io</author>
      <pubDate>Fri, 26 Nov 2021 22:05:38 +0000</pubDate>
      <link>https://dev.to/appmaster_io/what-to-charge-for-your-app-and-whats-the-value-of-it-ak6</link>
      <guid>https://dev.to/appmaster_io/what-to-charge-for-your-app-and-whats-the-value-of-it-ak6</guid>
      <description>&lt;p&gt;We all want to see a return on our investment, especially when creating applications, which require significant resources.&lt;/p&gt;

&lt;p&gt;You spent money, your time, put in a lot of effort, and finally, your app is ready. Now comes the new challenge: what to charge for your app?&lt;/p&gt;

&lt;p&gt;The decision depends on many factors. The number of working hours, testing costs, marketing and promotion, purchase of any licenses are some aspects that define the overall cost of development. Calculate the costs first, then set the price for the app.&lt;/p&gt;

&lt;p&gt;To put an adequate price tag on your product, first, let's look at the different pricing models.&lt;/p&gt;

&lt;p&gt;Understanding the pros and cons of pricing models will help you choose the best option for you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pricing-models"&gt;
  &lt;/a&gt;
  Pricing Models
&lt;/h1&gt;

&lt;p&gt;It is essential to find the balance between the price that customers are ready to pay and the amount you are hoping to receive to cover production costs and costs of future maintenance. The pricing model you will be prepared to adapt will entirely depend on the nature of your app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free"&gt;
  &lt;/a&gt;
  Free
&lt;/h2&gt;

&lt;p&gt;Who doesn't like getting things for free? Everybody does. Offering your app for free can be a good starting point. Lots of customers will be willing to try the app as long as it costs nothing.&lt;/p&gt;

&lt;p&gt;It is a working model for mobile apps. Because stores are full of options, people usually start looking for the solution from the "free" tab.&lt;/p&gt;

&lt;p&gt;Another reason for making the app completely free is if you are not planning to generate profit directly from it, rather than use it as a booster for other revenue streaming platforms. For example, redirect users to a website where they can make a purchase.&lt;/p&gt;

&lt;p&gt;In other cases, you need to figure out additional ways to generate revenue. And a profitable way to do so — run in-app advertisements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inapp-ads"&gt;
  &lt;/a&gt;
  In-app ads
&lt;/h2&gt;

&lt;p&gt;Running advertisements in the app generate ongoing revenue. You can implement many different formats for serving ads within your application: video ads, banners, pop-ups, etc.&lt;/p&gt;

&lt;p&gt;Still, you need to be very precise when picking the advertisement's format, periodicity, and subject. Otherways you may disrupt users with irrelevant, aggressive content.&lt;/p&gt;

&lt;p&gt;Use online services, such as Google AdMob, for filtering and sorting in-app ads.&lt;/p&gt;

&lt;p&gt;What else can you do? Offer customers to make a one-time payment to turn off the ads.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inapp-purchases"&gt;
  &lt;/a&gt;
  In-app purchases
&lt;/h2&gt;

&lt;p&gt;We bet you saw many examples of this model. According to this structure, a user can download an app for free, but it offers them some additional features for the money. If it's a game app, you can refill lives or unlock a photo filter in the editing app for an extra price.&lt;/p&gt;

&lt;p&gt;This is generally the most using model as it doesn't have any noticeable flaws and allows users to access the significant app functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#freemium"&gt;
  &lt;/a&gt;
  Freemium
&lt;/h2&gt;

&lt;p&gt;The term freemium comes from two words — free + premium. Like in-app purchases, it lets your customers download the app for free and then charges them for a premium feature.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can try several options:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Offer two versions of the app&lt;/strong&gt; — free and premium with broadened functionality. After downloading a free version and testing it, users themselves can decide whether to upgrade to premium or the free set is enough for their needs.&lt;br&gt;
&lt;strong&gt;Provide a free trial.&lt;/strong&gt; Set a limited free trial for your app, and once it expires, customers will have to pay to continue using the app.&lt;br&gt;
With the freemium model, your goal is to allure customers with the app's functionality and compel them to switch to the paid version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#potential-pitfalls"&gt;
  &lt;/a&gt;
  Potential pitfalls
&lt;/h2&gt;

&lt;p&gt;This pricing model can cause a lot of work for developers as they will be required to provide continuous updates and improvements and manage two different apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#subscription"&gt;
  &lt;/a&gt;
  Subscription
&lt;/h2&gt;

&lt;p&gt;Subscription is another good strategy to consider for your app. Everything is simple: users have to pay a monthly/annual fee to continue using the app.&lt;/p&gt;

&lt;p&gt;It is a general approach for streaming platforms and music apps. We all have an active subscription to Spotify, Netflix, or Apple Music.&lt;/p&gt;

&lt;p&gt;Even though you may not gain new users, you are still generating revenue from subscribed customers. Look at this as an opportunity to build loyal and long-lasting relationships with your customers. Keep in mind that you still have to provide updates and improvements, so you will not see a lot of subscription cancellations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paid"&gt;
  &lt;/a&gt;
  Paid
&lt;/h2&gt;

&lt;p&gt;This one is the simplest pricing model. It requires customers to pay a one-time fee to download the app and freely use it.&lt;/p&gt;

&lt;p&gt;More importantly, users can't get a feel for the app, and you ask them to pay you money right away. Your potential users need to understand that this app is worth purchasing. Use marketing to convince people that your application is one of the best to help them solve their problems.&lt;/p&gt;

&lt;p&gt;A short description in the app store is not enough. Users will want to know as many details as possible to make a purchase decision. So give them this information, create visual content to show how everything works, launch a website, and use related platforms for the promotion.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-the-value-of-your-app"&gt;
  &lt;/a&gt;
  What's the value of your app?
&lt;/h1&gt;

&lt;p&gt;Let's assume you analyzed all the pricing models and picked the most appropriate one. Whichever option you are considering, you still have to put a price tag.&lt;/p&gt;

&lt;p&gt;To make the right decision, you have to consider many things. Among them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The purpose of your app&lt;/li&gt;
&lt;li&gt;Your business goals&lt;/li&gt;
&lt;li&gt;Your target audience&lt;/li&gt;
&lt;li&gt;Market demand&lt;/li&gt;
&lt;li&gt;The cost of building and maintaining the app&lt;/li&gt;
&lt;li&gt;Your competitors&lt;/li&gt;
&lt;li&gt;Where you are going to display the app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But most importantly, identify the value of your app. You and your team are the first people to understand the value of your product. Only with a clear idea, you make people believe that they will get something worthwhile in return after the purchase.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-identify-the-value-of-the-app"&gt;
  &lt;/a&gt;
  How to identify the value of the app?
&lt;/h1&gt;

&lt;p&gt;First, specify the problem your app solves: a dictionary translating verbal speech, an editor improving your photos, or a task tracker organizing your workday.&lt;/p&gt;

&lt;p&gt;Then, identify how it delivers the solution and is better than thousands of other similar apps. Your dictionary may have a higher translation speed; an editor provides a broader range of manual settings.&lt;/p&gt;

&lt;p&gt;Prove to your customers that if they pay for your dictionary, they will get a pocket translator providing instant service and keeping translations in separate text documents. So it can replace interpreters and reduce expenses that you most likely spend to pay for their work.&lt;/p&gt;

&lt;p&gt;Nonetheless, try to be honest with your customers and respect their choice. You don't want to exceed their expectations. Built your relationships on trust, only this way you can earn loyalty and retention of your customers, which is key to ongoing revenue.&lt;/p&gt;

&lt;p&gt;Last but not least — make a competitive analysis. Look at the rates of similar apps and analyze the market you are entering in. Again, you can follow some strategies. Get your advantage by undercutting competitors on the price. If your app is on the same level, selling it for a higher price won't do any good. However, if your app is more complex and advanced, you should charge more.&lt;/p&gt;

&lt;p&gt;Many suggest when releasing your application to set a higher price and lower it over time. Be practical, and don't put more than average users will pay. If we are talking about mobile app stores, users expect the cost of the apps to be around 0.99 cents, if not free. And they hardly pay an amount more than $6.99.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Considering these facts, stores now contain more free apps, and paid ones continue to decrease. The best way to go, release a free app with in-app purchases. It gives you a field to be creative; you may include more options of purchasable features and service, providing customers with a choice: whether to pay or not, for what to spend money. If you decide to sell your app aside from the store, go with the subscription model. The pricing strategy should reflect the value of your app. A quality product will always find its customers.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How I send a gift coupon to my nerdy friend </title>
      <author>Siddharth</author>
      <pubDate>Fri, 26 Nov 2021 21:49:53 +0000</pubDate>
      <link>https://dev.to/xceed/how-i-send-a-gift-coupon-to-my-nerdy-friend-11b2</link>
      <guid>https://dev.to/xceed/how-i-send-a-gift-coupon-to-my-nerdy-friend-11b2</guid>
      <description>&lt;h3&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h3&gt;

&lt;p&gt;Our company has organized "Secret Santa", pre-covid times. I got the name of a nerdy colleague and a friend. I decided to gift him Amazon gift coupon. Like people usually do - hiding gift somewhere in desk, I instead created an online puzzle like a treasure hunt using some automation. If he solves he will receive gift on his email.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starting-point"&gt;
  &lt;/a&gt;
  Starting Point
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Printed a bar code on a paper and put it on my friend's workstation desk. Upon scanning, it redirects to a simple website I've created using wixsite.com.
Here's the picture of printed barcode along with other gifts -
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uy2Zd1qA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wpvr5si0a63vaula843.jpg" alt="gifts" width="880" height="660"&gt;
&lt;/li&gt;
&lt;li&gt;The landing page shows following instruction -
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--amOaOTiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4i4vqic0edw0pytki5v.png" alt="landing-page" width="597" height="280"&gt; &lt;/li&gt;
&lt;li&gt;To get your gift all you need is an email address.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#dont-scroll-take-the-challenge"&gt;
  &lt;/a&gt;
  Don't scroll! Take the challenge
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Before I tell you more, why don't you give a try yourself to find the email address? Here's the link after scanning barcode - &lt;a href="https://turantsephele.wixsite.com/giftgenerator"&gt;https://turantsephele.wixsite.com/giftgenerator&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;S&lt;br&gt;
C&lt;br&gt;
R&lt;br&gt;
O&lt;br&gt;
L&lt;br&gt;
L&lt;/p&gt;

&lt;p&gt;T&lt;br&gt;
O&lt;/p&gt;

&lt;p&gt;S&lt;br&gt;
E&lt;br&gt;
E&lt;/p&gt;

&lt;p&gt;N&lt;br&gt;
E&lt;br&gt;
X&lt;br&gt;
T&lt;/p&gt;

&lt;p&gt;S&lt;br&gt;
T&lt;br&gt;
E&lt;br&gt;
P&lt;br&gt;
S&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finding-hints-to-find-the-email-address"&gt;
  &lt;/a&gt;
  Finding hints to find the email address
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Once you click "Get email address", it redirects you to another page which shows a timer and nothing else. And with a small hidden button somewhere in page.&lt;/li&gt;
&lt;li&gt;If you are able to find the button and click, it redirects you to &lt;a href="http://fatiherikli.github.io/brainfuck-visualizer/#KysrKysrKysrKwpbCj4rKysrKwo+KysrKysrCj4rKysrKysrCj4rKysrKysrKysrCj4rKysrKysrKysrKwo8PDw8PC0KXQo+Pj4tLS4+Ky4tLS4+Ky48Ky4rLjw8PCsrKysrKysrLi0tLS4tLS0uKysrLi0tLisrLgotLS0tLS4rKysrLi0tLS0tLisrKysrLj4+Pi48PDwrLgotLS0uKysrLi0tLS0uKysrLi0uKysuLS0tLS0tLS4rKysrKysuCisrLi0tLi0uKy4+Pj4tLS48PDwuLS4tLi0tLS0uKysrKysrLisuLS4+Pj4rLjw8PC4tLS0tLS4rKysrKy4rKysuCi0tLS4+Pj4tLjw8PC0tLS0uPj4+KysuPDw8KysrKy4tLS0uKysrLj4+PisuPDw8Lj4+Pi0tLgoK"&gt;brainfuck visualizer&lt;/a&gt; with some pre-populated code. &lt;/li&gt;
&lt;li&gt;I've written this code in brainfuck and when you run it outputs next hint.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#final-hint"&gt;
  &lt;/a&gt;
  Final Hint
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;That brainfuck code outputs a simple string -
&lt;code&gt;Decode:747572616e7473657068656c6540676d61696c2e636f6d&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;After decoding, it gives you the email address.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#automation-for-sending-gift-coupon"&gt;
  &lt;/a&gt;
  Automation for sending gift coupon
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;I have created a IFTTT flow which triggers when there is an incoming email with subject "HOG RIEEDERRRRR" and it is from my friend's email address.&lt;/li&gt;
&lt;li&gt;Once this condition matches, IFTTT sends an email back with gift coupon details.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#to-make-sure-friend-dont-stuck"&gt;
  &lt;/a&gt;
  To make sure friend don't stuck
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Once timer ran out it reveals a link to brainfuck visualizer code.&lt;/li&gt;
&lt;li&gt;If he can't solve the puzzle in 3 days, an email triggers and sent gift coupon details to friend's email address. Again using IFTTT.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's all folks!&lt;/p&gt;

&lt;p&gt;If you did something similar or have some idea like this, drop it in comments :)&lt;/p&gt;

</description>
      <category>wixsite</category>
      <category>ifttt</category>
      <category>automation</category>
    </item>
    <item>
      <title>GameOff #4 - Total destruction!</title>
      <author>Meat Boy</author>
      <pubDate>Fri, 26 Nov 2021 21:45:25 +0000</pubDate>
      <link>https://dev.to/meatboy/gameoff-4-total-destruction-4pj4</link>
      <guid>https://dev.to/meatboy/gameoff-4-total-destruction-4pj4</guid>
      <description>&lt;p&gt;Since the last post, we have added so much to the game! VFX is ready, with better character animations, new monsters and map tweaks. Over the map is flying now Santa Claus throwing gifts with weapons to players.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/duNGQwla650"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>unity3d</category>
      <category>gamedev</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>How to Easily Add a Map to Your Website in Under 10 Minutes</title>
      <author>Kingsley Ubah</author>
      <pubDate>Fri, 26 Nov 2021 21:05:44 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/how-to-easily-add-a-map-to-your-website-in-under-10-minutes-4gkm</link>
      <guid>https://dev.to/ubahthebuilder/how-to-easily-add-a-map-to-your-website-in-under-10-minutes-4gkm</guid>
      <description>&lt;p&gt;Many modern web platforms leverage on maps and location-based features to provide services to users. Some popular examples of this are Uber and Airbnb. &lt;/p&gt;

&lt;p&gt;With the  &lt;a href="https://developer.tomtom.com/products/maps-sdk"&gt;TomTom Maps SDK&lt;/a&gt; , including a map in your website has never been easier. The toolkit enables access to various mapping features including street maps, real-time traffic conditions, fuzzy search and route planning for travellers.&lt;/p&gt;

&lt;p&gt;As a developer, you can leverage on &lt;a href="https://developer.tomtom.com/maps-sdk-web-js/documentation"&gt;TomTom's APIs methods&lt;/a&gt; to build and customize maps in your web or mobile application.&lt;/p&gt;

&lt;p&gt;Let's walkthrough the process of adding a map to your website using the TomTom Maps SDK. In the end, I'll include a link to the source code for this project for reference.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;Using TomTom Maps SDK is both easy and free. First, you'll need to  &lt;a href="https://developer.tomtom.com/user/register"&gt;register a TomTom developer account&lt;/a&gt;  to get an API key. This key gives you access to TomToms services, and is automatically generated for you on your dashboard once you're signed in.&lt;/p&gt;

&lt;p&gt;To include the SDK in your application, you have three options; you can either use a CDN link,  &lt;a href="https://developer.tomtom.com/maps-sdk-web-js/downloads"&gt;download the ZIP file&lt;/a&gt;  or  &lt;a href="https://developer.tomtom.com/maps-sdk-web-js/downloads"&gt;install the npm package. &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The easiest channel is through the CDN. Below are the links to the CDN files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel='stylesheet' type='text/css' href='https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.15.0/maps/maps.css'&amp;gt;
&amp;lt;script src="https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.15.0/maps/maps-web.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src="https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.15.0/services/services-web.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To include them, all you have to do is paste these links inside your html file and you're good to go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-a-map"&gt;
  &lt;/a&gt;
  Adding a map
&lt;/h3&gt;

&lt;p&gt;Let's add a map to our website.&lt;/p&gt;

&lt;p&gt;Create the html file for your site and paste the CDN links above, then, create a div to act as a wrapper for your map:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"mapArea"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- scripts --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Maybe style it a bit?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nf"&gt;#mapArea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a map instance by calling &lt;code&gt;tt.map&lt;/code&gt;, which is part of the windows object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;APIKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;your-api-key&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Lagos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;6.5244&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.3792&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;APIKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapArea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Lagos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We passed an options object to the method containing the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;key: The API key for your app, obtained from the developer dashboard.&lt;/li&gt;
&lt;li&gt;container: The div which we want to insert our map into.&lt;/li&gt;
&lt;li&gt;center: a focus point for our map.&lt;/li&gt;
&lt;li&gt;zoom: a zoom level for our map.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your map should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-c1eFt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637936581292/5FdwuJqHQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-c1eFt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637936581292/5FdwuJqHQ.png" alt="Map of Lagos" width="802" height="510"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Omitting both center and zoom properties will give an abstract map of the world:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--neJ23b0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637936673250/BAn9jRiQV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--neJ23b0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637936673250/BAn9jRiQV.png" alt="Map of the world" width="798" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-markers-to-the-map"&gt;
  &lt;/a&gt;
  Adding markers to the map
&lt;/h3&gt;

&lt;p&gt;Markers are specific points of reference in a map. You can easily add markers by calling the &lt;code&gt;Marker()&lt;/code&gt; function which is part of the TomTom Map API.&lt;/p&gt;

&lt;p&gt;Now let's add a single marker to our map:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bus_stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;6.4434&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.3553&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;marker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Marker&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;setLngLat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bus_stop&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;popup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Popup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;anchor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;top&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bus Stop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;popup&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;togglePopup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A single marker will be inserted into our map:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kuefvOED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637929472277/vZf4wsYQg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kuefvOED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637929472277/vZf4wsYQg.png" alt="Single marker of bus stop" width="798" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have multiple locations which you probably got from an API, you can recursively insert them with a JavaScript loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sites&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;6.4434&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.3553&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;6.4442&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.3561&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;6.4451&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.3573&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;6.4459&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.3520&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

      &lt;span class="nx"&gt;sites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;marker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Marker&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;setLngLat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;popup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Popup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;anchor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;top&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Site&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;popup&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;togglePopup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u8IyMdnz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637930241554/Wn6hGeeCX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u8IyMdnz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637930241554/Wn6hGeeCX.png" alt="Sites on a map" width="800" height="515"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Popup&lt;/code&gt; API method was called to instantiate a new popup for the marker along with a custom text. After created the instance, we proceeded to set the popup on the marker by calling the &lt;code&gt;setPopup&lt;/code&gt; method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performing-fuzzy-search"&gt;
  &lt;/a&gt;
  Performing Fuzzy Search
&lt;/h3&gt;

&lt;p&gt;There may be some cases where you want to display a location on the map using its common address, and not with the exact coordinates.&lt;/p&gt;

&lt;p&gt;The TomTom Maps SDK also exposes an API for performing fuzzy searches. The &lt;code&gt;fuzzySearch&lt;/code&gt; function call will return a list of coordinates corresponding to the bare address.&lt;/p&gt;

&lt;p&gt;First, let's add a text input for location to our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Type a location&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fetchLoc()&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mapArea&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Through the input, we can collect a query address from the user which we can then use the perform a fuzzy search.&lt;/p&gt;

&lt;p&gt;This function gets called when the submit button is clicked:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchLoc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fuzzySearch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;APIKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;moveMapTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we called the fuzzySearch API method, passing in the API key for our app, and the whatever location the user types into the input.&lt;/p&gt;

&lt;p&gt;Since the function returns a promise, we needed to await its response. The fuzzy search will return an object containing many properties related to our search. The results property will hold an array of locations return from our search.&lt;/p&gt;

&lt;p&gt;When the response is ready, we called the moveMapTo method, passing in the position property of the first match.&lt;/p&gt;

&lt;p&gt;This function is responsible for moving our map to the new address:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;moveMapTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newLoc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flyTo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newLoc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we tell our map to move from the current location, to the location which matches our search query.&lt;/p&gt;

&lt;p&gt;So when a location is added to the input and button is clicked, the map will switch context to the new location with a sleek transition.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The TomTom Web SDK has a lot of API to integrate various functionalities. You can learn more about that from the  &lt;a href="https://developer.tomtom.com/maps-sdk-web-js"&gt;official API documentation.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The code for this project is available on CodePen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-links"&gt;
  &lt;/a&gt;
  Other links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="http://twitter.com/UbahTheBuilder"&gt;Twitter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="http://github.com/KingsleyUbah"&gt;GitHub&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://gum.co/js-50"&gt;JavaScript Ebook&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
