<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How Pros Automate Repetitive Code using VS Code</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 05 Sep 2021 04:02:44 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/how-pros-automate-repetitive-code-using-vs-code-53b</link>
      <guid>https://dev.to/ruppysuppy/how-pros-automate-repetitive-code-using-vs-code-53b</guid>
      <description>&lt;p&gt;While &lt;strong&gt;Programming&lt;/strong&gt;, you are bound to encounter &lt;em&gt;Repetitive Code&lt;/em&gt;, writing which is a complete &lt;strong&gt;waste of time&lt;/strong&gt;. I am not talking about &lt;strong&gt;Non-DRY Code&lt;/strong&gt;, but &lt;em&gt;Essentials Code&lt;/em&gt; that is necessary to be written. An example of this would be connecting &lt;strong&gt;State&lt;/strong&gt;/&lt;strong&gt;Dispatch&lt;/strong&gt; to &lt;strong&gt;Props&lt;/strong&gt; using &lt;strong&gt;React-Redux&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Anyone who has worked on a decent-sized &lt;strong&gt;React-Redux&lt;/strong&gt; project knows how many times you have to write the same code to connect the &lt;strong&gt;Redux Store Data&lt;/strong&gt; to the &lt;strong&gt;Component Props&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Today we are going to fix that and provide you with a way to &lt;em&gt;streamline &lt;strong&gt;ANY&lt;/strong&gt; Repetitive Code&lt;/em&gt; you have and &lt;strong&gt;Maximize your Productivity&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-snippets-in-vs-code"&gt;
  &lt;/a&gt;
  What are &lt;strong&gt;Snippets&lt;/strong&gt; in &lt;strong&gt;VS Code&lt;/strong&gt;?
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;VS Code&lt;/strong&gt; is an Amazing Code Editor that provides a &lt;em&gt;plethora of tools&lt;/em&gt; to take your &lt;strong&gt;productivity&lt;/strong&gt; to the &lt;strong&gt;next level&lt;/strong&gt;. &lt;strong&gt;Snippets&lt;/strong&gt; are just one such tool.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Snippets&lt;/strong&gt; can be thought of as &lt;strong&gt;Templates&lt;/strong&gt; that enable you &lt;em&gt;write code once&lt;/em&gt; and reuse it, &lt;em&gt;as per requirement&lt;/em&gt;. It allows &lt;strong&gt;Variables&lt;/strong&gt; as well as &lt;strong&gt;Dynamic User Inputs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you have been using &lt;strong&gt;VS Code&lt;/strong&gt; for some time, you are bound to come across &lt;strong&gt;Snippets&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l0U4WfyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dl9v0jabeyz1e5zp616.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l0U4WfyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dl9v0jabeyz1e5zp616.png" alt="Snippet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some &lt;strong&gt;Snippets&lt;/strong&gt; come pre-built with &lt;strong&gt;VS Code&lt;/strong&gt;. You can install some extensions to add event more &lt;strong&gt;Snippets&lt;/strong&gt;, but most importantly, you can create your own &lt;strong&gt;Snippets&lt;/strong&gt; to cater to your very own needs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-our-first-snippets"&gt;
  &lt;/a&gt;
  Creating our first &lt;strong&gt;Snippets&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Creating a &lt;strong&gt;Snippets&lt;/strong&gt; is fairly simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;strong&gt;File &amp;gt; Preferences &amp;gt; User Snippets&lt;/strong&gt; (possibly &lt;strong&gt;Code &amp;gt; Preferences &amp;gt; User Snippets&lt;/strong&gt; on macOS).&lt;/p&gt;

&lt;p&gt;Or you might use &lt;code&gt;F1&lt;/code&gt; to bring up the &lt;strong&gt;Command Palette&lt;/strong&gt; and search for &lt;strong&gt;User Snippets&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the type of &lt;strong&gt;Snippet&lt;/strong&gt; you want to create (&lt;strong&gt;language-specific&lt;/strong&gt;, &lt;strong&gt;project-specific&lt;/strong&gt; or &lt;strong&gt;global&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a_YSpOzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e23x82lrpzerzvzx2sxy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a_YSpOzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e23x82lrpzerzvzx2sxy.png" alt="Snippet Creation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the following in the created &lt;code&gt;.code-snippets&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"Signature"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"scope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"prefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"Hello!!!"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Done! Now when you type &lt;strong&gt;"hello"&lt;/strong&gt; in an &lt;strong&gt;HTML&lt;/strong&gt; file, you would be to use the &lt;strong&gt;Snippet&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This wasn't a practical example, but we did manage to get our feet wet at making &lt;strong&gt;Snippets&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On inspecting the &lt;strong&gt;Snippet&lt;/strong&gt; definition, we find the &lt;code&gt;scope&lt;/code&gt; that declares which files the &lt;strong&gt;Snippet&lt;/strong&gt; should be used in. The &lt;code&gt;prefix&lt;/code&gt; mentions the &lt;strong&gt;prefix text&lt;/strong&gt; that will trigger the &lt;strong&gt;Snippet&lt;/strong&gt; to show up. The &lt;code&gt;body&lt;/code&gt; defines the &lt;strong&gt;body&lt;/strong&gt; of the &lt;strong&gt;Snippet&lt;/strong&gt;(each line of the &lt;strong&gt;Snippet&lt;/strong&gt; would be a new &lt;strong&gt;string&lt;/strong&gt; in array). And finally, &lt;code&gt;description&lt;/code&gt; is a short description of the &lt;strong&gt;Snippet&lt;/strong&gt;'s function.&lt;/p&gt;

&lt;p&gt;Let us make a couple of &lt;strong&gt;practical ones&lt;/strong&gt; to &lt;em&gt;deepen our understanding&lt;/em&gt; and solve the issue mentioned in the &lt;em&gt;Intro of the article&lt;/em&gt; (connecting &lt;strong&gt;State&lt;/strong&gt;/&lt;strong&gt;Dispatch&lt;/strong&gt; to &lt;strong&gt;Props&lt;/strong&gt; using &lt;strong&gt;React-Redux&lt;/strong&gt;).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#snippet-1-leaving-a-signature"&gt;
  &lt;/a&gt;
  Snippet 1: Leaving a Signature
&lt;/h1&gt;

&lt;p&gt;Let's try making a snippet that leaves a &lt;em&gt;signature&lt;/em&gt; like this in any file and isn't restricted to only &lt;strong&gt;Python&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="s"&gt;"""
Name: Tapajyoti Bose
Modified on: 05 September 2021 08:38:35
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We would also like the &lt;strong&gt;Snippet&lt;/strong&gt; to update the &lt;strong&gt;date&lt;/strong&gt; and &lt;strong&gt;time&lt;/strong&gt; dynamically, of course.&lt;/p&gt;

&lt;p&gt;Luckily, &lt;strong&gt;VS Code&lt;/strong&gt; provides a bunch of &lt;strong&gt;variables&lt;/strong&gt; for this purpose. &lt;/p&gt;

&lt;p&gt;We would be using &lt;code&gt;BLOCK_COMMENT_START&lt;/code&gt; and &lt;code&gt;BLOCK_COMMENT_END&lt;/code&gt; to automatically generate the block comments for any language and &lt;code&gt;CURRENT_DATE&lt;/code&gt;, &lt;code&gt;CURRENT_MONTH_NAME&lt;/code&gt;, &lt;code&gt;CURRENT_YEAR&lt;/code&gt;, &lt;code&gt;CURRENT_HOUR&lt;/code&gt;, &lt;code&gt;CURRENT_MINUTE&lt;/code&gt;, &amp;amp; &lt;code&gt;CURRENT_SECOND&lt;/code&gt; to generate the &lt;strong&gt;date&lt;/strong&gt; and &lt;strong&gt;time&lt;/strong&gt; dynamically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: To get the complete list of &lt;strong&gt;variables&lt;/strong&gt;, &lt;a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables"&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the &lt;strong&gt;Snippet&lt;/strong&gt; would initially look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"Signature"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"python,javascript,typescript,html,css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"signature"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"$BLOCK_COMMENT_START"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"Name: Tapajyoti Bose"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"Modified on: $CURRENT_DATE $CURRENT_MONTH_NAME $CURRENT_YEAR $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"$BLOCK_COMMENT_END"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Leave a signature"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now within &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;Javascript&lt;/strong&gt;, &lt;strong&gt;Typescript&lt;/strong&gt;, &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt; files, you would be able to leave a signature.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8MXTztiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7yb23slsuogytjmkzp7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8MXTztiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7yb23slsuogytjmkzp7.png" alt="Signature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might be wondering if &lt;em&gt;extending the functionality&lt;/em&gt; to &lt;em&gt;all languages&lt;/em&gt; would require you to add the &lt;em&gt;names of all languages&lt;/em&gt;. Luckily there is an easy solution: just remove the &lt;code&gt;scope&lt;/code&gt; from the &lt;strong&gt;Snippet&lt;/strong&gt; definition and &lt;strong&gt;Viola!&lt;/strong&gt; the functionality is extended to all languages!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#snippet-2-connecting-redux-to-react-props"&gt;
  &lt;/a&gt;
  Snippet 2: Connecting Redux to React Props
&lt;/h1&gt;

&lt;p&gt;This is even easier than the &lt;strong&gt;Signature Snippet&lt;/strong&gt;. Just copy the following code in the snippet definition, and you are done:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"Connect Component to Redux"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"javascriptreact,typescriptreact"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"connect"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"const mapStateToProps = (state) =&amp;gt; ({"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;$1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"})"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"const mapDispatchToProps = (dispatch) =&amp;gt; ({"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;$0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"})"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"export default connect(mapStateToProps, mapDispatchToProps)($TM_FILENAME_BASE)"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Connect React Component to Redux"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us examine what is being done.&lt;/p&gt;

&lt;p&gt;We are scoping the &lt;strong&gt;Snippet&lt;/strong&gt; to &lt;strong&gt;React&lt;/strong&gt; based projects for obvious reasons.&lt;/p&gt;

&lt;p&gt;In the body, you might be seeing &lt;code&gt;$0&lt;/code&gt; and &lt;code&gt;$1&lt;/code&gt; for the first time. These are placeholders for &lt;strong&gt;tab-able&lt;/strong&gt; positions where the user should enter &lt;em&gt;their own logic&lt;/em&gt; (the parts of the &lt;strong&gt;store&lt;/strong&gt; they want to connect to the &lt;strong&gt;props&lt;/strong&gt; in this case).&lt;/p&gt;

&lt;p&gt;We are using the &lt;strong&gt;File Name&lt;/strong&gt; as the &lt;strong&gt;Component Name&lt;/strong&gt;, as in &lt;em&gt;most&lt;/em&gt; cases, the convention is using the &lt;strong&gt;Component Name&lt;/strong&gt; to be the same as the &lt;strong&gt;File Name&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h1&gt;

&lt;p&gt;In this article, we went over how you can &lt;strong&gt;Automate Repetitive Code&lt;/strong&gt; using &lt;strong&gt;VS Code Snippets&lt;/strong&gt;. Now you can create &lt;strong&gt;Custom Snippets&lt;/strong&gt; that solve your own problems and boost your productivity to new heights.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Developing!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhChxXQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqh8teicsquqqivxlfus.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhChxXQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqh8teicsquqqivxlfus.gif" alt="Thumbs Up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Want to work together? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a Digital Nomad in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for weekly new tidbits on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are a few commonly asked questions I get. So, I hope this &lt;strong&gt;FAQ&lt;/strong&gt; section solves your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
Look into the following articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf"&gt;Front End Development Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Sorry, I am already under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you like to collaborate on our site?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As mentioned in the &lt;em&gt;previous question&lt;/em&gt;, I am in a time crunch, so I would have to pass on such opportunities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Connect to me on&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>programming</category>
      <category>json</category>
    </item>
    <item>
      <title>How well do you know DOM JavaScript?</title>
      <author>Nicholas Mendez</author>
      <pubDate>Sun, 05 Sep 2021 03:50:49 +0000</pubDate>
      <link>https://dev.to/snickdx/how-well-do-you-know-dom-javascript-3fl5</link>
      <guid>https://dev.to/snickdx/how-well-do-you-know-dom-javascript-3fl5</guid>
      <description>&lt;p&gt;HTML and JavaScript have been around awhile, with its age there are some very nuanced tricks and hacks that aren't very well known. Let's take a look at some of them and when they are appropriate to use.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#but-first-the-bom"&gt;
  &lt;/a&gt;
  But first... the BOM
&lt;/h1&gt;

&lt;p&gt;The collection of JavaScript objects &amp;amp; methods that let use access the features of the browser is referred to as the Browser Object Model. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XwipPdI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czniaazwv9pgm5pegycu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XwipPdI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czniaazwv9pgm5pegycu.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The Document Object Model which is the hierarchy of elements on a page that is accessed from the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement"&gt;window.document&lt;/a&gt; object. The DOM is really just part of the wider Browser Object Model BOM. &lt;/p&gt;

&lt;p&gt;The BOM then forms part of the wider set of Web APIs which allow us to tap into the wider features of the web.&lt;/p&gt;

&lt;p&gt;I often like to access a form and its element via their names and the document object as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"myform"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

       &lt;span class="c1"&gt;//you can access myform from the dom using document.forms&lt;/span&gt;
       &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myform&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

       &lt;span class="c1"&gt;//you can access a form's element using form.elements&lt;/span&gt;
       &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#dom-elements"&gt;
  &lt;/a&gt;
  DOM Elements
&lt;/h1&gt;

&lt;p&gt;Every other html element can be accessed in JavaScript by using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"&gt;document.querySelector()&lt;/a&gt;. The attributes of the HTML element can be accessed as a property of it's corresponding element object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#mylink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mylink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// https://google.com&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

      &lt;span class="c1"&gt;//access html attributes via properties&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// username&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// text&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// value entered into text field  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#window-and-global-scope"&gt;
  &lt;/a&gt;
  Window and Global Scope
&lt;/h1&gt;

&lt;p&gt;Global functions and objects declared with &lt;strong&gt;var&lt;/strong&gt; can be referenced via the window object. Note, that doesn't work with block scoped variables declared with &lt;strong&gt;let&lt;/strong&gt; and &lt;strong&gt;const&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;

        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myVar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// foo&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// undefined&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// [function: baz]&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#dom-nodes-and-id"&gt;
  &lt;/a&gt;
  DOM nodes and ID
&lt;/h1&gt;

&lt;p&gt;Any element with an ID will create a JavaScript object named after that ID. innerHTML is a very useful property that returns the contents of an HTML tab. Though it seems to behave quite differently across various browsers so you're probably better of using document.querySelector().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"myheading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My Heading&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;  

    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myheading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- logs "My Heading" --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#js-in-html-attributes"&gt;
  &lt;/a&gt;
  JS in html attributes
&lt;/h1&gt;

&lt;p&gt;Some html attributes can allow JavaScript to be executed. The most popular use case is probably calling a function in an &lt;a href="https://www.w3schools.com/tags/ref_eventattributes.asp"&gt;event attribute&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;   &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"btnClick()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My Button &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
       &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;btnClick&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
           &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button clicked!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also execute JavaScript in an anchor tab by specifying JavaScript in the hrefs value. This can supposedly work with elemetets that have the src attribute as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;   &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"javascript: console.log('hello')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Say Hello&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#data-attributes"&gt;
  &lt;/a&gt;
  Data attributes
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes"&gt;Data attributes&lt;/a&gt; are custom attributes we can add to and element and are a great way to provide contextual data to an event handler. You can create a data attribute by supplying your custom attribute with a data- prefix. Then you can access the value by using the dataset property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;   &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;"john"&lt;/span&gt; &lt;span class="na"&gt;data-age=&lt;/span&gt;&lt;span class="s"&gt;"17"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"logUser(event)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;John Button&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;"mary"&lt;/span&gt; &lt;span class="na"&gt;data-age=&lt;/span&gt;&lt;span class="s"&gt;"18"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"logUser(event)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Mary Button&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
         &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// logs john | mary&lt;/span&gt;
         &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// logs 17 | 18&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we used &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/target"&gt;event.target&lt;/a&gt; to get the elment that the click event occured on. This can only work if &lt;strong&gt;event&lt;/strong&gt; is passed to event handler logUser.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope you've learned a few new things in this post. Are there any lesser known tricks that I may have missed? Please share!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/buntine/dom-elements-with-ids-are-global-variable"&gt;Dev.to: DOM Elements with IDs are Global Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/6003819/what-is-the-difference-between-properties-and-attributes-in-html"&gt;Stack Overflow: Attributes &amp;amp; Properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/2725156/complete-list-of-html-tag-attributes-which-have-a-url-value"&gt;Stack Overflow: URL Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/27852405/html-attributes-that-can-contain-javascript"&gt;Stack Overflow: Elements with JS Attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/3434278/do-dom-tree-elements-with-ids-become-global-variables"&gt;Stack Overflow: ID and Global Variable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>ian miles cheong twitter</title>
      <author>mdsahin</author>
      <pubDate>Sun, 05 Sep 2021 03:39:35 +0000</pubDate>
      <link>https://dev.to/sahin82767123/ian-miles-cheong-twitter-464p</link>
      <guid>https://dev.to/sahin82767123/ian-miles-cheong-twitter-464p</guid>
      <description>&lt;p&gt;Ian miles cheong twitter on said :&lt;br&gt;
A Taliban spokesperson nonetheless has a lively Twitter account, notwithstanding the platform’s suspension of former President Donald Trump for “hateful” and “violent” content.&lt;br&gt;
The Taliban are actively operating to recapture Afghanistan after the American withdrawal, with endless men, girls, and kids vulnerable to their lives.&lt;br&gt;
&lt;a href="https://ondequando.com/ian-miles-cheong-twitter/"&gt;https://ondequando.com/ian-miles-cheong-twitter/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Creating Haskell notebooks with org-mode</title>
      <author>Laura Viglioni</author>
      <pubDate>Sun, 05 Sep 2021 03:30:51 +0000</pubDate>
      <link>https://dev.to/viglioni/creating-haskell-notebooks-with-org-mode-4h7</link>
      <guid>https://dev.to/viglioni/creating-haskell-notebooks-with-org-mode-4h7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#if-you-only-knew-the-power-of-the-dark-side"&gt;
  &lt;/a&gt;
  If you only knew the power of the Dark Side!
&lt;/h3&gt;

&lt;p&gt;Tools like &lt;a href="https://ipython.org/notebook.html"&gt;Jupyter Notebook&lt;/a&gt; are very well known and useful, although limited to a few languages. Wouldn't it be amazing to have this power to create notebooks with any other language?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pnYbPF3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/7guVjhMF9qBKE/giphy.gif%3Fcid%3Decf05e47q37qmzwrptf00no6pjyccaigplovdcpjplwdj59x%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pnYbPF3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/7guVjhMF9qBKE/giphy.gif%3Fcid%3Decf05e47q37qmzwrptf00no6pjyccaigplovdcpjplwdj59x%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this text, we will focus on doing it with Haskell, although it is virtually possible to be done using any language.&lt;/p&gt;

&lt;p&gt;Emacs has a very powerful mode called &lt;a href="https://orgmode.org/"&gt;org-mode&lt;/a&gt;, I once wrote &lt;a href="https://dev.to/viglioni/installing-latex-themes-on-your-machine-emacs-org-mode-1k9e"&gt;a text&lt;/a&gt; about using it to write presentations with &lt;a href="https://ctan.org/pkg/beamer?lang=en"&gt;beamer&lt;/a&gt;. This same mode allows us to write code snippets (&lt;strong&gt;and execute them!&lt;/strong&gt;), which is helpful to write notes/documents/presentations and export them to several formats like pdf, HTML, markdown, LaTeX and more!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1qOFYluebBg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3qFEUapB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/Y9zXpUBsE0INO/giphy.gif%3Fcid%3D790b7611eda5c9355bae7673018d1b4da33d2ce80fac8628%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3qFEUapB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/Y9zXpUBsE0INO/giphy.gif%3Fcid%3D790b7611eda5c9355bae7673018d1b4da33d2ce80fac8628%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your Emacs will need some packages: &lt;code&gt;org&lt;/code&gt;, &lt;code&gt;org-babel&lt;/code&gt; and &lt;code&gt;haskell-mode&lt;/code&gt;. If you use &lt;a href="http://spacemacs.org"&gt;spacemacs&lt;/a&gt; it is enough to add these layers in your &lt;code&gt;.spacemacs&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;    &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="c1"&gt;;; ...&lt;/span&gt;
     &lt;span class="nv"&gt;dotspacemacs-configuration-layers&lt;/span&gt;
      &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;org&lt;/span&gt;
         &lt;span class="nv"&gt;haskell&lt;/span&gt;
         &lt;span class="c1"&gt;;; ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, you must have &lt;a href="https://downloads.haskell.org/~ghc/"&gt;GHC&lt;/a&gt; on your machine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improving-what-we-already-have"&gt;
  &lt;/a&gt;
  Improving what we already have
&lt;/h3&gt;

&lt;p&gt;It is important to note that once you have those packages installed, Emacs already knows how to execute Haskell blocks. The motivation of this text is to compile the learning I had these last few months of how to do it better.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGBa45fF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/NsIwMll0rhfgpdQlzn/giphy.gif%3Fcid%3D790b7611531ae5c75a90d7cb9149659570d5bd1efff6f41b%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGBa45fF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/NsIwMll0rhfgpdQlzn/giphy.gif%3Fcid%3D790b7611531ae5c75a90d7cb9149659570d5bd1efff6f41b%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To run a code block is as simple as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    #+begin_src &amp;lt;language name&amp;gt;
      &amp;lt;code&amp;gt;
    #+end_src
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and hit &lt;code&gt;C-c C-c&lt;/code&gt;. If your Emacs knows how to compile it, it will execute the code and put the result below your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-multiline-haskell-code"&gt;
  &lt;/a&gt;
  Writing multiline Haskell code
&lt;/h3&gt;

&lt;p&gt;The default way that &lt;code&gt;org-babel&lt;/code&gt; compiles your code is using &lt;code&gt;GHCi&lt;/code&gt;, so if you have to write a multiline code, then you need to do it as if we were inside a &lt;code&gt;GHCi&lt;/code&gt; buffer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;-- a very verbose way to sum a sequence of numbers:  &lt;/span&gt;
    &lt;span class="n"&gt;sumInts&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
    &lt;span class="n"&gt;sumInts&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sumInts&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sumInts&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;         
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;    &lt;span class="kt"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;i.e.&lt;/em&gt; we need to put the multiline part of the code inside &lt;code&gt;:{ :}&lt;/code&gt; and what we want to be on the output on the last line. Also, it is important to note that, since it is running inside a &lt;code&gt;GHCi&lt;/code&gt;, we will only see the result of the last call. &lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;GHCi&lt;/code&gt; commands like &lt;code&gt;:set -XDataKinds&lt;/code&gt; too :))&lt;/p&gt;

&lt;p&gt;You may be asking yourself what is that &lt;code&gt;:exports both&lt;/code&gt;. As I said earlier, we can export this &lt;code&gt;org&lt;/code&gt; file to several formats. The &lt;code&gt;:exports&lt;/code&gt; tag defines if we want to export the code, result, both or none. You can check out the other tags &lt;a href="https://orgmode.org/manual/Using-Header-Arguments.html#Using-Header-Arguments"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fun fact&lt;/strong&gt;: GitHub understands &lt;code&gt;org&lt;/code&gt; files without any manual export. You can use &lt;code&gt;org&lt;/code&gt; files to READMEs, or even to post &lt;a href="https://github.com/Viglioni/lang-studies/blob/main/learn-you-a-haskell/chapter-11.org"&gt;your notebooks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V_coe-BN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/x2Vx409.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V_coe-BN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/x2Vx409.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#formatting-the-output"&gt;
  &lt;/a&gt;
  Formatting the output
&lt;/h3&gt;

&lt;p&gt;As you may have noticed in the excerpt above, the output has a &lt;code&gt;Prelude&amp;gt;&lt;/code&gt; "prefix", and it might get bigger if you import other libs or executes multiline blocks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;    &lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;map&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;    &lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Prelude&lt;/span&gt; &lt;span class="kt"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DXR_IUGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/crnWnvD4kWUAAAAC/annoyed-annoying.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DXR_IUGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/crnWnvD4kWUAAAAC/annoyed-annoying.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can avoid that with the &lt;code&gt;:post&lt;/code&gt; tag. This tag executes a function, of your choice, with the output of your code block as input. To get that, we will use... Yes, another code block :D&lt;/p&gt;

&lt;p&gt;At the beginning of your code, add these lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;    &lt;span class="o"&gt;#+&lt;/span&gt;&lt;span class="nv"&gt;name:&lt;/span&gt; &lt;span class="nv"&gt;org-babel-haskell-formatter&lt;/span&gt;
    &lt;span class="o"&gt;#+&lt;/span&gt;&lt;span class="nv"&gt;begin_src&lt;/span&gt; &lt;span class="nv"&gt;emacs-lisp&lt;/span&gt; &lt;span class="ss"&gt;:var&lt;/span&gt; &lt;span class="nv"&gt;strr=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="ss"&gt;:exports&lt;/span&gt; &lt;span class="nv"&gt;code&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"%s"&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rx&lt;/span&gt; &lt;span class="nv"&gt;line-start&lt;/span&gt;
                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;| alphanumeric blank "." "|&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;")))
               "" (format "&lt;/span&gt;&lt;span class="nv"&gt;%s&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="nv"&gt;strr&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="o"&gt;#+&lt;/span&gt;&lt;span class="nv"&gt;end_src&lt;/span&gt;      
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt; &lt;a href="https://github.com/Viglioni/laurisp/blob/main/config/org-mode-extra-configs.org"&gt;This is the file I use to store this func in my repo&lt;/a&gt; &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;For now on, on your Haskell code blocks, you add the &lt;code&gt;#+name:&lt;/code&gt; you gave to that code block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;map&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#you-might-be-asking-yourself-right-now"&gt;
  &lt;/a&gt;
  You might be asking yourself right now:
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#will-you-always-have-to-write-this-template-on-the-raw-beginsrc-endraw-"&gt;
  &lt;/a&gt;
  Will you always have to write this template on the &lt;code&gt;#+begin_src&lt;/code&gt;?
&lt;/h5&gt;

&lt;p&gt;Unfortunately, yes. My recommendation is to create a snippet to generate this Haskell block code or to create some helper function that does that for you.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#will-you-have-to-define-the-formatter-function-on-every-org-file"&gt;
  &lt;/a&gt;
  Will you have to define the formatter function on every org file?
&lt;/h5&gt;

&lt;p&gt;No! :D&lt;/p&gt;

&lt;p&gt;You can add to your config files an org file with that function definition and import it on your Emacs initiation using the &lt;code&gt;org-babel-lob-ingest&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with-eval-after-load&lt;/span&gt; &lt;span class="s"&gt;"org"&lt;/span&gt;
      &lt;span class="c1"&gt;;; load extra configs to org mode&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;org-babel-lob-ingest&lt;/span&gt; &lt;span class="s"&gt;"~/path/to/org-config-file.org"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that if you add a relative path (&lt;code&gt;./org-config-file.org&lt;/code&gt;) it might fail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-wild-awesome-feature-appears"&gt;
  &lt;/a&gt;
  A wild awesome feature appears!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dUNhyY99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/dwxrfKboa0YAAAAC/darth-vader.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dUNhyY99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/dwxrfKboa0YAAAAC/darth-vader.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the coolest stuff about using &lt;code&gt;org&lt;/code&gt; to write code snippets, even if you will not execute them, is that you can use specific modes while writing your snippet! &lt;/p&gt;

&lt;p&gt;With the cursor inside the &lt;code&gt;#+begin_src&lt;/code&gt; block, call a function &lt;code&gt;org-edit-special&lt;/code&gt; (&lt;code&gt;, '&lt;/code&gt; on spacemacs default binding), then Emacs will open a new buffer with your language mode. To exit it, hit &lt;code&gt;C-c '&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-external-haskell-libs-with-stack"&gt;
  &lt;/a&gt;
  Using external Haskell libs with Stack
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3OsPz7Wy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/vjlozeBNuwEAAAAC/ive-been-looking-forward-to-this-dooku.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3OsPz7Wy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/vjlozeBNuwEAAAAC/ive-been-looking-forward-to-this-dooku.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one was the trickiest to me, mostly because I'm not very familiar with the &lt;a href="https://docs.haskellstack.org/en/stable/"&gt;stack&lt;/a&gt; ecosystem. Maybe this is not the best way of doing it, but this is the way that I achieved it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Stack&lt;/code&gt; has a global project by default, you can check it out on &lt;code&gt;~/.stack/global-project&lt;/code&gt;. Inside this directory, create a new project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   &lt;span class="nv"&gt;$ &lt;/span&gt;stack new org-haskell new-template
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On &lt;code&gt;~/.stack/global-project/stack.yaml&lt;/code&gt; add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;            &lt;span class="na"&gt;packages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;org-haskell&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, all the libs you have imported on your &lt;code&gt;.stack/global-project/org-haskell/packages.yaml&lt;/code&gt; will be available on &lt;code&gt;stack ghci&lt;/code&gt;. For &lt;code&gt;org-babel&lt;/code&gt; to use it instead of regular &lt;code&gt;GHCi&lt;/code&gt;, set this variable on your configs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;haskell-process-type&lt;/span&gt; &lt;span class="ss"&gt;'stack-ghci&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#know-the-power-of-the-dark-side"&gt;
  &lt;/a&gt;
  Know the power of the Dark Side!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UydVxfxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xTiIzIhgJ6ZrY3cZeo/giphy.gif%3Fcid%3D790b76119c80a5db5863d2363f1ec9e44c75267bf50b1f35%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UydVxfxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/xTiIzIhgJ6ZrY3cZeo/giphy.gif%3Fcid%3D790b76119c80a5db5863d2363f1ec9e44c75267bf50b1f35%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I do hope this is helpful for you.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;org-mode&lt;/code&gt; is a &lt;strong&gt;very&lt;/strong&gt; powerful tool, I do recommend that you know it and use it!&lt;/p&gt;

&lt;p&gt;Stay safe, use masks (even if you already got your shots!) and use Emacs&lt;br&gt;
xoxo&lt;/p&gt;

&lt;p&gt;&lt;small&gt; &lt;a href="https://www.reddit.com/r/emacs/comments/lf2cfm/just_in_case_yall_were_looking_for_some_new/"&gt;The header picture&lt;/a&gt; &lt;/small&gt;&lt;/p&gt;

</description>
      <category>emacs</category>
      <category>haskell</category>
      <category>org</category>
      <category>notebook</category>
    </item>
    <item>
      <title>Tailwind CSS: core concepts and JIT mode.</title>
      <author>Tony Kharioki</author>
      <pubDate>Sun, 05 Sep 2021 02:58:50 +0000</pubDate>
      <link>https://dev.to/kharioki/tailwind-css-core-concepts-and-jit-mode-c94</link>
      <guid>https://dev.to/kharioki/tailwind-css-core-concepts-and-jit-mode-c94</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-tailwindcss"&gt;
  &lt;/a&gt;
  What is Tailwindcss?
&lt;/h2&gt;

&lt;p&gt;It is a utility-first css framework packed with classes and can be composed to build any design, directly in your markup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Its like bootstrap or materialize but while frameworks give you fully built components, tailwind gives you low-level utility classes to make your own components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Example: lets say we want to build a &lt;code&gt;card&lt;/code&gt; component &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OWBupYXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0usu2usiwlxv1qor8c9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWBupYXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0usu2usiwlxv1qor8c9.png" alt="card"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-prerequisites-to-using-tailwindcss"&gt;
  &lt;/a&gt;
  What are the prerequisites to using tailwindcss?
&lt;/h2&gt;

&lt;p&gt;To use tailwind, you'l need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic understanding of both HTML and CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-tailwind-css"&gt;
  &lt;/a&gt;
  Using Tailwind CSS?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can install Tailwind CLI using npm.&lt;/li&gt;
&lt;li&gt;You'll need node.js installed on your computer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-tailwind-works"&gt;
  &lt;/a&gt;
  How Tailwind works?
&lt;/h2&gt;

&lt;p&gt;We create a source file where we import Tailwind utilities and can even write our own css. Tailwind then processes that source file into vanilla css output file at build time with all the css which we link to our html pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-core-concepts"&gt;
  &lt;/a&gt;
  Tailwind Core Concepts
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Its Constraint Based&lt;/strong&gt;- Provides an API for your design system.&lt;br&gt;
Tailwind's utility classes help you work within the constraints of a system instead of littering your stylesheets with arbitrary values.&lt;br&gt;
They make it easy to be consistent with color choices, spacing, typography, shadows and everything else that makes up a well-engineered design system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Build anything&lt;/strong&gt; - Build whatever you want, seriously&lt;br&gt;
Because tailwind is so low-level, it never encourages you to build/design the came site twice. Even with the same color palette and sizing scale, its easy to build the same component with a completely different look in the next project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;- Its tiny in production&lt;br&gt;
Tailwind automatically removes all unused css when building for production. This means your final css bundle is the smallest it could possibly be. Usually less than 10kb&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mobile first&lt;/strong&gt; - responsive everything&lt;br&gt;
Tailwind lets you build responsive designs right into your html. You can add a screen size in front of any utility class and it will apply it at a specific breakpoint.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;State variants&lt;/strong&gt; - style different things on state changes&lt;br&gt;
You can stick &lt;code&gt;hover, focus, active, disabled, focus-within, focus visible&lt;/code&gt; or even tailwind's &lt;code&gt;group-hover&lt;/code&gt; and would style something on these state changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Component driven&lt;/strong&gt; - you can extract repeated utilities into a component.&lt;br&gt;
If you're not into component frameworks, you can use Tailwinds &lt;code&gt;@apply&lt;/code&gt; directive to extract repeated utility patterns into custom css classes just by copying and pasting the list of class names.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dark mode&lt;/strong&gt; - To enable dark mode in your configuration file throw &lt;code&gt;dark:&lt;/code&gt; in front of any color utility to apply it when dark mode is active. This works for background colors, text colors, border colors and even gradients.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Customization&lt;/strong&gt; - extend it, tweak it or change it&lt;br&gt;
Use the &lt;code&gt;tailwind.config.js&lt;/code&gt; to craft your own design system then let tailwind transform it into your own custom css framework.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Modern features&lt;/strong&gt; - Tailwind provides first-class css grid suppo, composable transforms and gradients powered by css variables, support for modern state selectors like &lt;code&gt;focus-visible&lt;/code&gt; e.t.c&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Editor Tools&lt;/strong&gt; - world class IDE integration&lt;br&gt;
Tailwind css intellisense extension integrates perfectly with vs code providing you with intelligent autocomplete suggestions, linting, class definitions and more.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j1MpYmm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp5wyiz4oi4bvgg5hhxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j1MpYmm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp5wyiz4oi4bvgg5hhxl.png" alt="Tailwind vscode plugin"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ready-made components with Tailwind UI&lt;/strong&gt; -&lt;br&gt;
Tailwind UI is a collection of beautiful, fully responsive UI components, designed and developed by creators of Tailwind CSS.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#justintime-mode"&gt;
  &lt;/a&gt;
  Just-In-Time Mode
&lt;/h2&gt;

&lt;p&gt;Just-In-Time(JIT) is a faster more powerful, on-demand engine for tailwind css v2.1+&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is a compiler for Tailwind css that generates your styles on-demand as you author your templates instead of generating everything in advance at initial build-time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-use-jit-mode"&gt;
  &lt;/a&gt;
  Why use JIT mode?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lightining fast build times&lt;/strong&gt; - this library can compile even the biggest projects in about 800ms(with incremental builds as fast as 3ms), no matter what tool you're using. This usually takes 3 - 8s to initially compile using CLI and 30-45s in webpack.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Every variant is enabled out-of-the-box&lt;/strong&gt; - since the library generates styles on demand, you can use any variant you want, whenever you want. you can even stack them like &lt;code&gt;sm:hover:active:disabled:opacity-75&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Generate arbitrary styles without writing custom css&lt;/strong&gt; - since styles are generated on demand, you can generate a utility for any ultra-specific value using square bracket notation like &lt;code&gt;bg-[#ffa6d7]&lt;/code&gt;. This works with variants too eg &lt;code&gt;md:bg-[#ffa6d7]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Your CSS is identical in development and production&lt;/strong&gt; - you do not need to purge unused styles for production since you see the exact same css in all environments.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Better browser performance in development&lt;/strong&gt; - since development builds are as small as production builds, the browser doesn't have to parse and manage multiple megabytes of pre-generated css.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-we-use-jit-mode"&gt;
  &lt;/a&gt;
  How we use JIT mode?
&lt;/h2&gt;

&lt;p&gt;To enable just-in-time mode, set the &lt;code&gt;mode&lt;/code&gt; option to &lt;code&gt;jit&lt;/code&gt; in the &lt;code&gt;tailwind.config.js&lt;/code&gt; file.&lt;br&gt;
You'll also need to configure the &lt;code&gt;purge&lt;/code&gt; option in &lt;code&gt;tailwind.config.js&lt;/code&gt; with all your template paths.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jIYpCyyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrbng53huii6dwc7vf6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jIYpCyyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrbng53huii6dwc7vf6z.png" alt="jit config"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
    </item>
    <item>
      <title>Vocabulary Building Day9</title>
      <author>vindhya Hegde </author>
      <pubDate>Sun, 05 Sep 2021 02:04:19 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-day9-4abb</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-day9-4abb</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;chortle&lt;/strong&gt;(verb): laugh merrily, laugh in a noisy, gleeful way.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hAXJD6py--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/jawmt14yZd4/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hAXJD6py--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/jawmt14yZd4/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=chortle&amp;amp;oq=chor&amp;amp;aqs=chrome.0.69i59l2j46i433i512j0i433i512j46i175i199i512j0i433i512l2j46i433i512j0i433i512.3931j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;exacerbate&lt;/strong&gt;(verb) :make worse.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3WPV9f2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/wZxWHEyHA6o/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3WPV9f2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/wZxWHEyHA6o/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=exacerbate&amp;amp;oq=exacerbate&amp;amp;aqs=chrome..69i57j0i433i512l3j0i512l6.5917j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;banal&lt;/strong&gt;(adjective): repeated too often, overfamiliar through overuse.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GU7PJi__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/72sfgHuScu0/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GU7PJi__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/72sfgHuScu0/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=banal&amp;amp;oq=banal&amp;amp;aqs=chrome.0.69i59j0i433i512l2j0i512j46i175i199i512j0i512l2j46i512j46i10i512j0i512.2615j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;decorous&lt;/strong&gt;(adjective): characterized by good taste in manners and conduct.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9C72O3PS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.seekapor.com/wp-content/uploads/2019/11/adjoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9C72O3PS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.seekapor.com/wp-content/uploads/2019/11/adjoa.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=semblance+meaning&amp;amp;oq=semblance&amp;amp;aqs=chrome.0.0i433i512j69i57j0i131i433i512j0i512l7.4293j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;culminate&lt;/strong&gt;(verb): reach a climax or point of highest development.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dEQNrff4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thumbs.dreamstime.com/b/culminate-2084723.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dEQNrff4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thumbs.dreamstime.com/b/culminate-2084723.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=culminate&amp;amp;oq=culminate&amp;amp;aqs=chrome..69i57j0i433i512l2j0i512l7.15137j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>gre</category>
      <category>day9</category>
    </item>
    <item>
      <title>Code This #6: Is Anagram</title>
      <author>Let's Code</author>
      <pubDate>Sat, 04 Sep 2021 23:44:35 +0000</pubDate>
      <link>https://dev.to/frontendengineer/code-this-6-is-anagram-pli</link>
      <guid>https://dev.to/frontendengineer/code-this-6-is-anagram-pli</guid>
      <description>&lt;h4&gt;
  &lt;a href="#interview-question-6"&gt;
  &lt;/a&gt;
  Interview Question #6:
&lt;/h4&gt;

&lt;p&gt;Write a function that will check if two strings are anagram❓🤔&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you need practice, try to solve this on your own. I have included 2 potential solutions below. &lt;/p&gt;

&lt;p&gt;Note: There are many other potential solutions to this problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Feel free to bookmark 🔖 even if you don't need this for now. You may need to refresh/review down the road when it is time for you to look for a new role.&lt;/p&gt;

&lt;p&gt;Code if you want to play around with it: &lt;a href="https://codepen.io/angelo_jin/pen/xxrVmdg"&gt;https://codepen.io/angelo_jin/pen/xxrVmdg&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#solution-1-array-sort"&gt;
  &lt;/a&gt;
  Solution #1: Array Sort
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;This solution will utilize a helper function to remove all unwanted punctuation and symbols, basically non-alphabetic characters. Then, will sort the string. Once both strings are sorted, compare if they are equal
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isAnagram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stringB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;normalize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^\w]&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringB&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#solution-2-objecthash-map"&gt;
  &lt;/a&gt;
  Solution #2: Object/Hash Map
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;This solution is what I prefer although more steps are needed than the first solution. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a helper function to build a hash map for the string counting each and every characters. Once map is built, iterate and compare the count of first map against the second map.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createCharMap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;normalizedString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^\w]&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;normalizedString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isAnagram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stringB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;charMapA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createCharMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;charMapB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createCharMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;charMapA&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;charMapB&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;charMapA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;charMapA&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;charMapB&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy coding and good luck if you are interviewing!&lt;/p&gt;

&lt;p&gt;If you want to support me - &lt;a href="https://www.buymeacoffee.com/letscode77"&gt;Buy Me A Coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you like a video instead of bunch of code 👍😊&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZelRKkGk8gY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>javascript</category>
      <category>jobinterview</category>
    </item>
    <item>
      <title>Snake In The JS Shadow: Run your python script in nodeJs</title>
      <author>Ademola Babatunde</author>
      <pubDate>Sat, 04 Sep 2021 23:29:54 +0000</pubDate>
      <link>https://dev.to/addempsea/snake-in-the-js-shadow-run-your-python-script-in-nodejs-im8</link>
      <guid>https://dev.to/addempsea/snake-in-the-js-shadow-run-your-python-script-in-nodejs-im8</guid>
      <description>&lt;p&gt;&lt;sup&gt;The cover image was sourced from &lt;a href="https://pythonsway.it/javascript-python/"&gt;here&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Ever wondered if you could run a python function inside a nodejs code? I wondered also and I researched and got to see a module in nodejs &lt;strong&gt;child_process&lt;/strong&gt; which allows you to run child processes. You may wonder what child processes are, well according to Wikipedia,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A child process in computing is a process created by another process. This technique pertains to multitasking operating systems and is sometimes called a subprocess or traditionally a subtask. There are two major procedures for creating a child process: the fork system call and the spawn.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will attempt to walk you through how to run a non-blocking python script inside of your nodejs code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#musthaves"&gt;
  &lt;/a&gt;
  Must-Haves
&lt;/h2&gt;

&lt;p&gt;Obviously, you must have nodejs installed on your machine. After which you should import the fs module.&lt;br&gt;
Also because I want to display the results in a browser, let's use express to serve it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install express&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#set-up"&gt;
  &lt;/a&gt;
  Set up
&lt;/h2&gt;

&lt;p&gt;Create two files, &lt;strong&gt;index.js&lt;/strong&gt; and &lt;strong&gt;main.py&lt;/strong&gt;, add the code below to your index.js file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { spawn } = require('child_process');
const express = require("express");
const app = express();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the main.py file, add the code below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print('Hello')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--At6soZm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://steemitimages.com/DQmP4WCzAeZaZpjjkDDy2ouW6STJkxbr7gf2SPdgA3Hrziu/hr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--At6soZm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://steemitimages.com/DQmP4WCzAeZaZpjjkDDy2ouW6STJkxbr7gf2SPdgA3Hrziu/hr.png" alt="hr.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-implementation"&gt;
  &lt;/a&gt;
  Main Implementation
&lt;/h2&gt;

&lt;p&gt;In the index.js file, add the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const pythonPromise = () =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    const python = spawn("python", ["./main.py"]);
    python.stdout.on("data", (data) =&amp;gt; {
      resolve(data.toString());
    });

    python.stderr.on("data", (data) =&amp;gt; {
      reject(data.toString());
    });
 });
};
app.get("/:name", async (req, res) =&amp;gt; {
  const dataFromPython = await pythonPromise();
  res.send(dataFromPython + req.params.name);
});
app.listen(3200, () =&amp;gt; console.log("App is running port 3200"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The spawn function here takes two arguments, the first &lt;code&gt;"python"&lt;/code&gt; which is the program we want to run, and &lt;code&gt;"./main"&lt;/code&gt; which is the path to the python file we wish to run.&lt;br&gt;
We all know nodejs is event-driven, the two events we are listening for are the &lt;code&gt;python.stdout.on&lt;/code&gt; and &lt;code&gt;python.stderr.on&lt;/code&gt;. The &lt;strong&gt;stderr&lt;/strong&gt; is short for standard error, which occurs while attempting to run the python script while &lt;strong&gt;stdout&lt;/strong&gt; is short for standard output, which is the return value from our script. The type of data returned is binary, which is why you need to call the &lt;code&gt;toString()&lt;/code&gt; method to convert it to a string.&lt;/p&gt;

&lt;p&gt;Start your server with &lt;code&gt;node index.js&lt;/code&gt; and visit &lt;code&gt;http://localhost:3200/yourName&lt;/code&gt; in your browser or postman to see the result.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--At6soZm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://steemitimages.com/DQmP4WCzAeZaZpjjkDDy2ouW6STJkxbr7gf2SPdgA3Hrziu/hr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--At6soZm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://steemitimages.com/DQmP4WCzAeZaZpjjkDDy2ouW6STJkxbr7gf2SPdgA3Hrziu/hr.png" alt="hr.png"&gt;&lt;/a&gt;&lt;br&gt;
There will really be no need to use python scripts if we are not passing arguments to the python script, let's edit our &lt;strong&gt;main.py&lt;/strong&gt; to have a function that takes arguments from your nodejs code. Replace with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sys
print('Hello ' + sys.argv[1] + ' your id is ' + sys.argv[2])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, we add more arguments to the spawn function and our index.js file should look like this below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const pythonPromise = (data) =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    const python = spawn("python", ["./main.py", ...data]);

    python.stdout.on("data", (data) =&amp;gt; {
      resolve(data.toString());
    });

    python.stderr.on("data", (data) =&amp;gt; {
      reject(data.toString());
    });
  });
};

app.get("/:name/:id", async (req, res) =&amp;gt; {
  const { name, id } = req.params;
  const dataFromPython = await pythonPromise([name, id]);
  res.send(dataFromPython);
});
app.listen(3200, () =&amp;gt; console.log("App is running port 3200"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may be wondering what the sys module we imported in the main.py script is. According to &lt;a href="https://www.geeksforgeeks.org/how-to-use-sys-argv-in-python/"&gt;geeksforgeeks&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The sys module provides functions and variables used to manipulate different parts of the Python runtime environment. This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the indexes argv[1] and argv[2] are the parameters we wish to pass to the script. The first argument, argr[0] is the name of the file we are running the script from.&lt;br&gt;
Start your server with &lt;code&gt;node index.js&lt;/code&gt; and visit &lt;code&gt;http://localhost:3200/yourName/anyId&lt;/code&gt; in your browser or postman to see the result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--At6soZm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://steemitimages.com/DQmP4WCzAeZaZpjjkDDy2ouW6STJkxbr7gf2SPdgA3Hrziu/hr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--At6soZm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://steemitimages.com/DQmP4WCzAeZaZpjjkDDy2ouW6STJkxbr7gf2SPdgA3Hrziu/hr.png" alt="hr.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a very basic example to expose you to the powers of the spawn method of the child_process module. There could be complex cases like passing JSON objects to your python script or receiving JSON data from the script, but this should get you started on the path to running python scripts in your nodejs applications. ✌🏻&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>Read Spring Properties Like a Pro</title>
      <author>Abdulcelil Cercenazi</author>
      <pubDate>Sat, 04 Sep 2021 22:57:43 +0000</pubDate>
      <link>https://dev.to/jarjanazy/read-spring-configs-like-a-pro-1do3</link>
      <guid>https://dev.to/jarjanazy/read-spring-configs-like-a-pro-1do3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#configuration-management-is-important"&gt;
  &lt;/a&gt;
  Configuration Management Is Important ☝️
&lt;/h2&gt;

&lt;p&gt;The necessity of reading configuration in a clean, organized way is growing rapidly especially with the spread of cloud application development and micro-service architecture which requires a lot of integration and connection settings.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#whats-wrong-with-the-typical-way-of-config-reading"&gt;
  &lt;/a&gt;
  What's Wrong With The Typical Way Of Config Reading 🤷
&lt;/h2&gt;

&lt;p&gt;Nothing. However, it can get complicated and messy when we want to inject many of those configs in our code.&lt;/p&gt;

&lt;p&gt;Let's look at an example with a single properties file and a test&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;application.properties&lt;/strong&gt; ⚙️&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight properties"&gt;&lt;code&gt;&lt;span class="py"&gt;demo.test.name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;testName  &lt;/span&gt;
&lt;span class="py"&gt;demo.test.age&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;DemoApplicationTests.java&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@SpringBootTest&lt;/span&gt;  
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DemoApplicationTests&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
   &lt;span class="nd"&gt;@Value&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"${demo.test.name}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  

  &lt;span class="nd"&gt;@Value&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"${demo.test.age}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  

  &lt;span class="nd"&gt;@Test&lt;/span&gt;  
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loadProperty&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"testName"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
      &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
  &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#now-imagine-we-have-5-or-10-of-those-properties-that-would-cause-our-code-to-be-cluttered-and-hard-to-follow"&gt;
  &lt;/a&gt;
  Now, imagine we have 5 or 10 of those properties, that would cause our code to be cluttered and hard to follow 🥴
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#configurationproperties-to-the-rescue"&gt;
  &lt;/a&gt;
  @ConfigurationProperties To The Rescue 🤠
&lt;/h2&gt;

&lt;p&gt;It allows us to inject values from the &lt;code&gt;application.properties&lt;/code&gt; file into a custom class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Component&lt;/span&gt;  
&lt;span class="nd"&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"demo.test"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;span class="nd"&gt;@Setter&lt;/span&gt;  
&lt;span class="nd"&gt;@Getter&lt;/span&gt;  
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DemoTestConfigs&lt;/span&gt;  
&lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;@Component&lt;/code&gt; annotation is to tell Spring to manage this class as a bean and provide it for injection.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;@ConfigurationProperties&lt;/code&gt; is what does the magic

&lt;ul&gt;
&lt;li&gt;It looks inside the property files in the class path and loads the properties that start with &lt;code&gt;demo.test&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The Lombok &lt;code&gt;@Setter&lt;/code&gt; is to enable &lt;code&gt;@ConfigurationProperties&lt;/code&gt; to populate the values in the &lt;code&gt;DemoTestConfigs&lt;/code&gt; class.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#we-can-then-simply-inject-the-raw-demotestconfigs-endraw-bean-into-our-services"&gt;
  &lt;/a&gt;
  We can then simply inject the &lt;code&gt;DemoTestConfigs&lt;/code&gt; bean into our services. 🤝
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#lets-check-it-in-a-test"&gt;
  &lt;/a&gt;
  Let's check it in a test
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@SpringBootTest&lt;/span&gt;  
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConfigurationPropertiesTest&lt;/span&gt;  
&lt;span class="o"&gt;{&lt;/span&gt;  
  &lt;span class="nd"&gt;@Autowired&lt;/span&gt;  
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;DemoTestConfigs&lt;/span&gt; &lt;span class="n"&gt;demoTestConfigs&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  

  &lt;span class="nd"&gt;@Test&lt;/span&gt;  
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loadPropertiesUsingConfigurationProperties&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;  
        &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"testName"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;demoTestConfigs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;  
        &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;demoTestConfigs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;  
  &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion 👇
&lt;/h2&gt;

&lt;p&gt;We've seen how &lt;code&gt;@ConfigurationProperties&lt;/code&gt; helps us bundle our similar configurations into a single component class which we can inject and use instead of specifying each and every one of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-on-github"&gt;
  &lt;/a&gt;
  Code On &lt;a href="https://github.com/Jarjanazy/spring-tutorials/tree/master/demo"&gt;GitHub 💻&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>cloud</category>
      <category>java</category>
    </item>
    <item>
      <title>Your health is your wealth – the importance of taking care of yourself as a software developer</title>
      <author>Kingbolumbu</author>
      <pubDate>Sat, 04 Sep 2021 22:13:08 +0000</pubDate>
      <link>https://dev.to/kingbolumbu/your-health-is-your-wealth-the-importance-of-taking-care-of-yourself-as-a-software-developer-56nh</link>
      <guid>https://dev.to/kingbolumbu/your-health-is-your-wealth-the-importance-of-taking-care-of-yourself-as-a-software-developer-56nh</guid>
      <description>&lt;p&gt;As an upcoming software developer, I am well aware of how inundated we can be in completing as many projects as soon as possible. We do this to improve our understanding of a language before progressing to the next language to learn, or to improve our completed project list to demonstrate we can apply our knowledge. Due to this, we are more likely to neglect out health – both physical and mental, which plays a major key role in success in any field. Indeed, there have been times where I would sit down working on a project for more than 8 hours with little to no breaks. I would do an all-nighter because I am trying to discover the error ruining my code. Only for it to turn out to be a small syntax error. Wonderful. Whilst all this is important, I believe as software developers, we tend to forget about our health which is not good. You matter to people – your family, relatives and close friends. Therefore, the unintentional harm you inflict on yourself can impact others. In this blog, I will be providing tips I practically use to take care of myself as an upcoming software developer.&lt;/p&gt;

&lt;p&gt;Exercise &lt;/p&gt;

&lt;p&gt;I am disciplined when it comes to fitness, so this is extremely easy for me. For others, this may be difficult because they dislike the idea of exercising. The thoughts of going to gym automatically drains their energy. You do not need to go to the gym five times per week. If you have the time, that is great. You can visit the gym three times per week to keep you physically active. This is what I do with the fitness program I bought. If you don’t have time to visit the gym at all, try jogging or going for walks every day. If your local park has an outdoor gym, use it. This all has tremendous benefits in keeping you physically active and your health good.&lt;/p&gt;

&lt;p&gt;Meditation &lt;/p&gt;

&lt;p&gt;I meditate once a day in the morning. Meditation can help reduce stress which leads to less anxiety. Good for keeping you in a calm state.&lt;/p&gt;

&lt;p&gt;Time for yourself &lt;/p&gt;

&lt;p&gt;Personally, once in a while, I have days where I practically do nothing related to code. I use this time to discover new activities I may like, or I treat myself to something good as a reward for the work the I have done. I believe it is important to sometimes to take a break and do something else. By doing this, we are at least trying to bring balance to work and life diverting us from overwhelming ourselves. Yesterday, on the 3rd of September 2021, I went to see the new Marvel movie: Shang-Chi and the Legend of the Ten Rings. Great film; it was a good breather.&lt;/p&gt;

&lt;p&gt;I hope to post more in the future to have a positive impact in this community and others.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>health</category>
    </item>
    <item>
      <title>Let's develop a QR Code Generator, part VIII: different sizes</title>
      <author>Massimo Artizzu</author>
      <pubDate>Sat, 04 Sep 2021 22:10:55 +0000</pubDate>
      <link>https://dev.to/maxart2501/let-s-develop-a-qr-code-generator-part-viii-different-sizes-1e0e</link>
      <guid>https://dev.to/maxart2501/let-s-develop-a-qr-code-generator-part-viii-different-sizes-1e0e</guid>
      <description>&lt;p&gt;At this point in the series, we know how to creare a QR Code with numeric, alphanumeric, ISO-8859-1 or Kanji data. But we've created only version 2 QR Codes, meaning that our content is quite limited in size. So let's see how to overcome this.&lt;/p&gt;

&lt;p&gt;As we've said in part 1, the &lt;em&gt;version&lt;/em&gt; of the code gives its size, as the code matrix will be a square of 17 + &lt;em&gt;version&lt;/em&gt; * 4 modules. Part of this square is occupied by either fixed patterns, or reserved space for format information.&lt;/p&gt;

&lt;p&gt;Let's have a look at what we're talking about:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aiEX9L0W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlbna95z96u2ccleudg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aiEX9L0W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlbna95z96u2ccleudg9.png" alt="Version 7 QR Code with fixed and reserved areas highlighted"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;three finder patterns (in green), as 8×8 module patterns (including separator lines): these are fixed;&lt;/li&gt;
&lt;li&gt;alignment patterns (in blue), 5×5 module patterns that vary in number (they are &lt;em&gt;n&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt; - 3, where &lt;em&gt;n&lt;/em&gt; depends on the version);&lt;/li&gt;
&lt;li&gt;timing patterns (in red): lines that connect the finder patterns, and as such their length depends on the QR Code version;&lt;/li&gt;
&lt;li&gt;a dark module (in olive, fixed);&lt;/li&gt;
&lt;li&gt;error level and mask information (in purple): two 15-module sequences (fixed);&lt;/li&gt;
&lt;li&gt;version format information (in orange); two 6×3 areas adjacent to the top right and bottom left finder patterns (fixed, but present only from version 7 and above).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The content of last two areas have to be generated, but we don't know how to do it for the second one yet (we'll see that later). The main point of variability is the number of alignment patterns in the matrix.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#placing-the-alignment-patterns"&gt;
  &lt;/a&gt;
  Placing the alignment patterns
&lt;/h2&gt;

&lt;p&gt;As we said, there are &lt;em&gt;n&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt; - 3 alignment patterns in a QR Code, except for version 1 that has no such patterns. The -3 part is because they'd be placed over the finder patterns, as you can see in the figure above. But how do we know this &lt;em&gt;n&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Basically, if &lt;em&gt;v&lt;/em&gt; is the version number, it's &lt;em&gt;n&lt;/em&gt; = floor(&lt;em&gt;v&lt;/em&gt; / 7) + 2, so versions 2 to 6 have 2&lt;sup&gt;2&lt;/sup&gt; - 3 = 1 alignment patterns, versions 7-13 have 3&lt;sup&gt;2&lt;/sup&gt; - 3 = 6, versions 14-20 have 4&lt;sup&gt;2&lt;/sup&gt; - 3 = 13 and so on.&lt;/p&gt;

&lt;p&gt;Now the question is: how do we place them in the QR Code's matrix?&lt;/p&gt;

&lt;p&gt;As we can realize from the previous figure, they are placed on the vertexes of a grid, and this grid is symmetrical relatively to its main diagonal. This means we only need to know the position of one set of its tracks (either the rows or the columns).&lt;/p&gt;

&lt;p&gt;For example, a version 2 QR Code has its alignment patterns on tracks 6 and 18 (nevermind we can only see one); while a version 7 has them on tracks 6, 22 and 38. These values are 0-based (the first row and column have index 0), and refer to the &lt;em&gt;center&lt;/em&gt; of the pattern.&lt;/p&gt;

&lt;p&gt;Here's the algorithm:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the &lt;strong&gt;first&lt;/strong&gt; track is always 6;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;last&lt;/strong&gt; track is always 6 from the end;&lt;/li&gt;
&lt;li&gt;for the tracks in the middle, do the following:

&lt;ul&gt;
&lt;li&gt;get the difference between the last and the first tracks above, then divide by &lt;em&gt;n&lt;/em&gt; - 1;&lt;/li&gt;
&lt;li&gt;take the &lt;em&gt;even number greater or equal&lt;/em&gt; to the quotient above;&lt;/li&gt;
&lt;li&gt;place the middle tracks counting &lt;em&gt;from the last one&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We need to take an even number because, as you might see from the figure from before, the alignment patterns must match the timing patterns, i.e. you can't have an alignment pattern placed on an odd row/column.&lt;/p&gt;

&lt;p&gt;Example: for version 22, &lt;em&gt;n&lt;/em&gt; is &lt;code&gt;Math.floor(22 / 7) + 2&lt;/code&gt;, so it's 5. A version 22 QR Code is 17 + 22 * 4 = 105 modules wide, so the fifth and last track is 98. For the other two:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the difference between the last and first track is 92;&lt;/li&gt;
&lt;li&gt;92 / 4 = 23, so the next even number is 24;&lt;/li&gt;
&lt;li&gt;therefore, the fourth track is 98 - 24 = 74, the third is 74 - 24 = 50 and the second is 50 - 24 = 26.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#in-code"&gt;
  &lt;/a&gt;
  In code
&lt;/h2&gt;

&lt;p&gt;The following function basically executes the above steps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAlignmentTracks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;intervals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// between first and last pattern&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;intervals&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;intervals&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intervals&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the pure function above should be used with just 40 different values, so we can safely memoize it, or precompute all the values beforehand and store them in a constant array. Or even copy a table from around the web (e.g. &lt;a href="https://github.com/kazuhikoarase/qrcode-generator/blob/ddbf82528a0f1d29ff40f06e3b07b25bdcfe1c70/js/qrcode.js#L863-L904"&gt;this well known library&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-many-codewords"&gt;
  &lt;/a&gt;
  How many codewords?
&lt;/h2&gt;

&lt;p&gt;Once the alignment pattern matter is solved, we can get to know how much actual &lt;em&gt;space&lt;/em&gt; there is in a QR Code, i.e. codewords that can be used to store data and error correction information.&lt;/p&gt;

&lt;p&gt;As we've said, version 1 has no alignment pattern, so the amount of available modules is:&lt;/p&gt;

&lt;p&gt;21&lt;sup&gt;2&lt;/sup&gt; (441, where 21 is the size of the QR Code)&lt;br&gt;
 - 3⋅8⋅8 (192, for 3 finder patterns)&lt;br&gt;
 - 2⋅5 (10, the timing patterns)&lt;br&gt;
 - 1 (the dark module)&lt;br&gt;
 - 2⋅15 (30, the error level and mask information)&lt;/p&gt;

&lt;p&gt;for a total of 208, i.e. 26 codewords.&lt;/p&gt;

&lt;p&gt;For larger versions, we have to compute this (let &lt;em&gt;v&lt;/em&gt; the version number and &lt;em&gt;n&lt;/em&gt; the number of alignment pattern coordinates):&lt;/p&gt;

&lt;p&gt;&lt;em&gt;v&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt; (total modules)&lt;br&gt;
 - 3⋅8⋅8 (finder patterns)&lt;br&gt;
 - (&lt;em&gt;n&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt; - 3)⋅5 (alignment patterns)&lt;br&gt;
 - 2⋅(4‍&lt;em&gt;v&lt;/em&gt; + 1) (timing patterns)&lt;br&gt;
 + 2⋅(&lt;em&gt;n&lt;/em&gt; - 2)⋅5 (readding the intersection of alignment and timing patterns)&lt;br&gt;
 - 1 (dark module)&lt;br&gt;
 - 2⋅3⋅6 (format data, only if &lt;em&gt;v&lt;/em&gt; &amp;gt; 6)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#in-code"&gt;
  &lt;/a&gt;
  In code
&lt;/h2&gt;

&lt;p&gt;We just need to do the above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAvailableModules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;alignmentCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alignmentCount&lt;/span&gt;  &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alignmentCount&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can simplify the above return statement or let the compiler do that for you (I got down to &lt;code&gt;16 * (version + 4) ** 2 - (5 * alignmentCount - 1) ** 2 - (version &amp;gt; 6 ? 172 : 136)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Just like &lt;code&gt;getAlignmentTracks&lt;/code&gt;, also this function can be memoized/use to precomputation/replaced with a table.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-many-data-codewords"&gt;
  &lt;/a&gt;
  How many &lt;em&gt;data&lt;/em&gt; codewords?
&lt;/h2&gt;

&lt;p&gt;The main question is, though, is get to know how many of those codewords are reserved for &lt;em&gt;data&lt;/em&gt; - and conversely how many for error correction.&lt;/p&gt;

&lt;p&gt;The problem here is that I haven't found, nor derived, any exact formula to determine that. Remember the error correction table we've seen in &lt;a href="https://dev.to/maxart2501/let-s-develop-a-qr-code-generator-part-i-basic-concepts-510a#error-correction"&gt;part 1&lt;/a&gt; and 3?&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Letter&lt;/th&gt;
&lt;th&gt;Data recovery&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Low&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;~7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Medium&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;~15%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Quartile&lt;/td&gt;
&lt;td&gt;Q&lt;/td&gt;
&lt;td&gt;~25%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;High&lt;/td&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;~30%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;But we just can't take those percentages and derive the amount of error correction codewords back. The original specification reports this formula (from the Reed-Solomon error correction algorithm):&lt;/p&gt;

&lt;p&gt;&lt;em&gt;e&lt;/em&gt; + 2‍&lt;em&gt;t&lt;/em&gt; ≤ &lt;em&gt;d&lt;/em&gt; - &lt;em&gt;p&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;e&lt;/em&gt; = number of erasures (i.e. single errors at known locations);&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;t&lt;/em&gt; = number of errors (i.e. recoverable codewords);&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;d&lt;/em&gt; = number of error correction codewords;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;p&lt;/em&gt; = number of misdecode protection codewords (generally 0, except for smaller QR Codes),&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;meaning that &lt;em&gt;d&lt;/em&gt; error correction codewords can correct &lt;em&gt;at most&lt;/em&gt; &lt;em&gt;d&lt;/em&gt;/2 unreadable codewords.&lt;/p&gt;

&lt;p&gt;But other than that, it just reports a table where we can just take the amount of error correction codewords, and that's it (you can get it &lt;a href="https://www.thonky.com/qr-code-tutorial/error-correction-table"&gt;from here&lt;/a&gt;, for example). If you compute the "recovery capacity" for each version and error level, you'll see those percentages being 2-3% off the values from the table.&lt;/p&gt;

&lt;p&gt;For example, our case of a version 2 QR Code with quartile error level has 22 error correction codewords, meaning a recovery capacity of 11… which is &lt;em&gt;exactly&lt;/em&gt; 25% of all the codewords. But it's a rare case.&lt;/p&gt;

&lt;p&gt;If you take a version 6 QR Code, still with quartile error correction level, it can recover at most 4*24/2 = 48 codewords out of 172, which is ~27.9%. If you reserve only 88 codewords for error correction instead of 96, you'd have a recovery capacity of ~25.5% (closer to 25%) and 8 more codewords for data. I don't know why they chose otherwise.&lt;/p&gt;

&lt;p&gt;Anyway, let's see how to structure a QR Code for larger versions, because it's not as straightforward as it was for version 2…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codeword-blocks"&gt;
  &lt;/a&gt;
  Codeword blocks
&lt;/h2&gt;

&lt;p&gt;As version grows, the number of total codewords grows too (more or less quadratically). The spec developers decided it was wiser to split the message into several blocks of varying amounts of codewords. Each block has its own data and error correction codewords.&lt;/p&gt;

&lt;p&gt;Moreover, not every block has the same amount of codewords, but they're divided in two groups instead: one with blocks of &lt;em&gt;n&lt;/em&gt; codewords, the other with block with &lt;em&gt;n&lt;/em&gt; + 1 codewords. But for every block the number of &lt;em&gt;error correction&lt;/em&gt; codewords is the same, so it's the number of &lt;em&gt;data&lt;/em&gt; codewords that has a difference of 1 between blocks of different groups.&lt;/p&gt;

&lt;p&gt;Splitting the total set of codewords into blocks happens as soon as version 3, while you'd get two groups in version 5. The main goal is having the number of error correction codewords in each block to be &lt;em&gt;at most&lt;/em&gt; 30, while splitting into groups is just for parity.&lt;/p&gt;

&lt;p&gt;But let's cut to the point, and see the actual table:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Version and EC level&lt;/th&gt;
&lt;th&gt;EC codewords/block&lt;/th&gt;
&lt;th&gt;Group 1 blocks&lt;/th&gt;
&lt;th&gt;Data codewords in G1 blocks&lt;/th&gt;
&lt;th&gt;Group 2 blocks&lt;/th&gt;
&lt;th&gt;Data codewords in G2 blocks&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1-L&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1-M&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1-Q&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1-H&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2-L&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2-M&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2-Q&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2-H&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3-L&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;55&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3-M&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3-Q&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3-H&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4-L&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4-M&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4-Q&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4-H&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5-L&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5-M&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5-Q&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5-H&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6-L&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;68&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6-M&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6-Q&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6-H&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7-L&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;78&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7-M&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7-Q&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7-H&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8-L&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8-M&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8-Q&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8-H&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9-M&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9-Q&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9-H&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10-L&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;68&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;69&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10-M&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10-Q&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10-H&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11-L&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;81&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11-M&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;51&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11-Q&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11-H&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12-L&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;92&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;93&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12-M&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12-Q&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12-H&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13-L&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;107&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13-M&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13-Q&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13-H&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14-M&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14-Q&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14-H&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15-L&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;87&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15-M&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15-H&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16-L&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;98&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;99&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16-Q&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17-L&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;107&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17-Q&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17-H&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;121&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18-M&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18-Q&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18-H&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19-L&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;113&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;114&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19-M&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19-Q&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19-H&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20-L&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;107&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20-M&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20-H&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21-L&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;117&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21-M&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21-Q&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22-L&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;111&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22-H&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;121&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;122&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;117&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;118&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25-L&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;106&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;107&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26-L&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;114&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26-Q&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;122&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;117&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;118&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;117&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;59&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;121&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;122&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;121&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;122&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;122&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;122&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;117&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;118&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;67&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40-L&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;118&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;119&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40-M&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40-Q&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40-H&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;61&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;To read these values: a version 38 QR Code with high error correction level has its data codewords split in two groups. The first group has 42 blocks of 15 codewords each, and the second has 32 blocks of 16 codewords. For each of these blocks, there's a error correction block of 30 codewords.&lt;/p&gt;

&lt;p&gt;As a practical example, let's create a QR Code for the string &lt;code&gt;https://en.wikipedia.org/wiki/QR_code#Error_correction&lt;/code&gt; (still byte content, for simplicity), adding a quartile error correction level. We need at least a version 5 QR Code for that.&lt;/p&gt;

&lt;p&gt;According to the table above, we'll need to split the data codewords into 2 blocks of 15 codewords, then other 2 blocks of 16 codewords each (for 62 codewords in total for data). Using the &lt;code&gt;getData&lt;/code&gt; function &lt;a href="https://dev.to/maxart2501/let-s-develop-a-qr-code-generator-part-vii-other-kinds-of-data-886#wrap-everything-up"&gt;from the last part&lt;/a&gt;, we get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; getData('https://en.wikipedia.org/wiki/QR_code#Error_correction', 8, 62)
&amp;lt; Uint8Array(62) [67, 102, 135, 71, 71, 7, 51, 162, 242, 246, 86, 226, 231, 118, 150, 182, 151, 6, 86, 70, 150, 18, 230, 247, 38, 114, 247, 118, 150, 182, 146, 245, 21, 37, 246, 54, 246, 70, 82, 52, 87, 39, 38, 247, 37, 246, 54, 247, 39, 38, 86, 55, 70, 150, 246, 224, 236, 17, 236, 17, 236, 17]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These codewords should be split like this:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Block&lt;/th&gt;
&lt;th&gt;Data codewords&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;G1-B1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;67  102 135 71 71  7   51  162 242 246 86  226 231 118 150&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G1-B2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;182 151 6   86 70  150 18  230 247 38  114 247 118 150 182&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G2-B1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;146 245 21  37 246 54  246 70  82  52  87  39  38  247 37  246&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G2-B2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;54  247 39  38 86  55  70  150 246 224 236 17  236 17  236 17&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In the next part, we'll see how to actually place all these information (plus the error correction, and something more) inside the QR Code matrix. See you soon! 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>qrcode</category>
    </item>
    <item>
      <title>Next.js 11, Module Federation, and SSR — A whole new world</title>
      <author>Zack Jackson</author>
      <pubDate>Sat, 04 Sep 2021 22:10:41 +0000</pubDate>
      <link>https://dev.to/scriptedalchemy/next-js-11-module-federation-and-ssr-a-whole-new-world-4e0p</link>
      <guid>https://dev.to/scriptedalchemy/next-js-11-module-federation-and-ssr-a-whole-new-world-4e0p</guid>
      <description>&lt;p&gt;Server-side rendering with Next 11 and Module federation is ready for prime time! Bonus: we got "hot" (live) reloading working on federated applications!&lt;/p&gt;

&lt;blockquote&gt;
&lt;h1&gt;
  &lt;a href="#its-been-a-long-and-painful-road-to-module-federation-inside-a-nextjs-application-but-we-have-finally-been-able-to-remove-most-of-that-pain"&gt;
  &lt;/a&gt;
  Its been a long and painful road to module federation inside a next.js application — but we have finally been able to remove most of that pain.
&lt;/h1&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the first time I can confidently say that we have been able to achieve full-scale Module Federation in Next.js — not just client-side but server-side as well!&lt;/p&gt;

&lt;p&gt;Months ago, we demonstrated the concept of code-streaming, the idea was to make Node work like a browser and download remote chunks, executing them under its process. This was seamless and easy but posed some security concerns and in the case of next.js, where we are unable to "hot reload" production, those required chunks would get "stuck" and your host applications need to be restarted in order to re-fetch new remote chunks what were updated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7YpNXy5Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Aigm7orS9Yr33inZajjLbKw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7YpNXy5Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Aigm7orS9Yr33inZajjLbKw.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#say-hello-to-multiserver-rendering"&gt;
  &lt;/a&gt;
  Say hello to multi-server rendering!
&lt;/h2&gt;

&lt;p&gt;The Module Federation Group has conjured up a more acceptable solution to solve Federated SSR. Our solution doesn’t just work with Next.js applications — but this article is going to focus on utilizing our new system within the context one Next.js&lt;/p&gt;

&lt;p&gt;Jacob outlines more details around the underlaying architecture&lt;br&gt;
&lt;a href="https://www.ebey.me/blog/webpack-federation-ssr"&gt;&lt;strong&gt;Webpack Federation SSR | ebey.me&lt;/strong&gt;&lt;br&gt;
*Webpack Module Federation has been a game changer in the micro-frontend space allowing multiple SPA's to operate as one…*www.ebey.me&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Huge credit and shout out to &lt;a href=""&gt;Jacob Ebey.&lt;/a&gt; A critical part and mastermind behind this architecture&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Multi-server rendering is exactly what it sounds like, the remotes accept props from the host application and perform the render at their origin, sending back the pre-rendered HTML. The whole process is blazing fast and if you put it behind a CDN, its even faster. Since rendering a single component only takes around 10ms–20ms, and our parser only adds 5–7ms of overhead on larger payloads.&lt;/p&gt;

&lt;p&gt;Once we get the markup from the remote origin, our parser converts the HTML back into React, if you are passing host-originated children inside a remote component, those children are re-connected to the host render tree and render context. So they are still able to participate in any app-specific context that takes place during the render cycle.&lt;/p&gt;

&lt;p&gt;What’s important to note is that we are able to asynchronously render any remote components at their origins simultaneously, so an RTT waterfall does not begin to develop, the response time is as fast as the slowest response — just like a Promise.all&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
  getOrCreateFederatedComponentCtx,
  federatedComponentsContext,
  federatedComponent,
} from "nextjs-shared";

import remotes from "../remotes";

const Header = federatedComponent("home", "./header");

function MyApp({ Component, pageProps, federatedComponentsCtx, shellData }) {
  return (
    &amp;lt;federatedComponentsContext.Provider
      value={getOrCreateFederatedComponentCtx(
        { remotes },
        federatedComponentsCtx
      )}
    &amp;gt;
      &amp;lt;Header items={shellData.header.menu} /&amp;gt;
      &amp;lt;Component {...pageProps} /&amp;gt;
    &amp;lt;/federatedComponentsContext.Provider&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#hydration-and-avoiding-flicker"&gt;
  &lt;/a&gt;
  Hydration and avoiding flicker
&lt;/h3&gt;

&lt;p&gt;User experience needs to be seamless, so we cannot have any flicker happen during hydration. In order to achieve this, we utilize a mechanism similar to react-lazy-hydration, where we only hydrate parts of the react tree from HTML into interactive React at startup. This preserves the existing markup and suppresses any hydration problems that may happen. Once Webpack kicks in and the federated code is executed, the SSR’d remote module is then hydrated into a federated react component.&lt;/p&gt;

&lt;p&gt;I use react-lazy-hydration quite extensively to improve performance, offloading expensive components so they are only hydrated when TTI is reached or that are about to be scrolled into view with intersection observer. So applying a similar tactic to federated SSR is perfectly acceptable to me, and very effective.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#module-federation-and-chunk-flushing-are-back"&gt;
  &lt;/a&gt;
  Module Federation and Chunk Flushing are back!
&lt;/h3&gt;

&lt;p&gt;One big request from the community has been that packages like react-loadable or loadable-components are unable to "flush" out and render federated Javascript tags and style sheets that were used. Causing additional RTT as the remote container kicks in, and has to go download these additional JS chunks right away.&lt;/p&gt;

&lt;p&gt;Our new solution solves this problem, server-side rendered federated modules also flush out their JS and CSS chunks under our latest architecture design. Order to the world has been restored!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-milfbo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AcdKeu-y-2y54mgy-sMdWUQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-milfbo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AcdKeu-y-2y54mgy-sMdWUQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While other third parties do not support federated chunk flushing, when using our &lt;code&gt;fetchFederatedComponent&lt;/code&gt; function, the flush will happen as expected and we handle flushing of federated chunks independently. If you use code splitting, keep using loadable-components for your internal chunks but you would be able to use our federated functions for getting those critical assets rendered to the DOM during SSR.&lt;/p&gt;

&lt;p&gt;We place the CSS and js chunks into next.js context so next is aware of these additional scripts the whole time — ensuring there's no flicker during rehydration, no additional RTT to slow down your load times.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#making-module-federation-and-nextjs-play-nice"&gt;
  &lt;/a&gt;
  Making Module Federation and Next.js play nice
&lt;/h3&gt;

&lt;p&gt;Next.js does not support Module Federation out of the box, you will need to depend on a &lt;a href="https://app.privjs.com/buy/packageDetail?pkg=@module-federation/nextjs-mf"&gt;plugin&lt;/a&gt; from the Module Federation Group which provides support. As far as I am aware, there are no near-future plans to see Next.js support Module Federation out of the box and when it does arrive — there are slim chances that SSR support will be available. At the time of writing, I believe that the MF Group is the only organization that possesses the technology to offer a "no limits" capability on Next's platform.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://app.privjs.com/buy/packageDetail?pkg=@module-federation/nextjs-mf"&gt;nextjs-mf&lt;/a&gt; plugin enables Module Federation on the &lt;strong&gt;client-side&lt;/strong&gt;, regardless of SSR you will need this in order for Federation to work at all.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-case-for-module-federation-on-nextjs-applications"&gt;
  &lt;/a&gt;
  The Case for Module Federation on Next.js applications
&lt;/h2&gt;

&lt;p&gt;Next.js is not modular, it's very monolithic and mostly focuses on faster monolithic builds. But this pattern isn’t sustainable, Next Zones attempts to get closer to a more modular setup, but you are still locked in at page verticals and cannot escape a full page reload when switching zones.&lt;/p&gt;

&lt;p&gt;Federation enables us to make Next.js highly modular. You can develop a MegaNav that can be deployed independently of the rest of your application, or split teams up in a more granular and autonomous manner. Teams can own components and are not chained to a page, and those components can be easily distributed across other pages without needing to re-deploy an entire Next.js instance or multiple instances. You don't have to depend on npm package bumps as a way to distribute shared code and you don’t have to depend on third-party vendors for patterns like ESI in order to get some modularity.&lt;/p&gt;

&lt;p&gt;With server-side rendering solved, there are no drawbacks to leveraging module federation to tame and scale Next.js far more effectively.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#no-page-reloads"&gt;
  &lt;/a&gt;
  No Page Reloads!!
&lt;/h3&gt;

&lt;p&gt;Next Zones had the right idea but it's time to wave goodbye to page reloads when jumping between apps and instead welcome Federated Page Routing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4-CTp8dq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AVuCj3vRa0tez7fxYV74rNg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4-CTp8dq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AVuCj3vRa0tez7fxYV74rNg.jpeg" alt="And the 97 lighthouse score speaks for itself"&gt;&lt;/a&gt;&lt;em&gt;And the 97 lighthouse score speaks for itself&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The core concept here is that you stay on the host application and instead federate the page into that application, not reload, and SSR another page from another application. SSR costs money, avoiding a page refresh and instead, leveraging client-side routing to simply pull the page from another application is faster, cheaper, and a better user experience.&lt;/p&gt;



&lt;p&gt;To make this possible, we take advantage of the mechanics of Module Federation and next.js a CatchAll route.&lt;/p&gt;

&lt;p&gt;We have a primitive example of omnidirectional, distributed routing available on Github.&lt;br&gt;
&lt;a href="https://github.com/module-federation/module-federation-examples/tree/master/nextjs"&gt;&lt;strong&gt;module-federation-examples/nextjs at master · module-federation/module-federation-examples&lt;/strong&gt;&lt;br&gt;
*Module Federation in Next.js depends on @module-federation/nextjs-mf It will not work unless you have access to this…*github.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each application exposes a route map via module federation and the CatchAll page federates all the remote route-maps together, then uses some simple pattern recognition to see if the current path matches any existing mapped routed from a specific remote, if it does we call that remote and get the federated page — if we are unable to resolve the route, or if a JS error occurs for any reason, the CatchAll route simply performs a window.location.reload() which would bounce the user back through your application infrastructure and either land them on another SSR route that wasn’t mapped, an external URL, or a 404 page.&lt;/p&gt;

&lt;p&gt;This mechanism and how we designed the federation plugin for Next.js ensures that even if federated pages have an error, the Next.js route will not, guaranteeing that navigating between pages will always work, and in the worst-case falling back to a page reload.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// [...slug].js
import { createFederatedCatchAll } from "nextjs-shared"; export default createFederatedCatchAll(["checkout", "home"]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;and the magic behind createFederatedCatchAll&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export function createFederatedCatchAll(remotes) {&lt;br&gt;
  const FederatedCatchAll = (initialProps) =&amp;gt; {&lt;br&gt;
    const [lazyProps, setProps] = React.useState({});
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { FederatedPage, render404, renderError, needsReload, ...props } = {
  ...lazyProps,
  ...initialProps,
};

React.useEffect(async () =&amp;amp;gt; {
  if (needsReload) {
    const federatedProps = await FederatedCatchAll.getInitialProps(props);
    setProps(federatedProps);
  }
}, []);

if (render404) {
  // *TODO: Render 404 page
  *return React.createElement("h1", {}, "404 Not Found");
}
if (renderError) {
  // *TODO: Render error page
  *return React.createElement("h1", {}, "Oops, something went wrong.");
}

if (FederatedPage) {
  return React.createElement(FederatedPage, props);
}

return null;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;};&lt;/p&gt;

&lt;p&gt;FederatedCatchAll.getInitialProps = async (ctx) =&amp;gt; {&lt;br&gt;
    const { err, req, res, AppTree, ...props } = ctx;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (err) {
  // *TODO: Run getInitialProps for error page
  *return { renderError: true, ...props };
}

if (!***process***.browser) {
  return { needsReload: true, ...props };
}

try {
  const matchedPage = await matchFederatedPage(remotes, ctx.asPath);

  const remote = matchedPage?.value?.remote;
  const mod = matchedPage?.value?.module;

  if (!remote || !mod) {
    // *TODO: Run getInitialProps for 404 page
    *return { render404: true, ...props };
  }

  ***console***.log("loading exposed module", mod, "from remote", remote);
  try {
    if (!***window***[remote].__initialized) {
      ***window***[remote].__initialized = true;
      await ***window***[remote].init(__webpack_share_scopes__.default);
    }
  } catch (initErr) {
    ***console***.log("initErr", initErr);
  }

  const FederatedPage = await ***window***[remote]
    .get(mod)
    .then((factory) =&amp;amp;gt; factory().default);
  ***console***.log("FederatedPage", FederatedPage);
  if (!FederatedPage) {
    // *TODO: Run getInitialProps for 404 page
    *return { render404: true, ...props };
  }

  const modifiedContext = {
    ...ctx,
    query: matchedPage.params,
  };
  const federatedPageProps =
    (await FederatedPage.getInitialProps?.(modifiedContext)) || {};
  return { ...federatedPageProps, FederatedPage };
} catch (err) {
  ***console***.log("err", err);
  // *TODO: Run getInitialProps for error page
  *return { renderError: true, ...props };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;};&lt;/p&gt;

&lt;p&gt;return FederatedCatchAll;&lt;br&gt;
}&lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#interested-in-federated-ssr-contact-us"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Interested in Federated SSR? Contact us!&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;Our fetch implementation of SSR is not open source and took immense time and effort to develop, for any companies interested in leveraging our technology, we are happy to hold a workshop or consult, the Module Federation Group does accept clients. We are the creators of Module Federation&lt;/p&gt;

&lt;p&gt;You can get in contact:&lt;/p&gt;

&lt;p&gt;&lt;a href="//mailto:Zackary.l.jackson@gmail.com"&gt;Zackary.l.jackson@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or over Twitter&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/ScriptedAlchemy"&gt;ScriptedAlchemy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/ebey_jacob"&gt;ebey_jacob&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or book a workshop directly&lt;br&gt;
&lt;a href="https://calendly.com/scripted-alchemy/next-js-federated-ssr-workshop"&gt;&lt;strong&gt;Next.js Federated SSR Workshop - Zack Jackson&lt;/strong&gt;&lt;br&gt;
*Workshop plus private access to source code that contains a reference architecture for Federated SSR on Next.js - 8…*calendly.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>modulefederation</category>
      <category>webpack</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
