<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Responsive Online Book Store Website Using HTML and Bootsrap5.</title>
      <author>Technical Vandar</author>
      <pubDate>Mon, 27 Sep 2021 08:59:28 +0000</pubDate>
      <link>https://dev.to/technicalvandar885/responsive-online-book-store-website-using-html-and-bootsrap5-3imm</link>
      <guid>https://dev.to/technicalvandar885/responsive-online-book-store-website-using-html-and-bootsrap5-3imm</guid>
      <description>&lt;p&gt;i have made this website using bootstrap, you can use code and you can download book and also add book in that.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#source-code-all-in-one"&gt;
  &lt;/a&gt;
  Source Code All In One:
&lt;/h1&gt;



&lt;h2&gt;
  &lt;a href="#full-source-code"&gt;
  &lt;/a&gt;
  FULL SOURCE CODE:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
    &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Online Book Store&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar navbar-expand-lg navbar-dark bg-dark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-fluid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-brand"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Navbar&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-toggler"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;data-bs-toggle=&lt;/span&gt;&lt;span class="s"&gt;"collapse"&lt;/span&gt; &lt;span class="na"&gt;data-bs-target=&lt;/span&gt;&lt;span class="s"&gt;"#navbarSupportedContent"&lt;/span&gt;
        &lt;span class="na"&gt;aria-controls=&lt;/span&gt;&lt;span class="s"&gt;"navbarSupportedContent"&lt;/span&gt; &lt;span class="na"&gt;aria-expanded=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Toggle navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-toggler-icon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"collapse navbar-collapse"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"navbarSupportedContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-link active"&lt;/span&gt; &lt;span class="na"&gt;aria-current=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-center my-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Top Courses Pdf Books Free Download&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row row-col-1 row-cols-md-3 m-auto my-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"m-auto col-md-3"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"cards"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card h-100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://miro.medium.com/max/1800/1*5eV1xmJs2-sJ4DdejfdnQA.png"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-img-top"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h5&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Javascript&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            This Is A Book For Javascript. Beginner Friendly all Things need foe beginners there in pdf book mentioned
            please Download and gain knowledge about javascript
          &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://drive.google.com/file/d/1YOuhfAak-Z3Ra_NBX9_AMhFShuQsMMpI/view?usp=sharing"&lt;/span&gt; &lt;span class="na"&gt;download&lt;/span&gt;
            &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-info"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt; &lt;span class="na"&gt;data-bs-placement=&lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt;
            &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Download Book"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download Book&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"m-auto col-md-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card h-100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://i.pinimg.com/originals/1f/ec/3e/1fec3ee0665075852c4665a01259682d.png"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-img-top"&lt;/span&gt;
          &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h5&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C Programming&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Advance C Programming Course From Pdf File Please Download This File From Here and You
            Have From Zero To Hero In C Programming&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://drive.google.com/file/d/1_NA-zRm6BXcI8Q45UJmQ0o1NGBQkFQF8/view?usp=sharing"&lt;/span&gt; &lt;span class="na"&gt;download&lt;/span&gt;
            &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-info"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt; &lt;span class="na"&gt;data-bs-placement=&lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt;
            &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Download Book"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download Book&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-3 m-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card h-100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://www.vtc.com/files/images/courses/33797.jpeg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-img-top"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h5&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C++ Course&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            Advance C++ Course in Simple English Labguage Please Download A Pdf From Here and Gain Your Knowlwdge in C++
          &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://drive.google.com/file/d/11W13yROf4_qr7N0P9HbBeB-SKTdeQs6W/view?usp=sharing"&lt;/span&gt; &lt;span class="na"&gt;download&lt;/span&gt;
            &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-info"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt; &lt;span class="na"&gt;data-bs-placement=&lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt;
            &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Download Book"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download Book&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row row-col-1 row-cols-md-3 m-auto my-4 mb-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"m-auto col-md-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card h-100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://miro.medium.com/max/840/1*RJMxLdTHqVBSijKmOO5MAg.jpeg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-img-top"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h5&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Python Programming&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            Python Programming Course From Basic To Advance Level Please Download a Pdf File and Make You To A
            Professional Python Developer Or Freelancer.
          &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://drive.google.com/file/d/1BQsKJ7yCo93vCW9SoJibFOUGPYivdgQ_/view?usp=sharing"&lt;/span&gt; &lt;span class="na"&gt;download&lt;/span&gt;
            &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-info"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt; &lt;span class="na"&gt;data-bs-placement=&lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt;
            &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Download Book"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download Book&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"m-auto col-md-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card h-100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://d1jnx9ba8s6j9r.cloudfront.net/imgver.1551437392/img/co_img_193_1504782213.png"&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-img-top"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h5&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Java Programming&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Java Programming Language From Basic To Advance Level. Learn Java Programming With Object
            Oriented Programming(OOP) From This Pdf Book.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://drive.google.com/file/d/1I_D-UmWHdXkNKNODdlvfNxtzHyMkA8M8/view?usp=sharing"&lt;/span&gt; &lt;span class="na"&gt;download&lt;/span&gt;
            &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-info"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt; &lt;span class="na"&gt;data-bs-placement=&lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt;
            &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Download Book"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download Book&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-3 m-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card h-100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://www.surat-training-course.com/ampimage/fluttercourseinsurat.webp"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-img-top"&lt;/span&gt;
          &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h5&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Flutter(DART)&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            Learn Flutter From Basic To Advance Level. you can build android, desktop and ios application using flutter.
          &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://drive.google.com/file/d/1wY9Ky8cHO1D5WCnCr0ppFSyL2RiHYP0K/view?usp=sharing"&lt;/span&gt; &lt;span class="na"&gt;download&lt;/span&gt;
            &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-info"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt; &lt;span class="na"&gt;data-bs-placement=&lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt;
            &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Download Book"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download Book&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js"&lt;/span&gt;
    &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-b5kHyXgcpbZJO/tY9Ul7kGkf1S0CWuKcCD38l8YkeH8z8QjE0GmW1gYU5S9FOnJ0"&lt;/span&gt;
    &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;


&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tooltipTriggerList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[].&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-toggle="tooltip"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tooltipList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tooltipTriggerList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tooltipTriggerEl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Tooltip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tooltipTriggerEl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#youtube-tutorial"&gt;
  &lt;/a&gt;
  Youtube Tutorial
&lt;/h1&gt;


&lt;h2&gt;&lt;a href="https://www.youtube.com/watch?v=WALC_40KWi0"&gt;Watch Here&lt;/a&gt;&lt;/h2&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;h2&gt;
  &lt;a href="#find-me-on"&gt;
  &lt;/a&gt;
  Find Me On:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/technicalvandar"&gt;Facebook&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/technicalvandar"&gt;Youtube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Technical-Vandar-885/"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Hacktoberfest 2021: Let the Contributions Begin! </title>
      <author>Vishnupriya Bhandaram</author>
      <pubDate>Mon, 27 Sep 2021 08:56:49 +0000</pubDate>
      <link>https://dev.to/appsmith/hacktoberfest-2021-let-the-contributions-begin-3gal</link>
      <guid>https://dev.to/appsmith/hacktoberfest-2021-let-the-contributions-begin-3gal</guid>
      <description>&lt;p&gt;Time indeed does fly because it feels just like yesterday when we hosted our first ever Hacktoberfest last year! And what a year it has been. &lt;/p&gt;

&lt;p&gt;We started &lt;a href="https://www.appsmith.com/"&gt;Appsmith&lt;/a&gt; because we wanted to create a developer-first product to make an engineer’s life easy. From being a small, little-known project on &lt;a href="https://github.com/appsmithorg/appsmith"&gt;Github&lt;/a&gt;, we now have 5K stars. This wouldn’t have been possible without our community; apart from giving us incredible feedback, they also contributed immensely to our codebase, from contributing new integrations to helping solve bugs. &lt;/p&gt;

&lt;p&gt;We now have over 100 contributors, and we want to expand our community (that means you!), empowering them to contribute to a project that will always remain developer-first. And so, we’re back again this year for an exciting month-long virtual festival supporting open-source projects. We love it because it’s celebratory and community-oriented! At Appsmith, we genuinely believe open-source can take the way we build things to new heights. And our commitment to the community will never waver. &lt;/p&gt;

&lt;p&gt;In that spirit, we are kicking off the &lt;a href="https://hacktoberfest.appsmith.com/"&gt;Hacktoberfest 2021&lt;/a&gt;. In the run-up to the actual code-fest, there are going to be many talks! We will be bringing together folks from other awesome projects to talk about Hacktoberfest and Open Source. Be sure to check these out. You will definitely get to learn more about how to get involved in open-source projects. And yes! We’re ready to swag it out, too, for every valid PR! And contributors who submit more than 4 PRs and invite others to contribute to our repository will get a special prize. &lt;/p&gt;

&lt;p&gt;You are welcome to contribute to the issues on Appsmith’s repository on Github. Be sure to check contribution guidelines, review, and merge policies. Please note that not all pull requests will count towards Hacktoberfest 2021. &lt;/p&gt;

&lt;p&gt;Contributing to open-source projects is an excellent way for users to become contributors. And it’s both a fun and rewarding experience. Sure, it can be scary to begin, and many think that only code that implements significant features matters. Well, I am here to tell you that it’s not true. We believe that no contribution is too small. Bug fixes, documentation updates, submitting articles are all fantastic ways of participating. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hacktoberfest is open to all: Students, developers, anyone really. Background no bar. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To this end, this year, we’ve included several newbie-friendly issues in the challenge to give a warm welcome to first-timers. If you’ve still got some doubts about participating or need some queries answered, head over to our Hacktoberfest channel on &lt;a href="https://discord.com/invite/rBTTVJp"&gt;Discord&lt;/a&gt;, and we will be happy to help you out!  To know more about how you can participate in this event, take a look at our &lt;a href="https://github.com/appsmithorg/appsmith/blob/release/CONTRIBUTING.md"&gt;Contributor Guidelines&lt;/a&gt; and &lt;a href="https://github.com/appsmithorg/appsmith/blob/release/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Happy Hacking! 🐱‍💻&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>github</category>
      <category>opensource</category>
    </item>
    <item>
      <title>✨Top React Charts Libraries [2021] </title>
      <author>reactjsfav</author>
      <pubDate>Mon, 27 Sep 2021 08:36:59 +0000</pubDate>
      <link>https://dev.to/pccprint/top-react-charts-libraries-2021-50be</link>
      <guid>https://dev.to/pccprint/top-react-charts-libraries-2021-50be</guid>
      <description>&lt;h2&gt;
  &lt;a href="#recharts"&gt;
  &lt;/a&gt;
  &lt;a href="https://recharts.org/en-US"&gt;Recharts&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Recharts is a &lt;strong&gt;Redefined&lt;/strong&gt; chart library built with &lt;a href="https://facebook.github.io/react/"&gt;React&lt;/a&gt; and &lt;a href="http://d3js.org"&gt;D3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main purpose of this library is to help you to write charts in React applications without any pain. Main principles of Recharts are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Simply&lt;/strong&gt; deploy with React components.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Native&lt;/strong&gt; SVG support, lightweight depending only on some D3 submodules.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Declarative&lt;/strong&gt; components, components of charts are purely presentational.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the components of Recharts are clearly separated. The lineChart is composed of x axis, tooltip, grid, and line items, and each of them is an independent React Component. The clear separation and composition of components is one of the principle Recharts follows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visx"&gt;
  &lt;/a&gt;
  &lt;a href="https://airbnb.io/visx"&gt;visx&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;visx is a collection of reusable low-level visualization components. visx combines the power of d3 to generate your visualization with the benefits of react for updating the DOM.&lt;br&gt;
&lt;a href="https://airbnb.io/visx/gallery"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mlT6CB6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/airbnb/visx/raw/master/assets/visx-gallery.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more examples using &lt;code&gt;visx&lt;/code&gt;, check out the &lt;a href="https://airbnb.io/visx/gallery"&gt;gallery&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#nivo"&gt;
  &lt;/a&gt;
  &lt;a href="https://nivo.rocks/"&gt;nivo&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;nivo&lt;/strong&gt; provides supercharged React components to easily build dataviz apps, it's built on top of d3.&lt;/p&gt;

&lt;p&gt;Several libraries already exist for React d3 integration, but just a few provide server side rendering ability and fully declarative charts.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;In order to use nivo, you have to install the &lt;code&gt;@nivo/core&lt;/code&gt; package and then choose some of the scoped &lt;code&gt;@nivo&lt;/code&gt; packages according to the charts you wish to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @nivo/core @nivo/bar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Highly customizable&lt;/li&gt;
&lt;li&gt;Motion/transitions, powered by &lt;a href="https://github.com/chenglou/react-motion"&gt;react-motion&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks"&gt;Component playground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks"&gt;Exhaustive documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Isomorphic rendering&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks/components?filter=svg"&gt;SVG charts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks/components?filter=html"&gt;HTML charts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks/components?filter=canvas"&gt;Canvas charts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/plouc/nivo-api"&gt;server side rendering API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks/guides/patterns"&gt;SVG patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks/guides/gradients"&gt;Gradients&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks/components?q=responsive"&gt;responsive charts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#billboardjs"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/naver/billboard.js/"&gt;billboard.js&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/aa22809b2d2df3249d772e56f42e89e0d12d23c42638a7b1973b47e7d2cd209e/68747470733a2f2f6e617665722e6769746875622e696f2f62696c6c626f6172642e6a732f696d672f6c6f676f2f62696c6c626f6172642e6a732e737667"&gt;&lt;img src="https://camo.githubusercontent.com/aa22809b2d2df3249d772e56f42e89e0d12d23c42638a7b1973b47e7d2cd209e/68747470733a2f2f6e617665722e6769746875622e696f2f62696c6c626f6172642e6a732f696d672f6c6f676f2f62696c6c626f6172642e6a732e737667" alt="billboard.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;billboard.js is a re-usable, easy interface JavaScript chart library, based on &lt;a href="https://d3js.org/"&gt;D3.js&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The name "billboard" comes from the famous &lt;code&gt;billboard chart&lt;/code&gt; which everybody knows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/naver/billboard.js/wiki/Why-we-decided-to-start-billboard.js%3F"&gt;Why we decided to start billboard.js?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#supported-chart-types"&gt;
  &lt;/a&gt;
  Supported chart types
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/eea68068dd5e33b56a05f060e85b6432ad9f57211ea4b2aac62ee3572ea791f0/68747470733a2f2f6e617665722e6769746875622e696f2f62696c6c626f6172642e6a732f696d672f63686172742d74797065732e706e673f763d39"&gt;&lt;img src="https://camo.githubusercontent.com/eea68068dd5e33b56a05f060e85b6432ad9f57211ea4b2aac62ee3572ea791f0/68747470733a2f2f6e617665722e6769746875622e696f2f62696c6c626f6172642e6a732f696d672f63686172742d74797065732e706e673f763d39" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#download-and-installation"&gt;
  &lt;/a&gt;
  Download and Installation
&lt;/h2&gt;

&lt;p&gt;Download dist files from the repo directly or install it via npm.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-development-uncompressed"&gt;
  &lt;/a&gt;
  For development (Uncompressed)
&lt;/h3&gt;

&lt;p&gt;You can download the uncompressed files for development&lt;/p&gt;

&lt;p&gt;Latest&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://naver.github.io/billboard.js/release/latest/dist/billboard.js"&gt;https://naver.github.io/billboard.js/release/latest/dist/billboard.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://naver.github.io/billboard.js/release/latest/dist/billboard.css"&gt;https://naver.github.io/billboard.js/release/latest/dist/billboard.css&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Specific version&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://naver.github.io/billboard.js/release/%5BVERSION%5D/dist/billboard.js"&gt;https://naver.github.io/billboard.js/release/[VERSION]/dist/billboard.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://naver.github.io/billboard.js/release/%5BVERSION%5D/dist/billboard.css"&gt;https://naver.github.io/billboard.js/release/[VERSION]/dist/billboard.css&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reactvis"&gt;
  &lt;/a&gt;
  &lt;a href="http://uber.github.io/react-vis"&gt;react-vis &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://uber.github.io/react-vis/examples/showcases/axes"&gt;Demos&lt;/a&gt; | &lt;a href="http://uber.github.io/react-vis/documentation/getting-started/creating-a-new-react-vis-project"&gt;Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A COMPOSABLE VISUALIZATION SYSTEM&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/uber/react-vis/blob/master/docs/assets/react-vis.gif?raw=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mkx8oxV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/uber/react-vis/raw/master/docs/assets/react-vis.gif%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h3&gt;

&lt;p&gt;A collection of react components to render common data visualization charts, such as &lt;strong&gt;line/area/bar charts&lt;/strong&gt;, &lt;strong&gt;heat maps&lt;/strong&gt;, &lt;strong&gt;scatterplots&lt;/strong&gt;, &lt;strong&gt;contour plots&lt;/strong&gt;, &lt;strong&gt;hexagon heatmaps&lt;/strong&gt;, &lt;strong&gt;pie and donut charts&lt;/strong&gt;, &lt;strong&gt;sunbursts&lt;/strong&gt;, &lt;strong&gt;radar charts&lt;/strong&gt;, &lt;strong&gt;parallel coordinates&lt;/strong&gt;, and &lt;strong&gt;tree maps&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Some notable features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simplicity. &lt;code&gt;react-vis&lt;/code&gt; doesn't require any deep knowledge of data visualization libraries to start building your first visualizations.&lt;/li&gt;
&lt;li&gt;Flexibility. &lt;code&gt;react-vis&lt;/code&gt; provides a set of basic building blocks for different charts. For instance, separate X and Y axis components. This provides a high level of control of chart layout for applications that need it.&lt;/li&gt;
&lt;li&gt;Ease of use. The library provides a set of defaults which can be overridden by the custom user's settings.&lt;/li&gt;
&lt;li&gt;Integration with React. &lt;code&gt;react-vis&lt;/code&gt; supports the React's lifecycle and doesn't create unnecessary nodes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#reactchartjs2"&gt;
  &lt;/a&gt;
  &lt;a href="http://reactchartjs.github.io/react-chartjs-2"&gt;react-chartjs-2&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;React wrapper for Chart.js 2.0 and 3.0, the most popular charting library 📊&lt;/p&gt;

&lt;p&gt;React wrapper for &lt;a href="http://www.chartjs.org/docs/#getting-started"&gt;Chart.js&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;Live: &lt;a href="https://reactchartjs.github.io/react-chartjs-2/#/"&gt;reactchartjs.github.io/react-chartjs-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://github.com/reactchartjs/react-chartjs-2/blob/master/example"&gt;these examples&lt;/a&gt; for more information&lt;/p&gt;

&lt;p&gt;More react resource❤️ &lt;a href="https://bestofreactjs.com/"&gt;A curated list of awesome React frameworks, libraries and Components. &lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>charts</category>
    </item>
    <item>
      <title>Install Windows 11 on Unsupported Devices</title>
      <author>Vidhya Varshany</author>
      <pubDate>Mon, 27 Sep 2021 08:29:17 +0000</pubDate>
      <link>https://dev.to/vidhyavarshanyjs/install-windows-11-on-unsupported-devices-5d39</link>
      <guid>https://dev.to/vidhyavarshanyjs/install-windows-11-on-unsupported-devices-5d39</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-netizens-of-hashnodegot-you-some-interesting-stuffs"&gt;
  &lt;/a&gt;
  HELLO NETIZENS OF HASHNODE,GOT YOU SOME INTERESTING STUFFS😊!!!
&lt;/h2&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5hHvf0ZQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/d8oI97avlJAygnp7RC/giphy.gif%3Fcid%3D790b761146a2e976690a1defb30a5e95a0906f5b47fcb23f%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;Windows 11&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows 11 will bring you closer to what you love when the PC plays a more important role in our lives.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f1pTKjMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/hJaQNVrOPC4Ja/giphy.gif%3Fcid%3Decf05e47v2vqo97os2b647fivujz3fvtapl3rv2wv5wlizqx%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/center&gt;

&lt;p&gt;Windows has long served as a global innovation platform. It's where scrappy companies are named after households, and it's the backbone of global companies. The internet was born and grew up on Windows. Many of us have written our first email, played our first computer game, and coded the first line. Windows is a platform for people to create, connect, learn and achieve – a platform used by more than a billion people today.&lt;/p&gt;

&lt;p&gt;We don't take the responsibility of lightly designing so many people. We went from the PC into our lives to try to fit our whole life on the PC for the last 18 months. Our phones were not just for conferences, lectures, and things are done; they were also where we went for games with friends, watch our favorite shows, and perhaps most importantly, interact with each other. We digitally replicated office conversations, hallways, workouts, happy times, and holidays during the process.&lt;/p&gt;

&lt;p&gt;The transition from something useful and useful to something personal and emotional was profound on the PC we saw and felt. This is why we have created the next Windows iteration. To provide you with a familiar environment where you can create, learn, play, and, above all, connect in new ways.&lt;/p&gt;

&lt;p&gt;Microsoft is honored and pleased to present you with Windows 11, the operating system that brings you closer to your interests.&lt;/p&gt;

&lt;p&gt;We have simplified design and user experience to boost your productivity and stimulate your creativity. It is modern, fresh, clever and beautiful. Everything was done to control and bring a sense of peace and ease to every sound, typeface, and icon from the new Start button and Task Bar. We put Start in the center to make finding what you are looking for easier. Start uses the cloud and Microsoft 365 to view your recent files, regardless of the platform or device you used to view them, including Android and iOS devices.&lt;/p&gt;

&lt;p&gt;Windows has always been about how you can work, with many windows and the ability to snap apps together. Snap layouts, snap groups, and desktops are all new in Windows 11, offering an even more powerful multi-task procedure that stays above what you need to do. These are new tools to help you manage your windows so that you can see exactly what you need in a visually attractive design. You may also build and adjust separate desktops to various aspects of your life, such as work desktops, gaming, and education.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods✨
&lt;/h3&gt;

&lt;p&gt;So, there are 2 methods to update to windows 11.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Update Windows From ISO.&lt;/li&gt;
&lt;li&gt;Update Windows Officially.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#update-windows-from-iso"&gt;
  &lt;/a&gt;
  Update Windows From ISO.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, you have to download the latest Windows ISO from  &lt;a href="https://uupdump.net/"&gt;UUP-DUMP&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Then&lt;/strong&gt; you have to Download This Bypass File. &lt;/p&gt;


&lt;center&gt;&lt;a href="https://www.mediafire.com/file/loh5cggo3oh2nm7/Windows11_appraiserres.zip/file"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4RBSHk_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/external-flatart-icons-lineal-color-flatarticons/50/000000/external-download-web-security-flatart-icons-lineal-color-flatarticons.png"&gt;&lt;/a&gt;&lt;/center&gt;

&lt;p&gt;Then After that, Boot Windows 11 ISO with the help of Rufus  &lt;a href="https://github.com/pbatard/rufus/releases/download/v3.14/rufus-3.14.exe"&gt;Download&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Extract the Bypass File And &lt;strong&gt;Copy&lt;/strong&gt; Them.&lt;/p&gt;

&lt;p&gt;Goto USB Drive (Where you have booted the windows).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open Booted &lt;strong&gt;USB.&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to **Resources **Folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Paste&lt;/strong&gt; Files There.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After this, Install Windows normally :)&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;NOTE: *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If your USB doesn't boot, then copy all your windows files from USB an  past it somewhere on HDD (NOT IN SYSTEM PARTITION), then install from there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-from-system-update"&gt;
  &lt;/a&gt;
  Update From System Update.
&lt;/h3&gt;

&lt;p&gt;As you know, the topic of this article "How to Install Windows 11 on Unsupported Devices," but how can we install the update from Windows Update, so actually guys, you can, by Changing some registry files from your pc, the process is pretty simple. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, You have To Join Windows Insider Program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Then&lt;/strong&gt;, You have to download this file.&lt;/p&gt;


&lt;center&gt;&lt;a href="https://www.mediafire.com/file/twqlkskacb7hbhn/win11bypass.zip/file"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4RBSHk_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/external-flatart-icons-lineal-color-flatarticons/50/000000/external-download-web-security-flatart-icons-lineal-color-flatarticons.png"&gt;&lt;/a&gt;&lt;/center&gt;

&lt;p&gt;1.After downloading** Extract** ZIP file&lt;/p&gt;

&lt;p&gt;2.Run &lt;strong&gt;Bypass.reg&lt;/strong&gt; file as an &lt;strong&gt;administrator.&lt;/strong&gt;&lt;br&gt;
   Then Simply Restart your PC.&lt;/p&gt;

&lt;p&gt;After Restarting.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to** Windows Settings.**&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to &lt;strong&gt;Windows Updates.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Directly** Update Windows** From There.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;These were two alternative methods to obtain and install the Windows 11 Insider preview update on an unsupported or incompatible PC.&lt;/p&gt;

&lt;p&gt;Do try both of these, and let me know which one works for you in the comments. Also, please continue with caution and be sure you back up any vital data. Feel free to reach out via comments in case of any issues or queries.&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sAxnga_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/q2Uh33hQE_cAAAAC/sanditon-mary-parker.gif" alt="Sanditon Mary Parker GIF - Sanditon Mary Parker Final Word GIFs"&gt;&lt;/center&gt;

&lt;p&gt;Thanks for reading this whole content .Have a good day😉.&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;&lt;pre&gt;💙Follow me on&lt;a href="https://twitter.com/vidhyavarshany"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXp3xsG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632213348452/UgQqOEbIc.png"&gt;&lt;/a&gt;&lt;a href="https://github.com/VidhyaVarshanyJS"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ag01ZYfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632214312141/6-HT0TSXR.png"&gt;&lt;/a&gt;for more updates...&lt;/pre&gt;&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;𝚂𝚑𝚊𝚛𝚒𝚗𝚐  𝙺𝚗𝚘𝚠𝚕𝚎𝚍𝚐𝚎  𝚘𝚌𝚌𝚞𝚛𝚜  𝚠𝚑𝚎𝚗  𝚙𝚎𝚘𝚙𝚕𝚎  𝚊𝚛𝚎  𝚐𝚎𝚗𝚞𝚒𝚗𝚎𝚕𝚢  𝚒𝚗𝚝𝚎𝚛𝚎𝚜𝚝𝚎𝚍  𝚒𝚗 &lt;br&gt;
 𝚑𝚎𝚕𝚙𝚒𝚗𝚐  𝚘𝚗𝚎  𝚊𝚗𝚘𝚝𝚑𝚎𝚛;  𝚍𝚎𝚟𝚎𝚕𝚘𝚙  𝚗𝚎𝚠  𝚌𝚊𝚙𝚊𝚌𝚒𝚝𝚒𝚎𝚜  𝚏𝚘𝚛  𝚊𝚌𝚝𝚒𝚘𝚗;  𝚒𝚝  𝚒𝚜  𝚊𝚋𝚘𝚞𝚝 &lt;br&gt;
 𝚌𝚛𝚎𝚊𝚝𝚒𝚗𝚐  𝚕𝚎𝚊𝚛𝚗𝚒𝚗𝚐  𝚙𝚛𝚘𝚌𝚎𝚜𝚜𝚎𝚜.  – 𝙿𝚎𝚝𝚎𝚛 𝚂𝚎𝚗𝚐𝚎&lt;/p&gt;


&lt;/blockquote&gt;



&lt;center&gt;💟💟💟💟💟&lt;/center&gt;

</description>
      <category>tutorial</category>
      <category>windows</category>
      <category>solve</category>
      <category>productivity</category>
    </item>
    <item>
      <title>React Hooks Tips</title>
      <author>Said Mounaim</author>
      <pubDate>Mon, 27 Sep 2021 08:11:27 +0000</pubDate>
      <link>https://dev.to/said_mounaim/react-hooks-tips-2hpd</link>
      <guid>https://dev.to/said_mounaim/react-hooks-tips-2hpd</guid>
      <description>&lt;p&gt;A collection of tips to help take your React Hooks skills pro&lt;/p&gt;

&lt;p&gt;Github : &lt;a href="https://github.com/saidMounaim/react-hooks-tips"&gt;https://github.com/saidMounaim/react-hooks-tips&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>reacthooks</category>
      <category>tips</category>
    </item>
    <item>
      <title>Better Types using Discriminated Unions in TypeScript</title>
      <author>Maina Wycliffe</author>
      <pubDate>Mon, 27 Sep 2021 08:03:07 +0000</pubDate>
      <link>https://dev.to/this-is-learning/better-types-using-discriminated-unions-in-typescript-4i3g</link>
      <guid>https://dev.to/this-is-learning/better-types-using-discriminated-unions-in-typescript-4i3g</guid>
      <description>&lt;p&gt;How we define our types in Typescript impacts how effective typescript is at warning us when we make mistakes. If we take a broad approach i.e. to cover many types in a single type, we end up handicapping typescript and it becomes less effective. &lt;/p&gt;

&lt;p&gt;The more specific we are, the more effective typescript can be at catching possible errors. In this article, we are going to look at how we can use discriminative unions to write better and more specific types and help typescript to be more helpful to us.&lt;/p&gt;

&lt;p&gt;Let's take the simplest example I can think of - &lt;strong&gt;Shapes&lt;/strong&gt;. In shapes, we can have Circles, Rectangles, Squares, etc; you get the idea. There is no way you can have a single type alias that can cover all shapes without compromising on something.&lt;/p&gt;

&lt;p&gt;If we were to define a &lt;code&gt;Shape&lt;/code&gt; type alias for just the above 3 shapes, it would need to account for the possibility that all fields are not there for all shapes, i.e. Circle only has a radius, which doesn't exist in either Rectangle or Square, while the circle doesn't have either width or height. As you can imagine, our problem only becomes bigger as you add more shapes.&lt;/p&gt;

&lt;p&gt;So, our type alias would look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Circle&lt;/span&gt;
  &lt;span class="nl"&gt;length&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Rectangle&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Rectangle&lt;/span&gt;
  &lt;span class="nl"&gt;side&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Square side Length&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;For the purpose of this above example, I am assuming that the Square can't take height and width. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, the type alias above is not very useful, since if you had a circle, you could easily leave out all fields or add all of them to &lt;code&gt;Shape&lt;/code&gt; and typescript will not be able to help you at all. &lt;/p&gt;

&lt;p&gt;This is especially not a good practice for third-party SDKs, where you have to keep referring to the documentation just to get an idea of the shape of the data you are dealing with. Types help us avoid making silly and avoidable mistakes, which we all make as it's in our nature as human beings.&lt;/p&gt;

&lt;p&gt;On top of that, we also lose out on the ability to narrow types. It's not easy to narrow the above type to either Circle, Rectangle, or Square.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Type narrowing is the process of moving a type from a less precise type to a more precise type. You can learn more about type narrowing &lt;a href="https://mainawycliffe.dev/blog/type-guards-and-narrowing-in-typescript"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#discriminated-unions"&gt;
  &lt;/a&gt;
  Discriminated Unions
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A discriminated type union is where you use code flow analysis to reduce a set of potential objects down to one specific object. - Typescript &lt;a href="https://www.typescriptlang.org/play#example/discriminate-types"&gt;Docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, let me offer a possible solution to the above problem. We will start by defining three different type-aliases. Each type alias will have a literal type member property - &lt;code&gt;shape&lt;/code&gt; - distinguishing for its corresponding shape i.e. &lt;code&gt;Rectangle&lt;/code&gt;, &lt;code&gt;Circle&lt;/code&gt;, and &lt;code&gt;Square&lt;/code&gt; for each of our shapes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Square&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;side&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Rectangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rectangle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Circle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="na"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then we can use a union of the three to declare a type alias of shape that can only be a single type of the above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Square&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Rectangle&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;Shape&lt;/code&gt; type alias can only be Square, Rectangle or Circle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, what is the advantage of the above you may ask? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strongly-typed-shapes"&gt;
  &lt;/a&gt;
  Strongly Typed Shapes
&lt;/h3&gt;

&lt;p&gt;The first advantage is that our types are now strongly typed for each shape as compared to the previous solution. For instance, if you specify the shape to be &lt;strong&gt;Circle&lt;/strong&gt;, then, we only provide radius and if it's missing, Typescript throws an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Circle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Error ---&amp;gt; Object literal may only specify known properties, and 'width' does not exist in type 'Circle'.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see above, once you specify the shape property to be &lt;code&gt;Circle&lt;/code&gt;, then you are restricted to only specifying properties available in the &lt;code&gt;Circle&lt;/code&gt; type alias. &lt;/p&gt;

&lt;p&gt;Trying to add fields that do not exist will result in the following error: &lt;code&gt;// Error ---&amp;gt; Object literal may only specify known properties, and 'width' does not exist in type 'Circle'.&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-narrowing-is-now-possible"&gt;
  &lt;/a&gt;
  Type Narrowing is Now Possible
&lt;/h3&gt;

&lt;p&gt;Type narrowing is now possible using the literal property &lt;code&gt;shape&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Circle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// the type is now a Circle only&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Learn more about Type Narrowing in typescript &lt;a href="https://mainawycliffe.dev/blog/type-guards-and-narrowing-in-typescript"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we learned how we can use discriminated unions to write more specific types in Typescript, and thus better types overall and have an improved developer experience. This allows us in turn to write more type-safe code, which can help typescript eliminate a lot of bugs from our code that would otherwise slip through. &lt;/p&gt;

&lt;p&gt;If you found this article informative and would like to keep learning about typescript, visit my series on Typescript - &lt;a href="https://mainawycliffe.dev/blog/tags/a-byte-of-typescript"&gt;A Byte of Typescript&lt;/a&gt;. A Byte of Typescript is a new series that I will be publishing on a regular basis to help you demystify Typescript.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>New Features of ASP.Net Core 3.0 for Web Development</title>
      <author>Tarun Gurang</author>
      <pubDate>Mon, 27 Sep 2021 07:54:14 +0000</pubDate>
      <link>https://dev.to/tarungurang/new-features-of-asp-net-core-3-0-for-web-development-1j0c</link>
      <guid>https://dev.to/tarungurang/new-features-of-asp-net-core-3-0-for-web-development-1j0c</guid>
      <description>&lt;p&gt;.NET Core 3 was released on 23 September 2019. If you have been using ASP.NET Core for a duration, the major change is that .NET Core 3.0 cannot run on top of the .NET Framework.&lt;/p&gt;

&lt;p&gt;.NET Core 3.0 originates an opt-in feature that permits your app to roll forward to the current major version of .NET Core. Microsoft has introduced that .NET Core in specific is where the revolution will be. There is a plan to coincide.&lt;/p&gt;

&lt;p&gt;Moreover, it is a free, open-source development environment for developing any genre of application such as web, Android, iOS, cloud, and IoT Applications.&lt;/p&gt;

&lt;p&gt;.Net Core is one of the most preferred platforms in almost many &lt;strong&gt;&lt;a href="https://www.ifourtechnolab.com/asp-net-cms-web-development-company"&gt;.Net web development companies&lt;/a&gt;&lt;/strong&gt; because .Net core is supported by Microsoft as well as the .NET community on GitHub. An updated setting has been attached to control how to roll forward is involved in your app.&lt;/p&gt;

&lt;p&gt;The three main features of .NET Core 3.0, chief of Microsoft expressed are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;UI interoperability and Desktop caseload.&lt;/li&gt;
&lt;li&gt;Machine Learning and Artificial Intelligence.&lt;/li&gt;
&lt;li&gt;Cloud and web app development efficiency.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;What’s new in .NET Core 3?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With comprehensive support from Microsoft, you can now use many of the new features in your production applications. Let’s explore what is new to the platform and take them one by one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.Net Core 3 platform support&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It maintains an ample range of Operating System like Windows Server: 2012, Windows Client: 7, 8.1, 10, RHEL: 6+, macOS: 10.12+, Ubuntu: 16.04+, Fedora: 26+, SLES: 12+, Alpine: 3.8+, and openSUSE: 42.3+.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.ifourtechnolab.com/blog/how-to-use-asp-net-core-web-apis-for-web-development"&gt;How To Use Asp.net Core Web Apis For Web Development&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ASP.NET Core packaging&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;.NET Core 3.0 announced that ASP.NET Core is now an SDK, not a set of apparent libraries. In previous versions of ASP.NET Core, you might have gained the different pieces of ASP.NET Core as separate NuGet packages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assembly loadability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With it, an application can store and empty gathering with no memory spill. It is another ability of AssemblyLoadContext, which is effortless from an API viewpoint and unwrapped with only a couple of new APIs. It allows releasing all memory for classification types, a loader set to be emptied and get together intrinsically, and static fields.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ASP.NET Core SignalR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s a persuading theme but the new endpoint routing modifies how you wire up SignalR as well. In ASP.NET Core 3.0, make sure you are using the Core version of SignalR but this hasn’t replaced much from the 2.2 version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows desktop apps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One can fabricate windows desktop applications exploiting windows forms and WPF with the .NET Core 3.0. It holds up deploying modern controls and familiar styling from the Windows UI XAML Library (WinUI).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Layered Compilation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is by default feature in .NET Core 3.0 that authorizes the runtime to all the more adjustable in exploiting the Just-In-Time compiler to represent efficiently better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security in ASP.NET Core&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Security in ASP.NET Core offers other plumbing changes, but this one is slight.&lt;/p&gt;

&lt;p&gt;ASP.NET Core 3.0 also has some trivial features including:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Recently added AES-CCM and AES- GCM cyphers&lt;/li&gt;
&lt;li&gt;HTTP/2 maintenance&lt;/li&gt;
&lt;li&gt;OpenSSL 1.1.1 and TLS 1.3 on Linux&lt;/li&gt;
&lt;li&gt;Import or Export unsymmetrical keys without any necessity for an X.509 certificate&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Blazor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Blazor is the latest ASP.NET Core related framework that enables us to build interactive client-side web User Interface with .NET. Being a competitive alternative of JavaScript, it uses C# instead of JavaScript for creating UI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Blazor Server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Based on the updates applied for the UI, Blazor dissociates the rendering logic of the component. In an Asp.Net Core app, the Blazor server offers impeccable support for Razor components to get hosted on the server. And through the help of the SignalR connection, the User Interface updates would be efficiently handled.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JSON serialization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Asp.net Core 3.0 no longer relies on JSON.NET to serialize and deserialize JSON Data. There is a new library that has been introduced in System.Text.Json namespace for serializing and deserializing JSON.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C# 8 support&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ASP.NET Core 3.0 has full support for C# 8. C# 8 has lost of performance changes and language improvements. The following are some major changes in C# 8&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Async streams&lt;/li&gt;
&lt;li&gt;The supporting features of Range and Index classes make working with arrays much simpler.&lt;/li&gt;
&lt;li&gt;With the usage of Nullable Reference Types, it becomes possible to deal with null related concerns in the code.&lt;/li&gt;
&lt;li&gt;Default implementations for functions (methods) would be displayed for Interfaces&lt;/li&gt;
&lt;li&gt;To overcome the code indentation related issues, the variable could be scoped by using-declaration.&lt;/li&gt;
&lt;li&gt;Pattern matching support with returning expression would now be possible through a switch statement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Looking to &lt;strong&gt;&lt;a href="https://www.ifourtechnolab.com/hire-asp-net-core-developer"&gt;Hire ASP.Net Core Developer&lt;/a&gt;&lt;/strong&gt;? Contact Now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance Improvement&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reduction in memory usages when using the built-in dependency injection container for scoped variable&lt;/li&gt;
&lt;li&gt;Reduce memory usages for WebSocket connections.&lt;/li&gt;
&lt;li&gt;Reduce memory usage and throughput improvements in form parsing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Support for HTTP/2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The HttpClient class has included with the HTTP/2 protocol, a new data communication standard over the web. Compared to its previous, HTTP/2 is less prone to errors and can reduce latency. It also has a smaller network footprint. default protocol in ASP.NET Core 3.0 is HTTP/1.1. if one wants to use HTTP/2 than it has to set manually. Keep in mind both server and client both have support for HTTP/s than only one can use HTTP/2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;gRPC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;gRPC is an open-source framework that is developed by the tech giant Google possibly to form distributed systems by connecting the services. Basically, this project is implemented for the purpose of communication between the web services promoting with the RPC (Remote Procedure Call) model.&lt;/p&gt;

&lt;p&gt;Before the release of the .NET Core 3.0 framework, the C# applications have to utilize the Grpc.Core library to work with gRPC, a C# wrapper.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;These given characteristics of gRPC functionality are included in ASP.NET Core 3.0:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grpc.AspNetCore: It is a popular ASP.NET Core framework for that is helpful to host gRPC services. gRPC on ASP.NET Core integrates with standard features of ASP.NET Core such as dependency injection (DI), logging, authorization, and authentication.&lt;/li&gt;
&lt;li&gt;Grpc.Net.Client: A gRPC client for .NET Core that builds upon the familiar HttpClient.&lt;/li&gt;
&lt;li&gt;Grpc.Net.ClientFactory: gRPC client integration with HttpClientFactory.&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title>Me, AWS and Netlify</title>
      <author>aleksandarPerc</author>
      <pubDate>Mon, 27 Sep 2021 07:44:46 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/me-aws-and-netlify-4016</link>
      <guid>https://dev.to/bornfightcompany/me-aws-and-netlify-4016</guid>
      <description>&lt;h2&gt;
  &lt;a href="#into-the-city"&gt;
  &lt;/a&gt;
  Into the city
&lt;/h2&gt;

&lt;p&gt;When I moved to Cloud City I noticed that everybody was nice and friendly. What was striking is that the community was large, but the technology everybody was using, was even larger. &lt;br&gt;
I was new so I wanted to get to know the city. My idea was to make my MyApp scale quickly with the help of the technology of Cloud City and its community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#at-the-pub"&gt;
  &lt;/a&gt;
  At the pub
&lt;/h2&gt;

&lt;p&gt;I managed to find an apartment near Serverless Heights, which is a pretty large neighborhood in the area. The first few days were boring, but I found a small pub with a great beer named Codereviewer, the pub, and the beer are named Codereviewer.&lt;br&gt;
One night I was sitting at the bar where several developers had been celebrating the end of a stressful sprint. They were very open so I joined the conversation from time to time. After few more beers, they started to talk about girls in the neighborhood and then somebody mentioned AWS and the moment just stopped. Each of the guys took a moment to bring back memories of her image, of her beauty. As it seemed AWS was the most wanted girl in the whole city and everybody was talking about her. One guy mentioned that she could come to this pub, and by the looks, everybody gave him I suspected that that was the reason they came to the pub. By listening carefully I understood that she wasn't an easy girl, but was approachable. She wouldn't expect dinners and presents and was very respectful of your money and hers too. She would always split the bill evenly. As long as you behaved you had a chance with her.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-i-met-her"&gt;
  &lt;/a&gt;
  When I met her
&lt;/h2&gt;

&lt;p&gt;The next day I came to the Codereviewer and sat at the bar, again. There was nobody I could recognize from the evening before. I ordered a cup of coffee and started scrolling on my mobile phone. &lt;br&gt;
All of a sudden the murmur stopped, it took me a few seconds to understand what was happening. Everybody was looking at the door. I turned my head and there she was. AWS. She was the most beautiful thing I had ever seen. Long blond API Gateway was waiving as she walked. She was walking toward the bar with her beautiful legs, I raised my view toward her Cognito and a little bit more to her Lambdas. And what Lambdas she had! It was like she came out of PlayDev's magazine cover. Perfection.&lt;br&gt;
She sat beside me. When she ordered her drink she turned toward me and just started the conversation. I won't go into details, but after I gave her some details about me, we were a couple. The first few days and weeks were incredible, it looked like the relationship was moving forward really fast. She let me play with her Lambdas and I played a lot I must admit. :-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-i-got-to-know-her-better"&gt;
  &lt;/a&gt;
  When I got to know her better
&lt;/h2&gt;

&lt;p&gt;Weeks and months passed. Everything was great but we couldn't push our relationship to the next level. When things were going great she would distract with something out of the blue that she thought wasn't right at the moment. After a while, I noticed that I wasn't playing as much with her Lambdas anymore but was constantly preoccupied with "where are the keys", "you left the toilet seat up", "there are these bills you have to pay"... the list went on and on... For everything that she put on, there should be two guys waiting for her and her needs and I wasn't ready for that. I am a little bit conservative in that department. After several months we broke up. I just couldn't handle it anymore. &lt;br&gt;
I was devastated. She just sucked all of the joy I had in me. I was thinking about leaving Serverless Heights and even my MyApp. Instead of working on MyApp, I was taking care of AWS. We all suffered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-then-came-netlify"&gt;
  &lt;/a&gt;
  And then came Netlify
&lt;/h2&gt;

&lt;p&gt;After two months I met this girl named Netlify. I didn't need any manuals and she had great Lambdas. She is wild. Getting to know her Identity went quick. We just enjoyed being together and went from zero to married in no time. I just had to Git Push and MyApp will have a little sister NextApp in December.&lt;/p&gt;

&lt;p&gt;Between you and me AWS and Netlify have the same Lambdas but don't say it to the guys at Codereviewer. ;-)&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>aws</category>
      <category>netlify</category>
    </item>
    <item>
      <title>AWS open source news and updates #83</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 27 Sep 2021 07:40:44 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-82-524a</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-82-524a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#september-27th-2021-instalment-83"&gt;
  &lt;/a&gt;
  September 27th, 2021 - Instalment #83
&lt;/h2&gt;

&lt;p&gt;Newsletter #83.&lt;/p&gt;

&lt;p&gt;Welcome to issue #83 of this newsletter, and more great new open source projects to check out. For infrastructure as code practitioners we have several projects for both CDK and Terrafrom, a CI/CD project to help you scale GitHub Actions runners, a simple hosting project with some nice features you can use as a baseline for your own project, a reference architecture for data analytics on AWS with some comprehensive CDK stacks you can inspect and borrow for your own, a project to help you visualise some of your key cloud metrics and more.&lt;/p&gt;

&lt;p&gt;On top of that we have new posts covering Apache Airflow, Open Telemetry, Cortex, Kubernetes, Suricata, Spring Boot, moto, GraphQL and more. This weeks videos cover AWS SAM and Open Telemetry, and to finish off we have the events sections with events happening later this week.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Zappa&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Zappa makes it super easy to build and deploy serverless, event-driven Python applications. One of my first attempts in building serverless applications many moons ago was via this project, and the great tutorials and documentation that supported it.&lt;/p&gt;

&lt;p&gt;Last week, &lt;a href="https://aws-oss.beachgeek.co.uk/y5"&gt;this tweet&lt;/a&gt; announced that the maintainers are &lt;a href="https://aws-oss.beachgeek.co.uk/y6"&gt;deprecating this project&lt;/a&gt;. Take a look and see if this is something you want to take on. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Kenneth Winner, Jimmy Dahlqvist, Gokul Chandra, Michael Hausenblas, QP Hou, Björn Wilmsmann, Philip Riecks, Tom Hombergs, Adam Palmer, Jesper Eneberg, Talia Nassi, Ilan Gofman, Krzysztof Lis, Wojciech Matuszewski, Danilo Poccia, Jonas Birmé, Ian Mckay, Oscar Nord, Eddy Lin, Yin Song, Josiah Davis, Eden Duthie, Chen Wu, Nisha Notani, Timur Tulyaganov, and Yuriy Prykhodko.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-open-source-projects"&gt;
  &lt;/a&gt;
  Latest open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;permissions.cloud&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/xw"&gt;permissions.cloud&lt;/a&gt; is an open source project from AWS Hero Ian Mckay that provides a handy IAM reference guide which I used this week when I was putting together my blog post (see below). You can view this online by heading over to &lt;a href="https://aws-oss.beachgeek.co.uk/xx"&gt;https://permissions.cloud/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2fRGkaT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/iann0036/permissions.cloud/blob/main/assets/img/screen1.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2fRGkaT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/iann0036/permissions.cloud/blob/main/assets/img/screen1.png%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;self-hosted-runners-on-aws&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/y8"&gt;self-hosted-runners-on-aws&lt;/a&gt; check out this project from Jimmy Dahlqvist, that helps you setup and run GitHub Actions CI/CD runners on AWS in an auto scaled way. Reacts on GitHub webhooks to trigger auto scaling of EC2 spot instances.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--db7ZiPj7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/JimmyDqv/self-hosted-runners-on-aws/blob/master/images/architecture.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--db7ZiPj7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/JimmyDqv/self-hosted-runners-on-aws/blob/master/images/architecture.png%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cdk-lambdaless-apigw-websockets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/xv"&gt;cdk-lambdaless-apigw-websockets&lt;/a&gt; an interesting "experimental" project from Wojciech Matuszewski that explores how to build a websocket API without resorting to writing Lambda functions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1kQs30tY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/WojciechMatuszewski/cdk-lambdaless-apigw-websockets/blob/main/img/architecture.jpeg%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1kQs30tY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/WojciechMatuszewski/cdk-lambdaless-apigw-websockets/blob/main/img/architecture.jpeg%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cdk-appsync-transformer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ye"&gt;cdk-appsync-transformer&lt;/a&gt; Kenneth Winner has put together this CDK construct following on from a blog post he wrote on using the AWS Cloud Development Kit with AppSync. Kenneth has written this transformer in order to emulate AWS Amplify's method of using GraphQL directives in order to template a lot of the Schema Definition Language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;authenticated-static-site&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/yc"&gt;authenticated-static-site&lt;/a&gt; I love these kinds of projects, this one is an example CDK project that shows how you can set up an authenticated static site. Using Amazon Cognito for authentication and Amazon S3 for hosting your site, it integrates a simple pipeline to push out your site content stored in GitHub, via AWS CodePipeline. I can see this being useful for a number of my demo projects, might just have to convert these CDK stacks into Python...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-cudos-framework-deployment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/yg"&gt;aws-cudos-framework-deployment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Cloud Intelligence Dashboards are a collection of Amazon QuickSight dashboards, and include The Cost Intelligence Dashboard, CUDOS Dashboard, Trusted Advisor Organization (TAO) Dashboard, and Trends Dashboard. This repository has everything you need to get you up and running to set those up. To help provide more background, check out the blog post &lt;a href="https://aws-oss.beachgeek.co.uk/yh"&gt;Visualize and gain insights into your AWS cost and usage with Cloud Intelligence Dashboards and CUDOS using Amazon QuickSight&lt;/a&gt; from Nisha Notani, Timur Tulyaganov, and Yuriy Prykhodko.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EAIiSWZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/09/CUDOS_under_the_hood.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EAIiSWZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/09/CUDOS_under_the_hood.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;amazon-sagemaker-tsp-deep-rl&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/y9"&gt;amazon-sagemaker-tsp-deep-rl&lt;/a&gt; The Travelling Salesperson Problem (TSP) is summarised as ""Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the origin city?" and this project provides code that demonstrates how to train, deploy, and make inferences using deep reinforcement learning to solve the Travelling Salesperson Problem. To walk you through it, Yin Song, Josiah Davis, Eden Duthie, and Chen Wu have come together to write, &lt;a href="https://aws-oss.beachgeek.co.uk/ya"&gt;Solving the Traveling Salesperson Problem with deep reinforcement learning on Amazon SageMaker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BrXVe4Cb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/13/song_traveling-salesperson_f1-learning_tsp_decoder.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BrXVe4Cb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/13/song_traveling-salesperson_f1-learning_tsp_decoder.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-analytics-reference-architecture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/y3"&gt;aws-analytics-reference-architecture&lt;/a&gt; if you are looking to put together a data analytics solution, you should check out this reference architecture first. It combines a number of current good practices for design, the implementation and operation of an analytics platform. The documentation (&lt;a href="https://aws-samples.github.io/aws-analytics-reference-architecture/"&gt;AWS Analytics Reference Architecture&lt;/a&gt;) is great, providing an easy way to navigate and understand the different components. Code contains CDK reference examples, which you can borrow in your own projects as well. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-kIbZ41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aws-samples.github.io/aws-analytics-reference-architecture/resources/global-design.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-kIbZ41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aws-samples.github.io/aws-analytics-reference-architecture/resources/global-design.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;amazon-gamelift-plugin-unity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/xu"&gt;amazon-gamelift-plugin-unity&lt;/a&gt; this project is a plugin for Unity that contains libraries and native UI that makes it easier to access GameLift resources and integrate GameLift into your Unity game. You can use the GameLift Unity Plugin to access GameLift APIs and deploy AWS CloudFormation templates for common gaming scenarios.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;terraform-aws-appconfig&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/y1"&gt;terraform-aws-appconfig&lt;/a&gt; a new Terraform module from clowd.haus which creates AWS AppConfig resources within your Terraform code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;amazon-ecs-fullstack-app-terraform&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/y2"&gt;amazon-ecs-fullstack-app-terraform&lt;/a&gt; this repository contains Terraform code to deploy a complete demo application, including the infrastructure as well as a CI/CD pipeline that you can use as a baseline for your own projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7a8THmhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/amazon-ecs-fullstack-app-terraform/blob/main/Documentation_assets/Infrastructure_architecture.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7a8THmhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/amazon-ecs-fullstack-app-terraform/blob/main/Documentation_assets/Infrastructure_architecture.png%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gist of the week&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This very handy snippet, &lt;a href="https://aws-oss.beachgeek.co.uk/y0"&gt;ingest-aws.js&lt;/a&gt;, from &lt;a href="https://aws-oss.beachgeek.co.uk/xz"&gt;Jonas Birmé&lt;/a&gt; allows to create an event to watch for a video being uploaded to an Amazon S3 bucket, and this kicking off a transcode event. It uses the open source &lt;a href="https://aws-oss.beachgeek.co.uk/xy"&gt;ingest-application-framework&lt;/a&gt; which was new to me, and provides a ready to go framework for building video on demand ingest applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XzJkSk0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://eyevinn.github.io/ingest-application-framework/eyevinn-iaf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XzJkSk0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://eyevinn.github.io/ingest-application-framework/eyevinn-iaf.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-community-blog-posts"&gt;
  &lt;/a&gt;
  AWS and Community blog posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A couple of posts this week.&lt;/p&gt;

&lt;p&gt;First up, a post I somehow missed last year which is worth checking out, is this post from QP Hou, &lt;a href="https://aws-oss.beachgeek.co.uk/xp"&gt;Breaking up the Airflow DAG monorepo&lt;/a&gt; where he explores how to bring multi-repo DAG development using a new open sourced project called objinsync](&lt;a href="https://aws-oss.beachgeek.co.uk/xq"&gt;https://aws-oss.beachgeek.co.uk/xq&lt;/a&gt;), that is a stateless DAG sync daemon, which is deployed as a sidecar container. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FHYgMxLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tech.scribd.com/post-images/2020-03-airflow/dag-release-pipeline.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FHYgMxLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tech.scribd.com/post-images/2020-03-airflow/dag-release-pipeline.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following that, a new blog post/tutorial from myself, &lt;a href="https://aws-oss.beachgeek.co.uk/xo"&gt;Integrating Amazon Timestream in you Amazon Managed Workflows for Apache Airflow v2.x&lt;/a&gt;, where I show you how you can orchestrate Amazon Timestream data using  Apache Airflow to help you with a number of different use cases. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Athena SQLite&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Damon Cortesi has put together this post a few months back, &lt;a href="https://aws-oss.beachgeek.co.uk/xs"&gt;Athena SQLite&lt;/a&gt; that shows you how to query SQLite databases in S3 using Athena’s Federated Query functionality. It is implemented within the Serverless Application Repository (SAR) and you can check out the details of &lt;a href="https://aws-oss.beachgeek.co.uk/xt"&gt;how to deploy it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cortex&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cortex is a distributed system that allows for a horizontally scalable, highly available, and long-term storage solution for Prometheus metrics. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/xn"&gt;Building a series deletion API in Cortex&lt;/a&gt; from Ilan Gofman, he shares his experience of designing and implementing the series deletion feature inside of the Cortex open source project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--InAq9Xf---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/13/alolitas_gofman_series-deletion-api-cortex_f1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--InAq9Xf---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/13/alolitas_gofman_series-deletion-api-cortex_f1.png" alt="design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenTelemetry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;More OpenTelemtry goodness this week, starting off with this post from Danilo Poccia, who wrote last week of the general availability of tracing in AWS Distro for OpenTelemetry in, &lt;a href="https://aws-oss.beachgeek.co.uk/xr"&gt;New for AWS Distro for OpenTelemetry – Tracing Support is Now Generally Available&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--68-IGI6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/09/13/aws-otel-annotations-1024x586.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--68-IGI6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/09/13/aws-otel-annotations-1024x586.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following that we have Eddy Lin, who discusses his experience building the Go MultiMod tool, an open source solution that automates most of the tedious work of releasing new versions with Golang. Read more in his post, &lt;a href="https://aws-oss.beachgeek.co.uk/yb"&gt;Simplifying OpenTelemetry Collector and Go library releases with the Go MultiMod tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/xg"&gt;Using PostgreSQL with Spring Boot on AWS — Part 1&lt;/a&gt; and &lt;a href="https://aws-oss.beachgeek.co.uk/xh"&gt;Using PostgreSQL with Spring Boot on AWS — Part 2&lt;/a&gt; is a follow up post from Björn Wilmsmann, Philip Riecks, and Tom Hombergs, authors of the book Stratospheric: From Zero to Production with Spring Boot and AWS. The original post was very well received, so they are back with more, this time exploring how you can use PostgreSQL from a Spring Boot web application. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q3K3nkjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/16/sueiras_wilmsmann-using-postgresql-amazon-rds_f1_small.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q3K3nkjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/16/sueiras_wilmsmann-using-postgresql-amazon-rds_f1_small.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Suricata&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you ever wondered the origins of the name of the open source IDS/IPS Suricata, then you need to read this post (it kind of made sense after I knew, but still amazed me). Adam Palmer and Jesper Eneberg show you how to create an open-source IDS/IPS service running in Docker containers, using Amazon Elastic Container Service (ECS) and Amazon Linux 2 (AL2) in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/xi"&gt;Building an Open Source IDS IPS service for Gateway Load Balancer&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_hTRgS6f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/5b384ce32d8cdef02bc3a139d4cac0a22bb029e8/2021/09/06/suricata-docker-Base.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_hTRgS6f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/5b384ce32d8cdef02bc3a139d4cac0a22bb029e8/2021/09/06/suricata-docker-Base.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;moto&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/xk"&gt;moto&lt;/a&gt; is an open source library that allows you to easily mock out tests based on AWS infrastructure. In the post &lt;a href="https://aws-oss.beachgeek.co.uk/xj"&gt;Getting started with testing serverless applications&lt;/a&gt;, Talia Nassi shows you how you can use this as part of your testing approach when building serverless applications. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A series of two posts covering migration from a monolithic REST API and monolithic frontend to a modern federated GraphQL system. In &lt;a href="https://aws-oss.beachgeek.co.uk/xl"&gt;Building federated GraphQL on AWS Lambda&lt;/a&gt; Krzysztof Lis from IMDb shares their experience and what they learned, including how open source tools helped with the learning curve as they migrated. Following that, in &lt;a href="https://aws-oss.beachgeek.co.uk/xm"&gt;Managing federated schema with AWS Lambda and Amazon S3&lt;/a&gt; he looks at one of the biggest challenges they faced, GraphQL schema management.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HZbS4Tuq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/09/16/graphql3.png.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HZbS4Tuq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/09/16/graphql3.png.jpg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/yf"&gt;Amazon EKS Anywhere &amp;amp; EKS Connector&lt;/a&gt; Gokul Chandra provides a very comprehensive walk through of Amazon EKS Anywhere and EKS Connector, showing you how you can put these together as part of your hybrid cloud architecture. This post will require your focus, so grab your preferred hot beverage before reading.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Eyevinn Ingest Application Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Eyevinn Ingest Application Framework (IAF) allows you to build plugins in a modular way that can interact with different storage or transcoding solutions. Oscar Nord dives deeper into this in his post, &lt;a href="https://aws-oss.beachgeek.co.uk/y7"&gt;Building plugins for the Eyevinn Ingest Application Framework&lt;/a&gt;. He looks at two of the IAF plugins developed to easily transcode and make on demand video content (VOD) available on multiple devices using AWS Elemental MediaConvert and AWS Elemental MediaPackage. You can see in the projects section above for more details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#videos-of-the-week"&gt;
  &lt;/a&gt;
  Videos of the week
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;AWS SAM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mehmet Nuri Deveci and Eric Johnson bring you the latest Serverless Office Hours, this week featuring AWS Serverless Application Model (SAM) and demonstrate how SAM Accelerate helps developers build serverless applications quickly. We demo how SAM Accelerate will help developers test in the cloud by speeding up the deployment process and bringing all logging to a central location.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/syHwvb_P4JM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenTelemetry and FluentBit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Michael Hausenblas discusses good practices and current developments around CNCF open source projects and specifications including OpenTelemetry and FluentBit. This has been on the events section for a few weeks, so am hoping some of view will have seen this already, if not, check out his presentation. &lt;a href="https://aws-oss.beachgeek.co.uk/yd"&gt;Embracing Observability in Distributed Systems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Distributed load testing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is something to keep an eye out for, a new series from Open Source-AWS on You Tube, taking a look and walking through open source projects on AWS. The first one is taking a look at distributed load testing using AWS Fargate.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LXKavTaeo4E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Amazon EMR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;EMR Studio is an integrated development environment (IDE) that makes it easy for data scientists and data engineers to develop, visualise, and debug big data and analytics applications written in R, Python, Scala, and PySpark. You can now use (Version EMR 6.4.0 and later), Python, Scala, SparkSQL, and R within the same Jupyter notebook in EMR Studio, providing flexibility to use different programming languages for Spark workloads. Previously, you could only write code in one language within the same notebook for Spark workloads. With this feature enhancement to Jupyter notebooks, you can now switch between Python, Scala, SparkSQL, and R within the same Jupyter notebook and share data between cells via temporary tables. You can also use this feature from EMR Notebooks or from Jupyter notebooks talking to Jupyter Enterprise Gateway (JEG) on EMR 6.4.0 and later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;Coming up later this week we have...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Secure Coding Virtual Summit&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;September 29, 2021&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Secure Coding Virtual Summit is your source for everything you need to build secure code from the ground up. There are many interesting session, but check out the sessions covering how to secure and protect yourself when using open source.&lt;/p&gt;

&lt;p&gt;Full details, including speaker line up and &lt;a href="https://aws-oss.beachgeek.co.uk/xb"&gt;how to register, here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GraphQL API security best practices with AWS AppSync and AWS Amplify&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;14th October, 11am AEST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a developer, the most important parts of managing your applications should always include enhancing performance while strengthening security. In this webinar, we take you through security best practices for your GraphQL API’s with AWS AppSync and AWS Amplify, providing you with an understanding of how these can be applied to your applications. In this session, you will learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GraphQL Protocol and how to configure a schema&lt;/li&gt;
&lt;li&gt;Possible ways to authenticate and authorise access to GraphQL APIs&lt;/li&gt;
&lt;li&gt;How to configure network security for your API&lt;/li&gt;
&lt;li&gt;How to enable observability for your API with logging, tracing or auditing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To &lt;a href="https://aws-oss.beachgeek.co.uk/ue"&gt;register for this event, use this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon SageMaker and Open-Source Tools for ML: Better Together&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;October 7 | 11 AM PT | 2 PM ET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many organisations rely on open-source tools to support the Machine Learning lifecycle. Amazon SageMaker has been rapidly evolving by introducing support and compatibility for various open-source frameworks. In this session, you will learn how to build a customisable ML Infrastructure based on Amazon SageMaker and open-source components. We will discuss pros and cons, the limitations of different tools that support specific stages of the ML workflow, and best practices for MLOps, to automate these stages into repeatable pipelines.&lt;/p&gt;

&lt;p&gt;To read more and &lt;a href="https://aws-oss.beachgeek.co.uk/wz"&gt;register for this event, click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flink Forwards Global 2021&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;October 26th/27th&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flink Forward Global 2021 is a 2-day virtual conference for the Apache Flink and stream processing communities. Apache Flink is an open-source distributed engine for processing data streams that can support both streaming and batch workloads. Flink Forward has keynote presentations and talks on production Flink use cases, technical deep dive sessions, and the growth of the Flink ecosystem. You can meet core Flink committers, new and experienced users, and thought leaders who share experiences and best practices in stream processing, real-time analytics, and the management of mission-critical Flink deployments in production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/wh"&gt;Read more and sign up here.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>How a Programmer Can Rest Properly</title>
      <author>Roger Christianson</author>
      <pubDate>Mon, 27 Sep 2021 07:32:14 +0000</pubDate>
      <link>https://dev.to/rogerthegreat/how-a-programmer-can-rest-properly-jpp</link>
      <guid>https://dev.to/rogerthegreat/how-a-programmer-can-rest-properly-jpp</guid>
      <description>&lt;p&gt;Full-fledged recreation is a guarantee of health and good working capacity of a person. For professionals engaged in different spheres of activity, certain types of recreation are suitable. For people whose work involves heavy physical labor, it is worth maximum relaxation after a day of work: read, watch a movie of your favorite genre. Office workers, who spend their days in a closed room, prefer walks in nature, yoga.&lt;/p&gt;

&lt;p&gt;How should a programmer rest so that they are full of energy and enthusiasm each time to take up new tasks? Go on a trip, you say. It's the best way to get distracted, gain new impressions, be inspired. It's true. But what to do if the long-awaited vacation is not yet soon, projects need to be implemented, and customers as if conspired and set more and more new tasks?&lt;/p&gt;

&lt;p&gt;Constant concentration and immersion in the work process often provoke chronic fatigue syndrome. You sleep, go for walks, chat with friends, but at the same time your brain is not relaxed. Over time, signs of fatigue such as irritability, absent-mindedness, lethargy, and insomnia appear.&lt;/p&gt;

&lt;p&gt;A few simple but effective tips can help you rest properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#separate-work-and-personal-life"&gt;
  &lt;/a&gt;
  Separate work and personal life
&lt;/h2&gt;

&lt;p&gt;Developers are so enthusiastic people that even distracted from work on the project, continue to think about work. Often they consider parallel replacement of the main activity as a rest, for example, reading specialized literature, make-up sites, studying new programming languages. However, the brain cannot take only useful information forever, which a developer tends to direct to personal professional growth.&lt;br&gt;
Learn to tell yourself: "Stop!" It is extremely important for a programmer to learn how to effectively relieve emotional and mental stress. Carve out time for meaningful communication with your family. Do not be a bystander. Ask your relatives about what happened to them during the day, ask what the child has learned, ask your loved one what is worrying or pleasing them at the moment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enjoy-life-outside-of-it"&gt;
  &lt;/a&gt;
  Enjoy life outside of IT.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#get-a-pet"&gt;
  &lt;/a&gt;
  Get a Pet
&lt;/h3&gt;

&lt;p&gt;Not only can a pet bring a nice coziness to your non-work life, but it can also relieve work life if you work at home - for example, taking breaks to feed your pet can help you get used to taking five-minute breaks for small exercises.&lt;/p&gt;

&lt;p&gt;It is impossible to say unequivocally that all developers should have this particular breed of animal. Each temperament and personality traits are worth selecting a different animal. Moreover, over time, the choice of breeds is becoming more and more diverse. For example, if before some people were torn between the choice between the Pomeranian Spitz and Husky, today they can simply contact the &lt;a href="https://pomskyownersassociation.com/pomsky-breeders/"&gt;Pomsky breeder&lt;/a&gt; and get the pet of their dreams. If dogs are not for you, then today the choice is not limited to cats. People are now actively getting unusual pets: piglets, hedgehogs, raccoons, ducks, and many, many more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practice-water-procedures"&gt;
  &lt;/a&gt;
  Practice water procedures
&lt;/h3&gt;

&lt;p&gt;You've probably heard that water has an amazing ability to literally wash away fatigue. A contrast shower not only improves blood circulation but also helps muscles relax and saturates tissues with oxygen.&lt;/p&gt;

&lt;p&gt;Conflicts with the boss or colleagues, communication with a "difficult" customer can knock out the rut and cause nervous exhaustion. To get out of a stressful state is worth meditating, take a warm (37-39 degrees) bath with a decoction of herbs: chamomile, mint, valerian. If you have no strength or desire to prepare a broth, use aromatic oils of orange, lavender, geranium, bergamot. They can be added directly to water or used in an aroma lamp.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rest-actively"&gt;
  &lt;/a&gt;
  Rest actively
&lt;/h3&gt;

&lt;p&gt;Practical programming, as well as learning, is associated with tremendous mental stress. You can spend all day in front of the monitor, in the evening feeling terribly tired, as from hard physical labor. But this feeling is false, and sports will help you fight it. Active rest is great for invigorating, it gets the blood flowing and gives you strength.&lt;/p&gt;

&lt;p&gt;Many programmers feel the need for active recreation on a subconscious level, choosing sports as a hobby for free time. Running, snowboarding, swimming, kite surfing, rollerblading will help to cheer up and keep you healthy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#listen-to-music"&gt;
  &lt;/a&gt;
  Listen to music
&lt;/h3&gt;

&lt;p&gt;Listening to your favorite songs and tracks while relaxing is a great way to relax and relieve stress. It does not matter what style you prefer, the main thing is that the list of works for relaxation is different from the work playlist. If you listen to the same music, the brain will not be able to switch, continuing to work in maximum concentration mode. By the way, psychologists recommend listening to the sounds of nature or classical music for better relaxation and relief of mental tension.&lt;/p&gt;

&lt;p&gt;Cover Image by &lt;a href="https://unsplash.com/photos/DzIt-fTYv4E"&gt;Drew Coffman/Unsplahs&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Automated social images on Netlify - with Next.js and Resoc</title>
      <author>Philippe Bernard</author>
      <pubDate>Mon, 27 Sep 2021 06:53:23 +0000</pubDate>
      <link>https://dev.to/philippe/automated-social-images-on-netlify-with-next-js-and-resoc-c9a</link>
      <guid>https://dev.to/philippe/automated-social-images-on-netlify-with-next-js-and-resoc-c9a</guid>
      <description>&lt;p&gt;The social images illustrate a web page on social networks and messaging services. For example, when I share &lt;a href="https://blog.philippebernard.dev/replace-imagemagick-with-html-and-css"&gt;this previous article&lt;/a&gt; on Slack, I get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2YD5Zqwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632402484731/-o5Il_40J.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2YD5Zqwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632402484731/-o5Il_40J.png" alt="Social image example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The green and pink image is attached to the shared page via an &lt;code&gt;og:image&lt;/code&gt; meta markup.&lt;/p&gt;

&lt;p&gt;The social images are a great opportunity to get attention. More often than not, this opportunity is wasted, because creating those image is quite boring. Unless they are automatically generated for us.&lt;/p&gt;

&lt;p&gt;In this tutorial, we are going to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a basic &lt;a href="https://nextjs.org/"&gt;Next.js app&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Create an image template with HTML and CSS, with the &lt;a href="https://www.npmjs.com/package/itdk"&gt;Resoc image template development kit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Use this template to generate our social images, thanks to the &lt;a href="https://www.npmjs.com/package/@resoc/netlify-plugin-social-image"&gt;Resoc social image Netlify build plugin&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Deploy our app to &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When sharing your app with your colleagues, they will see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ba0Ka5K8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632487923163/YGnfHhYx-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ba0Ka5K8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632487923163/YGnfHhYx-.png" alt="Demo app on Slack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you can't wait, &lt;a href="https://demo-nextjs-on-netlify.netlify.app/"&gt;try it now&lt;/a&gt; or &lt;a href="https://github.com/Resocio/demo-nextjs-on-netlify"&gt;browse the code&lt;/a&gt; 😁&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-nextjs-app"&gt;
  &lt;/a&gt;
  Create the Next.js app
&lt;/h2&gt;

&lt;p&gt;Let's create a new app and start it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create next-app
yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before implementing the social images, we first fix a little something with meta management. In our fresh app, the &lt;code&gt;title&lt;/code&gt; markup is hard coded in the homepage. This is okay in a simple example, but a real app will have this kind of recurrent markup moved to a single layout.&lt;/p&gt;

&lt;p&gt;Replace the content of &lt;code&gt;pages/_app.js&lt;/code&gt; with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our app now expects two page props, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt;, which are injected in classic &lt;code&gt;head&lt;/code&gt; markups.&lt;/p&gt;

&lt;p&gt;We need to modify the homepage and pass these two variables. In &lt;code&gt;pages/index.js&lt;/code&gt;, we define &lt;code&gt;getStaticProps&lt;/code&gt; for this purpose. We also remove the demo content for clarity:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      No need for content
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Automated social images on Netlify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;With Next.js and @resoc/netlify-plugin-social-image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visit the app again. From now on, title and description values come from the pages and &lt;code&gt;_app&lt;/code&gt; prints the markups:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QPjJD4UQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632405548514/qbM_TYbkm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QPjJD4UQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632405548514/qbM_TYbkm.png" alt="Title and description meta markups"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Done with the setup!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-image-template"&gt;
  &lt;/a&gt;
  Create the image template
&lt;/h2&gt;

&lt;p&gt;How should our social images look like? This is what we are going to work on, with the &lt;a href="https://www.npmjs.com/package/itdk"&gt;Resoc image template development kit&lt;/a&gt;. Quit &lt;code&gt;yarn dev&lt;/code&gt; for a moment and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx itdk init resoc-templates/default &lt;span class="nt"&gt;-m&lt;/span&gt; title-description
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command creates a new image template in &lt;code&gt;resoc-templates/default&lt;/code&gt; and opens a viewer in a browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--57EyziVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632406245554/snjETYKXd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--57EyziVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632406245554/snjETYKXd.png" alt="Default template in the viewer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The model we used via &lt;code&gt;-m title-description&lt;/code&gt; takes two parameters: a title and a description. Later, we will make Next.js inject the correct metadata in the template, and Netlify create the images for us. For now, we modify the template so it matches our app.&lt;/p&gt;

&lt;p&gt;Our app is gonna be hot, so let's replace the logo in the template. Overwrite &lt;code&gt;resoc-templates/default/logo.png&lt;/code&gt; with the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4AI4NBp9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632407461997/qeJMGxow2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4AI4NBp9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632407461997/qeJMGxow2.png" alt="New logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our browser, the viewer shows the update:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6IMWr48t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632407954325/-vmyhwjjDY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6IMWr48t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632407954325/-vmyhwjjDY.png" alt="Template with new logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, change the background color. In &lt;code&gt;resoc-templates/default/styles.css.mustache&lt;/code&gt;, replace the background definition of &lt;code&gt;.wrapper&lt;/code&gt; with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;rgb&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;247&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;58&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;12&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;90&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;247&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;58&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;247&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;99&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our template is definitely hotter!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EfgPg-PT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632407937535/kYpThrMeb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EfgPg-PT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632407937535/kYpThrMeb.png" alt="Final template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for the template. We could have been much more creative, for example by &lt;a href="https://blog.philippebernard.dev/automated-social-images-play-it-like-github"&gt;imitating GitHub social images&lt;/a&gt;. This is a Resoc template:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YJXqJB9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632465283833/1BZ2IMVNc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YJXqJB9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632465283833/1BZ2IMVNc.png" alt="GitHub social image with Resoc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-social-images"&gt;
  &lt;/a&gt;
  Generate social images
&lt;/h2&gt;

&lt;p&gt;The idea behind image generation is pretty simple: take the title and description from a page, take the image template, mix, et voilà! The two technologies at work are &lt;a href="http://mustache.github.io/"&gt;Mustache&lt;/a&gt;, a template system used to inject parameter's values, and &lt;a href="https://github.com/puppeteer/puppeteer"&gt;Puppeteer&lt;/a&gt;, a headless Chrome system to convert HTML to images. However, we won't have to deal with these packages directly.&lt;/p&gt;

&lt;p&gt;Each image needs a couple of seconds to be generated. With our demo app, that's not an issue. But in a real world example with hundreds of pages, this is clearly a concern. In particular, &lt;em&gt;we don't want this process to take place at build time&lt;/em&gt;. Imagine your build time multiplied by 10... Cool social images don't worth such a wait. The &lt;a href="https://www.npmjs.com/package/@resoc/netlify-plugin-social-image"&gt;Resoc social image Netlify plugin&lt;/a&gt; adresses the issue by using a Netlify Function to create our images on demand, not at build time. Problem solved.&lt;/p&gt;

&lt;p&gt;Here is the process we are going to implement below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In our app, each page has a slug. No big deal: &lt;code&gt;index.js&lt;/code&gt; is &lt;code&gt;homepage&lt;/code&gt; (a particular case, since &lt;code&gt;index.js&lt;/code&gt; is linked to &lt;code&gt;/&lt;/code&gt;), &lt;code&gt;news.js&lt;/code&gt; is &lt;code&gt;news&lt;/code&gt;, &lt;code&gt;blog/huge-announcement.js&lt;/code&gt; is &lt;code&gt;blog-huge-announcement&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;Pages register their image template parameters. In our app, each page saves its title and description for later use.&lt;/li&gt;
&lt;li&gt;The app layout declares the social image using the page's slug, eg. &lt;code&gt;/social-images/homepage.jpg&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A Netlify Function uses the image template parameters declared by the pages to actually create the social images, on demand.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install the packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; @resoc/netlify-plugin-social-image @resoc/core @resoc/img-data
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to configure the plugin. At the root of the project, create &lt;code&gt;netlify.toml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="py"&gt;package&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"@resoc/netlify-plugin-social-image"&lt;/span&gt;
  &lt;span class="nn"&gt;[plugins.inputs]&lt;/span&gt;
  &lt;span class="py"&gt;templates_dir&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"resoc-templates"&lt;/span&gt;
  &lt;span class="py"&gt;slug_to_image_data_mapping_file&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"resoc-image-data.json"&lt;/span&gt;
  &lt;span class="py"&gt;open_graph_base_path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/social-images"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you use Netlify you must be familiar with this syntax. But we need to explain those parameters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;templates_dir&lt;/code&gt; is the directory which contains our Resoc templates. Later, we will indicate that we want to use our template named &lt;code&gt;default&lt;/code&gt;. This will be resolved as &lt;code&gt;resoc-templates/default&lt;/code&gt;, which is where we created our sole template.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;slug_to_image_data_mapping_file&lt;/code&gt; contains the data used to generate the social images.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;open_graph_base_path&lt;/code&gt; is the base path we will use in our &lt;code&gt;og:image&lt;/code&gt; markup.&lt;/p&gt;

&lt;p&gt;We update &lt;code&gt;pages/index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;storeImageData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@resoc/img-data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      No need for content, really
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prepareStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imgSlug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;storeImageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resoc-image-data.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;imgSlug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;imgSlug&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prepareStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Automated social images for Next.js on Netlify&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;With getStaticProps and @resoc/netlify-plugin-social-image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;homepage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We added a helper called &lt;code&gt;prepareStaticProps&lt;/code&gt;. Here, we call a function named &lt;code&gt;storeImageData&lt;/code&gt;.  We pass it the title and description as template parameters, the page slug, and the template to use (we have only one and it is in the &lt;code&gt;default&lt;/code&gt; sub directory). These data are saved to &lt;code&gt;resoc-image-data.json&lt;/code&gt;, the file we assigned to  &lt;code&gt;slug_to_image_data_mapping_file&lt;/code&gt; in &lt;code&gt;netlify.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because &lt;code&gt;prepareStaticProps&lt;/code&gt; returns the page props, &lt;code&gt;getStaticProps&lt;/code&gt; only needs to call it and return it as is.&lt;/p&gt;

&lt;p&gt;This is good enough in our one page app. In a real app, &lt;code&gt;prepareStaticProps&lt;/code&gt; should be reusable.&lt;/p&gt;

&lt;p&gt;We must also update &lt;code&gt;pages/_app.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FacebookOpenGraph&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@resoc/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/social-images/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;imgSlug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.jpg`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:image:width"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;FacebookOpenGraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:image:height"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;FacebookOpenGraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We added the Open Graph markups.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;og:title&lt;/code&gt;  and &lt;code&gt;og:description&lt;/code&gt; are just a repetition of existing markups, Open Graph style.&lt;/p&gt;

&lt;p&gt;To build the URL in &lt;code&gt;og:image&lt;/code&gt;, we use the plugin parameter &lt;code&gt;open_graph_base_path&lt;/code&gt; declared in &lt;code&gt;netlify.toml&lt;/code&gt; and the page slug.&lt;/p&gt;

&lt;p&gt;For completeness, we also declare the image width and height using  &lt;code&gt;FacebookOpenGraph.width&lt;/code&gt; and &lt;code&gt;FacebookOpenGraph.height&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We're done!&lt;/p&gt;

&lt;p&gt;To make sure our app is in good shape, restart it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visit the homepage and inspect the &lt;code&gt;head&lt;/code&gt; markup to make sure the Open Graph markups are correct.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jpQT0cR4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632472561485/9GTkUkR27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jpQT0cR4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632472561485/9GTkUkR27.png" alt="Open Graph markups"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also notice a new file, &lt;code&gt;resoc-image-data.json&lt;/code&gt;. If was created by &lt;code&gt;getStaticProps&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-to-netlify"&gt;
  &lt;/a&gt;
  Deploy to Netlify
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;yarn create next-app&lt;/code&gt; already initialized a Git repository for us.&lt;/p&gt;

&lt;p&gt;Before we commit, let's add &lt;code&gt;resoc-image-data.json&lt;/code&gt; to &lt;code&gt;.gitignore&lt;/code&gt; to make sure it won't be committed. This file is generated at build time, which will be Netlify's responsibility.&lt;/p&gt;

&lt;p&gt;Now, commit everything:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Social image!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Log in to GitHub and create a new repository. To push your existing repository to GitHub, follow the instructions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9IoNcmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632475731558/f8QI2S5K3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9IoNcmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632475731558/f8QI2S5K3.png" alt="GitHub instructions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now register to &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; or login. Add a new site:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7xuiqzk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632476297041/IZbeqwyc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7xuiqzk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632476297041/IZbeqwyc2.png" alt="Add new site to Netlify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use the Wizard to select your repository, leave the default values as they are and click "Deploy site". After a couple of minutes, our app is built and deployed.&lt;/p&gt;

&lt;p&gt;Get its URL:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZ6LDGQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632476668984/3NqZMaPPG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZ6LDGQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632476668984/3NqZMaPPG.png" alt="Netlify app URL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we visit this URL, there is not much to see. After all, this is not where our social image shine. Instead, submit it to the &lt;a href="https://developers.facebook.com/tools/debug"&gt;Facebook debugger&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cRTCvtDW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632476853890/dAYxGRpuz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cRTCvtDW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632476853890/dAYxGRpuz.png" alt="Facebook debugger"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hurray! The social image of our homepage was generated!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Automated social images have been around for a while. But creating them required a lot of custom code and efforts. Some solutions have been proposed, often at the expense of much longer builds.&lt;/p&gt;

&lt;p&gt;Using the &lt;a href="https://www.npmjs.com/package/itdk"&gt;Resoc image template dev kit&lt;/a&gt; and the &lt;a href="https://www.npmjs.com/package/@resoc/netlify-plugin-social-image"&gt;Resoc social image Netlify build plugin&lt;/a&gt;, we were able to setup automated social images quickly, with just the right amount of code. We even have spear time to perfect the template and make our images even more awesome!&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this article. If you followed this tutorial, I would be glad to get your feedback!&lt;/p&gt;

</description>
      <category>netlify</category>
      <category>nextjs</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>useState vs useReducer</title>
      <author>Dominik D</author>
      <pubDate>Mon, 27 Sep 2021 06:33:44 +0000</pubDate>
      <link>https://dev.to/tkdodo/usestate-vs-usereducer-c09</link>
      <guid>https://dev.to/tkdodo/usestate-vs-usereducer-c09</guid>
      <description>&lt;p&gt;The question about which state management solution to use might be just as old as React itself (or maybe even older), and answers to it are manifold. To me, there is only one good answer, and it's the same answer I will give to every seemingly complex question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It depends.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;— TkDodo&lt;/p&gt;

&lt;p&gt;It depends on the type of state. It depends on update frequency. It depends on scoping.&lt;/p&gt;

&lt;p&gt;If you know me, you know I have strong preferences on what to do with &lt;a href="https://tkdodo.eu/blog/react-query-as-a-state-manager"&gt;server state&lt;/a&gt;. So lets keep that out of the picture and look at everything that's left:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#client-state"&gt;
  &lt;/a&gt;
  Client State
&lt;/h2&gt;

&lt;p&gt;Before hooks, there was only one way of managing client state locally: in class-based components with &lt;em&gt;this.setState&lt;/em&gt;. The state had to be an object, and the update function accepted a partial version of it.&lt;/p&gt;

&lt;p&gt;Hooks changed that in a fundamental way. Not only could you now also manage state in functional components, you got two different ways of doing so with &lt;em&gt;useState&lt;/em&gt; and &lt;em&gt;useReducer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I think the way most people approached the switch from class based state management to hooks was to split up the object and go towards a single &lt;em&gt;useState&lt;/em&gt; for each field:&lt;/p&gt;

&lt;p&gt;Before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Names&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is pretty much the textbook example, and the split makes a lot of sense here. The two fields are pretty self-sufficient as they update on their own.&lt;/p&gt;

&lt;p&gt;But this isn't always the case. Sometimes, you might have state that actually updates together. In those situations, I don't think it makes sense to split it up into multiple useStates.&lt;/p&gt;

&lt;p&gt;One example that comes to mind is storing mouse coordinates (x/y). Using two &lt;em&gt;useStates&lt;/em&gt; seems super weird for something that always updates together, so I would use a single state object here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;setCoordinates&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
      &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setCoordinates&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;screenX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;screenY&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Click, &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#form-state"&gt;
  &lt;/a&gt;
  Form state
&lt;/h2&gt;

&lt;p&gt;I think a single useState object also works fine for a simple generic form, where the structure might be different each time you're using it, and you only want to update one field at the time. You can't really have multiple &lt;em&gt;useStates&lt;/em&gt; for that, so a rudimentary custom hook implementation could look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;State&lt;/span&gt; &lt;span class="na"&gt;extends&lt;/span&gt; &lt;span class="na"&gt;Record&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;string&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&amp;gt;(
  initialState: State
) =&amp;gt; &lt;span class="si"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValues&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Key&lt;/span&gt; &lt;span class="na"&gt;extends&lt;/span&gt; &lt;span class="na"&gt;keyof&lt;/span&gt; &lt;span class="na"&gt;State&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(name: Key, value: State[Key]) =&amp;gt;
    setValues((form) =&amp;gt; (&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;))

  return [values, update] as const
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, for &lt;em&gt;useState&lt;/em&gt;, to decide if I want to split state up or not, I go by the following rule:&lt;/p&gt;

&lt;p&gt;State that updates together should live together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#batching"&gt;
  &lt;/a&gt;
  Batching
&lt;/h2&gt;

&lt;p&gt;Consider using a single state object over calling multiple &lt;em&gt;useState&lt;/em&gt; setters in a row. React is very good at batching those state updates together in synchronous event handlers, but still struggles with batching in async functions. This will get better with &lt;a href="https://github.com/reactwg/react-18/discussions/21"&gt;Automatic Batching in React 18&lt;/a&gt;, but structuring your code in a way so that you can reason about what state belongs together will help with readability and maintainability in the long run, regardless of performance concerns.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usereducer"&gt;
  &lt;/a&gt;
  useReducer
&lt;/h2&gt;

&lt;p&gt;I believe &lt;a href="https://reactjs.org/docs/hooks-reference.html#usereducer"&gt;useReducer&lt;/a&gt; is still heavily underused. The main thinking around &lt;em&gt;useReducer&lt;/em&gt; seems to be that you only need it for "complex state". As I've written previously, it's pretty good for &lt;a href="https://tkdodo.eu/blog/things-to-know-about-use-state#bonus2-toggling-state-with-usereducer"&gt;toggling state&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's also an often used way to implement &lt;em&gt;forceUpdate&lt;/em&gt; (which almost every global state manager needs to inform subscribers about state changes if that state is kept outside of React):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;forceUpdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;None of these implementations are particularly complex, and I think it really shows the flexibility of &lt;em&gt;useReducer&lt;/em&gt;. That being said, it also shines when you update multiple parts of your state from different "actions", e.g. when implementing a multi-step wizard. You might want to initialize the second step depending on data chosen in the first step, or you might want to discard data of the third step when going back to the second.&lt;/p&gt;

&lt;p&gt;All these dependencies between parts of your state would need you to call &lt;em&gt;setState&lt;/em&gt; multiple times in a row when you have independent &lt;em&gt;useStates&lt;/em&gt; (one for each step), and it would also get quite messy if you'd had a single state object.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usereducer-tips"&gt;
  &lt;/a&gt;
  useReducer tips
&lt;/h3&gt;

&lt;p&gt;When I'm using &lt;em&gt;useReducer&lt;/em&gt;, I try to adhere to the &lt;a href="https://redux.js.org/style-guide/style-guide"&gt;redux style guide&lt;/a&gt;. It's a great writeup that I can totally recommend, and most of the points also translate very well to &lt;em&gt;useReducer&lt;/em&gt;, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://redux.js.org/style-guide/style-guide#do-not-mutate-state"&gt;Do Not Mutate State&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux.js.org/style-guide/style-guide#reducers-must-not-have-side-effects"&gt;Reducers Must Not Have Side Effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux.js.org/style-guide/style-guide#model-actions-as-events-not-setters"&gt;Model Actions as Events, not Setters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#event-driven-reducers"&gt;
  &lt;/a&gt;
  event driven reducers
&lt;/h4&gt;

&lt;p&gt;Working immutably and not having side effects in reducers are things that most people will adhere to automatically, because it's in line with what react itself needs you do.&lt;/p&gt;

&lt;p&gt;Modelling actions as events is something that I really want to emphasize on, because it's one of the biggest advantages of reducers. By doing so, you can keep all your application logic &lt;em&gt;inside&lt;/em&gt; the reducer instead of spread around various parts of the ui. This will not only make it easier to reason about state transitions, it will also make your logic super easy to test (really, pure functions are the easiest to test).&lt;/p&gt;

&lt;p&gt;To illustrate the concept, let's have a quick look at the standard &lt;em&gt;counter&lt;/em&gt; example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ✅ ui only dispatches events, logic is in the reducer&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;increment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;decrement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Count: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;increment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;decrement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Decrement&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The logic is not very sophisticated (adding 1 or subtracting 1), but it's still &lt;em&gt;logic&lt;/em&gt;. We can extend that to allow an upper / lower bound, or customize the amount of numbers to increase / decrease with each click.&lt;/p&gt;

&lt;p&gt;All of that would happen &lt;em&gt;inside&lt;/em&gt; the reducer. Compare that to an example where the reducer is "dumb" and just accepts the new number:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 🚨 dumb reducer that doesn't do anything, logic is in the ui&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;set&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Count: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;set&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Increment
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;set&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Decrement
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works the same, but is not as extensible as the previous example. So generally speaking, try to avoid actions that have &lt;em&gt;set&lt;/em&gt; in their name.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#passing-props-to-reducers"&gt;
  &lt;/a&gt;
  passing props to reducers
&lt;/h4&gt;

&lt;p&gt;Another great trait of reducers is that you can inline them, or closure over props. This comes in very handy if you need access to props or server state (e.g. coming from a &lt;a href="https://react-query.tanstack.com/"&gt;useQuery&lt;/a&gt; hook) &lt;em&gt;inside&lt;/em&gt; your reducer. Instead of "copying" these things into the reducer by using the state initializer, you can pass it to a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ✅ you'll always have access to the latest&lt;/span&gt;
  &lt;span class="c1"&gt;// server state in here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;queryFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This goes very well with the concept of &lt;a href="https://tkdodo.eu/blog/practical-react-query#keep-server-and-client-state-separate"&gt;separating server and client state&lt;/a&gt;, and it actually wouldn't work at all if you'd pass &lt;em&gt;data&lt;/em&gt; as &lt;em&gt;initialValue&lt;/em&gt;, because when the reducer first runs, &lt;em&gt;data&lt;/em&gt; will be &lt;em&gt;undefined&lt;/em&gt; (as we still need to fetch it first).&lt;/p&gt;

&lt;p&gt;So you'd wind up creating effects that try to sync the state into the reducer, which can get you in all sorts of troubles with background updates.&lt;/p&gt;

&lt;p&gt;Extending our event driven counter example where we fetch an &lt;em&gt;amount&lt;/em&gt; parameter from an endpoint would work pretty well with this approach. And of course, I'd use a custom hook for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;increment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;decrement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useCounterState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amount&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;fetchAmount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCounterState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Count: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;increment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;decrement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Decrement&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how we didn't need to change anything in the ui at all because of the clear separation provided by the custom hook 🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rule-of-thumb"&gt;
  &lt;/a&gt;
  Rule of thumb
&lt;/h2&gt;

&lt;p&gt;In summary, my rule of thumb of when to use what would be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if state updates independently - separate &lt;em&gt;useStates&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;for state that updates together, or only one field at a time updates - a single &lt;em&gt;useState&lt;/em&gt; object&lt;/li&gt;
&lt;li&gt;for state where user interactions update different parts of the state - &lt;em&gt;useReducer&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;That's it for today. Feel free to reach out to me on &lt;a href="https://twitter.com/tkdodo"&gt;twitter&lt;/a&gt;&lt;br&gt;
if you have any questions, or just leave a comment below ⬇️&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
