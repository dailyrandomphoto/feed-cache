<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Upcoming Solana NFT Projects - Moonly</title>
      <author>Stefan Smiljkovic</author>
      <pubDate>Fri, 14 Jan 2022 16:34:01 +0000</pubDate>
      <link>https://dev.to/shtefcs/upcoming-solana-nft-projects-moonly-353</link>
      <guid>https://dev.to/shtefcs/upcoming-solana-nft-projects-moonly-353</guid>
      <description>&lt;h2&gt;
  &lt;a href="#upcoming-solana-nft-projects-moonly"&gt;
  &lt;/a&gt;
  Upcoming Solana NFT Projects — Moonly
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--acS48op8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2864/0%2Akipawkqw35p9mwYz" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--acS48op8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2864/0%2Akipawkqw35p9mwYz" alt="" width="880" height="570"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good day, good people! After a short break from sharing my progress update for Automatio, I’m back with a new project. Meanwhile, I married and became a father, (minted) a beautiful girl called Mila.&lt;/p&gt;

&lt;p&gt;As you may know already, I devote time to building a no-code web automation tool called Automatio (a powerful web scraper and bot builder). But I also dived into Solana NFT blockchain development a couple of months ago. And despite the challenges, it’s been an exciting ride.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-quickly-whats-an-nft"&gt;
  &lt;/a&gt;
  But Quickly, What’s an NFT?
&lt;/h2&gt;

&lt;p&gt;NFT stands for non-fungible token. An NFT can be any physical item made available for sale digitally. This can be a painting, music, or any other sellable. And by non-fungible, it means an NFT isn’t replaceable, even with any other similar item. It’s essentially unique and tagged to the maker’s identity. In essence, no two same NFTs can exist at the same time. Each NFT item is identified in a blockchain using a unique token generated at the point of minting. And that’s why they call them non-fungible tokens, which means they’re non-replicable as each of them possesses a unique certificate.&lt;/p&gt;

&lt;p&gt;Minting, however, means creating an NFT item on a digital platform such as Solana to put it out for sale. NFTs exist on blockchains and are available for sales in cryptocurrencies. When you sell an NFT as the author, you invest in a lifetime passive income as the unique token trails your creation. So even whenever buyers resell your item, you get a certain percentage, called a royalty (determined by you), on each sale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moonly"&gt;
  &lt;/a&gt;
  Moonly
&lt;/h2&gt;

&lt;p&gt;So, friends, I present to you, for the first time, &lt;a href="https://moon.ly"&gt;**Moonly&lt;/a&gt;**, the Solana blockchain project that has captured my time and passion. With a regularly updated database of trending NFT projects, it helps you recommend the best upcoming NFT projects worth investing in on Solana.&lt;/p&gt;

&lt;p&gt;I’ve been on to NFT for some years now, and I know how difficult it can be to decide what NFT project is worth the time and investment. This problem and other salient ones are what I vision Moonly to solve. It’s currently a prototype version. But with the current development metrics, I’m optimistic that it will be a handy NFT project companion, dishing out the best timely ideas to its users when it finally launches. Moonly not only recommends the best NFT project available on Solana but goes ahead to help you decide which one is worth minting at a particular time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-moonly-and-how-does-it-work"&gt;
  &lt;/a&gt;
  So what’s Moonly, and how does it work?
&lt;/h2&gt;

&lt;p&gt;It’s an NFT recommender built on the Solana NFT blockchain. Since engagement determines, to a great extent, the potential worth of an NFT project, Moonly uses data analysis and detailed visualizations to give insights on metrics, such as the engagement pattern of NFT projects on Solana. Using these stats, it then tells you the most promising upcoming project with high potential to bring you passive income.&lt;/p&gt;

&lt;p&gt;The recommender relies heavily on several NFT data points sourced from several APIs. And we also scrape some using &lt;a href="https://automatio.co"&gt;**Automatio&lt;/a&gt;** in real-time. This is also a way to interlink my products and build a robust infrastructural framework.&lt;/p&gt;

&lt;p&gt;However, Moonly will recognize possible blue-chip NFT projects by analyzing over 18 different factors like social stats, engagement, validation of followers, growth rate, doxxed founders, roadmap, Discord community, etc. It will offer a set of tools to help you monitor existing NFT projects and better decide on trading factors like Floor Price, Volume, Listing count, historical data, undercut opportunities, and more.&lt;/p&gt;

&lt;p&gt;However, regardless of your experience with NFTs, the purpose of Moonly is to take you to the moon! It ensures that you invest only in solid NFT projects with high ROI (return on investment) potential.&lt;/p&gt;

&lt;p&gt;Having been a part of the Solana community for a while now, it became my first choice for blockchain technology. Indeed, it’s one of the fastest decentralized systems. It also offers a lower cost per transaction, and it’s more eco-friendly than most alternatives out there. Plus, it’s a friendly community. That’s why it’s popular among NFT creators and investors.&lt;/p&gt;

&lt;p&gt;Below, you can find the top 30 Solana NFT projects of all time, sorted by volume. Clicking on any of them redirects you to Moonly, where you can find more information about them. Nonetheless, note that what you currently see is just a prototype. A fully rebuilt version is coming soon, with more data for each project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/boryoku-dragonz-2"&gt;Boryoku Dragonz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/solana-monkey-business"&gt;Solana Monkey Business&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/shadowy-super-coder-dao-2"&gt;Shadowy Super Coder DAO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/degen-coin-flip-2"&gt;Degen Coin Flip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/degen-ape-academy"&gt;Degen Ape Academy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/thugbirdz"&gt;Thugbirdz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/mindfolk"&gt;Mindfolk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/monkey-kingdom-2"&gt;Monkey Kingdom&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/taiyo-robotics"&gt;Taiyo Robotics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/portals-2"&gt;Portals&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/stoned-ape-crew-2"&gt;Stoned Ape Crew&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/aurory"&gt;Aurory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/solsocks"&gt;SolSocks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/solsteinft"&gt;SolStein&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/og-flowers"&gt;OG Flowers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/zillaz"&gt;Zillaz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/baby-ape-social-club"&gt;Baby Ape Social Club&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/the-catalina-whale-mixer"&gt;The Catalina Whale Mixer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/turtles"&gt;Turtles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/nyan-heroes"&gt;Nyan Heroes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/playground-waves"&gt;Playground Waves&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/zero-g-labs-solanauts"&gt;Zero G Labs: Solanauts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/fine-fillies"&gt;Fine Fillies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/ggsg-galactic-geckos"&gt;Galactic Geckos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/solsteads-surreal-estate"&gt;Solsteads Surreal Estate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/pesky-penguins"&gt;Pesky Penguins&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/solpunks"&gt;Solpunks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/famous-fox-federation"&gt;Famous Fox Federation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/solana-monkette-business"&gt;Solana Monkette Business&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, I’d like to know, are you into the NFT games? If yes, what’s your chosen chain? Solana or Ethereum? And what NFT project are you holding? More importantly, I’d appreciate your honest feedback on the Moonly project itself.&lt;/p&gt;

&lt;p&gt;Peace.&lt;/p&gt;

</description>
      <category>nft</category>
      <category>solana</category>
      <category>crypto</category>
    </item>
    <item>
      <title>Hey! Did you know Dev.to has an API??</title>
      <author>Manu</author>
      <pubDate>Fri, 14 Jan 2022 16:22:09 +0000</pubDate>
      <link>https://dev.to/manuthecoder/hey-did-you-know-devto-has-an-api-3api</link>
      <guid>https://dev.to/manuthecoder/hey-did-you-know-devto-has-an-api-3api</guid>
      <description>&lt;p&gt;Have you ever wanted to embed a "Recent Posts" in your website? DEV.to has an API for this.&lt;/p&gt;

&lt;p&gt;Check out this example: &lt;a href="https://manuthecoder.ml"&gt;https://manuthecoder.ml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just make a simple HTTP request to this URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://dev.to/api/articles?username=____YOUR_USERNAME_HERE____&amp;amp;per_page=5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example JS usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://dev.to/api/articles?username=manuthecoder&amp;amp;per_page=10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;b&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/b&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;screw IE. nobody uses it lol&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Gitlab CI/CD + NodeJs + pm2</title>
      <author>Suman Sarkar</author>
      <pubDate>Fri, 14 Jan 2022 16:16:59 +0000</pubDate>
      <link>https://dev.to/sumansarkar/gitlab-cicd-nodejs-pm2-4llh</link>
      <guid>https://dev.to/sumansarkar/gitlab-cicd-nodejs-pm2-4llh</guid>
      <description>&lt;p&gt;✋ Hi this is Suman Sarkar, a web-dev from Kolkata with 5 years of experience in programming and little to none experience with CI/CD. Today I'll talk about how to setup Gitlab CI/CD with self hosted runners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pointright-things-we-will-cover-in-this-article"&gt;
  &lt;/a&gt;
  👉 Things we will cover in this article
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;😕 What is CI/CD?&lt;/li&gt;
&lt;li&gt;👍 Setup a minimal expressjs API with pm2&lt;/li&gt;
&lt;li&gt;🧑‍💻 Setup our first ever Gitlab pipeline to install &amp;amp; restart our server whenever an update is pushed on the “dev” branch&lt;/li&gt;
&lt;li&gt;🏃 Install self-hosted runners on a linux server&lt;/li&gt;
&lt;li&gt;🔒 Register our local runner to Gitlab&lt;/li&gt;
&lt;li&gt;🔑 Add environment variables to Gitlab&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#confused-what-is-cicd"&gt;
  &lt;/a&gt;
  😕 What is CI/CD?
&lt;/h2&gt;

&lt;p&gt;From my perspective CI/CD or Continuous Integration &amp;amp; Continuous Deployment are processes that you set up for your own convenience so that you don't have to do boring things manually over and over, it is basically automating your workflow when you push an update to your project. Most of us do git pull and then sort of restart the server in order to make the changes into effect, there might be additional steps like building or testing and few other procedures that are specific to your project. I’ll not cover these today, today I’ll only cover how to setup CI/CD for an expressjs application with pm2, Gitlab pipeline and self-hosted runners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thumbsup-setup-a-minimal-expressjs-api-with-pm2"&gt;
  &lt;/a&gt;
  👍 Setup a minimal expressjs API with pm2
&lt;/h2&gt;

&lt;p&gt;We start with creating a directory for our Node JS Express API&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;node-cicd-pm2
&lt;span class="nb"&gt;cd &lt;/span&gt;node-cicd-pm2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we initialise our project with &lt;code&gt;npm init -y&lt;/code&gt;. This creates a &lt;strong&gt;package.json&lt;/strong&gt; file in our project folder with basic information for our project.&lt;br&gt;
Next we add our dependencies by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i –save express dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets create our very minimal server by creating our &lt;code&gt;index.js&lt;/code&gt; and pasting the below mentioned code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running on port http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have required our dependencies express and dotenv then we have added a route that returns 'Hello World!'. We have also added a &lt;code&gt;.env&lt;/code&gt; file with only 1 variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PORT="3001"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;code&gt;ecosystem.config.js&lt;/code&gt; file with the following content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
    apps: [{
        name: "node-cicd-pm2",
        script: "./index.js"
    }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will be used later to start our server as a process.&lt;/p&gt;

&lt;p&gt;Now, we start our server by running &lt;code&gt;node index.js&lt;/code&gt; and visit &lt;a href="http://localhost:3001/"&gt;http://localhost:3001/&lt;/a&gt;. It works on my machine! 😈&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IpmAOAM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/544hed6gwezrqpsrjv5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IpmAOAM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/544hed6gwezrqpsrjv5i.png" alt="Gitlab CI/CD + NodeJs + pm2" width="496" height="208"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#runner-setup-our-first-ever-gitlab-pipeline"&gt;
  &lt;/a&gt;
  🏃 Setup our first ever Gitlab pipeline
&lt;/h2&gt;

&lt;p&gt;We start with creating a file specifically named &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;. This is an YML file, if you don't like YML, bad news for you, but you can just copy paste and get things done. &lt;br&gt;
Now, paste the following code. I'll explain this in detail.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;build_stage&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;deploy_stage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets talk about stages, stage are the necessary steps that you can group and describe. We have 2 stages build_stage and deploy_stage. Though we are not building anything here but I like to call it the build stage where we'll install the dependencies. We will cover the deploy stage later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;.base-rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$CI_COMMIT_BRANCH&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"dev"'&lt;/span&gt;
      &lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$CI_PIPELINE_SOURCE&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"push"'&lt;/span&gt;
      &lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;never&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$CI_COMMIT_TAG&lt;/span&gt;
      &lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rules are to describe exactly when your pipeline should run. Here we are specifying that we want to run our pipeline whenever something is pushed onto dev branch by specifying &lt;strong&gt;when&lt;/strong&gt; to &lt;strong&gt;always&lt;/strong&gt;.&lt;br&gt;
&lt;strong&gt;$CI_PIPELINE_SOURCE&lt;/strong&gt; is a special(pre-defined) env. variable provided by Gitlab. It describes the mode our change. These can be the following values push, web, schedule, api, external, chat, webide, merge_request_event, external_pull_request_event, parent_pipeline, trigger, or pipeline. For the same of this article I'll not cover all of them, I am not familiar with most of them anyway.&lt;br&gt;
You can read more about the variables &lt;a href="https://docs.gitlab.com/ee/ci/variables/predefined_variables.html"&gt;here on Gitlab&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next up we have caches. The way every stage works is, it cleans or deletes everything a it has produce during its lifetime. In the build stage we will create a &lt;strong&gt;node_modules&lt;/strong&gt; folder which will contain our project's dependencies. When the &lt;strong&gt;build_stage&lt;/strong&gt; is finished we don't want it to be deleted. We want it to passed to the &lt;strong&gt;deploy_stage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;global_cache&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$CI_COMMIT_REF_SLUG&lt;/span&gt;
  &lt;span class="na"&gt;policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pull-push&lt;/span&gt;
  &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;node_modules/&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;package-lock.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have created a global cache policy here. The policy is pull-push meaning that the stages using this cache policy can pull from global cache and can push to it as well. In order to create new caches with every update, we must provide a slug or an unique identifier. Here we are using &lt;strong&gt;$CI_COMMIT_REF_SLUG&lt;/strong&gt; variable for that. Notice how we are specifying that we only want to cache &lt;code&gt;node_modules&lt;/code&gt; directory and &lt;code&gt;package-lock.json&lt;/code&gt; since these are the outputs that are generate with &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's now define our &lt;strong&gt;build_stage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build_stage&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.base-rules&lt;/span&gt;
  &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;npm i&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*global_cache&lt;/span&gt;
    &lt;span class="na"&gt;policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;push&lt;/span&gt;
  &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;local_runner&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The build_stage extends the base_rule so that it will run only when something is pushed on the &lt;code&gt;dev&lt;/code&gt; branch.&lt;br&gt;
In this stage we don't want to pull anything from the global-cache, we just want to push the &lt;code&gt;node_modules&lt;/code&gt; directory and &lt;code&gt;package-lock.json&lt;/code&gt; file in the global-cache. We will cover &lt;strong&gt;tags&lt;/strong&gt; later int this article.&lt;/p&gt;

&lt;p&gt;Later we have the &lt;strong&gt;deploy_stage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deploy_stage&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.base-rules&lt;/span&gt;
  &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;pm2&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;start&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ecosystem.config.js"&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*global_cache&lt;/span&gt;
    &lt;span class="na"&gt;policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pull&lt;/span&gt;
  &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;local_runner&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this stage we are pulling the cache from global-cache and then starting our server with &lt;code&gt;pm2 start&lt;/code&gt; command. By pulling the cache we get our &lt;code&gt;node_modules&lt;/code&gt; directory with our project dependencies.&lt;/p&gt;

&lt;p&gt;If you have followed correctly, you should end up with a file with these content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;build_stage&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;deploy_stage&lt;/span&gt;

&lt;span class="na"&gt;.base-rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$CI_COMMIT_BRANCH&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"dev"'&lt;/span&gt;
      &lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$CI_PIPELINE_SOURCE&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"push"'&lt;/span&gt;
      &lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;never&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$CI_COMMIT_TAG&lt;/span&gt;
      &lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;never&lt;/span&gt;

&lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;global_cache&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$CI_COMMIT_REF_SLUG&lt;/span&gt;
  &lt;span class="na"&gt;policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pull-push&lt;/span&gt;
  &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;node_modules/&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;package-lock.json&lt;/span&gt;

&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build_stage&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.base-rules&lt;/span&gt;
  &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;node&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;--version"&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;npm i&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*global_cache&lt;/span&gt;
    &lt;span class="na"&gt;policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;push&lt;/span&gt;
  &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;local_runner&lt;/span&gt;

&lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deploy_stage&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.base-rules&lt;/span&gt;
  &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;pm2&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;start&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ecosystem.config.js"&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*global_cache&lt;/span&gt;
    &lt;span class="na"&gt;policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pull&lt;/span&gt;
  &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;local_runner&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#computer-install-selfhosted-runners-on-a-linux-server"&gt;
  &lt;/a&gt;
  💻 Install self-hosted runners on a linux server
&lt;/h2&gt;

&lt;p&gt;A little bit of background on runners, runners are like workers who does something that a computer should do. Like executing any commands or installing your project dependencies. Behind the scene they are docker containers provided by Gitlab. By default Gitlab uses a Ruby container but you can specify your container type. In this article though we will not use Gitlab's runners, we will install our own runner which is an open-source application made by Gitlab and maintained by the dev community. Self hosted runners are completely free so you don't have to worry about money 🤑.&lt;/p&gt;

&lt;p&gt;Installing the runner on your server is easy, you just have to run few commands. Visit this &lt;a href="https://docs.gitlab.com/runner/install/"&gt;page&lt;/a&gt; for instruction related to your OS environment. I'm running Ubuntu 20.10 so I'll follow with GNU/Linux Binary guide.. If you are using any debian machine then follow me.. Fire up your terminal and run the following commands..&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;curl &lt;span class="nt"&gt;-L&lt;/span&gt; &lt;span class="nt"&gt;--output&lt;/span&gt; /usr/local/bin/gitlab-runner &lt;span class="s2"&gt;"https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64"&lt;/span&gt;
&lt;span class="nb"&gt;sudo chmod&lt;/span&gt; +x /usr/local/bin/gitlab-runner
&lt;span class="nb"&gt;sudo &lt;/span&gt;useradd &lt;span class="nt"&gt;--comment&lt;/span&gt; &lt;span class="s1"&gt;'GitLab Runner'&lt;/span&gt; &lt;span class="nt"&gt;--create-home&lt;/span&gt; gitlab-runner &lt;span class="nt"&gt;--shell&lt;/span&gt; /bin/bash
&lt;span class="nb"&gt;sudo &lt;/span&gt;gitlab-runner &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;gitlab-runner &lt;span class="nt"&gt;--working-directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/gitlab-runner
&lt;span class="nb"&gt;sudo &lt;/span&gt;gitlab-runner start
&lt;span class="nb"&gt;sudo &lt;/span&gt;gitlab-runner status

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step we get the binary, give it executable permissions, create a user called &lt;strong&gt;gitlab-runner&lt;/strong&gt; to run the runners process and then start our gitlab-runner service. The gitlab-runner user is created for security purpose so that it doesn't run as root user. It is generally advised by people who are smarter than me and have was more knowledge about operating systems 😅.&lt;br&gt;
Now, after the last command you should see something like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ALFS_H_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47x27khsncbgu1cjqb3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ALFS_H_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47x27khsncbgu1cjqb3v.png" alt="Gitlab CI/CD + NodeJs + pm2 - Gitlab runner service is running" width="880" height="68"&gt;&lt;/a&gt; Again, it worked on my machine so I'm good! 😅. We are not done with this step though.. We have to login as the &lt;strong&gt;gitlab-runner&lt;/strong&gt; user and install node,  npm and pm2. I could not find any reference to what is the default password of gitlab-runner user so I will just reset it using the passwd command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;passwd gitlab-runner
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setup your new password and login as the gitlab-runner user by running &lt;code&gt;su gitlab-runner&lt;/code&gt;&lt;br&gt;
For install node I'm using &lt;strong&gt;nvm&lt;/strong&gt;. Just follow the same process mentioned below and you should have everything you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
&lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this should install nvm in you machine.&lt;br&gt;
Next, we install node and pm2 globally,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nvm install 16.13.2
npm i -g pm2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lock-register-our-local-runner-to-gitlab"&gt;
  &lt;/a&gt;
  🔒 Register our local runner to Gitlab
&lt;/h2&gt;

&lt;p&gt;We are almost done with our setup..&lt;br&gt;
Now, we need to register our runner to Gitlab, to do this go to Setting &amp;gt; CI/CD in your repository and expand the "Runners" section.&lt;br&gt;
At the left side you should see "Specific runners" section.&lt;br&gt;
The token should look something like this "fy7f3BqhVzLq3Mr-xxxx"&lt;br&gt;
In your local machine or wherever you have installed you runner just run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo gitlab-runner register
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should prompt you to specify an instance URL. Type &lt;code&gt;https://gitlab.com&lt;/code&gt; and press enter.&lt;br&gt;
Then paste the registration token that you found on Gitlab and press enter, next provide a description for your runner&lt;br&gt;
the most important step, providing a tag for your runner or tags. In the &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file I had mention the tags as &lt;strong&gt;local_runner&lt;/strong&gt; so I will put that here. You can add multiple tags separated by comma but that's not mandatory. Tags will identify the runners to do their job. At last choose &lt;strong&gt;shell&lt;/strong&gt; as the executor. The End? Not yet! :'(&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-add-environment-variables-to-gitlab"&gt;
  &lt;/a&gt;
  🔑 Add environment variables to Gitlab
&lt;/h2&gt;

&lt;p&gt;Now we need to add env variable to Gitlab CI/CD section so that the we can provide a &lt;strong&gt;PORT&lt;/strong&gt; to our application. This is important because .env file is not commited to your version control. We add our env variable PORT under Setting &amp;gt; CI/CD &amp;gt; Variables section and we add the variable as protected. Next, super important - we need to make our dev branch as protected branch. Otherwise it won't fine the variables. You can do this from Settings &amp;gt; Repository &amp;gt; Protected branches section in your repo.&lt;/p&gt;

&lt;p&gt;✅ That is it, we are done with our pipeline setup. If everything is done correctly, when you commit a change on your dev branch it should trigger a pipeline with 2 job and you runner should start the pm2 process at 3001 port.&lt;/p&gt;

&lt;p&gt;Thanks for reading this article 🧑‍💻 If you face any problems, let me know in the comments down below! 🙂 &lt;br&gt;
Happy hacking!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f8kTRdaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/643zyaj7h6i1cyx1mcrq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f8kTRdaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/643zyaj7h6i1cyx1mcrq.gif" alt="Happy hacking" width="220" height="124"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Deploying a Dapp to Mainnet</title>
      <author>Rounak Banik</author>
      <pubDate>Fri, 14 Jan 2022 16:16:48 +0000</pubDate>
      <link>https://dev.to/rounakbanik/deploying-a-dapp-to-mainnet-3cob</link>
      <guid>https://dev.to/rounakbanik/deploying-a-dapp-to-mainnet-3cob</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FVCI_wXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ry5q0kaegljb70hs745.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FVCI_wXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ry5q0kaegljb70hs745.png" alt="Banner Image" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;2021 saw a major boom in web3 education and developer content. There a plethora of excellent tutorials available online that teach you everything you need to get started in web3, from building simple &lt;a href="https://docs.alchemy.com/tutorials/hello-world-smart-contract"&gt;Hello World contracts&lt;/a&gt; to creating full-fledged &lt;a href="https://medium.com/@austin_48503/%EF%B8%8F-minimum-viable-exchange-d84f30bd0c90"&gt;decentralized exchanges&lt;/a&gt; and &lt;a href="https://dev.to/dabit3/building-scalable-full-stack-apps-on-ethereum-with-polygon-2cfb"&gt;NFT marketplaces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, almost every tutorial (including the ones published by us) show you how to launch apps on testnets with fake money. There is extremely little coverage on how to launch on a mainnet, and the considerations and challenges involved with the process.&lt;/p&gt;

&lt;p&gt;This article, therefore, is on one of the most-requested topics on our &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;Discord&lt;/a&gt;: how to develop and deploy a smart contract in the real world with real money.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h3&gt;

&lt;p&gt;We make the assumption that you are already familiar with developing smart contracts on EVM-compatible chains using tools like Solidity, Ethers, and Hardhat. If some of these terms sound alien to you, we strongly suggest going through &lt;a href="https://medium.com/scrappy-squirrels/tutorial-writing-an-nft-collectible-smart-contract-9c7e235e96da"&gt;this article&lt;/a&gt; first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-developing-contract-on-testnet"&gt;
  &lt;/a&gt;
  Step 1: Developing Contract on Testnet
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nxqtxTvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h96fbsrplnxf01eaxyno.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nxqtxTvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h96fbsrplnxf01eaxyno.png" alt="Mumbai" width="300" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first step remains the same as with every other tutorial. You develop and test your contract on a testnet of the blockchain (or sidechain) that you wish to launch on. For example, you would use Rinkeby or Ropsten if your network of choice was Ethereum and Mumbai if you preferred Polygon.&lt;/p&gt;

&lt;p&gt;Most testnets do a very good job of mimicking their corresponding mainnet and also provide free fake tokens to work with through faucets.&lt;/p&gt;

&lt;p&gt;You can reasonably expect your contract’s behaviour on a testnet to be almost identical to that on the mainnet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-auditing-and-optimizing-contract"&gt;
  &lt;/a&gt;
  Step 2: Auditing and Optimizing Contract
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B7PhA0Tt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er6vhaovsgerzc9x8oqz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B7PhA0Tt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er6vhaovsgerzc9x8oqz.png" alt="Solidity Finance" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deploying a contract on a testnet costs the same amount of gas as deploying to a mainnet (note that I’m referring to gas units and not gas price).&lt;/p&gt;

&lt;p&gt;Checking how much gas contract deployment consumes should give you a good early indication of how expensive deployment is going to be. In some cases, it may be possible to significantly reduce gas consumption (for example, using an ERC-1155 implementation in place of ERC-721 for an NFT dapp).&lt;/p&gt;

&lt;p&gt;Do take the time out to evaluate your choices and ensure that reduction of gas consumption does not come at the expense of security.&lt;/p&gt;

&lt;p&gt;Once you’re satisfied with the final version of the contract, you should get it audited.&lt;/p&gt;

&lt;p&gt;There are excellent services like &lt;a href="https://solidity.finance/"&gt;solidity.finance&lt;/a&gt; that will audit your contract for a fee. Do note that the fee may be steep for a lot of projects. But if your dapp is going to be handling assets of other people worth millions of dollars, then I believe that an audit is mandatory and definitely worth the price.&lt;/p&gt;

&lt;p&gt;On the other hand, if your project is of a significantly smaller scale (for example, a generative NFT project), then a professional audit may be overkill. In such cases, just ensure that the contract has been tested and walked through by at least two smart contract developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-estimating-cost-of-deployment"&gt;
  &lt;/a&gt;
  Step 3: Estimating Cost of Deployment
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c3gqoISz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvoq9r3sa6npf8m8064d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c3gqoISz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvoq9r3sa6npf8m8064d.png" alt="Gas" width="299" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you’re satisfied with the way your dapp behaves and are convinced that there are no glaring security loopholes, you can proceed to computing the total cost of deployment.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, the amount of gas consumed across testnets and the mainnet is the same. To arrive at an estimate of deployment cost on a mainnet, all you need to do is multiply gas consumed with the gas price.&lt;/p&gt;

&lt;p&gt;Typically, deployments on Ethereum cost thousands of dollars whereas deployment to sidechains like Polygon and Binance can be done in under five dollars.&lt;/p&gt;

&lt;p&gt;We have a detailed tutorial on how to estimate costs and consider your chain options &lt;a href="https://medium.com/scrappy-squirrels/estimating-smart-contract-costs-f65acf818c26?source=collection_home---6------6-----------------------"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-acquiring-tokens"&gt;
  &lt;/a&gt;
  Step 4: Acquiring tokens
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jCBsJsaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3k840dqny4njvg7x98a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jCBsJsaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3k840dqny4njvg7x98a.png" alt="Moonpay" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This step may seem way too obvious to warrant an entire section but we have seen a few of our community members trip up in this step, especially when working with sidechains.&lt;/p&gt;

&lt;p&gt;Remember that you need to acquire a particular token in the chain that you’re working with. This means you need ETH on the Ethereum Mainnet, MATIC on the Polygon network, and BNB on the Binance Smart Chain.&lt;/p&gt;

&lt;p&gt;The easiest way to acquire these tokens on their respective chains is by using a ramp service like &lt;a href="https://www.moonpay.com/"&gt;Moonpay&lt;/a&gt; that allows you to purchase crypto using just a credit card.&lt;/p&gt;

&lt;p&gt;However, these services don’t work in all countries (India, for example). In such cases, you will unfortunately have to deal with steps like buying on centralized exchanges, KYCs, and withdrawal to Metamask.&lt;/p&gt;

&lt;p&gt;During withdrawal, make sure that your tokens are being transferred to the correct network. By default, most exchanges will send your MATIC and BNB to the Ethereum network. &lt;strong&gt;They are useless there and bridging them to the correct network is complicated and expensive&lt;/strong&gt;. Make sure you only use exchanges that have a direct ramp to the network you want to use.&lt;/p&gt;

&lt;p&gt;We will be releasing an article on the options you have while purchasing MATIC, BNB, FTM, and other sidechain cryptocurrencies soon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-configuring-hardhat-and-alchemy"&gt;
  &lt;/a&gt;
  Step 5: Configuring Hardhat and Alchemy
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-vjeXt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx1zd3kv7z38brvhsuft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-vjeXt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx1zd3kv7z38brvhsuft.png" alt="Hardhat" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is now time for deployment!&lt;/p&gt;

&lt;p&gt;In order to deploy to a particular chain, we will need an RPC URL. We’ve already discussed how to acquire this using &lt;a href="https://alchemy.com/?a=d7d81950c0"&gt;Alchemy&lt;/a&gt; for the &lt;a href="https://medium.com/scrappy-squirrels/tutorial-writing-an-nft-collectible-smart-contract-9c7e235e96da"&gt;Rinkeby&lt;/a&gt; and &lt;a href="https://medium.com/scrappy-squirrels/tutorial-developing-for-polygon-and-sidechains-66bef9ec80ef"&gt;Polygon Mumbai&lt;/a&gt; testnets.&lt;/p&gt;

&lt;p&gt;For the corresponding mainnets, the process is identical: create an Alchemy app, set the network to the chain of your choice, and copy the HTTP RPC URL. Below is an app created for the Ethereum mainnet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FnfEXp6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkajlaa2xqzup34nor1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FnfEXp6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkajlaa2xqzup34nor1n.png" alt="Alchemy App" width="800" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do note that Alchemy, at the time of writing, does not provide RPC URLs for every chain that you could potentially want to work with.&lt;/p&gt;

&lt;p&gt;For chains not supported by Alchemy (for example, Fantom Opera), you can use the public RPC URLs available. For instance, &lt;a href="https://rpc.ftm.tools/"&gt;https://rpc.ftm.tools/&lt;/a&gt; for Fantom.&lt;/p&gt;

&lt;p&gt;We now have everything to configure &lt;code&gt;hardhat.config.js&lt;/code&gt;. Add the mainnet network of your choice to &lt;code&gt;module.exports&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {  
    solidity: "0.8.4",  
    networks: {    
        rinkeby: {      
            url: RINKEBY_RPC_URL,      
            accounts: [`0x${PRIVATE_KEY}`],   
        },
        mainnet: {      
            url: ETHEREUM_RPC_URL,      
            accounts: [`0x${PRIVATE_KEY}`],   
        },
        polygon: {      
            url: POLYGON_RPC_URL,      
            accounts: [`0x${PRIVATE_KEY}`],   
        },          
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As is good practice, we have defined our RPC URLs and our wallet’s private key in a &lt;code&gt;.env&lt;/code&gt; file that will not be committed to our git repository.&lt;/p&gt;

&lt;p&gt;Now, running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat run scripts/deploy.js --network mainnet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will deploy your contract to the Ethereum mainnet. Similarly, running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat run scripts/deploy.js --network polygon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will deploy your contract to the Polygon mainnet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-gas-price"&gt;
  &lt;/a&gt;
  Setting Gas Price
&lt;/h3&gt;

&lt;p&gt;Do note that if you deploy your contract using our &lt;code&gt;deploy.js&lt;/code&gt; script from the previous tutorials, ethers will automatically set a gas price and deploy using that price.&lt;/p&gt;

&lt;p&gt;In testnets and sidechains like Polygon and Binance, this may not really be an issue. However, lower gas fees could result in savings worth thousands of dollars on Ethereum. Which is why it is prudent to set a gas price yourself.&lt;/p&gt;

&lt;p&gt;This is very easy to with ethers. In &lt;code&gt;deploy.js&lt;/code&gt;, add an argument to the &lt;code&gt;deploy()&lt;/code&gt; method to set a gas price as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const factory = await hre.ethers.getContractFactory('MyContract');    
const contract = await factory.deploy(arg1, 
                                      arg2, 
                                      {gasPrice:50000000000});    
await contract.deployed();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can probably deduce, we have deployed this contract by setting a gas fee of 50 Gwei.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-deploying-using-metamask-amp-remix"&gt;
  &lt;/a&gt;
  (Optional) Deploying using Metamask &amp;amp; Remix
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yNqqz_hY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gi2ihgpzlfb1k1zn3880.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yNqqz_hY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gi2ihgpzlfb1k1zn3880.png" alt="Remix" width="880" height="264"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you deploy using hardhat, it automatically drains your wallet of the funds that it needs to perform the request. In other words, there is no confirmation step in between. You issue a command to run the deployment script and boom! your funds are gone and your contract is deployed.&lt;/p&gt;

&lt;p&gt;If this is somewhat anxiety-inducing to you, you can consider using &lt;a href="https://remix.ethereum.org/"&gt;Remix&lt;/a&gt; as a viable alternative. Remix is world class IDE for developing and deploying contracts on Ethereum and EVM-based chains.&lt;/p&gt;

&lt;p&gt;Remix allows you to deploy your contracts using Metamask. By doing so, it places an important confirmation step in between where you can evaluate and approve the total amount you’re spending, and modify gas fees using Metamask’s interface.&lt;/p&gt;

&lt;p&gt;You also have the option of getting popup notifications from Metamask as and when your transaction is complete.&lt;/p&gt;

&lt;p&gt;We will be doing a tutorial on Remix very soon. There are plenty of great tutorials online that use Remix by default though so you shouldn’t find it too hard to learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We hope this article has given you a good idea on the things you need to consider before you take the big step of launching your dapp to a mainnet and have real people use real money on it.&lt;/p&gt;

&lt;p&gt;If you have any questions, please feel free to drop them on the &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;#suggestions-and-qna channel&lt;/a&gt; of our Discord.&lt;/p&gt;

&lt;p&gt;If you don’t have questions, come say hi to us on our &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;Discord&lt;/a&gt; anyway! Also, if you liked our content, we would be super grateful if you tweet about us, follow us(@ScrappyNFTs and @Rounak_Banik), and invite your circle to our Discord. Thank you for your support!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-scrappy-squirrels"&gt;
  &lt;/a&gt;
  &lt;em&gt;About Scrappy Squirrels&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Scrappy Squirrels is a collection of 10,000+ randomly generated NFTs. Scrappy Squirrels are meant for buyers, creators, and developers who are completely new to the NFT ecosystem.&lt;/p&gt;

&lt;p&gt;The community is built around learning about the NFT revolution, exploring its current use cases, discovering new applications, and finding members to collaborate on exciting projects with.&lt;/p&gt;

&lt;p&gt;Join our community here: &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;https://discord.gg/8UqJXTX7Kd&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Powerful VS Code Setup: Amateur to Pro</title>
      <author>Deeshan Sharma</author>
      <pubDate>Fri, 14 Jan 2022 16:10:50 +0000</pubDate>
      <link>https://dev.to/deeshansharma/powerful-vs-code-setup-amateur-to-pro-4in3</link>
      <guid>https://dev.to/deeshansharma/powerful-vs-code-setup-amateur-to-pro-4in3</guid>
      <description>&lt;p&gt;&lt;em&gt;Believe it or not, VS Code or Visual Studio Code &lt;strong&gt;"Built by Microsoft"&lt;/strong&gt; is the most popular and most used code editor among developers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So in support of this, if you are a newbie or experienced developer, I am here to show you how you can boost your vs code game and experience a whole new level and get the most out of your code editor.&lt;/p&gt;

&lt;p&gt;Topics Covered:~&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Extensions to get the most out of your editor&lt;/li&gt;
&lt;li&gt;Secret settings to improve the experience&lt;/li&gt;
&lt;li&gt;Editor's makeover&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#how-to-install-vs-code"&gt;
  &lt;/a&gt;
  How to install VS Code..?
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;If you already have it, you could just scroll to the next section.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Visit the &lt;a href="https://code.visualstudio.com/download"&gt;Official Download Page&lt;/a&gt; and download according to your OS and install it.&lt;/p&gt;

&lt;p&gt;There are more ways to install it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chocolatey &lt;em&gt;(my preference)&lt;/em&gt; will cover this in another blog&lt;/li&gt;
&lt;li&gt;Source code&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#extensions-to-get-the-most-out-of-your-editor"&gt;
  &lt;/a&gt;
  Extensions to get the most out of your editor
&lt;/h3&gt;

&lt;p&gt;The coolest thing about vs code is there is a huge community using it, hence you never feel left out, there are tons of extensions made by these awesome people which makes this the most useful feature of vs code.&lt;/p&gt;

&lt;p&gt;I have listed some of the useful and cool extensions for you to save time.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#general"&gt;
  &lt;/a&gt;
  General
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt;: A code formatter for rescue, use common styling among all the files and projects&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;Eslint&lt;/a&gt;: It is &lt;a href="https://en.wikipedia.org/wiki/Lint_(software)"&gt;code linter&lt;/a&gt; for JS &amp;amp; TS that will catch bugs even before you run the code&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode"&gt;Tabnine&lt;/a&gt;: This is super awesome, this is the AI code completion assistant to amplify coding accuracy and boost productivity. This gives super-accurate suggestions&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker"&gt;Code Spell Checker&lt;/a&gt;: This will save you from committing misspelled words and feeling ashamed later&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;GitLens&lt;/a&gt;: Helps you in multi-author projects by showing author blame on each line, see file history, and much more&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Live Share&lt;/a&gt;: Enables real-time collaboration similar to Google Docs, multiple individuals could work on the same file, it enables to share the localhost, port, and even the terminal sessions most useful in pair programming&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense"&gt;Path Intellisense&lt;/a&gt;: This will help in autocompleting the filename and file path&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=albert.TabOut"&gt;TabOut&lt;/a&gt;: Get out of the quotes, brackets, etc just using &lt;code&gt;Tab&lt;/code&gt; and without the use of arrow keys&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;Better Comments&lt;/a&gt;: This helps in creating more user-friendly comments with different highlighting for different types of comment&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime"&gt;WakaTime&lt;/a&gt;: It is responsible for metrics, insights, and time tracking automatically generated from your programming activity&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#web-development"&gt;
  &lt;/a&gt;
  Web Development
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Auto Rename Tag&lt;/a&gt;: Renames the closing tag when you edit the opening tag or vice versa&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Live Server&lt;/a&gt;: Launch a local development server with a live reload feature for static &amp;amp; dynamic pages&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=mkaufman.HTMLHint"&gt;HTML Lint&lt;/a&gt;: Linter for HTML&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint"&gt;Style Lint&lt;/a&gt;: Linter for CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#secret-settings-to-improve-the-experience"&gt;
  &lt;/a&gt;
  Secret settings to improve the experience
&lt;/h3&gt;

&lt;p&gt;Certain settings are turned off by default but are worth turning on and make life a lot easier. Open your vs code,&lt;/p&gt;

&lt;p&gt;There are two ways to change the settings in vs code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON Way &lt;em&gt;(the preferred and easy way)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;GUI Way&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-json-way"&gt;
  &lt;/a&gt;
  The JSON way
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;a href="https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette"&gt;VS Code Command Pallet&lt;/a&gt; using the keyboard shortcut &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; on Windows or &lt;code&gt;Cmd+Shift+P&lt;/code&gt; on Mac or hit &lt;code&gt;F1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Type &lt;em&gt;settings JSON&lt;/em&gt; in command pallet&lt;/li&gt;
&lt;li&gt;Open  &lt;em&gt;'Preferences: Open Settings (JSON)'&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Now copy the following lines to your &lt;code&gt;settings.json&lt;/code&gt; file
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"files.autoSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"afterDelay"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"files.trimTrailingWhitespace"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"editor.wordWrap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"on"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.wordWrapColumn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnPaste"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.quickSuggestions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.inlineSuggest.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.codeActionsOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"source.fixAll"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"source.organizeImports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.wordWrap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"on"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"esbenp.prettier-vscode"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Extensions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;settings&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"git.autofetch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"git.allowForcePush"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"git.autorefresh"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"git.autoRepositoryDetection"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"javascript.updateImportsOnFileMove.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"typescript.updateImportsOnFileMove.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"tabnine.experimentalAutoImports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"prettier.singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"prettier.endOfLine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"crlf"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"prettier.jsxBracketSameLine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"prettier.printWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"eslint.validate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"javascript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"typescriptreact"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"javascriptreact"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"better-comments.highlightPlainText"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#gui-way"&gt;
  &lt;/a&gt;
  GUI Way
&lt;/h4&gt;

&lt;p&gt;First of all, open the settings page&lt;br&gt;
hit &lt;code&gt;Ctrl+,&lt;/code&gt; on windows or &lt;code&gt;Cmd+,&lt;/code&gt; on mac to open the settings page or go to &lt;em&gt;File&amp;gt;Prefrences&amp;gt;Settings&lt;/em&gt;&lt;br&gt;
Now suppose for eg, you want to turn on the word wrap the entry in &lt;code&gt;settings.json&lt;/code&gt; is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"editor.wordWrap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"on"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so in the search bar enter &lt;code&gt;editor.wordWrap&lt;/code&gt; and change the setting accordingly. This is the reason I prefer JSON way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editors-makeover"&gt;
  &lt;/a&gt;
  Editor's Makeover
&lt;/h3&gt;

&lt;p&gt;It's time to change the editor's look and feel, I will walk you through some steps and you will love the way your editor looks&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#theme"&gt;
  &lt;/a&gt;
  Theme
&lt;/h4&gt;

&lt;p&gt;Let's start by changing the theme of your editor. There are numerous themes available in the marketplace. I have listed some of my favorites.&lt;/p&gt;

&lt;p&gt;To change your theme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install the one you like&lt;/li&gt;
&lt;li&gt;Now to select it hit &lt;code&gt;Ctrl+K+T&lt;/code&gt; on windows and &lt;code&gt;Cmd+K+T&lt;/code&gt; on mac and select your theme or &lt;em&gt;click on the gear icon on the bottom left&amp;gt;Color Theme&amp;gt;Select the theme&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Themes&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=BeardedBear.beardedtheme"&gt;Bearded Theme&lt;/a&gt;: There are 25 variations of this theme I have listed two of my favorite

&lt;ul&gt;
&lt;li&gt;Black &amp;amp; Amethyst
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sE7J_fFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98jy91p7zeqgtsihcb31.png" alt="Bearded Theme Black &amp;amp; Amethyst Example" width="880" height="495"&gt;
&lt;/li&gt;
&lt;li&gt;Anthracite
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---16piJsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6ae1j3ugq5izvvwi1jh.png" alt="Bearded Theme Anthracite Example" width="880" height="495"&gt;
You can see all of the variations on &lt;a href="https://raw.githubusercontent.com/BeardedBear/bearded-theme/master/assets/themes.png"&gt;Official Bearded Theme Example&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2"&gt;Cobolt2&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9vZVPWwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/wesbos/cobalt2-vscode/cobalt2-updates/images/ss.png" alt="Official Cobolt2 Theme Example" width="880" height="626"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme"&gt;Github Dark Theme&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNDqX8l9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2t99ff36bu3x8ftcxba.png" alt="Github Dark Theme Example" width="880" height="495"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=enkia.tokyo-night"&gt;Tokyo Night&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ri3mveMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/enkia/tokyo-night-vscode-theme/master/static/ss_tokyo_night.png" alt="Official Tokyo Night Theme Example" width="880" height="613"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#icons"&gt;
  &lt;/a&gt;
  Icons
&lt;/h4&gt;

&lt;p&gt;There are two types of icons in vs code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File Icons: You see beside your files and folders, I prefer &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Material Icon Theme&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Product Icons: You see all around the vs code, I prefer &lt;a href="https://marketplace.visualstudio.com/items?itemName=miguelsolorio.fluent-icons"&gt;Fluent Icons&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dl19moV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3u47o1z3zxvznlrsaz0.png" alt="Material Icon Theme Example" width="880" height="495"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To change the icons theme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Click on the gear icon on the bottom left&amp;gt;File Icon Theme/Product Icon Theme&amp;gt;Select the theme&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also set the theme and icon theme from the &lt;code&gt;settings.json&lt;/code&gt; file just add these lines&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"workbench.colorTheme"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bearded Theme Black &amp;amp; Amethyst"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;theme&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"workbench.iconTheme"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"material-icon-theme"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"workbench.productIconTheme"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"fluent-icons"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"material-icon-theme.folders.color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#42a5f5"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"material-icon-theme.folders.theme"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"specific"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#font"&gt;
  &lt;/a&gt;
  Font
&lt;/h4&gt;

&lt;p&gt;When it comes to the font I love &lt;a href="https://fonts.google.com/specimen/Fira+Code"&gt;Fira Code&lt;/a&gt;, which also supports font legislature.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ywO8062d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tonsky/FiraCode/raw/master/extras/logo.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ywO8062d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tonsky/FiraCode/raw/master/extras/logo.svg" alt="Official Fira Code Font Legislature Example Image" width="880" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Noticed those symbols, these are called legislature, believe me, this adds a star when someone looks into your editor&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add these lines to your &lt;code&gt;settings.json&lt;/code&gt; for the font configuration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"editor.fontSize"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.lineHeight"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.letterSpacing"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.fontLigatures"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.fontFamily"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Fira Code, Operator Mono, Consolas, 'Courier New', monospace"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for the final touch-ups add these&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"editor.cursorBlinking"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"expand"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.cursorSmoothCaretAnimation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Bored..?&lt;/em&gt;&lt;/strong&gt; Well we have completed the setup and you are good to go. I hope you loved it.&lt;/p&gt;

&lt;p&gt;Have I missed something..? or do you have something to share, please let me know in the comments.&lt;/p&gt;

&lt;p&gt;A moment please, &lt;br&gt;I am trying to create an awesome &amp;amp; productive dev community that really needs someone like you. So if you are interested join it on &lt;a href="https://discord.gg/JMQ5Nwe"&gt;Discord&lt;/a&gt;, invite your friends and let's get to know each other in a better way.&lt;/p&gt;

&lt;p&gt;Till then keep hustling&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>design</category>
    </item>
    <item>
      <title>A Penny for Your Thoughts – Our Community Sponsorship Program is Live!</title>
      <author>Heitor Ramon Ribeiro</author>
      <pubDate>Fri, 14 Jan 2022 16:09:31 +0000</pubDate>
      <link>https://dev.to/vue-storefront/a-penny-for-your-thoughts-our-community-sponsorship-program-is-live-5cgc</link>
      <guid>https://dev.to/vue-storefront/a-penny-for-your-thoughts-our-community-sponsorship-program-is-live-5cgc</guid>
      <description>&lt;p&gt;The time has come to finally announce Vue Storefront Community Sponsorship Program. Yes, you heard it right, ops, read it right. We want to sponsor our most active community members and projects in this program.&lt;/p&gt;

&lt;p&gt;The idea behind this program is to embrace our community and valorize our top contributors in the Vue Storefront ecosystem. We want you to have the opportunity to be sponsored to do what you like and be able to produce much more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Also, this will help with all those questions you may get in your house about coding for free 🙂  Now, you contribute and get paid.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When this program was initially conceived, we wanted to make sure everyone in our community could be eligible one day. That's why we are not only sponsoring developers but also are sponsoring projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-want-to-apply-for-the-sponsorship-what-should-i-do"&gt;
  &lt;/a&gt;
  I want to apply for the sponsorship. What should I do?
&lt;/h2&gt;

&lt;p&gt;To apply for our sponsorship program, first, you must be involved in the Vue Storefront ecosystem. Having a project like an integration, extension, or module for Vue Storefront or being an active developer in our community or core project. Then you can fill up &lt;a href="https://forms.gle/K9QgyktrJBNQsKoM8"&gt;this form&lt;/a&gt; to start your application process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-it-possible-to-apply-from-a-project-outside-the-vue-storefront-ecosystem"&gt;
  &lt;/a&gt;
  Is it possible to apply from a project outside the Vue Storefront ecosystem?
&lt;/h2&gt;

&lt;p&gt;Unfortunately, we only accept applications from projects and developers that are a part of the Vue Storefront ecosystem. This does not mean that we will not sponsor developers and projects outside our ecosystem in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-the-sponsorship-cover-all-countries"&gt;
  &lt;/a&gt;
  Does the sponsorship cover all countries?
&lt;/h2&gt;

&lt;p&gt;We currently only sponsor developers and projects that belong to the GitHub sponsorship program or have an active Patreon sponsorship account.&lt;/p&gt;

&lt;p&gt;We know that this program will bring a lot of questions, like "How do I apply for the program?", "What are the pre-requisites?" and so on. To help you with all those questions, &lt;a href="https://docs.vuestorefront.io/v2/community/sponsorship-program.html"&gt;we prepared a document&lt;/a&gt; with some of them.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>sponsorship</category>
      <category>vue</category>
      <category>ecommerce</category>
    </item>
    <item>
      <title>JSON for Beginners in Plain English</title>
      <author>SnowBit</author>
      <pubDate>Fri, 14 Jan 2022 15:45:56 +0000</pubDate>
      <link>https://dev.to/codewithsnowbit/json-for-beginners-in-plain-english-4k8o</link>
      <guid>https://dev.to/codewithsnowbit/json-for-beginners-in-plain-english-4k8o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fGImbIEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1516637090014-cb1ab78511f5%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1170%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fGImbIEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1516637090014-cb1ab78511f5%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1170%26q%3D80" alt="JSON" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JSON&lt;/strong&gt; is used for data transfer between client and server by software applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Before &lt;strong&gt;JSON&lt;/strong&gt; was introduced &lt;strong&gt;XML(Extensible Markup Language)&lt;/strong&gt; was the only preferred way to transfer data between client and server.&lt;/li&gt;
&lt;li&gt;Later in early 2000, &lt;strong&gt;JSON&lt;/strong&gt; got birth and replaced XML as a data format&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-json"&gt;
  &lt;/a&gt;
  What is JSON?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;JSON&lt;/strong&gt; stands for &lt;strong&gt;J&lt;/strong&gt;avaScript &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;N&lt;/strong&gt;otation&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JSON&lt;/strong&gt; is lightweight, while being human- and machine-readable.&lt;/li&gt;
&lt;li&gt;The collection of data contains a key-value pair where the key must be a &lt;strong&gt;string&lt;/strong&gt;, and the value can be any of the following:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GxlGYpId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642173391108/LvLB2PqQY.png" alt="value.png" width="880" height="620"&gt;
Image: json.org&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Important rules to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;JSON&lt;/strong&gt; key values must be enclosed by double quotes&lt;/li&gt;
&lt;li&gt;Key and the value must be separated by a colon &lt;code&gt;:&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Each pair must be separated by comma &lt;code&gt;,&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's how JSON looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SnowBit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"favouriteLang"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"JS"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it for now &lt;/p&gt;




&lt;p&gt;Thank you for reading, have a nice day!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N9GMtqT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642086620246/trLPKY6le.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N9GMtqT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642086620246/trLPKY6le.png" alt="Have a nice day.png" width="220" height="180"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow me on Twitter - &lt;a href="https://twitter.com/codewithsnowbit"&gt;@codewithsnowbit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Subscribe me on YouTube - &lt;a href="https://www.youtube.com/channel/UCNTKqF1vhFYX_v0ERnUa1RQ?view_as=subscriber&amp;amp;sub_confirmation=1"&gt;Code With SnowBit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Who is using Nx?</title>
      <author>Jesse M. Holmes</author>
      <pubDate>Fri, 14 Jan 2022 15:39:48 +0000</pubDate>
      <link>https://dev.to/wolfhoundjesse/who-is-using-nx-45em</link>
      <guid>https://dev.to/wolfhoundjesse/who-is-using-nx-45em</guid>
      <description>&lt;p&gt;I'm using Nx with React and Nest to build an application for work, and I love it. Are you doing anything interesting with &lt;a href="https://nx.dev/"&gt;Nx&lt;/a&gt;?&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>discuss</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Perl Roles</title>
      <author>DragosTrif</author>
      <pubDate>Fri, 14 Jan 2022 15:34:14 +0000</pubDate>
      <link>https://dev.to/dragostrif/perl-roles-54ff</link>
      <guid>https://dev.to/dragostrif/perl-roles-54ff</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. Roles Definition&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A role is a set of methods that provide extra behavior to a class. Roles can't be used independently they need a class to consume them. Roles are a good alternative to inheritance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. A sample role&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A role is declared in a  *.pm file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Moose::&lt;/span&gt;&lt;span class="nv"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;encode_json&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="sx"&gt;qw( data )&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;encode_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Consuming a role&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the previous example the Role::JSON &lt;em&gt;requires&lt;/em&gt;&lt;br&gt;
 the consuming class to have a method named &lt;em&gt;data&lt;/em&gt;().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Role::JSON&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;data&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;__PACKAGE__&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;meta&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;make_immutable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you could would just call the method defined in the role in your program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;# And that prints the following JSON&lt;/span&gt;
&lt;span class="c1"&gt;# { foo : 'bar' }&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. Checking if class consumes a role&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because roles are not inherited you cannot use isa() to check if a class consumes a role instead you should use does():&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;does&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;Role::JSON&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5. Roles without Moose/Moo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cpan module Role::Tiny allows you to use roles with vanilla OOP not just with Moose or Moo. Like Moose or Moo Role::Tiny  applies strict and warnings to the caller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;data&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
 &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;lib&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::Tiny::&lt;/span&gt;&lt;span class="nv"&gt;With&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt;  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role::Foo&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Role::Tiny makes available to your role the following method modifiers: &lt;em&gt;before&lt;/em&gt;, &lt;em&gt;around&lt;/em&gt; and &lt;em&gt;after&lt;/em&gt;.&lt;br&gt;
In this example when $self-&amp;gt;data is called the around block executes and you get JSON returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;encode_json&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="sx"&gt;qw( data )&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;around&lt;/span&gt; &lt;span class="s"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$orig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;encode_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$orig&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;6. Compositional safety&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Roles attempt to guarantee compositional safety. So if two roles have the same method defined and you try to consume them in the same class you will get an error message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt; &lt;span class="nv"&gt;Due&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;method&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="nv"&gt;conflicts&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;roles&lt;/span&gt; &lt;span class="o"&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just remember that in order to trigger the error message you need to consume all the roles at once:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;# good&lt;/span&gt;
&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;lib&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::Tiny::&lt;/span&gt;&lt;span class="nv"&gt;With&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt;  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role::XML&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role::JSON&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="c1"&gt;# bad second method is ignored&lt;/span&gt;
&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;lib&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::Tiny::&lt;/span&gt;&lt;span class="nv"&gt;With&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt;  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role::XML&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt; 
&lt;span class="nv"&gt;with&lt;/span&gt;  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role::JSON&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;7. How to fix method collision&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;implement the methods yourself in your class, thus causing the corresponding role methods to be ignored&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For Moose use the &lt;em&gt;excludes&lt;/em&gt; key word&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Moose::&lt;/span&gt;&lt;span class="nv"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;serialize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Moose::&lt;/span&gt;&lt;span class="nv"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;serialize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nn"&gt;Role::Serializable::&lt;/span&gt;&lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nn"&gt;Role::Serializable::&lt;/span&gt;&lt;span class="nv"&gt;XML&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;excludes&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For Role::Tiny use  namespace::clean
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;serialize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;# serialize() will not be imported in the consuming class&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;namespace::&lt;/span&gt;&lt;span class="nv"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;8. Bibliography&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Beginning-Perl-Curtis-Poe-ebook-dp-B009K92D9I/dp/B009K92D9I/ref=mt_other?_encoding=UTF8&amp;amp;me=&amp;amp;qid="&gt;Beginning Perl by Curtis 'Ovid' Poe &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://modernperlbooks.com/"&gt;Modern Perl by Chromatic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.perl.com/article/47/2013/11/11/Use-roles-in-object-oriented-Perl-with-Role-Tiny/"&gt;Use roles in object oriented Perl with Role::Tiny by David Farrell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>perl</category>
      <category>programming</category>
      <category>oop</category>
    </item>
    <item>
      <title>What resources help you to learn a new API?</title>
      <author>Andy Piper</author>
      <pubDate>Fri, 14 Jan 2022 15:28:07 +0000</pubDate>
      <link>https://dev.to/andypiper/what-resources-help-you-to-learn-a-new-api-2cc9</link>
      <guid>https://dev.to/andypiper/what-resources-help-you-to-learn-a-new-api-2cc9</guid>
      <description>&lt;p&gt;In my day job, when I'm not learning things by reading and sharing here on DEV, I'm a &lt;a href="https://dev.to/andypiper/my-developer-advocacy-origin-story-395k"&gt;developer advocate at Twitter&lt;/a&gt;. I've been doing this for quite a long time now, and I recognise that while I'm always learning for myself, I don't always stop to &lt;em&gt;think about how other people learn&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I know that personally, I learn best from getting started guides, example code that makes sense, and the ability to "play with" an API using some kind of explorer or &lt;a href="https://dev.to/twitterdev/how-to-use-twurl-to-quickly-test-the-twitter-api-4n48"&gt;command line&lt;/a&gt;. I do not usually get so much from videos (but I love to take part in making them!).&lt;/p&gt;

&lt;p&gt;How do &lt;em&gt;YOU&lt;/em&gt; learn to use new APIs?&lt;/p&gt;

&lt;p&gt;The more specific question / broader background...&lt;/p&gt;

&lt;p&gt;In November, we &lt;a href="https://blog.twitter.com/developer/en_us/topics/tools/2021/build-whats-next-with-the-new-twitter-developer-platform"&gt;launched Twitter API v2&lt;/a&gt;, which is a whole new way to access Twitter data, based on the OpenAPI specification, and with a more modern experience than v1.1 (which is around 11 years old - pretty rare for an API to last that long without major changes). We've hosted some &lt;a href="https://twitch.tv/twitterdev"&gt;Twitch streams&lt;/a&gt; and &lt;a href="https://twitter.com/twitterdev"&gt;Twitter Spaces&lt;/a&gt; to talk about it. &lt;/p&gt;

&lt;p&gt;We have &lt;a href="https://developer.twitter.com/en/docs/twitter-api/getting-started/about-twitter-api"&gt;documentation&lt;/a&gt;, a &lt;a href="https://documenter.getpostman.com/view/9956214/T1LMiT5U"&gt;Postman Collection&lt;/a&gt;, and &lt;a href="https://github.com/twitterdev/Twitter-API-v2-sample-code"&gt;sample code&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/twitterdev"&gt;
        twitterdev
      &lt;/a&gt; / &lt;a href="https://github.com/twitterdev/Twitter-API-v2-sample-code"&gt;
        Twitter-API-v2-sample-code
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Sample code for the Twitter API v2 endpoints
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Twitter API v2 sample code &lt;a href="https://developer.twitter.com/en/docs/twitter-api" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7d2e5e053a704be62d3feab1d1918a33ad47878eb32aef24ef6e9d0e2f7df7e4/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d687474707325334125324625324674776261646765732e676c697463682e6d652532466261646765732532467632" alt="v2"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Sample code for the Twitter API v2 endpoints
Individual API features have folders where you can find examples of usage in several coding languages (Java, Node.js, Python, R, and Ruby).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.twitter.com/en/docs/twitter-api/getting-started/about-twitter-api" rel="nofollow"&gt;Twitter API Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Twitter API Essential Access (&lt;a href="https://developer.twitter.com/en/portal/petition/essential/basic-info" rel="nofollow"&gt;sign up here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;A Project and an App created &lt;a href="https://developer.twitter.com/en/portal/dashboard" rel="nofollow"&gt;in the dashboard&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Using the code samples&lt;/h2&gt;
&lt;p&gt;In order to run the samples in this repository you will need to set up some environment variables. You can find your credentials and bearer token in the App inside of your Project in the &lt;a href="https://developer.twitter.com/en/portal/projects-and-apps" rel="nofollow"&gt;dashboard of the developer portal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For OAuth 1.0a samples, you will need to export your consumer key and secret in your terminal. Be sure to replace &lt;code&gt;&amp;lt;your_consumer_key&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;your_consumer_secret&amp;gt;&lt;/code&gt; with your own credentials without the &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;export&lt;/span&gt; CONSUMER_KEY=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;your_consumer_key&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; CONSUMER_SECRET=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&amp;lt;your_consumer_secret&amp;gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;For samples which use bearer…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/twitterdev/Twitter-API-v2-sample-code"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you had the chance to request an educational resource about the Twitter API, what would you ask for? Tutorials, videos, Twitch, code? Any particular topic you want to know more about? Should we provide code in different languages - which ones, and why? Let me know in the discussion below, or &lt;a href="https://twitter.com/andypiper"&gt;follow me on Twitter&lt;/a&gt; and Tweet me a suggestion!&lt;/p&gt;

</description>
      <category>api</category>
      <category>learning</category>
      <category>twitter</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Liman MYS'de LDAP organizasyon birimi yetkilerinin düzenlenmesi</title>
      <author>Fatih Arslan Tugay</author>
      <pubDate>Fri, 14 Jan 2022 15:16:08 +0000</pubDate>
      <link>https://dev.to/aciklab/liman-mysde-ldap-organizasyon-birimi-yetkilerinin-duzenlenmesi-4e0b</link>
      <guid>https://dev.to/aciklab/liman-mysde-ldap-organizasyon-birimi-yetkilerinin-duzenlenmesi-4e0b</guid>
      <description>&lt;p&gt;Liman MYS'nin kurumsal sürümünde yer alan "Domain eklentisi"nde bildiğimiz üzere domain LDAP şemasını görebildiğimiz bir ağaç yapımız var. Bu yazımızda ağaç yapısı üzerinde &lt;strong&gt;kullanıcı bazlı yetki düzenlemesi&lt;/strong&gt; yapmayı göstereceğiz.&lt;/p&gt;

&lt;p&gt;Öncelikli olarak Domain Eklentisi'ni LDAP üzerinde izin yönetimi yetkisine sahip olan kullanıcı olarak &lt;strong&gt;administrator&lt;/strong&gt; bilgileriyle giriş yapıyoruz. Bu ayarlar LDAP üzerinde izin yönetimi yetkisine sahip herhangi bir kullanıcı ile de yapılabilir.&lt;/p&gt;

&lt;p&gt;Eklentiyi eğer ilk defa açıyorsak zaten giriş ekranında &lt;strong&gt;Eklenti Ayarları&lt;/strong&gt; sayfası açılır ve bizden bir domain kullanıcı adı ve parolası ile doğrulama yapmamızı ister. Fakat eklentiye daha önce giriş yapıldıysa sağ üst köşedeki &lt;strong&gt;Eklenti Ayarları&lt;/strong&gt; butonu ile bu ekrana gidebiliriz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rKS5X6-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2o4sgi8sei7mmwob4nf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rKS5X6-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2o4sgi8sei7mmwob4nf.png" alt="1" width="880" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gelen ekranda &lt;strong&gt;Kullanıcı Adı&lt;/strong&gt; kısmına domaindeki kullanıcı adımızı, Parola &lt;strong&gt;kısımlarına&lt;/strong&gt; da şifremizi yazarak &lt;strong&gt;Kaydet&lt;/strong&gt; dediğimizde domain eklentisine bu kullanıcının yetkileriyle giriş yapmış olacağız. Bu ekranı unutmayalım çünkü yazının ilerleyen kısımlarında tekrar değineceğiz. İlk olarak &lt;strong&gt;administrator veya yetkili bir kullanıcı ile giriş yaptığımıza emin olalım&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gvHb1Vnj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5obndl5a2c01zp7gswq6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gvHb1Vnj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5obndl5a2c01zp7gswq6.png" alt="2" width="680" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tekrar eklentiye gelecek olursak, &lt;strong&gt;belli bir organizasyon birimi (OU) üzerinde kullanıcı bazlı yetki düzenlemesi&lt;/strong&gt; yapacağımızdan istediğimiz bir OU üzerine gelerek sağ tıklıyoruz ve &lt;strong&gt;Yetkileri Düzenle&lt;/strong&gt; diyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8TIxyzdK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iu9ndy1ftlk1zub3nbb6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TIxyzdK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iu9ndy1ftlk1zub3nbb6.png" alt="3" width="418" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Önümüze gelen &lt;strong&gt;İzinler&lt;/strong&gt; ekranında &lt;strong&gt;Kullanıcı veya Grup&lt;/strong&gt; kısmındaki &lt;strong&gt;Ekle&lt;/strong&gt; butonuna tıklayarak yetkilerini düzenlemek istediğimiz kullanıcı adını aratıyoruz. Kullanıcımıza tıklayarak &lt;strong&gt;Ekle&lt;/strong&gt; butonuna basıyoruz.* Ardından gelen ekranda default olarak seçtiğimiz kullanıcının &lt;strong&gt;Okuma (Read)&lt;/strong&gt; izni gözüküyor. Biz bunu &lt;strong&gt;REDDET&lt;/strong&gt; konumuna getiriyoruz ve alt taraftaki Uygula butonuna tıklayarak seçimlerimizi kaydediyoruz.&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Aynı şekilde İzinler kısmından silmek istediğimiz bir kullanıcı veya grup olduğunda Kullanıcılar veya Grup kısmından seçerek Sil diyebiliriz.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---CraBRIY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf8p18bsgzc8gxudrfsn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---CraBRIY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf8p18bsgzc8gxudrfsn.png" alt="4" width="880" height="504"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K8_5CSj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftbe2ch4b1p0634r2wjo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K8_5CSj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftbe2ch4b1p0634r2wjo.png" alt="5" width="880" height="826"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Şimdi ise sıra geldi bu kullanıcının elinden aldığımız okuma yetkisini test etmeye. Şimdi ise yazının ilk kısımlarında gösterdiğimiz &lt;strong&gt;Eklenti Ayarları&lt;/strong&gt; sayfasına giderek bu sefer yetkileriyle oynadığımız kullanıcının bilgileriyle giriş yapıyoruz. &lt;strong&gt;Kaydet&lt;/strong&gt; butonuna tıkladığımızda gelen ağaç yapısında az önce okuma yetkisini kaldırdığımız birimi &lt;strong&gt;göremedik&lt;/strong&gt;. Bu vesileyle de yetki düzenlemesini başarıyla sağlayabildiğimizi görmüş oluyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_E9Jl3N3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hla0jdbm7i92oz3oxbp2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_E9Jl3N3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hla0jdbm7i92oz3oxbp2.png" alt="6" width="432" height="379"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>liman</category>
      <category>yetki</category>
      <category>ldap</category>
      <category>ou</category>
    </item>
    <item>
      <title>DAOs - the good, the bad and the unknown</title>
      <author>Arran Fletcher</author>
      <pubDate>Fri, 14 Jan 2022 15:11:34 +0000</pubDate>
      <link>https://dev.to/mfcodeworks/daos-the-good-the-bad-and-the-unknown-l1e</link>
      <guid>https://dev.to/mfcodeworks/daos-the-good-the-bad-and-the-unknown-l1e</guid>
      <description>&lt;p&gt;Decentralized Autonomous Organization (DAO). A DAO is an organization of people, without a leader or governing body. Instead, governed (usually) by the rules of a "smart contract" on the blockchain which determines how proposals are created and votes on them are cast, often with the aid of a crypto token or NFT.&lt;/p&gt;

&lt;p&gt;A second part of the DAO is the treasury, most DAOs have a singular &lt;em&gt;wallet&lt;/em&gt; or a place to pool resources, that are further used based on decisions voted on by the DAO. However the management and who really has access to the treasury to commit transactions and use funds depends on how the DAO is set up.&lt;/p&gt;

&lt;p&gt;DAOs are a new take on a well known system; democracy. DAOs envision a new way for large groups of thousands, potentially millions of people, to propose ideas and dedicate resources to a cause through mass voting. However, not all DAOs are equal, not all DAOs may be considered a "real" DAO, and there are a lot of questions to be faced with new large collectives like this.&lt;/p&gt;

&lt;p&gt;So what do DAOs streamline, what problems do they address, and what are the pitfalls and unknowns that they suffer from?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-benefits-of-a-dao"&gt;
  &lt;/a&gt;
  The benefits of a DAO
&lt;/h2&gt;

&lt;p&gt;Most countries across the world have a government of some kind. Whether chosen by elections, a ruling party, or by birthright, a small group of people is proposing and deciding which ideas a country enacts. Although citizens may have some influence over these decisions, citizens do not have a vote on every decision that's made. A DAO changes this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pure-democracy"&gt;
  &lt;/a&gt;
  Pure Democracy
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;In a larger DAO without a member limit, this could be scaled up to hundreds of thousands and provide an easy accessible way to cast votes on important decisions without barriers or intimidation interfering.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The purpose of a DAO is to remove this layer of representatives. To remove central figures, group representatives, and treat every decision with an open ballot. Using a crypto wallet to cast votes, this makes collecting and counting ballots instant and completely traceable. There's no chance of forgotten or uncounted ballots, no confusion on which option was chosen, every vote is openly available for every other person to see.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/developer_dao"&gt;Developer DAO&lt;/a&gt;, a DAO with a limit of just under 8,000 members launched less than 4 months ago, put out its &lt;a href="https://snapshot.org/#/devdao.eth/proposal/0x6c141b9efbfad6b370581eebf505408ba7f8619264b7e8ca03118fdf89975c97"&gt;proposal to switch from using an NFT to using tokens to vote&lt;/a&gt;. In 5 days the proposal has over 1,300 individual votes. In a larger DAO without a member limit, this could be scaled up to hundreds of thousands and provide an easy accessible way to cast votes on important decisions without barriers or intimidation interfering.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mass-adoption-and-growth"&gt;
  &lt;/a&gt;
  Mass Adoption and Growth
&lt;/h3&gt;

&lt;p&gt;When people want to form a collective; whether its a political group, a mass-investment, or an art movement, DAOs can make creating a large organization faster and easier than ever before. With no entry process, no pre-requirements, and no invite needed, a DAO can grow to incredible size and strength very quickly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By the end of their mission on November 19th (One week after the first post) the DAO had raised roughly $47 million dollars from over 17,000 contributors&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://twitter.com/ConstitutionDAO"&gt;ConstitutionDAO&lt;/a&gt; was a DAO formed to purchase an original copy of the constitution of the USA. With its &lt;a href="https://twitter.com/ConstitutionDAO/status/1458990413625315354"&gt;first post&lt;/a&gt; being on November 12th, 2021, it took less than a week, November 18th, for the DAO to &lt;a href="https://twitter.com/ConstitutionDAO/status/1461205307158372352"&gt;raise over $40 million dollars&lt;/a&gt;. Although their mission fell through, by the end of everything on November 19th (One week after the first post) the DAO had raised roughly &lt;a href="https://twitter.com/ConstitutionDAO/status/1461527514485035009"&gt;$47 million dollars from over 17,000 contributors&lt;/a&gt;.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lEYiDAey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FEc-e5KWQAgKt8Z.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ros8syd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1458980838750752768/GN_UVm3d_normal.jpg" alt="ConstitutionDAO (📜, 📜) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        ConstitutionDAO (📜, 📜)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @constitutiondao
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      ok it is a little past midnight and we have now raised 40 MILLION DOLLARS to buy this constitution &lt;br&gt;&lt;br&gt;today has been absolutely incredible, but its time for me to slep&lt;br&gt;&lt;br&gt;see you all in the morning, we tweet at dawn [CHIRPBIRDICON]🌞 &lt;a href="https://twitter.com/hashtag/wagbtc"&gt;#wagbtc&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      05:31 AM - 18 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1461205307158372352" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1461205307158372352" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1461205307158372352" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;DAOs can create an almost limitless democratic system. With just a phone, an internet connection, and a way to communicate ideas, a mass-movement of people can be created and organized without physical boundaries or issues of corruption and intimidation in the voting system. Nonetheless, like any group initiative DAOs struggle in certain areas and are yet to find a way forward in some common issues. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-struggles-daos-face"&gt;
  &lt;/a&gt;
  The struggles DAOs face
&lt;/h2&gt;

&lt;p&gt;As with any group of people, there are struggles DAOs face. Many of the biggest issues relating to governance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leadership"&gt;
  &lt;/a&gt;
  Leadership
&lt;/h3&gt;

&lt;p&gt;When a group is decentralized and autonomous, who really proposes anything? In a group of 200,000 people, does every person have an equal right to simply create a proposal that's voted on? In most DAOs as of writing this; they don't. This means in most DAOs there's a &lt;em&gt;core team&lt;/em&gt;, or more often the &lt;em&gt;founding members&lt;/em&gt; and occasionally additional members who may have been active and contributing in the group for a long time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Are all votes considered equal? Are all members considered equal? This depends on how votes are issued within a DAO&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When a decentralized autonomous group has a central team of people leading discussions and proposing ideas, can it &lt;em&gt;truly&lt;/em&gt; be considered a DAO? Wouldn't this make it the same as any other governmental system, just with a different voting method? Herein lies a big issue of DAOs and their future, removing central bodies eliminates the risk of corruption and dictatorship, but it creates an unmanageable process of organizing the path forward.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vote-equality"&gt;
  &lt;/a&gt;
  Vote Equality
&lt;/h3&gt;

&lt;p&gt;Another issue stemming from DAOs being a massive decentralized organization is votes. Are all votes considered equal? Are all members considered equal? This depends on how votes are issued within a DAO, and this is done in one of two methods: NFTs, or tokens.&lt;/p&gt;

&lt;p&gt;NFT voting is based on holding an NFT, with each NFT being unique and representative of one vote. But what about people who hold 2 NFTs? If the NFTs were distributed by sale, doesn't the majority of voting power fall to the richest members? In some cases, yes. Some DAOs such as &lt;a href="https://twitter.com/developer_dao?t=3fK665_N1Rov2p6Ez3rVxA&amp;amp;s=09"&gt;Developer DAO&lt;/a&gt; have a system in which an address holding NFTs gets one vote, regardless of how many NFTs they have. But with the ease of crypto addresses, any person could simply make a new address and hold one NFT on each, massively multiplying their voting power.&lt;/p&gt;

&lt;p&gt;The alternative to NFTs is a token. Tokens are not unique. Tokens simply set their supply limit, potentially millions of tokens, and require a certain amount to vote, in the &lt;a href="https://snapshot.org/#/devdao.eth/proposal/0x6c141b9efbfad6b370581eebf505408ba7f8619264b7e8ca03118fdf89975c97"&gt;Developer DAO token proposal&lt;/a&gt; that means 400 tokens gives someone access to one vote.&lt;/p&gt;

&lt;p&gt;This again raises questions of distribution and equality. Crypto is known for being sold, and if governance is sold then the richest members quickly become the most powerful. When token distribution happens, who has a right to it? Do all members receive equal power? Does the founding team receive a bigger allocation and if so, what makes their vote more important? These are questions fundamental to the democratic process DAOs are trying to implement, and in the end the decision falls back to the same people creating the DAO.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Grady_Booch"&gt;Grady Booch&lt;/a&gt;, a well respected software engineer, posted a &lt;a href="https://twitter.com/Grady_Booch/status/1462624151869411330"&gt;thread&lt;/a&gt; detailing many of the governance issues that DAOs will inevitably face.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--clWx_b06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1350371022067781634/0mw7Irfk_normal.jpg" alt="Grady Booch profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Grady Booch
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @grady_booch
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/nicksdjohnson"&gt;@nicksdjohnson&lt;/a&gt; A question asked in good faith deserves an answer in good faith; thank you.&lt;br&gt;&lt;br&gt;Nick, I celebrate what you are doing; it is both desirable as well as inevitable.&lt;br&gt;&lt;br&gt;So, to be clear, there is nothing about your process that bugs me. The point of my OP is…
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      03:29 AM - 22 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1462624151869411330" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1462624151869411330" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1462624151869411330" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#how-will-daos-mature"&gt;
  &lt;/a&gt;
  How will DAOs mature
&lt;/h3&gt;

&lt;p&gt;A consequence that hasn't been seen yet but will no doubt need clarification in time; what happens to a DAO as time passed? As votes are based on tokens or NFTs and these are distributed to a massive group of people, where will these people be in 10 years if the DAO is expected to last that long?&lt;/p&gt;

&lt;p&gt;Some studies have shown in the decade since its inception, around &lt;a href="https://www.investopedia.com/news/20-all-btc-lost-unrecoverable-study-shows/#:~:text=Bitcoin%20users%20have%20misplaced%20about,the%20Wall%20Street%20Journal%20suggests."&gt;20% of all Bitcoin has been lost in circulation&lt;/a&gt;, so what happens to voting power over time? Some will inevitably be lost, some will be consolidated by users who want to have higher influence, people will become inactive or busy or pass away, wallets will be compromised and the voting power overall will dwindle to smaller and smaller amounts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-of-conduct"&gt;
  &lt;/a&gt;
  Code of Conduct
&lt;/h3&gt;

&lt;p&gt;Another issue that concerns both voting rights and the freedom of ideas DAOs promote, what happens when a member betrays the mission of the DAO? DAOs are touted as a proponent of free ideas and open internet under &lt;a href="https://mfcodeworks.com/blog/article/web3-what-does-it-mean-and-what-does-it-do"&gt;web3&lt;/a&gt;, so what happens when a member, especially a core team member, goes against the tenants that a DAO stands for? If a DAO has a mission of protection of the environment, what do you do with members that support replacing forests with parking lots? If your DAO promotes inclusivity and diversity, what do you do with a member that promotes racism and genocide? When voting is open and accessible to all members, do you blacklist their wallet? Do you attempt to forfeit &lt;em&gt;their&lt;/em&gt; tokens and NFTs? Can you prevent a subset of radical ideas become the majority, which has happened time and time again throughout history.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keys-to-the-kingdom"&gt;
  &lt;/a&gt;
  Keys to the Kingdom
&lt;/h3&gt;

&lt;p&gt;One of the largest and sometimes least discussed issues that DAOs face; if a DAO has a treasury, who has access? Many DAOs solve this with a "multi-sig wallet", that is a crypto wallet that requires a certain amount of keys. Similar to a lockbox with 4 different keys to open it, many DAOs operate their treasury in a similar way handing digital keys to a trusted set of members. This raises the same question that's been the core of every issue discussed, &lt;em&gt;is this a DAO&lt;/em&gt;? Can this structure really be considered &lt;em&gt;decentralized&lt;/em&gt;? What's to stop this trusted group of members growing the DAO, gathering resources and assets in the treasury under the promise of a mission, and swiftly taking it all for themselves?&lt;/p&gt;

&lt;p&gt;A treasury wallet can be created that responds only to smart contract code, and if done well this means that only a successful majority proposal vote can ever initiate a transaction from the wallet, as seen &lt;a href="https://blog.makerdao.com/what-are-smart-contract-wallets-and-how-can-they-benefit-defi-users/"&gt;in this MakerDAO blog post&lt;/a&gt;. As always, it's up to the creators of a DAO how they structure things and if they are willing to take the effort to make their DAO as decentralized as possible and protect what the members entrust the DAO with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-future-of-daos"&gt;
  &lt;/a&gt;
  The future of DAOs
&lt;/h2&gt;

&lt;p&gt;Under issues of governance, trust, centralization, and limits of ideas and conduct, DAOs today continue to grow more and more numerous with each gathering larger audiences.&lt;/p&gt;

&lt;p&gt;The purpose of DAOs are becoming more diverse with each DAO launched; &lt;a href="https://www.olympusdao.finance/"&gt;OlympusDAO&lt;/a&gt; creating a decentralized reserve currency which has amassed $1.5 billion dollars in locked value, &lt;a href="https://pleasr.org/#"&gt;PleasrDAO&lt;/a&gt; funding the collection of rare physical and digital pieces of art including the &lt;a href="https://www.nytimes.com/2021/10/20/arts/music/wu-tang-clan-once-upon-a-time-in-shaolin.html"&gt;only copy of Once Upon a Time in Shaolin by Wu-Tang Clan&lt;/a&gt;, &lt;a href="https://www.klimadao.finance/"&gt;KlimaDAO&lt;/a&gt; creating a treasury of locked carbon credits to use the market to increase the cost of carbon for businesses with over 14 million tones of carbon locked, there's no limit to what DAOs can grow to achieve.&lt;/p&gt;

&lt;p&gt;The future of DAOs will see DAOs face new complex challenges, old challenges that have been faced by every governing system, and the challenge of time and how to handle a DAO that matures over decades of members. Only when we look back will we see if DAOs helped create a new wave of decentralized democratic co-operatives, or if the system is simply too decentralized to govern without the DAO collapsing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Want to support more unbiased discussions and deep dives in crypto? I accept tips!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ko-fi: &lt;a href="https://ko-fi.com/mfcodeworks"&gt;https://ko-fi.com/mfcodeworks&lt;/a&gt;&lt;br&gt;
ETH/MATIC: 0xaBC5cb8AFB4EeC892b90019c54D9a3A6a38f3B0c&lt;br&gt;
BTC: bc1qunls7qykn23u6f2z0vtgv0gmn2kgw8l4s6qtz9&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>discuss</category>
      <category>web3</category>
      <category>blockchain</category>
    </item>
  </channel>
</rss>
