<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>52 responsive snippets to create a website for your project</title>
      <author>Przemyslaw Michalak</author>
      <pubDate>Fri, 04 Jun 2021 10:34:57 +0000</pubDate>
      <link>https://dev.to/przemek/52-responsive-snippets-to-create-a-website-for-your-project-51e6</link>
      <guid>https://dev.to/przemek/52-responsive-snippets-to-create-a-website-for-your-project-51e6</guid>
      <description>&lt;p&gt;Hi everyone. I made 52 responsive snippets that can help you to build website for your project, portfolio, commercial website or whatever you wish, since they are free. All of them are fully responsive and customizable so I want to quickly show you how to use them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gg1hl3Aj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7101sebdlc44uuvtzvu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gg1hl3Aj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7101sebdlc44uuvtzvu.png" alt="widget collection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#edit-their-content"&gt;
  &lt;/a&gt;
  Edit their content
&lt;/h1&gt;

&lt;p&gt;Each snippet comes with its own object JSON file that provides data to it. So it is pretty straight forward to change their copy. Remember that a lot of snippets have elements as cards that takes content from an array of objects. So to control amount of elements simply copy and paste or delete objects from the array. Have a look at the picture bellow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;getTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nunquam consumere boreas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;getDescription&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cur frondator mori? Ire saepe ducunt ad noster rector. Elogium de peritus castor, magicae rumor.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;getImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://via.placeholder.com/350&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="na"&gt;getCallToAction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sectams prarere!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_self&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.glue.codes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="na"&gt;getCards&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sectams prarere!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cur frondator mori? Ire saepe ducunt ad noster rector. Elogium de peritus castor, magicae rumor.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_self&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sectams prarere!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cur frondator mori? Ire saepe ducunt ad noster rector. Elogium de peritus castor, magicae rumor.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_self&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sectams prarere!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cur frondator mori? Ire saepe ducunt ad noster rector. Elogium de peritus castor, magicae rumor.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_self&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we have function &lt;code&gt;getCards&lt;/code&gt; that returns array with 3 objects and so snippet displays 3 cards. If you add extra or delete some of those objects you will get respectful amount of cards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onCHxKwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a96urg0te1ygbypgsicp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onCHxKwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a96urg0te1ygbypgsicp.jpg" alt="banana widget"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#styling"&gt;
  &lt;/a&gt;
  Styling
&lt;/h1&gt;

&lt;p&gt;There is 2 ways to style your snippets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scoped-css"&gt;
  &lt;/a&gt;
  Scoped CSS
&lt;/h2&gt;

&lt;p&gt;Each snippet has its own dedicated CSS file that can be freely edited without worries of interfering with the rest of them. It is especially useful when you want to use the same snippet more than once on your website. You can make them look absolutely different using scoped CSS files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P6756Nd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09og97rwwa37hdll71by.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P6756Nd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09og97rwwa37hdll71by.jpg" alt="apricot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#global-styles"&gt;
  &lt;/a&gt;
  Global Styles
&lt;/h2&gt;

&lt;p&gt;Each widget is also connected to the global styles file that can edit all of the snippets at once to speed up your work when it comes to consistent design of your project. And that is possible thanks to...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UQuEFhp1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kljp3m56rr9nd84rb12.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UQuEFhp1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kljp3m56rr9nd84rb12.jpg" alt="tomato"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consistent-naming"&gt;
  &lt;/a&gt;
  Consistent naming
&lt;/h1&gt;

&lt;p&gt;All snippets have consistent naming when it comes to their CSS classes or object JSON file. That significantly helps with changing their design and make it easy to learn how to change their content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HgTWbXMO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ng6gugmcai3gb57duvyb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HgTWbXMO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ng6gugmcai3gb57duvyb.jpg" alt="nectarine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#free-to-use"&gt;
  &lt;/a&gt;
  FREE to use
&lt;/h1&gt;

&lt;p&gt;As I said right at the beginning, you can use them for free for what ever project you build. Even commercial. To get access to them visit my &lt;a href="https://www.glue.codes"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Solution: Open the Lock</title>
      <author>seanpgallivan</author>
      <pubDate>Fri, 04 Jun 2021 09:49:29 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-open-the-lock-24o3</link>
      <guid>https://dev.to/seanpgallivan/solution-open-the-lock-24o3</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/open-the-lock/discuss/1250681"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-752-medium-open-the-lock"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/open-the-lock/"&gt;Leetcode Problem #752 (&lt;em&gt;Medium&lt;/em&gt;): Open the Lock&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have a lock in front of you with 4 circular wheels. Each wheel has &lt;code&gt;10&lt;/code&gt; slots: &lt;code&gt;'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'&lt;/code&gt;. The wheels can rotate freely and wrap around: for example we can turn &lt;code&gt;'9'&lt;/code&gt; to be &lt;code&gt;'0'&lt;/code&gt;, or &lt;code&gt;'0'&lt;/code&gt; to be &lt;code&gt;'9'&lt;/code&gt;. Each move consists of turning one wheel one slot.&lt;/p&gt;

&lt;p&gt;The lock initially starts at &lt;code&gt;'0000'&lt;/code&gt;, a string representing the state of the 4 wheels.&lt;/p&gt;

&lt;p&gt;You are given a list of &lt;code&gt;deadends&lt;/code&gt; dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.&lt;/p&gt;

&lt;p&gt;Given a &lt;code&gt;target&lt;/code&gt; representing the value of the wheels that will unlock the lock, return &lt;em&gt;the minimum total number of turns required to open the lock, or &lt;code&gt;-1&lt;/code&gt; if it is impossible&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;deadends = ["0201","0101","0102","1212","2002"], target = "0202"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;A sequence of valid moves would be "0000" -&amp;gt; "1000" -&amp;gt; "1100" -&amp;gt; "1200" -&amp;gt; "1201" -&amp;gt; "1202" -&amp;gt; "0202".&lt;br&gt;Note that a sequence like "0000" -&amp;gt; "0001" -&amp;gt; "0002" -&amp;gt; "0102" -&amp;gt; "0202" would be invalid, because the wheels of the lock become stuck after the display becomes the dead end "0102".&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;deadends = ["8888"], target = "0009"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;We can turn the last wheel in reverse to move from "0000" -&amp;gt; "0009".&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;We can't reach the target without getting stuck.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 4:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;deadends = ["0000"], target = "8888"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= deadends.length &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deadends[i].length == 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target.length == 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;target&lt;/code&gt; will not be in the list &lt;code&gt;deadends&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;target&lt;/code&gt; and &lt;code&gt;deadends[i]&lt;/code&gt; consist of digits only.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;There are &lt;strong&gt;10^4&lt;/strong&gt; combinations for the lock, and we can think of each one as a node on a graph. We then have to find the shortest path from &lt;strong&gt;"0000"&lt;/strong&gt; to the &lt;strong&gt;target&lt;/strong&gt; combination without going through one of the &lt;strong&gt;deadends&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In a normal problem dealing with a shortest path on a graph, we keep track of previously visited nodes in a boolean array of combinations (&lt;strong&gt;seen&lt;/strong&gt;), so we can just go ahead and add all of the &lt;strong&gt;deadends&lt;/strong&gt; into &lt;strong&gt;seen&lt;/strong&gt; by converting the strings to numbers.&lt;/p&gt;

&lt;p&gt;Then, we can solve the shortest path problem with a standard &lt;strong&gt;queue&lt;/strong&gt;. We'll have an outer loop to keep track of the number of &lt;strong&gt;turns&lt;/strong&gt; we've taken, while the inner loop will run the length of the current turn (&lt;strong&gt;qlen&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;On each turn, we'll take the current &lt;strong&gt;queue&lt;/strong&gt; entry (&lt;strong&gt;curr&lt;/strong&gt;), then we'll iterate through the four digits and create both a &lt;strong&gt;mask&lt;/strong&gt; for that digit as well as a &lt;strong&gt;masked&lt;/strong&gt; version of &lt;strong&gt;curr&lt;/strong&gt;. (For example, if &lt;strong&gt;curr = 4213&lt;/strong&gt; and we're on the &lt;strong&gt;2nd&lt;/strong&gt; digit, &lt;strong&gt;mask&lt;/strong&gt; would be &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;masked&lt;/strong&gt; would be &lt;strong&gt;4203&lt;/strong&gt;.) This way we can change the &lt;strong&gt;mask&lt;/strong&gt; and add it back to &lt;strong&gt;masked&lt;/strong&gt; to form the &lt;strong&gt;next&lt;/strong&gt; combination. For each digit, we'll also have to attempt both the forward and backward move, so we can add &lt;strong&gt;1&lt;/strong&gt; and then &lt;strong&gt;9&lt;/strong&gt; to the &lt;strong&gt;mask&lt;/strong&gt;, before applying &lt;strong&gt;modulo 10&lt;/strong&gt;, to get the new values.&lt;/p&gt;

&lt;p&gt;For each &lt;strong&gt;next&lt;/strong&gt; combination, if it's our &lt;strong&gt;target&lt;/strong&gt; we should &lt;strong&gt;return turns&lt;/strong&gt;, and if it's been &lt;strong&gt;seen&lt;/strong&gt;, we should &lt;strong&gt;continue&lt;/strong&gt; to the next iteration. Otherwise, we should consider it &lt;strong&gt;seen&lt;/strong&gt; and add it to the &lt;strong&gt;queue&lt;/strong&gt;. If we ever completely empty the &lt;strong&gt;queue&lt;/strong&gt;, then there are no more possible moves, so we should &lt;strong&gt;return -1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We also need to remember to account for edge cases where &lt;strong&gt;"0000"&lt;/strong&gt; is either a &lt;strong&gt;deadend&lt;/strong&gt; or the &lt;strong&gt;target&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(1e4) or O(1)&lt;/strong&gt; because there are always a maximum of &lt;strong&gt;1e4&lt;/strong&gt; possible combinations&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(2e4) or O(1)&lt;/strong&gt; for &lt;strong&gt;seen&lt;/strong&gt; and the maximum length of the &lt;strong&gt;queue&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;openLock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deadends&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;deadends&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;turns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;turns&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="nx"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;turns&lt;/span&gt;
                    &lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                    &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;openLock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deadends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"0000"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;deadends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
                    &lt;span class="n"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                        &lt;span class="n"&gt;nxt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nxt&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nxt&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt;
                        &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nxt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nxt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
            &lt;span class="n"&gt;turns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;openLock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;deadends&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0000"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;LinkedList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;deadends&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;targ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;poll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;targ&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;openLock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;deadends&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"0000"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;deadends&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;targ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;targ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>5 ways to say 'NO' to Clients</title>
      <author>Jenuel Oras Ganawed</author>
      <pubDate>Fri, 04 Jun 2021 09:48:45 +0000</pubDate>
      <link>https://dev.to/brojenuel/5-ways-to-say-no-to-clients-5dkp</link>
      <guid>https://dev.to/brojenuel/5-ways-to-say-no-to-clients-5dkp</guid>
      <description>&lt;p&gt;When we are working with a client, sometimes clients can ask a lot of questions that if we answered it correctly we can suffer from it.&lt;/p&gt;

&lt;p&gt;So here are some question you might encounter in your gigs or career, as a full timer or a freelancer, and how to say "Hell No" without losing a gig.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-can-we-see-a-pass-before-we-hire-you"&gt;
  &lt;/a&gt;
  1. Can we see a pass before we hire you?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I need a deposit to reserve my time
and pay for my assets needed to knock
this out of the park for you.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-can-you-do-this-for-less"&gt;
  &lt;/a&gt;
  2. Can you do this for less?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;If budget is our priority,
lets start with the amount
you have in mind and
back into a deliverable
that makes sense for
that number
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-can-you-do-this-for-freeyour-portfolio"&gt;
  &lt;/a&gt;
  3. Can you do this for free/your portfolio?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The results of this
campaign (done properly)
will more than pay back
this initial
investment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-can-we-add-this-quick-little-deliverable"&gt;
  &lt;/a&gt;
  4. Can we add this quick little deliverable?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Absolutely, i'll just
tack the extra hours
on to your final invoice,
does that work? 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-can-we-get-unlimited-revisions"&gt;
  &lt;/a&gt;
  5. Can we get unlimited revisions?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Sure! My quote includes
2 rounds revisions.
After those, you can have
as many as you'd like,
we'll just switch to
hourly billing.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remember-if-you-add-value-you-get-paid"&gt;
  &lt;/a&gt;
  "Remember: If you add value, you get paid."
&lt;/h2&gt;

&lt;p&gt;Don not respond to the request, Respond to the issue behind the request.&lt;/p&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>How to use code snippets with gatsby-source-notion-api</title>
      <author>Sergei Orlov</author>
      <pubDate>Fri, 04 Jun 2021 09:31:47 +0000</pubDate>
      <link>https://dev.to/orlowdev/how-to-use-code-snippets-with-gatsby-source-notion-api-3noi</link>
      <guid>https://dev.to/orlowdev/how-to-use-code-snippets-with-gatsby-source-notion-api-3noi</guid>
      <description>&lt;p&gt;As of today, the official Notion API doesn't support code snippets. If such block exists on your Notion page, the API returns it with a type of &lt;code&gt;unsupported&lt;/code&gt; and its contents are empty. When I was migrating my personal blog to &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-source-notion-api/?=gatsby-source-notion-"&gt;gatsby-source-notion-api&lt;/a&gt;, I found two rather convenient ways to embed code.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#gatsbyremarkembedder"&gt;
  &lt;/a&gt;
  gatsby-remark-embedder
&lt;/h1&gt;

&lt;p&gt;Not sure if it will work if you use MDX, but it works perfectly with MarkdownRemark. All you need to do is to create a code snippet on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt; or &lt;a href="https://codepen.io"&gt;CodeSandBox&lt;/a&gt; and simply throw a link to the snippet onto the page.&lt;/p&gt;

&lt;p&gt;This approach has the great benefit of having all your code snippets put together. You can reuse them in different places, you can edit them separately from the writing process, and you can share them outside your blog as well. You can also find the plugin useful in other places like embedding tweets, youtube videos, and what-not.&lt;/p&gt;

&lt;p&gt;Plugin docs can be found &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-remark-embedder/?=embedder#codepen"&gt;here&lt;/a&gt;. In short - install the plugin, add it to your &lt;code&gt;gatsby-config.js&lt;/code&gt;, create a code snippet &lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; and throw its link to the page.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#markdown-syntax"&gt;
  &lt;/a&gt;
  Markdown syntax
&lt;/h1&gt;

&lt;p&gt;If you prefer things to be right inside the page, there is a way, and it's what I personally use on my blog. You can write a code snippet in Markdown syntax and simply disallow Notion to transform it to a code block. Start a line with &lt;code&gt;```&lt;/code&gt; and put a space. Notion will automatically turn it into a code block. &lt;code&gt;Cmd/Ctrl + Z&lt;/code&gt; to undo this transformation. Put the snippet contents below. Then put &lt;code&gt;```&lt;/code&gt; on a separate line again.&lt;/p&gt;

&lt;p&gt;To specify syntax you want to use in the snippet, you can put it right after the first &lt;code&gt;```&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gatsby-source-notion-api&lt;/code&gt; will transform it preserve it as Markdown syntax, and MarkdownRemark or MDX will transform it into valid HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; since it's a kind of a wallhack to make the current state of Notion API a bit more usable, it's should not be a way to go when they start to support code blocks properly. So, what you need to do to make it work is to indent the contents of the whole code snippet one level up. I.e. simply select the stuff between &lt;code&gt;```&lt;/code&gt; and press &lt;code&gt;Tab&lt;/code&gt; once. This will ensure snippet contents are rendered as snippet contents, not just as separate paragraphs.&lt;/p&gt;

&lt;p&gt;Here's an example of what it looks like as a result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's what it looks like in Notion to make it work:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ch01w8Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://orlow.dev/how-to-use-code-snippets-with-gatsby-source-notion-api-code-snippet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ch01w8Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://orlow.dev/how-to-use-code-snippets-with-gatsby-source-notion-api-code-snippet.png" alt="Code Snippet"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;You probably need to sign up at &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt; or &lt;a href="https://codepen.io"&gt;CodeSandBox&lt;/a&gt; to be able to use long-lasting links to your snippets. &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>gatsby</category>
      <category>javascript</category>
      <category>notion</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>Images in "files" property with gatsby-source-notion-api</title>
      <author>Sergei Orlov</author>
      <pubDate>Fri, 04 Jun 2021 09:28:58 +0000</pubDate>
      <link>https://dev.to/orlowdev/images-in-files-property-with-gatsby-source-notion-api-2n6e</link>
      <guid>https://dev.to/orlowdev/images-in-files-property-with-gatsby-source-notion-api-2n6e</guid>
      <description>&lt;p&gt;There are many ways you can find the Notion &lt;strong&gt;files&lt;/strong&gt; property useful. One of the experiments I did was using it to provide a hero image for my blog. Currently, hero images from all blog posts come for a &lt;code&gt;Hero Image&lt;/code&gt; files property I have on my DB. In general, the process is quite straightforward. Here's an example with &lt;strong&gt;MarkdownRemark&lt;/strong&gt; that pulls in images for all notion pages, assuming that the &lt;strong&gt;files&lt;/strong&gt; property we need is called &lt;code&gt;Hero Image&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;allMarkdownRemark&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;remoteImage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="n"&gt;childImageSharp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="n"&gt;gatsbyImageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FIXED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But there are things you need to consider.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#embedding-files-via-links"&gt;
  &lt;/a&gt;
  ✅ Embedding files via links
&lt;/h1&gt;

&lt;p&gt;If you embed files via links, it should work out just fine with &lt;strong&gt;MarkdownRemark&lt;/strong&gt; or &lt;strong&gt;MDX&lt;/strong&gt;. &lt;code&gt;gatsby-source-notion-api&lt;/code&gt; will create remote file nodes for those images. You can then use Sharp to transform them and do any other stuff you would do with images in Gatsby. All you need to do is to query for the image and put it where you need it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#uploading-files"&gt;
  &lt;/a&gt;
  💥 Uploading files
&lt;/h1&gt;

&lt;p&gt;If you upload files, things get a bit trickier. The thing is that Notion API returns only the name of the asset if you upload it, not the URL where it resides. There are two ways you can bypass this&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storing-attached-images-in-the-project-repository"&gt;
  &lt;/a&gt;
  Storing attached images in the project repository
&lt;/h2&gt;

&lt;p&gt;You could potentially attach images to a Notion page and then also copy them to your project folder, and then find the Notion attachment in the list of files you have in the repo, but this approach is quite funny and I didn't try it out. Maybe it could help in some cases. But, again, maintain it here and there if you do this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uploaded-files-are-in-fact-links"&gt;
  &lt;/a&gt;
  Uploaded files are in fact links
&lt;/h2&gt;

&lt;p&gt;After you attach a file, you can use the kebab menu (three dots) near the image and click "View original". It will open your image in a new tab. All you need to do is to copy the link and attach it to the same property. It is observed that you can remove the initial file afterward and the embedded link will still lead you to the file correctly. I don't know for how long they cache assets and if they remove them when you remove the attachment or not, but for now and for me it works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPD:&lt;/strong&gt; Don't remove the file, simply move it down in the attachments, so that attachments as links are always on top.&lt;/p&gt;

&lt;p&gt;After you have a file attached as a link, you can be sure that everything will work. 🎉&lt;/p&gt;

</description>
      <category>gatsby</category>
      <category>javascript</category>
      <category>notion</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>4 Best Practices for Writing Meaningful Code Comments</title>
      <author>Alex Omeyer</author>
      <pubDate>Fri, 04 Jun 2021 09:09:19 +0000</pubDate>
      <link>https://dev.to/stepsize/4-best-practices-for-writing-meaningful-code-comments-c08</link>
      <guid>https://dev.to/stepsize/4-best-practices-for-writing-meaningful-code-comments-c08</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-bother-writing-code-comments"&gt;
  &lt;/a&gt;
  Why bother writing code comments?
&lt;/h2&gt;

&lt;p&gt;In most cases, you aren’t the only person working on the same project or codebase. That means that other people get to read your code and have to understand it. That’s also true for the code comments you leave behind. Developers often write ‘quick and dirty’ comments without much context, leaving other developers clueless about what you’re trying to say. It’s a bad practice that creates only more confusion than clarifies things.&lt;/p&gt;

&lt;p&gt;So, yes - you should be bothered with writing meaningful code comments to help other developers. A code comment that describes the function, the reasoning behind the function, and its input and output will speed up the learning process of other developers. Especially for junior developers, this information comes in handy when learning the code.&lt;/p&gt;

&lt;p&gt;On the other hand, code comments lead us to the discussion whether we should write them? There’s a significant group of developers that advocate against writing code comments. The reason being that code should be self-explanatory. If another developer can’t understand the purpose of your code by looking at it, it’s bad code. This might be true, but think about the little effort code commenting requires and the potential benefits it returns.&lt;/p&gt;

&lt;p&gt;Plus, code comments are valuable to boost the onboarding process for any developer.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the different types of code comments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#different-types-of-code-comments"&gt;
  &lt;/a&gt;
  Different Types of Code Comments
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Documentation comments&lt;/strong&gt; - The main purpose of these comments is to quickly clarify the purpose of a file or component. Instead of reading a component’s entire code to understand what it does, you can include a code comment at the top of your &lt;code&gt;index&lt;/code&gt; file to explain what the component does.&lt;/p&gt;

&lt;p&gt;I’m not a big fan of this type of code commenting because they make your code very noisy. I think that these types of architecture comments should live within your internal documentation where you can maintain and discuss your project’s architecture in a centralised location. Yet, for Open Source projects, it does bring value to guide people who want to contribute to the project. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Function comments&lt;/strong&gt; - Function comments are the most useful type of comments and can be automatically generated in many languages. They describe the purpose of the function, which parameters it accepts, and what output it generates. It’s often sufficient to describe only public functions because developers using your code won’t interact with private functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @desc Creates a welcome message
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Logic comments&lt;/strong&gt; - Logic comments are comments within functions to clarify complex code paths. As you could have guessed, it’s an evident code smell or technical debt indicating that your code is far too complex.&lt;/p&gt;

&lt;p&gt;On top of that, logic comments often provide too much detailed information. The level of detail will create more chaos and decrease the readability of your code. Here’s an example of a code comment that’s too detailed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// store today's date to calculate the elapsed time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#code-comments-4-best-practices"&gt;
  &lt;/a&gt;
  Code Comments: 4 Best Practices
&lt;/h2&gt;

&lt;p&gt;Here’s a list of four best practices for code commenting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-make-use-of-code-annotations-or-tags"&gt;
  &lt;/a&gt;
  1/ Make use of code annotations or tags
&lt;/h3&gt;

&lt;p&gt;Many programming languages define standards for code commenting. Java uses &lt;a href="https://www.oracle.com/be/technical-resources/articles/java/javadoc-tool.html"&gt;Javadoc&lt;/a&gt;, while JavaScript uses the &lt;a href="https://jsdoc.app/index.html"&gt;JSDoc&lt;/a&gt; code commenting system that’s supported by many documentation generation tools.&lt;/p&gt;

&lt;p&gt;For functions, you should include the following code tags:&lt;br&gt;
@desc - Write down a description for your function&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/param"&gt;@param&lt;/a&gt;
 - Describe all input parameters the function accepts. Make sure to define the input types.&lt;br&gt;
@returns - Describe the returned output. Make sure to define the output type.&lt;br&gt;
@throws - Describe the error type the function can throw&lt;br&gt;
@example - Include one or multiple examples that show the input and expected output&lt;/p&gt;

&lt;p&gt;Here’s an example from the &lt;a href="https://github.com/lodash/lodash/blob/master/chunk.js"&gt;Lodash code&lt;/a&gt; for the &lt;code&gt;chunk&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Creates an array of elements split into groups the length of `size`.
 * If `array` can't be split evenly, the final chunk will be the remaining
 * elements.
 *
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to process.
 * @param {number} [size=1] The length of each chunk
 * @returns {Array} Returns the new array of chunks.
 * @example
 *
 * chunk(['a', 'b', 'c', 'd'], 2)
 * // =&amp;gt; [['a', 'b'], ['c', 'd']]
 *
 * chunk(['a', 'b', 'c', 'd'], 3)
 * // =&amp;gt; [['a', 'b', 'c'], ['d']]
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// logic&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-write-down-why-you-are-doing-something"&gt;
  &lt;/a&gt;
  2/ Write down why you are doing something
&lt;/h3&gt;

&lt;p&gt;Many developers use a comment to describe what their code is doing. This is not necessarily wrong. However, don’t forget to include why you have created a particular function or component. This information is called context. The context is essential to give developers more insights into the design decisions behind a function or component. This context is crucial when other developers want to make changes against your function or component.&lt;/p&gt;

&lt;p&gt;You often see code comments that use the function name in the function description. As you could have guessed, such a comment doesn’t add value. Context refers to adding information that you can’t extract from the function name or its input variables. Below you see a bad example of code commenting without context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Sets the label property of a new form.
 *
 * @param label text for label of form
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setFormLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// logic&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Pro tip: try to use a free &lt;a href="https://bit.ly/3vVZsis"&gt;Stepsize VSCode extension&lt;/a&gt; to add code context for tech debt, refactoring, or TODOs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#3-dont-refer-to-other-documents-or-comments"&gt;
  &lt;/a&gt;
  3/ Don’t refer to other documents or comments
&lt;/h3&gt;

&lt;p&gt;It’s not a good idea to refer to other code comments or internal documents that clarify a function or component. If a developer wants to scan code to get a better understanding quickly, the code comments should be clear.&lt;/p&gt;

&lt;p&gt;You don’t want to spend time searching for other code comments or reading extensive design documents. If you think you need to add a document to clarify a code’s purpose, it’s a red flag for bad code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Sets the label property of a new form.
 *
 * @see {@link https://myinternaldocument.com}
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setFormLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// logic&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-write-comments-while-writing-code"&gt;
  &lt;/a&gt;
  4/ Write comments while writing code
&lt;/h3&gt;

&lt;p&gt;Writing comments while writing code might sound obvious, yet many developers cheat against this rule. I’ve been guilty of this myself. In some situations, I’ve completed my code before writing any code comments to submit my pull request for review. &lt;/p&gt;

&lt;p&gt;You might forget part of the logic you wrote in this situation, leading to lower quality code comments. It’s especially true if you work multiple days on a single pull request. It’s best to write comments when you complete a function or module.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-commenting-is-an-art"&gt;
  &lt;/a&gt;
  Code Commenting Is an Art?
&lt;/h2&gt;

&lt;p&gt;If you care about &lt;a href="https://www.stepsize.com/blog/the-engineers-complete-guide-to-code-quality?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=1"&gt;code quality&lt;/a&gt;, take time to write meaningful code comments. It takes some practice but can be quickly learned. The key concept to remember is adding context to your code comments. Describe the why behind the code you’ve created, not only the apparent information. Developers don’t need the ‘what’ because they can read your code, input parameters, and output to better understand the code.&lt;/p&gt;

&lt;p&gt;Remember to keep your code comments as concise as possible. You don’t want to spend more time writing code comments than writing code.&lt;/p&gt;

&lt;p&gt;This post was written by Michiel Mulders. Michiel is a passionate blockchain developer who loves writing technical content. Besides that, he loves learning about marketing, UX psychology, and entrepreneurship. When he’s not writing, he’s probably enjoying a Belgian beer!&lt;br&gt;
Also published on: &lt;a href="https://www.stepsize.com/blog?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=1"&gt;Managing Technical Debt&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>codereview</category>
      <category>refactorit</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Food delivery API-What should be used?</title>
      <author>Adamo Digital</author>
      <pubDate>Fri, 04 Jun 2021 09:01:57 +0000</pubDate>
      <link>https://dev.to/adamodigitalco/food-delivery-api-what-should-be-used-gkf</link>
      <guid>https://dev.to/adamodigitalco/food-delivery-api-what-should-be-used-gkf</guid>
      <description>&lt;p&gt;API integrations can be the most beneficial alternative in &lt;a href="https://adamodigital.com/on-demand-food-delivery-app"&gt;food delivery software&lt;/a&gt; development, which helps to speed up the development process and reduce cost.&lt;br&gt;
Research by Business Insider shows that the food delivery service is among the fastest-growing businesses currently. &lt;/p&gt;

&lt;p&gt;Its market had been worth more than US$38 billion by the end of 2020. And there are still many rooms for restaurant businesses to jump in on the trend of these on-demand deliveries, particularly in the niche of restaurant-to-customer service.&lt;/p&gt;

&lt;p&gt;According to a statistic, a restaurant needs to pay an average of US$25,000 to develop its own food delivery &lt;a href="https://adamodigital.com/our-services"&gt;software development&lt;/a&gt; from scratch. Unfortunately, not all of them can afford that much in these rough times. By using existing food delivery APIs of third-party providers, restaurants can still come up with a full-functional delivery app for a lower cost.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8Jh2W8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o1fv3fuyhbvkto26l3h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8Jh2W8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o1fv3fuyhbvkto26l3h.jpg" alt="on-demand food delivery app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-api-integrations-in-software-development"&gt;
  &lt;/a&gt;
  What is API integrations in software development?
&lt;/h2&gt;

&lt;p&gt;API stands for Application Programming Interface. They are designed for systems and applications to work. Simply put, API is a set of subroutine definitions and protocols that allow performing specific functions of applications.&lt;/p&gt;

&lt;p&gt;In other words, they are defined as communicating methods between software components. When users request something from the app via an interface, the application system will send the response data to an API. An API then interprets this returned data into information that users can understand. &lt;/p&gt;

&lt;p&gt;In &lt;a href="https://adamodigital.com/our-services"&gt;custom software development&lt;/a&gt; practice, API development services are to support integration. &lt;a href="https://adamodigital.com/blog/open-api-platform-in-software-development/"&gt;API integration&lt;/a&gt; is the seamless connection and communication between two or more programs, systems, applications to exchange data via their APIs. It allows organizations to automate the data sharing process among current systems without human interruption. The solution helps to enhance the flexibility of services and information delivery and simplify the content embedding from different apps and sites. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-benefits-of-using-api-in-food-delivery-systems"&gt;
  &lt;/a&gt;
  The benefits of using API in food delivery systems
&lt;/h3&gt;

&lt;p&gt;Operators need to access data on the levels of customers, products, and inventory to manage orders and process deliveries smoothly and efficiently. Food delivery service API integration helps to achieve ongoing data interchange from the order online website to the cart. &lt;/p&gt;

&lt;p&gt;The food delivery API supports the integrated &lt;a href="https://adamodigital.com/restaurant-pos-systems"&gt;POS system&lt;/a&gt;, which consolidates orders from all delivery platforms into one &lt;a href="https://adamodigital.com/food-beverage-software-development"&gt;restaurant management app&lt;/a&gt; for process and tracking purposes. &lt;/p&gt;

&lt;p&gt;Small to medium-sized food businesses are likely to outsource the team to save operational costs regarding the delivery fleet. To meet that need, some food delivery service API also manages the delivery shippers on behalf of restaurants. &lt;/p&gt;

&lt;p&gt;Besides, the advantages of using API is to provide a data analytics tool for business owners to monitor and analyze delivery in an attempt to increase profitability. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-popular-food-delivery-app-api-providers"&gt;
  &lt;/a&gt;
  Top popular food delivery app API providers
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#google-maps"&gt;
  &lt;/a&gt;
  Google Maps
&lt;/h3&gt;

&lt;p&gt;Google Maps platform provides food ordering API solutions for answering queries about real-time location information, which are divided into three groups of product:&lt;/p&gt;

&lt;p&gt;• Maps API for static and dynamics maps, street view (imagery and 360° views) features&lt;br&gt;
• Routes API for high-quality directions for different transportations, roads with real-time traffic updates, and distance matrix features &lt;br&gt;
• Places API for Current Place, Places Library, Find Places, Autocomplete, Geolocation, Geocoding, and Time Zone features &lt;/p&gt;

&lt;p&gt;It requires a billing account of Google Cloud Platform to access the Google Maps API library and get the API keys. Once you set up successfully, you will get a $300 free trial of the Google Cloud Platform and a recurring $200 monthly credit for the Google Maps Platform. Google charges $2 to $30 for every 1,000 queries per day, depending on each feature, and you only have to pay for what you use. It means that it’s almost free for food businesses at small to medium size. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uber-eats"&gt;
  &lt;/a&gt;
  Uber Eats
&lt;/h3&gt;

&lt;p&gt;UberEats API is one of the simplest ways for new restaurants to join the food delivery market. The API can be integrated directly with the POS system for small restaurants to manage menus and orders. Additionally, business owners will also make use of the vast network of delivery partners from Uber Eats. &lt;br&gt;
UberEats API offers a revenue-sharing model for pricing, ranging from 15% to 40% for every successful order. This might pay off for a large-scale business as UberEats can reach much more significance than many other APIs do. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grubhub"&gt;
  &lt;/a&gt;
  GrubHub
&lt;/h3&gt;

&lt;p&gt;The GrubHub API provides information on over 115,000 all-sized restaurants, exclusively for the United States market, to a limited extent. It gives access to updating information such as menu items, operating times, or restaurant addresses. &lt;/p&gt;

&lt;p&gt;GrubHub also implements the revenue-sharing model. Compared to Uber Eats APIs, its commission fees are slightly lower at 10 to 30%, but not coming with logistics. That said, restaurants will have to work with third-party delivery partners. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#foursquare"&gt;
  &lt;/a&gt;
  Foursquare
&lt;/h3&gt;

&lt;p&gt;Foursquare is a social networking application for search and discovery, providing personalized suggestions on activities and places of interest. Its API tool kit is a valuable investment if the major of your target customers are using the app frequently.&lt;/p&gt;

&lt;p&gt;Foursquare API offers a pricing package starting at $599, which seems to be a high cost for most small-sized businesses. Developers need to create an account from the Foursquare website to get the necessary Client ID and Secret Key. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#freshchat"&gt;
  &lt;/a&gt;
  Freshchat
&lt;/h3&gt;

&lt;p&gt;The Freshchat API tool kit allows developers to add a live chat box to the application by using Javascript code. The live messaging service on this API for food delivery, designed by Freshworks, helps restaurants to engage more with website visitors, resulting in converting them into customers. &lt;/p&gt;

&lt;p&gt;Freshchat offers a 21-day free trial with a free starter account for 10,000 website visitors and ten team members. Upgrading to the premium account for unlimited contacts will cost $15 monthly with annual billing. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#onesignal"&gt;
  &lt;/a&gt;
  Onesignal
&lt;/h3&gt;

&lt;p&gt;This API food ordering API is used to add push notifications for alerting users of updates and news via the application. &lt;/p&gt;

&lt;p&gt;The tool kit offers a free version with limited subscribers of 30,000. Beyond, businesses will need to pay $99 per month for the service. This offer is still quite enough for most companies on a small scale. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final words&lt;/strong&gt;&lt;br&gt;
The food delivery business is such a fast-growing trend that no restaurants should ignore it. Partnering with &lt;a href="https://adamodigital.com/"&gt;dedicated software development company&lt;/a&gt; to develop your very first restaurant management system for food delivery service, do not forget to learn and make use of existing API for food delivery to save your valuable cost and time.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Back to Basic: UI Design Fundamental for Developers</title>
      <author>Theodorus Clarence</author>
      <pubDate>Fri, 04 Jun 2021 08:33:48 +0000</pubDate>
      <link>https://dev.to/theodorusclarence/back-to-basic-ui-design-fundamental-for-developers-m41</link>
      <guid>https://dev.to/theodorusclarence/back-to-basic-ui-design-fundamental-for-developers-m41</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;According to Gary Simon, there are 7 UI Design Fundamental that has to be met&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These 7 fundamentals were heavily inspired by &lt;a href="https://www.youtube.com/watch?v=tRpoI6vkqLs"&gt;Design Course - The 2020 UI Design Fundamentals Crash Course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The 7 UI Design Fundamentals are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Whitespace&lt;/li&gt;
&lt;li&gt;Alignment&lt;/li&gt;
&lt;li&gt;Contrast&lt;/li&gt;
&lt;li&gt;Scale&lt;/li&gt;
&lt;li&gt;Typography&lt;/li&gt;
&lt;li&gt;Color&lt;/li&gt;
&lt;li&gt;Visual Hierarchy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will give you some ilustrations to elaborate on,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-white-space"&gt;
  &lt;/a&gt;
  1. White Space
&lt;/h2&gt;

&lt;p&gt;By having enough whitespace, our design will not be crowded. We need to give enough breathing room to our design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0FsFyAYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/veoehri6r4s5z8o6a7vk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0FsFyAYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/veoehri6r4s5z8o6a7vk.png" alt="alt text"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Give enough padding and margin to your design, also make sure that you give consistent number on them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-alignment"&gt;
  &lt;/a&gt;
  2. Alignment
&lt;/h2&gt;

&lt;p&gt;Alignment means that your design aligns perfectly. By using this fundamental, your design will look more neat and natural.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Unilv3vW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt1ma93iiyi8tq3a54lr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Unilv3vW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt1ma93iiyi8tq3a54lr.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usually, when developing, we can add a container to give constrained space by using &lt;code&gt;max-width&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
   &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="err"&gt;Width&lt;/span&gt; &lt;span class="err"&gt;can&lt;/span&gt; &lt;span class="err"&gt;also&lt;/span&gt; &lt;span class="err"&gt;changed&lt;/span&gt; &lt;span class="err"&gt;with&lt;/span&gt; &lt;span class="err"&gt;padding&lt;/span&gt; &lt;span class="err"&gt;--&amp;gt;&lt;/span&gt;
     &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

     &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="err"&gt;you&lt;/span&gt; &lt;span class="err"&gt;can&lt;/span&gt; &lt;span class="err"&gt;add&lt;/span&gt; &lt;span class="err"&gt;background&lt;/span&gt; &lt;span class="err"&gt;color&lt;/span&gt; &lt;span class="err"&gt;here&lt;/span&gt; &lt;span class="err"&gt;--&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-contrast"&gt;
  &lt;/a&gt;
  3. Contrast
&lt;/h2&gt;

&lt;p&gt;Contrast is the color difference between text and the background. You need to have enough contrast so it will be easier to read. Contrast needs to meet WCAG 2.0 rules, you can use &lt;a href="https://contrastchecker.com/"&gt;this tool&lt;/a&gt; to check the WCAG. There is also a figma extension which is &lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwj97tzEzM_uAhUIfSsKHSGLCE8QFjAAegQIAhAC&amp;amp;url=https%3A%2F%2Fwww.figma.com%2Fcommunity%2Fplugin%2F733159460536249875&amp;amp;usg=AOvVaw0QYyNcsQnWIqfZevLmZSvf"&gt;A11y - color contrast checker&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fun fact: A11y stands for Accessibility, 11 was taken from letters between A and y.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8g_szu6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eut4uxtmjt7slc6p3z2t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8g_szu6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eut4uxtmjt7slc6p3z2t.png" alt="alt text"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-scale"&gt;
  &lt;/a&gt;
  4. Scale
&lt;/h2&gt;

&lt;p&gt;Scale is the font-size that you use. Choose a font-size that is not too big and not too small. The default is &lt;code&gt;16px&lt;/code&gt;. &lt;strong&gt;Contrast&lt;/strong&gt; and &lt;strong&gt;Scale&lt;/strong&gt; plays a big role in WCAG 2.0 rules.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dROqBuGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cpfunw2h5j7lzg4z288.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dROqBuGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cpfunw2h5j7lzg4z288.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don't make them squint&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E7LyaIrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://theodorusclarence.com/images/blogs/btb-ui-fundamental/squint.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E7LyaIrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://theodorusclarence.com/images/blogs/btb-ui-fundamental/squint.gif" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-typography"&gt;
  &lt;/a&gt;
  5. Typography
&lt;/h2&gt;

&lt;p&gt;Typography is the font-family that we choose. Don't use too much font, usually, I only use 1 or 2 fonts. Use fonts that can complement each other&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MxIE2dtT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1x7orhd4i5rbp72mg6n0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MxIE2dtT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1x7orhd4i5rbp72mg6n0.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pro tip: Don't use comic sans ;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9WQXJ7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7psm4z5odalfdt13kkn1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9WQXJ7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7psm4z5odalfdt13kkn1.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-color"&gt;
  &lt;/a&gt;
  6. Color
&lt;/h2&gt;

&lt;p&gt;The color you choose for your website will affect the design looks. Don't use too much color. There are some design system that recommends using 3 colors which are primary, secondary, and accent color.&lt;/p&gt;

&lt;p&gt;You can also use a website that gives you color recommendation like &lt;a href="https://mycolor.space/"&gt;mycolor.space&lt;/a&gt; and &lt;a href="https://coolors.co"&gt;coolors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---gg2j4xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zufc5k6h5omjz6m3vts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---gg2j4xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zufc5k6h5omjz6m3vts.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-visual-hierarchy"&gt;
  &lt;/a&gt;
  7. Visual Hierarchy
&lt;/h2&gt;

&lt;p&gt;Visual Hierarchy is very important to direct the eye of the user to the flow of the website that you want to make. Give a bigger font-size if you want them to see it first.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xPNRlHhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utrl5tb8a6c5ikginr1e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xPNRlHhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utrl5tb8a6c5ikginr1e.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;User of a website didn't really read, they skim.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ne0iIFvl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8f3bh3uwtuvi74h5yjp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ne0iIFvl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8f3bh3uwtuvi74h5yjp.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;There it is the 7 UI Design Fundamental, hopefully, this blog can make your design improve!&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally posted on &lt;a href="https://theodorusclarence.com/?ref=devto"&gt;my personal site&lt;/a&gt;, find more &lt;a href="https://theodorusclarence.com/blog?ref=devto"&gt;blog posts&lt;/a&gt; and &lt;a href="https://theodorusclarence.com/library?ref=devto"&gt;code snippets library&lt;/a&gt; I put up for easy access on my site 🚀&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>ux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>3 steps to get a high-paying job as a software developer without losing your mind</title>
      <author>Dragos Nedelcu</author>
      <pubDate>Fri, 04 Jun 2021 07:59:57 +0000</pubDate>
      <link>https://dev.to/dragosgn/3-steps-to-get-a-high-paying-job-as-a-software-developer-without-losing-your-mind-3pa5</link>
      <guid>https://dev.to/dragosgn/3-steps-to-get-a-high-paying-job-as-a-software-developer-without-losing-your-mind-3pa5</guid>
      <description>&lt;p&gt;Are you familiar with this?&lt;/p&gt;

&lt;p&gt;If you are an ambitious software developer pushing your career, you probably experience this daily:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You want to improve your skills but feel lost in the amount of information out there&lt;/li&gt;
&lt;li&gt;You are afraid of technical challenges, get nervous and underperform&lt;/li&gt;
&lt;li&gt;You apply to jobs and get some interviews but is usually not the “hottest” companies&lt;/li&gt;
&lt;li&gt;Your motivation and self-esteem fluctuate, so it is hard to be consistent in your process&lt;/li&gt;
&lt;li&gt;You are stuck, lack direction and have little opportunities for growth&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#well-there-is-a-reason-for-that"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Well, there is a reason for that:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;You lack a system.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You lack a systemised approach to building your career, an approach that can cut through the noise. A system that works regardless of your years of experience, whether you master or not the “hottest” tech out there or of how the economy goes.&lt;/p&gt;

&lt;p&gt;Let me tell you a little secret...&lt;/p&gt;

&lt;p&gt;Suppose you want to realise the full potential of your developer career. To be paid generously for your skills and to never worry about money again. Then, you must build a system around it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-does-this-matter"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why does this matter?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Because, here is the thing: the lack of a system is the reason why most software developers are literally stuck in their careers. The reason why right now they just execute in a sprint, like a “cog in a machine”. The reason why they had to settle for mediocre average paying jobs, knowing they could do better.&lt;/p&gt;

&lt;p&gt;A system helps you stay committed and holds you accountable for what you do. A system delivers predictable results.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can’t get a high-paying developer job by improvising.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ve been there as a developer building my career.&lt;/p&gt;

&lt;p&gt;After long nights doing all kind of courses and asking dozens of tech leaders for advice, I have built this system for myself. It allowed me to leave my “soul-crushing” job, enjoy the benefits of being a tech professional and get my life back. Now, I want to share it with you so it can help as many people as possible.&lt;/p&gt;

&lt;p&gt;Here are three proven steps that are currently helping our clients get high-paying developer jobs:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-technical-mastery"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 1 - Technical Mastery&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You can’t build castles on sand. And you can’t build a successful career based on superficial technical skills. You must dominate programming fundamentals. That means a solid understanding of language specifics, design patterns and programming paradigms. It means learning professional software development disciplines such as testing (unit, integration and e2e), continuous deployment and infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Technical competence will make you more productive and increase your self-confidence as a professional.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-specialisation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 2 - Specialisation&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Step 2 - Specialisation&lt;/p&gt;

&lt;p&gt;Jack of all trades, master of none. You must focus on a specific programming language and stack. Why? First and foremost, because time is of the essence. Software engineering disciplines are many and in-depth, try to know it all will burn you out at best.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Specialisation leads to proficiency, and proficiency impresses potential employers and clients.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pick a learning path (frontend, backend, DevOps) and become damn good at it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-get-visible-and-start-applying"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 3 - Get visible and start applying.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You might think, oh now that I am technically well-rounded opportunities will fall into my lap. And that is partially true. You will get amazing opportunities by simply doing that. But to get the “creme de la cream” of tech jobs, to work for top tech companies (fast-growing startups or big tech) you will still need to hustle a bit.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You must optimise your professional image with surgical precision.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Afterwards, go out there, network aggressively and take the lead when selling yourself.&lt;/p&gt;

&lt;p&gt;This is the most effective way to get a high-paying job as a software developer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forget the hot and shiny frameworks&lt;/li&gt;
&lt;li&gt;Forget dozens of online courses&lt;/li&gt;
&lt;li&gt;Forget going back to school&lt;/li&gt;
&lt;li&gt;Forget contributing to open source&lt;/li&gt;
&lt;li&gt;Forget hoping and guessing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these things will become relevant and along the way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-cure-to-your-frustration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The cure to your frustration.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Setting up such a system will put your developer career on auto-pilot. No more long hours, no more spending money and time on outdated online courses. No more guessing and no more hopping. This will automatically lead you better opportunities, better projects and a better life.&lt;/p&gt;

&lt;p&gt;Sounds challenging?&lt;/p&gt;

&lt;p&gt;Yes, but so is everything else worth achieving.&lt;/p&gt;

&lt;p&gt;At &lt;strong&gt;CodeWithDragos&lt;/strong&gt; we used this system for dozens of developers, and they are consistently getting results.&lt;/p&gt;

&lt;p&gt;Last week one of our clients got her first developer job (&lt;strong&gt;with a salary 30% higher than the market average&lt;/strong&gt;) for a well-known tech company. Without a portfolio, a website or a blog. Those things are part of week 7 and 8 of the program.&lt;/p&gt;

&lt;p&gt;As you are reading this article, you are probably also a software developer or an aspiring one. Maybe you want to get a better job, to become a senior or even go freelance and have your own thing.&lt;/p&gt;

&lt;p&gt;If that is the case: you will definitely profit from executing those 3 steps I showed you. This proven, step-by-step approach will get you closer to your goals.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-lets-be-truly-honest"&gt;
  &lt;/a&gt;
  &lt;strong&gt;But, let’s be truly honest.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Reading a simple article, getting inspired up and going back about your day won’t get you the results you want. If you truly want to build the developer career you dream of, then click on the link below and schedule a &lt;strong&gt;FREE consultation call&lt;/strong&gt; with us.&lt;/p&gt;

&lt;p&gt;The only thing you have to do is click the link below and apply.&lt;/p&gt;

&lt;p&gt;I look forward to consult you personally soon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#click-here-to-apply-now"&gt;
  &lt;/a&gt;
  &lt;a href="//codewithdragos.com"&gt;Click here to apply now!&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Together we will analyze your situation and build a step-by-step plan to help you get that developer job you dream of.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We usually get in touch with you within 24 hours.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dragos Nedelcu&lt;/p&gt;

&lt;p&gt;Founder at CodeWithDragos&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Python filter() function</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 04 Jun 2021 07:46:15 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/python-filter-function-17f4</link>
      <guid>https://dev.to/dailydevtips1/python-filter-function-17f4</guid>
      <description>&lt;p&gt;I've recently learned that Python has built-in &lt;a href="https://daily-dev-tips.com/posts/javascript-filter-method/"&gt;global functions like JavaScript&lt;/a&gt;.&lt;br&gt;
Today we'll be looking into the &lt;code&gt;filter()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;In general, filters are used to filter a &lt;a href="https://daily-dev-tips.com/posts/data-types-in-python/#heading-sequence-type-data-type-in-python"&gt;sequence set&lt;/a&gt;, for instance, a list.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#filter-function-in-python"&gt;
  &lt;/a&gt;
  Filter() function in Python
&lt;/h2&gt;

&lt;p&gt;Let's first have a look at the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To give more details to this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;result&lt;/code&gt;: Is the output. This will be a filtered sequence. So basically the original input, but without some items&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;filter&lt;/code&gt;: Is the Python built-in function&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;myFunction&lt;/code&gt;: This will be a custom function we are going to build&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;input&lt;/code&gt;: This is the original sequence we want to filter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll make a list with numbers. Let's say we want to return only the numbers higher than 10.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# [11, 23, 105]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, our input array includes different numbers. We create a myFunction that serves as the filter function.&lt;br&gt;
There we say return if the number is bigger than 10 include that number.&lt;/p&gt;

&lt;p&gt;Then we call the filter on our input and print out our new list returning in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[11, 23, 105]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Already superb, but we can even use &lt;a href="https://daily-dev-tips.com/posts/python-lambda-functions/"&gt;lambda functions&lt;/a&gt; to make it easier!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this will result in the same result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>This article has 6 positive reactions and 2 comments</title>
      <author>Malte Riechmann</author>
      <pubDate>Fri, 04 Jun 2021 07:43:51 +0000</pubDate>
      <link>https://dev.to/visuellverstehen/this-article-has-positive-reactions-and-comments-ol3</link>
      <guid>https://dev.to/visuellverstehen/this-article-has-positive-reactions-and-comments-ol3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Using the DEV API the title of this article gets automatically updated every 60 seconds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#addicted-to-numbers"&gt;
  &lt;/a&gt;
  Addicted to numbers
&lt;/h2&gt;

&lt;p&gt;I started blogging on DEV only some months ago. You could say, I am quite new to all of this. After writing an article I find myself frequently checking out the numbers. It seems like I am a bit addicted to those. I think some of you are alike.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We share an addiction. We're approval junkies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;— &lt;a href="https://www.youtube.com/watch?v=GkEE3gRX0kQ"&gt;Jake Green, Revolver&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is not why I was starting this and I am sure it is not healthy. So I will try to stop and instead make this a bit of fun. Let's play around with the numbers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apis-are-the-future"&gt;
  &lt;/a&gt;
  APIs are the future
&lt;/h2&gt;

&lt;p&gt;Back in 2010, I saw a &lt;a href="https://twitter.com/smashingmag/status/9646126079"&gt;tweet&lt;/a&gt; from Smashing Magazine asking about the future of the web. And I answered »&lt;a href="https://twitter.com/malteriechmann/status/9646229572"&gt;APIs&lt;/a&gt;«, which is the same way I would answer today — 11 years later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-have-fun"&gt;
  &lt;/a&gt;
  Let's have fun
&lt;/h2&gt;

&lt;p&gt;It makes so much fun working with well-implemented APIs and I was happy to find the &lt;a href="https://docs.forem.com/api/"&gt;DEV API&lt;/a&gt; as one of those.&lt;/p&gt;

&lt;p&gt;My idea was simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get the properties of this article.&lt;/li&gt;
&lt;li&gt;Update the title using two of the properties (&lt;code&gt;positive_reactions_count&lt;/code&gt; and &lt;code&gt;comments_count&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-source"&gt;
  &lt;/a&gt;
  The source
&lt;/h2&gt;

&lt;p&gt;I use PHP, which is one of my favorite programming languages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-article-properties"&gt;
  &lt;/a&gt;
  Get article properties
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getArticleProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$articleId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Prepare URL&lt;/span&gt;
    &lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://dev.to/api/articles/'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$articleId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Prepare headers&lt;/span&gt;
    &lt;span class="nv"&gt;$headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'api-key: 1234567890abcdef'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Prepare method&lt;/span&gt;
    &lt;span class="nv"&gt;$method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Execute request&lt;/span&gt;
    &lt;span class="nv"&gt;$curlHandle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;curl_init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curlHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curlHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_HTTPHEADER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$headers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curlHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_CUSTOMREQUEST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curlHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_RETURNTRANSFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$response&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;curl_exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curlHandle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;curl_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curlHandle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;json_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#update-article-title"&gt;
  &lt;/a&gt;
  Update article title
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;updateArticleTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$articleId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$articleTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Prepare URL&lt;/span&gt;
    &lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://dev.to/api/articles/'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$articleId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Prepare payload&lt;/span&gt;
    &lt;span class="nv"&gt;$payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;json_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'article'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$articleTitle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Prepare headers&lt;/span&gt;
    &lt;span class="nv"&gt;$headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Content-Length: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$payload&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;'api-key: 1234567890abcdef'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Prepare method&lt;/span&gt;
    &lt;span class="nv"&gt;$method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'PUT'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Execute request&lt;/span&gt;
    &lt;span class="nv"&gt;$curlHandle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;curl_init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curlHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curlHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_HTTPHEADER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$headers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curlHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_CUSTOMREQUEST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curlHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_POSTFIELDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curlHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_RETURNTRANSFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$response&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;curl_exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curlHandle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;curl_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curlHandle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Prepare article ID&lt;/span&gt;
&lt;span class="nv"&gt;$articleId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;715066&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Get article properties using the API&lt;/span&gt;
&lt;span class="nv"&gt;$articleProperties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;getArticleProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$articleId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Update article title using the API&lt;/span&gt;
&lt;span class="nf"&gt;updateArticleTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$articleId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'This article has '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$articleProperties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'positive_reactions_count'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' positive reactions and '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$articleProperties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'comments_count'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' comments'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A cronjob is executing this as a CLI script every 60 seconds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration
&lt;/h2&gt;

&lt;p&gt;This article is heavily inspired by &lt;a href="https://www.youtube.com/watch?v=BxV14h0kFs0"&gt;an awesome YouTube video&lt;/a&gt; I saw earlier this year.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>writing</category>
      <category>meta</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Accept Cookies? Or Not?</title>
      <author>Enakshi Pal</author>
      <pubDate>Fri, 04 Jun 2021 07:40:22 +0000</pubDate>
      <link>https://dev.to/enakshi_pal/accept-cookies-or-not-ckj</link>
      <guid>https://dev.to/enakshi_pal/accept-cookies-or-not-ckj</guid>
      <description>&lt;p&gt;If you are a regular visitor on the internet, browsing through different websites might have made you come across the term “&lt;strong&gt;Cookies&lt;/strong&gt;”, right? There you are asked to click onto some buttons saying - ‘&lt;strong&gt;Accept Cookies&lt;/strong&gt;’ or ‘&lt;strong&gt;Manage Cookies&lt;/strong&gt;’ or sometimes ‘&lt;strong&gt;Ok, Got it!&lt;/strong&gt;’. &lt;/p&gt;

&lt;p&gt;Well, it’s not the Cookies we eat but, it is something without which we will be unable to login to websites.&lt;/p&gt;

&lt;p&gt;Feeling skeptical? Let us uncover the facts!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cookies are small packets of information or texts that a web browser stores on a user’s hard disk (here we say, computer).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In an easier way it can be said that Cookies allow a website to store information on your machine and later retrieve it once you re-visit the website in future, therefore giving you a better experience in browsing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hey, wait! But why do we exactly need cookies?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You need cookies because…&lt;/p&gt;

&lt;p&gt;•It keeps track of all your activities in a particular website, so that, you can be served in a more personalized way. You can think of cookies as your &lt;em&gt;note-taker, who logs and keeps track of your activities on a particular website.&lt;/em&gt; Sounds quite convincing, doesn’t it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But, Why are cookies important?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The several important jobs of the cookies are:&lt;/p&gt;

&lt;p&gt;•To keep you logged in by recognizing your computer whenever you visit the website.&lt;br&gt;
•To track your activities as you navigate the website (don’t worry, not for malicious attacks), to enable other facilities.&lt;br&gt;
•To improve the website’s usability.&lt;br&gt;
•To personalize so that the next time you visit the site.&lt;/p&gt;

&lt;p&gt;When you visit a website, you are asked to login. You fill the username and password section and login to that website. Now when you visit the website again, you are not asked for your username and password to login again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  WHY?
&lt;/h2&gt;

&lt;p&gt;Because, the website remembered you through the cookies which stored your username and password in form of ID (as every cookie has its own unique ID) on your machine.&lt;/p&gt;

&lt;p&gt;Now you might be curious about…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt;How do Cookies work?&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s understand this with an example.&lt;/p&gt;

&lt;p&gt;You visit a shopping website and there you are asked to click on &lt;strong&gt;‘&lt;em&gt;Accept Cookies&lt;/em&gt;’&lt;/strong&gt; or sometimes may be not. You click on that. Then the cookie starts tracking all of your activities on that website. &lt;/p&gt;

&lt;p&gt;Suppose you thought of purchasing a new phone. You were searching for one and you shortlisted few phones, matching your requirements.&lt;br&gt;
Let’s assume that you got caught up with some work and had to close the website in between.&lt;/p&gt;

&lt;p&gt;Later, when you start browsing some other website, the website eventually starts showing advertisements related to that item you shortlisted on the shopping website.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now, don’t you want to know, how did that happen?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The moment you opened the online shopping website, the website stored a cookie on your computer. The cookie kept on tracking all of your activities in that website from the beginning to the end, so that &lt;em&gt;the website can show you similar suggestions or even coupons which might help you get a cashback!&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;The above example showed one of the many ways, of how a cookie works.&lt;/p&gt;

&lt;p&gt;Let us have a break and look at these pictures below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sNTRifkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mln7bhhuj1li4nrqzms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sNTRifkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mln7bhhuj1li4nrqzms.png" alt="Fig. 1: Browsing Without Cookies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fig. 1: Browsing Without Cookies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qAm6JXzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtc1c2waxrwa4jx7m9oi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qAm6JXzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtc1c2waxrwa4jx7m9oi.png" alt="Fig. 2: Browsing With Cookies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fig. 2: Browsing With Cookies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Moving forward, we can see that, &lt;em&gt;Cookies have their types as well!&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-they-even-have-types"&gt;
  &lt;/a&gt;
  What? They even have types?
&lt;/h1&gt;

&lt;p&gt;Yes! &lt;/p&gt;

&lt;p&gt;It is not mandatory that only after you click on &lt;strong&gt;‘Accept Cookies’&lt;/strong&gt;, the cookies start working.&lt;/p&gt;

&lt;p&gt;No! These virtually invisible cookies are all very different from each other. You might find some other types as well but, as a casual user and also as a beginner, these are some of the common types you might want to explore:&lt;/p&gt;

&lt;p&gt;1.Session Cookies&lt;br&gt;
2.Persistent Cookies&lt;br&gt;
3.Third-Party Cookies&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Session Cookies&lt;/strong&gt;: These cookies are the &lt;strong&gt;Temporary Ones.&lt;/strong&gt; They memorize your online activities, as websites don’t really have any memory of their own. This is because of the session cookies, why you do not have to login to the same website after you close it, as your username and password gets stored because of the session cookies.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A good example of session cookies is online shopping website. You add an item to your cart and close the website. When you visit the website again, you see the item still present in your cart. Later when you check out, your cart becomes empty. &lt;br&gt;
Do you wonder, why? Because, the session cookies remembered your activity and worked accordingly.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Persistent Cookies:&lt;/strong&gt; They are also known as the &lt;strong&gt;First-party Cookies.&lt;/strong&gt; These cookies work by collecting data according to your preferences to improve your (user) experience. &lt;br&gt;
Curious?&lt;/p&gt;

&lt;p&gt;Let us understand with a short example.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Suppose you have logged in to Facebook for the first time, you don’t like its default settings. You changed the language settings and theme settings from default to dark theme, as dark theme is the new trend! Then you log out from Facebook. After a while when you login again, you find your changes are saved __as per your preferences and they are not lost&lt;/em&gt;&lt;em&gt;. All thanks to Persistent Cookies!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Party Cookies:&lt;/strong&gt; These cookies are placed on a website so that, the website could collect all the user data for the third party.&lt;br&gt;
Haven’t you wondered about the relevant ads you see on any website you visit?&lt;/p&gt;

&lt;p&gt;Okay let me break the ice for you.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You search for a product on the shopping website. After a while, when you open another website, you find the relevant products’ suggestions hovering around some corner of the website, don’t you?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that you are aware of what Cookies are, there types and also how they work, a question might arise, about &lt;strong&gt;SECURITY.&lt;/strong&gt; As we are always concerned about our security, hence we make sure that our data is in safe hands. BUT! If we are accepting cookies, should we not worry about our security?&lt;/p&gt;

&lt;p&gt;Yes, We should!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;These cookies basically track our activities to give us a user-friendly experience, __they are not harmful in themselves. They don’t infect computer with viruses or other malware&lt;/em&gt;_ but, some malicious actors can hijack those cookies and use it for their own purpose._&lt;/p&gt;

&lt;p&gt;Scared? No need to worry!&lt;/p&gt;

&lt;p&gt;To avoid this fraud, what should you do?&lt;/p&gt;

&lt;p&gt;To steer clear of this situation, it is recommended not to click BLINDLY on "Accept Cookies" and also it is necessary to keep your browser up to date as many cookie scams are designed to happen in outdated browsers.&lt;/p&gt;

&lt;p&gt;As a whole, Cookies are a good thing for a more pleasurable browsing experience.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Have a safe browsing!&lt;/em&gt; &lt;/p&gt;

</description>
      <category>productivity</category>
      <category>womenintech</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
