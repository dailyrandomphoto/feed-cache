<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Migrating to Snowflake, Redshift, or BigQuery? Use Datafold to Avoid these Common Pitfalls</title>
      <author>Michael Bogan</author>
      <pubDate>Wed, 15 Dec 2021 15:00:13 +0000</pubDate>
      <link>https://dev.to/mbogan/migrating-to-snowflake-redshift-or-bigquery-use-datafold-to-avoid-these-common-pitfalls-21cp</link>
      <guid>https://dev.to/mbogan/migrating-to-snowflake-redshift-or-bigquery-use-datafold-to-avoid-these-common-pitfalls-21cp</guid>
      <description>&lt;h3&gt;
  &lt;a href="#the-drive-to-migrate-data-to-the-cloud"&gt;
  &lt;/a&gt;
  The Drive to Migrate Data to the Cloud
&lt;/h3&gt;

&lt;p&gt;With data being valued &lt;a href="https://www.economist.com/leaders/2017/05/06/the-worlds-most-valuable-resource-is-no-longer-oil-but-data"&gt;more than oil&lt;/a&gt; in recent years, many organizations feel the pressure to become innovative and cost-effective when it comes to consolidating, storing, and using data. Although most enterprises are aware of big data opportunities, their existing infrastructure isn’t always capable of handling massive amounts of data.&lt;/p&gt;

&lt;p&gt;By migrating to modern cloud data warehouses, organizations can benefit from improved scalability, better price elasticity, and enhanced security. But even with all these benefits, many businesses are still reluctant to make the move.&lt;/p&gt;

&lt;p&gt;This is because these benefits are great &lt;em&gt;once you get there&lt;/em&gt;. However, before companies can get there, they must go through &lt;strong&gt;the dreaded data migration process, and that process can be painful—especially if you don’t have the right tools&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To create an effective cloud data migration strategy, companies often struggle to find answers to key areas like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gaps or anomalies in the source data&lt;/li&gt;
&lt;li&gt;Full or partial data migration&lt;/li&gt;
&lt;li&gt;Data owners and stakeholders&lt;/li&gt;
&lt;li&gt;Data lineage and dependencies&lt;/li&gt;
&lt;li&gt;Data consolidation process&lt;/li&gt;
&lt;li&gt;Automated regression testing for accuracy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With so many daunting concerns, it’s no wonder why many businesses delay their migration. And as a result, they miss out on the benefits of cloud data warehousing. &lt;/p&gt;

&lt;p&gt;In this article, &lt;strong&gt;we will show you how—with a tool like Datafold—you can avoid a lot of the stress and complexities of data migration to Snowflake&lt;/strong&gt;. While our focus in this article will be on Snowflake, a nearly identical approach can be used for migrating to Redshift, BigQuery, Databricks, or any other cloud data warehouse.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#snowflake-and-datafold-together"&gt;
  &lt;/a&gt;
  Snowflake and Datafold Together
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.snowflake.com/"&gt;Snowflake&lt;/a&gt; is a Software-as-a-Service (SaaS) data warehouse hosted entirely on cloud infrastructure. It has one of the &lt;a href="https://edition.cnn.com/2020/09/16/investing/snowflake-ipo/index.html"&gt;biggest software IPOs in history&lt;/a&gt;, and is available on all three major cloud platforms, offering unlimited scalability in both storage and computing. Another reason for its popularity is its simple maintenance. Unlike most legacy data solutions, Snowflake takes care of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;management&lt;/li&gt;
&lt;li&gt;upgrades&lt;/li&gt;
&lt;li&gt;tuning&lt;/li&gt;
&lt;li&gt;backups&lt;/li&gt;
&lt;li&gt;high availability&lt;/li&gt;
&lt;li&gt;indexing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It keeps its storage and computing layers separate, allowing significant cost-saving when not using computing power. Other attractive features include time travel, end-to-end encryption, and integration with popular identity providers.&lt;/p&gt;

&lt;p&gt;Snowflake also natively integrates with &lt;a href="https://docs.snowflake.com/en/user-guide/ecosystem-partner-connect.html"&gt;third-party applications&lt;/a&gt;, creating a rich ecosystem of analytical capabilities. &lt;a href="https://www.datafold.com/"&gt;Datafold&lt;/a&gt;, a modern data reliability platform, can make data migration to Snowflake a breeze. For example, Datafold can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intelligently profile data sources to show exactly where a piece of data is coming from and what it depends on&lt;/li&gt;
&lt;li&gt;Show before and after migration differences between source and target data sets.&lt;/li&gt;
&lt;li&gt;Use built-in machine learning models to automatically find data anomalies and alert users.&lt;/li&gt;
&lt;li&gt;Integrate with all major data warehouses—including Snowflake&lt;/li&gt;
&lt;li&gt;Be automated with tools like &lt;a href="https://www.getdbt.com/"&gt;dbt&lt;/a&gt; or &lt;a href="https://airflow.apache.org/"&gt;Apache Airflow&lt;/a&gt; or integrated into a continuous integration (CI) process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The important question is: &lt;strong&gt;Can Datafold help prevent potentially costly mistakes when migrating to a Snowflake data warehouse?&lt;/strong&gt; Let’s see.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typical-data-migration-mistakes-and-how-to-avoid-them"&gt;
  &lt;/a&gt;
  Typical Data Migration Mistakes and How to Avoid Them
&lt;/h3&gt;

&lt;p&gt;There are a few common mistakes DataOps teams make when migrating to a data warehouse.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ignoring-key-stakeholders"&gt;
  &lt;/a&gt;
  Ignoring Key Stakeholders
&lt;/h4&gt;

&lt;p&gt;Data engineering teams often rush through a migration project without consulting business stakeholders or including their feedback about data validation rules. This results in a flood of post-migration support tickets for erroneous or missing data. What’s worse is that some errors can go unnoticed.&lt;/p&gt;

&lt;p&gt;For example, let’s say the team is migrating billing data, but the migration team hasn’t properly consulted the finance team. The currency conversion rates in the legacy system might use a four decimal point rounding while the new system uses only three. The engineers may deem this acceptable, but for the finance team, a change like this can mean skewed numbers across all their reports and subsequent business impact. To address this issue, &lt;a href="https://www.datafold.com/#data-catalog"&gt;Data Catalog&lt;/a&gt; in Datafold can list all your data sources in one place. This allows you to search and filter to find a particular table, database, or column from thousands of databases across your environment. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X3sV58SV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdqkwrbq33qsfhmmc7n9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X3sV58SV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdqkwrbq33qsfhmmc7n9.png" alt="Data Catalog allows searching data assets" width="501" height="935"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you find a data asset, you can easily add descriptions and tags, and also set owners for the assets. This makes it easy to know who to contact if you need to make a change or what types of changes are acceptable. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FEZPHg8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axt7pqkzwi8tkwl5ht8n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FEZPHg8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axt7pqkzwi8tkwl5ht8n.png" alt="Data Catalog allows adding description, owner, and tags to data assets" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#taking-a-lift-and-shift-approach"&gt;
  &lt;/a&gt;
  Taking a “Lift and Shift” Approach
&lt;/h4&gt;

&lt;p&gt;Many businesses take a “lift and shift” approach to their data migration. This is where all the data from old systems is migrated to a new one with little to no validation, cleansing, or transformation. One of the reasons businesses take this approach is because they deem it too time-consuming to comb through huge datasets to find out what’s relevant and what’s not.&lt;/p&gt;

&lt;p&gt;Lift and shift can only work when you’re 100% sure that the old system’s data is correct and portable &lt;em&gt;as-is&lt;/em&gt; to the new system—and this is seldom the case. Consequently, you risk migrating incorrect or duplicate data and paying for its storage. When working with TBs—or even PBs—of data, these storage costs quickly add up.&lt;/p&gt;

&lt;p&gt;The Data Catalog summarizes the quality of the source data in terms of volume, completeness, and distribution of values. Using this, you can identify if important table columns like birthdate, email_address, or last_name are complete and if they need special business rules.&lt;/p&gt;

&lt;p&gt;In the image below, we can see a table’s data profile:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w3NeOsKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3iyu3alqt3cdb67fi9t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w3NeOsKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3iyu3alqt3cdb67fi9t.png" alt="High-level profile of a dataset" width="880" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The table has more than 19 million rows and 21 columns. There are no upstream dependencies. Part of the column’s data distribution looks like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P1MWuumI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbtf6awvl63q9zt0rgxp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P1MWuumI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbtf6awvl63q9zt0rgxp.png" alt="Data distribution in Data Catalog" width="880" height="682"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, some fields—like pickup_latitude and pickup_longitude—have lower completeness ratios. The graph also shows data distribution in different fields.&lt;/p&gt;

&lt;p&gt;Data engineers can use such information to decide whether (or how) to cleanse and preprocess the data before migration.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.datafold.com/column-level-lineage"&gt;column-level lineage&lt;/a&gt; feature can also help by finding the most frequently used (and therefore, the most critical) tables and columns in the source. &lt;/p&gt;

&lt;p&gt;One of the major drawbacks of lift-and-shift is that you’re never sure what fields or tables are unnecessary and don’t need to be ported. Column-level lineage makes this task much easier as it can discover all the dependencies of a table or column. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ytFCdM2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/241b2aghz7iy9773skzy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ytFCdM2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/241b2aghz7iy9773skzy.png" alt="Lineage graph showing a column’s relationship to upstream tables" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the Data Catalog and its lineage feature, let’s say you find a large source table that hasn’t been updated in the last five years, and this table has no dependencies. You can feel confident that it can be archived and doesn’t need to be migrated.&lt;/p&gt;

&lt;p&gt;As an example, in the image below, we can see that &lt;em&gt;taxi_trips&lt;/em&gt; doesn’t have any dependencies:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5TBxMggk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/or59ee0yokzg4bbepy1e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5TBxMggk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/or59ee0yokzg4bbepy1e.png" alt="Lineage graph showing a table with no dependencies" width="880" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#migrating-old-and-inefficient-queries"&gt;
  &lt;/a&gt;
  Migrating Old and Inefficient Queries
&lt;/h4&gt;

&lt;p&gt;Engineers should be also looking for inefficient queries powering existing analytic reports. Not surprisingly, this is also often overlooked in fear of breaking applications. &lt;/p&gt;

&lt;p&gt;For example, maybe you have a query with 10 joins, four of which are joining to obsolete data tables. The migration project can be the perfect time to optimize it by cutting out irrelevant joins. Showing side-by-side improvements can further showcase the value of planned migration to stakeholders.&lt;/p&gt;

&lt;p&gt;Once again, the column-level lineage feature can help refactor or remove inefficient queries. Column-level lineage can show how a data field relates to its upstream and downstream objects, and what the effect will be when modifying queries containing this field. &lt;/p&gt;

&lt;p&gt;In the image below, we can see that a data field is related to two tables. This should tell the data engineer which tables may be affected when fine-tuning a query containing this field.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rC6QKyhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nj2rb69uc1n8znmc3orw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rC6QKyhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nj2rb69uc1n8znmc3orw.png" alt="Column-level lineage showing a field’s dependencies" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Datafold’s &lt;a href="https://www.datafold.com/data-diff"&gt;Data Diff&lt;/a&gt; feature can also show the potential impact of changing your old queries. Data Diff compares two datasets and can show if their schemas, primary keys, row counts, or column values are mismatched. &lt;/p&gt;

&lt;p&gt;You can use such results for quality assurance of your migrated data. If the target Snowflake tables show no discrepancies, stakeholders can have confidence that the new queries are safe and effective. If the comparison shows differences, then the queries can be further fine-tuned.&lt;/p&gt;

&lt;p&gt;In the images below, we see one such Data Diff operation. Here, the target table shows non-matching columns with non-matching values:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jq4tVBVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucdre751mw65sejl6rcb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jq4tVBVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucdre751mw65sejl6rcb.png" alt="Datafold’s Data Diff overview of source and target table" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KNzAUr5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz9b153cgwobrray98lr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KNzAUr5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz9b153cgwobrray98lr.png" alt="Datafold’s Data Diff overview of column value differences" width="880" height="616"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uj9ztC1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10xvf9fhfolyuald07w8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uj9ztC1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10xvf9fhfolyuald07w8.png" alt="Datafold’s Data Diff schema differences between source and target tables" width="880" height="755"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#manual-or-no-regression-testing"&gt;
  &lt;/a&gt;
  Manual or No Regression Testing
&lt;/h4&gt;

&lt;p&gt;For organizations dealing with terabytes of data, &lt;em&gt;manual&lt;/em&gt; testing and validation is a guaranteed recipe for failure. Manually cross-checking millions of rows of query results or data is simply not an option. The result is that many engineers will simply skip validation altogether. &lt;/p&gt;

&lt;p&gt;According to the data engineers in &lt;a href="https://www.datafold.com/case-studies/thumbtack"&gt;Thumbtack&lt;/a&gt;, their manual validation process used to take up to two hours per pull request. In many cases, this validation just wasn’t realistic to complete and mistakes can be costly. There are two ways to eliminate—or largely automate—manual data validations when migrating data to Snowflake. &lt;/p&gt;

&lt;p&gt;The first method is to use Datafold’s &lt;a href="https://www.datafold.com/data-monitoring"&gt;Alerting&lt;/a&gt; feature. Datafold uses machine learning to find the normal trend or seasonality in your data. You can configure alerts to send proactive messages to DataOps when anomalies are detected in that data. You can also adjust the alert thresholds.&lt;/p&gt;

&lt;p&gt;You can create alerts by writing your own SQL statements for data completeness checks or comparisons, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BM3Zf9Sh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bktnjkpdnj6ahyolzfhs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BM3Zf9Sh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bktnjkpdnj6ahyolzfhs.png" alt="Datafold alert created from SQL statement" width="880" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In both cases, proactive alerts can help data engineers fix any issues in the source data before migration.&lt;/p&gt;

&lt;p&gt;The other option is to use the Data Diff feature within the CI process. &lt;/p&gt;

&lt;p&gt;With this approach, after creating a data migration script, it’s committed to a Git repository. Once the commit is made to the development branch, a developer creates a pull request to merge the change to the main branch. At this stage, a senior team member can review the code to approve or reject it.&lt;/p&gt;

&lt;p&gt;Now, when integrated with the CI process, Datafold’s Data Diff feature can show the reviewer the effect of the ETL code—how data will change between the source and the target as the code cleanses, aggregates, and performs its operation. This is automatic regression testing for the data pipeline. &lt;/p&gt;

&lt;p&gt;If reviewers see the target table will have unwanted changes when the code runs, they can reject the change, preventing garbage data from entering the Snowflake database.&lt;/p&gt;

&lt;p&gt;When Thumbtack started using Data Diff, they reported a savings of over 200 hours per month, increased productivity by at least 20%, and over 100 pull requests automatically tested every month.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;There are many advantages to moving to a cloud data warehouse like Snowflake. However, migrating even a single database to a new system can have its challenges, especially when the source data hasn’t been profiled or the ETL code hasn’t been tested.&lt;/p&gt;

&lt;p&gt;The key to successful data migration is leveraging tools that can automate most of the hard work. Datafold can help dramatically reduce the number of errors, failures, and silent issues by automating most of the testing.&lt;/p&gt;

&lt;p&gt;Although we’ve focused on Snowflake in this article, the same features of Datafold can be used for other cloud products like &lt;a href="https://aws.amazon.com/redshift/"&gt;Redshift &lt;/a&gt;or &lt;a href="https://cloud.google.com/bigquery"&gt;BigQuery&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>database</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 10 Trending Projects on GitHub for Web Developers</title>
      <author>Chetan Atrawalkar👉CA.</author>
      <pubDate>Wed, 15 Dec 2021 13:41:26 +0000</pubDate>
      <link>https://dev.to/chetan_atrawalkar/top-10-trending-projects-on-github-for-web-developers-3mpp</link>
      <guid>https://dev.to/chetan_atrawalkar/top-10-trending-projects-on-github-for-web-developers-3mpp</guid>
      <description>&lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt; is not just a version control service, it is a terrific content resource for all-things-development.&lt;/p&gt;

&lt;p&gt;There are a lot of repositories out there that can help you as a developer by providing great value for you. So no matter what type of developer you are, you should always take the advantage of GitHub.&lt;/p&gt;

&lt;p&gt;In this article, I decided to share &lt;strong&gt;top 10 trending projects on github for web developers&lt;/strong&gt; that you can benefit from as a web developer. Let’s gets to check out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-turborepo"&gt;
  &lt;/a&gt;
  &lt;a href="https://turborepo.org/"&gt;1. Turborepo&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Turborepo&lt;/strong&gt; is a high-performance build system for JavaScript and TypeScript codebases.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Turborepo&lt;/strong&gt; reimagines build system techniques used by Facebook and Google to remove maintenance burden and overhead.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EGmED8vF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usi734huldlmmgk4tyxg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EGmED8vF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usi734huldlmmgk4tyxg.jpg" alt="turbo" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Checkout this repo &lt;a href="https://github.com/vercel/turborepo"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-statsigs-status-page"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/statsig-io/statuspage"&gt;2. Statsig's Status Page&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A simple, zero-dependency, pure js/html status page based on GitHub Pages and Actions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0HX4DfPq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjb4qpgs0o7hvyjtkxmd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0HX4DfPq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjb4qpgs0o7hvyjtkxmd.jpg" alt="status" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Checkout this repo &lt;a href="https://github.com/statsig-io/statuspage"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-awesome-software-architecture"&gt;
  &lt;/a&gt;
  &lt;a href="https://mehdihadeli.github.io/awesome-software-architecture"&gt;3. Awesome Software Architecture&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A curated list of awesome articles, videos, and other resources to learn and practice about software architecture, patterns, and principles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HvEMNm7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gph5qei3ve9u2uq8u7am.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HvEMNm7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gph5qei3ve9u2uq8u7am.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Checkout this repo &lt;a href="https://github.com/mehdihadeli/awesome-software-architecture"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-react-cool-img"&gt;
  &lt;/a&gt;
  &lt;a href="https://react-cool-img.netlify.app/"&gt;4. React Cool Img&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; A React Img component let you handle image UX and performance as a Pro!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hMdnZMzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0jfbmxwj199wijsp4pw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hMdnZMzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0jfbmxwj199wijsp4pw.jpg" alt="Imgon" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Checkout this repo &lt;a href="https://github.com/wellyshen/react-cool-img"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-klipse"&gt;
  &lt;/a&gt;
  &lt;a href="http://blog.klipse.tech/"&gt;5. Klipse&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Klipse&lt;/strong&gt; is a JavaScript plugin for embedding interactive code snippets in tech blogs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---UQ2oiiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zh7k1674pgij0h6yii6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---UQ2oiiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zh7k1674pgij0h6yii6.jpg" alt="Image klipse" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Checkout this repo &lt;a href="https://github.com/viebel/klipse"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-simple-git"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/steveukx/git-js"&gt;6. Simple Git&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A light weight interface for running git commands in any node.js application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EYXhlMmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tmfk5i0vh6eosraguig.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EYXhlMmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tmfk5i0vh6eosraguig.jpg" alt="git" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Checkout this repo &lt;a href="https://github.com/steveukx/git-js"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-flatpickr"&gt;
  &lt;/a&gt;
  &lt;a href="https://flatpickr.js.org/"&gt;7. Flatpickr&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;lightweight, powerful javascript datetimepicker with no dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nSX581k9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8speo1ur4h4wr4ngkba1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nSX581k9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8speo1ur4h4wr4ngkba1.jpg" alt="ficket" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Checkout this repo &lt;a href="https://github.com/flatpickr/flatpickr"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all folks, Thank you for making it this far down. All the repositories mentioned are not just the only resources available, I'm sure there must be tons of other amazing project out there too. These are the ones that I really found helpful and often get myself indulged into.&lt;/p&gt;

&lt;p&gt;Don't forget to star 🌟 these repositories as a thank you note for all the amazing contributors who put their effort creating these amazing resources for all of us.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-claim-and-just-code-it"&gt;
  &lt;/a&gt;
  Keep Claim And Just Code It 😎
&lt;/h3&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>The Dark Side of Web Development</title>
      <author>Mikhail Karan</author>
      <pubDate>Wed, 15 Dec 2021 13:35:31 +0000</pubDate>
      <link>https://dev.to/mikhailkaran/the-dark-side-of-web-development-8cf</link>
      <guid>https://dev.to/mikhailkaran/the-dark-side-of-web-development-8cf</guid>
      <description>&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/6Hr8UcmLbrnKbiUaoiunIV"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-html-all-the-things"&gt;
  &lt;/a&gt;
  What is HTML All The Things
&lt;/h2&gt;

&lt;p&gt;HTML All The Things is a &lt;a href="https://podcast.htmlallthethings.com/"&gt;web development podcast&lt;/a&gt; and &lt;a href="https://discord.com/invite/jweMCx9"&gt;discord community&lt;/a&gt; which was started by Matt and Mike, developers based in Ontario, Canada. &lt;/p&gt;

&lt;p&gt;The podcast speaks to web development topics as well as running a small business, self-employment and time management. You can join them for both their successes and their struggles as they try to manage expanding their Web Development business without stretching themselves too thin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#announcements"&gt;
  &lt;/a&gt;
  Announcements
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Svelte for Beginners&lt;/strong&gt; Udemy course is now live! Mike took his experience in teaching and learning Svelte and created a course. &lt;/p&gt;

&lt;p&gt;This course will teach you the fundamentals of JavaScript frameworks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get it now on Udemy!&lt;/strong&gt; 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/svelte-for-beginners/?couponCode=HATTSALE"&gt;Svelte For Beginners&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-this-one-about"&gt;
  &lt;/a&gt;
  What's This One About?
&lt;/h2&gt;

&lt;p&gt;Like all jobs, web development has its dark side - the side where things aren't so pleasant but are a stark reality for the developers that work in the field. In today's episode, Matt and Mike explore that dark side of web development discussing things like if developers should show pride in their work - even if it's for a client, slogging through slow or outdated software, and dealing with thankless customers despite putting forth your best effort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-notes"&gt;
  &lt;/a&gt;
  Show Notes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-slog"&gt;
  &lt;/a&gt;
  The Slog
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Engineering, developing, and deploying can often times become less about making new exciting things and more about fixing and maintaining what exists&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a lot of developers get excited over building new things for themselves, or for their clients&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The vision is often that they’ll be involved with new and exciting products, creating new experiences and maybe innovating older less tech-savvy fields, bringing them into the 21st century&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sadly, this utopian vision can often be disrupted or completely squashed by the reality of how projects are made and maintained&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Smaller companies are often not able to have their own support team and so the responsibility falls upon the most related department, leaving many technical support requests at the feet of the development team&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Large projects and especially old code bases are often more about keeping the old stuff alive rather than making new features and improving UX. Often these projects have a bad or outdated UX that makes even simple tasks difficult for users - causing more support requests then expected and going against a lot of what you expect to be doing as a developer, making new exciting experiences for users that work well&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#their-vision-their-product-their-say"&gt;
  &lt;/a&gt;
  Their Vision, Their Product, Their Say.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you’re not making your own product, chances are you’re making products for other people (your customers)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you work for customers in this way your vision is almost always not going to be the same as theirs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This leads to many decisions that you have to implement, but disagree with. You may not agree with the navbar having 100 links but if the customer wants it then you’re responsible for putting those 100 links in place&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Even your consult may be ignored. You may know with near certainty that those 100 navbar links is just way too much, you bring this up to the customer and they don’t care - they want it implemented anyway. So you implement the 100 links, push it to production and the feedback from users is abysmal. So then the customer contacts you and wants you to reduce the 100 navbar links that you just put in there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This situation happens all the time and can even be blamed on you, or angrily be reacted to by the customer due to the poor user feedback.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enough situations like this can kill a developers drive, making them simply a cog in the machine with no opinion past what work order they’re working on.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#thankless"&gt;
  &lt;/a&gt;
  Thankless
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Disclaimer: this segment largely deals with the toxic workplace elements. Recently there has been some serious allegations regarding sexual misconduct and more within development studios. This section is not addressing those concerns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;more recently some gaming developer studios have been getting into hot water with the public for their treatment of developers, specifically crunch time and long hours, alongside other toxic work conditions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These same conditions can infect a web development agency rather easily pushing web developers into long hours, minimal days off, and sometimes an endless crunch cycle&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While many people will argue that you should just leave your job if this happens, or fight for a better workplace where you are - this is certainly easily said than done. It can be especially painful if you’re invested in the work you’re doing, maybe you agree with their cause or they’re working on a web app that coincides with your out-of-work-time passion&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This can also affect people who do not work in agencies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Freelancers and solo contract workers can be subject to much of the same treatment even if they work at home solo&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customers can be very overbearing, only contacting you when there are problems, constricting you to a small budget (low pay) and demanding your time whenever they need it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At the end of the day many of these situations end up being thankless.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix this now, from a customer has you jumping to your feet, panicking and rushing through a fix. You get it working, messaging the angry client that you’re triumphant, only to have no response. Until the next time they have trouble.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unrealistic deadlines that you fight against forcing you to crunch for hours and hours, only to be met with complaints and disdain at some features being rushed, or the project being dismantled altogether before even being pushed to production&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dealing with support requests from users. You’re dealing with people that are having issues, are probably already angry, and only want you to fix the issue now at any cost.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lot of these situations are thankless. You work yourself to the bone only to be met with no thanks, or even feedback.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h2&gt;

&lt;p&gt;If you're enjoying the podcast consider giving us a review on &lt;a href="https://podcasts.apple.com/us/podcast/html-all-things-web-development-web-design-small-business/id1412209136"&gt;Apple Podcasts&lt;/a&gt; or checking out our Patreon to get a shoutout on the podcast. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.patreon.com/htmlallthethings"&gt;Support us on Patreon&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can find us on all the podcast platforms out there as well as&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/htmlallthethings/"&gt;Instagram (@htmlallthethings)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/htmleverything"&gt;Twitter (@htmleverything)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.tiktok.com/@htmlallthethings"&gt;TikTok (Html All The Things)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>podcast</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CSS can help improve your HTML⁉ - Ep 2: buttons and links.</title>
      <author>InHuOfficial</author>
      <pubDate>Wed, 15 Dec 2021 13:07:06 +0000</pubDate>
      <link>https://dev.to/inhuofficial/css-can-help-improve-your-html-ep-2-buttons-and-links-21m9</link>
      <guid>https://dev.to/inhuofficial/css-can-help-improve-your-html-ep-2-buttons-and-links-21m9</guid>
      <description>&lt;p&gt;Part 2 of using CSS to make our HTML better!&lt;/p&gt;

&lt;p&gt;In this second part of this series we will be exploring how we can use CSS to ensure (and enforce) that we are using &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements correctly...you would be surprised how many developers get this wrong!&lt;/p&gt;

&lt;p&gt;If you missed part one you may need to have a quick read of that so you get the key concepts as I won't be repeating them in detail here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/using-css-to-prevent-html-errors-ep-1-alt-attributes-11o8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CSS can help improve your HTML⁉ - Ep 1: alt attributes&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Dec 11 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;All caught up? Great!&lt;/p&gt;

&lt;p&gt;Before we start part 2, it is worth mentioning (reiterating) that this concept relies on two style sheets.&lt;/p&gt;

&lt;p&gt;One for production (and development) and one for development &lt;strong&gt;only&lt;/strong&gt; (the one containing error messages).&lt;/p&gt;

&lt;p&gt;In the fiddles I have indicated which styles you would use in your &lt;strong&gt;production&lt;/strong&gt; stylesheet and which to use in your &lt;strong&gt;development&lt;/strong&gt; stylesheet!&lt;/p&gt;

&lt;p&gt;Right, with that reminder out of the way, let's begin!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-button-is-a-button"&gt;
  &lt;/a&gt;
  A button is a button!
&lt;/h2&gt;

&lt;p&gt;I know I keep saying it and I sound like a broken record but, a button is a button!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/they-just-won-t-learn-a-button-is-a-lt-button-gt-accessibility-rants-k1b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;They...just...won't...learn 🤦‍♂️ - a button is a &amp;amp;lt;button&amp;amp;gt;! [Series: Accessibility Rants]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ May 27 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;See, I told you I keep saying it!&lt;/p&gt;

&lt;p&gt;But what if we could guide our developers towards this logical conclusion using CSS?&lt;/p&gt;

&lt;p&gt;Well first thing is first, we can make it so our &lt;code&gt;.btn&lt;/code&gt; class &lt;strong&gt;only&lt;/strong&gt; works on a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Try and use the &lt;code&gt;.btn&lt;/code&gt; class on anything else and it just won't work!&lt;/p&gt;

&lt;p&gt;but we can do better than that!&lt;/p&gt;

&lt;p&gt;What if we can also give our team a little bit of a warning to let them know they have used the wrong element?&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c"&gt;/* wrong element error highlighting */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#meaningful-warning-and-error-messages"&gt;
  &lt;/a&gt;
  Meaningful warning and error messages
&lt;/h3&gt;

&lt;p&gt;Now while adding outlines to stuff that is wrong is great, it isn't very informative.&lt;/p&gt;

&lt;p&gt;Luckily we can fix that also!&lt;/p&gt;

&lt;p&gt;By using &lt;code&gt;:after&lt;/code&gt; we can insert an error message&lt;/p&gt;

&lt;p&gt;So we end up with a selector to add an outline and another selector to add a warning that is the same but using the &lt;code&gt;:after&lt;/code&gt; pseudo selector.&lt;/p&gt;

&lt;p&gt;By utilising the &lt;code&gt;content&lt;/code&gt; property we can add a custom error message!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;/* outlines */&lt;/span&gt;
&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="c"&gt;/* error message */&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#example-for-buttons"&gt;
  &lt;/a&gt;
  Example for buttons
&lt;/h3&gt;

&lt;p&gt;In this example we have a real button and a fake button made with a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Notice how the real button works and the fake button has no styling as well as an error message!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/inhuofficial/embed/BawWjKg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#taking-it-one-step-further"&gt;
  &lt;/a&gt;
  Taking it one step further!
&lt;/h3&gt;

&lt;p&gt;I would argue that for most sites we can actually go one step further and completely do away with the &lt;code&gt;.btn&lt;/code&gt; class on our buttons!&lt;/p&gt;

&lt;p&gt;This helps with consistency, looks neater and enforces our policy of &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;s for buttons!&lt;/p&gt;

&lt;p&gt;At this point we no longer even need an error check as we can only get styling on a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;We can do this by using the element as the selector &lt;code&gt;button{}&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.75rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;However this may have one unintended consequence...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#thats-great-but-we-often-style-anchors-like-buttons"&gt;
  &lt;/a&gt;
  That's great, but we often style anchors like buttons!
&lt;/h3&gt;

&lt;p&gt;And that is a valid point and nowadays, you are right!&lt;/p&gt;

&lt;p&gt;However we can recycle our selector from the first part so we can have a &lt;code&gt;.btn&lt;/code&gt; class &lt;strong&gt;only&lt;/strong&gt; on anchors (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;)!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c"&gt;/* our styles for buttons! */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This does mean we have to reintroduce our error checks though, but this time to ensure that we only use the &lt;code&gt;.btn&lt;/code&gt; class on an anchor!&lt;/p&gt;

&lt;p&gt;This raises an interesting question, do we want an error to show if we have a &lt;code&gt;.btn&lt;/code&gt; class on a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;If we &lt;strong&gt;do&lt;/strong&gt; then our error selector just needs a subtle change&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will add our error messages to &lt;code&gt;&amp;lt;button class="btn"&lt;/code&gt;, which might be confusing.&lt;/p&gt;

&lt;p&gt;As it won't do any harm having the &lt;code&gt;.btn&lt;/code&gt; class on a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; (as we have no valid selector for it anyway) I would think it better to not show error messages in this instance.&lt;/p&gt;

&lt;p&gt;Yet again the power of CSS makes this relatively simple, we can add multiple items within our &lt;code&gt;:not&lt;/code&gt; selector!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is saying:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;select all items with the &lt;code&gt;.btn&lt;/code&gt; class&lt;/li&gt;
&lt;li&gt;that are not (&lt;code&gt;:not()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;an anchor (&lt;code&gt;a&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;OR a button &lt;code&gt;,button&lt;/code&gt; (comma seperated).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#example-including-anchors"&gt;
  &lt;/a&gt;
  Example including anchors
&lt;/h3&gt;

&lt;p&gt;Bringing everything together we end up with the following:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/inhuofficial/embed/VwMperq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Looks great, but we can go &lt;strong&gt;even&lt;/strong&gt; further!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#but-we-only-want-valid-anchors"&gt;
  &lt;/a&gt;
  But we only want valid anchors
&lt;/h3&gt;

&lt;p&gt;Now that we have allowed the &lt;code&gt;.btn&lt;/code&gt; class to be added to anchors we have opened up another problem!&lt;/p&gt;

&lt;p&gt;The dreaded &lt;code&gt;&amp;lt;a href="#"&lt;/code&gt; or &lt;code&gt;&amp;lt;a href="javascript: void()&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;This anti-pattern has not been needed since HTML5 (you did read my rant on buttons I linked earlier didn't you?).&lt;/p&gt;

&lt;p&gt;So how can we fix this one?&lt;/p&gt;

&lt;p&gt;Well in part 1 we used attribute selectors &lt;code&gt;[attr]&lt;/code&gt; and once again they can come to our rescue!&lt;/p&gt;

&lt;p&gt;As this is a site wide error (it should never be used!) we can ignore the &lt;code&gt;.btn&lt;/code&gt; selector and just focus on anchors!&lt;/p&gt;

&lt;p&gt;The first one is easier to solve, we select any anchors with a &lt;code&gt;href="#"&lt;/code&gt; (and while we are at it an empty &lt;code&gt;href&lt;/code&gt; or missing &lt;code&gt;href&lt;/code&gt; too!)&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;]),&lt;/span&gt; &lt;span class="c"&gt;/* A missing href attribute! */&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="c"&gt;/* an empty (or null) href */&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"#"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c"&gt;/* the anti pattern! */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That covers most of them, we just need to highlight the JavaScript anti-pattern!&lt;/p&gt;

&lt;p&gt;Yet again we covered this in part 1, we can use the "begins with" notation:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s1"&gt;"javascript:"&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Remember the "i" at the end to make it case insensitive.&lt;/p&gt;

&lt;p&gt;We used the "begins with" &lt;code&gt;^=&lt;/code&gt; syntax for this example as it doesn't have to be &lt;code&gt;javascript: void()&lt;/code&gt;, this way we can capture all JavaScript &lt;code&gt;href&lt;/code&gt;s no matter what function they call!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example-for-valid-anchors"&gt;
  &lt;/a&gt;
  Example for valid anchors!
&lt;/h3&gt;

&lt;p&gt;Utilising the same system of using &lt;code&gt;:after&lt;/code&gt; we can add messages to our anchors as well!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/inhuofficial/embed/wvrJMQM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We can make this much better by having separate message depending on whether the problem is a missing &lt;code&gt;href&lt;/code&gt;, bad &lt;code&gt;href&lt;/code&gt; or the use of JavaScript. I haven't done that in the example but you would do it as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"missing href attr"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"#"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"anti-pattern on href detected"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"empty or null href"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s1"&gt;"javascript:"&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"using javascript in href anti-pattern detected"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#additional-things-to-mention"&gt;
  &lt;/a&gt;
  Additional things to mention
&lt;/h3&gt;

&lt;p&gt;As pointed out by &lt;a class="mentioned-user" href="https://dev.to/ashleyjsheridan"&gt;@ashleyjsheridan&lt;/a&gt;
 it is perfectly valid to have an  anchor without a &lt;code&gt;href&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As such where I marked anchors with missing or empty &lt;code&gt;href&lt;/code&gt; attributes as errors this was a mistake on my part. &lt;/p&gt;

&lt;p&gt;Instead these should be downgraded to "warnings" just to pick up on mistakes.&lt;/p&gt;

&lt;p&gt;Additionally this then means that if you use &lt;code&gt;&amp;lt;a name="sectionName"&amp;gt;&lt;/code&gt; for whatever reason it will only be a warning (although this is quite a dated way to do things as you can just give an element an &lt;code&gt;id&lt;/code&gt; attribute and link to that instead).&lt;/p&gt;

&lt;p&gt;Overall it has no bearing though as the &lt;strong&gt;development&lt;/strong&gt; style sheet will not impact production, might just be a little annoying though if you do edge case stuff like dynamically adding a &lt;code&gt;href&lt;/code&gt; to an existing anchor.&lt;/p&gt;

&lt;p&gt;Additionally they mention:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Might also be worth considering the 3  button types: button, submit, and reset.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is an excellent point, so to add those you would update the selector to target:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"button"&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"submit"&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"reset"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* can use the same default styling and overwrite with additional styles to differentiate as needed */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you need to use those.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;A lot of what we learned in part 1 has carried over to part 2. &lt;/p&gt;

&lt;p&gt;It is just that our selectors have become a little more complex.&lt;/p&gt;

&lt;p&gt;But hopefully you can see how this allows us to enforce business style guides once again (having or not requiring a &lt;code&gt;.btn&lt;/code&gt; class on &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements for example). &lt;/p&gt;

&lt;p&gt;In the next part we are going to focus on document structure best practices and introduce some WAI-ARIA attributes and some tips and tricks with those!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for Reading!
&lt;/h2&gt;

&lt;p&gt;Thanks for reading, I hope you enjoyed it!&lt;/p&gt;

&lt;p&gt;In fact to show my appreciation please do have a virtual ❤ and 🦄 to show how much it means to me!&lt;/p&gt;

&lt;p&gt;If you enjoyed this and want something just a &lt;em&gt;little&lt;/em&gt; (OK a &lt;strong&gt;lot&lt;/strong&gt; longer I have written) why not read my monster accessibility tips article:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/101-digital-accessibility-tips-and-tricks-4728" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;101 Digital Accessibility (a11y) tips and tricks&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Jul 30 ・ 68 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;Have a great week!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>a11y</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Unit testing service workers</title>
      <author>Gaurav Behere</author>
      <pubDate>Wed, 15 Dec 2021 13:03:27 +0000</pubDate>
      <link>https://dev.to/gauravbehere/unit-testing-service-workers-l9j</link>
      <guid>https://dev.to/gauravbehere/unit-testing-service-workers-l9j</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Writing unit tests for service workers made easy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bvfPVgTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seeklogo.com/images/J/jest-logo-F9901EBBF7-seeklogo.com.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bvfPVgTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seeklogo.com/images/J/jest-logo-F9901EBBF7-seeklogo.com.png" width="272" height="300"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pBz1FsE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/694/1%2AaO4HRVpU1zQ22rvhAeSK1w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBz1FsE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/694/1%2AaO4HRVpU1zQ22rvhAeSK1w.png" width="694" height="339"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prelude"&gt;
  &lt;/a&gt;
  Prelude
&lt;/h2&gt;

&lt;p&gt;While service workers amaze us with its capabilities to cache requests, edit headers before putting requests on the network etc.&lt;br&gt;
I think you will agree that unit testing service workers is not straight-forward.&lt;br&gt;
The biggest question is 'what to mock?'&lt;/p&gt;

&lt;p&gt;A big shout out to Zack Argyle for writing &lt;a href="https://github.com/zackargyle/service-workers/tree/master/packages/service-worker-mock"&gt;Service Worker Mock&lt;/a&gt;. This library prepares all the mocks &amp;amp; lets your tests have an environment where you have the recipe to test your service worker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h2&gt;

&lt;p&gt;This code sample is an enhancement on top of &lt;a href="https://github.com/zackargyle/service-workers/tree/master/packages/service-worker-mock"&gt;Service Worker Mock&lt;/a&gt;. Service Worker Mock explains how to write unit tests for service works. &lt;code&gt;Since it is not maintained any more, I am writing this code sample to unblock ourselves from the current issues in that library.&lt;/code&gt;&lt;br&gt;
Tests are written using the sample service worker given at &lt;a href="https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/basic/service-worker.js"&gt;service worker example&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem-with-the-current-version-205-of-service-worker-mock"&gt;
  &lt;/a&gt;
  Problem with the current version (2.0.5) of service worker mock
&lt;/h2&gt;

&lt;p&gt;Object.assign(global, makeServiceWorkerEnv()) no longer puts EventTarget methods like addEventListener into the global scope because they are no longer "own" properties of ServiceWorkerGlobalScope&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workaround"&gt;
  &lt;/a&gt;
  Workaround
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Make &lt;code&gt;addEventListener&lt;/code&gt; an enumerable property
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;beforeEach(() =&amp;gt; {
   const serviceWorkerEnv = makeServiceWorkerEnv();
   Object.defineProperty(serviceWorkerEnv, 'addEventListener', {
      value: serviceWorkerEnv.addEventListener,
      enumerable: true
   });
   Object.assign(global, serviceWorkerEnv)
   jest.resetModules();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing-event-registration"&gt;
  &lt;/a&gt;
  Testing Event registration
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;it('should add listeners', async () =&amp;gt; {
  require('../src/sample-sw');
  await self.trigger('install');
  expect(self.listeners.get('install')).toBeDefined();
  expect(self.listeners.get('activate')).toBeDefined();
  expect(self.listeners.get('fetch')).toBeDefined();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing-cache-deletion-on-activation"&gt;
  &lt;/a&gt;
  Testing cache deletion on activation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;it('should delete old caches on activate', async () =&amp;gt; {
  require('../src/sample-sw');

  // Create old cache
  await self.caches.open('OLD_CACHE');
  expect(self.snapshot().caches.OLD_CACHE).toBeDefined();

  // Activate and verify old cache is removed
  await self.trigger('activate');
  expect(self.snapshot().caches.OLD_CACHE).toStrictEqual({});
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing-fetch-event-to-see-if-it-returns-cached-response"&gt;
  &lt;/a&gt;
  Testing fetch event to see if it returns cached response
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;it('should return a cached response', async () =&amp;gt; {
  require('../src/sample-sw');

  const cachedResponse = { clone: () =&amp;gt; { }, data: { key: 'value' } };
  const cachedRequest = new Request('/test');
  const cache = await self.caches.open('TEST');
  cache.put(cachedRequest, cachedResponse);

  const response = await self.trigger('fetch', cachedRequest);
  expect(response.data.key).toEqual('value');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing-if-fetch-event-makes-network-call-amp-updates-cache-also-test-any-custom-logic-like-appending-a-bearer-token-in-the-request"&gt;
  &lt;/a&gt;
  Testing if fetch event makes network call &amp;amp; updates cache. Also test any custom logic like appending a bearer token in the request
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;it('should fetch and cache an uncached request and append the right auth token in the header', async () =&amp;gt; {
  const mockResponse = { clone: () =&amp;gt; { return { data: { key: 'value' } } } };
  global.fetch = (response) =&amp;gt; Promise.resolve({ ...mockResponse, headers: response.headers });

  require('../src/sample-sw');

  const request = new Request('/test');
  const response = await self.trigger('fetch', request);
  expect(response.clone()).toEqual(mockResponse.clone());

  expect(response.headers.get('authorization')).toBe('Bearer my secret auth');

  const runtimeCache = self.snapshot().caches.runtime;
  expect(runtimeCache[request.url]).toEqual(mockResponse.clone());
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing-if-the-requests-to-the-external-domains-are-ignored"&gt;
  &lt;/a&gt;
  Testing if the requests to the external domains are ignored
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;it('should ignore the requests to external world', async () =&amp;gt; {
  const mockResponse = { clone: () =&amp;gt; { return { data: { key: 'value' } } } };
  global.fetch = (response) =&amp;gt; Promise.resolve({ ...mockResponse, headers: response.headers });

  require('../src/sample-sw');

  const request = new Request('http://google.com');
  const response = await self.trigger('fetch', request);
  expect(response).not.toBeDefined();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#coverage"&gt;
  &lt;/a&gt;
  Coverage
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E84qpuYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/gauravbehere/unit-test-service-worker/main/coverage.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E84qpuYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/gauravbehere/unit-test-service-worker/main/coverage.PNG" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#epilogue"&gt;
  &lt;/a&gt;
  Epilogue
&lt;/h2&gt;

&lt;p&gt;Check out the code repo for this sample here:&lt;br&gt;
&lt;a href="https://github.com/gauravbehere/unit-test-service-worker"&gt;unit-test-service-worker&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why should you build for the Shopify App Store? (+How to Start)</title>
      <author>Erman Küplü</author>
      <pubDate>Wed, 15 Dec 2021 12:37:25 +0000</pubDate>
      <link>https://dev.to/analyzify/why-should-you-build-for-the-shopify-app-store-how-to-start-1k18</link>
      <guid>https://dev.to/analyzify/why-should-you-build-for-the-shopify-app-store-how-to-start-1k18</guid>
      <description>&lt;p&gt;I realize more and more that the Shopify market is being overlooked by developer communities. Whereas we have been active on the platform for almost a year now and &lt;strong&gt;can’t be happier&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;In this post, I will try to give you some reasons why you should give Shopify's App Store a chance and shortly share our story and gainings. Feel free to ask your questions in the comments section, I will do my best to answer. &lt;/p&gt;

&lt;p&gt;Here is a quick summary of why this is a great market: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A rapidly growing market with over &lt;strong&gt;1.7 million stores&lt;/strong&gt;, &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;%0 commission&lt;/strong&gt; on Shopify App Store, &lt;/li&gt;
&lt;li&gt;84% Shopify Partners revenue growth (a 84% increase year-over-year)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;$12.5 billion&lt;/strong&gt; in revenue in 2020 and that is 4x the revenue of Shopify’s own platform. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s now get into the details. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shopify-partners-ecosystem"&gt;
  &lt;/a&gt;
  Shopify Partners’ Ecosystem
&lt;/h2&gt;

&lt;p&gt;It is no secret that Shopify became Shopify because of its partner ecosystem. It is one of the first companies who has an understanding of the value of partners and built an amazing API infrastructure. &lt;/p&gt;

&lt;p&gt;There are countless needs in the e-commerce field for merchants. But Shopify didn’t opt for   building everything, and Instead, they focused on the core business and left the rest for the partners. &lt;/p&gt;

&lt;p&gt;As an example, it is hard to believe that Shopify’s core product is missing too many important features, one of them being “Subscriptions”. You can not add a subscription feature to your e-commerce store if you are not using one of the apps. &lt;/p&gt;

&lt;p&gt;Shopify partners’ ecosystem includes the following elements: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://apps.shopify.com/"&gt;Shopify Apps&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://themes.shopify.com/"&gt;Shopify Themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://experts.shopify.com/"&gt;Shopify Experts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://help.shopify.com/en/affiliates"&gt;Shopify Affiliates&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there are many other professionals or agencies that are not officially included in the ecosystem but still work as a “Shopify Developer” or “Shopify Agency”. This helps Shopify grow even more - and make merchants happy because there are 1000’s of professionals or resources available when they need help. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shopify-app-store-as-a-market"&gt;
  &lt;/a&gt;
  Shopify App Store as a Market
&lt;/h2&gt;

&lt;p&gt;Merchants have a lot of needs - and they constantly search for apps to solve their problems and make their store better. &lt;/p&gt;

&lt;p&gt;At the moment, there are 6000+ apps in the app store. And a merchant uses 6 apps on average. It is not hard to build an app - or to be accepted to the app store. &lt;/p&gt;

&lt;p&gt;As far as I know, it is one of the rare “app stores” in the world that &lt;strong&gt;has 0% commission&lt;/strong&gt;. Shopify removed its 20% commission this summer. You don’t have to pay any commission if your annual revenue is under $1M. &lt;/p&gt;

&lt;p&gt;There are some giant players in the app store as well: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Klaviyo - recently valued at $4B+&lt;/li&gt;
&lt;li&gt;Privy - with over $2B+ valuation&lt;/li&gt;
&lt;li&gt;Bold Commerce - received $40M+ investment&lt;/li&gt;
&lt;li&gt;Oberlo - acquired by Shopify for $15m&lt;/li&gt;
&lt;li&gt;and many others. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, the Shopify app store is not only for big players. There are hundreds of independent developers who build on Shopify and achieve double-digit MRRs in such a short amount of time such as &lt;a href="https://twitter.com/gilgNYC/status/1470378485667483650?s=20"&gt;Gil&lt;/a&gt; and &lt;a href="https://www.indiehackers.com/post/bootstrapped-a-shopify-app-to-500-paying-clients-with-an-mvp-ama-7dbaf8084e"&gt;myself&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-shopify-apps"&gt;
  &lt;/a&gt;
  How to build Shopify apps?
&lt;/h3&gt;

&lt;p&gt;I am not a developer myself. However, I have only heard great things about Shopify’s API and how easy it is to build things for Shopify. They don’t have tech-stack requirements. &lt;/p&gt;

&lt;p&gt;You can literally build with any programming language and host your app anywhere you like. You will have to use Shopify’s API to authenticate and charge users. Shopify apps can work in an EMBEDDED or INDEPENDENT format that opens in a new tab. &lt;/p&gt;

&lt;p&gt;Here’s a GIF for you to see how it looks 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GhpnDncU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ixn4oodxharjsxtlqzg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GhpnDncU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ixn4oodxharjsxtlqzg.gif" alt="Shopify App Store Embedded Apps" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you see on the example, our app Analyzify works in the EMBEDDED format while the other app opens in the new tab. Most apps choose the “New Tab” solution. &lt;/p&gt;

&lt;p&gt;We firstly built Analyzify with Ruby &amp;amp; Rails - now we are switching to No-Code &amp;amp; Low-Code stack. I have seen many apps that use the Laravel framework. It is just about your t&lt;br&gt;
aste and capabilities. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#approval-process-amp-going-to-production"&gt;
  &lt;/a&gt;
  Approval Process &amp;amp; Going to Production:
&lt;/h3&gt;

&lt;p&gt;Our app was approved within 5 days. We initially received a rejection because of the wrong use of the payment gateway. We have made the asked changes and it got immediately approved. &lt;/p&gt;

&lt;p&gt;I can only say good things about Shopify Partners’ support. They are very helpful and willing to answer the questions you should have. We have also got some support from Shopify developers’ Slack group. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-sales-on-the-shopify-app-store"&gt;
  &lt;/a&gt;
  Getting Sales on the Shopify App Store:
&lt;/h3&gt;

&lt;p&gt;The app developers keep giving the same suggestion: “Don’t rely on the app store for the sales”. That’s true: while there are too many searches happening on the app store,you should still look for alternative customer acquisition channels. &lt;/p&gt;

&lt;p&gt;At Analyzify, we have only gone for organic channels such as content marketing, video marketing, SEO, and Shopify community forums. Many app developers are using Shopify App Store Ads that work with the PPC model. &lt;/p&gt;

&lt;p&gt;Merchants don’t really rely on the App Store, but instead, they search Google. You will find a lot of listicles like “The Best Shopify Apps for X”. You will need to make yourself visible there - and probably make your own list just like we did: &lt;strong&gt;&lt;a href="https://analyzify.app/google-tag-manager-shopify/apps"&gt;Shopify Google Tag Manager Apps&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;I also see a lot of app developers who rely on merchants’ communities such as Facebook &amp;amp; Slack Groups, Twitter conversations, Discord Channels, and so on. &lt;/p&gt;

&lt;p&gt;Depending on your competition, you might have to be a bit more creative and hard-working here. All will work if you create a &lt;strong&gt;good product&lt;/strong&gt; and make your &lt;strong&gt;clients happy&lt;/strong&gt;. Simple as that. &lt;/p&gt;

&lt;p&gt;As in almost every app store, &lt;strong&gt;reviews are crucial&lt;/strong&gt; on the Shopify app store as well. The merchants don’t tend to give reviews for regular apps and experiences. You need to provide exceptional customer support to get proper reviews. The sales will go way higher once you pass 10+ positive reviews. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--woo8P5Fp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxrus7x6dwbswco63haw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--woo8P5Fp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxrus7x6dwbswco63haw.jpeg" alt="Analyzify - Shopify Analytics App Reviews" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-kind-of-apps-should-you-build-for-shopify"&gt;
  &lt;/a&gt;
  What kind of apps should you build for Shopify?
&lt;/h3&gt;

&lt;p&gt;Well, that’s a great question that everybody asks. There are several methods to start with: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Serve to Shopify clients&lt;/strong&gt;. Provide services to them on your domain. That’ll help you understand and get to know them. They will immediately start telling you “Only if I had an app for X”, etc. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hang out in the &lt;strong&gt;Shopify community forums&lt;/strong&gt; &amp;amp; Reddit &amp;amp; Twitter. Merchants keep asking “Is there an app for X?” or complaining about the apps that they are using. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Study the app store. &lt;strong&gt;Check the apps with negative reviews&lt;/strong&gt; and try to understand if you can make that negative experience better. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep reading below - I’ll mention some latest updates from the Shopify ecosystem. &lt;/p&gt;

&lt;p&gt;I would also recommend not to fear the competition. Of course, don’t go and create a “Page Builder App” where top developers have 2000+ reviews. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SgVJhwto--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upgz4f6qju9h2az2v9c6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SgVJhwto--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upgz4f6qju9h2az2v9c6.jpg" alt="Shopify App Store - Page Builders" width="880" height="566"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find a smaller competition and make things better. You will have the advantage of building from scratch and building the things the competitors are too busy to do. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#latest-updates-amp-opportunities-on-shopify-world"&gt;
  &lt;/a&gt;
  Latest Updates &amp;amp; Opportunities on Shopify World
&lt;/h2&gt;

&lt;p&gt;Shopify keeps opening new developer spaces for partners. They announced a few major upcoming changes in the latest Shopify unite event. You might want to take a closer look at that  because the existing Shopify partners are always too busy with their roadmap and clients. &lt;/p&gt;

&lt;p&gt;*&lt;em&gt;&lt;a href="https://www.shopify.com/partners/blog/shopify-online-store"&gt;Online Store 2.0&lt;/a&gt;: *&lt;/em&gt;&lt;br&gt;
They released a large update on how to build themes. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Online Store 2.0 opens up massive opportunities for developers building themes and apps for Shopify merchants. We’ve rebuilt the online store experience from the ground up, and are introducing a new set of developer tools to help you create amazing experiences for merchants and shoppers. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://themes.shopify.com/"&gt;Theme Store is back again&lt;/a&gt;: &lt;br&gt;
Shopify had closed their theme stores but now it is reopened. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://hydrogen.shopify.dev/"&gt;Headless Shopify (React!)&lt;/a&gt;: &lt;br&gt;
Well, of course, they are going after the headless market. They announced Shopify Hydrogen. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hydrogen's React-based framework for building custom storefronts on Shopify gives you everything you need to start fast, build fast, and deliver the best-personalized shopping experiences.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;NFTs: &lt;br&gt;
Shopify is also looking to integrate with the NFT market. They recently released &lt;a href="https://help.shopify.com/en/manual/products/digital-service-product/nfts"&gt;a BETA program for this&lt;/a&gt; - only available in the US for now. &lt;/p&gt;

&lt;p&gt;Final Words: &lt;/p&gt;

&lt;p&gt;I strongly recommend you build something on Shopify depending on your skills. Create an MVP version, watch the market closely and enter when you feel ready. &lt;/p&gt;

&lt;p&gt;We have reached 500+ merchants and over $15K MRR only in 8 months. This is huge for us considering it was our first attempt on the Shopify app store. Now we started building more apps and new features for our existing app. &lt;/p&gt;

&lt;p&gt;I am more than willing to answer your questions. Leave it in the comments section! &lt;/p&gt;

</description>
      <category>shopify</category>
      <category>shopifyapp</category>
      <category>shopifypartners</category>
      <category>analzify</category>
    </item>
    <item>
      <title>Streaming Data to OpenSearch</title>
      <author>Matt Lewis</author>
      <pubDate>Wed, 15 Dec 2021 12:24:02 +0000</pubDate>
      <link>https://dev.to/aws-heroes/streaming-data-to-opensearch-1gb2</link>
      <guid>https://dev.to/aws-heroes/streaming-data-to-opensearch-1gb2</guid>
      <description>&lt;p&gt;In previous posts I described how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aws-heroes/real-time-streaming-for-amazon-qldb-3c3c"&gt;Stream data from QLDB to DynamoDB&lt;/a&gt; to support single-digit latency and infinitely scalable key-value enquiries, and&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aws-heroes/streaming-data-from-amazon-qldb-to-elasticsearch-78c"&gt;Stream data from QLDB to ElasticSearch&lt;/a&gt; to support rich text search and downstream analytics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was all created in a source code repository that anyone could try out for themselves. Recently, &lt;a href="https://twitter.com/sheenbrisals"&gt;Sheen Brisals&lt;/a&gt; wrote a great post on &lt;a href="https://betterprogramming.pub/why-serverless-teams-should-embrace-continuous-refactoring-217d4e67db5b"&gt;"Why Serverless Teams should embrace Continuous Refactoring"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Given that, I thought I would go back and update the repository, in line with new features and changes over the past 12 months:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Updating the QLDB permissions mode to &lt;code&gt;STANDARD&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Implementing fine grained access control for all functions accessing QLDB&lt;/li&gt;
&lt;li&gt;Updating to the latest version of Nodejs&lt;/li&gt;
&lt;li&gt;Switching from &lt;code&gt;webpack&lt;/code&gt; to &lt;code&gt;esbuild&lt;/code&gt; for tree shaking&lt;/li&gt;
&lt;li&gt;Migrating from ElasticSearch to OpenSearch&lt;/li&gt;
&lt;li&gt;Configuring Amazon Cognito authentication for OpenSearch Dashboards&lt;/li&gt;
&lt;li&gt;Implementing custom metrics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blog post focuses on the last three updates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-opensearch-service"&gt;
  &lt;/a&gt;
  Amazon OpenSearch Service
&lt;/h2&gt;

&lt;p&gt;AWS &lt;a href="https://aws.amazon.com/blogs/aws/amazon-elasticsearch-service-is-now-amazon-opensearch-service-and-supports-opensearch-10/"&gt;announced&lt;/a&gt; on 8th Sept 2021 that they had renamed Amazon ElasticSearch Service to Amazon OpenSearch Service. This is an Apache 2.0-licensed fork of ElasticSearch that is community-driven and open source.&lt;/p&gt;

&lt;p&gt;In the previous deployment, ElasticSearch was configured to run within your VPC. This is still the recommended approach from a security standpoint. However, to make things simpler for people to get up and running, I wanted to deploy OpenSearch with a public endpoint instead. In addition, I wanted to protect access to OpenSearch Dashboards using Amazon Cognito.&lt;/p&gt;

&lt;p&gt;The full source code can be found at &lt;a href="https://github.com/AWS-South-Wales-User-Group/qldb-simple-demo"&gt;QLDB Simple Demo&lt;/a&gt;, but lets walk through the main steps involved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-amazon-cognito"&gt;
  &lt;/a&gt;
  Setting up Amazon Cognito
&lt;/h2&gt;

&lt;p&gt;The first thing to setup in our &lt;code&gt;serverless.yml&lt;/code&gt; file is the Cognito User Pool. This provides the user directory to control access to OpenSearch Dashboards. The setup below asks for name and email attributes at sign up, as well as a username and password. The email will be verified by entering a code that is sent to the specified email address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OSUserPool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Cognito::UserPool&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;UsernameConfiguration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;CaseSensitive&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
    &lt;span class="na"&gt;AutoVerifiedAttributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;email&lt;/span&gt;
    &lt;span class="na"&gt;UserPoolName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;qldb-demo-user-pool&lt;/span&gt;
    &lt;span class="na"&gt;Schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;email&lt;/span&gt;
        &lt;span class="na"&gt;AttributeDataType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
        &lt;span class="na"&gt;Mutable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;Required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt;
        &lt;span class="na"&gt;AttributeDataType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
        &lt;span class="na"&gt;Mutable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;Required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is the UserPoolDomain. This provides a domain name to be used as part of the hosted UI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OSUserPoolDomain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Cognito::UserPoolDomain&lt;/span&gt; 
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;UserPoolId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;OSUserPool&lt;/span&gt; 
    &lt;span class="na"&gt;Domain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;qldb-opensearch-demo"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, we define the Cognito Identity Pool. We use this to provide a way to grant temporary AWS credentials for users. This is necessary, as to support a public endpoint on the OpenSearch domain, we need to enable fine-grained access control or apply a restrictive access policy. We don't configure the CognitoIdentityProviders, as these will be created for us by the OpenSearch service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OSIdentityPool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Cognito::IdentityPool&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;IdentityPoolName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;qldb-demo-identity-pool&lt;/span&gt;
    &lt;span class="na"&gt;AllowUnauthenticatedIdentities&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we create two roles, one for an authenticated identity, and one for an unauthenticated identity. The one for the authenticated identity is shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;CognitoAuthorizedRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;AWS::IAM::Role"&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;AssumeRolePolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;2012-10-17"&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Allow"&lt;/span&gt;
            &lt;span class="na"&gt;Principal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
            &lt;span class="na"&gt;Federated&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;cognito-identity.amazonaws.com"&lt;/span&gt;
            &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sts:AssumeRoleWithWebIdentity"&lt;/span&gt;
            &lt;span class="na"&gt;Condition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;StringEquals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
                &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;cognito-identity.amazonaws.com:aud"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;OSIdentityPool&lt;/span&gt;
            &lt;span class="s"&gt;ForAnyValue:StringLike:&lt;/span&gt;
                &lt;span class="s"&gt;"cognito-identity.amazonaws.com:amr": authenticated&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is a trust policy for an authenticated role. It allows a federated user from &lt;code&gt;cognito-identity.amazonaws.com&lt;/code&gt; (the issuer of the OpenID Connect token) to assume this role. It also places a condition, that restricts the &lt;code&gt;aud&lt;/code&gt; of the token (the client ID of the relying party) to be the Cognito Identity Pool, and the &lt;code&gt;amr&lt;/code&gt; of the token contains the value &lt;code&gt;authenticated&lt;/code&gt;. When Amazon Cognito creates a token, it will set the &lt;code&gt;amr&lt;/code&gt; of the token to be either &lt;code&gt;unauthenticated&lt;/code&gt; or &lt;code&gt;authenticated&lt;/code&gt;. There is no policy attached to this identity, as we are going to control access to OpenSearch through a resource policy attached to the OpenSearch domain.&lt;/p&gt;

&lt;p&gt;After defining the two roles with the associated policies, we map them to the Identity Pool using an IdentityPoolRoleAttachment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;IdentityPoolRoleMapping&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;AWS::Cognito::IdentityPoolRoleAttachment"&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;IdentityPoolId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;OSIdentityPool&lt;/span&gt;
    &lt;span class="na"&gt;Roles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;authenticated&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;CognitoAuthorizedRole.Arn&lt;/span&gt;
        &lt;span class="na"&gt;unauthenticated&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;CognitoUnAuthorizedRole.Arn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then its time to define a role that the OpenSearch service can assume, that includes permissions to configure the Cognito user and identity pools and use them for authentication. This can be done using the &lt;code&gt;AmazonOpenSearchServiceCognitoAccess&lt;/code&gt; AWS-managed policy as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OSCognitoRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;AWS::IAM::Role'&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;RoleName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CognitoAccessForAmazonOpenSearch'&lt;/span&gt;
    &lt;span class="na"&gt;AssumeRolePolicyDocument&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;2012-10-17'&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
            &lt;span class="s"&gt;Principal&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;es.amazonaws.com&lt;/span&gt;
            &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;sts:AssumeRole'&lt;/span&gt;
    &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/"&lt;/span&gt;
    &lt;span class="na"&gt;ManagedPolicyArns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;arn:aws:iam::aws:policy/AmazonOpenSearchServiceCognitoAccess&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, its time to create the OpenSearch domain, with the &lt;code&gt;CognitoOptions&lt;/code&gt; referencing the role defined above, as well as the Cognito user and identity pool.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;OpenSearch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::OpenSearchService::Domain&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;DomainName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#{AWS::StackName}"&lt;/span&gt;
    &lt;span class="na"&gt;EngineVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;OpenSearch_1.0'&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;CognitoOptions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Enabled&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;IdentityPoolId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;OSIdentityPool&lt;/span&gt;
        &lt;span class="na"&gt;RoleArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;OSCognitoRole.Arn&lt;/span&gt;
        &lt;span class="na"&gt;UserPoolId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;OSUserPool&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;AccessPolicies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;2012-10-17"&lt;/span&gt;
        &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
            &lt;span class="s"&gt;Principal&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;AWS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
                &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;CognitoAuthorizedRole.Arn&lt;/span&gt;
            &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;es:ESHttpGet&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;es:ESHttpPost&lt;/span&gt;
            &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:es:${self:provider.region}:#{AWS::AccountId}:domain/#{AWS::StackName}/*&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
            &lt;span class="s"&gt;Principal&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;AWS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
          &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;es:ESHttp*&lt;/span&gt;
            &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:es:${self:provider.region}:#{AWS::AccountId}:domain/#{AWS::StackName}/*&lt;/span&gt;
            &lt;span class="na"&gt;Condition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;StringLike&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                    &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;aws:PrincipalArn"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:iam::#{AWS::AccountId}:role/qldb-streams-es-lambda-role-${self:provider.stage}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All access to the domain is controlled through the resource policy that is applied. The first statement allows the authenticated Cognito user to access the domain. The second statement allows access to the domain from the execution role attached to the AWS Lambda function. You might notice that this is defined in a different way. A circular dependency exists, as the Lambda function needs the OpenSearch domain endpoint which is set up as an environment variable. Using a condition and the &lt;code&gt;aws:PrincipalArn&lt;/code&gt; key allows you to compare the ARN of the principal that made the request with the ARN specified in the policy at runtime, rather than at deployment time which otherwise failed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-opensearch-dashboard"&gt;
  &lt;/a&gt;
  Accessing OpenSearch Dashboard
&lt;/h2&gt;

&lt;p&gt;Now the stack is deployed, we can access the OpenSearch Dashboard. The easiest place to start is by launching the Hosted UI. You can find the link in the Cognito User Pool under App Client Settings:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R6-_QJFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5ojzhsvonhh4ovq4yp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R6-_QJFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5ojzhsvonhh4ovq4yp1.png" alt="Cognito Launch HostedUI" width="880" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will allow you to sign up and verify your new account with a code sent to your email address. Once verified and signed in, you can click the heading to visualise and analyse your data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iyc368DJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu1gxownymzf0e20n7zj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iyc368DJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu1gxownymzf0e20n7zj.png" alt="OpenSearch Dashboards" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, click the button to add your data:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xEt46Bd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qovhkdf8b6kf29xy3x80.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xEt46Bd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qovhkdf8b6kf29xy3x80.png" alt="OpenSearch-Dashboards-AddData" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, create an index pattern. If you are using the sample applications, then the index pattern is simply &lt;code&gt;licence&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fS6qoKVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/319f8hdke2bj2m5gsso0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fS6qoKVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/319f8hdke2bj2m5gsso0.png" alt="Define-Index-Pattern" width="880" height="201"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you can go into &lt;code&gt;Dev Tools&lt;/code&gt; and run queries, use metrics aggregation and combine filter and query contexts amongst other features. You can also create visualisations from the raw data in OpenSearch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-cloudwatch-metrics"&gt;
  &lt;/a&gt;
  Custom CloudWatch Metrics
&lt;/h2&gt;

&lt;p&gt;In a previous blog post on &lt;a href="https://dev.to/aws-heroes/tips-to-prevent-a-serverless-wreck-15af"&gt;tips to prevent a serverless wreck&lt;/a&gt;, I strongly advocated the use of metrics to monitor an application. The CloudWatch Embedded Metric Format allows you to create custom metrics, that can be used for visualisations and alarming for real-time incident detection.&lt;/p&gt;

&lt;p&gt;In this sample application, an AWS Lambda function is used to consume an aggregated set of records from a Kinesis Data Stream, and write any new records (inserts, updates or deletes) to OpenSearch. Each request to OpenSearch hits a REST API endpoint, and returns an HTTP Status Code. We can use the returned HTTP Status Code as a custom metric as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createMetricsLogger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Unit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-embedded-metrics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;metrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMetricsLogger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setNamespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OpenSearch Status Codes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putDimensions&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`HTTP_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putMetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ProcessedRecords&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code sets the namespace to be 'OpenSearch Status Codes'. This is the name that will appear in custom namespaces in CloudWatch metrics. We use the returned status code as the dimension. A dimension is a name/value pair that is part of the identity of a metric. Each time we process a record, we use a count of 1 as the unit.&lt;/p&gt;

&lt;p&gt;This results in a log entry in CloudWatch that looks similar to below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"LogGroup"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"qldb-streams-es-dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ServiceName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"qldb-streams-es-dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ServiceType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AWS::Lambda::Function"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"StatusCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"HTTP_200"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"executionEnvironment"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AWS_Lambda_nodejs14.x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"memorySize"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"512"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"functionVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"$LATEST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"logStreamId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021/12/11/[$LATEST]6924daa324e8482099ebcad5c1168c9a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"_aws"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"Timestamp"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1639244821514&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"CloudWatchMetrics"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"Dimensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"LogGroup"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"ServiceName"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"ServiceType"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="s2"&gt;"StatusCode"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"Metrics"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ProcessedRecords"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"Unit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Count"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"Namespace"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"OpenSearch Status Codes"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ProcessedRecords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When streaming records from Kinesis to OpenSearch, there were a handful of status codes commonly returned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP 200 - a successful update to an existing document with an HTTP POST&lt;/li&gt;
&lt;li&gt;HTTP 201 - a successful insert of a new document, or completely overwriting an existing document with an HTTP PUT&lt;/li&gt;
&lt;li&gt;HTTP 409 - an error where the version of the document attempted to be inserted is less than or equal to the one that already exists. This can happen as each data record produced by a QLDB stream is delivered to Kinesis at least once, the same records can appear multiple times, and there are no ordering guarantees. The sample application implements external versioning to resolve this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After streaming a number of records to OpenSearch, we can create a simple CloudWatch Dashboard from the custom metric that looks as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EUsg1XhV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkbstxlq56ib5ryx1bdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EUsg1XhV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkbstxlq56ib5ryx1bdg.png" alt="OpenSearch-Custom-Metrics" width="880" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So there we have it. This post has shown how to quickly get up and running with OpenSearch, configuring Cognito to protect OpenSearch Dashboards, and set up a custom CloudWatch Metrics dashboard for monitoring the HTTP Status Codes that are returned. Please reach out if you have any feedback or suggestions.&lt;/p&gt;

&lt;p&gt;To find out more, read the &lt;a href="https://qldbguide.com/"&gt;QLDB Guide&lt;/a&gt;, follow the curated list of articles, tools and resources at &lt;a href="https://github.com/mlewis7127/awesome-qldb"&gt;Awesome QLDB&lt;/a&gt; or try it out our online demo to see QLDB in action at &lt;a href="https://demo.qldbguide.com/"&gt;QLDB Demo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>serverless</category>
    </item>
    <item>
      <title>int to double type casting</title>
      <author>Govind Vijay</author>
      <pubDate>Wed, 15 Dec 2021 12:23:58 +0000</pubDate>
      <link>https://dev.to/govvj/int-to-double-type-casting-27id</link>
      <guid>https://dev.to/govvj/int-to-double-type-casting-27id</guid>
      <description>&lt;p&gt;Hi all,&lt;br&gt;
Say you have a 4 byte integer and now you want to convert it to double. You might say that's easy, just add couple of zeros to the front. It's not that simple. Its only work for positive integers.&lt;/p&gt;

&lt;p&gt;For simplicity lets assume you have 4 bit integer and you want to convert it to 8 bit.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Let a = -3 = (1101) -&amp;gt; 2's complement&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1101 -&amp;gt; 0010 (1s complement) + 1 -&amp;gt; 0011 -&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you just add zeros then it will become &lt;br&gt;
&lt;code&gt;a = (00001101) = 13&lt;/code&gt;&lt;br&gt;
So instead you take the most significant digit (i.e. 4th bit) and paste it to the new bits.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_FBCKzK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cblnbtu1i5gyrempt6yd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_FBCKzK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cblnbtu1i5gyrempt6yd.png" alt="copy msb bits" width="426" height="173"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a = (11111101) = (00000010 + 1) = (00000011) = 3 -&amp;gt; -3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: when a = 13 we didn't do 2's complement because right most bit was zero.&lt;/p&gt;

</description>
      <category>computerscience</category>
    </item>
    <item>
      <title>Django Doctor is expanding...and rebranding!</title>
      <author>Django Doctor</author>
      <pubDate>Wed, 15 Dec 2021 12:23:53 +0000</pubDate>
      <link>https://dev.to/djangodoctor/django-doctor-is-expandingand-rebranding-e4g</link>
      <guid>https://dev.to/djangodoctor/django-doctor-is-expandingand-rebranding-e4g</guid>
      <description>&lt;p&gt;Django Doctor is a code analysis tool that suggests improvements to your Django code right inside your pull request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UxglXGQg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhjomtr0d52j8sppgcvm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UxglXGQg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhjomtr0d52j8sppgcvm.png" alt="Image description" width="880" height="584"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're expanding the scope of our services to also check Python code in general. As a result we're soon renaming to Code Review Doctor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A3fY5jqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49klefdc3hinlehwkidn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A3fY5jqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49klefdc3hinlehwkidn.png" alt="Image description" width="843" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3xByIsd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95mgsueo6jz0701zidlz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3xByIsd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95mgsueo6jz0701zidlz.png" alt="Image description" width="838" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g1X89O8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/132eo11p8jesxxqyg1yk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g1X89O8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/132eo11p8jesxxqyg1yk.png" alt="Image description" width="841" height="305"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zwhN_swz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i94xpgq3drd9tt4gmpx2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zwhN_swz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i94xpgq3drd9tt4gmpx2.png" alt="Image description" width="838" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5wouFS5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5w9jtcw6rac0k59ivvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5wouFS5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5w9jtcw6rac0k59ivvg.png" alt="Image description" width="841" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sneak peak: &lt;a href="https://CodeReview.doctor"&gt;CodeReview.doctor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our prices remain unchanged, so our valued customers will get more value.&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>github</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Introducing Tode-CLI, A CLI For Scaffolding Nodejs APIs</title>
      <author>Taslan Graham</author>
      <pubDate>Wed, 15 Dec 2021 12:21:57 +0000</pubDate>
      <link>https://dev.to/taslangraham/side-project-tode-cli-1if8</link>
      <guid>https://dev.to/taslangraham/side-project-tode-cli-1if8</guid>
      <description>&lt;p&gt;Hey, y’all! Hope you're doing great! It's been a while since I’ve posted an article – I’ve been busy. One of the things I’ve been busy with is the creation of a node.js CLI tool for scaffolding APIs. In this article, I want to introduce you to this tool.&lt;/p&gt;

&lt;h2&gt;Why I created the tool?&lt;/h2&gt;

&lt;p&gt;First, I want to give a little insight into why I created the CLI I'm about to tell you about. I love using node.js (with express.js) to create APIs. It’s fast and simple to use.  

&lt;br&gt;&lt;br&gt;
However, I dislike having to create common things like models, controllers(routes), and service files from scratch each time I needed one. Additionally, I dislike the tedious efforts needed to set up authentication in applications that requires some level of authentication/authorization. &lt;/p&gt;

&lt;p&gt;This led me to ask the question, “what can I do to avoid this repetition?”.  So, I decided to build a simple tool that could automate some of these things for myself.&lt;/p&gt;

&lt;p&gt;After working on the tool, I decided to publish it to &lt;a href="https://www.npmjs.com/package/tode-cli" rel="noreferrer noopener"&gt;npm &lt;/a&gt;in case someone else might find it useful. Let’s take a closer look at the tool I created.&lt;/p&gt;

&lt;h2&gt;Introducing Tode-CLI&lt;/h2&gt;

&lt;p&gt;Tode-CLI is a tool for scaffolding node.js APIs. It provides commands to automate the boring stuff – creating models, services, controllers, registering routes. Thus, speeding up your development time.&lt;/p&gt;

&lt;p&gt;Tode-CLI comes with an elegant ORM, &lt;a href="https://vincit.github.io/objection.js/" rel="noreferrer noopener"&gt;objection.js&lt;/a&gt;, built on top of the famous query builder, &lt;a href="https://knexjs.org/" rel="noreferrer noopener"&gt;knex.js&lt;/a&gt;. This makes interacting with databases a breeze when working with projects created by tode-cli.&lt;/p&gt;

&lt;p&gt;The following will explore some features of the CLI.&lt;/p&gt;



&lt;h3&gt;Features&lt;/h3&gt;

&lt;p&gt;In this section, I'll take a quick look at some of the core features of the CLI and give usage examples.&lt;/p&gt;

&lt;h4&gt;Generate/scaffold a project&lt;/h4&gt;

&lt;p&gt;The tode-cli provides a command to scaffold a project that has a straightforward folder structure. You scaffold a project by running &lt;code&gt;$ npx tode-cli create-project hello-world&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will generate a project, called &lt;code&gt;hello-world&lt;/code&gt;, with the following folder structure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GH4Tr9Rj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.taslangraham.com/wp-content/uploads/2021/12/image-5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GH4Tr9Rj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.taslangraham.com/wp-content/uploads/2021/12/image-5.png" alt="" width="411" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;npm i&lt;/code&gt; to install the node packages, then run &lt;code&gt;npm run dev&lt;/code&gt; to serve your app locally. Your app will be served at &lt;code&gt;http://localhost:8080/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hitting &lt;code&gt;http://localhost:8080/&lt;/code&gt; via a client (web browser, postman, etc) will give the following response:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MnsAOswn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.taslangraham.com/wp-content/uploads/2021/12/image-2-edited.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MnsAOswn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.taslangraham.com/wp-content/uploads/2021/12/image-2-edited.png" alt="" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The response above is showing all the none nested routes within the application. By default, a &lt;code&gt;example&lt;/code&gt; route comes with the application. &lt;/p&gt;



&lt;h4&gt;Adding a Controller&lt;/h4&gt;

&lt;p&gt;In node applications, it is common to use &lt;code&gt;route&lt;/code&gt; files to handle the routing in the app.
&lt;br&gt;
However, in a tode-cli generated application we call these files controllers and they are stored in the controllers folder. Future updates may see a complete separation of controllers from routes, similar to what popular tools like Laravel and adonis.js does.&lt;/p&gt;

&lt;p&gt;To add a controller to your app you simply run &lt;code&gt;$ npx tode-cli add:controller &amp;lt;controller_name&amp;gt;&lt;/code&gt;. This will scaffold a controller(route) file like the following:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * Create a new Item
   */&lt;/span&gt;
  &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;demo/ - POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Get all Items
   */&lt;/span&gt;
  &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;demo/  - GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Get an Item by Id
   */&lt;/span&gt;
  &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;demo/  - GET /id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Update an Item
   */&lt;/span&gt;
  &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;demo/  - PATCH /id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we created a controller named &lt;code&gt;demo&lt;/code&gt;. This controller is created with handlers for some basic HTTP request methods such as &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt; on the &lt;code&gt;'/demo'&lt;/code&gt; path. &lt;/p&gt;

&lt;p&gt;We can test that our controller is working by hitting &lt;code&gt;http://localhost:8080/demo&lt;/code&gt; via a client(web browser, postman, etc). We should get the following response:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OcllID92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.taslangraham.com/wp-content/uploads/2021/12/image-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OcllID92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.taslangraham.com/wp-content/uploads/2021/12/image-3.png" alt="" width="484" height="159"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we hit &lt;code&gt;http://localhost:8080&lt;/code&gt; again we will see the &lt;code&gt;demo&lt;/code&gt; route in our list of routes. As you can see here, tode-cli apps offer a level of self-documentation for the routes within the application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--shnb2qq8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.taslangraham.com/wp-content/uploads/2021/12/image-6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--shnb2qq8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.taslangraham.com/wp-content/uploads/2021/12/image-6.png" alt="" width="485" height="850"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Models&lt;/h3&gt;

&lt;p&gt;Models are classes that represent a table in your database. You use methods on the model to perform queries on the table it represents via an easy-to-use ORM, &lt;a href="https://vincit.github.io/objection.js/" rel="noreferrer noopener"&gt;Objection.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To create a model you run the command &lt;code&gt;$ npx tode-cli add:model &amp;lt;model_name&amp;gt;&lt;/code&gt;. You'll get a generated model like the following:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;BaseModel&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../BaseMode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;  &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;BaseModel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Name of table that this model maps back to&lt;/span&gt;
  &lt;span class="c1"&gt;// Table name is the only required property.&lt;/span&gt;
  &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;tableName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ENTER_TABLE_NAME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Example property&lt;/span&gt;
  &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Add other table fields (columns) as properties to access them via the model&lt;/span&gt;

  &lt;span class="c1"&gt;// Define the relations to other models.&lt;/span&gt;
  &lt;span class="c1"&gt;// READ MORE at https://vincit.github.io/objection.js/guide/relations.html&lt;/span&gt;
  &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;relationMappings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="c1"&gt;// specify relation with other modules&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above, I generated a model called &lt;code&gt;User&lt;/code&gt;. Models on have one required property, &lt;code&gt;tableName&lt;/code&gt;, which holds the name of the database table that the model represents. You can perform a query to fetch all users in your database table using &lt;code&gt;await User.query()&lt;/code&gt;. Read more about objection.js' queries &lt;a href="https://vincit.github.io/objection.js/guide/query-examples.html" rel="noreferrer noopener"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The static method &lt;code&gt;relationMappings&lt;/code&gt; is where you define your model's relationship with other models - basically representing your database relationships. Read more about objection.js' relationships &lt;a href="https://vincit.github.io/objection.js/guide/relations.html" rel="noreferrer noopener"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note: To use your models to perform queries you'll first need to set up a database connection to the database with your tables. Read more &lt;a href="https://github.com/taslangraham/tode-cli#configuring-database-connection" rel="noreferrer noopener"&gt;here&lt;/a&gt;.&lt;/p&gt;



&lt;h3&gt;Services&lt;/h3&gt;

&lt;p&gt;Service files contain your business logic. To create a service you run the command &lt;code&gt;$ npx tode add:service &amp;lt;service_name&amp;gt;&lt;/code&gt;. When you create a service, a file will be generated like the following.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ServiceReponse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../config/constants&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UserService&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UserService&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is the generated file for a service called &lt;code&gt;UserService&lt;/code&gt;.  You can then add methods to perform any logic inside this file. You'll then call these methods from within a controller or another service. Services are also where you utilize your Models to perform database queries where necessary.&lt;/p&gt;



&lt;h3&gt;Authentication&lt;/h3&gt;

&lt;p&gt;Authentication is an essential part of most applications these days. With Tode-Cli you can integrate basic JSON Web Token (JWT) based authentication in your application by running a single command, &lt;code&gt;$ npx tode-cli add:auth&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This command will create the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Knex Migration to create a &lt;code&gt;Users&lt;/code&gt; table in your database&lt;/li&gt;
&lt;li&gt;Login functionality which you can customise&lt;/li&gt;
&lt;li&gt;Registration functionality which you can customize&lt;/li&gt;
&lt;li&gt;Auth middleware which you can use on protected routes&lt;/li&gt;
&lt;li&gt;Login route - &lt;code&gt;/auth/login&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Registration route - &lt;code&gt;/auth/register&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All you'll need to do afterward is create the users table in your database by executing the migration file that was created. To do this, run the command  &lt;code&gt;$ npx knex migrate:latest&lt;/code&gt;. Now authentication is fully integrated.&lt;/p&gt;



&lt;h2&gt;Technologes used&lt;/h2&gt;

&lt;p&gt;Tode-CLI was developed with the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://oclif.io/" rel="noreferrer noopener"&gt;OCLIF &lt;/a&gt;- an open source framework for building command line interfaces (CLI) in Node.js.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We've covered some of the core features of Tode-CLI. I first created this tool for my personal use. I hope someone else finds it useful. &lt;/p&gt;

&lt;p&gt;You can have a deeper dive into the docs and configurations &lt;a href="https://github.com/taslangraham/tode-cli#readme" rel="noreferrer noopener"&gt;here&lt;/a&gt;. Feel free to try it out. Don't hesitate to report any issues you come across. I aim to improve the CLI as time goes by. &lt;/p&gt;

&lt;p&gt;Thanks for reading, and until next time! &lt;em&gt;Think, Learn, Create, Repeat!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>typescript</category>
      <category>todecli</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Creating Custom Hooks with React.js</title>
      <author>Kuvam Bhardwaj</author>
      <pubDate>Wed, 15 Dec 2021 12:21:50 +0000</pubDate>
      <link>https://dev.to/kuvamdazeus/creating-custom-hooks-with-reactjs-50j6</link>
      <guid>https://dev.to/kuvamdazeus/creating-custom-hooks-with-reactjs-50j6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hooks were introduced quite a while ago in React. They enabled to tap into state &amp;amp; lifecycle methods WITHOUT using class components.&lt;/p&gt;

&lt;p&gt;In this post I will be showing you with the help of a common problem, how can you create a hook for your own. Let's Get Started 🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;So let's suppose we're making a web app where we need to render different components depending upon the &lt;em&gt;screen width&lt;/em&gt; of the user.&lt;/p&gt;

&lt;p&gt;So we wrote this code to solve it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3KvUNB30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639565466322/E5D6QXY73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3KvUNB30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639565466322/E5D6QXY73.png" alt="arbitrary code to solve window screen width problem" width="880" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will work fine. Missing one crucial case, &lt;strong&gt;What if the user switches to landscape mode on its mobile?&lt;/strong&gt; The site will still be showing the mobile screen component &lt;em&gt;instead of showing the desktop or bigger screen component&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Of course, this problem can be solved with CSS &amp;amp; rather with 2-3 words with tailwind.&lt;br&gt;
The thing is, I want to show you another way of solving this problem &lt;strong&gt;The Reactive&lt;/strong&gt; way!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-hook-component"&gt;
  &lt;/a&gt;
  Creating the Hook Component
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zfn_5F6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639567243778/DCTcoSMQF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zfn_5F6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639567243778/DCTcoSMQF.png" alt="useWindowWidth custom react hook" width="880" height="689"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-just-happened"&gt;
  &lt;/a&gt;
  What just happened?
&lt;/h3&gt;

&lt;p&gt;Here, if you look at the &lt;code&gt;useWindowWidth&lt;/code&gt; function, you'll notice that it's just a normal function that also happens to use other built-in hooks like &lt;code&gt;useState&lt;/code&gt; &amp;amp; &lt;code&gt;useEffect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What this function does is, it declares a state variable &lt;em&gt;in its scope&lt;/em&gt; with &lt;code&gt;useState&lt;/code&gt; calling it &lt;code&gt;width&lt;/code&gt; &amp;amp; its setter &lt;code&gt;setWidth&lt;/code&gt; and throws in the value of &lt;code&gt;window.screen.width&lt;/code&gt; as its initial state.&lt;/p&gt;

&lt;p&gt;Then, we call the &lt;code&gt;useEffect&lt;/code&gt; hook and add an event listener for the 'resize' event firing off a function that sets the value of &lt;code&gt;width&lt;/code&gt; whenever the browser window is resized.&lt;/p&gt;

&lt;p&gt;If you look closely at the &lt;code&gt;useEffect&lt;/code&gt; hook, you'll see an empty array which is there to indicate that &lt;em&gt;this &lt;code&gt;useEffect&lt;/code&gt; does not depend on any external value&lt;/em&gt; meaning that it will ONLY RUN ONCE even in occasional re-renders. &lt;strong&gt;This array is also called the DEPENDENCY ARRAY of the &lt;code&gt;useEffect&lt;/code&gt; hook&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next, we return the &lt;code&gt;width&lt;/code&gt; value as the output of this function. Next time the browser window is resized, it will return a new value of &lt;code&gt;width&lt;/code&gt; representing the window's current screen width. And we know that whenever we associate &lt;code&gt;useState&lt;/code&gt; to a variable, &lt;em&gt;it causes a re-render in every location where the variable was referenced&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is how it is working now:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXhktmBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://im7.ezgif.com/tmp/ezgif-7-e7a77eaa5d.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXhktmBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://im7.ezgif.com/tmp/ezgif-7-e7a77eaa5d.gif" alt="working of custom hooks" width="600" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For those of you thinking:&lt;br&gt;&lt;br&gt;
" Hey! but why we prefixed 'use' with the function's name in &lt;code&gt;useWindowWidth&lt;/code&gt;? "&lt;/p&gt;

&lt;p&gt;This is a text I extracted from the &lt;a href="https://reactjs.org/docs/hooks-custom.html#using-a-custom-hook"&gt;official documentation&lt;/a&gt; of React.js on custom hooks, have a look:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do I have to name my custom Hooks starting with “use”? Please do. This convention is very important. Without it, we wouldn’t be able to automatically check for violations of rules of Hooks because we couldn’t tell if a certain function contains calls to Hooks inside of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#outro"&gt;
  &lt;/a&gt;
  Outro
&lt;/h2&gt;

&lt;p&gt;The use of custom hooks is not limited to just this use case, you can apply it pretty much anywhere you like from auto-login functions to UI-related parts. Even making queries to the server on regular basis, that helps deliver a near-real-time experience to the end user. Possibilities are, as always, ENDLESS.&lt;/p&gt;

&lt;p&gt;So, that's all for today folks! hope you found it helpful :)&lt;/p&gt;




&lt;p&gt;If you like my posts, consider following :)&lt;/p&gt;

&lt;p&gt;Twitter -&amp;gt; &lt;a href="https://twitter.com/BhardwajKuvam"&gt;@BhardwajKuvam&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Github -&amp;gt; &lt;a href="https://github.com/kuvamdazeus"&gt;@kuvamdazeus&lt;/a&gt;&lt;br&gt;&lt;br&gt;
LinkedIn -&amp;gt; &lt;a href="https://www.linkedin.com/in/kuvambhardwaj"&gt;@kuvambhardwaj&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Portfolio -&amp;gt; &lt;a href="https://kuvambhardwaj.vercel.app"&gt;kuvambhardwaj.vercel.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/kuvam"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wHOoTehh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lokbm1o1fdnkevsvr7m.png" width="453" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Development in Apple M1</title>
      <author>Emili Parreno</author>
      <pubDate>Wed, 15 Dec 2021 12:03:36 +0000</pubDate>
      <link>https://dev.to/eparreno/development-in-apple-m1-4d4l</link>
      <guid>https://dev.to/eparreno/development-in-apple-m1-4d4l</guid>
      <description>&lt;p&gt;I got a new laptop one week ago and I've been investigating different ways of setting up our dev environment. Here are my findings&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-machines"&gt;
  &lt;/a&gt;
  Virtual Machines
&lt;/h2&gt;

&lt;p&gt;There are different options&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Virtual Box doesn't work as of today in Apple M1&lt;/li&gt;
&lt;li&gt;Parallels, nice but you have to buy a license&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mac.getutm.app"&gt;UTM&lt;/a&gt;, very nice UI on top of QEMU. My preferred choice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you run ARM virtual machines, it's fast as hell, feels like a native app, probably having a M1 Max with 10 cores and 64Gb of RAM helps bit :) but I wanted to use mainly x86 VMs and they are not so fast. I'll definitely use UTM in the future for running ARM based VMs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  Docker
&lt;/h2&gt;

&lt;p&gt;If you run everything inside Docker, it works out of the box. I didn't experience any issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apples-rosetta"&gt;
  &lt;/a&gt;
  Apple's Rosetta
&lt;/h2&gt;

&lt;p&gt;It turns out that the best virtualisation software comes already with you default MacOS installation and it's called Rosetta!&lt;/p&gt;

&lt;p&gt;Here's how I set up my dev laptop &lt;/p&gt;

&lt;p&gt;Duplicate your Terminal or iTerm app and give it a different name&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1KlV1Xgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7jtbbgix3s19gh75ehv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1KlV1Xgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7jtbbgix3s19gh75ehv.png" alt="Image description" width="320" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I ended up with&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--loxiuiXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76gkem72xxsukti1lx03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--loxiuiXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76gkem72xxsukti1lx03.png" alt="Image description" width="318" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the x86 terminal, get info details (CMD + i) and check "Open using Rosetta"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uTj6PZiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srebp6gu8wvrguznjfjt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uTj6PZiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srebp6gu8wvrguznjfjt.png" alt="Image description" width="388" height="374"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it. Yes, really, that's all you need. Open your x86 terminal and you have an emulated x86 environment that just works.&lt;/p&gt;

&lt;p&gt;If you install Hombrew in both envs it will be installed in different folders, the traditional &lt;code&gt;/usr/local/Cellar&lt;/code&gt; for Intel based and the new one &lt;code&gt;opt/hombrew/Cellar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I have a check in my &lt;code&gt;.zshrc&lt;/code&gt; to load paths based on the arch. With that approach you need to be mindful about the arch you are running and loading the proper paths or executing the right code after login.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if [ $(arch) = 'arm64' ]; then
  ...
else
  ...
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also added &lt;code&gt;$(arch)&lt;/code&gt; to my prompt to know in which environment I am&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8tgVnPUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20taxcgaexwavzu4koay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8tgVnPUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20taxcgaexwavzu4koay.png" alt="Image description" width="289" height="81"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h2&gt;

&lt;p&gt;If you install the same app or library in both environments they may clash. Let's say you install MySQL in both ARM and x86 using Homebrew and you want to link the binary, you should choose on what env you do it. Just be careful about that.&lt;br&gt;
For me hasn't been a problem because I mainly use x86 so I didn't install anything in the ARM env. Just avoid installing the same stuff in both envs.&lt;br&gt;
If you really need to use both arches, an alternative could be using Rosetta to emulate x86 and UTM to run ARM based VMs so you don't risk messing with duplicated libraries or apps.&lt;/p&gt;

</description>
      <category>apple</category>
      <category>m1</category>
      <category>silicon</category>
      <category>arm</category>
    </item>
  </channel>
</rss>
