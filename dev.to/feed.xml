<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Sharpen your Ruby: Part 4</title>
      <author>Eric The Coder</author>
      <pubDate>Fri, 27 Aug 2021 18:59:42 +0000</pubDate>
      <link>https://dev.to/ericchapman/sharpen-your-ruby-part-4-15a3</link>
      <guid>https://dev.to/ericchapman/sharpen-your-ruby-part-4-15a3</guid>
      <description>&lt;p&gt;I develop in Javascript, Python, PHP, and Ruby. By far Ruby is my favorite programming language. &lt;/p&gt;

&lt;p&gt;Together let start a journey and revisit our Ruby foundations. &lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;EricTheCoder_&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you have any questions/comments or you are new and need help, you can comment below or send me a message.&lt;/p&gt;

&lt;h2&gt;Whats is a Method?&lt;/h2&gt;

&lt;p&gt;Methods are a powerful feature for building Ruby programs, they allow you to encapsulate behavior and call the method later on to build a full program.&lt;/p&gt;

&lt;h3&gt;Method syntax&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Method name must start with a letter. It may contain letters, numbers, an _ (underscore or low line). &lt;/li&gt;
&lt;li&gt;The convention is to use underscores to separate words in a multiword method name&lt;/li&gt;
&lt;li&gt;Method is declared with the 'def' keyword followed by the method name and parameters and finish with an 'end' keyword&lt;/li&gt;
&lt;li&gt;Method parameters are specified after the method name and are enclosed in parentheses.&lt;/li&gt;
&lt;li&gt;To invoke (call) the method you just use is name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Calling the method&lt;/span&gt;
&lt;span class="n"&gt;display_message&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;

&lt;span class="c1"&gt;# or with optional parentheses&lt;/span&gt;
&lt;span class="n"&gt;display_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Methods Return value&lt;/h3&gt;

&lt;p&gt;Ruby specifically has a unique way of working with returned values. &lt;/p&gt;

&lt;p&gt;Ruby automatically return the last line of the method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;addition&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="c1"&gt;# 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is the exact same thing as this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;addition&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="c1"&gt;# 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the last line is always return, the return keyword is optional.&lt;/p&gt;

&lt;p&gt;Attention. This can be confusing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;addition&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="c1"&gt;# 15&lt;/span&gt;
&lt;span class="c1"&gt;# empty&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the last line always returns Ruby return the results of the puts method and that's nothing. &lt;/p&gt;

&lt;p&gt;So there is a clear difference between returning a + b vs returning puts a + b&lt;/p&gt;

&lt;p&gt;By convention, the keyword 'return' is never used if we want to return the last line (since that's the Ruby default).&lt;/p&gt;

&lt;p&gt;But the keyword 'return' need to be used if we want to return something before the last line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Number too high'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="s1"&gt;'Number is correct'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# call the method to test the result&lt;/span&gt;
&lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="c1"&gt;# Number too high&lt;/span&gt;
&lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# Number are correct&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method will return 'Number too high' if variable 'a' is greater than 100. After the return the method will end. So the last line will never be executed.&lt;/p&gt;

&lt;p&gt;If variable 'a' is less or equal to 100. The method will return 'Number is correct'. And again, since it is the last line of the method the 'return' keyword is optional.&lt;/p&gt;

&lt;h3&gt;Method name that end with a ?&lt;/h3&gt;

&lt;p&gt;In Ruby some method name end with a ?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;even?&lt;/span&gt; &lt;span class="c1"&gt;# true&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;odd?&lt;/span&gt; &lt;span class="c1"&gt;# false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By convention methods that end with a '?' always return a boolean value (true or false).&lt;/p&gt;

&lt;p&gt;You can create your own boolean method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_valid?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# call the method&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;is_valid?&lt;/span&gt; &lt;span class="s1"&gt;'secret'&lt;/span&gt;
&lt;span class="c1"&gt;# true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Method name that end with a !&lt;/h3&gt;

&lt;p&gt;In Ruby some method names ends with a ! Those methods are call bang methods. Bang method modifies an object in place. This can be dangerous because it changes the object value and that may be not your intent.&lt;/p&gt;

&lt;p&gt;For example, Ruby has two reverse methods one regular and one bang!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;
&lt;span class="c1"&gt;# and&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The bang! method will change the value of the object in-place&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse!&lt;/span&gt; &lt;span class="c1"&gt;# ekiM&lt;/span&gt;

&lt;span class="c1"&gt;# that method bang! will have also update the name variable&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="c1"&gt;# ekiM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Methods arguments default value&lt;/h3&gt;

&lt;p&gt;It is possible to set default value for method parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;addition&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="c1"&gt;# 110&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since b is not specified Ruby use it default value of 10&lt;/p&gt;

&lt;h3&gt;Methods Named Arguments&lt;/h3&gt;

&lt;p&gt;Since an image is worth a thousand words let look at this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shipping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;taxes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;shipping_fee&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;taxes&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 270&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, with multiple arguments it can become difficult to read understand which arguments is what.&lt;/p&gt;

&lt;p&gt;Named arguments are made for that kind of situation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shipping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;taxes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;shipping&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;taxes&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shipping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;taxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 270&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the method used is clearer. &lt;/p&gt;

&lt;p&gt;Another good thing about named arguments is that you can change the order of the arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;taxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shipping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 270&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Exercise&lt;/h1&gt;

&lt;p&gt;Create a little program that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a method name subtraction with 3 arguments&lt;/li&gt;
&lt;li&gt;That method with return the result of subtraction of the 3 numbers pass as arguments.&lt;/li&gt;
&lt;li&gt;If the last argument is not specified it will be treated as default value of 0&lt;/li&gt;
&lt;li&gt;Call that method and print its result&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subtraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;subtraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That's it for today. The journey just started, stay tuned for the next post very soon. (later today or tomorrow)&lt;/p&gt;

&lt;p&gt;If you have any comments or questions please do so here or send me a message on Twitter. &lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;EricTheCoder_&lt;/a&gt; &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Using RegEx Capturing Groups </title>
      <author>Swarnali Roy</author>
      <pubDate>Fri, 27 Aug 2021 18:03:10 +0000</pubDate>
      <link>https://dev.to/swarnaliroy94/using-regex-capturing-groups-je2</link>
      <guid>https://dev.to/swarnaliroy94/using-regex-capturing-groups-je2</guid>
      <description>&lt;p&gt;Hello Readers!&lt;/p&gt;

&lt;p&gt;I always love to work with Regular Expressions and a very important concept of RegEx is &lt;em&gt;"RegEx Capturing Groups"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes in a string, &lt;em&gt;patterns&lt;/em&gt; we &lt;em&gt;search&lt;/em&gt; for may occur &lt;em&gt;multiple times&lt;/em&gt;. It is wasteful to manually &lt;em&gt;repeat&lt;/em&gt; that regex. A better way to specify when we have &lt;em&gt;multiple repeated substrings&lt;/em&gt; is using &lt;em&gt;"RegEx Capturing Groups"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;👉 Parentheses (  ), are used to find &lt;em&gt;repeated substrings&lt;/em&gt;. We just need to put the &lt;em&gt;regex&lt;/em&gt; that will repeat in between the parentheses. &lt;br&gt;
👉 It allows to get a part of the match as a &lt;em&gt;separate item&lt;/em&gt; in the result array.&lt;br&gt;
👉 If we put a &lt;em&gt;quantifier&lt;/em&gt; after the parentheses, it applies to the parentheses as a whole.&lt;/p&gt;

&lt;p&gt;Let's see an &lt;em&gt;example&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;go&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;+/ig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goGoGOgOgoooogo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'goGoGOgOgo', 'go' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parentheses ( ), group characters together, so (go)+ means &lt;em&gt;"go"&lt;/em&gt;, &lt;em&gt;"gogo"&lt;/em&gt;, "&lt;em&gt;gogogo&lt;/em&gt;" and so on. But once it found another o after "go", it stopped matching the regex. Then again, when it found another &lt;em&gt;"go"&lt;/em&gt; , it returned a second match.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#specify-regex-capturing-groups-using-numbers"&gt;
  &lt;/a&gt;
  Specify RegEx Capturing Groups using Numbers
&lt;/h4&gt;

&lt;p&gt;Let's say, we need to write a pattern which will repeat more than once in a string. In that case, we can easily specify it without writing the pattern again and again.&lt;/p&gt;

&lt;p&gt;To specify where that repeat string will appear, you need to use a backslash () and then a number. This number starts at 1 and increases with each additional capture group you want to use. &lt;/p&gt;

&lt;p&gt;🔸 Example: The code block will &lt;em&gt;match&lt;/em&gt; a string that consists of only the &lt;em&gt;same number&lt;/em&gt; repeated exactly three times separated by single spaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;repeatNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;93 93 93&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wrongNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100 100 200 100&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;(\d&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)\s\1\s\1&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repeatNum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;

&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;repeatNum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [ '93 93 93' ]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wrongRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wrongNum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wrongRes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;

&lt;span class="nx"&gt;wrongRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wrongNum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wrongRes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;/^(\d+)\s\1\s\1$/&lt;/code&gt; this regex explains: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;(i)&lt;/em&gt; a &lt;em&gt;caret&lt;/em&gt; &lt;code&gt;( ^ )&lt;/code&gt; is at the &lt;em&gt;beginning&lt;/em&gt; of the entire &lt;em&gt;regular expression&lt;/em&gt;, it matches the &lt;em&gt;beginning of a line&lt;/em&gt;.&lt;br&gt;
&lt;em&gt;(ii)&lt;/em&gt; &lt;code&gt;(\d+)&lt;/code&gt; is the first capturing group that finds &lt;em&gt;any digit from 0-9&lt;/em&gt; appears at least &lt;em&gt;one or more times&lt;/em&gt; in the string.&lt;br&gt;
&lt;em&gt;(iii)&lt;/em&gt; &lt;code&gt;\s&lt;/code&gt; finds a &lt;em&gt;single white space&lt;/em&gt;&lt;br&gt;
&lt;em&gt;(iv)&lt;/em&gt; &lt;code&gt;\1&lt;/code&gt; represents the first capturing group which is &lt;code&gt;(\d+)&lt;/code&gt;.&lt;br&gt;
&lt;em&gt;(v)&lt;/em&gt; a &lt;em&gt;dollar sign ( $ )&lt;/em&gt; is at the &lt;em&gt;end&lt;/em&gt; of the entire &lt;em&gt;regular expression&lt;/em&gt;, it matches the &lt;em&gt;end of a line&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;🔹 The &lt;em&gt;first capturing group&lt;/em&gt; is repeated with * \1 * and separated by &lt;em&gt;white space&lt;/em&gt;. The output will match any three same numbers like &lt;em&gt;"100 100 100"&lt;/em&gt;, &lt;em&gt;"93 93 93"&lt;/em&gt; but will not match more than 3 times! &lt;br&gt;
🔹 &lt;code&gt;regex.test(repeatNum)&lt;/code&gt; returns true and matches "93 93 93" but &lt;code&gt;regex.test(wrongNum)&lt;/code&gt; returns false and as it doesn't find any match, .match() returns &lt;em&gt;null&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#regex-capturing-groups-to-search-and-replace-text-in-a-string-using-stringreplace"&gt;
  &lt;/a&gt;
  RegEx Capturing Groups to &lt;em&gt;Search and Replace&lt;/em&gt; Text in a String using string.replace()
&lt;/h4&gt;

&lt;p&gt;In &lt;em&gt;regular expressions&lt;/em&gt;, we can make &lt;em&gt;searching&lt;/em&gt; even more powerful when it also &lt;em&gt;replaces&lt;/em&gt; the text we need to &lt;em&gt;match&lt;/em&gt;.&lt;br&gt;
&lt;code&gt;string.replace()&lt;/code&gt; is the desired method to &lt;em&gt;search and replace&lt;/em&gt; any pattern in that string. &lt;/p&gt;

&lt;p&gt;👉 It requires &lt;em&gt;two parameters&lt;/em&gt;. &lt;br&gt;
👉 First is the &lt;em&gt;regex pattern&lt;/em&gt; we want to search for.&lt;br&gt;
👉 Second is the &lt;em&gt;string to replace&lt;/em&gt; the match or a &lt;em&gt;function&lt;/em&gt; to do something. &lt;br&gt;
👉 &lt;em&gt;Capturing groups&lt;/em&gt; can be accessed in the &lt;em&gt;replacement string&lt;/em&gt; with &lt;em&gt;dollar signs ($)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;🔸 Example: The &lt;em&gt;"str" string&lt;/em&gt; includes three different words. We need to capture &lt;em&gt;three different groups&lt;/em&gt;. A regex &lt;em&gt;"fixRegex"&lt;/em&gt; is used for capturing &lt;em&gt;three capture groups&lt;/em&gt; that will search for &lt;em&gt;each word&lt;/em&gt; in the string. Then update the &lt;em&gt;"replaceText"&lt;/em&gt; variable to &lt;em&gt;replace&lt;/em&gt; the string &lt;em&gt;"one two three"&lt;/em&gt; with the string &lt;em&gt;"three two one"&lt;/em&gt; and assign the result to the &lt;em&gt;result&lt;/em&gt; variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;one two three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fixRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;(\w&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)\s(\w&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)\s(\w&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;replaceText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$3 $2 $1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixRegex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;replaceText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//three two one&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The regex &lt;code&gt;/^(\w+)\s(\w+)\s(\w+)$/&lt;/code&gt; explains:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(i)&lt;/em&gt; a &lt;em&gt;caret ( ^ )&lt;/em&gt; is at the &lt;em&gt;beginning&lt;/em&gt; of the entire &lt;em&gt;regular expression&lt;/em&gt;, it matches the &lt;em&gt;beginning of a line&lt;/em&gt;. &lt;br&gt;
&lt;em&gt;(ii)&lt;/em&gt; &lt;code&gt;\w&lt;/code&gt; means Find a word character including _ &lt;br&gt;
&lt;em&gt;(iii)&lt;/em&gt; &lt;code&gt;+&lt;/code&gt; after &lt;code&gt;\w&lt;/code&gt; means find a word character including _ that matches any string that contains &lt;em&gt;at least one word character&lt;/em&gt;.&lt;br&gt;
&lt;em&gt;(iv)&lt;/em&gt; &lt;code&gt;\s&lt;/code&gt; means Find a &lt;em&gt;white space&lt;/em&gt; character.&lt;br&gt;
&lt;em&gt;(v)&lt;/em&gt; a &lt;em&gt;dollar sign ( $ )&lt;/em&gt; is at the &lt;em&gt;end&lt;/em&gt; of the entire &lt;em&gt;regular expression&lt;/em&gt;, it matches the &lt;em&gt;end of a line&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As there are &lt;em&gt;three different capturing groups&lt;/em&gt;, so &lt;em&gt;\1&lt;/em&gt; after &lt;em&gt;\s&lt;/em&gt; will not work as it will repeat the word &lt;em&gt;"one"&lt;/em&gt;. We need to write &lt;em&gt;(\w+)&lt;/em&gt; three times. &lt;/p&gt;

&lt;p&gt;🔹 The &lt;em&gt;"replaceText"&lt;/em&gt; replaced the &lt;em&gt;1st capturing group&lt;/em&gt; with the &lt;em&gt;3rd capturing group&lt;/em&gt; which is simply done with the &lt;em&gt;dollar sign ($)&lt;/em&gt;. &lt;br&gt;
🔹 $3 captures the &lt;em&gt;3rd group&lt;/em&gt; which is the word &lt;em&gt;"three"&lt;/em&gt; and replaces it with the &lt;em&gt;1st group&lt;/em&gt; 1 which is &lt;em&gt;"one"&lt;/em&gt; using $1. &lt;br&gt;
🔹 The &lt;em&gt;2nd group&lt;/em&gt; remains as it is denoted by $2.&lt;br&gt;
🔹 The &lt;code&gt;string.replace()&lt;/code&gt; method took the &lt;em&gt;fixRegex&lt;/em&gt; as &lt;em&gt;first parameter&lt;/em&gt; and &lt;em&gt;replaceText&lt;/em&gt; as the &lt;em&gt;second parameter&lt;/em&gt; and simply returned &lt;em&gt;"three two one"&lt;/em&gt; replacing one and three with each other. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#if-you-find-it-interesting-write-a-regex-to-solve-this-problem-replace-the-following-string-with-five-three-one-6-4-2-using-regex-capturing-groups-and-stringreplace-method"&gt;
  &lt;/a&gt;
  If you find it interesting, write a regex to solve this problem. Replace the following string with &lt;em&gt;"five three one 6 4 2"&lt;/em&gt; using &lt;em&gt;RegEx Capturing Groups&lt;/em&gt; and &lt;em&gt;string.replace&lt;/em&gt; method.
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;one 2 three 4 five 6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//output: five three one 6 4 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#questions-are-always-welcomed-in-the-discussion-section"&gt;
  &lt;/a&gt;
  Questions are always welcomed in the discussion section!!
&lt;/h6&gt;

</description>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Security of AWS CloudHSM Backups | AWS White Paper Summary </title>
      <author>Salah Elhossiny</author>
      <pubDate>Fri, 27 Aug 2021 17:54:31 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/security-of-aws-cloudhsm-backups-aws-white-paper-summary-58d6</link>
      <guid>https://dev.to/awsmenacommunity/security-of-aws-cloudhsm-backups-aws-white-paper-summary-58d6</guid>
      <description>&lt;ul&gt;
&lt;li&gt;AWS CloudHSM clusters provide high availability and redundancy by distributing cryptographic operations across all hardware security modules (HSMs) in the cluster.&lt;/li&gt;
&lt;li&gt;Backup and restore is the mechanism by which a new HSM in a cluster is synchronized.&lt;/li&gt;
&lt;li&gt;This whitepaper provides details on thecryptographic mechanisms supporting backup and restore functionality, and the security mechanisms protecting the Amazon Web Services (AWS)-managed backups.&lt;/li&gt;
&lt;li&gt;It also provides in-depth information on how backups are protected in all three phases of the CloudHSM backup lifecycle process: Creation, Archive, and Restore.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the purposes of this whitepaper, it is assumed that you have a basic understanding of AWS CloudHSM and cluster architecture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS offers two options for securing cryptographic keys in the AWS Cloud: AWS Key Management Service (AWS KMS) and AWS CloudHSM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS KMS is a managed service that uses hardware security modules (HSMs) to protect the security of your encryption keys. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS CloudHSM delivers fully managed HSMs in the AWS Cloud, which allows you to add secure, validated key storage and high-performance crypto acceleration to your AWS applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CloudHSM offers you the option of single-tenant access and control over your HSMs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CloudHSM is based on Federal Information Processing Standards (FIPS) 140-2 Level 3 validated hardware.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CloudHSM delivers fully managed HSMs in the AWS Cloud. CloudHSM delivers all the benefits of traditional HSMs including secure generation, storage, and management of cryptographic keys used for data encryption that are controlled and accessible only by you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HSM capacity can be scaled quickly by adding and removing HSMs from your cluster on demand. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The backup and restore functionality of CloudHSM is what enables scalability, reliability, and high availability in CloudHSM. A key aspect of the backup and restore feature is a secure backup protocol that CloudHSM uses to back up your cluster. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This paper takes an in-depth look at the security mechanisms in place around this feature.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-cloudhsm-managed-by-aws-controlled-by-you"&gt;
  &lt;/a&gt;
  AWS CloudHSM: Managed by AWS, controlled by you
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;AWS CloudHSM provides HSMs in a cluster. A cluster is a collection of individual HSMs that AWS CloudHSM keeps in sync. &lt;/li&gt;
&lt;li&gt;You can think of a cluster as one logical HSM. When you perform a key generation task or operation on one HSM in a cluster, the other HSMs in that cluster are automatically kept up to date. &lt;/li&gt;
&lt;li&gt;Each HSM in a cluster is a single-tenant HSM under your control. &lt;/li&gt;
&lt;li&gt;At the hardware level, each HSM includes hardware-enforced isolation of crypto operations and key storage. &lt;/li&gt;
&lt;li&gt;Each HSM runs on dedicated cryptographic cores.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each HSM appears as a network resource in your virtual private cloud (VPC).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS manages the HSM on your behalf, performing functions such as health checks, backups, and synchronization of HSMs within a cluster&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, you alone control the user accounts, passwords, login policies, key rotation procedures, and all aspects of configuring and using the HSMs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The implication of this control is that your cryptographic data is secure from external compromise. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is important to financial applications subject to PCI regulations, healthcare applications subject to HIPAA regulations, and streaming video solutions subject to contractual DRM requirements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You interact with the HSMs in a cluster via the AWS CloudHSM client.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Communication occurs over an end-to-end encrypted channel. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS does not have visibility into your communication with your HSM, which occurs within this end-to-end encrypted channel.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#high-availability"&gt;
  &lt;/a&gt;
  High availability
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CloudHSM makes scalability and high availability simple without compromising security.&lt;/li&gt;
&lt;li&gt;When you use CloudHSM you begin by creating a cluster in a particular AWS Region. &lt;/li&gt;
&lt;li&gt;A cluster can contain multiple individual HSMs. For idle workloads, you can delete all HSMs and simply retain the empty cluster. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;For production workloads, you should have at least two HSMs spread across multiple Availability Zones. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CloudHSM automatically synchronizes and load balances the HSMs within a cluster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The CloudHSM client load-balances cryptographic operations across all HSMs in the cluster based on the capacity of each HSM for additional processing. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a cluster requires additional throughput, you can expand your cluster by adding more HSMs through a single API call or a click in the CloudHSM console.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you expand a cluster, CloudHSM automatically provisions a new HSM as a clone of the other HSMs in the cluster. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is done by taking a backup of an existing HSM and restoring it to the newly added HSM. When you delete an HSM from a cluster, a backup is automatically taken. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This way, when you create a new HSM later, you can pick up where you left off. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Should an HSM fail for any reason, the service will automatically replace it with a new, healthy HSM. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This HSM is restored from a backup of another HSMs in the cluster if available. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Otherwise, the new HSM is restored from the last available backup taken for the cluster.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cloudhsm-cluster-backups"&gt;
  &lt;/a&gt;
  CloudHSM cluster backups
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Backups are initiated, archived, and restored by CloudHSM. &lt;/li&gt;
&lt;li&gt;A backup is a complete, encrypted snapshot of the HSM.&lt;/li&gt;
&lt;li&gt;Each AWS-managed backup contains the entire contents of the HSM, including keys, certificates, users, policies, quorum settings, and configuration options.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This includes:&lt;/p&gt;

&lt;p&gt;• Certificates on the HSM, including the cluster certificate.&lt;br&gt;&lt;br&gt;
• All HSM users (COs, CUs, and AU).&lt;br&gt;&lt;br&gt;
• All key material on the HSM.&lt;br&gt;&lt;br&gt;
• HSM configurations and policies.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#archiving-a-backup"&gt;
  &lt;/a&gt;
  Archiving a backup
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CloudHSM stores the cluster backups in a service-controlled Amazon S3 location in the same AWS Region as your cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DyoPJ63Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130732655-561b5e18-acf2-496b-a00e-0650b2eacee8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DyoPJ63Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130732655-561b5e18-acf2-496b-a00e-0650b2eacee8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#restoring-a-backup"&gt;
  &lt;/a&gt;
  Restoring a backup
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Backups are used in two scenarios: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you provision a new cluster using an existing backup.&lt;/li&gt;
&lt;li&gt;When a second (or subsequent) HSM is added to a cluster, or when CloudHSM automatically replaces an unhealthy HSM.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In both scenarios, the backup is restored to a newly created HSM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;During restoration, the backup is decrypted within an HSM. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The decryption relies on a set of keys available only within an authentic hardware instance from the original manufacturer, installed in the AWS Cloud.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Note that while CloudHSM manages backups, the service does not have any access to the data, cryptographic material, user information, and the keys encapsulated within the backup. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Specifically, AWS has no way to recover your keys if you lose your access credentials to log in to the HSM.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#security-of-backups"&gt;
  &lt;/a&gt;
  Security of backups
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The CloudHSM backup mechanism has been validated under &lt;a href="https://csrc.nist.gov/csrc/media/projects/cryptographic-module-validation-program/documents/security-policies/140sp2850.pdf"&gt; FIPS 140-2 Level 3 &lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;A backup taken by an HSM configured in FIPS-mode cannot be restored to an HSM that is not also in FIPS-mode.&lt;/li&gt;
&lt;li&gt;An HSM in FIPS-mode is running production firmware provided by the manufacturer and signed with a FIPS production key.&lt;/li&gt;
&lt;li&gt;This ensures other parties cannot forge the firmware.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#key-hierarchy"&gt;
  &lt;/a&gt;
  Key hierarchy
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A backup is encrypted within the HSM before it is provided to CloudHSM for archival. The backup is encrypted using a backup encryption key, described in the following section.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7BCuCy12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130733652-3c935b13-782f-4ae2-bee7-1549153de7d7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7BCuCy12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/130733652-3c935b13-782f-4ae2-bee7-1549153de7d7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#manufacturers-key-backup-key-mkbk"&gt;
  &lt;/a&gt;
  Manufacturer’s key backup key (MKBK)
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The manufacturer’s key backup key (MKBK) exists in the HSM hardware provided by the manufacturer.&lt;/li&gt;
&lt;li&gt;The MKBK cannot be accessed or used by any user or for any purpose other than the generation of the backup encryption key.&lt;/li&gt;
&lt;li&gt;Specifically, AWS does not have access to or visibility into the MKBK.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#aws-key-backup-key-akbk"&gt;
  &lt;/a&gt;
  AWS key backup key (AKBK)
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The AWS key backup key (AKBK) is securely installed by the CloudHSM service when the hardware is placed into operation within the CloudHSM fleet.&lt;/li&gt;
&lt;li&gt;This key is unique to hardware installed by AWS within our CloudHSM infrastructure.&lt;/li&gt;
&lt;li&gt;The AKBK is generated securely within an offline FIPS-compliant hardware security module, and loaded under two-person control into newly commissioned CloudHSM hardware.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#backup-encryption-key-bek"&gt;
  &lt;/a&gt;
  Backup Encryption Key (BEK)
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The backup of the HSM is encrypted using a backup encryption key (BEK). &lt;/li&gt;
&lt;li&gt;The BEK is an AES-256 key that is generated within the HSM when a backup is requested. &lt;/li&gt;
&lt;li&gt;The HSM uses the BEK to encrypt its backup. &lt;/li&gt;
&lt;li&gt;The encrypted backup includes a wrapped copy of the BEK.&lt;/li&gt;
&lt;li&gt;The BEK is wrapped with an AES 256-bit wrapping key using a FIPS-approved
AES key wrapping method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#refernces"&gt;
  &lt;/a&gt;
  Refernces
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://d1.awsstatic.com/whitepapers/Security/security-of-aws-cloudhsm-backups.pdf"&gt; Original paper &lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>security</category>
      <category>cloud</category>
    </item>
    <item>
      <title>DOM Explained</title>
      <author>Anamika</author>
      <pubDate>Fri, 27 Aug 2021 17:44:34 +0000</pubDate>
      <link>https://dev.to/anamkaa_/dom-explained-12dd</link>
      <guid>https://dev.to/anamkaa_/dom-explained-12dd</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-dom"&gt;
  &lt;/a&gt;
  What is DOM?
&lt;/h3&gt;

&lt;p&gt;DOM stands for Document Object Model. It is an programming interface for web documents. It shows how document content is accessed and modified. It defines the logical structure of documents. It represents the document as nodes and objects, such that any programming language can interact with the page.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#dom-structure"&gt;
  &lt;/a&gt;
  DOM Structure
&lt;/h5&gt;

&lt;p&gt;It can be depicted as a tree-like structure. The objects are organized in a hierarchical manner. It follows as :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Window object &lt;/li&gt;
&lt;li&gt;Document object &lt;/li&gt;
&lt;li&gt;Form object &lt;/li&gt;
&lt;li&gt;Form control elements
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--duYkCLyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://th.bing.com/th/id/R.e5ec90a049ac4d89cfe6f473f5e90a62%3Frik%3D2vAe4wP0zSwDrw%26riu%3Dhttp%253a%252f%252fwww.tutorialspoint.com%252fimages%252fhtml-dom.jpg%26ehk%3Dro8ZmiKVyvunucBegQ%252fCWt%252bbTEBzRMdYdCz28fipr5s%253d%26risl%3D%26pid%3DImgRaw%26r%3D0" alt="DOM structure"&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#html-dom"&gt;
  &lt;/a&gt;
  HTML DOM
&lt;/h3&gt;

&lt;p&gt;Whenever a web document is loaded, the browser creates &lt;strong&gt;D&lt;/strong&gt;ocument &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;M&lt;/strong&gt;odel of the page. It can be modified with a scripting language such as javascript.&lt;br&gt;
HTML DOM is standard object model and programming interface for HTML. It helps to define:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML elements as &lt;strong&gt;objects&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Properties&lt;/strong&gt; of those elements &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Methods&lt;/strong&gt; to access html elements &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Events&lt;/strong&gt; for those elements&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#how-html-dom-is-constructed"&gt;
  &lt;/a&gt;
  How HTML DOM is constructed?
&lt;/h4&gt;

&lt;p&gt;It is characterized as a hierarchical tree, where each element in the document tree is called Node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J4tyVQ2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://visionofgeek.com/wp-content/uploads/HTML-DOMDocument-Object-Model-1080x805.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J4tyVQ2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://visionofgeek.com/wp-content/uploads/HTML-DOMDocument-Object-Model-1080x805.png" alt="HTML DOM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DOM nodes represents all the elements of the document. The document node is called the root node and it contains other nodes. The head and body elements are called parent nodes. The parent nodes also contain other elements inside them , which are considered child nodes.&lt;br&gt;
The elements having same hierarchical level are considered to be sibling nodes, here the head and body can be said to be sibling nodes.&lt;br&gt;
Some nodes are self closing like img tag. These are called void nodes and they cannot be a parent node.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#dom-methods"&gt;
  &lt;/a&gt;
  DOM Methods
&lt;/h4&gt;

&lt;p&gt;The document object represents our web page and to access any element of our HTML page, we need to access the document object.&lt;br&gt;
DOM Methods are used to access and manipulate HTML elements.&lt;/p&gt;

&lt;p&gt;Few of them are :&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#finding-html-elements"&gt;
  &lt;/a&gt;
  Finding HTML Elements
&lt;/h5&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;METHOD&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;document.getElementById(id)&lt;/td&gt;
&lt;td&gt;Find elements by id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;document.getElementByTagName(name)&lt;/td&gt;
&lt;td&gt;Find elements by tag name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;document.getElementByClassName(name)&lt;/td&gt;
&lt;td&gt;Find elements by class name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;document.querySelector()&lt;/td&gt;
&lt;td&gt;Find elements by css selector and returns first element that matches the selector&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;document.querySelectorAll()&lt;/td&gt;
&lt;td&gt;Find elements by css selector and returns a node list collection of all matching elements.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YJVHRI3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/VvYp5XsB/image5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YJVHRI3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/VvYp5XsB/image5.png" alt="method example"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#dom-properties"&gt;
  &lt;/a&gt;
  DOM Properties
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#changing-html-elements"&gt;
  &lt;/a&gt;
  Changing HTML Elements
&lt;/h5&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;PROPERTY&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;element.innerText = new text&lt;/td&gt;
&lt;td&gt;Change inner text of an HTML element&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element.innerHTML = new HTML content&lt;/td&gt;
&lt;td&gt;Change inner HTML of an element&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element.style.property = new style&lt;/td&gt;
&lt;td&gt;Change style of an HTML element&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qOJ174p1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/sXYqYnbF/image6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qOJ174p1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/sXYqYnbF/image6.png" alt="property example"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 27 Aug 2021 17:41:08 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-5g7c</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-5g7c</guid>
      <description>&lt;p&gt;Hi everyone! &lt;/p&gt;

&lt;p&gt;Looking back on this past week, what was something you were proud of accomplishing?&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Staying hydrated... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Happy Friday! Take a victory lap — you deserve it! 🏃‍♀️ &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFnZWgzQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/QMozgDyV3CutNj2cVs/giphy.gif%3Fcid%3Decf05e47qtcrrh35204aut154y2ju478zogg8ziovpfer81a%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFnZWgzQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/QMozgDyV3CutNj2cVs/giphy.gif%3Fcid%3Decf05e47qtcrrh35204aut154y2ju478zogg8ziovpfer81a%26rid%3Dgiphy.gif%26ct%3Dg" alt="Cool GIF"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Do you know these Software concepts? </title>
      <author>femolacaster</author>
      <pubDate>Fri, 27 Aug 2021 17:28:18 +0000</pubDate>
      <link>https://dev.to/femolacaster/do-you-know-these-software-concepts-ppl</link>
      <guid>https://dev.to/femolacaster/do-you-know-these-software-concepts-ppl</guid>
      <description>&lt;p&gt;We would be taking a look at some software concepts in this series. Some in the field of software design, network automation, database design, and engineering, and IT philosophy. &lt;/p&gt;

&lt;p&gt;The focus would be more on concepts that have evolved, unconventional concepts, and unpopular concepts maybe due to new trends and you may never have to know or worry about them any longer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A. Schrodinger's Tables&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eB_L3kRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53uw5bfbtvz5z4x6yy7r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eB_L3kRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53uw5bfbtvz5z4x6yy7r.jpg" alt="Schrodinger MySQL Cat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Schrodinger’s experiment brought about a spark in quantum physics. Just like me, I guess Schrodinger was a helpless cat lover. The experiment involved a cat, flask of poison, and radioactive source placed in a box. If radioactivity is detected by an internal monitor, the flask is shattered which releases a poison that kills the cat. But after some time, when the box is looked at, the cat appears either alive or dead when in fact it is alive and dead simultaneously. Magical and supernatural I must say. But the Schrodinger’s rule not only occurs in cats but also in databases and database tables. There is a possibility where the database can both be alive and dead at the same time. So next time your database goes missing and presents at the same time, then it could be Shrondiger and his cats. The fix is to replace the ibdata1 and ib type files for MySQL but you can read more on the probable causes and fixes &lt;a href="http://www.conroyp.com/2014/02/23/schrodingers-mysql-table-does-it-exist/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;B. The Promiscuous CPU&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nd409nfP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a20ojkxzqfsly4w2vlu9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nd409nfP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a20ojkxzqfsly4w2vlu9.jpg" alt="The promiscuous CPU"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is in the field of network automation that asynchronicity matters most. Network devices need to get multiple packets at the same time. But sometimes, the CPU can get promiscuous requests which are the requests it doesn’t need.  Right when the CPU enters this stage, it enters the promiscuous mode. So before you start the casting of aspersion on the CPU, be aware that these promiscuous requests are involuntary. And the CPU didn’t mean to cheat.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C. Unix theory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xk29qDM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/js77edrtaq1waem78cez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xk29qDM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/js77edrtaq1waem78cez.png" alt="Unix theory"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We may have heard of the service-oriented architecture, DRY, and other theories that focus on reusability. The Unix theory is one of the philosophies that gave rise to such philosophical evolution. &lt;/p&gt;

&lt;p&gt;In summary, it says:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write programs that do one thing and do it well.&lt;/li&gt;
&lt;li&gt;Write programs to work together.&lt;/li&gt;
&lt;li&gt;Write programs to handle text streams, because that is a universal interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The UNIX theory has been a helping theory for the growth of the open-source community because not only were programs built to work together, but even people now worked better together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;D. Principle of least astonishment:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XrFs4vFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dpp5n5uwhr6t3gezw2u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XrFs4vFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dpp5n5uwhr6t3gezw2u.jpg" alt="Principle of least astonishment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It proposes that a component of a system should behave in a way that most users will expect it to behave i.e. "if a necessary feature has a high astonishment factor, it may be necessary to redesign the feature." The rule tries to improve the learnability and memorability experience of users by proposing that all extensions and enhancement should be of a gradual learning curve than a steep and 🏃‍♂️ learning curve. So, if you want your users to stay even during disruption, keep this rule at the back of your mind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;E. Principle of least privilege:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hTzDeEKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guo5itv2j91gdb6wt520.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hTzDeEKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guo5itv2j91gdb6wt520.jpg" alt="principle of least privilege"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Better if the least access control is given than extra unnecessary access. This security rule is to achieve confidentiality, integrity, and availability. The least privilege rule addresses the second A(&lt;strong&gt;authorization&lt;/strong&gt;) in the triple-A(&lt;strong&gt;AAA&lt;/strong&gt;) information security rule.  So, besides verifying the identity of the user(&lt;strong&gt;authentication&lt;/strong&gt;), it is important to know what the user can do(&lt;strong&gt;authorization&lt;/strong&gt;), as well as knowing what individual actions the user has taken(&lt;strong&gt;accounting&lt;/strong&gt;). So next time you want to connect an application with root access, think of less-privileged.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
      <category>database</category>
    </item>
    <item>
      <title>#100daysofcode [Day-14]
</title>
      <author>Al Siam</author>
      <pubDate>Fri, 27 Aug 2021 17:18:56 +0000</pubDate>
      <link>https://dev.to/alsiamworld/100daysofcode-day-14-48a9</link>
      <guid>https://dev.to/alsiamworld/100daysofcode-day-14-48a9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day14"&gt;
  &lt;/a&gt;
  100daysofcode [Day-14]
&lt;/h1&gt;

&lt;p&gt;I'm trying to gain more knowledge about ES6 and today I've learnt es6 filter, destructuring, map, forEach and something more. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YNGqnWe_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axhgij23gt4hg0lgiu95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YNGqnWe_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axhgij23gt4hg0lgiu95.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to use APIs with React Functional Components</title>
      <author>Rahul Banerjee</author>
      <pubDate>Fri, 27 Aug 2021 17:14:02 +0000</pubDate>
      <link>https://dev.to/rahulbanerjee99/how-to-use-apis-with-react-functional-components-ne8</link>
      <guid>https://dev.to/rahulbanerjee99/how-to-use-apis-with-react-functional-components-ne8</guid>
      <description>&lt;p&gt;Using APIs in your react project is a common use case. In this tutorial, we will be looking at two use cases&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loading API Data in the Background&lt;/li&gt;
&lt;li&gt;Loading API Data on button click&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will be using functional components and the useEffect hook. Some familiarity is expected.&lt;/p&gt;

&lt;h2&gt;Loading API Data in the background&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N4y0BvQ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcxag8j48b7u3r998bvv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N4y0BvQ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcxag8j48b7u3r998bvv.gif" alt="React APP with API Data being loaded"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this use case, the data is only loaded once - whenever the user views the app or refreshes the page. Initially, a 'Loading…' text is shown. This text is later updated with the actual API data. Below is the code snippet of the component which causes the above behavior&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let's discuss the code in 3 parts, the states, the useEffect hooks, and the rendering logic&lt;/p&gt;

&lt;h3&gt;The states&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;const [isLoading, setIsLoading] = 
React.useState(true);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have two states. The &lt;strong&gt;isLoading&lt;/strong&gt; state is a boolean variable initialized to True. This state is used to keep a track of whether the data is still loading or it has already been loaded. The &lt;strong&gt;setIsLoading&lt;/strong&gt; function is used to toggle this state variable. After the API returns the data, we will use this function to toggle the value for &lt;strong&gt;isLoading&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const [data, setData] = React.useState([]);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we have the &lt;strong&gt;data&lt;/strong&gt; state. This state is initialized to an empty array. It will be used to store the data returned by the API. You can initialize the state to an empty object as well. However, the API I am using in the example returns a list and therefore an empty list seems like the right choice. The &lt;strong&gt;setData&lt;/strong&gt; function is used to update the state variable &lt;strong&gt;data&lt;/strong&gt; after the API returns the data.&lt;/p&gt;

&lt;h3&gt;The useEffect Hooks&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;  React.useEffect(() =&amp;gt; {
    const url = "https://randomuser.me/api/?results=15";
    fetch(url)
      .then((response) =&amp;gt; response.json())
      .then((json) =&amp;gt; setData(json['results']))
      .catch((error) =&amp;gt; console.log(error));
  }, []);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above useEffect Hook is used to make the request to the API. The '[]' parameter tells React to run this hook only once. The hook runs after the page has loaded. A simple fetch request is made and after the promise(s) are resolved, we use the &lt;strong&gt;setData&lt;/strong&gt; function to update the state variable &lt;strong&gt;data&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  React.useEffect(() =&amp;gt; {
    if (data.length !== 0) {
      setIsLoading(false);
    }
    console.log(data);
  }, [data]);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next useEffect hook runs whenever the state variable &lt;strong&gt;data&lt;/strong&gt; is updated. It does a simple check, if the state variable &lt;strong&gt;data&lt;/strong&gt; is not empty, i.e the API has returned the data, it sets the state variable &lt;strong&gt;isLoading&lt;/strong&gt; to False.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Note: The above case assumes a happy case, i.e the API will always return the data. However, this is not true. Therefore error handling should also be added.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;The rendering logic&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;  return (
    &amp;lt;div&amp;gt;
      {isLoading ? (
        &amp;lt;h1&amp;gt;Loading...&amp;lt;/h1&amp;gt;
      ) : (
        data.map((user) =&amp;gt; (
          &amp;lt;h1&amp;gt;
            {user.name.first} {user.name.last}
          &amp;lt;/h1&amp;gt;
        ))
      )}
    &amp;lt;/div&amp;gt;
  );
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rendering logic is pretty straightforward, if the state variable 'isLoading' is True, we will display the 'Loading…' indication. If it is false, we simply map over the state variable 'data' and display all the items in the array.&lt;/p&gt;

&lt;h2&gt;Loading API data on button click&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4LHMfbPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wv20yfq1361fyw7b2h5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4LHMfbPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wv20yfq1361fyw7b2h5.gif" alt="React load API on button Click"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below is the entire code snippet&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We will discuss the code in 3 parts.&lt;/p&gt;

&lt;h3&gt;States&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt; const [showData, setShowData] = 
React.useState(false);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first two state variables are the same as the ones in the previous section. We will discuss the third state variable &lt;strong&gt;showData&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When the user views the page for the first time, we do not want them to see the API data or the 'Loading……' text. Therefore we add a simple check to see if the user has clicked the button. After the user clicks the button once, there are only two views&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The 'Loading…..' text&lt;/li&gt;
&lt;li&gt;The API Data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every time the user clicks the button again, we just toggle between the two views mentioned above.&lt;/p&gt;

&lt;h3&gt;Handle Click Function&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;  const handleClick = () =&amp;gt; {
    setisLoadingData(true);
    setShowData(true)
    const url = "https://randomuser.me/api/?results=15";
    fetch(url)
      .then((response) =&amp;gt; response.json())
      .then((json) =&amp;gt; {
        setisLoadingData(false);
        setData(json["results"])
        console.log(data);
      })
      .catch((error) =&amp;gt; console.log(error));
  };&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is similar to the first useEffect Hook in the first use case. The only difference is that we set our state variable &lt;strong&gt;showData&lt;/strong&gt; to True.&lt;/p&gt;

&lt;h3&gt;Rendering logic&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;return (
    &amp;lt;div&amp;gt;
      &amp;lt;button onClick={handleClick}&amp;gt; Load Data &amp;lt;/button&amp;gt;
      {showData ? (
        isLoadingData ? (
          &amp;lt;h1&amp;gt;LOADING DATA........&amp;lt;/h1&amp;gt;
        ) : (
          data.map((user) =&amp;gt; (
            &amp;lt;h1&amp;gt;
              {user.name.first} {user.name.last}
            &amp;lt;/h1&amp;gt;
          ))
        )
      ) : (
        &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
      )}
    &amp;lt;/div&amp;gt;
  );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, we have a check for showData, this is to ensure that initially, the user doesn't see the 'Loading….' text nor the API data. After the user clicks the button, showData is set to True. After this, the rendering logic is similar to the first use case.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope you found this article helpful. Add me on &lt;a href="https://www.linkedin.com/in/rahulbanerjee2699/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/rahulbanerjee99"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Reasons To Use Recursion and How It Works</title>
      <author>Manar Abdelkarim</author>
      <pubDate>Fri, 27 Aug 2021 17:04:19 +0000</pubDate>
      <link>https://dev.to/manarabdelkarim/why-and-how-to-solve-iterative-problems-recursively-the-smart-coding-4nj2</link>
      <guid>https://dev.to/manarabdelkarim/why-and-how-to-solve-iterative-problems-recursively-the-smart-coding-4nj2</guid>
      <description>&lt;h4&gt;
  &lt;a href="#hello-engineers"&gt;
  &lt;/a&gt;
  Hello Engineers
&lt;/h4&gt;

&lt;p&gt;Today, I will to about recursion in what, why, and how.&lt;br&gt;
What is recursion , why to use it, and how to solve problems with it.&lt;br&gt;
The examples will be in Python since Python is easy to understand and close to the algorithms ..&lt;/p&gt;

&lt;p&gt;Shall we start ? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft0yabiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/H4DjXQXamtTiIuCcRU/200.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft0yabiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/H4DjXQXamtTiIuCcRU/200.gif" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-recursion"&gt;
  &lt;/a&gt;
  What is recursion?
&lt;/h3&gt;

&lt;p&gt;A more complex definition of recursion is: a technique that solve a problem by solving a smaller problems of the same type . We can simplify the definition by saying that recursion is a function that call it self directly or indirectly .. don't worry for now, it will be much clearer when we start writing our examples.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-to-use-recursion"&gt;
  &lt;/a&gt;
  Why to use recursion?
&lt;/h3&gt;

&lt;p&gt;I choose this question over "when to use recursion" because many programming learners who learnt recursion wanted to know why to use it since that all the problems we can solve it in recursion , we can also solve it in normal iterative loops .. so here is my answer:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1- Learning recursion makes you a better programmer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learning and practicing recursion help you improve your problem solving skills because you will learn how to break down bit problems into smaller ones. Also, you will learn the principle of stack in data structure (A stack is an abstract data type that holds an ordered, linear sequence of items), the principle of LIFO (Last In Last Out) and how to make use of the call stack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2- Using recursion makes the code clearer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recursion code is simpler and shorter than an iterative code. The recursion function will be written in less lines of code and will be easier for debugging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3- Recursion is data structure's best friend:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I mentioned above, recursive functions use the call stack of the interpreter. So, we can make use of the existing of call stack instead of writing code and creating a stack or use any external  libraries. which means we can use recursion whenever we want to use stack. two good implementation examples for using recursion in data structures are trees and graphs in-depth traversal.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-write-recursive-functions"&gt;
  &lt;/a&gt;
  How to write recursive functions?
&lt;/h3&gt;

&lt;p&gt;Before writing a recursive function ,let's talk about few factors to determine :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1- Determine the size factor:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The size factor means that your problem should not exceed your static value or your memory allocation for that particular program. In simple language your program should not have large numbers and not too many iterations. Because again, recursion functions use call stack and the call stack has a limit. When the stack becomes full the program will crash and you will have an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--la5xXZ9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nabxiju4v37hs5pnbq81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--la5xXZ9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nabxiju4v37hs5pnbq81.png" alt="recursionerror"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2- Determine the base case/s:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The base cause could be a single or multiple values depending on your program. I will use a while loop here to explain the base case .. if we want to write a program that print "hello world" 5 times using while, we will write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def display_hello(i):
    while(i &amp;gt; 0):
        print("hello world")
        i -=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The base cause determines when the loop will stop .. in our example the base cause is i=0 because when the value of i becomes zero the looping will break and stop  &lt;/p&gt;

&lt;p&gt;Base case in recursion is that particular value that if we reach we want to stop recalling of the function and start removing and executing every function in the call stack.   &lt;/p&gt;

&lt;p&gt;Not having a base cause will make the function call itself until the call stack becomes full and the program crashes, and having a wrong base cause will result to a wrong output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hDY5tZ1f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8zs2lqtl47178g04q46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hDY5tZ1f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8zs2lqtl47178g04q46.png" alt="base cause"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3- Determine the general case/s:&lt;/strong&gt;&lt;br&gt;
General cause is the one where the problem expressed as a small version of itself.  Which means, the program will continue iterate the general causes until it reaches the base cause &lt;/p&gt;

&lt;p&gt;In our example above, when considered i=0 as the base cause and we send 5 as a parameter , then we can think of:&lt;br&gt;
i=1, i=2, i=3, i=4, and i=5 as the general causes.&lt;/p&gt;

&lt;p&gt;Now, let's Write a recursive function and trace it using the previous problem:&lt;/p&gt;

&lt;p&gt;We want to write a function that write "hello world" 5 times:&lt;/p&gt;

&lt;p&gt;Let's analyze the problem:&lt;/p&gt;

&lt;p&gt;The function will check the base cause, if the current case doesn't match the base cause then the function will call itself one time  .. So the increasing is a liner (it could be O(n)) (it will be propaply safe for the call stack size)&lt;br&gt;
let's try writing our function now by using our while loop example&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1- The base cause -&amp;gt; i =0&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def display_hello(i):
   if i&amp;gt;0:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2- The print command -&amp;gt; print("hello world")&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def display_hello(i):
   if i&amp;gt;0:
       print("hello world")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3- The changes in every iteration -&amp;gt; i-=1&lt;/strong&gt;&lt;br&gt;
to send the new value of the variable to the next function call we have to write it as a parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def display_hello(i):
   if i&amp;gt;0:
       print("hello world")
       display_hello(i-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1ud1XOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwk5w9akkavmuzy0f5j2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1ud1XOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwk5w9akkavmuzy0f5j2.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it for this small problem .. Before tracing it let's add one print command after the function call and show the result at the end to make the tracing more interesting&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assuming that the first invocation was :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;display_hello(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;And our function is :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def display_hello(i):
    if i &amp;gt; 0:
        print("hello world!")
        display_hello(i-1)
        print(f'The i value is {i}')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Now we will trace it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the first call the function will enter the call stack &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gG899TIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj8mo5zuuekz4ayia490.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gG899TIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj8mo5zuuekz4ayia490.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then the program will execute the commands :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vmMc4GW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8dhpz3jf0qgvl9v2gre.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vmMc4GW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8dhpz3jf0qgvl9v2gre.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the execution reaches line 4 (the function recall) it will stop there (it will pause the execution of the rest commands) and add another function to the stack :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xfxh5V4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1m5v7och63bnjfzpz57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xfxh5V4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1m5v7och63bnjfzpz57.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then the program will execute the commands in the second recalled function :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zocdb0xH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93hjilm0ibrga4z42jpq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zocdb0xH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93hjilm0ibrga4z42jpq.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again , when the execution reaches line 4 (the function recall) it will stop there (it will pause the execution of the rest commands) and add another function to the stack :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D1k3Nayg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kg7tpzmyzh69a3liujba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D1k3Nayg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kg7tpzmyzh69a3liujba.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this time too , our base cause didn't satisfied yet because i is still bigger than zero, so the execution will continue until the function recall and then adds another function to the stack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5wnj15M7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0yt5qcq5omqrlzlnvob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5wnj15M7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0yt5qcq5omqrlzlnvob.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now finally the parameter is 0 which is the value of i&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AjbqgaQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uhuk6ibng237irnxeie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AjbqgaQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uhuk6ibng237irnxeie.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The execution will start until line 2 because the condition says that i should be bigger than zero, but i is equal to zero .. So we reached the base cause and we will not reach the recall "invocation" and the prints&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m9q7Ycpt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5q8yflb26t7hp8jam6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9q7Ycpt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5q8yflb26t7hp8jam6w.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because this function finished all the commands that should be executed, it's the time to pop the function out of the stack :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Py-Nalbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60xym2sjxt6lucmn060w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Py-Nalbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60xym2sjxt6lucmn060w.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we returned to the previous function when the parameter was 1&lt;br&gt;
so now the program will execute the rest command/s:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OCUXIeOZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jiwaywbpajqg722pzr7r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OCUXIeOZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jiwaywbpajqg722pzr7r.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The function now is completed all the commands that should be executed, it's the time to pop the function out of the stack :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xfxh5V4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1m5v7och63bnjfzpz57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xfxh5V4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1m5v7och63bnjfzpz57.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we returned to the function that its parameter is two and we will execute the rest of the commands :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---beO9PC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x58hd9upkojv3jz2wdqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---beO9PC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x58hd9upkojv3jz2wdqk.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, after we done the execution we will remove the function from the stack:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gG899TIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj8mo5zuuekz4ayia490.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gG899TIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj8mo5zuuekz4ayia490.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have the first call which 3 was its parameter, and we will execute the rest commands:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OnGnxayC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg29vx3sqw27rno8od1q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OnGnxayC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg29vx3sqw27rno8od1q.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here the last function will pop out from the stack and the stack will become empty and here is the end of our program&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wBlx0_oW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sajlfw27cr15rk1p2r9d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wBlx0_oW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sajlfw27cr15rk1p2r9d.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checking if our tracing was right by execute the code :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R4E1Nr6s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lrfucdwiwjwclpofp57t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R4E1Nr6s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lrfucdwiwjwclpofp57t.png" alt="recursion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So here we reach the end of today's article &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#happy-recursion"&gt;
  &lt;/a&gt;
  Happy recursion 😁
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#happy-recursion"&gt;
  &lt;/a&gt;
  Happy recursion 😁
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#happy-recursion"&gt;
  &lt;/a&gt;
  Happy recursion 😁
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#happy-recursion"&gt;
  &lt;/a&gt;
  Happy recursion 😁
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#happy-recursion"&gt;
  &lt;/a&gt;
  Happy recursion 😁
&lt;/h6&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/recursion/"&gt;Recursion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@williambdale/recursion-the-pros-and-cons-76d32d75973a"&gt;Recursion: The Pros and Cons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/recursion-in-python-and-c/"&gt;Learn All About Recursion in Python and C++ - Udemy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>algorithms</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Practical guide to parsing your Date and Time in Go</title>
      <author>Rajkumar</author>
      <pubDate>Fri, 27 Aug 2021 17:00:08 +0000</pubDate>
      <link>https://dev.to/rajkumargosavi/practical-guide-to-parsing-your-date-and-time-in-go-5blb</link>
      <guid>https://dev.to/rajkumargosavi/practical-guide-to-parsing-your-date-and-time-in-go-5blb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Cjl1sP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gasknkntr6pkmrn656z5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Cjl1sP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gasknkntr6pkmrn656z5.png" alt="Gopher with a watch"&gt;&lt;/a&gt;&lt;br&gt;
Often we find ourselves with a Date Time that is not in some standard format. This is where we identify the pattern of the date time and then try to write a custom layout.&lt;/p&gt;

&lt;p&gt;Let us see how we can achieve this in go using the standard &lt;strong&gt;time&lt;/strong&gt; package. The &lt;strong&gt;time&lt;/strong&gt; package provides us with several functionalities which includes functions like &lt;strong&gt;Parse&lt;/strong&gt; and &lt;strong&gt;Format&lt;/strong&gt; that serves our purpose.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parse&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Parse parses a formatted string and returns the time value it represents.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;longForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Jan 2, 2006 at 3:04pm (MST)"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Feb 3, 2013 at 7:54pm (PST)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;shortForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"2006-Jan-02"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shortForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"2013-Feb-03"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
2013-02-03 19:54:00 +0000 PST
2013-02-03 00:00:00 +0000 UTC
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go Playground Link: &lt;a href="https://play.golang.org/p/jYyQtEPTW--"&gt;Parse Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Format&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Format returns a textual representation of the time value formatted according to the layout defined by the argument.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnixDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Wed Feb 25 11:06:39 PST 2015"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;// Always check errors even if they should not happen.&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"default format:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unix format:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnixDate&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
default format: 2015-02-25 11:06:39 +0000 PST
Unix format: Wed Feb 25 11:06:39 PST 2015
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go Playground Link: &lt;a href="https://play.golang.org/p/QnOrTVGpGLI"&gt;Format Example&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#predefined-layouts-available-in-time-package"&gt;
  &lt;/a&gt;
  &lt;a href="https://pkg.go.dev/time#pkg-constants"&gt;Predefined Layouts&lt;/a&gt; available in &lt;strong&gt;time&lt;/strong&gt; package
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Label&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Layout&lt;/td&gt;
&lt;td&gt;01/02 03:04:05PM '06 -0700&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ANSIC&lt;/td&gt;
&lt;td&gt;Mon Jan _2 15:04:05 2006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UnixDate&lt;/td&gt;
&lt;td&gt;Mon Jan _2 15:04:05 MST 2006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RubyDate&lt;/td&gt;
&lt;td&gt;Mon Jan 02 15:04:05 -0700 2006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC822&lt;/td&gt;
&lt;td&gt;02 Jan 06 15:04 MST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC822Z&lt;/td&gt;
&lt;td&gt;02 Jan 06 15:04 -0700&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC850&lt;/td&gt;
&lt;td&gt;Monday, 02-Jan-06 15:04:05 MST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC1123&lt;/td&gt;
&lt;td&gt;Mon, 02 Jan 2006 15:04:05 MST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC1123Z&lt;/td&gt;
&lt;td&gt;Mon, 02 Jan 2006 15:04:05 -0700&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC3339&lt;/td&gt;
&lt;td&gt;2006-01-02T15:04:05Z07:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC3339Nano&lt;/td&gt;
&lt;td&gt;2006-01-02T15:04:05.999999999Z07:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kitchen&lt;/td&gt;
&lt;td&gt;3:04PM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stamp&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StampMilli&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StampMicro&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05.000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StampNano&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05.000000000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#building-blocks-for-creating-your-own-layout"&gt;
  &lt;/a&gt;
  Building Blocks for creating your own layout
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Options&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Year&lt;/td&gt;
&lt;td&gt;"2006", "06"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Month&lt;/td&gt;
&lt;td&gt;"Jan", "January", "1", "01"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Textual day of the week&lt;/td&gt;
&lt;td&gt;"Mon", "Monday"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Numeric day of the month&lt;/td&gt;
&lt;td&gt;"2", "_2", "02"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Numeric day of the year&lt;/td&gt;
&lt;td&gt;"__2", "002"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hour&lt;/td&gt;
&lt;td&gt;"15", "3", "03" (PM or AM)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Minute&lt;/td&gt;
&lt;td&gt;"4", "04"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Second&lt;/td&gt;
&lt;td&gt;"5", "05"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AM/PM mark&lt;/td&gt;
&lt;td&gt;"PM"&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;For layouts specifying the two-digit year 06, a value NN &amp;gt;= 69 will be treated as 19NN and a value NN &amp;lt; 69 will be treated as 20NN.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#numeric-time-zone-offsets-format-as-follows"&gt;
  &lt;/a&gt;
  Numeric time zone offsets format as follows:
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;"-0700"&lt;/td&gt;
&lt;td&gt;±hhmm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"-07:00"&lt;/td&gt;
&lt;td&gt;±hh:mm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"-07"&lt;/td&gt;
&lt;td&gt;±hh&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Replacing the sign in the format with a Z triggers the ISO 8601 behavior of printing Z instead of an offset for the UTC zone. Thus:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;"Z0700"&lt;/td&gt;
&lt;td&gt;Z or ±hhmm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"Z07:00"&lt;/td&gt;
&lt;td&gt;Z or ±hh:mm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"Z07"&lt;/td&gt;
&lt;td&gt;Z or ±hh&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#final-example"&gt;
  &lt;/a&gt;
  Final Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ipTimes&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"24 Aug 2021 7:20:50 PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Aug 24 2021 07:20:50PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"24-08-2021 17:20:50"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"08-24-2021 13:12:32"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"24/8/21 9:00:12"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"8/24/2021 10:10:10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"1993-11-23 7**12**44PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"24 October 97 7:12:45PM+05:30"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// 24 th January 1997&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;layouts&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"2 Jan 2006 3:04:05 PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Jan 2 2006 03:04:05PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"2-01-2006 15:04:05"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"01-02-2006 15:4:5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"2/1/06 3:4:5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"1/2/2006 3:4:5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"2006-01-02 3**4**5PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"2 January 06 3:4:5PMZ07:00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipTimes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layouts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ipTimes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c"&gt;// parsing to get time value&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                              &lt;span class="c"&gt;// check for errors&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"    Input DateTime String: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ipTimes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"                   Layout: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layouts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Time value Default Format: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"   Time in RFC3339 Format: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RFC3339&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us take one such example to iterate through it&lt;/p&gt;

&lt;p&gt;Input:  "24 October 97 7:12:45PM+05:30"&lt;br&gt;
Layout: "2 January 06 3:4:5PMZ07:00"&lt;/p&gt;

&lt;p&gt;From the building blocks listed above we can map things &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Layout Key&lt;/th&gt;
&lt;th&gt;Actual Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;Numeric day of the month&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;January&lt;/td&gt;
&lt;td&gt;October&lt;/td&gt;
&lt;td&gt;month&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;06&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;Year (1997)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Hour&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;Minute&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;Second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Z07:00&lt;/td&gt;
&lt;td&gt;+05:30&lt;/td&gt;
&lt;td&gt;Offset&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Since PM is specified 7:12:45 is in 12 hour format.&lt;/p&gt;

&lt;p&gt;Using the Layout blocks specified we can easily see the pattern and can create our own layout.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fun-tip"&gt;
  &lt;/a&gt;
  Fun Tip
&lt;/h4&gt;

&lt;p&gt;Ever wondered why &lt;code&gt;time.Now()&lt;/code&gt; on &lt;a href="https://play.golang.org/"&gt;golang playground&lt;/a&gt; prints the same time (2009-11-10 23:00:00 +0000 UTC m=+0.000000001) ?&lt;/p&gt;

&lt;p&gt;Drum roll!!!!!!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;It is the time and date of Go Lang's birthday.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hope you learnt something new or had your concepts revised.&lt;/p&gt;

&lt;p&gt;Let me know if I missed something.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://play.golang.org/p/_D90gfCLnDS"&gt;Complete Working Date Time Example&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://pkg.go.dev/time@go1.17#Time.Format"&gt;Time Format&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pkg.go.dev/time@go1.17#Parse"&gt;Time Parse&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pkg.go.dev/time@go1.17#pkg-constants"&gt;Constants&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
    </item>
    <item>
      <title>Meet PreviewDevice 0.7.0</title>
      <author>Anton Paliakou</author>
      <pubDate>Fri, 27 Aug 2021 16:56:35 +0000</pubDate>
      <link>https://dev.to/toni777772/meet-previewdevice-0-7-0-1dpg</link>
      <guid>https://dev.to/toni777772/meet-previewdevice-0-7-0-1dpg</guid>
      <description>&lt;p&gt;&lt;strong&gt;PreviewDevice&lt;/strong&gt; - a library with elegant syntax for preview device in SwiftUI.&lt;/p&gt;

&lt;p&gt;The first question that comes to mind is,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-do-i-need-to-use-the-thirdparty-library-for-swiftui-preview-"&gt;
  &lt;/a&gt;
  Why do I need to use the third-party library for SwiftUI preview ?
&lt;/h3&gt;

&lt;p&gt;For answer this question will compare Apple API for preview with PreviewDevice library. Let's look at real cases on projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case"&gt;
  &lt;/a&gt;
  Case:
&lt;/h3&gt;

&lt;p&gt;Preview on device. Let's say you want to see a preview in the iPhone SE 2 Generation (4.7 inch screen size) with preview device name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple way&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone SE (2nd generation)"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone SE (2nd generation)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PreviewDevice lib&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphoneSE_2Gen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is easy make mistake in iphone device name when use standard Apple way. Also you need to know and keep in your brain the correct iPhone name. PreviewDevice library provides a type-safe way for preview devices. The library has &lt;code&gt;Device&lt;/code&gt; enum with all devices types: all iphones, all ipads, all apple watches, ipod, mac.&lt;/p&gt;

&lt;p&gt;Result: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1XF6weEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdxobakjgnu0bqv437fj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1XF6weEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdxobakjgnu0bqv437fj.png" alt="Result"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#case"&gt;
  &lt;/a&gt;
  Case:
&lt;/h3&gt;

&lt;p&gt;Make preview on some devices. As example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iPhone 8&lt;/li&gt;
&lt;li&gt;iPhone 8 Plus&lt;/li&gt;
&lt;li&gt;iPhone12 Pro&lt;/li&gt;
&lt;li&gt;iPhone 12&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Apple way&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;Group&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 8 Plus"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 8 Plus"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12 Pro"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12 Pro"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PreviewDevice lib&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;devices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone8Plus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone12Pro&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone12&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The library awesome managed this case! Single line solution 💪&lt;/p&gt;

&lt;p&gt;Result:&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tkpOOqpS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ciz0rd74ur57c4u6u33m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tkpOOqpS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ciz0rd74ur57c4u6u33m.png" alt="Result2"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#case"&gt;
  &lt;/a&gt;
  Case:
&lt;/h3&gt;

&lt;p&gt;Make preview on the device for light and night mode. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple way&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;Group&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;preferredColorScheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;preferredColorScheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PreviewDevice lib&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;colorSchemes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Single line solution from the library 💪 💪&lt;/p&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xCiOQEpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix0z0fobp0mlroebza8j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCiOQEpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix0z0fobp0mlroebza8j.png" alt="Result3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case"&gt;
  &lt;/a&gt;
  Case:
&lt;/h3&gt;

&lt;p&gt;Make preview on the device with different interface orientations (portrait, landscape left, landscape right). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple way&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;@available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iOS&lt;/span&gt; &lt;span class="mf"&gt;15.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;Group&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portrait&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;landscapeLeft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;landscapeRight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PreviewDevice lib&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;@available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iOS&lt;/span&gt; &lt;span class="mf"&gt;15.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;orientations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;landscapeLeft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;landscapeRight&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tpf0cXOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8688y8hn0v2gppioqlr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tpf0cXOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8688y8hn0v2gppioqlr.png" alt="Result4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One line code 💪 💪 💪&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation-library"&gt;
  &lt;/a&gt;
  Installation library
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Requearements&lt;/em&gt; &lt;em&gt;Xcode13&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#cocoapods"&gt;
  &lt;/a&gt;
  &lt;a href="https://guides.cocoapods.org/using/using-cocoapods.html"&gt;CocoaPods&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Specify next line in Podfile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;pod&lt;/span&gt; &lt;span class="no"&gt;PreviewDevice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#swift-package-manager"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/apple/swift-package-manager"&gt;Swift Package Manager&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Open Xcode, File -&amp;gt; Swift Packages -&amp;gt; Add Packages.. and paste library git url:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://github.com/Toni77777/PreviewDevice.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;PreviewDevice&lt;/strong&gt; is a type-safe syntax sugar for preview device on SwiftUI.&lt;/p&gt;

&lt;p&gt;Do you have a cool idea for a preview? Welcome to &lt;a href="https://github.com/Toni77777/PreviewDevice"&gt;contribute&lt;/a&gt;!&lt;br&gt;
Thanks for reading! See you soon. 👋&lt;/p&gt;

</description>
      <category>swift</category>
      <category>ios</category>
      <category>swiftui</category>
      <category>xcode</category>
    </item>
    <item>
      <title>love -von</title>
      <author>Antwan R. Wimberly-Jackson</author>
      <pubDate>Fri, 27 Aug 2021 16:56:16 +0000</pubDate>
      <link>https://dev.to/armw4/love-von-30k7</link>
      <guid>https://dev.to/armw4/love-von-30k7</guid>
      <description>&lt;p&gt;big-pussy-cat-low-mein-chow&lt;/p&gt;

&lt;p&gt;must go bye bye - aka Adios&lt;/p&gt;

&lt;p&gt;for my great grandfather Diego has a checkpoint around the bend on the rendezvous fretting Lindsey and zeh big unit and zeh african women are sooo genrerioussss I mean it's not like bald head is already going swaffor and Luka coach shaw Howard Adina is so son is Dwight Howard's nat naeeee&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>firebase</category>
      <category>bad</category>
      <category>bigdata</category>
    </item>
  </channel>
</rss>
