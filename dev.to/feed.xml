<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Master CSS Grid by Building 5 Layouts in 17 Minutes</title>
      <author>Thu Nghiem</author>
      <pubDate>Tue, 17 Nov 2020 21:37:05 +0000</pubDate>
      <link>https://dev.to/nghiemthu/master-css-grid-with-5-layouts-in-17-minutes-3phf</link>
      <guid>https://dev.to/nghiemthu/master-css-grid-with-5-layouts-in-17-minutes-3phf</guid>
      <description>&lt;p&gt;I have bad news and good news, the bad news is that CSS Grid is complicated and there are many things to learn. But the good news is we don't need to know everything.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will build 5 layouts (which are 5 tasks) with CSS Grid, and at the end of the tutorial, you will be ready to use CSS Grid in your next projects.&lt;/p&gt;

&lt;p&gt;If you want to code along, be sure to download the resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bit.ly/38TbZum"&gt;Tasks-Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bit.ly/38MyQYy"&gt;CSS-Grid-Starter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Full Tutorial:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CC2HkBZuReY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-spoiler-alert-" class="anchor"&gt;
  &lt;/a&gt;
  _________ 👾 SPOILER ALERT ________
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1-pancake-stack" class="anchor"&gt;
  &lt;/a&gt;
  1: Pancake Stack
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iTsPp67u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xciaiefay1v6in3hegmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTsPp67u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xciaiefay1v6in3hegmw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For task number one, we need to create a pancake stack layout. To have this, we can create 3 rows by using &lt;code&gt;grid-template-rows: auto 1fr auto&lt;/code&gt;. The second row with a value of 1fr will expand as much as it can, whereas the other two only have enough space wrapping its content.&lt;/p&gt;

&lt;p&gt;So to achieve the layout, all we have to do is to give the container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.task-1.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;and you can see this layout everywhere, for example, one of my tutorials a few weeks ago:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eOgof4tT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/srqeinbsoirmayvi2uvf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eOgof4tT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/srqeinbsoirmayvi2uvf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/d-qVF18Q7es"&gt;Youtube link&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-simple-12-columns-grid-layout" class="anchor"&gt;
  &lt;/a&gt;
  2: Simple 12 Columns Grid Layout
&lt;/h2&gt;

&lt;p&gt;12 Columns Grid has been forever, and with CSS Grid, it makes it, even more, easier to use. In this simple task we need to give the &lt;code&gt;item-1&lt;/code&gt; 4 columns and &lt;code&gt;items-2&lt;/code&gt; 6 columns.&lt;/p&gt;

&lt;p&gt;First, we need to create 12 columns, we can do that by &lt;code&gt;grid-template-columns: repeat(12, 1fr);&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.task-2.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;column-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Notice here, we are also having the 12px gap between every column, and similar to Flex, we also can use &lt;code&gt;align-items&lt;/code&gt; and &lt;code&gt;justify-content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next thing we need to do is to tell which column the items should take.&lt;/p&gt;

&lt;p&gt;For item 1, we want it to start from column 2 and end at number 6. So we have:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.task-2&lt;/span&gt; &lt;span class="nc"&gt;.item-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-column-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Notice that the item will not take column number 6, only 2, 3, 4, and 5.&lt;/p&gt;

&lt;p&gt;We can also have the same affect by writing:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.task-2&lt;/span&gt; &lt;span class="nc"&gt;.item-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-column-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.task-2&lt;/span&gt; &lt;span class="nc"&gt;.item-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;With the same logic, we will have for the item 2:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.task-2&lt;/span&gt; &lt;span class="nc"&gt;.item-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;12 columns layout are in everywhere, there is also one tutorial that I use this technique&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ItTOZkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bj6vyu3smpr4705k8ynq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ItTOZkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bj6vyu3smpr4705k8ynq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=XXDOUuzzUOY&amp;amp;t=16s&amp;amp;ab_channel=ThuNghiem"&gt;Youtube Link&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-responsive-layout-without-and-with-raw-gridtemplateareas-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  3:  Responsive Layout without and with &lt;code&gt;grid-template-areas&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qnOQn4p_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z65zhc0qjbotart85kny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qnOQn4p_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z65zhc0qjbotart85kny.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#31-using-12-columns-grid" class="anchor"&gt;
  &lt;/a&gt;
  3.1 Using 12 Columns Grid
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#mobile" class="anchor"&gt;
  &lt;/a&gt;
  Mobile
&lt;/h4&gt;

&lt;p&gt;This is straight-for-ward, we use what we learned from task number one, and make the main section expand. We also use give the grid a &lt;code&gt;gap: 24px&lt;/code&gt; as in desktop, there will be columns, not just rows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.task-3-1.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#tablet" class="anchor"&gt;
  &lt;/a&gt;
  Tablet
&lt;/h4&gt;

&lt;p&gt;On a tablet, which screen is wider than &lt;code&gt;720px&lt;/code&gt; we want to have 12 columns and 4 rows and the third row would expand as much as it can:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;720px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.task-3-1.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now that we have 12 columns, we need to tell how many columns should items take:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;720px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nc"&gt;.task-3-1&lt;/span&gt; &lt;span class="nc"&gt;.header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.task-3-1&lt;/span&gt; &lt;span class="nc"&gt;.navigation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.task-3-1&lt;/span&gt; &lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.task-3-1&lt;/span&gt; &lt;span class="nc"&gt;.sidebar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.task-3-1&lt;/span&gt; &lt;span class="nc"&gt;.ads&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.task-3-1&lt;/span&gt; &lt;span class="nc"&gt;.footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Notice here that we need to give &lt;code&gt;.task-3-1 .sidebar&lt;/code&gt;: &lt;code&gt;grid-row: 3;&lt;/code&gt; because sidebar is after the &lt;code&gt;main&lt;/code&gt; section in the DOM.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#desktop" class="anchor"&gt;
  &lt;/a&gt;
  Desktop
&lt;/h4&gt;

&lt;p&gt;I leave it for you or you can watch the video to find out.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#real-life-example" class="anchor"&gt;
  &lt;/a&gt;
  Real life example
&lt;/h4&gt;

&lt;p&gt;You can actually find a similar layout on dev.to homepage&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#31-using-raw-gridtemplateareas-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  3.1 Using &lt;code&gt;grid-template-areas&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;To use &lt;code&gt;grid-template-areas&lt;/code&gt;, we need to define the area of the item:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.task-3-2&lt;/span&gt; &lt;span class="nc"&gt;.header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.task-3-2&lt;/span&gt; &lt;span class="nc"&gt;.navigation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.task-3-2&lt;/span&gt; &lt;span class="nc"&gt;.ads&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ads&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.task-3-2&lt;/span&gt; &lt;span class="nc"&gt;.sidebar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sidebar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.task-3-2&lt;/span&gt; &lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.task-3-2&lt;/span&gt; &lt;span class="nc"&gt;.footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;After item areas are defined, all we have to do it to give the container the position by using &lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#mobile" class="anchor"&gt;
  &lt;/a&gt;
  Mobile
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.task-3-2.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="py"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s1"&gt;"header"&lt;/span&gt;
    &lt;span class="s1"&gt;"nav"&lt;/span&gt;
    &lt;span class="s1"&gt;"main"&lt;/span&gt;
    &lt;span class="s1"&gt;"sidebar"&lt;/span&gt;
    &lt;span class="s1"&gt;"ads"&lt;/span&gt;
    &lt;span class="s1"&gt;"footer"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#tablet" class="anchor"&gt;
  &lt;/a&gt;
  Tablet
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;720px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.task-3-2.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="s1"&gt;"header header header"&lt;/span&gt;
      &lt;span class="s1"&gt;"nav nav nav "&lt;/span&gt;
      &lt;span class="s1"&gt;"sidebar main main"&lt;/span&gt;
      &lt;span class="s1"&gt;"ads footer footer"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#desktop" class="anchor"&gt;
  &lt;/a&gt;
  Desktop
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1020px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.task-3-2.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="s1"&gt;"header header header header"&lt;/span&gt;
      &lt;span class="s1"&gt;"sidebar nav nav ads"&lt;/span&gt;
      &lt;span class="s1"&gt;"sidebar main main ads"&lt;/span&gt;
      &lt;span class="s1"&gt;"footer footer footer footer"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Both options have Pros and Cons, but choose the one that easier for you and makes sense in the scenario.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-responsive-layout-without-media-query" class="anchor"&gt;
  &lt;/a&gt;
  4: Responsive Layout Without Media Query
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HZnRozon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/61w4dsetc7xtq4uspz8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HZnRozon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/61w4dsetc7xtq4uspz8v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can achieve it by doing:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.task-4.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto-fill&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;What we just did was creating a flexible column layout that the column should never be less than 150px and share the space evenly.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-12-x-12-chess-grid" class="anchor"&gt;
  &lt;/a&gt;
  5: 12 x 12 Chess Grid
&lt;/h2&gt;

&lt;p&gt;For the last task, I want to show that. Not only we can define the number of columns but we can also define the number of rows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.task-5.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This is useful when we have to put items in a specific place in the layout.&lt;/p&gt;



&lt;p&gt;This concludes the tutorial, checkout the video for a full tutorial&lt;/p&gt;

&lt;p&gt;Related tutorials:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nghiemthu" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--25hWjkwQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--QzigktHN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/367332/fc8f9129-bf67-49dc-a9b6-641f7754d9a3.jpeg" alt="nghiemthu image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nghiemthu/master-flexbox-in-12-minutes-with-most-common-use-cases-3e1g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Master Flexbox in 12 Minutes with Most Common Use Cases&lt;/h2&gt;
      &lt;h3&gt;Thu Nghiem ・ Nov 11 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/nghiemthu" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--25hWjkwQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--QzigktHN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/367332/fc8f9129-bf67-49dc-a9b6-641f7754d9a3.jpeg" alt="nghiemthu image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nghiemthu/build-registration-page-with-html-and-css-in-30-minutes-563p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build Registration Page with HTML and CSS in 30 minutes&lt;/h2&gt;
      &lt;h3&gt;Thu Nghiem ・ Oct 17 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/nghiemthu" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--25hWjkwQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--QzigktHN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/367332/fc8f9129-bf67-49dc-a9b6-641f7754d9a3.jpeg" alt="nghiemthu image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nghiemthu/how-to-create-responsive-website-using-html-and-css-in-30-minutes-2a3k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a Responsive Website Using HTML and CSS in 30 minutes&lt;/h2&gt;
      &lt;h3&gt;Thu Nghiem ・ Oct 12 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#-about-me-" class="anchor"&gt;
  &lt;/a&gt;
  __________ 🐣 About me __________
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I am the founder of &lt;a href="https://devchallenges.io/"&gt;DevChallenges&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Subscribe my &lt;a href="https://www.youtube.com/channel/UCmSmLukBF--YrKZ2g4akYAQ?sub_confirmation=1"&gt;Youtube Channel&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Follow my &lt;a href="https://twitter.com/thunghiemdinh"&gt;Twitter&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Join &lt;a href="https://discord.com/invite/3R6vFeM"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Fading Up Sections Using Intersection Observer</title>
      <author>José Delgado</author>
      <pubDate>Tue, 17 Nov 2020 19:05:49 +0000</pubDate>
      <link>https://dev.to/jslim/fading-up-sections-using-intersection-observer-3fhj</link>
      <guid>https://dev.to/jslim/fading-up-sections-using-intersection-observer-3fhj</guid>
      <description>&lt;p&gt;In this article, I will show you a way to apply fade up to your page sections, using Intersection Observer + CSS.&lt;/p&gt;

&lt;p&gt;First of all, we need to know what is Intersection Observer and what it does. In a few words, Intersection Observer is: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An API that allows to configure a callback whenever an element intersects either the device's viewport or another specified element. That specified element is called the root element or root for the purposes of the Intersection Observer API.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You could take a look at Intersection Observer documentation at: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, knowing how Intersection Observer works, the concept of what we want to implement seems pretty simple. Just watching our sections and whenever they intersect the viewport or a certain element, make it fade up.&lt;/p&gt;

&lt;p&gt;So, &lt;strong&gt;let's do it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, we need our html markup with the section we want to intersect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"section fadeup"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Section Title&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Section text..........&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We're adding a &lt;code&gt;fadeup&lt;/code&gt; class, to set the initial styles of this section when still hasn't been intersected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.fadeup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;transition-property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;transition-timing-function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, the idea is fading up the section from &lt;em&gt;50px&lt;/em&gt; below, to its current position, and change the opacity from 0 to 1 when it gets intersected. We're also adding the transition time and timing function.&lt;/p&gt;

&lt;p&gt;Now, taking advantage that we are modifying the styles, let's set the final state styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.in-view&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The idea is to add the &lt;code&gt;in-view&lt;/code&gt; class to the section and apply these values when intersection happens. Now let's go for it!&lt;/p&gt;

&lt;p&gt;First, in our JS file let set the observer options:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observerOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="na"&gt;rootMargin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0 0 -50px 0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By setting the root we're establishing which element is used as the viewport for checking visibility of the target, if we set it to &lt;code&gt;null&lt;/code&gt; it is going to check it to the browser viewport.&lt;/p&gt;

&lt;p&gt;Threshold is the % of our item visibility, which also depends on rootMargin, by giving it -50px at the bottom meaning we are shrinking the root container, therefore the item needs to be 51px visible in order for the intersection to trigger.&lt;/p&gt;

&lt;p&gt;The next step will be to create the observer to the target (in this case, the section) to add the &lt;code&gt;in-view&lt;/code&gt; class to the section element when we want to intersect, and pass it the &lt;code&gt;observerOptions&lt;/code&gt; we defined previously.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;in-view&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unobserve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;observerOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For this example we want to stop observing the target, so we just want it to fade up once. To do so we add &lt;code&gt;observer.unobserve(entry.target)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Last but not least, we need to get our section and put it on observation.&lt;/p&gt;

&lt;p&gt;But first, to ensure our elements have been loaded in the DOM, we're adding a DOMContentLoaded listener.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;section&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;section&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;sections&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, with this we are observing every element with the section class.&lt;/p&gt;

&lt;p&gt;The final result will be: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Josedelgadoing/embed/abZKYeB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;All good so far, now, let's scale. &lt;strong&gt;What if we want to fade up not only the section, but also the children elements inside of it in sequence?&lt;/strong&gt;. Let's continue with the previous simple example.&lt;/p&gt;

&lt;p&gt;First, we are going to add the fadeup class with the initial states to the children as well, then let's add a &lt;code&gt;fade-delay&lt;/code&gt; class to the children elements we want to have in sequence.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"section fadeup"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fadeup fade-delay"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Section Title&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fadeup fade-delay"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Section text..........&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the next step let's modify the styles a bit so, we add the final state properties to sections and children with &lt;code&gt;fade-up&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.in-view.fadeup&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.in-view&lt;/span&gt; &lt;span class="nc"&gt;.fadeup&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, our JavaScript code. We need to grab the section children to give them animation and a respective delay from each other.&lt;/p&gt;

&lt;p&gt;So, while looping the array of sections we could:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;section&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;section&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;sections&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fadeups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fade-delay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;fadeups&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fadeups&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;style&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;transition-delay: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By doing this tweak, we loop into the elements inside the section, for those which have &lt;code&gt;fade-delay&lt;/code&gt; class and give them a &lt;code&gt;0.5s&lt;/code&gt; delay from the section and each other, due to the &lt;code&gt;count * 0.5&lt;/code&gt; calculation we did there.&lt;/p&gt;

&lt;p&gt;By adding some extra styling, we'll have as result something like:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Josedelgadoing/embed/dyXKjZN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Illustrated Notes on Fixing Git Mistakes</title>
      <author>Maggie Appleton</author>
      <pubDate>Tue, 17 Nov 2020 17:39:55 +0000</pubDate>
      <link>https://dev.to/egghead/illustrated-notes-on-fixing-git-mistakes-1c16</link>
      <guid>https://dev.to/egghead/illustrated-notes-on-fixing-git-mistakes-1c16</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PniFf0ke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tsbsimsb1nxz134m5yo0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PniFf0ke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tsbsimsb1nxz134m5yo0.png" alt="FixGitMistakes_4_DevTo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are illustrated notes I made while working through &lt;a href="https://chrisachard.com/"&gt;Chris Achard&lt;/a&gt;'s &lt;a href="http://bit.ly/gitfix"&gt;Fix Common Git Mistakes&lt;/a&gt; course on egghead.&lt;/p&gt;

&lt;p&gt;The course is a great refresher on the fundamental structure of git, adding and removing commits, and (critically) undoing mistakes of all kinds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--woptj32---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/le6fafirpbq05vyv6xtb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--woptj32---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/le6fafirpbq05vyv6xtb.png" alt="fix-common-git-mistakes title"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-basic-structure-of-git" class="anchor"&gt;
  &lt;/a&gt;
  The Basic Structure of Git
&lt;/h2&gt;

&lt;p&gt;Chris covers all the various 'levels' your Git files can be at. I personally needed to think of it as a spatial stack to understand how files move between them.&lt;/p&gt;

&lt;p&gt;Every time I push commits to Github I see something like this in my head:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ejzOuZYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2wkf22g4qncsurrpypzd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ejzOuZYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2wkf22g4qncsurrpypzd.png" alt="FixGitMistakes_3_DevTo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also found it helpful to think of the 'stash' as a side drawer you tuck files away in, and then can 'pop' them back out later.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#branches-are-pointers" class="anchor"&gt;
  &lt;/a&gt;
  Branches are Pointers
&lt;/h2&gt;

&lt;p&gt;This framing of git branches as "pointers" you can move around changed the way I think about them a lot.&lt;/p&gt;

&lt;p&gt;We can move the pointers to different commits, which are just different versions of our project at a specific point in time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UtR7c0xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/adrtw3t9ima7vimsbay6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UtR7c0xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/adrtw3t9ima7vimsbay6.png" alt="FixGitMistakes_1_DevTo"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#git-log" class="anchor"&gt;
  &lt;/a&gt;
  Git Log
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; is a handy feature that shows you all your previous commits and their details. It's quite verbose though.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --oneline&lt;/code&gt; is much easier to read since it only shows you the commit hashes and messages&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --graph&lt;/code&gt; draws a tiny graph in the terminal showing branches and merges&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0teY0twq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j3syvt51em8xuuoc4cvu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0teY0twq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j3syvt51em8xuuoc4cvu.png" alt="Artboard 2_DevTo"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#undoing-mistakes" class="anchor"&gt;
  &lt;/a&gt;
  Undoing Mistakes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5LRnaOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/btf0y16b5hzjcx1k4bmu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5LRnaOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/btf0y16b5hzjcx1k4bmu.png" alt="Artboard 4_DevTo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-commit-ammend" class="anchor"&gt;
  &lt;/a&gt;
  Git Commit Ammend
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git commit --ammend&lt;/code&gt; lets us add or change files in our last commit, as well as the commit message&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jK_OJlBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cke5jpmnb823wl6o6x2a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jK_OJlBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cke5jpmnb823wl6o6x2a.png" alt="Artboard 3_DevTo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-reset" class="anchor"&gt;
  &lt;/a&gt;
  Git Reset
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt; will move a file backwards. If you're committed a file to either staging or the local repo, we can bring it back to our working directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ly2FyNfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x32i3x8nu8ki07rsgljt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ly2FyNfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x32i3x8nu8ki07rsgljt.png" alt="Artboard 5_DevTo"&gt;&lt;/a&gt;&lt;br&gt;
Git gives us three levels of "intensity" for resetting - &lt;code&gt;git reset --hard&lt;/code&gt;, &lt;code&gt;git reset --soft&lt;/code&gt;, and mixed.&lt;/p&gt;

&lt;p&gt;If you don't specify one, mixed is the default which just moves it from the local repo back to your working files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wd7ZlfIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7245xfgzdsvtxhjob2ed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wd7ZlfIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7245xfgzdsvtxhjob2ed.png" alt="Artboard 6_DevTo"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#git-diff" class="anchor"&gt;
  &lt;/a&gt;
  Git Diff
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git diff&lt;/code&gt; is a handy utility for seeing what's changed between two commits or two files&lt;/p&gt;

&lt;p&gt;You can compare two commits using their branch names or commit hashes: &lt;code&gt;git diff main new-feature&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can also compare two files by passing in both file names: &lt;code&gt;git diff path/to/file/ComponentA.js path/to/file/ComponentB.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FUcHnFfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ze24zgrcd8vf0ctsp960.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUcHnFfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ze24zgrcd8vf0ctsp960.png" alt="FixGitMistakes_2_DevTo"&gt;&lt;/a&gt; &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#detached-head" class="anchor"&gt;
  &lt;/a&gt;
  Detached Head
&lt;/h2&gt;

&lt;p&gt;A detached head is less morbid than it sounds. It just means we've checked out a commit using it's specific hash name, such as &lt;code&gt;git checkout 49da32&lt;/code&gt;&lt;br&gt;
That commit is now the "head" because it's the most recent version of our project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ckaKpV5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y6uv9hczkfjb3egspf2e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ckaKpV5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y6uv9hczkfjb3egspf2e.png" alt="Artboard 4 copy1_DevTo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's "detached" because we've navigated there directly and aren't on our usual branch structure. We have to "reattach" the commit back to our branch with &lt;code&gt;git checkout -b my-new-branch-name&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dRVPl-ON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kevqu8alek5itygbiih2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dRVPl-ON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kevqu8alek5itygbiih2.png" alt="Artboard 4 copy2_DevTo"&gt;&lt;/a&gt;&lt;/p&gt;






&lt;p&gt;It feels good to be less lost in the git forest now.&lt;br&gt;
I hope some of these techniques make your git log less sad too :)&lt;/p&gt;

&lt;p&gt;There's plenty more in &lt;a href="http://bit.ly/gitfix"&gt;Chris' course&lt;/a&gt; that I left out here.&lt;/p&gt;




&lt;p&gt;👁‍🗨 If these are hard to read, you can download a free high-res PDF version &lt;a href="http://bit.ly/gitfix"&gt;on the course itself&lt;/a&gt;.&lt;br&gt;
Dev.to limits image sizes a lot and it's hard to make it readable on here. Apologies!&lt;/p&gt;

</description>
      <category>git</category>
      <category>javascript</category>
      <category>fundamentals</category>
    </item>
    <item>
      <title>I created my own blog management system. Here's how I did it.</title>
      <author>Deepjyoti Barman</author>
      <pubDate>Tue, 17 Nov 2020 16:28:14 +0000</pubDate>
      <link>https://dev.to/deepjyoti30/i-created-my-own-blog-management-system-here-s-how-i-did-it-jo5</link>
      <guid>https://dev.to/deepjyoti30/i-created-my-own-blog-management-system-here-s-how-i-did-it-jo5</guid>
      <description>&lt;p&gt;I have had a personal blog for a while now. I had written a few posts there but it was far from perfect. It was built using basic HTML, CSS and JS. I had seen all this awesome sites with unique designs and I thought, why not create my own?&lt;/p&gt;

&lt;p&gt;I went with a front-end for back-end approach which means the back-end needed to be robust in order for the content to load properly and fast.&lt;/p&gt;

&lt;p&gt;I built my API using FastAPI for Python and the webapp using VueJS.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-the-api" class="anchor"&gt;
  &lt;/a&gt;
  Building the API
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#structering-the-api" class="anchor"&gt;
  &lt;/a&gt;
  Structering the API
&lt;/h2&gt;

&lt;p&gt;I laid down the endpoints that will possibly be needed in order for the blog to work properly.&lt;/p&gt;

&lt;p&gt;Here are some of them&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/posts: Allow GET, POST, UPDATE, DELETE where only GET will be public and other methods would need a secret token in order to access them&lt;/li&gt;
&lt;li&gt;/subscribe: Allow POST, DELETE where only POST will be public.&lt;/li&gt;
&lt;li&gt;/related: Allow GET to get the related posts to a post.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the database, I went with mongoDB. So the idea is to store the posts as markdown in the database and let the API access it. The frontend will then just make a request and get all the data from the API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-the-api" class="anchor"&gt;
  &lt;/a&gt;
  Implementing the API
&lt;/h2&gt;

&lt;p&gt;It took me a few days to get the API ready. FastAPI was really helpful with their openapi docs to provide a nice interface in order to test the API without using &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The posts and the subscribe endpoint are pretty self explanatory, here's how I created the related endpoint.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-posts-related-to-a-post" class="anchor"&gt;
  &lt;/a&gt;
  Finding posts related to a post
&lt;/h2&gt;

&lt;p&gt;Since all the posts will have tags linked to them, I used those to calculate a score for the post.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;/related/&amp;lt;post_id&amp;gt;&lt;/code&gt; endpoint was structered to pass a &lt;code&gt;post_id&lt;/code&gt; that would tell us which post to consider the root post. Once we have this post, we can fetch all the other posts and calculate a related score.&lt;/p&gt;

&lt;p&gt;This score is calculated in the following way&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Consider root_tags are tags of the source post
# other_tags are the tags of the other post that.
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other_tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Remove duplicate tags if present
&lt;/span&gt;    &lt;span class="n"&gt;root_tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_tags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;other_tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other_tags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Calculate the score now
&lt;/span&gt;    &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other_tags&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_tags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Above code does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intersect the root tags with the other tags set giving us the common tags&lt;/li&gt;
&lt;li&gt;Score is the division of the number of tags common between the two posts and the total number of tags present in the actual post.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way we get a score that would be between 0 and 1. Once we have this score, we can sort the posts based on the result and the posts that have a higher score are more related to a post as compared to other posts.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-the-webapp" class="anchor"&gt;
  &lt;/a&gt;
  Building the webapp
&lt;/h1&gt;

&lt;p&gt;The webapp is built using VueJS. The whole idea of the frontend for backend approach is, the frontend will be dependent on the backend for the data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structuering-the-app" class="anchor"&gt;
  &lt;/a&gt;
  Structuering the app
&lt;/h2&gt;

&lt;p&gt;Before building the app, I went through a few points that the app should be able to do&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It should have a home page that will show the users all the posts available&lt;/li&gt;
&lt;li&gt;It should be able to show each post&lt;/li&gt;
&lt;li&gt;It should be fast&lt;/li&gt;
&lt;li&gt;It should be able to load posts directly through a route (for example: &lt;code&gt;blog.com/nana&lt;/code&gt; should load the post &lt;code&gt;nana&lt;/code&gt; and not just the webapp that is hosted on &lt;code&gt;blog.com&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first part is pretty simple. I just used the &lt;code&gt;/posts&lt;/code&gt; route in order to get all the posts and then displayed them in a nice way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering-the-post-dynamically" class="anchor"&gt;
  &lt;/a&gt;
  Rendering the post dynamically
&lt;/h2&gt;

&lt;p&gt;Here's the flow of how a post is rendered&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the user clicks on a post from the home page, the content of the post is passed to the router and accordingly rendered in the post view.&lt;/li&gt;
&lt;li&gt;If the post is opened using a route, the route is used to find the post and accordingly the content is shown.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above basically does two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Makes the load speed faster if the user opens a post from the home page&lt;/li&gt;
&lt;li&gt;Adds the ability to load a post using the route.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;To pass the contents of the post by the route, use a route prop to pass a object that will hold the contents. In the Post view, check if this object is available or not, if not use the route to make a request and fetch the content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-about-seo" class="anchor"&gt;
  &lt;/a&gt;
  What about SEO?
&lt;/h2&gt;

&lt;p&gt;Well yeah, I know SEO is important. For loading the meta tags I used &lt;a href="https://github.com/ktquez/vue-head"&gt;vue-head&lt;/a&gt; which renders the meta tags dynamically after the post is loaded using the API.&lt;/p&gt;

&lt;p&gt;This is pretty important since the meta tags are used by all the bots crawling the page. Also, Google bots are now able to crawl dynamically rendered content whcih means it should not be an issue if the tags are loaded dynamically using JS.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#problems" class="anchor"&gt;
  &lt;/a&gt;
  Problems
&lt;/h1&gt;

&lt;p&gt;Except the common occurence of bugs, I did not had any problems with the back end. However there was one issue that made me question the whole idea. How do bots that do not have the ability to crawl dynamically rendered content crawl the page.&lt;/p&gt;

&lt;p&gt;For example, twitter bots crawl a page in order to show a nice card view. If the bots are not able to crawl the page then the card won't be there. Not just Twitter, a similar functionality is used by various other social share bots like the ones from Facebook and LinkedIn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-let-bots-crawl-the-page" class="anchor"&gt;
  &lt;/a&gt;
  How to let bots crawl the page
&lt;/h2&gt;

&lt;p&gt;Well, so how did I fix this issue? At first, I obviously thought this would be inevitable because there's no way the bots would be able to detect dynamically rendered content. One solution was to go with server side rendering but I'm better off not diving down that road.&lt;/p&gt;

&lt;p&gt;So the solution that I went with was to write a static file server in Python.&lt;/p&gt;

&lt;p&gt;What would our server do?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It should be able to return the static html, JS, CSS files.&lt;/li&gt;
&lt;li&gt;It should be able to return a rendered HTML with just the meta tags if the request is made by a bot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I built the server using Flask for Python. It detects the request making entity using the &lt;code&gt;User-Agent&lt;/code&gt; header being passed and accordingly returns an HTML. If the request is being made by a bot, it returns some HTML content that has the meta representing the post.&lt;/p&gt;

&lt;p&gt;Else it returns the proper static files.&lt;/p&gt;

&lt;p&gt;You can read about it &lt;a href="https://blog.deepjyoti30.dev/let-bots-crawl-dynamic-page"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check my blog page &lt;a href="https://blog.deepjyoti30.dev"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post is also published in my &lt;a href="https://blog.deepjyoti30.dev/created-own-blog"&gt;personal blog&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
      <category>css</category>
    </item>
    <item>
      <title>Tutorial: How to Build a Slack Clone with React Native — Part 3</title>
      <author>Vishal Narkhede</author>
      <pubDate>Tue, 17 Nov 2020 16:06:03 +0000</pubDate>
      <link>https://dev.to/vishalnarkhede/tutorial-how-to-build-a-slack-clone-with-react-native-part-3-554m</link>
      <guid>https://dev.to/vishalnarkhede/tutorial-how-to-build-a-slack-clone-with-react-native-part-3-554m</guid>
      <description>&lt;p&gt;In &lt;a href="https://getstream.io/blog/slack-clone-with-stream-chat-part-2/"&gt;Part 2&lt;/a&gt; of this tutorial, we covered how to build Slack-like navigation, channel list screen, channel screen, reaction picker, and action sheet. In this tutorial, Part 3, we will build various search screens and thread screen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources 👇
&lt;/h2&gt;

&lt;p&gt;Below are a few helpful links if you get stuck along the way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GetStream/slack-clone-react-native"&gt;Official Slack Clone Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GetStream/slack-clone-expo"&gt;Official Slack Clone Repo for Expo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactnavigation.org/"&gt;Documentation for React Navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GetStream/stream-chat-react-native"&gt;Stream Chat Component Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thread-screen" class="anchor"&gt;
  &lt;/a&gt;
  Thread Screen
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;MessageList&lt;/code&gt; component accepts the prop function &lt;code&gt;onThreadSelect&lt;/code&gt;, which is attached to the &lt;a href="https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Message/MessageSimple/MessageContent.tsx#L260"&gt;onPress handler&lt;/a&gt; for reply count text below the message bubble. If you check our &lt;code&gt;ChannelScreen&lt;/code&gt; component, you will see navigation logic to &lt;code&gt;ThreadScreen&lt;/code&gt; added to the &lt;code&gt;onThreadSelect&lt;/code&gt; prop on the &lt;code&gt;MesaageList&lt;/code&gt; component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/GetStream/stream-chat-react-native/blob/master/src/components/Thread/Thread.tsx"&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;/a&gt; is provided out-of-the-box from &lt;code&gt;stream-chat-react-native&lt;/code&gt;. If you look at the source code, it's a set of &lt;code&gt;Message&lt;/code&gt; (parent message bubble), &lt;code&gt;MessageList&lt;/code&gt;, and a &lt;code&gt;MessageInput&lt;/code&gt; component. You can customize these underlying components using props – &lt;code&gt;additionalParentMessageProps&lt;/code&gt;, &lt;code&gt;additionalMessageListProps&lt;/code&gt; and &lt;code&gt;additionalMessageInputProps&lt;/code&gt;. We can use this Thread component easily for our purpose.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to implement a checkbox labeled "Also send to {channel_name}" (as shown in the screenshot below). When ticked, the message should appear on the channel as well. We can use &lt;code&gt;show_in_channel&lt;/code&gt; property on the message object for this, as mentioned in docs for &lt;a href="https://getstream.io/chat/docs/threads/?language=js"&gt;threads and replies&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If you specify &lt;code&gt;show_in_channel&lt;/code&gt;, the message will be visible both in a thread of replies and the main channel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3EKZn_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stream-blog-v2.imgix.net/blog/wp-content/uploads/73910013f424a774f1154b9ca7692f08/Screenshot-2020-11-04-at-11-44-16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3EKZn_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stream-blog-v2.imgix.net/blog/wp-content/uploads/73910013f424a774f1154b9ca7692f08/Screenshot-2020-11-04-at-11-44-16.png" alt="Thread Reply in the Channel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the checkbox is ticked, add &lt;code&gt;show_in_channel: true&lt;/code&gt; to the message object before sending it. We can achieve this by providing a &lt;code&gt;doSendMessageRequest&lt;/code&gt; prop function, which overrides Channel components default sendMessage handler.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HJxt8oDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://stream-blog-v2.imgix.net/blog/wp-content/uploads/02cf0ddb76529ca4d9ef85ccf1c4aafb/inputboxthread.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HJxt8oDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://stream-blog-v2.imgix.net/blog/wp-content/uploads/02cf0ddb76529ca4d9ef85ccf1c4aafb/inputboxthread.gif" alt="Input box for thread"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use the &lt;a href="https://reactnative.dev/docs/animated"&gt;Animated API&lt;/a&gt; by React Native to achieve the sliding animation of the checkbox and other action buttons.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now assign the &lt;code&gt;ThreadScreen&lt;/code&gt; component to its respective &lt;code&gt;HomeStack.Screen&lt;/code&gt; in &lt;code&gt;App.js&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#search-screens" class="anchor"&gt;
  &lt;/a&gt;
  Search Screens
&lt;/h2&gt;

&lt;p&gt;There are four modal search screens that we are going to implement in this tutorial:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pTvyS7lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stream-blog-v2.imgix.net/blog/wp-content/uploads/058210eff54bc0a461169548608987f6/Screenshot-2020-11-03-at-07-40-09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pTvyS7lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stream-blog-v2.imgix.net/blog/wp-content/uploads/058210eff54bc0a461169548608987f6/Screenshot-2020-11-03-at-07-40-09.png" alt="Slack Clone Layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jump-to-channel-screen-amp-channel-search-screen" class="anchor"&gt;
  &lt;/a&gt;
  Jump to Channel Screen &amp;amp; Channel Search Screen
&lt;/h3&gt;

&lt;p&gt;We can create a standard component for Jump to channel screen and Channel search screen.&lt;/p&gt;

&lt;p&gt;Let's first create a common component needed across the search screens.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#direct-messaging-avatar" class="anchor"&gt;
  &lt;/a&gt;
  Direct Messaging Avatar
&lt;/h3&gt;

&lt;p&gt;This is a component for the avatar of direct messaging conversation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For one to one conversations, it shows other member's picture with his presence indicator&lt;/li&gt;
&lt;li&gt;For group conversation, it shows stacked avatars of two of its members.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l3XdB1_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stream-blog-v2.imgix.net/blog/wp-content/uploads/d1f56140939b3464f518f32be556a1a2/Medium-article-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l3XdB1_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stream-blog-v2.imgix.net/blog/wp-content/uploads/d1f56140939b3464f518f32be556a1a2/Medium-article-01.png" alt="Status Indicators"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#modal-screen-header" class="anchor"&gt;
  &lt;/a&gt;
  Modal Screen Header
&lt;/h3&gt;

&lt;p&gt;This is a common header for modal screens, with a close button on the left and title in the center.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now let's build a &lt;code&gt;ChannelSearchScreen&lt;/code&gt;, which can be used as "Jump to channel screen" and "Channel search." There are two main differences between these screens, which we will control through a prop — &lt;code&gt;channelsOnly&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;"Jump to channel screen" doesn't have a header&lt;/li&gt;
&lt;li&gt;"Channel search screen" doesn't have a horizontal list of recent direct messaging conversation members.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also, we need to display a list of recent conversations when the user opens this modal. We can use the cached list of recent conversations in &lt;code&gt;CacheService&lt;/code&gt; (which we populated in the &lt;code&gt;ChannelList&lt;/code&gt; component via the &lt;code&gt;useWatchedChannels&lt;/code&gt; hook) to avoid extra calls to the &lt;code&gt;queryChannels&lt;/code&gt; API endpoint.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Assign the &lt;code&gt;ChannelSearchScreen&lt;/code&gt; component to its respective &lt;code&gt;ModalStack.Screen&lt;/code&gt; in &lt;code&gt;App.js&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#new-message-screen" class="anchor"&gt;
  &lt;/a&gt;
  New Message Screen
&lt;/h2&gt;

&lt;p&gt;Highlights of this screen (&lt;code&gt;NewMessageScreen&lt;/code&gt;) are as following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Inputbox on top is a multi-select input. One can select multiple users there. This can be quickly built as a separate component — &lt;code&gt;UserSearch&lt;/code&gt;. Expose &lt;code&gt;onChangeTags&lt;/code&gt; callback as a prop function to give parent component access to selected users.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;UserSearch&lt;/code&gt; component uses &lt;code&gt;queryUsers&lt;/code&gt; endpoint provided available on chat client. Please check &lt;a href="https://getstream.io/chat/docs/query_users/?language=js&amp;amp;q=queryUser"&gt;docs for &lt;code&gt;queryUser&lt;/code&gt; endpoint&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;When the user focuses on the input box at the bottom of the screen, the app should create a conversation between the already selected users in the top (&lt;code&gt;UserSearch&lt;/code&gt;) input box. We handle this in the &lt;code&gt;onFocus&lt;/code&gt; handler for the input box at the bottom of the screen.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now assign the &lt;code&gt;NewMessageScreen&lt;/code&gt; component to its respective &lt;code&gt;ModalStack.Screen&lt;/code&gt; in &lt;code&gt;App.js&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#message-search-screen" class="anchor"&gt;
  &lt;/a&gt;
  Message Search Screen
&lt;/h3&gt;

&lt;p&gt;We are going to implement a global search for message text on this screen — &lt;code&gt;MessageSearchScreen&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The official Slack app provides richer features such as search in a specific channel or search by attachments. Here, we are keeping it limited to a global search, although channel-specific search is also possible using &lt;a href="https://getstream.io/chat/docs/search/?language=js"&gt;Stream Search API&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Global message search is relatively heavy for the backend so that search won't happen onChangeText, but when the user presses the search button explicitly. TextInput component has &lt;a href="https://reactnative.dev/docs/textinput#returnkeytype"&gt;&lt;code&gt;returnKeyType&lt;/code&gt;&lt;/a&gt; prop which we need for our use case.&lt;/li&gt;
&lt;li&gt;Component uses &lt;code&gt;search&lt;/code&gt; endpoint available on chat clients. Please check &lt;a href="https://getstream.io/chat/docs/search/?language=js"&gt;docs for message endpoint&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Search results display a list of messages; when pressed, they should go to the channel screen on that particular message. We are going to build a separate screen for this — &lt;code&gt;TargettedMessageChannelScreen&lt;/code&gt;. This component is quite similar to &lt;code&gt;ChannelScreen&lt;/code&gt;, but it queries the channel at a specific message (provided through props) instead of the latest message as follows:&lt;/li&gt;
&lt;/ol&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;When the user lands on this screen, he can see the list of past searches. Store every search text in AsyncStorage.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Copy the following components in your app:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Assign the &lt;code&gt;MessageSearchScreen&lt;/code&gt; and &lt;code&gt;TargettedMessageChannelScreen&lt;/code&gt; component to its respective &lt;code&gt;ModalStack.Screen&lt;/code&gt; in &lt;code&gt;App.js&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Implementation for additional more screens (shown in screenshots below) is available in &lt;a href="https://github.com/GetStream/slack-clone-react-native/"&gt;slack-clone-react-native&lt;/a&gt; repository. If you managed to follow the tutorial so far, implementation of following screens should be easy to understand.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GetStream/slack-clone-react-native/tree/master/src/screens/DirectMessagesScreen.js"&gt;Direct Messages screen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GetStream/slack-clone-react-native/tree/master/src/screens/MentionsSearch.js"&gt;Mentions screen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GetStream/slack-clone-react-native/tree/master/src/screens/DraftsScreen.js"&gt;Draft Messages screen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#congratulations" class="anchor"&gt;
  &lt;/a&gt;
  Congratulations! 👏
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0yBKEuJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stream-blog-v2.imgix.net/blog/wp-content/uploads/b5c1176ca5f8c9d43dae34d3bc5d6c5d/combine-images.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0yBKEuJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stream-blog-v2.imgix.net/blog/wp-content/uploads/b5c1176ca5f8c9d43dae34d3bc5d6c5d/combine-images.png" alt="Chat Slack Clone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You've completed Part 3, the final step, of our tutorial on building a Slack clone using the &lt;a href="https://getstream.io/chat/"&gt;Stream’s Chat&lt;/a&gt; API with &lt;a href="https://www.npmjs.com/package/stream-chat-react-native"&gt;React Native&lt;/a&gt;. I hope you found this tutorial helpful!&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>slackclone</category>
      <category>chat</category>
      <category>getstream</category>
    </item>
    <item>
      <title>Focus on one of these 9 backend frameworks to become a backend wizard</title>
      <author>Chris Bongers</author>
      <pubDate>Tue, 17 Nov 2020 15:29:58 +0000</pubDate>
      <link>https://dev.to/dailydotdev/focus-on-one-of-these-9-backend-frameworks-to-become-a-backend-wizard-218f</link>
      <guid>https://dev.to/dailydotdev/focus-on-one-of-these-9-backend-frameworks-to-become-a-backend-wizard-218f</guid>
      <description>&lt;p&gt;Backend is literally the backbone of development, and a big passion of mine; it's where everything started.&lt;/p&gt;

&lt;p&gt;Today I'll be showcasing 9 backend frameworks. The idea is that you focus on one of them and become really good at it, there are just so many around I wanted to showcase the diversity for you guys.&lt;/p&gt;

&lt;p&gt;This tutorial is sectioned by programming languages since everyone got a poison.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This list makes the assumption you already know the basics of a programming language if you're all new to backend I'd suggest a more basic course of one of the languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#choosing-a-framework" class="anchor"&gt;
  &lt;/a&gt;
  Choosing a framework
&lt;/h2&gt;

&lt;p&gt;Before jumping into the list of amazing frameworks out there, let's see what framework works for you.&lt;/p&gt;

&lt;p&gt;Choosing the right framework is very personal advice, like clothes shopping, or buying a new PC.&lt;/p&gt;

&lt;p&gt;It depends on your needs, what you used to, and your general style.&lt;/p&gt;

&lt;p&gt;For this purpose let's split it up into some criteria:&lt;/p&gt;

&lt;p&gt;🧠 Knowledge level (seen from a beginners point of view)&lt;br&gt;
🦾 What it's strong at&lt;br&gt;
👎 Downsides&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Laravel: 🧠 Beginner entry possible, 🦾 Modern programming, Flexible, Strict, Well documented 👎 Performance issues, Updates a lot (where third party packages might break)&lt;/li&gt;
&lt;li&gt;Express: 🧠 Beginner entry possible 🦾 JavaScript, Fast, Multi-threading, Many tutorials, Extendable, Quick prototyping 👎 Changes rapidly, can be hard to keep up with, Security is not it's top priority&lt;/li&gt;
&lt;li&gt;Koa: 🧠 Beginner entry possible 🦾 JavaScript, Well structured, Improved security over express 👎 Fairly new, so certain pain points might hold you up.&lt;/li&gt;
&lt;li&gt;Gin: 🧠 Medium knowledge required 🦾 Massive on performance, Super easy to get a rest API, a lot of middleware 👎 Not good if you want different server-side elements it doesn't come with&lt;/li&gt;
&lt;li&gt;Django: 🧠 Medium knowledge required 🦾 High security, a lot of stuff included like database modeling, etc. 👎 Speed, Would not recommend it for super small one pages for instance.&lt;/li&gt;
&lt;li&gt;Flask: 🧠 Beginner entry possible 🦾 Flexible, testing made easy 👎 Not super strict, not super scaleable&lt;/li&gt;
&lt;li&gt;Ruby on Rails: 🧠 Beginner entry possible 🦾 Super high standards, quick development using commands 👎 Speed, Hard to make flexible, Can be hard to change something later on&lt;/li&gt;
&lt;li&gt;Spring Boot: 🧠 Advanced knowledge required 🦾 High on testing, Good with many databases, easy CLI integrations 👎 You can't customize as you wish, hard to understand&lt;/li&gt;
&lt;li&gt;ASP.NET MVC: 🧠 Beginner entry possible 🦾 Well proven, Fast server-side, MVC made easy 👎 Not best at SEO out of the box, Hosting might become more difficult&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#php-laravel" class="anchor"&gt;
  &lt;/a&gt;
  PHP ~ Laravel
&lt;/h2&gt;

&lt;p&gt;The only reason Laravel is first is that I'm using Laravel in my day-to-day job. It's the successor of Symfony and considered the biggest MVC (model, view, controller) framework for PHP.&lt;br&gt;
There are many great packages you can include to make your life easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5yjI9U7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604040330782/RtIEaGxI4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5yjI9U7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604040330782/RtIEaGxI4.jpeg" alt="Laravel - PHP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/php-with-laravel-for-beginners-become-a-master-in-laravel/?ranMID=39197&amp;amp;ranEAID=JVFxdTr9V80&amp;amp;ranSiteID=JVFxdTr9V80-6dnSPu_7OLv.HjR7crjdsg&amp;amp;utm_source=aff-campaign&amp;amp;LSNPUBID=JVFxdTr9V80&amp;amp;utm_medium=udemyads"&gt;Best paid resource to learn Laravel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://laravel.com/docs/8.x"&gt;Best free resource to learn Laravel&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nodejs-express" class="anchor"&gt;
  &lt;/a&gt;
  Node.js ~ Express
&lt;/h2&gt;

&lt;p&gt;Express is an amazing and at the time of writing the biggest node.js framework. It helps us focus on what actually matters and not reinventing the wheel.&lt;/p&gt;

&lt;p&gt;It's amazing to build full web applications or choose to focus on API only interfaces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RIr3UEyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604039693101/p3C_XTFJ1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RIr3UEyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604039693101/p3C_XTFJ1.png" alt="Express.js - Node.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/just-express-with-a-bunch-of-node-and-http-in-detail/?LSNPUBID=jU79Zysihs4&amp;amp;ranEAID=jU79Zysihs4&amp;amp;ranMID=39197&amp;amp;ranSiteID=jU79Zysihs4-5V_fTy45eWoFlrMtyrV6bg&amp;amp;utm_medium=udemyads&amp;amp;utm_source=aff-campaign"&gt;Best paid resource to learn Express.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=VA0busRrX64"&gt;Best free resource to learn Express.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://expressjs.com/"&gt;Express.js&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nodejs-koa" class="anchor"&gt;
  &lt;/a&gt;
  Node.js ~ Koa
&lt;/h2&gt;

&lt;p&gt;Much like express, another node.js framework is Koa, it's built by the same people as express, and supposed to be the next generation.&lt;/p&gt;

&lt;p&gt;I personally think at this point it depends on what your goals are, what job are you after, do they use express or are they very open?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yyRtfdh5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604039745630/RO4swPAHP.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yyRtfdh5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604039745630/RO4swPAHP.jpeg" alt="Koa.js - node.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/learning-koajs-by-building-rest-apis/"&gt;Best paid resource to learn Koa.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tutorialspoint.com/koajs/index.htm"&gt;Best free resource to learn Koa.js&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#golang-gin" class="anchor"&gt;
  &lt;/a&gt;
  GoLang ~ Gin
&lt;/h2&gt;

&lt;p&gt;I wanted to include Go/Golang language since it's very hot and seems to be becoming bigger and bigger.&lt;/p&gt;

&lt;p&gt;I personally haven't used it yet. But from conversations, I hear Gin is the #1 framework at the moment.&lt;/p&gt;

&lt;p&gt;Go is a language by Google and one to look out for if you're completely new.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---yWHyY-v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604040305870/MfR7JDaCg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---yWHyY-v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604040305870/MfR7JDaCg.jpeg" alt="Gin - Golang"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.pluralsight.com/courses/gin-go-web-app-framework"&gt;Best paid resource to learn Gin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://riptutorial.com/go/example/29299/restfull-projects-api-with-gin"&gt;Best free resource to learn Gin&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-django" class="anchor"&gt;
  &lt;/a&gt;
  Python ~ Django
&lt;/h2&gt;

&lt;p&gt;If Python is your poison, have a look at Django. Django is a very powerful web framework on Python.&lt;/p&gt;

&lt;p&gt;It's fast, secure, and scalable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WroWyGXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604039864071/bAPr6sg7T.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WroWyGXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604039864071/bAPr6sg7T.png" alt="Django - Python"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/python-and-django-full-stack-web-developer-bootcamp/?LSNPUBID=*IbDNxAPXZU&amp;amp;ranEAID=*IbDNxAPXZU&amp;amp;ranMID=39197&amp;amp;ranSiteID=.IbDNxAPXZU-n_dnx_kwWa_.VogR4DO3QQ&amp;amp;utm_medium=udemyads&amp;amp;utm_source=aff-campaign"&gt;Best paid resource to learn Django&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tutorial.djangogirls.org/en/index.html"&gt;Best free resource to learn Django&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-flask" class="anchor"&gt;
  &lt;/a&gt;
  Python ~ Flask
&lt;/h2&gt;

&lt;p&gt;Another great Python resource is Flask. It's an MVC micro-framework, easy to understand, secure, and robust.&lt;/p&gt;

&lt;p&gt;It uses Python imports to get certain aspects like a database module. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ge1EHbUV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604040129654/thb8UzcjL.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ge1EHbUV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604040129654/thb8UzcjL.jpeg" alt="Flask - Python"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/rest-api-flask-and-python/"&gt;Best paid resource to learn Flask&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flask.palletsprojects.com/en/1.1.x/"&gt;Best free resource to learn Flask&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ruby-ruby-on-rails" class="anchor"&gt;
  &lt;/a&gt;
  Ruby ~ Ruby on Rails
&lt;/h2&gt;

&lt;p&gt;Another great MVC framework is Ruby on Rails. It's built on top of Ruby and proven itself many times over the years.&lt;br&gt;
It's a full-blown framework, so everything you'll ever need is included in it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZF8poBWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604039942258/kh0bb3vbx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZF8poBWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604039942258/kh0bb3vbx.png" alt="Ruby on Rails - Ruby"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/the-complete-ruby-on-rails-developer-course/?ranMID=39197&amp;amp;ranEAID=JVFxdTr9V80&amp;amp;ranSiteID=JVFxdTr9V80-mEIqpaL2Hcvar6xAAOsBQA&amp;amp;LSNPUBID=JVFxdTr9V80&amp;amp;utm_source=aff-campaign&amp;amp;utm_medium=udemyads"&gt;Best paid resource to learn Ruby on Rails&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/ruby-for-absolute-beginners/?LSNPUBID=JVFxdTr9V80&amp;amp;ranEAID=JVFxdTr9V80&amp;amp;ranMID=39197&amp;amp;ranSiteID=JVFxdTr9V80-8hHVkMTGSa60gJ1nBtbn8g&amp;amp;utm_medium=udemyads&amp;amp;utm_source=aff-campaign"&gt;Best free resource to learn Ruby on Rails&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#java-spring-boot" class="anchor"&gt;
  &lt;/a&gt;
  Java ~ Spring Boot
&lt;/h2&gt;

&lt;p&gt;Perhaps you're more of a Java person? How about Sprint Boot, super simple to get started with, and building simple APIs is child's play.&lt;/p&gt;

&lt;p&gt;You can use it for standalone applications and web applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--odpmqwVq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604040354622/RUF6r3HKG.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--odpmqwVq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604040354622/RUF6r3HKG.jpeg" alt="Spring Boot - Java"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/spring-tutorial-for-beginners/"&gt;Best paid resource to learn Spring Boot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spring.io/quickstart"&gt;Best free resource to learn Spring Boot&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#net-aspnet-mvc" class="anchor"&gt;
  &lt;/a&gt;
  .NET ~ ASP.NET MVC
&lt;/h2&gt;

&lt;p&gt;Of course, .net could not be missing; it's still used by many, many businesses out there and comes with wide knowledge on the internet.&lt;/p&gt;

&lt;p&gt;It's another full-scale framework including about anything you'll ever need!&lt;/p&gt;

&lt;p&gt;The best part, Microsoft has a whole learning gallery on it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XnjrjIz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604040211568/UQBK8wHzo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XnjrjIz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1604040211568/UQBK8wHzo.jpeg" alt="ASP.NET MVC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/the-complete-aspnet-mvc-5-course/"&gt;Best paid resource to learn ASP.NET MVC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dotnet.microsoft.com/learn/aspnet"&gt;Best free resource to learn Express.js&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;&lt;a href="https://api.daily.dev/get?r=devto"&gt;daily.dev&lt;/a&gt; delivers the best programming news every new tab. We will rank hundreds of qualified sources for you so that you can hack the future.&lt;/em&gt;&lt;br&gt;
&lt;a href="https://api.daily.dev/get?r=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GnRWXIbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b996k4sm4efhietrzups.png" alt="Daily Poster"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>node</category>
      <category>php</category>
      <category>ruby</category>
    </item>
    <item>
      <title>How to write IMMUTABLE code and never get stuck debugging again</title>
      <author>Douglas Parsons</author>
      <pubDate>Tue, 17 Nov 2020 14:41:00 +0000</pubDate>
      <link>https://dev.to/dglsparsons/how-to-write-immutable-code-and-never-get-stuck-debugging-again-4p1</link>
      <guid>https://dev.to/dglsparsons/how-to-write-immutable-code-and-never-get-stuck-debugging-again-4p1</guid>
      <description>&lt;p&gt;I've written production code in a variety of different languages throughout my career, including Haskell, Scala, Go, Python, Java or JavaScript. While each language has its own clear benefits, working as a polyglot across a range of different paradigms has changed the way I write code. Certain skills and concepts are transferable regardless of the language being written. I believe immutability is one of these key concepts. By writing immutable code it is possible to make programs easier to reason about, easier to write and easier to debug.&lt;/p&gt;

&lt;p&gt;Here, we’ll look at three things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how walruses eating cheese can explain how immutability works,&lt;/li&gt;
&lt;li&gt;why you should care, and&lt;/li&gt;
&lt;li&gt;why the counterarguments against immutable code aren’t worth considering.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-immutability-" class="anchor"&gt;
  &lt;/a&gt;
  What is immutability? &lt;a href="#what-is-immutability%3F"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;“unchanging over time or unable to be changed.” - Oxford Languages definition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Immutability is the idea that once an object or variable has been created, its value should never change or be updated by anything. For objects or classes, this also includes any fields; literally, nothing should change! The object is effectively read-only.&lt;/p&gt;

&lt;p&gt;Writing code in this style requires a mindset shift at times though. The first time I came across the idea, it made absolutely no sense to me and seemed insane. I was confused and wanted to immediately unpick it all, writing it in a way I was familiar with. Gary Bernhardt, in his &lt;a href="https://www.destroyallsoftware.com/talks/boundaries"&gt;talk on boundaries&lt;/a&gt;, gives a fantastic example of why it feels so wrong.&lt;/p&gt;

&lt;p&gt;He talks about feeding walruses cheese.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GekCf4cg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dgls.dev/img/remote/walrus.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GekCf4cg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dgls.dev/img/remote/walrus.jpg" alt="Walrus"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a mutable version, we might instruct each walrus to eat some cheese. This cheese then gets added to the contents of their stomach. Makes a lot of sense, right?&lt;/p&gt;

&lt;p&gt;In an immutable version, we have to perform a mind-bending operation. To feed the walruses we would have to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a brand new stomach that’s the same as the old stomach, but with some cheese in it.&lt;/li&gt;
&lt;li&gt;Then, create a new walrus that’s the same as the old walrus, except, with the stomach replaced.&lt;/li&gt;
&lt;li&gt;Then, throw away all the old walrus.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At first glance, this sounds bonkers but stay with me - let’s look at what makes writing code like this worthwhile.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-prevent-pain-when-debugging-" class="anchor"&gt;
  &lt;/a&gt;
  How does it prevent pain when debugging? &lt;a href="#how-does-it-prevent-pain-when-debugging%3F"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Have you ever encountered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;undefined is not a function&lt;/code&gt; in JavaScript?&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;NullPointerException&lt;/code&gt;s in Java?&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SegFault&lt;/code&gt; in C/C++?&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;panic&lt;/code&gt; in Go?&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;NoneType has no attribute foo&lt;/code&gt; in Python?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’ve worked in any of these languages, then chances are you probably have. The thing is, all of these errors are caused by the same thing: &lt;strong&gt;missing, or null, data.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Missing data and null values are definitely among the most difficult types of bugs to track down and fix. I’ve spent countless hours in the past sifting through JavaScript code trying to figure out why the value I thought should be there, wasn’t. Why my application suddenly crashed when everything seemed to be going fine. Sir Tony Hoare even describes null as &lt;a href="https://qconlondon.com/london-2009/qconlondon.com/london-2009/speaker/Tony+Hoare.html"&gt;“The Billion Dollar Mistake”&lt;/a&gt; because of the countless bugs, security vulnerabilities and crashes that have resulted from it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s just agree: nulls can be evil.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The reason these bugs are so hard to hunt down and to fix is that the effect (the exception) is far away from the cause (the introduction of null). Actually throwing a null pointer error happens some arbitrary amount of time after we introduce a null, and we get &lt;code&gt;undefined&lt;/code&gt; errors accessing a property miles away from where we thought the property was set. Debugging becomes a case of reading carefully back through code until we find the cause.&lt;/p&gt;

&lt;p&gt;The more state changes that happen in code, the more places these bugs can be introduced. Instead, we can attempt to reduce the surface area of any code. The fewer mutations in a codebase, the less surface area there is for bugs. This leads to fewer bugs.&lt;/p&gt;

&lt;p&gt;If you only ever set a value once, there’s only one place that value can be faulty. If you make changes to an object as it gets passed around, any one of those places could introduce potential issues. If one of our walruses is faulty, we know it can only have happened when we made the latest walrus, complete with the new stomach. It can’t be an issue with an earlier walrus - they are long gone.&lt;/p&gt;

&lt;p&gt;So really, immutability, or, never changing a value, really saves us from getting stuck debugging.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-performance-isnt-a-concern-" class="anchor"&gt;
  &lt;/a&gt;
  Why performance isn’t a concern &lt;a href="#why-performance-isn%E2%80%99t-a-concern"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Some eagle-eyed people might be thinking “those walruses earlier… isn’t throwing them all in the bin and making new ones pretty expensive? Won’t it make my code slow?”.&lt;/p&gt;

&lt;p&gt;The answer isn’t simple.&lt;/p&gt;

&lt;p&gt;You’re right in saying that throwing away walruses all the time isn’t totally necessary, and it can make things the tiniest amount slower sometimes. The keyword being sometimes here though. Sometimes compilers are clever enough to optimise this behaviour with something more efficient. Some languages even &lt;a href="https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html"&gt;prefer immutability by default&lt;/a&gt;. Immutability also has great benefits when it comes to multi-threading or parallelisation, as it allows lock-free sharing, knowing that values &lt;a href="https://softwareengineering.stackexchange.com/questions/171253/does-immutability-entirely-eliminate-the-need-for-locks-in-multi-processor-progr"&gt;won’t be changed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Despite all this, even if creating new walruses is slower in the language you use, the cost of allocating a new object is almost certainly minuscule compared to anything else within an application. Unless you are benchmarking and actively measuring performance, then you almost certainly shouldn’t care.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion &lt;a href="#conclusion"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Immutability is a powerful tool when programming. It allows us to write code that is easier to debug and reason about. It requires a bit of a mindset shift, but in my experience, it’s definitely worth making the mental leap.&lt;/p&gt;

&lt;p&gt;Give it a go, and let me know what you think :).&lt;/p&gt;




&lt;p&gt;Looking for other ways to improve the clarity of your code? Why not check out my &lt;a href="https://dev.to/dglsparsons/write-better-code-and-be-a-better-programmer-by-never-using-else-statements-4dbl"&gt;post on never using else statements&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Enjoyed this post? Want to share your thoughts on the matter? Found this article helpful? Disagree with me? Let me know by &lt;a href="https://twitter.com/dglsparsons"&gt;messaging me on Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>UX Lessons from Big Sur</title>
      <author>Jordan Bowman</author>
      <pubDate>Tue, 17 Nov 2020 14:40:12 +0000</pubDate>
      <link>https://dev.to/jrdnbwmn/ux-lessons-from-big-sur-4l7i</link>
      <guid>https://dev.to/jrdnbwmn/ux-lessons-from-big-sur-4l7i</guid>
      <description>&lt;p&gt;The largest tech company in the world just launched new software.&lt;/p&gt;

&lt;p&gt;There are problems with Apple's Big Sur, but let's look at a few UX decisions they (mostly) got right.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#userfirst" class="anchor"&gt;
  &lt;/a&gt;
  User-first
&lt;/h2&gt;

&lt;p&gt;Emphasis on the UI was reduced in order to keep the focus on the user’s content. Buttons and controls appear when needed and recede when they’re not. Border and bezels have been softened or removed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The interface is there to serve the user—it shouldn’t draw attention to itself. Remove visual complexity &amp;amp; increase the signal to noise ratio.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sEeEwkgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ec047lybyvhpqlsfj7px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sEeEwkgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ec047lybyvhpqlsfj7px.png" alt="User-first"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#privacy-amp-transparency" class="anchor"&gt;
  &lt;/a&gt;
  Privacy &amp;amp; transparency
&lt;/h2&gt;

&lt;p&gt;Tracking prevention and transparency has been added to Safari. Inspired by food nutrition labels, new privacy information on the App Store lets you see a summary of the privacy practices of each app before you download it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Put privacy and transparency first. It’s in the best interest of your user.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXyXQFo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2twvewqua157l63d8d49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXyXQFo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2twvewqua157l63d8d49.png" alt="Privacy and transparency"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drill-down-on-key-workflows" class="anchor"&gt;
  &lt;/a&gt;
  Drill down on key workflows
&lt;/h2&gt;

&lt;p&gt;Apple clearly had a goal to improve the Messages app. There are now pinned conversations, better search, inline replies, mentions, and the ability to find GIFs. They know Messages are an important part of their platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Invest time and effort in improving key tasks &amp;amp; flows in your product. It’ll pay off in the end.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eOo3zQu4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mfo056vjs5siwllteoee.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eOo3zQu4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mfo056vjs5siwllteoee.png" alt="Key workflows"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uniformity-across-services" class="anchor"&gt;
  &lt;/a&gt;
  Uniformity across services
&lt;/h2&gt;

&lt;p&gt;The Control Center and Notification Center changes are meant to create consistency through the ecosystem. There’s also new unified line of symbols. Some of the visual changes, though, like the new app icons, don’t match up with iOS 14; hopefully they’ll fix that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maintain consistency and adhere to your own standards. It reduces cognitive load, makes the UI learnable, and gives a feeling of familiarity and confidence.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4AZBfMI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvgojl6et14xmcwx3u22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4AZBfMI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvgojl6et14xmcwx3u22.png" alt="Uniformity across services"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#system-status-visibility" class="anchor"&gt;
  &lt;/a&gt;
  System status visibility
&lt;/h2&gt;

&lt;p&gt;Multiple updates and standardizations were made to top-level UI’s, including the Control Center, widgets, Spotlight, and the Notification Center. These changes make system status clear, easy to find, and customizable. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick access to general system controls and information makes an interface feel reliable and predictable, and builds trust.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--86ueLcqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learnuxd.io/img/posts/big-sur/system-status.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--86ueLcqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learnuxd.io/img/posts/big-sur/system-status.png" alt="System status visibility"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stick-with-whats-familiar" class="anchor"&gt;
  &lt;/a&gt;
  Stick with what's familiar
&lt;/h2&gt;

&lt;p&gt;When redesigning dock icons, Apple consciously tried to retain the personality from the original. There are lots of new UI sounds as well, which were literally built on top of snippets of the originals so that they sounded familiar. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When doing a redesign, remember Familiarity Bias: people prefer familiar experiences. It’s best to build off what you have rather than make an entirely new experience.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v46IBSAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learnuxd.io/img/posts/big-sur/familiar-redesign.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v46IBSAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learnuxd.io/img/posts/big-sur/familiar-redesign.png" alt="Stick with what's familiar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clear-visual-feedback" class="anchor"&gt;
  &lt;/a&gt;
  Clear visual feedback
&lt;/h2&gt;

&lt;p&gt;The Dock and Menu Bar have a new interface that allows you to customize where controls show up. The method they use of visually showing the user exactly what will happen is not only satisfying, it’s a very effective form of communication.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clearly communicate the consequences of decisions, preferably visually.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--znD9gLpl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learnuxd.io/img/posts/big-sur/clear-visual-feedback.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--znD9gLpl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learnuxd.io/img/posts/big-sur/clear-visual-feedback.png" alt="Clear visual feedback"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks" class="anchor"&gt;
  &lt;/a&gt;
  Thanks!
&lt;/h2&gt;

&lt;p&gt;What do you think of Big Sur so far? What could they have done better?&lt;/p&gt;

&lt;p&gt;If you’re feeling generous, perhaps share the thread on Twitter:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FLIyCQzy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EnBhdk0WEAMixru.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQsNUHQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1265404181302718472/0aUGXlIU_normal.jpg" alt="Learn UXD profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Learn UXD
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @learn_uxd
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🍎 There are problems with Apple's Big Sur update, but let's look at a few UX decisions they (mostly) got right. &lt;a href="https://twitter.com/hashtag/%E2%83%9Ddesign"&gt;#⃝design&lt;/a&gt; &lt;br&gt;&lt;br&gt;[thread 👇] 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:13 PM - 17 Nov 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1328672569042624513" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1328672569042624513" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      4
      &lt;a href="https://twitter.com/intent/like?tweet_id=1328672569042624513" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      15
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Originally posted on &lt;a href="https://learnuxd.io/posts/ux-lessons-from-big-sur"&gt;learnuxd.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Images from &lt;a href="https://www.apple.com/"&gt;apple.com&lt;/a&gt; and my computer.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>ux</category>
      <category>design</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>Everything you need to know before you Open Source 🚀</title>
      <author>Subhampreet Mohanty 👨‍💻</author>
      <pubDate>Tue, 17 Nov 2020 13:44:29 +0000</pubDate>
      <link>https://dev.to/subhampreet/everything-you-need-to-know-before-you-open-source-129i</link>
      <guid>https://dev.to/subhampreet/everything-you-need-to-know-before-you-open-source-129i</guid>
      <description>&lt;blockquote&gt;&lt;h4&gt; Getting Started with Open Source ❤&lt;/h4&gt;&lt;/blockquote&gt;

&lt;p&gt;If you are here reading this article, it means you at least have an idea about Open Source. This article aims to be a launchpad for developers and programmers who still don’t contribute to the Open Source community but want to. It will talk about the How and the Why aspect of Open Source contribution.&lt;/p&gt;

&lt;p&gt;As you probably have known that open source has changed the face of the software industry and the modern computing world in general and will continue to do the same in the future. The Open Source community has tons of awesome developers still it requires your contribution because every drop counts. It does not matter if it is a small contribution or something substantial. Everybody starts like that and soon as you contribute more and more you will become an expert too.&lt;/p&gt;

&lt;p&gt;A journey of 1000 miles starts with a single step ⚡!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6INSp0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xebbgv6twkd69w50psz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6INSp0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xebbgv6twkd69w50psz4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;h4&gt; What is open-source software⚡?&lt;/h4&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;b&gt;Open-source&lt;/b&gt; software is software with source code that anyone can inspect, modify, and enhance.&lt;/p&gt;

&lt;p&gt;"Source code" is the part of the software that most computer users don't ever see; it's the code computer programmers can manipulate to change how a piece of software—a "program" or "application"—works. Programmers who have access to a computer program's source code can improve that program by adding features to it or fixing parts that don't always work correctly.&lt;/p&gt;

&lt;blockquote&gt;&lt;h4&gt;What are Open source projects🌍?&lt;/h4&gt;&lt;/blockquote&gt;

&lt;p&gt;Open source projects have given birth to a range of useful software over the years. Many of the great technologies that we use today were born out of open source development! &lt;b&gt;Android, Firefox, VLC media player, MongoDB, Linux, Docker, and Python&lt;/b&gt; just to name a few.&lt;/p&gt;

&lt;p&gt;Even many of the tech giants realize the benefit and allow their employees to take a day off and dedicate their time to open source projects. In fact, many have open-source projects themselves.&lt;/p&gt;

&lt;p&gt;However, the large majority of contributors to open source projects don’t work for tech giants; anyone can leave their mark on an important piece of open software or create their own “next big thing”. Being part of an open-source project can also help you improve your skills, learn something new, get mentorship, or form life long friendships. Contributing to open-source projects should be mutually beneficial in both the short and long term. Many companies actively hire full-time developers from those contributing the most to a project, and so doing so can be a great way to show off your skills, while learning new ones.&lt;/p&gt;

&lt;blockquote&gt;&lt;h4&gt;Why to Open-Source🤔?&lt;/h4&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2JGyDRCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4p521xcu1jfu0zxi0v9y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2JGyDRCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4p521xcu1jfu0zxi0v9y.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine this scenario — you’re working on a project and you find something just isn’t working or is possibly even missing? What do you do? The majority of people will move on. A few will even flag up these issues with the toolmakers and EVEN fewer will be the ones who step forward and build that new tool that helps everyone.&lt;/p&gt;

&lt;p&gt;Who do you think is the hero/heroine in that scenario? It’s that person who steps up and takes charge of the situation and from their efforts receives new knowledge, improves the wider ecosystem for all developers AND all the glory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Contributing to an open-source project helps to improve it based on real-world experience and proven, working solutions&lt;/li&gt;
&lt;li&gt;Contributing to an open-source project helps you gain a much deeper knowledge about the software&lt;/li&gt;
&lt;li&gt;Contributing to open source project helps your reputation and can leverage your career&lt;/li&gt;
&lt;li&gt;Contributing to open-source projects you are using in your projects lets you better deal with potential risks and plan for the future &lt;/li&gt;
&lt;li&gt;Contributing to open-source projects is fun and gives you personal satisfaction 😊&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contributing to open-source projects can be a lot of fun, though challenging at first. While in personal projects one may be in the position to act quickly, but when it comes to design or architectural decisions, there may be a lot more discussions in open source projects. The best projects attract the best people, so while contributing to such projects, one gets in touch with strong decision-makers and very talented developers. It may be hard to convince them of one's solution, the design one has chosen, or the usefulness for others. However, doing so successfully thus gives you a much higher personal satisfaction than you may have expected.&lt;/p&gt;

&lt;blockquote&gt;&lt;h4&gt;Pre-requisites to Open Source 🎈 :&lt;/h4&gt;&lt;/blockquote&gt;

&lt;p&gt;Open source contribution requires one to know basic git commands and also knowing how to navigate your way on Github. Here are all the pre-requisites on must know to be an open-source contributor:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kRfl70RR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x2fe85h2e19w8uk2e1fo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kRfl70RR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x2fe85h2e19w8uk2e1fo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorial_series/an-introduction-to-open-source"&gt;An Intro to Open Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.atlassian.com/git/tutorials/what-is-git"&gt;All about Git and Github&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://guides.beanstalkapp.com/version-control/common-git-commands.html"&gt;Basic Git Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guides.github.com/introduction/git-handbook"&gt;Git Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en"&gt;Github Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Hello World project is a time-honored tradition in computer programming. It is a simple exercise that gets you started when learning something new. And now, you are all set to go &lt;a href="https://docs.github.com/en"&gt;"Hello, World!"&lt;/a&gt;  in Github.&lt;/p&gt;

&lt;blockquote&gt;&lt;h4&gt;Make your first Contribution 🐱‍👤&lt;/h4&gt;&lt;/blockquote&gt;

&lt;p&gt;1) &lt;b&gt;Get yourself a GitHub account&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Most open-source projects are hosted on GitHub, which is a website for sharing and saving code. Anyone can make a GitHub account for free. Paid accounts are only necessary if you want some of your code to be private.&lt;/p&gt;

&lt;p&gt;2) &lt;b&gt;Find a project that is open to pull-requests and issue to work on&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;A set of files for a project is called a Repository, and Issues are where people ask for help fixing things. If you haven’t picked out a project to work on. Contributing to open source isn’t just about hardcore coding — there’s plenty of work to be done on public websites for the project (like CSS and HTML) or documentation that will help out other developers. For your &lt;a href="https://github.com/firstcontributions/first-contributions"&gt;first contribution&lt;/a&gt;, pick something small. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.firsttimersonly.com/"&gt;Resources for First Contribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://up-for-grabs.net/"&gt;Open Source Projects wanting Help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://goodfirstissues.com/"&gt;Good First Issue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you’re new to a project, it’s a good idea to comment on an issue that you want to help with. To see the Issues, click on the tab for it. Many open-source projects use tags like “Good for new contributors” or “help wanted” to indicate which Issues might be best to jump in on. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pqk4kz4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vlr22qdanrzvuj8198cd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pqk4kz4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vlr22qdanrzvuj8198cd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) &lt;b&gt;Read the guidelines for contributing&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Look for a CONTRIBUTING.md file in the root of the project’s repository. Read the document thoroughly. This document will often provide you with instructions on how the project accepts contributions, direct you to the code of conduct, and tell you how to report bugs or troubleshoot.&lt;/p&gt;

&lt;p&gt;4) &lt;b&gt;Fork the Repository and Clone the Project into your system&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9syFESX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tte66fs43nrgd18bljq7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9syFESX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tte66fs43nrgd18bljq7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5) &lt;b&gt;Open a pull-request.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Write your code on a new, descriptively-named branch. Feel free to open up a pull-request (PR) early. You should link your PR to the issue you’re working on by referencing the issue number in your PR. Make sure that your PR has a descriptive title. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQ-RKmiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x0bcmkzwfdmvuy9v672i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQ-RKmiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x0bcmkzwfdmvuy9v672i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you work on the issue, you can ask for changes to be reviewed by the project’s reviewers via the open PR. Some projects will also have continuous integration testing that runs on all PR code. This feedback allows you to make changes to your code as you go. Again, you will want to defer to the guidelines and practices of the particular project you are working on.&lt;/p&gt;

&lt;p&gt;6) &lt;b&gt;Get your first Open Source contribution merged into the project’s codebase!&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXCc-YlV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ll5b38ppst6fj9shtv1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXCc-YlV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ll5b38ppst6fj9shtv1l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything goes well, you will work with the project’s reviewers until your code is acceptable and ready to be merged into the project’s codebase. Sometimes, the reviewers will choose not to accept your code or implement the change that your pull-request proposes. If that happens, don’t be discouraged. Consider whether there is another issue that is a better fit for your skills and the project’s priorities at this time, or explores some other projects that are open to first-time contributions.&lt;/p&gt;

&lt;blockquote&gt;&lt;h4&gt;Conclusion👋&lt;/h4&gt;&lt;/blockquote&gt;

&lt;p&gt;Contributing to open-source software is a great way to give back and gain experience collaborating with other developers. It may take a little bit of trial-and-error to find the best way to put your skills to use, but there is a place in OSS for everyone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5LEMj6aZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jkh0lzyizzgt0o7uzx89.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5LEMj6aZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jkh0lzyizzgt0o7uzx89.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you find this post useful share it with your peers or beginners who want to start an open-source contribution. Happy Coding and Contributing ❤!&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The SOLID Object-Oriented Design Principles</title>
      <author>Sathish</author>
      <pubDate>Tue, 17 Nov 2020 13:27:33 +0000</pubDate>
      <link>https://dev.to/sathish/the-solid-object-oriented-design-principles-4e7o</link>
      <guid>https://dev.to/sathish/the-solid-object-oriented-design-principles-4e7o</guid>
      <description>&lt;p&gt;The SOLID design principles are five key principles that are used to design and structure a Class in an object-oriented design. They are a set of rules that needs to be followed to write effective code that’s easier to understand, collaborate, extend &amp;amp; maintain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-are-they-important" class="anchor"&gt;
  &lt;/a&gt;
  Why are they important?
&lt;/h2&gt;

&lt;p&gt;Let’s answer this question with a use case and we’ll pull one principle from the five – which is ‘&lt;strong&gt;O - The Open-Closed Principle (Open to extension but closed to modification)&lt;/strong&gt;’.&lt;/p&gt;

&lt;p&gt;Aren’t we supposed to modify the class if there’s new functionality or modules to be added? Well, yes but actually no. It’s advised to not change/modify an already tested code that’s currently in production. This might lead to some side effects that would break the functionality of the entire class which will need further refactoring (Ugh! Work!). So, we need to structure it in such a way that it should always be open to extension and closed to modification.&lt;/p&gt;

&lt;p&gt;That’s what I like more about conventions over configurations which Ruby on Rails offers. It says “Hey, let’s follow a similar convention and design patterns instead of bringing our own”. The one that looks good to me might not look good to others in a highly collaborative development environment we are currently having. Stop wasting time figuring things out and let’s start writing some code.&lt;/p&gt;

&lt;p&gt;We’ll see more in detail about each of the principles and I will be using the Ruby programming language for examples. The concepts are applicable to any object-oriented programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-who-formulated-this-a-background" class="anchor"&gt;
  &lt;/a&gt;
  So, who formulated this? A Background
&lt;/h2&gt;

&lt;p&gt;The theory of SOLID principles was introduced by Robert C. Martin (a.k.a Uncle Bob) in his 2000 &lt;a href="https://fi.ort.edu.uy/innovaportal/file/2032/1/design_principles.pdf"&gt;paper&lt;/a&gt; Design Principles and Design Patterns &amp;amp; The SOLID acronym was introduced later by Michael Feathers.&lt;/p&gt;

&lt;p&gt;The five principles are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;S&lt;/strong&gt;ingle Responsibility Principle&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;O&lt;/strong&gt;pen-Closed Principle&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;L&lt;/strong&gt;iskov Substitution Principle&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;I&lt;/strong&gt;nterface Segregation Principle&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;D&lt;/strong&gt;ependency Inversion Principle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Writing a clean understandable code is not only having multiple lines of comments that explain what (sometimes, the hell) is going on. The code you write should express your intent rather than depending on comments. In most cases, extensive comments are not required if your code is expressive enough.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YcGFyIIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.skcript.com/svrmedia/heroes/image1-52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YcGFyIIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.skcript.com/svrmedia/heroes/image1-52.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main goal of any design principles is - "To create understandable, readable, and testable code that many developers can collaboratively work on."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-single-responsibility-principle" class="anchor"&gt;
  &lt;/a&gt;
  The Single Responsibility Principle
&lt;/h2&gt;

&lt;p&gt;As the name implies, the single responsibility principle denotes that a class should have only one responsibility.&lt;/p&gt;

&lt;p&gt;Consider a SaaS product that sends out weekly analytics to your users. There are two actions that need to be done to complete the process. One is to generate the report itself and the other will be to send the report. Let’s assume that we are emailing them.&lt;/p&gt;

&lt;p&gt;Let’s see a scenario where we violate and then an example that follows the single responsibility principle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Violation of the Single Responsibility Principle in Ruby&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WeeklyAnalyticsMailer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@activities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;activities&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="vi"&gt;@report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_report!&lt;/span&gt;
    &lt;span class="c1"&gt;# Generate Report&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_report&lt;/span&gt;
    &lt;span class="no"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;deliver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="ss"&gt;from: &lt;/span&gt;&lt;span class="s1"&gt;'analytics@example.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;subject: &lt;/span&gt;&lt;span class="s1"&gt;'Yo! Your weekly analytics is here.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;body: &lt;/span&gt;&lt;span class="vi"&gt;@report&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;mailer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;WeeklyAnalytics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;generate_report!&lt;/span&gt;
&lt;span class="n"&gt;mailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send_report&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Even though sending an analytics email looks like a single action, it involves two different sub actions. Why is the above class a violation of the single responsibility principle? Because the class has two responsibilities, one is to generate the report and the other is to email them. Having the class name as WeeklyAnalyticsMailer, it shouldn’t do extra work than the intended one. This clearly violates the principle.&lt;/p&gt;

&lt;p&gt;How to fix this? We will construct two different classes where one generates the report and the other emails to your users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Correct use of the Single Responsibility Principle in Ruby&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WeeklyAnalyticsMailer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;report&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deliver&lt;/span&gt;
    &lt;span class="no"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;deliver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="ss"&gt;from: &lt;/span&gt;&lt;span class="s1"&gt;'analytics@example.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;subject: &lt;/span&gt;&lt;span class="s1"&gt;'Yo! Your weekly analytics is here.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;body: &lt;/span&gt;&lt;span class="vi"&gt;@report&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WeeklyAnalyticsGenerator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@activities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;activities&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate&lt;/span&gt;
    &lt;span class="c1"&gt;# Generate Report&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;WeeklyAnalyticsGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;generate&lt;/span&gt;
&lt;span class="no"&gt;WeeklyAnalyticsMailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;deliver&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As planned, we have two classes that have their own dedicated responsibility and it doesn’t exceed one. If we want to extend the functionality of the mailer class (assume we use SendGrid to send out our email), we can simply make the necessary changes to the dedicated mailer class without touching the generator class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-openclosed-principle" class="anchor"&gt;
  &lt;/a&gt;
  The Open-Closed Principle
&lt;/h2&gt;

&lt;p&gt;We looked briefly at the Open-Closed principle in the introduction. We’ll see more about it now.&lt;/p&gt;

&lt;p&gt;The main goal of this principle is to create a flexible system architecture that is easier to extend the functionality of your application instead of changing or refactoring the existing source code that is in production.&lt;/p&gt;

&lt;p&gt;“Objects or entities should be open for extension but closed for modification.”&lt;br&gt;&lt;br&gt;
Let’s assume an example where we again need to send the analytics to the user in&lt;br&gt;&lt;br&gt;
different formats and mediums.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Violation of the Open-Closed Principle in Ruby&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Analytics&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;medium&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
   &lt;span class="vi"&gt;@activities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;activities&lt;/span&gt;
   &lt;span class="vi"&gt;@type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;
   &lt;span class="vi"&gt;@medium&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;medium&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;

 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send&lt;/span&gt;
   &lt;span class="n"&gt;deliver&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;

 &lt;span class="kp"&gt;private&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deliver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="vi"&gt;@type&lt;/span&gt;
   &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;
     &lt;span class="c1"&gt;# Send Report via Email&lt;/span&gt;
   &lt;span class="k"&gt;else&lt;/span&gt;
     &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;NotImplementedError&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;

 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate&lt;/span&gt;
   &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="vi"&gt;@type&lt;/span&gt;
   &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:csv&lt;/span&gt;
     &lt;span class="c1"&gt;# Generate CSV report&lt;/span&gt;
   &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:pdf&lt;/span&gt;
     &lt;span class="c1"&gt;# Generate PDF report&lt;/span&gt;
   &lt;span class="k"&gt;else&lt;/span&gt;
     &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;NotImplementedError&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Analytics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:csv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="ss"&gt;:email&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;From the above example, we can send a CSV/PDF via email. If we want to add a new format, say raw and a new medium SMS, we need to modify the code which clearly violates our Open-Closed Principle. We’ll refactor the above code to follow the Open-Closed Principle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Correct use of the Open-Closed Principle in Ruby&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Analytics&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;medium&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@medium&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;medium&lt;/span&gt;
    &lt;span class="vi"&gt;@type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send&lt;/span&gt;
    &lt;span class="vi"&gt;@medium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;deliver&lt;/span&gt; &lt;span class="vi"&gt;@type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;generate&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EmailMedium&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="c1"&gt;# ... Setup Email medium&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deliver&lt;/span&gt;
    &lt;span class="c1"&gt;# Deliver Email&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SmsMedium&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="c1"&gt;# ... Setup SMS medium&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deliver&lt;/span&gt;
    &lt;span class="c1"&gt;# Deliver SMS&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PdfGenerator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@activities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;activities&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate&lt;/span&gt;
    &lt;span class="c1"&gt;# Generate PDF Report&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CsvGenerator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@activities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;activities&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate&lt;/span&gt;
    &lt;span class="c1"&gt;# Generate CSV Report&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RawTextGenerator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@activities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;activities&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate&lt;/span&gt;
    &lt;span class="c1"&gt;# Generate Raw Report&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Analytics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;SmsMedium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="no"&gt;RawTextGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We refactored the above class in such a way that the module can be easily extended without changing the existing code which now follows the Open-Close principle. Neat!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-liskov-substitution-principle" class="anchor"&gt;
  &lt;/a&gt;
  The Liskov Substitution Principle
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://twitter.com/unclebobmartin"&gt;Uncle Bob&lt;/a&gt;, “Subclasses should add to a base class’s behavior, not replace it.”.&lt;/p&gt;

&lt;p&gt;A simple foo-bar example could be - all squares are rectangles and not vice versa. If we have a Rectangle class as our base class for our Square class. We then pass the length and width as the same values to compute the area of a square since all squares are rectangles. We will get the correct value but if we do the other way round, it will lead to an incorrect value.&lt;/p&gt;

&lt;p&gt;To overcome this, we need to have a Shape class as our Base class, and the Rectangle and Square will extend from the Base class Shape which will satisfy the Liskov Substitution principle. Enough of the foo-bar examples. We’ll see a more realistic example.&lt;/p&gt;

&lt;p&gt;In general, the Liskov Substitution Principle states that parent instances should be replaceable with one of their child instances without creating any unexpected or incorrect behaviour. Therefore, LSP ensures that abstractions are correct, and helps developers achieve more reusable code and better organize class hierarchies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V3WhIltJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.skcript.com/svrmedia/heroes/image2-50.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V3WhIltJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.skcript.com/svrmedia/heroes/image2-50.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s see an example that violates the principle. There’s a base class called &lt;em&gt;UserInvoice&lt;/em&gt; which has a method to retrieve all invoices.&lt;/p&gt;

&lt;p&gt;There’s a subclass &lt;em&gt;AdminInvoice&lt;/em&gt; which inherits the base class that has the same method &lt;code&gt;invoices&lt;/code&gt;. The AdminInvoice will return a string when compared to the Base class method which returns an array of objects. This clearly violates the LSP since the subclass is not replaceable with the base class without any side effects as the subclass overwrites the behaviour of invoices method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Violation of the Liskov Substitution Principle in Ruby&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserInvoice&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invoices&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;invoices&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AdminInvoice&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;UserInvoice&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invoices&lt;/span&gt;
    &lt;span class="n"&gt;invoices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;

    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
    &lt;span class="n"&gt;user_invoices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;"Date: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Amount: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;amount&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Remarks: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;remarks&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;string&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To fix this, we need to introduce a new format method in the sub class that handles the formatting. After this, the LSP can be satisfied since the sub class is interchangeable with the base class without any side effects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Correct use of the Liskov Substitution Principle in Ruby&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserInvoice&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invoices&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;invoices&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AdminInvoice&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;UserInvoice&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invoices&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;formatted_invoices&lt;/span&gt;
    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
    &lt;span class="n"&gt;invoices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;"Date: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Amount: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;amount&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Remarks: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;remarks&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;string&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-interface-segregation-principle" class="anchor"&gt;
  &lt;/a&gt;
  The Interface Segregation Principle
&lt;/h2&gt;

&lt;p&gt;The ISP says that “Clients shouldn’t depend on methods they don’t use. Several client-specific interfaces are better than one generalized interface.”.&lt;/p&gt;

&lt;p&gt;This principle mainly focuses on segregating a fat base class to different classes. Let’s assume we have an ATM Machine that performs 4 actions - login, withdraw, balance, fill.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Violation of the Interface Segregation Principle in Ruby&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ATMInterface&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Cash withdraw logic&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;balance&lt;/span&gt;
    &lt;span class="c1"&gt;# Account balance logic&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Fill cash (Done by the ATM Custodian)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="vi"&gt;@atm_machine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ATMInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transact&lt;/span&gt;
    &lt;span class="vi"&gt;@atm_machine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;
    &lt;span class="vi"&gt;@atm_machine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@atm_machine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;balance&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Custodian&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="vi"&gt;@atm_machine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ATMInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;
    &lt;span class="vi"&gt;@atm_machine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;
    &lt;span class="vi"&gt;@atm_machine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We have two types of users User &amp;amp; Custodian where the user uses 3 actions (login, withdraw &amp;amp; balance) and the Custodian uses 2 (login &amp;amp; fill).&lt;/p&gt;

&lt;p&gt;We have a single class called ATMInterface that does all the heavy lifting even though the client doesn’t need them (Ex: User doesn’t need to replenish while the Custodian doesn’t need to withdraw/check balance). This of course violates our ISP. Let’s segregate the above fat class into different subclasses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Correct use of the Interface Segregation Principle in Ruby&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ATMInterface&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ATMUserInterface&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ATMInterface&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Cash withdraw logic&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;balance&lt;/span&gt;
    &lt;span class="c1"&gt;# Account balance logic&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ATMCustodianInterface&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ATMInterface&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;replenish&lt;/span&gt;
    &lt;span class="c1"&gt;# Fill cash (Done by the ATM Custodian)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="vi"&gt;@atm_machine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ATMUserInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transact&lt;/span&gt;
    &lt;span class="vi"&gt;@atm_machine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;
    &lt;span class="vi"&gt;@atm_machine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@atm_machine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;balance&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Custodian&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="vi"&gt;@atm_machine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ATMCustodianInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load&lt;/span&gt;
    &lt;span class="vi"&gt;@atm_machine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;
    &lt;span class="vi"&gt;@atm_machine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;replenish&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-dependency-inversion-principle" class="anchor"&gt;
  &lt;/a&gt;
  The Dependency Inversion Principle
&lt;/h2&gt;

&lt;p&gt;“High-level modules shouldn’t depend on low-level modules. Both modules should depend on abstractions. In addition, abstractions shouldn’t depend on details. Details depend on abstractions.”&lt;/p&gt;

&lt;p&gt;That’s too much detail in 4 sentences. Let’s see what it means. According to Uncle Bob, the DIP is the result of strictly following 2 other SOLID principles: Open-Closed &amp;amp; Liskov Substitution Principle. Hence, this will have clearly separate abstractions.&lt;/p&gt;

&lt;p&gt;It should also be readable, extendable, and child classes should be easily replaceable by other instances of a base class without breaking the system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Violation of the Dependency Inversion Principle in Ruby&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_xml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;XmlParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;CsvParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;XmlParser&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# parse xml&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CsvParser&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# parse csv&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The class Parser depends on classes &lt;em&gt;XmlParser&lt;/em&gt; and &lt;em&gt;CsvParser&lt;/em&gt; instead of abstractions, which indicates the violation of the DIP principle since the classes XmlParser and CsvParser may contain the logic that refers to other classes. Thus, we may impact all the related classes when modifying the class Parser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Correct use of the Dependency Inversion Principle in Ruby&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;parser: &lt;/span&gt;&lt;span class="no"&gt;CsvParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;XmlParser&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# parse xml&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CsvParser&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# parse csv&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Remember that there’s no single equation or rule. However, following a predefined set of rules correctly will yield a great design. Writing clean code comes with experience and the principles when used smartly will yield better results which are extendable, maintainable and will make everyone’s life easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-did-i-write-this-post" class="anchor"&gt;
  &lt;/a&gt;
  Why did I write this post?
&lt;/h2&gt;

&lt;p&gt;I’ve planned my career path into different segments. After my Computer Science degree, I set my course to explore, to play around with whatever tech that excites me. From JS to Rust, both Backend &amp;amp; Frontend. Hmm, I’ve explored and can easily pick up anything that excites me, understand and work with it. What’s next? Mastering.&lt;/p&gt;

&lt;p&gt;You can follow me/my journey on &lt;a href="https://twitter.com/SathishCodes"&gt;Twitter&lt;/a&gt;/&lt;a href="https://github.com/thewebdevel"&gt;Github&lt;/a&gt; respectively. Bye!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1R0thEX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.skcript.com/svrmedia/heroes/image3-36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1R0thEX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.skcript.com/svrmedia/heroes/image3-36.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>oop</category>
    </item>
    <item>
      <title>Create your own Heroku with Dokku on DigitalOcean ⚡</title>
      <author>Alejandro Akbal</author>
      <pubDate>Tue, 17 Nov 2020 13:12:17 +0000</pubDate>
      <link>https://dev.to/alejandroakbal/create-your-own-heroku-with-dokku-on-digitalocean-14ef</link>
      <guid>https://dev.to/alejandroakbal/create-your-own-heroku-with-dokku-on-digitalocean-14ef</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;So, you want to have your own infrastructure while having the best commodities to push your code to production, right?&lt;/p&gt;

&lt;p&gt;Then you have found your guide. We will go through every single thing that you will need.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We will set up a server on DigitalOcean, configure your application for usage with Dokku, learn how to push your code directly to production and finalize the guide by adding TLS/SSL to your application.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The best thing? This is all free. (*)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(*) &lt;em&gt;If you are a new user on DigitalOcean and register through a &lt;a href="#requirements-info"&gt;referral link&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#0-before-we-start" class="anchor"&gt;
  &lt;/a&gt;
  0. Before we start
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-dokku" class="anchor"&gt;
  &lt;/a&gt;
  What is Dokku
&lt;/h3&gt;

&lt;p&gt;You might be wondering what Dokku is.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/dokku/dokku"&gt;Dokku&lt;/a&gt; is a docker-powered &lt;strong&gt;Platform-as-a-Service&lt;/strong&gt; (PaaS) that helps you build and manage the lifecycle of applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that it shares many similarities with Heroku, so if you have used Heroku before, this will come to you as familiar. For example, you can &lt;strong&gt;push code to deploy&lt;/strong&gt;, use buildpacks, scale processes, etc&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preface" class="anchor"&gt;
  &lt;/a&gt;
  Preface
&lt;/h3&gt;

&lt;p&gt;For this guide I will be using Windows 10 with the &lt;code&gt;Git Bash&lt;/code&gt; terminal, but everything should be the same on any GNU/Linux system.&lt;/p&gt;

&lt;p&gt;The server will be a DigitalOcean's Ubuntu 20.04 image with Dokku already set up.&lt;/p&gt;

&lt;p&gt;As an example application we will use this &lt;a href="https://github.com/heroku/node-js-getting-started"&gt;NodeJS getting started project&lt;/a&gt; by Heroku.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirements" class="anchor"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A DigitalOcean account&lt;/li&gt;
&lt;li&gt;A Domain&lt;/li&gt;
&lt;li&gt;A Terminal&lt;/li&gt;
&lt;li&gt;A SSH key pair&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#requirements-info" class="anchor"&gt;
  &lt;/a&gt;
  Requirements info
&lt;/h3&gt;

&lt;p&gt;If you don't have a DigitalOcean account, you should create one, its free! And if you use my &lt;a href="https://m.do.co/c/89d935019679"&gt;referral link&lt;/a&gt; you will receive \$100 as credit for free!&lt;/p&gt;

&lt;p&gt;If you don't have a SSH Key pair, then &lt;a href="https://www.digitalocean.com/docs/droplets/how-to/add-ssh-keys/"&gt;follow this tutorial&lt;/a&gt; to learn how to generate and add them to your DigitalOcean account.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-droplet-creation" class="anchor"&gt;
  &lt;/a&gt;
  1. Droplet creation
&lt;/h2&gt;

&lt;p&gt;This might be the easiest step, as DigitalOcean offers a &lt;a href="https://do.co/3nzKhrp"&gt;Ubuntu 20.04 image with Dokku already set up&lt;/a&gt;, just follow that link and create a droplet.&lt;/p&gt;

&lt;p&gt;Then just choose whatever options meet your needs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠ You should choose a Datacenter that is near you or your clients. ⚠&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pw2FTskN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1mdln5aicjyzlguc7yuq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pw2FTskN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1mdln5aicjyzlguc7yuq.PNG" alt="Datacenter Region"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once it's created, go to the "Networking" tab of your new droplet and assign a floating IP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8foQ9vOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8r8zri2yq1lyvs57skak.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8foQ9vOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8r8zri2yq1lyvs57skak.PNG" alt="Floating IP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visit that IP on your browser and you'll find the Dokku set up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eg57gngk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/alo111qcfqd3rbjw0e0m.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eg57gngk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/alo111qcfqd3rbjw0e0m.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just fill the details with your public SSH Key and the domain you will be using. I recommend enabling &lt;code&gt;virtualhost naming&lt;/code&gt;, as its easier and more common than using ports.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: If you had added the public SSH Key to your DigitalOcean before, the &lt;code&gt;Public SSH Key&lt;/code&gt; form should have been filled automagically!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the sake of this guide, I will be using the subdomain &lt;code&gt;dokku&lt;/code&gt; on my own domain, &lt;a href="https://akbal.dev"&gt;akbal.dev&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-domain-management" class="anchor"&gt;
  &lt;/a&gt;
  2. Domain management
&lt;/h2&gt;

&lt;p&gt;My current domain manager is CloudFlare, but you can use any other domain registrar or manager, the instructions should be the same. 😊&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dns-records" class="anchor"&gt;
  &lt;/a&gt;
  DNS records
&lt;/h3&gt;

&lt;p&gt;We have to configure our DNS settings to point to our new droplet's floating IP.&lt;/p&gt;

&lt;p&gt;Start by adding a &lt;strong&gt;&lt;code&gt;A&lt;/code&gt;&lt;/strong&gt; type record with the hostname and floating IP you assigned earlier in the Dokku set up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HWvI1Fsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/af7brirn5r9bv1pwq0i3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HWvI1Fsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/af7brirn5r9bv1pwq0i3.PNG" alt="CloudFlare A record"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should also add a &lt;strong&gt;catch-all&lt;/strong&gt; rule so anything you deploy on a subdomain is automatically forwarded to the droplet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DKhYhdc2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bk71sau6852rtprtkkud.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DKhYhdc2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bk71sau6852rtprtkkud.PNG" alt="CloudFlare A catch-all rule"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you're using CloudFlare and have trouble connecting in the next steps, try to set the DNS record proxy to &lt;code&gt;DNS only&lt;/code&gt; instead of &lt;code&gt;Proxied&lt;/code&gt;, as it seems to cause trouble.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#3-local-configuration" class="anchor"&gt;
  &lt;/a&gt;
  3. Local configuration
&lt;/h2&gt;

&lt;p&gt;Before we start, we should configure some things on our end.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💻 These steps are done on our &lt;strong&gt;local machine&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#add-ssh-key" class="anchor"&gt;
  &lt;/a&gt;
  Add SSH Key
&lt;/h3&gt;

&lt;p&gt;We have to add our Private SSH Key to our local terminal so we can authenticate and connect to the droplet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;ssh-agent &lt;span class="nt"&gt;-s&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="c"&gt;# Start the agent that holds on to our keys&lt;/span&gt;
ssh-add &lt;span class="s1"&gt;'~/path/to/ssh/private.key'&lt;/span&gt; &lt;span class="c"&gt;# Add our private SSH key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;⚠ This is an important step, if you don't add the private SSH key to the terminal, you won't be able to push code to Dokku later!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We should check that the key was added successfully. If the output is empty, the key was &lt;em&gt;not&lt;/em&gt; added.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh-add &lt;span class="nt"&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then lets try to connect to our droplet via SSH as the root user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh root@&amp;lt;domain&amp;gt;

&lt;span class="c"&gt;# E.g.&lt;/span&gt;
ssh root@dokku.akbal.dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Voilà, &lt;strong&gt;we are in&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ptkbbjkb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yf40wqhzhyi0fb7jv3l0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ptkbbjkb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yf40wqhzhyi0fb7jv3l0.PNG" alt="SSH Connection"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-application-set-up" class="anchor"&gt;
  &lt;/a&gt;
  4. Application set up
&lt;/h2&gt;

&lt;p&gt;We will need an application to run on Dokku, don't we?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💻 These steps are done on our &lt;strong&gt;local machine&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#clone-repository" class="anchor"&gt;
  &lt;/a&gt;
  Clone repository
&lt;/h3&gt;

&lt;p&gt;Lets clone the &lt;a href="#preface"&gt;example application&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/heroku/node-js-getting-started.git

&lt;span class="nb"&gt;cd &lt;/span&gt;node-js-getting-started
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Notice that there is a file that you should be familiar with if you have used Heroku before, the &lt;code&gt;Procfile&lt;/code&gt;. We will be talking about it in the next step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-familiar" class="anchor"&gt;
  &lt;/a&gt;
  Getting familiar
&lt;/h3&gt;

&lt;p&gt;Now that we have cloned the repository we can install the dependencies and play with the application if we want to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="c"&gt;# Install dependencies&lt;/span&gt;

npm run start &lt;span class="c"&gt;# Start the application&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now if we visit &lt;code&gt;http://localhost:5000&lt;/code&gt; on our browser we should see the application running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i6MU0lxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hcc5nd1oruamwlslvypq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i6MU0lxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hcc5nd1oruamwlslvypq.png" alt="Heroku's node-js-getting-started project"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-application-configuration" class="anchor"&gt;
  &lt;/a&gt;
  5. Application configuration
&lt;/h2&gt;

&lt;p&gt;We should configure our application so Dokku is able to run it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can &lt;strong&gt;skip this step if you are using the &lt;a href="#preface"&gt;example application&lt;/a&gt;&lt;/strong&gt;, since it already has been configured.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💻 These steps are done on our &lt;strong&gt;local machine&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#buildpacks-trivia" class="anchor"&gt;
  &lt;/a&gt;
  Buildpacks trivia
&lt;/h3&gt;

&lt;p&gt;Dokku uses Heroku's own Buildpacks to build your applications and detect what language it is using.&lt;/p&gt;

&lt;p&gt;In this guide we are using a &lt;a href="#preface"&gt;NodeJS application&lt;/a&gt;, so Dokku will detect and use Heroku's NodeJS Buildpack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devcenter.heroku.com/articles/nodejs-support"&gt;Learn more about the NodeJS buildpack.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#procfile" class="anchor"&gt;
  &lt;/a&gt;
  Procfile
&lt;/h3&gt;

&lt;p&gt;Dokku needs a &lt;code&gt;Procfile&lt;/code&gt; to identify what &lt;code&gt;process types&lt;/code&gt; and commands our application uses, &lt;em&gt;for example&lt;/em&gt;, to start a web server.&lt;/p&gt;

&lt;p&gt;You should create this file if you haven't. A common NodeJS &lt;code&gt;Procfile&lt;/code&gt; looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;web: node index.js

&lt;span class="c"&gt;# Or like this&lt;/span&gt;
web: npm run start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://devcenter.heroku.com/articles/procfile"&gt;Learn more about the &lt;code&gt;Procfile&lt;/code&gt; and &lt;code&gt;process types.&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#node-version" class="anchor"&gt;
  &lt;/a&gt;
  Node version
&lt;/h3&gt;

&lt;p&gt;Dokku will download and use the NodeJS version specified in the &lt;code&gt;engines&lt;/code&gt; section of our &lt;code&gt;package.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"engines"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"12.x"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should add this part, otherwise Dokku will chose a version of NodeJS that might or might not work with your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#further-configuration" class="anchor"&gt;
  &lt;/a&gt;
  Further configuration
&lt;/h3&gt;

&lt;p&gt;You should check out the &lt;a href="https://devcenter.heroku.com/articles/buildpacks"&gt;Buildpack documentation&lt;/a&gt; of the language you're using to further configure things!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-server-configuration" class="anchor"&gt;
  &lt;/a&gt;
  6. Server configuration
&lt;/h2&gt;

&lt;p&gt;Now that we can connect to the droplet and have set up our application, lets configure the server a bit.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🖥 These steps are done on the &lt;strong&gt;Dokku droplet&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#ram-swap" class="anchor"&gt;
  &lt;/a&gt;
  RAM Swap
&lt;/h3&gt;

&lt;p&gt;Chances are that you will be using Dokku on a low memory (&amp;lt;2GB) droplet.&lt;/p&gt;

&lt;p&gt;To fix possible failures due to low memory, we should create a bigger &lt;a href="https://techterms.com/definition/swap_file"&gt;swap file&lt;/a&gt;. Read &lt;a href="http://dokku.viewdocs.io/dokku/getting-started/advanced-installation/#vms-with-less-than-1-gb-of-memory"&gt;this tutorial&lt;/a&gt; to learn how to do so.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#7-server-security" class="anchor"&gt;
  &lt;/a&gt;
  7. Server security
&lt;/h2&gt;

&lt;p&gt;While securing a server is not an easy task, the following instructions will take care of the most common problems.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🖥 These steps are done on the &lt;strong&gt;Dokku droplet&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#root-user" class="anchor"&gt;
  &lt;/a&gt;
  Root user
&lt;/h3&gt;

&lt;p&gt;We have been using the &lt;code&gt;root&lt;/code&gt; user, but it is a &lt;strong&gt;security risk&lt;/strong&gt;. We shouldn't be using it for everything, we should use instead our own user with &lt;code&gt;root&lt;/code&gt; &lt;strong&gt;privileges&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Follow &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-new-sudo-enabled-user-on-ubuntu-20-04-quickstart"&gt;this guide&lt;/a&gt; to learn how to create a new user with sudo privileges.&lt;/p&gt;

&lt;p&gt;Once you have done that, we should copy the Public SSH Key from the &lt;code&gt;root&lt;/code&gt; user to our own user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;user&amp;gt; &lt;span class="c"&gt;# Set the user variable&lt;/span&gt;
&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/.ssh &lt;span class="c"&gt;# Create ssh directory&lt;/span&gt;
&lt;span class="nb"&gt;chmod &lt;/span&gt;700 /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/.ssh &lt;span class="c"&gt;# Apply directory permissions&lt;/span&gt;
&lt;span class="nb"&gt;cp&lt;/span&gt; /root/.ssh/authorized_keys /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/.ssh/authorized_keys &lt;span class="c"&gt;# Copy the ssh authorized key&lt;/span&gt;
&lt;span class="nb"&gt;chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; &lt;span class="nv"&gt;$USER&lt;/span&gt;:&lt;span class="nv"&gt;$USER&lt;/span&gt; /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/.ssh &lt;span class="c"&gt;# Apply user and group permissions&lt;/span&gt;
&lt;span class="nb"&gt;sudo chmod &lt;/span&gt;600 /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/.ssh/authorized_keys &lt;span class="c"&gt;# Apply file permissions&lt;/span&gt;


&lt;span class="c"&gt;# As a one-liner&lt;/span&gt;
&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;user&amp;gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/.ssh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;chmod &lt;/span&gt;700 /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/.ssh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cp&lt;/span&gt; /root/.ssh/authorized_keys /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/.ssh/authorized_keys &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; &lt;span class="nv"&gt;$USER&lt;/span&gt;:&lt;span class="nv"&gt;$USER&lt;/span&gt; /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/.ssh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo chmod &lt;/span&gt;600 /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/.ssh/authorized_keys

&lt;span class="c"&gt;# E.g.&lt;/span&gt;
&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;alejandro&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/.ssh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;chmod &lt;/span&gt;700 /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/.ssh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cp&lt;/span&gt; /root/.ssh/authorized_keys /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/.ssh/authorized_keys &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; &lt;span class="nv"&gt;$USER&lt;/span&gt;:&lt;span class="nv"&gt;$USER&lt;/span&gt; /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/.ssh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo chmod &lt;/span&gt;600 /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now try to reconnect to the droplet with the new user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh &amp;lt;user&amp;gt;@&amp;lt;domain&amp;gt;

&lt;span class="c"&gt;# E.g.&lt;/span&gt;
ssh alejandro@dokku.akbal.dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DEj7xJuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kuyd4gmz0pib1he2r6og.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DEj7xJuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kuyd4gmz0pib1he2r6og.PNG" alt="New user SSH connection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect. It has worked like a charm.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sshd" class="anchor"&gt;
  &lt;/a&gt;
  SSHD
&lt;/h3&gt;

&lt;p&gt;The default droplet configuration allows anyone to log in as the &lt;code&gt;root&lt;/code&gt; user, this should be disabled as it is a security risk.&lt;/p&gt;

&lt;p&gt;Look at the &lt;strong&gt;first step&lt;/strong&gt; of &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-harden-openssh-on-ubuntu-18-04"&gt;this guide&lt;/a&gt; to learn how to configure SSHD and disable &lt;code&gt;root&lt;/code&gt; user login.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#docker-ports" class="anchor"&gt;
  &lt;/a&gt;
  Docker ports
&lt;/h3&gt;

&lt;p&gt;Docker ports are open by the default on the firewall, we should shut them, as it can be a security concern.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw status &lt;span class="c"&gt;# Optional, check the current rules on the firewall&lt;/span&gt;

&lt;span class="c"&gt;# Delete Docker rules&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw delete allow 2375/tcp
&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw delete allow 2376/tcp

&lt;span class="nb"&gt;sudo &lt;/span&gt;ufw status &lt;span class="c"&gt;# Optional, check that Docker's ports are deleted&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;UFW is Ubuntu's firewall manager, &lt;a href="https://wiki.ubuntu.com/UncomplicatedFirewall"&gt;learn more&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fail2ban" class="anchor"&gt;
  &lt;/a&gt;
  Fail2Ban
&lt;/h3&gt;

&lt;p&gt;Fail2Ban is a utility to &lt;strong&gt;protect your server from brute-force and automated attacks&lt;/strong&gt;. It blocks repeated connection attempts and bans them temporarily.&lt;/p&gt;

&lt;p&gt;Here is an &lt;a href="https://linuxize.com/post/install-configure-fail2ban-on-ubuntu-20-04/"&gt;easy guide&lt;/a&gt; on how to install, configure and use it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-dokku" class="anchor"&gt;
  &lt;/a&gt;
  8. Dokku
&lt;/h2&gt;

&lt;p&gt;Now that every step of configuration is complete, we can move to the actually interesting step: &lt;strong&gt;actually using Dokku&lt;/strong&gt;!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🖥 These steps are done on the &lt;strong&gt;Dokku droplet&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#dokku-cli" class="anchor"&gt;
  &lt;/a&gt;
  Dokku CLI
&lt;/h3&gt;

&lt;p&gt;Dokku is used from the terminal, &lt;em&gt;it doesn't have an interface or a web view&lt;/em&gt;, and that is its strong point, as it consumes less resources of your system that your applications will need.&lt;/p&gt;

&lt;p&gt;To start using Dokku just type &lt;code&gt;dokku&lt;/code&gt; on the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dokku
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#common-dokku-commands" class="anchor"&gt;
  &lt;/a&gt;
  Common Dokku commands
&lt;/h3&gt;

&lt;p&gt;These are some commands that you will definitely have to use, so visit the documentation links and get familiar with them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dokku.viewdocs.io/dokku/deployment/application-management/"&gt;Application Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dokku.viewdocs.io/dokku/deployment/process-management/"&gt;Process Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dokku.viewdocs.io/dokku/configuration/domains/"&gt;Domain Configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#app-creation" class="anchor"&gt;
  &lt;/a&gt;
  App creation
&lt;/h3&gt;

&lt;p&gt;First step will be to create an application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dokku apps:create &amp;lt;app&amp;gt;

&lt;span class="c"&gt;# E.g.&lt;/span&gt;
dokku apps:create my-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The app &lt;em&gt;shell&lt;/em&gt; is now created, but empty. Until we push code it won't do anything.&lt;/p&gt;

&lt;p&gt;But before doing so we should configure other aspects, like the domain it is going to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://dokku.viewdocs.io/dokku/deployment/application-management/"&gt;Read more about application management in Dokku.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#domain-configuration" class="anchor"&gt;
  &lt;/a&gt;
  Domain configuration
&lt;/h3&gt;

&lt;p&gt;Lets add a domain so we can access our application easily from our browser once its deployed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dokku domains:add &amp;lt;app&amp;gt; &amp;lt;domain&amp;gt;

&lt;span class="c"&gt;# E.g.&lt;/span&gt;
dokku domains:add my-app my-app.dokku.akbal.dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="http://dokku.viewdocs.io/dokku/configuration/domains/"&gt;Read more about managing domains in Dokku.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#environment-configuration" class="anchor"&gt;
  &lt;/a&gt;
  Environment configuration
&lt;/h3&gt;

&lt;p&gt;If our application uses any environment variables, &lt;em&gt;for example an &lt;code&gt;.env&lt;/code&gt; file&lt;/em&gt;, you should add them through Dokku.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dokku config:set &amp;lt;app&amp;gt; &amp;lt;variables&amp;gt;

&lt;span class="c"&gt;# E.g.&lt;/span&gt;
dokku config:set my-app &lt;span class="nv"&gt;NODE_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production

&lt;span class="c"&gt;# You can add multiple environment variables.&lt;/span&gt;
dokku config:set my-app &lt;span class="nv"&gt;NODE_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production &lt;span class="nv"&gt;SECURITY_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;XXX
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Keep in mind that executing this command will restart the application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="http://dokku.viewdocs.io/dokku/configuration/environment-variables/"&gt;Read more about managing environment variables in Dokku.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploying-code" class="anchor"&gt;
  &lt;/a&gt;
  Deploying code
&lt;/h3&gt;

&lt;p&gt;Now its time for the real deal, we have configured everything on our local machine and on the server, so &lt;strong&gt;lets deploy&lt;/strong&gt;!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💻 These steps are done on our &lt;strong&gt;local machine&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lets add Dokku as a git remote so we can push code to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote add &amp;lt;remote-name&amp;gt; dokku@&amp;lt;remote&amp;gt;:&amp;lt;application&amp;gt;

&lt;span class="c"&gt;# E.g.&lt;/span&gt;
git remote add dokku dokku@dokku.akbal.dev:my-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Only thing left is to push the code, lets try!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push &amp;lt;remote-name&amp;gt; &amp;lt;local-branch&amp;gt;:master

&lt;span class="c"&gt;# E.g.&lt;/span&gt;
git push dokku main

&lt;span class="c"&gt;# Or if your branch is already master&lt;/span&gt;
git push dokku master
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;And that is it!&lt;/strong&gt; Once the code is pushed you should see Dokku detecting and building your application! 🥰&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--00lx2nii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5g8ilnovup6lkgh6tz1d.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--00lx2nii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5g8ilnovup6lkgh6tz1d.PNG" alt="Successful deploy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If this step is giving you trouble, chances are that you might not have added your private SSH Key to your current terminal, learn more in the &lt;em&gt;&lt;a href="#add-ssh-key"&gt;Add SSH Key&lt;/a&gt;&lt;/em&gt; step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once Dokku is done it will output a link to visit your application in your browser, do that!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The website might not work because Dokku forces &lt;a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;HSTS&lt;/a&gt;, and we haven't configured TLS/SSL yet. &lt;a href="http://dokku.viewdocs.io/dokku/configuration/nginx/#hsts-header"&gt;Learn how to disable HSTS.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#tlsssl-configuration" class="anchor"&gt;
  &lt;/a&gt;
  TLS/SSL configuration
&lt;/h3&gt;

&lt;p&gt;We will add the &lt;a href="https://github.com/dokku/dokku-letsencrypt"&gt;lets encrypt plugin&lt;/a&gt; to Dokku so the application will be served with &lt;strong&gt;HTTPS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First add the &lt;code&gt;letsencrypt&lt;/code&gt; plugin to Dokku.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dokku plugin:install https://github.com/dokku/dokku-letsencrypt.git
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then add a &lt;strong&gt;required&lt;/strong&gt; &lt;code&gt;letsencrypt&lt;/code&gt; contact email through environment variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dokku config:set &amp;lt;app&amp;gt; &lt;span class="nv"&gt;DOKKU_LETSENCRYPT_EMAIL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;email&amp;gt;

&lt;span class="c"&gt;# E.g.&lt;/span&gt;
dokku config:set my-app &lt;span class="nv"&gt;DOKKU_LETSENCRYPT_EMAIL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;contact@akbal.dev

&lt;span class="c"&gt;# We can set the contact email globally too, so it works for any application.&lt;/span&gt;
dokku config:set &lt;span class="nt"&gt;--global&lt;/span&gt; &lt;span class="nv"&gt;DOKKU_LETSENCRYPT_EMAIL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;email&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now its time to generate a certificate for our application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dokku letsencrypt &amp;lt;app&amp;gt;

&lt;span class="c"&gt;# E.g.&lt;/span&gt;
dokku letsencrypt my-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It was that easy to add &lt;strong&gt;HTTPS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Check our super secure site!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iYhJ2x9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8rky1dlsnndvvc0i8vxg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iYhJ2x9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8rky1dlsnndvvc0i8vxg.PNG" alt="Application with TLS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/dokku/dokku-letsencrypt"&gt;Read more about configuring the letsencrypt plugin.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scale-processes" class="anchor"&gt;
  &lt;/a&gt;
  Scale processes
&lt;/h3&gt;

&lt;p&gt;Scaling the processes is really easy, you just have to tell Dokku and it will handle everything.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🖥 These steps are done on the &lt;strong&gt;Dokku droplet&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dokku ps:scale &amp;lt;app&amp;gt; &amp;lt;process-type&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;count&amp;gt;

&lt;span class="c"&gt;# E.g.&lt;/span&gt;
dokku ps:scale my-app &lt;span class="nv"&gt;web&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1

&lt;span class="c"&gt;# Even multiple types&lt;/span&gt;
dokku ps:scale my-app &lt;span class="nv"&gt;web&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nv"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="http://dokku.viewdocs.io/dokku/deployment/process-management/#psscale-command"&gt;Read more about scaling processes in Dokku.&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#9-misc" class="anchor"&gt;
  &lt;/a&gt;
  9. Misc
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#further-knowledge" class="anchor"&gt;
  &lt;/a&gt;
  Further knowledge
&lt;/h3&gt;

&lt;p&gt;I encourage you to go to the &lt;a href="http://dokku.viewdocs.io/dokku/"&gt;Dokku documentation&lt;/a&gt; and toy with your &lt;strong&gt;now complete&lt;/strong&gt; Dokku set up. You will learn many great things like &lt;a href="http://dokku.viewdocs.io/dokku/deployment/logs/"&gt;how to read the logs&lt;/a&gt; of your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#troubleshooting" class="anchor"&gt;
  &lt;/a&gt;
  Troubleshooting
&lt;/h3&gt;

&lt;p&gt;
  I need to identify what is going wrong
  &lt;p&gt;Enable &lt;a href="http://dokku.viewdocs.io/dokku/getting-started/troubleshooting/"&gt;Trace Mode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this mode output will be more verbose, helping you locate any error!&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;
  Can't push code to Dokku remote
  &lt;p&gt;This might be because you have not added the private SSH Key to your terminal, try adding it!&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;
  Dokku remote Git branch is ahead of time
  &lt;p&gt;I've been in a situation where I had commited to Dokku and went back locally to an earlier commit, this created many problems when trying to push again, because Dokku's own git repository was &lt;em&gt;in the future&lt;/em&gt;. Thankfully, theres a very easy solution: force push! 💪&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push &lt;span class="nt"&gt;--force&lt;/span&gt; dokku &amp;lt;branch&amp;gt;

&lt;span class="c"&gt;# E.g.&lt;/span&gt;
git push &lt;span class="nt"&gt;--force&lt;/span&gt; dokku main
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
  Agent returned different signature type ssh-rsa (expected rsa-sha2-512) (&lt;em&gt;Windows 10&lt;/em&gt;)
  &lt;p&gt;It seems that the ssh binaries on windows 10 are outdated and the connection is refused by the server, a solution is to use &lt;code&gt;Git Bash&lt;/code&gt; or any other terminal with updated binaries, more on this &lt;a href="https://github.com/PowerShell/Win32-OpenSSH/issues/1263"&gt;issue here&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-end" class="anchor"&gt;
  &lt;/a&gt;
  10. End
&lt;/h2&gt;

&lt;p&gt;I hope you have enjoyed my complete guide and find it useful, It has taken many days to bring you this knowledge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links" class="anchor"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h3&gt;

&lt;p&gt;These are some resources that can be very useful through your Dokku journey.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cheatography.com/jejete/cheat-sheets/dokku/pdf/"&gt;Dokku cheatsheet by jejete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://glider-slackin.herokuapp.com/"&gt;Dokku Slack community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#self-promotion" class="anchor"&gt;
  &lt;/a&gt;
  Self promotion
&lt;/h3&gt;

&lt;p&gt;If you have found this guide useful then you should follow me, I will be posting more interesting content! ♥&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AlejandroAkbal/"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/alejandro-akbal/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/AlejandroAkbal"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/alejandroakbal"&gt;Dev.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@alejandroakbal"&gt;Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#credit" class="anchor"&gt;
  &lt;/a&gt;
  Credit
&lt;/h3&gt;

&lt;p&gt;This guide was made possible thanks to many wonderful people.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linuxize&lt;/li&gt;
&lt;li&gt;DigitalOcean and their community&lt;/li&gt;
&lt;li&gt;AskUbuntu for the &lt;a href="https://askubuntu.com/questions/1218023/copying-ssh-key-from-root-to-another-user-on-same-machine"&gt;troubleshooting help&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>heroku</category>
      <category>docker</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What's your 1st programming language &amp; What you use today?</title>
      <author>OM</author>
      <pubDate>Tue, 17 Nov 2020 12:08:25 +0000</pubDate>
      <link>https://dev.to/ombharatiya/what-s-your-1st-programming-language-what-you-use-today-4d0</link>
      <guid>https://dev.to/ombharatiya/what-s-your-1st-programming-language-what-you-use-today-4d0</guid>
      <description>&lt;p&gt;Hey, Dev folks 👋&lt;/p&gt;

&lt;p&gt;What was the first programming language you learned?&lt;/p&gt;

&lt;p&gt;And what are you using today?&lt;/p&gt;

&lt;p&gt;Let's discuss how far we have come ....&lt;/p&gt;

&lt;p&gt;.&lt;br&gt;
.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/ombharatiya"&gt;Follow - Om Bharatiya on Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
