<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Document an Express API with Swagger UI and JSDoc</title>
      <author>Kate Bartolo</author>
      <pubDate>Sun, 29 Nov 2020 19:01:33 +0000</pubDate>
      <link>https://dev.to/kabartolo/how-to-document-an-express-api-with-swagger-ui-and-jsdoc-50do</link>
      <guid>https://dev.to/kabartolo/how-to-document-an-express-api-with-swagger-ui-and-jsdoc-50do</guid>
      <description>&lt;p&gt;&lt;a href="https://jsdoc.app/"&gt;JSDoc&lt;/a&gt; is a popular tool for generating documentation from comments in the source code of your app. This serves two purposes. First, the documentation is directly available to anyone viewing the source code. Second, the comments can be compiled later into a complete set of reference documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://swagger.io"&gt;Swagger&lt;/a&gt; provides a tool for presenting this documentation: &lt;a href="https://swagger.io/tools/swagger-ui/"&gt;Swagger UI&lt;/a&gt;. Swagger UI creates a web page from &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md"&gt;OpenAPI Specification&lt;/a&gt; definitions. As this tutorial will show, these definitions can be written in YAML directly in JSDoc comments.&lt;/p&gt;

&lt;p&gt;In this tutorial, you will set up a &lt;a href="https://swagger.io/tools/swagger-ui/"&gt;Swagger UI&lt;/a&gt; documentation web page for an Express API. You can then write JSDoc comments in your API's source code to generate the OpenAPI definitions. By the end, you will have documentation that follows the OpenAPI Specification, presented from a custom &lt;code&gt;/docs&lt;/code&gt; endpoint added to your Express API:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lrcd0CIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/slj2ispghsmt2viixbdn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lrcd0CIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/slj2ispghsmt2viixbdn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To complete this tutorial, you'll need&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Familiarity with REST APIs and &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nodejs.dev/learn/how-to-install-nodejs"&gt;Node.js&lt;/a&gt; installed on your system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An &lt;strong&gt;Express-based REST API&lt;/strong&gt; running on a local Express server. If you don't have one, you can install the &lt;a href="https://github.com/kabartolo/jsonplaceholder-express-api"&gt;Express API&lt;/a&gt; used in this tutorial. It retrieves user data from &lt;a href="https://jsonplaceholder.typicode.com/"&gt;JSONPlaceholder&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install and run the sample Express API, first clone the repository (replace &lt;code&gt;test-api&lt;/code&gt; with the directory name of your choosing):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/kabartolo/jsonplaceholder-express-api test-api
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, run the following commands to start the Express server (replace &lt;code&gt;test-api&lt;/code&gt; with the name of the directory you just created):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;test-api
npm &lt;span class="nb"&gt;install
&lt;/span&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Navigate&lt;/strong&gt; to &lt;a href="http://localhost:3000"&gt;&lt;code&gt;localhost:3000&lt;/code&gt;&lt;/a&gt; to see the API. You should see links to &lt;code&gt;/users&lt;/code&gt; and &lt;code&gt;/users/1&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lxALROaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nlqr49528h817w6wd4iv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lxALROaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nlqr49528h817w6wd4iv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Navigate to either of these to see user data from JSONPlaceholder.&lt;/p&gt;

&lt;p&gt;The code added during this tutorial can be found in the repository's &lt;a href="https://github.com/kabartolo/jsonplaceholder-express-api/tree/docs"&gt;&lt;code&gt;docs&lt;/code&gt; branch&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terminology" class="anchor"&gt;
  &lt;/a&gt;
  Terminology
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;OpenAPI&lt;/em&gt; is the name of the specification, while &lt;em&gt;Swagger&lt;/em&gt; is the set of tools that implement this specification. See &lt;a href="https://swagger.io/blog/api-strategy/difference-between-swagger-and-openapi/"&gt;What Is the Difference Between Swagger and OpenAPI?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tutorial uses the following API-related terms and definitions defined by &lt;a href="https://swagger.io/docs/specification/api-host-and-base-path/"&gt;OpenAPI&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    https://api.example.com/v1/users?role=admin&amp;amp;status=active
    \________________________/\____/ \______________________/
             server URL       endpoint    query parameters
                                path
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Server URL or base URL&lt;/strong&gt;: The base URL for all API endpoints: &lt;code&gt;localhost:3000&lt;/code&gt; or &lt;code&gt;example.com/api&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Endpoint path&lt;/strong&gt;: The path representing the location of the resource (relative to the base URL): &lt;code&gt;/users&lt;/code&gt; or &lt;code&gt;/users/1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Operation&lt;/strong&gt;: The HTTP method used to manipulate endpoint paths: GET, POST, PUT, DELETE&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Resource&lt;/strong&gt;: Information representing a real-world object (e.g., a user or book), usually returned by the API as JSON data. Represented by a database &lt;strong&gt;model&lt;/strong&gt; in Express.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full URL used to retrieve data from the API is formed by adding the endpoint to the base URL: &lt;code&gt;localhost:3000/users&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-set-up-the-application" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: Set up the application
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#11-install-raw-swaggerjsdoc-endraw-and-raw-swaggeruiexpress-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  1.1: Install &lt;code&gt;swagger-jsdoc&lt;/code&gt; and &lt;code&gt;swagger-ui-express&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;To create a Swagger UI page from JSDoc comments, you’ll need a way to pass your documentation to Swagger UI:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://github.com/Surnet/swagger-jsdoc"&gt;&lt;code&gt;swagger-jsdoc&lt;/code&gt;&lt;/a&gt;  generates OpenAPI definitions from JSDoc comments.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/scottie1984/swagger-ui-express"&gt;&lt;code&gt;swagger-ui-express&lt;/code&gt;&lt;/a&gt; creates the Swagger UI page from these definitions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install &lt;code&gt;swagger-jsdoc&lt;/code&gt; and &lt;code&gt;swagger-ui-express&lt;/code&gt; to your Express API, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;swagger-jsdoc@5.0.1 &lt;span class="nt"&gt;--save-exact&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;swagger-ui-express &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This tutorial uses &lt;code&gt;swagger-jsdoc&lt;/code&gt; version &lt;code&gt;5.0.1&lt;/code&gt;. The latest version might not be compatible with this tutorial. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#12-create-an-api-specification" class="anchor"&gt;
  &lt;/a&gt;
  1.2: Create an API specification
&lt;/h3&gt;

&lt;p&gt;Swagger UI creates a docs page from a set of OpenAPI definitions. These definitions are written in &lt;a href="https://yaml.org/"&gt;YAML&lt;/a&gt; or &lt;a href="https://json.org"&gt;JSON&lt;/a&gt; to describe a REST API. For more information on the basic structure of the Swagger specification, see &lt;a href="https://swagger.io/docs/specification/basic-structure/"&gt;Basic Structure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In your Express API's &lt;code&gt;app.js&lt;/code&gt; file, add the following code below the list of required modules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerJSDoc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swagger-jsdoc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerDefinition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Express API for JSONPlaceholder&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;swaggerDefinition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Paths to files containing OpenAPI definitions&lt;/span&gt;
  &lt;span class="na"&gt;apis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/*.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerSpec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;swaggerJSDoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;swaggerDefinition&lt;/code&gt; object (i.e., the OpenAPI definition) defines the root information for your API. Provide a few basic pieces of information to the &lt;code&gt;swaggerDefinition&lt;/code&gt;, such as the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; of your API; you can fill in more later.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;options&lt;/code&gt; object contains this &lt;code&gt;swaggerDefinition&lt;/code&gt; object and an array of paths called &lt;code&gt;apis&lt;/code&gt;. These are paths to files containing other OpenAPI definitions. These file paths should be relative to the root directory of your Express API. In our case, definitions will be written in JSDoc directly in the &lt;code&gt;/routes&lt;/code&gt; files. You can list the filenames individually or use the wildcard delimiter &lt;code&gt;*&lt;/code&gt; to add all JavaScript files in a directory, as shown above.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;options&lt;/code&gt; object is used by &lt;code&gt;swagger-jsdoc&lt;/code&gt; to produce an OpenAPI specification in a variable called &lt;code&gt;swaggerSpec&lt;/code&gt;. This specification is equivalent to the &lt;code&gt;swagger.json&lt;/code&gt; or &lt;code&gt;swagger.yaml&lt;/code&gt; file normally used by Swagger UI to create a docs page. You'll pass this object to Swagger UI in the next step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server to ensure there are no errors. If you get any errors at this stage, check that your &lt;code&gt;swagger-jsdoc&lt;/code&gt; version is &lt;code&gt;5.0.1&lt;/code&gt; exactly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-create-the-swagger-ui-docs-page" class="anchor"&gt;
  &lt;/a&gt;
  1.3: Create the Swagger UI docs page
&lt;/h3&gt;

&lt;p&gt;To create a Swagger UI page for your Express API, include &lt;code&gt;swagger-ui-express&lt;/code&gt; in the &lt;code&gt;app.js&lt;/code&gt; file. Then, add an endpoint path called &lt;code&gt;/docs&lt;/code&gt; (or any name of your choosing):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerJSDoc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swagger-jsdoc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerUi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swagger-ui-express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/docs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;swaggerUi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;swaggerUi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;swaggerSpec&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As shown above, &lt;code&gt;swagger-ui-express&lt;/code&gt; provides two callbacks to set up the endpoint: one to &lt;strong&gt;set up&lt;/strong&gt; Swagger UI with the &lt;code&gt;swaggerSpec&lt;/code&gt; definitions and one to &lt;strong&gt;serve&lt;/strong&gt; it to the &lt;code&gt;/docs&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser.&lt;/p&gt;

&lt;p&gt;You'll see the title and version number of your Express API, as well as the OpenAPI version number (&lt;code&gt;3.0.0&lt;/code&gt;). Since we have no other definitions yet, you'll see a "No operations defined in spec!" message:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwQ-_boc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fvsnzhvcj94o3ced81lk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwQ-_boc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fvsnzhvcj94o3ced81lk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You now have the start of a beautiful docs page for your API! The rest of this tutorial provides a basic introduction to OpenAPI definitions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-define-your-apis-root-information" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: Define your API's root information
&lt;/h2&gt;

&lt;p&gt;You've created a Swagger UI docs page, and you're set to start writing docs. But first, you should add more root definitions for the API.&lt;/p&gt;

&lt;p&gt;Return to &lt;code&gt;app.js&lt;/code&gt;. Note that the &lt;code&gt;info&lt;/code&gt; object maps to OpenAPI's &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#infoObject"&gt;Info Object&lt;/a&gt; to define a title, description, list of servers, contact information, and list of paths for your API.&lt;/p&gt;

&lt;p&gt;Here is an example of a more complete definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;swaggerDefinition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Express API for JSONPlaceholder&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is a REST API application made with Express. It retrieves data from JSONPlaceholder.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;license&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Licensed Under MIT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://spdx.org/licenses/MIT.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JSONPlaceholder&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;servers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Development server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have a production server, add the URL and a description to the &lt;code&gt;servers&lt;/code&gt; list. See &lt;a href="https://swagger.io/docs/specification/basic-structure/"&gt;Basic Structure&lt;/a&gt; for more information on the other properties you can add to the root definition.&lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://swagger.io/docs/specification/basic-structure/"&gt;OpenAPI docs&lt;/a&gt;, you'll notice there's also a &lt;code&gt;paths&lt;/code&gt; field. You won't need to specify the path definitions here, since each path is defined separately in a JSDoc comment (to be added in the next step). These path definitions are compiled by &lt;code&gt;swagger-jsdoc&lt;/code&gt; into a &lt;code&gt;paths&lt;/code&gt; object for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. You should see more information about your API at the top of the docs page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02FZ3ozf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9lw2xrss7nz5f0fq1t5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02FZ3ozf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9lw2xrss7nz5f0fq1t5i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now start documenting your Express routes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-write-the-docs" class="anchor"&gt;
  &lt;/a&gt;
  Step 3: Write the docs
&lt;/h2&gt;

&lt;p&gt;With a Swagger UI docs page available at the &lt;code&gt;/docs&lt;/code&gt; endpoint and a complete set of root information on your API, you can start writing your path definitions. Each path definition corresponds to an Express route in your API. It describes both the operation and endpoint path, such as &lt;code&gt;GET /users&lt;/code&gt; and &lt;code&gt;DELETE /users/:id&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-document-the-routes" class="anchor"&gt;
  &lt;/a&gt;
  3.1: Document the routes
&lt;/h3&gt;

&lt;p&gt;To document &lt;code&gt;/routes/users.js&lt;/code&gt;, first  add a comment starting with &lt;code&gt;@swagger&lt;/code&gt; above the first route. Follow this with some basic information about the route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @swagger
 * /users:
 *   get:
 *     summary: Retrieve a list of JSONPlaceholder users
 *     description: Retrieve a list of users from JSONPlaceholder. Can be used to populate a list of fake users when prototyping or testing an API.
*/&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;swagger-jsdoc&lt;/code&gt; looks for comments with a &lt;code&gt;@swagger&lt;/code&gt; or &lt;code&gt;@openapi&lt;/code&gt; tag to create OpenAPI definitions.&lt;/p&gt;

&lt;p&gt;As shown in the code example, add the endpoint path &lt;code&gt;/users&lt;/code&gt; and the operation &lt;code&gt;get&lt;/code&gt; (indented two spaces). The path in the Express router function &lt;code&gt;get('/')&lt;/code&gt; is relative to &lt;code&gt;/users&lt;/code&gt;, so the path in the definition should be &lt;code&gt;/users&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;summary&lt;/code&gt; should be a brief description of the goal of this route. The &lt;code&gt;description&lt;/code&gt; should provide more detail, such as when or why you would want to use the route.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be sure to use two spaces (or four spaces) for indentation, not tabs. Refer to &lt;a href="https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html"&gt;YAML Syntax&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. You should see a listing for &lt;code&gt;GET /users&lt;/code&gt; near the bottom of the page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p0xpdErD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/76tz1fkiserr8dnwe02c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p0xpdErD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/76tz1fkiserr8dnwe02c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-document-responses" class="anchor"&gt;
  &lt;/a&gt;
  3.2: Document responses
&lt;/h3&gt;

&lt;p&gt;Your users will want to know what is returned when this GET request is successful (i.e., with a status code of &lt;code&gt;200&lt;/code&gt;).  To define a successful response, add a &lt;code&gt;responses&lt;/code&gt; object and a response called &lt;code&gt;200&lt;/code&gt; to the path definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @swagger
 * /users:
 *   get:
 *     summary: Retrieve a list of JSONPlaceholder users.
 *     description: Retrieve a list of users from JSONPlaceholder. Can be used to populate a list of fake users when prototyping or testing an API.
 *     responses:
 *       200:
 *         description: A list of users.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       id:
 *                         type: integer
 *                         description: The user ID.
 *                         example: 0
 *                       name:
 *                         type: string
 *                         description: The user's name.
 *                         example: Leanne Graham
 */&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;description&lt;/code&gt; field describes the response or what it returns. The &lt;code&gt;content&lt;/code&gt; field describes the content type (&lt;code&gt;application/json&lt;/code&gt;), and the &lt;code&gt;schema&lt;/code&gt; describes the response object. In our case, JSONPlaceholder returns an object with a &lt;code&gt;data&lt;/code&gt; field, which contains the data you've requested. For this response, &lt;code&gt;data&lt;/code&gt; contains an array of user objects. Add just one or two user properties (e.g., &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;) to avoid cluttering the file for now. &lt;/p&gt;

&lt;p&gt;Add a real example value for each property (e.g., &lt;code&gt;'Leanne Graham'&lt;/code&gt;); otherwise, Swagger UI creates a generic example such as &lt;code&gt;'string'&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Notice how the types are defined in this schema. For example, to define an array, add &lt;code&gt;type: array&lt;/code&gt; and an &lt;code&gt;items&lt;/code&gt; field. Read more about types in the &lt;a href="https://swagger.io/docs/specification/data-models/data-types/"&gt;Data Types&lt;/a&gt; documentation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can also describe &lt;strong&gt;error&lt;/strong&gt; responses this way. See Swagger's &lt;a href="https://swagger.io/docs/specification/describing-responses/"&gt;Describing Responses&lt;/a&gt; documentation for more details on the fields available for describing each response.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. You should see the response, an example value (using the example values you provided for each property), and the schema for the data returned in this response:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SfN6pT3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pyqmavht837zspni1mrx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SfN6pT3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pyqmavht837zspni1mrx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, define the &lt;code&gt;GET /users/:id&lt;/code&gt; path by adding the fields we've covered already (&lt;code&gt;summary&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;responses&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

 &lt;span class="cm"&gt;/**
 * @swagger
 * /users/:id:
 *   get:
 *     summary: Retrieve a single JSONPlaceholder user.
 *     description: Retrieve a single JSONPlaceholder user. Can be used to populate a user profile when prototyping or testing an API.
 *     responses:
 *       200:
 *         description: A single user.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: integer
 *                       description: The user ID.
 *                       example: 0
 *                     name:
 *                       type: string
 *                       description: The user's name.
 *                       example: Leanne Graham
*/&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The path parameter (&lt;code&gt;id&lt;/code&gt;) is added to the endpoint path: &lt;code&gt;/users/:id&lt;/code&gt;. Use a colon (&lt;code&gt;:&lt;/code&gt;) or curly brackets (&lt;code&gt;{}&lt;/code&gt;) to mark a path parameter in the endpoint path.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;data&lt;/code&gt; object in this &lt;code&gt;schema&lt;/code&gt; contains a single user object instead of an array of user objects, but the properties are the same. &lt;/p&gt;

&lt;p&gt;Next, define &lt;code&gt;POST /users&lt;/code&gt; by adding the fields we've covered already (&lt;code&gt;summary&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;responses&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @swagger
 * /users:
 *   post:
 *     summary: Create a JSONPlaceholder user.
 *     responses:
 *       201:
 *         description: Created
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: integer
 *                       description: The user ID.
 *                       example: 0
 *                     name:
 *                       type: string
 *                       description: The user's name.
 *                       example: Leanne Graham
*/&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A successful response in this case would be &lt;code&gt;201&lt;/code&gt;. It returns an object with a &lt;code&gt;data&lt;/code&gt; field containing the new user. &lt;/p&gt;

&lt;p&gt;You can continue adding path definitions for the remaining routes in the same way. We'll do some refactoring in a later step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. You'll now see a listing for &lt;code&gt;GET /users/:id&lt;/code&gt;, &lt;code&gt;POST /users&lt;/code&gt;, and any other path definitions you've added:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HpY8vkmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w2o5mkbodner0r9qdv6v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpY8vkmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w2o5mkbodner0r9qdv6v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#33-document-the-requests" class="anchor"&gt;
  &lt;/a&gt;
  3.3: Document the requests
&lt;/h3&gt;

&lt;p&gt;Request data such as parameters and request bodies can also be documented in your OpenAPI definitions. For example, &lt;code&gt;GET /users/:id&lt;/code&gt; has an &lt;code&gt;id&lt;/code&gt; parameter, which should be documented.&lt;/p&gt;

&lt;p&gt;To document parameters, add a &lt;code&gt;parameters&lt;/code&gt; field to the path definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @swagger
 * /users/:id:
 *   get:
 *     summary: Retrieve a single JSONPlaceholder user.
 *     description: Retrieve a single JSONPlaceholder user. Can be used to populate a user profile when prototyping or testing an API.
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         description: Numeric ID of the user to retrieve.
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         ...
 */&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the definition for this parameter, &lt;code&gt;in&lt;/code&gt; defines the parameter's location (in this case, it's a path parameter because it's part of the path). You can also add a &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;schema&lt;/code&gt; and whether the parameter is &lt;code&gt;required&lt;/code&gt;. See &lt;a href="https://swagger.io/docs/specification/describing-parameters/"&gt;Describing Parameters&lt;/a&gt; for more details. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. You'll see a list of parameters for this route:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZVzgTzY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ooyj0ej96i38ph07mxgx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZVzgTzY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ooyj0ej96i38ph07mxgx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, document the &lt;strong&gt;request body&lt;/strong&gt; for &lt;code&gt;POST /users&lt;/code&gt; to describe the data required to create a new user in the database. To do this, &lt;strong&gt;add&lt;/strong&gt; a &lt;code&gt;requestBody&lt;/code&gt; field to this path definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @swagger
 * /users:
 *   post:
 *     summary: Create a JSONPlaceholder user.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 description: The user's name.
 *                 example: Leanne Graham
 *     responses:
 *       201:
 *         ...
*/&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This adds a request body schema to this path definition. This example shows that &lt;code&gt;name&lt;/code&gt; can be sent in the request body. You can add more properties for new users later. See &lt;a href="https://swagger.io/docs/specification/describing-request-body/"&gt;Describing Request Body&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. You'll see a section called &lt;code&gt;Request body&lt;/code&gt; with the schema you've provided:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SOmi00Ja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5b7ktwvrhuqlcugl7q14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOmi00Ja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5b7ktwvrhuqlcugl7q14.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#34-document-the-resources" class="anchor"&gt;
  &lt;/a&gt;
  3.4: Document the resources
&lt;/h3&gt;

&lt;p&gt;You might have noticed you've repeated the user schema several times in the documentation so far. To avoid this duplication, you can define the user schema in one place and reference it from elsewhere.&lt;/p&gt;

&lt;p&gt;Each model defined by your Express API can be documented separately as a schema definition (or &lt;a href="https://swagger.io/docs/specification/components/"&gt;component&lt;/a&gt;). To do this for the user model, add a &lt;code&gt;User&lt;/code&gt; schema definition to the top of the file, under &lt;code&gt;components/schemas&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       properties:
 *         id:
 *           type: integer
 *           description: The user ID.
 *           example: 0
 *         name:
 *           type: string
 *           description: The user's name.
 *           example: Leanne Graham
 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can then reference this schema definition using &lt;code&gt;$ref&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/users.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @swagger
 * /users:
 *   get:
 *     summary: Retrieve a list of JSONPlaceholder users
 *     description: Retrieve a list of users from JSONPlaceholder. Can be used to populate a list of fake users when prototyping or testing an API.
 *     responses:
 *       200:
 *         description: A list of users.
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/User'
 */&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;$ref&lt;/code&gt; path uses &lt;a href="https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03"&gt;JSON Reference&lt;/a&gt; notation. The &lt;code&gt;#&lt;/code&gt; symbol indicates the root of the current document, and the remaining nested values are then resolved in order. For more information, see &lt;a href="https://swagger.io/docs/specification/using-ref/"&gt;Using $ref&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. Your path definitions will now use this &lt;code&gt;User&lt;/code&gt; schema, and you should see a schema definition for &lt;code&gt;User&lt;/code&gt; at the bottom of the page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJhY97Av--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7cdcc3ad8wzz57aufx97.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJhY97Av--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7cdcc3ad8wzz57aufx97.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly, you can define a &lt;code&gt;NewUser&lt;/code&gt; object to reference in the &lt;code&gt;POST /users&lt;/code&gt; request body. Since it contains some but not all of the fields from the &lt;code&gt;User&lt;/code&gt; schema, you can also use &lt;code&gt;$ref&lt;/code&gt; to avoid duplication between them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @swagger
 * components:
 *   schemas:
 *     NewUser:
 *       type: object
 *       properties:
 *         name:
 *           type: string
 *           description: The user's name.
 *           example: Leanne Graham
 *     User:
 *       allOf:
 *         - type: object
 *           properties:
 *             id:
 *               type: integer
 *               description: The user ID.
 *               example: 0
 *         - $ref: '#/components/schemas/NewUser'
 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;allOf&lt;/code&gt; keyword combines model definitions, in this case the &lt;code&gt;NewUser&lt;/code&gt; definition (containing the &lt;code&gt;name&lt;/code&gt; property) and an object with an &lt;code&gt;id&lt;/code&gt; property. See &lt;a href="https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/"&gt;oneOf, anyOf, allOf, not&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;You can now reference &lt;code&gt;NewUser&lt;/code&gt; from the request body definition for &lt;code&gt;POST /users&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @swagger
 * /users:
 *   post:
 *     summary: Create a JSONPlaceholder user.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/NewUser'
 *     responses:
 *       201:
 *         ...
*/&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Restart&lt;/strong&gt; the Express server, and &lt;strong&gt;navigate&lt;/strong&gt; again to &lt;a href="http://localhost:3000/docs"&gt;&lt;code&gt;localhost:3000/docs&lt;/code&gt;&lt;/a&gt; in the browser. You'll see your &lt;code&gt;NewUser&lt;/code&gt; schema in the request body definition for &lt;code&gt;POST /users&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PDwtHfcd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/glkw439i08pi4bk00bak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PDwtHfcd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/glkw439i08pi4bk00bak.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This covers the basic techniques for producing OpenAPI definitions in JSDoc comments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You are now set up to produce a complete reference documentation page for your Express API. You've created a basic set of OpenAPI definitions and a Swagger UI page that displays them. If you want more practice with the OpenAPI Specification, you can finish documenting the &lt;code&gt;jsonplaceholder-express-api&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This tutorial has also covered the basics of writing OpenAPI definitions. To complete your documentation, consult the &lt;a href="https://swagger.io/specification/"&gt;OpenAPI Specification&lt;/a&gt; and the &lt;a href="https://swagger.io/docs/specification/about/"&gt;Swagger Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To see a version of the &lt;code&gt;jsonplaceholder-express-api&lt;/code&gt; that includes all the code added during this tutorial, see the repository's &lt;a href="https://github.com/kabartolo/jsonplaceholder-express-api/tree/docs"&gt;&lt;code&gt;docs&lt;/code&gt; branch&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>api</category>
      <category>docs</category>
    </item>
    <item>
      <title>Building custom HTML elements with web components</title>
      <author>Marcus Stamström</author>
      <pubDate>Sun, 29 Nov 2020 18:38:11 +0000</pubDate>
      <link>https://dev.to/mstamstrom/building-custom-html-elements-with-web-components-4lb</link>
      <guid>https://dev.to/mstamstrom/building-custom-html-elements-with-web-components-4lb</guid>
      <description>&lt;h3&gt;
  &lt;a href="#imagine-building-reusable-encapsulated-html-elements-without-any-framework-with-web-components-we-can-certainly-create-it" class="anchor"&gt;
  &lt;/a&gt;
  Imagine building reusable, encapsulated HTML elements, without any framework! With web components, we can certainly create it!
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#what-are-web-components" class="anchor"&gt;
  &lt;/a&gt;
  What are Web components?
&lt;/h2&gt;

&lt;p&gt;Web components are a set of web platform APIs that allows to create custom, reusable and encapsulated HTML elements that can be used in any document or web app. Web components consist of 3 different technologies.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Custom elements&lt;/strong&gt;, a set of Javascript APIs that permits to create custom HTML elements and define their behavior.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Shadow DOM&lt;/strong&gt;, is used to encapsulate javascript and styling to specific components.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTML templates&lt;/strong&gt;, is used to declare markup that goes unused at page load, but it can be instantiated later at runtime.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#custom-elements" class="anchor"&gt;
  &lt;/a&gt;
  Custom elements
&lt;/h2&gt;

&lt;p&gt;Custom elements are the foundation of web components. With the &lt;code&gt;CustomElemets&lt;/code&gt; API, we are creating new HTML elements based on desired behavior and logic. &lt;/p&gt;

&lt;p&gt;Constructing a custom element is similar to construct a component in Vue, React or insert-flavor-of-the-week framework, but without the need for a framework. These custom elements can be used in any document, both directly in HTML or in web applications. Another advantage of using web components, since these custom elements are supported by browsers, is that they don't become obsolete (in contrast to SPA framework).&lt;/p&gt;

&lt;p&gt;In order to build a custom element, a javascript class is necessary to extend &lt;code&gt;HTMLElement&lt;/code&gt; and define the class with a tag name. A fundamental version of a custom element:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marcusalfredsson/embed/WNxqEGB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Despite the fact that this example isn't advanced, it allows being used as a starting block. The example illustrates that the javascript class extends &lt;code&gt;HTMLElement&lt;/code&gt; allowing the component to be registered by the browser. It's important to define the custom HTML element with a tag in order to use it from the document. Defining a tag is achieved with &lt;code&gt;customElements.define('hello-world', HelloWorld)&lt;/code&gt;. After fulfilling these steps, we have built a custom element, ready to be used in any document by simply writing &lt;code&gt;&amp;lt;hello-world&amp;gt;&amp;lt;/hello-world&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, extending &lt;code&gt;HTMLElement&lt;/code&gt; allows access to the API used by HTML elements, for example, lifecycle events. In the exposed case, lifecycle event &lt;code&gt;connectedCallback&lt;/code&gt; is executed when the component is inserted into the DOM. &lt;code&gt;connectedCallback&lt;/code&gt; is the right location for adding initial content to elements or fetching data to be rendered in a component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: A custom element always has a dash in the tag name, for example &lt;code&gt;my-component&lt;/code&gt;, &lt;code&gt;hello-world&lt;/code&gt; or &lt;code&gt;whats-up&lt;/code&gt;. Browser vendors have bound not to use dashes in HTML tags, to avoid conflicts in tag name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-template" class="anchor"&gt;
  &lt;/a&gt;
  HTML template
&lt;/h2&gt;

&lt;p&gt;With HTML templates, we define HTML that will be instantiated later at runtime.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello world&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The code snippet above renders an empty page as a result of the template's content aren't displayed in the browser. With this powerful technique, we can define and store HTML in the DOM and display the content when desired. To display the content of a template we need to use javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Start with fetching the template from the DOM, next copy the template to the &lt;code&gt;node&lt;/code&gt; variable using &lt;code&gt;importNode&lt;/code&gt; and at the end insert the newly created &lt;code&gt;node&lt;/code&gt; into the DOM. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;importNode&lt;/code&gt; copies the template's content and in consequence it can be reused in several places for a document. After being executed, the DOM is similar to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello world&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello world&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A great aspect about templates is the possibility to include any HTML, style or scripts. As a result templates are a good location for styling our component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"counter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Click me&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"times"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#shadow-dom" class="anchor"&gt;
  &lt;/a&gt;
  Shadow DOM
&lt;/h2&gt;

&lt;p&gt;The DOM (Document Object Model) represents the structure of the HTML document. The DOM has a tree structure that models a document with a parent-children relationship.&lt;/p&gt;

&lt;p&gt;The DOM API has absent support for encapsulation. This characteristic makes it difficult to create reusable, encapsulated custom elements.&lt;/p&gt;

&lt;p&gt;Encapsulation is however possible in the shadow DOM and is accessible to use javascript and styling to custom elements. When creating a shadow DOM, a subtree is attached to one DOM element. The newly created shadow DOM subtree is encapsulated from the rest of the document and our shadow DOM subtree cannot affect the residual part of the document.&lt;/p&gt;

&lt;p&gt;Aside from encapsulation, the API for the DOM and the shadow DOM work similarly. Furthermore functions like &lt;code&gt;querySelector&lt;/code&gt;, &lt;code&gt;textContent&lt;/code&gt;, &lt;code&gt;getElementById&lt;/code&gt; etc. from the API can still be used.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marcusalfredsson/embed/YzWobNg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This exemplifies how shadow DOM is attached to the root of a custom element with &lt;code&gt;this.attachShadow({mode: 'open'})&lt;/code&gt;. Now the generated shadow DOM will encapsulate javascript, HTML and styling inside the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"counter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Click me&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"times"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;my-counter&amp;gt;&lt;/span&gt;
  #shadow-root
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Click me&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"times"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/my-counter&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After we render our component the final result of the DOM is outlined as in the present example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Without using any SPA framework, we are able to create encapsulated, reusable web components that are a great benefit to worldwide users. &lt;/p&gt;

&lt;p&gt;Considering that web development becomes increasingly complex, it's reasonable to invest more development in the web platform. From this perspective, I believe web components are a great complement to SPA frameworks such as Vue and React. They don't substitute each other, but it's very suitable to build these custom HTML elements without any framework.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>webcomponents</category>
      <category>javascript</category>
    </item>
    <item>
      <title>DIY Christmas Radio</title>
      <author>Laura Vuorenoja</author>
      <pubDate>Sun, 29 Nov 2020 17:32:30 +0000</pubDate>
      <link>https://dev.to/levelupkoodarit/diy-christmas-radio-31k4</link>
      <guid>https://dev.to/levelupkoodarit/diy-christmas-radio-31k4</guid>
      <description>&lt;p&gt;Many people who are starting their programming journey often wonder where to get the ideas for their side projects. My advice is that work with a topic you are passionate about. For example, if you love cooking, make yourself a cookbook service or perhaps a digital egg timer. Or if you like to wander in nature, code an app that tracks your routes or helps you to identify which bird is singing. You will have an extra motivational boost when solving the problem will benefit you also otherwise.&lt;/p&gt;

&lt;p&gt;"The thing" for me has always been music, so most of my side projects have been related to music in a way or another. One of my favorite apps is Spotify and luckily for me, they have published excellent APIs that one can utilize versatilely in their projects.&lt;/p&gt;




&lt;p&gt;So it is no surprise that my latest project is also built on Spotify API. As Christmas is getting closer, my daily listening queue is filled with Christmas tunes. However, I tend to listen to the same songs every Christmas. This year I decided to find some new favorites.&lt;/p&gt;

&lt;p&gt;We have an excellent internet radio for Christmas songs in Finland called &lt;a href="https://www.jouluradio.fi/"&gt;Jouluradio&lt;/a&gt;. The only problem when listening to Jouluradio is if you like some new song you hear, saving it for later listening is quite cumbersome. You need to find the track information from the Jouluradio web page and manually search the track from Spotify.&lt;/p&gt;

&lt;p&gt;Fortunately, Jouluradio publishes its playlist of the last 20 songs on the service web page. I decided to make "a radio app" that grabs this information. If the tracks are found in Spotify, they are added to my personal Christmas radio playlist and when playing it I can easily save the ones I like for later listening.&lt;/p&gt;




&lt;p&gt;My radio app, named &lt;a href="https://github.com/lauravuo/kaneli"&gt;Kaneli&lt;/a&gt; (cinnamon in Finnish) is a command-line program written in Golang. The trickiest part of the project was to implement the user OAuth 2.0 authentication to Spotify that I wrote about in &lt;a href="https://dev.to/lauravuo/how-to-oauth-from-the-command-line-47j0"&gt;my last week's post&lt;/a&gt;. The user authentication and authorization part is required for the app to have permission to add tracks to the user-owned Spotify playlist.&lt;/p&gt;

&lt;p&gt;Otherwise, the program is mainly about fetching and posting JSON to various endpoints.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Af0ZhmXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6a9xgtdzt7newf9kf0ya.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Af0ZhmXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6a9xgtdzt7newf9kf0ya.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;API providers and app interaction flow&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;When the songs' information is acquired from Jouluradio, the app searches from Spotify if the track is found there. The Spotify &lt;a href="https://developer.spotify.com/documentation/web-api/reference/search/search/"&gt;search API endpoint&lt;/a&gt; provides handy tools for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;track&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PageLastPlayed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RecentlyPlayed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Songs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryEscape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"artist:%s track:%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Artist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Song&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="c"&gt;// search for song by artist and title&lt;/span&gt;
  &lt;span class="n"&gt;trackResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trackErr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;doGetRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://api.spotify.com/v1/search?type=track&amp;amp;q=%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bearerHeader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;trackErr&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unable to fetch track data %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;trackData&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;SpotifyResponse&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trackResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;trackData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unable to parse track data %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c"&gt;// just pick the first found track&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trackData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tracks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;trackData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tracks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Add track %s: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Artist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Song&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;songIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;songIds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;removeIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;removeIds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;SpotifyRemoveItem&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The search query is done for each track using the artist and song title information. If the search returns results, the first found result id is saved for later use.&lt;/p&gt;




&lt;p&gt;When the looping is done, it's time to add the results to the user's playlist. For this Spotify provides &lt;a href="https://developer.spotify.com/documentation/web-api/reference/playlists/add-tracks-to-playlist/"&gt;a playlist API endpoint&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this phase, I had one problem though: how to prevent the program from adding duplicate tracks. First I tried to find an API that would allow me to search if the playlist contains the specific track already. But luckily, there didn't exist this kind of API. Instead, I figured out a more efficient way of avoiding the duplicates: before adding the items, the program would make a delete request for the tracks that are about to be added.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;apiPath&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://api.spotify.com/v1/playlists/%s/tracks"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;playlistID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// first delete all tracks with similar id to avoid duplicates&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;doJSONRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apiPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodDelete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;SpotifyPlaylistDelete&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Tracks&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;removeIds&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;bearerHeader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// then add all tracks to the start of the list&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;doJSONRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apiPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodPost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;SpotifyPlaylistModify&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;URIs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;songIds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;bearerHeader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Both the delete and the add request are done by utilizing batches, so it is more efficient than removing or adding the tracks one-by-one.&lt;/p&gt;




&lt;p&gt;The codes can be found in &lt;a href="https://github.com/lauravuo/kaneli"&gt;GitHub&lt;/a&gt; if you want to take a closer look. To run the app, you need to register your application in &lt;a href="https://developer.spotify.com/dashboard/"&gt;the Spotify developer dashboard&lt;/a&gt; and check the further instructions in the repository README.&lt;/p&gt;

&lt;p&gt;The current version of the app loops through a couple of different radios dedicated to specific genres and adds the tracks to the user-defined playlist. So far I have been running the program manually at random times but I guess it would be possible to create &lt;a href="https://en.wikipedia.org/wiki/Cron"&gt;a cron job&lt;/a&gt; for it to run e.g. once per hour. That is if one would like a really extensive radio list 😄&lt;/p&gt;

&lt;p&gt;You can find my Christmas radio &lt;a href="https://open.spotify.com/playlist/5x5mdsVit4ngNyvglqkO8f?si=Qu24MltlRmKBWFoLP_xN0A"&gt;on Spotify&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Cover photo by &lt;a href="https://unsplash.com/@markusspiske?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Markus Spiske&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fm-radio?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>spotify</category>
      <category>sideprojects</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Terminal (zsh): Increase Productivity by Creating Aliases &amp; Functions</title>
      <author>Anthony DiPietrantonio</author>
      <pubDate>Sun, 29 Nov 2020 17:02:36 +0000</pubDate>
      <link>https://dev.to/antdp425/terminal-zsh-increase-productivity-by-creating-aliases-functions-5b38</link>
      <guid>https://dev.to/antdp425/terminal-zsh-increase-productivity-by-creating-aliases-functions-5b38</guid>
      <description>&lt;p&gt;&lt;em&gt;This tutorial will cover how to create aliases and functions in your zprofile file to increase your productivity in the terminal. It assumes that you are on MacOS, using zsh as your shell, and are editing the zprofile file with VS Code. If you are using bash, you can do the same by following this &lt;a href="https://medium.com/better-programming/boost-your-productivity-with-aliases-and-functions-88eaf0fa0fb4"&gt;article&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/g0jlOqo7AJ0FmaHSFZ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/g0jlOqo7AJ0FmaHSFZ/giphy.gif" alt="https://media.giphy.com/media/g0jlOqo7AJ0FmaHSFZ/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why use Aliases and Functions?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a developer, you'll likely spend a good amount of time in Terminal doing the same things over and over again — things like cd-ing into/ accessing a folder (ex: a "Projects" folder) or running some kind of command (ex: git add, git commit -m, git push, etc). While it may not seem like much these repetitive tasks slowly begin to eat away at your precious time. Making use of aliases and functions can help us solve this "problem".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Access Your zprofie&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open Terminal and enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;code ./.zprofile
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once doing so, your VS Code should open your zprofile, where you'll see some ENV variables, aliases, and even functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aliases&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TVlNTcuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/en/thumb/1/1c/Alias-logo.png/250px-Alias-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TVlNTcuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/en/thumb/1/1c/Alias-logo.png/250px-Alias-logo.png" alt="https://upload.wikimedia.org/wikipedia/en/thumb/1/1c/Alias-logo.png/250px-Alias-logo.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can think of aliases as a text shortcut for some of your most common commands — like git add, git push, and git commit. &lt;/p&gt;

&lt;p&gt;To create aliases for these three commands specifically, we would add something like this to our zprofile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ga&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git add."&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git push"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git commit"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Remember, all we are doing here is creating a text shortcut, so that next time we enter Terminal, instead of typing out "git add .", "git push", or "git commit", we can simply type "ga", "gp", or "gc".&lt;/p&gt;

&lt;p&gt;As an additional example, another handy use case for an alias is for when you are deploying a site to Netlify with the &lt;a href="https://docs.netlify.com/cli/get-started/"&gt;Netlify CLI&lt;/a&gt;. Typically, you would need to type "netlify deploy" or "netlify deploy —prod", but now that we know what aliases are and how to create them, we can simply add the following to our zprofile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;nd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"netlify deploy"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ndp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"netlify deploy --prod"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Doing so allows us to simply type "nd" or "ndp" instead of "netlify deploy" or "netlify deploy —prod".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IhytMv3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thumbs.dreamstime.com/b/functions-message-word-wooden-desk-cube-blocks-software-development-functions-message-word-wooden-desk-cube-187107835.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IhytMv3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thumbs.dreamstime.com/b/functions-message-word-wooden-desk-cube-blocks-software-development-functions-message-word-wooden-desk-cube-187107835.jpg" alt="https://thumbs.dreamstime.com/b/functions-message-word-wooden-desk-cube-blocks-software-development-functions-message-word-wooden-desk-cube-187107835.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Functions allow us to perform more involved actions from the terminal — like cd-ing into a folder or opening certain browser tabs. These are just simple examples, but with the ability to &lt;a href="http://zsh.sourceforge.net/Guide/zshguide03.html"&gt;make use of conditionals, for loops, and more&lt;/a&gt;, you can imagine that this is just the tip of the iceberg in terms of what can be done with functions.&lt;/p&gt;

&lt;p&gt;To create a function, we simply need to use the function keyword + whatever we want to call our function + curly braces + the terminal commands you want to run.&lt;/p&gt;

&lt;p&gt;Here's how the functions I mentioned above would look within my zprofile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function &lt;/span&gt;projects &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; /Users/&lt;span class="nv"&gt;$USER&lt;/span&gt;/Desktop/Projects
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;job-search &lt;span class="o"&gt;{&lt;/span&gt;
  open https://www.linkedin.com
  open https://indeed.com
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;My projects function makes use of the USER variable that defaults to my MacOS username. Now when I type "projects" in terminal, it will simply bring me to that folder — no need to type the entire path like I would have had to do in the past. &lt;/p&gt;

&lt;p&gt;For my job-search function, we are making use of &lt;em&gt;open&lt;/em&gt; which will open a browser tab in my default browser. So in this function, when I type "job-search" in terminal, it will open two browser tabs — one for Linkedin and one for Indeed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/iEs4yXq5rVlL2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/iEs4yXq5rVlL2/giphy.gif" alt="https://media.giphy.com/media/iEs4yXq5rVlL2/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding your aliases and/or functions in your zprofile — just remember to save the file, then once you open a new Terminal window, you'll be able to make use of them.&lt;/p&gt;

&lt;p&gt;Here are some additional resources that may be useful when working with zsh and your zprofile:&lt;br&gt;
&lt;a href="https://blog.lftechnology.com/command-line-productivity-with-zsh-aliases-28b7cebfdff9"&gt;Command Line Productivity with ZSH Aliases&lt;/a&gt;&lt;br&gt;
&lt;a href="https://scriptingosx.com/2019/06/moving-to-zsh/"&gt;Moving to zsh (series)&lt;/a&gt;&lt;br&gt;
&lt;a href="http://zsh.sourceforge.net/Intro/intro_toc.html"&gt;An Introduction to the Z Shell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to reach out on any of my socials for questions, feedback, or just to connect / say hello 👋.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>productivity</category>
      <category>zsh</category>
    </item>
    <item>
      <title>Creating Postman Environment</title>
      <author>Automation Bro</author>
      <pubDate>Sun, 29 Nov 2020 15:35:50 +0000</pubDate>
      <link>https://dev.to/automationbro/creating-postman-environment-3pnp</link>
      <guid>https://dev.to/automationbro/creating-postman-environment-3pnp</guid>
      <description>&lt;p&gt;In this post, we will be creating a Postman environment and take a look at how to work with multiple Postman Environments.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-a-postman-environment" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is a Postman Environment?&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;An environment in Postman is kind of like a virtual space where you can store a set of variables. Every time you switch from one environment to another, your environment variables will get updated in your requests on the fly.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-and-managing-environment" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creating and Managing Environment&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;In Postman, you can create and manage multiple environments and store variables specific to that environment. A common example of that would be creating a baseUrl environment variable which will be switched based on the environment you are in (ex: test, prod, etc…)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ig71Czva--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hcvahda1olklk48dsuvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ig71Czva--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hcvahda1olklk48dsuvw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#check-out-the-video-below-to-learn-more-about-postman-environments" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Check out the video below to learn more about Postman Environments&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6pniHdiOlSo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#to-learn-about-api-test-automation-using-javascript-check-out-my-free-tutorial-series-here-" class="anchor"&gt;
  &lt;/a&gt;
  To learn about API Test Automation using JavaScript, check out my free tutorial series here –
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ZSVw3TyZur4&amp;amp;list=PL6AdzyjjD5HDR2kNRU2dA1C8ydXRAaaBV"&gt;JavaScript API Test Automation Tutorial Series&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I hope this video helped you out, let me know if you have any questions in the comments below!&lt;/p&gt;

&lt;p&gt;Happy testing! &lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;📧 Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this &lt;br&gt;
👍 Follow &lt;a class="comment-mentioned-user" href="https://dev.to/automationbro"&gt;@automationbro&lt;/a&gt;
 on Twitter for the latest updates&lt;/p&gt;

</description>
      <category>postman</category>
      <category>testing</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Setup TypeScript Playground on your local system</title>
      <author>Ashutosh Dwivedi</author>
      <pubDate>Sun, 29 Nov 2020 15:24:00 +0000</pubDate>
      <link>https://dev.to/ashutosh00710/setup-typescript-playground-on-your-local-system-4hd8</link>
      <guid>https://dev.to/ashutosh00710/setup-typescript-playground-on-your-local-system-4hd8</guid>
      <description>&lt;p&gt;You can setup a really nice TypeScript playground in just 3 simple and easy to follow steps.&lt;br&gt;
But,&lt;br&gt;
Before following the steps it is assumed that you already have &lt;a href="https://www.npmjs.com/get-npm"&gt;npm&lt;/a&gt; setup in your local machine.&lt;/p&gt;

&lt;p&gt;So, jump in and let's get it started.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h3&gt;

&lt;p&gt;If you don't have &lt;a href="https://www.tutorialspoint.com/typescript/typescript_overview.htm#:~:text=The%20TypeScript%20Compiler%20%E2%88%92%20The%20TypeScript,that%20are%20editor%2Dlike%20applications."&gt;TypeScript Compiler&lt;/a&gt; installed in your local machine you can download in just one command on your terminal (or command prompt). That is,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;                    &amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After installation check, if it is installed correctly or not by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;                             &amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tsc &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;(In case you are facing any error just google it or comment below)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;After having TypeScript Compiler in your local machine. &lt;/p&gt;

&lt;p&gt;Open up the terminal (or command prompt) and install, &lt;a href="https://github.com/remy/nodemon"&gt;nodemon&lt;/a&gt; and &lt;a href="https://github.com/TypeStrong/ts-node"&gt;ts-node&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;                 &amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; nodemon ts-node
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;nodemon:&lt;/strong&gt; &lt;em&gt;nodemon is a tool that helps develop node.js based applications by automatically restarting the node application when file changes in the directory are detected&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ts-node:&lt;/strong&gt; &lt;em&gt;TypeScript execution and REPL for node.js, with source map support. Works with &lt;code&gt;typescript@&amp;gt;=2.7&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3" class="anchor"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h3&gt;

&lt;p&gt;Last step:&lt;br&gt;
Create a directory inside which you want to play with TypeScript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a file inside the created directory with extension &lt;code&gt;.ts&lt;/code&gt; and write some pseudo code, like
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Save the file and open up the terminal (inside the created folder, for example: C:\Users\TS_Playground&amp;gt; )&lt;br&gt;
And run,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;             C:\Users\TS_Playground&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;nodemon sample.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And the script will run as long as you want. If you want to terminate the process just press &lt;code&gt;Ctrl+C&lt;/code&gt; in terminal or command prompt.&lt;/p&gt;

&lt;p&gt;So, go -&amp;gt; code -&amp;gt; make changes -&amp;gt; save and see the result in the console.&lt;/p&gt;

&lt;p&gt;That's it.&lt;/p&gt;

&lt;p&gt;Happy Coding 🙂.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Lazy-Load Your React App🥱</title>
      <author>Olumide</author>
      <pubDate>Sun, 29 Nov 2020 15:05:44 +0000</pubDate>
      <link>https://dev.to/shittu_olumide_/how-to-lazy-load-your-react-app-5d5i</link>
      <guid>https://dev.to/shittu_olumide_/how-to-lazy-load-your-react-app-5d5i</guid>
      <description>&lt;p&gt;In this article we are going to discuss how we can improve the performance of our apps by loading only the JavaScript that the user needs at any point in time, reducing the amount of code they have to download and execute on page load, and making the app interactive faster.😎 Cool Isn't it?&lt;/p&gt;

&lt;p&gt;We’ll use React.lazy and Suspense to delay the loading of a complex component like KendoReact’s StockChart until a button is clicked.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-dynamic-imports" class="anchor"&gt;
  &lt;/a&gt;
  Understanding Dynamic Imports
&lt;/h2&gt;

&lt;p&gt;Instead of sending a big bundle with all the code for our app on initial page load, we can send smaller bundles gradually as the user interacts with the app. To do this we’ll rely on a modern JavaScript feature called dynamic imports. A dynamic import returns a promise that will resolve once the required module gets transferred over the network, and is parsed and executed by the JavaScript engine.&lt;/p&gt;

&lt;p&gt;A static import looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { concat } from "./utils";

console.log(concat("A", "B", "C"));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;While a dynamic import looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import("./utils").then(utils =&amp;gt; {
  console.log(utils.concat("A", "B", "C"));
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Tools like Create React App and webpack understand what we’re trying to do with these dynamic imports, and will output separate JavaScript files for these lazy-loaded bundles. If we’re configuring webpack ourselves, it may be a good idea to spend some time reading webpack’s documentation on code-splitting&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lazyloading-with-reactlazy-and-suspense" class="anchor"&gt;
  &lt;/a&gt;
  Lazy-Loading with React.lazy and Suspense
&lt;/h2&gt;

&lt;p&gt;Starting with version 16.6, React includes a built-in React.lazy function that makes it very easy to split an application into lazy-loaded components using dynamic imports.&lt;/p&gt;

&lt;p&gt;You can turn this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import StockChartContainer from "./StockChartContainer";
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Into this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const StockChartContainer = lazy(() =&amp;gt; import("./StockChartContainer"));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And React will automatically load the bundle containing our StockChartContainer component when we try to render it for the first time.&lt;/p&gt;

&lt;p&gt;We’ll want to wrap this lazy component inside a Suspense component, which will allow us to show some fallback content while things are being loaded. Let’s see what that looks like.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;In this example we are going to be loading a complex component containing KendoReact’s StockChart, but only after the user clicks on a button. This way we’ll avoid sending the user more code than they need on initial load.&lt;/p&gt;

&lt;p&gt;We’ll store state to track whether our complex component needs to be displayed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class App extends Component {
  constructor(props) {
    super(props);

    this.state = {
      showChart: false
    };
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, we’ll implement a handleClick function that will toggle state when the user clicks a button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class App extends Component {
  // ...

  handleClick = () =&amp;gt; {
    this.setState(prevState =&amp;gt; ({
      showChart: !prevState.showChart
    }));
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we just need to put it all together in the render method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const StockChartContainer = lazy(() =&amp;gt; import("./StockChartContainer"));

class App extends Component {
  // ...

  render() {
    const { showChart } = this.state;
    const buttonText = showChart ? "Hide Stock Chart" : "Show Stock Chart";
    const chartComponent = showChart ? &amp;lt;StockChartContainer /&amp;gt; : null;
    const loadingComponent = &amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;;

    return (
      &amp;lt;div className="App"&amp;gt;
        &amp;lt;header className="App-header"&amp;gt;
          &amp;lt;h1 className="App-title"&amp;gt;Stock Chart&amp;lt;/h1&amp;gt;
          &amp;lt;div className="App-button"&amp;gt;
            &amp;lt;Button primary={true} onClick={this.handleClick}&amp;gt;
              {buttonText}
            &amp;lt;/Button&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/header&amp;gt;
        &amp;lt;div className="App-chart"&amp;gt;
          &amp;lt;Suspense fallback={loadingComponent}&amp;gt;{chartComponent}&amp;lt;/Suspense&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If we send too much JavaScript to our users, we’ll make the browser’s main thread busy, and it won’t be able to respond to user interaction. Lazy-loading components of our app that are not needed on initial page load will help reduce the amount of work the browser has to do, which will drive down our time-to-interactive, and provide a better experience to our users, especially those on mobile devices. React.lazy and Suspense make it so easy to do that we really have no excuse!😎&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How AR can change the future?</title>
      <author>hebaShakeel</author>
      <pubDate>Sun, 29 Nov 2020 14:09:23 +0000</pubDate>
      <link>https://dev.to/heba_shakeel/how-ar-can-change-the-future-39fi</link>
      <guid>https://dev.to/heba_shakeel/how-ar-can-change-the-future-39fi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-augmented-reality-ar" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Augmented Reality (AR)?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;AR is a sophisticated technology that enhances our experience of the world around us or in other words, it improves our visual perception of the environment. This technology superimposes digital information over any natural existing environment which means that we live in reality but augment it with additional information. &lt;/p&gt;

&lt;p&gt;AR is not the replica of reality; rather it integrates and adds value to the user’s interaction with the real world. Earlier this technology was used extensively in the entertainment industry alone but recently it can also be seen widely used in manufacturing and healthcare industries.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ar-in-our-everyday-life" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;AR in our everyday life-&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Today, AR can be experienced on our own handheld devices, be it our smartphones or tablets. &lt;/p&gt;

&lt;p&gt;I am sure you must have heard of the popular gaming app - Pokémon Go, which allowed the users to catch the Pokémon using their own smartphones cameras. All you had to do was simply download the app and search for Pokémon characters in your surroundings. Similarly, the video-see-through facial filters provided by Snapchat are also an example of AR. Snapchat allows users to project funny and sweet filters over their plain pictures.&lt;/p&gt;

&lt;p&gt;These days AR also facilitates the home-buying process, where the home-buyers can view the property from their own devices, using the ‘virtual-tour’ option before catching sight of the house in-person. One can even use ‘furniture placement apps’ to see which furniture would look best in their house before actually getting the furniture home.&lt;/p&gt;

&lt;p&gt;How many times have you bought a clothing from an online shopping store but had to return it because of the wrong size or maybe because the style didn’t suit you? To cut down the clothing returns, Amazon introduced a ‘virtual changing room’ app which uses AR to scan your body measurements, take more information about your choices and then recommend the best size and style for you. Isn’t that cool?&lt;/p&gt;

&lt;p&gt;Location-based AR apps like Google Maps place digital directions on top of the real world. Google lens enhances the search experience where you can just open the app and aim it at the object you want to know about and it provides you with all the essential details associated with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-augmented-reality-will-impact-our-future" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How Augmented Reality will impact our future?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Augmented Reality has been raging in popularity over the past few years and this revolution is not stopping any soon. &lt;br&gt;
Undoubtedly, AR is going to change the future of education. It opens up a whole new dimension that allows us to experience in 3D what we would otherwise only see in 2D pages of our books. &lt;br&gt;
We will have a better gaming experience, easier online shopping and effortless home improvement.  It is believed that the AR market will be worth between $70bn and $75bn by 2023. Studies also show that AR in the healthcare market will be worth $5.1bn by 2025.&lt;/p&gt;

&lt;p&gt;I believe Augmented Reality is going to be many folds bigger than it is today. We will be able to use AR to help surgeons visualize what the body looks like. Product designers will be able to rapidly prototype new ideas and see those ideas come to life in the world around them, and engineers will be able to see the instructions overlaid onto the physical world.&lt;/p&gt;

&lt;p&gt;If you are an artist, an architect, or a dress designer, AR is going to radically change not only the way that you create content but the way that you work and this is a big opportunity for content creators. AR has indeed taken the world by a storm.&lt;/p&gt;

&lt;p&gt;Thank You!&lt;br&gt;
Cover Photo by @thisisengineering &lt;/p&gt;

</description>
      <category>devops</category>
      <category>career</category>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JS 101: Implementing the "new" keyword</title>
      <author>Kris Guzman</author>
      <pubDate>Sun, 29 Nov 2020 12:49:23 +0000</pubDate>
      <link>https://dev.to/krisguzman_dev/js-101-implementing-the-new-keyword-5h1j</link>
      <guid>https://dev.to/krisguzman_dev/js-101-implementing-the-new-keyword-5h1j</guid>
      <description>&lt;p&gt;Because there is no real concept of classes in JavaScript, it helps to understand what some of these classical keywords are really doing under the hood.&lt;/p&gt;

&lt;p&gt;We're going to create a simplified version of the "new" keyword in JavaScript. For example, using the new keyword to instantiate an object we would do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dog = new Dog()
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;but we are going to do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const sparky = newObject(Dog, 'Sparky', 3)
const spot = newObject(Dog, 'Spot', 6)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-the-new-keyword-does" class="anchor"&gt;
  &lt;/a&gt;
  What the "new" Keyword Does
&lt;/h2&gt;

&lt;p&gt;To understand the "new" keyword, it's important to understand constructor functions. Constructor functions in JS are just regular ole functions that are responsible for initialization. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// the upper case function name is just a standard practice, not necessarily required
function Dog(petName, age) {
   this.petName = petName
   this.age = age
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So here are the steps that the "new" keyword does in the background:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an empty object&lt;/li&gt;
&lt;li&gt;Assign the prototype of the empty object to the prototype of the constructor function&lt;/li&gt;
&lt;li&gt;Run the constructor function using the "this" context of the new object&lt;/li&gt;
&lt;li&gt;If the constructor returns an object, return that, otherwise, return "this"&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's start off by defining a function called &lt;code&gt;newObject&lt;/code&gt; that will replace the new keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* 
   We will need the constructor function, and all of the constructor
   parameters. Using the handy spread operator here.
*/
function newObject(constructor, ...params) {
 // we will fill this out in the following steps
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-1-create-an-empty-object" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: Create an empty object
&lt;/h3&gt;

&lt;p&gt;Easy enough. Let's do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function newObject(constructor, ...params) {
 function d() {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-assign-the-prototype-of-the-empty-object-to-the-prototype-of-the-constructor-function" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: Assign the prototype of the empty object to the prototype of the constructor function
&lt;/h3&gt;

&lt;p&gt;A little trickier, but &lt;code&gt;Object&lt;/code&gt; has a handy function called &lt;code&gt;setPrototypeOf&lt;/code&gt;. Let's use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function newObject(constructor, ...params) {
 function d() {}
 Object.setPrototypeOf(d, constructor.prototype)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Not bad so far!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-run-the-constructor-function-using-the-this-context-of-the-new-object" class="anchor"&gt;
  &lt;/a&gt;
  Step 3: Run the constructor function using the "this" context of the new object
&lt;/h3&gt;

&lt;p&gt;Alrighty, this is probably the most complicated part for new JavaScript programmers. There is a function that all objects have called &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;. They run a particular function where the &lt;code&gt;this&lt;/code&gt; parameter of that function is the one we pass. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Dog(petName) {

   this.petName = petName
}

/* 
   we pass "this", so the "this" in "this.petName" refers to the one 
   we passed in.  
*/
Dog.call(this, 'Harold')

/* 
   if we want to pass an array of parameters, we can use the multi- 
   parameter equivalent of the "call" function.
*/
Dog.apply(this, ['Harold', 'James', 'Clark'])
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Okay, so now that we know how to use &lt;code&gt;call&lt;/code&gt; / &lt;code&gt;apply&lt;/code&gt;, which one do you think we should use to handle step number 3? Remember, a constructor function can have any number of parameters.&lt;/p&gt;

&lt;p&gt;Ready? Here it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function newObject(constructor, ...params) {
 function d() {}
 Object.setPrototypeOf(d, constructor.prototype)
// apply expects an array-like second parameter, which is why
// we spread it in an array
 constructor.apply(d, [...params])
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-if-the-constructor-returns-an-object-return-that-otherwise-return-this" class="anchor"&gt;
  &lt;/a&gt;
  Step 4: If the constructor returns an object, return that, otherwise, return "this"
&lt;/h3&gt;

&lt;p&gt;To finish off our &lt;code&gt;newObject&lt;/code&gt; function, we add a quick conditional check to see if the constructor function returns an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function newObject(constructor, ...params) {
 function d() {}
 Object.setPrototypeOf(d, constructor.prototype)
 const obj = constructor.apply(d, [...params])
 if(typeof obj === 'object') return obj
 return d
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;null&lt;/code&gt; is technically an object, so if a constructor returns null,  that will be returned by our instantiation function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-profit" class="anchor"&gt;
  &lt;/a&gt;
  Step 5: Profit
&lt;/h3&gt;

&lt;p&gt;Let's put everything together and give our function a whirl!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// our fancy new function
function newObject(constructor, ...params) {
    function d() {}
  Object.setPrototypeOf(d, constructor.prototype)
  const obj = constructor.apply(d, [...params])
  if(typeof obj === 'object') return obj
  return d
}

// an example constructor function
function Dog(petName, age) {
   this.petName = petName
   this.age = age
   this.bark = function() {
      console.log(`${this.petName} is ${this.age} years old`)
   }
}

const bill = newObject(Dog, 'Bill', 8)
const sam = newObject(Dog, 'Sam', 2)

dog.bark() // prints: Bill is 8 years old
dog2.bark() // prints: Sam is 2 years old
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now that we have seen how the new keyword works, we can appreciate how handy it is that all we have to do is type &lt;code&gt;const dog = new Dog()&lt;/code&gt; to get the same result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fun-fact" class="anchor"&gt;
  &lt;/a&gt;
  FUN FACT!
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; keyword will run the given function regardless of whether you type &lt;code&gt;new Dog()&lt;/code&gt; or &lt;code&gt;new Dog&lt;/code&gt;, so technically you don't need to do the former, but for the sake of everyone's sanity it's probably better to just go with the former option.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Stop Using "data" as a Variable Name</title>
      <author>Devin Witherspoon</author>
      <pubDate>Sun, 29 Nov 2020 12:41:02 +0000</pubDate>
      <link>https://dev.to/dcwither/stop-using-data-as-a-variable-name-3954</link>
      <guid>https://dev.to/dcwither/stop-using-data-as-a-variable-name-3954</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;"There are only two hard things in Computer Science: cache invalidation and naming things."&lt;/p&gt;

&lt;p&gt;- Phil Karlton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Setting aside cache invalidation, which is indeed difficult, this infamous quote is something that rings in my head whenever I'm having trouble finding the right name for something. Clear naming provides important context whenever someone needs to quickly understand code, whether they're firefighting, debugging, interviewing, or assisting a teammate - I don't have to ask someone what &lt;code&gt;users&lt;/code&gt; means, but I do have to ask what &lt;code&gt;data&lt;/code&gt; means. While I don't often find the best names, I try to optimize my code for the reader by following some basic rules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-rules" class="anchor"&gt;
  &lt;/a&gt;
  The Rules:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#use-meaningful-prefixes" class="anchor"&gt;
  &lt;/a&gt;
  Use Meaningful Prefixes
&lt;/h3&gt;

&lt;p&gt;While these prefixes aren't universal, they are great to establish a shared language within your team. Using them consistently throughout your codebase can make reading comprehension easier.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;get&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;fetch&lt;/code&gt; for functions that return a value or a &lt;code&gt;Promise&lt;/code&gt; that resolves to a value without mutating arguments or itself.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;set&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; for functions that mutate arguments or the callee for member functions. These functions may also return the updated value or a &lt;code&gt;Promise&lt;/code&gt; that resolves to the updated value.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;on&lt;/code&gt;, &lt;code&gt;handle&lt;/code&gt; for event handler functions. My team's convention is that &lt;code&gt;onEvent&lt;/code&gt; is passed through props into the component and &lt;code&gt;handleEvent&lt;/code&gt; is declared inside the component.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;is&lt;/code&gt;, &lt;code&gt;should&lt;/code&gt;, &lt;code&gt;can&lt;/code&gt; for boolean variables and functions with boolean return values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any convention that becomes a standard in your team can help with readability. Make sure to document these in the project &lt;code&gt;README&lt;/code&gt; or wiki. Creating custom linters to enforce these would be even more effective.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-words-that-add-meaning" class="anchor"&gt;
  &lt;/a&gt;
  Use Words that Add Meaning
&lt;/h3&gt;

&lt;p&gt;As an example, developers often name variables &lt;code&gt;data&lt;/code&gt; by default, but let's examine a couple of its &lt;a href="https://www.merriam-webster.com/dictionary/data"&gt;definitions&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;"factual information (such as measurements or statistics) used as a basis for reasoning, discussion, or calculation"&lt;/li&gt;
&lt;li&gt;"information in digital form that can be transmitted or processed"&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;These definitions could refer to any variable we process, so they give the reader &lt;strong&gt;no information&lt;/strong&gt;. Let's look at an example that doesn't follow this rule:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We know this function calculates a total of something, but we're not sure what.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#exceptions" class="anchor"&gt;
  &lt;/a&gt;
  Exceptions
&lt;/h4&gt;

&lt;p&gt;Sometimes your variable could actually contain anything, like a network request response body. Libraries like &lt;a href="https://github.com/axios/axios"&gt;axios&lt;/a&gt; use &lt;code&gt;data&lt;/code&gt;, which is a reasonable name in this context. Even in this scenario, the alternative &lt;code&gt;body&lt;/code&gt; conveys more meaning and is what the native web API &lt;code&gt;fetch&lt;/code&gt; uses in its &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Response"&gt;Response&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-full-words" class="anchor"&gt;
  &lt;/a&gt;
  Use Full Words
&lt;/h3&gt;

&lt;p&gt;Like everyone else's, the &lt;a href="https://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow#Two_systems"&gt;System 1&lt;/a&gt; part of my brain always tells me to take shortcuts to finish my task sooner. When it comes to variable naming, shortcuts often mean abbreviations or single character variable names.&lt;/p&gt;

&lt;p&gt;Like before, let's look at a function that doesn't follow the rule:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;totBal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;accts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tot&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;accts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;bal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can do some mental gymnastics to guess that &lt;code&gt;accts&lt;/code&gt; means &lt;code&gt;accounts&lt;/code&gt; and &lt;code&gt;tot&lt;/code&gt; is &lt;code&gt;total&lt;/code&gt;, but we can't process the code at a glance.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#exceptions" class="anchor"&gt;
  &lt;/a&gt;
  Exceptions
&lt;/h4&gt;

&lt;p&gt;Common industry abbreviations are preferred over their long form (e.g. URL, API, CSS).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-use-fluff-words" class="anchor"&gt;
  &lt;/a&gt;
  Don't Use "Fluff" Words
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Container&lt;/code&gt; and &lt;code&gt;Wrapper&lt;/code&gt; only have meaning in relation to the thing they're containing. The problem is that any component that isn't a base element contains another component. You also end up in the awkward position of naming components &lt;code&gt;MyComponentContainerContainer&lt;/code&gt;. The same applies to &lt;code&gt;Wrapper&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#exceptions" class="anchor"&gt;
  &lt;/a&gt;
  Exceptions
&lt;/h4&gt;

&lt;p&gt;In some contexts, these "fluff" words can have significant meaning. A common pattern in React class components is the &lt;a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0"&gt;presentation/container component pattern&lt;/a&gt;. &lt;code&gt;Container&lt;/code&gt; in this case may indicate a component that manages state on behalf of a presentation component - just make sure you consistently use it for this purpose, or it loses meaning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#spelling-matters" class="anchor"&gt;
  &lt;/a&gt;
  Spelling Matters
&lt;/h3&gt;

&lt;p&gt;Misspelling words creates bugs and makes searching your code harder. Typos are easy to ignore, but having the right spelling for everything in your codebase makes a world of difference, especially when attempting global find/replace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-it-together" class="anchor"&gt;
  &lt;/a&gt;
  Putting it Together
&lt;/h2&gt;

&lt;p&gt;Applying all the rules at once, we get the following function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAccountsTotalBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;totalBalance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;accountIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;accountIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;accountIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;totalBalance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;accountIndex&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;totalBalance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;While &lt;code&gt;accountIndex&lt;/code&gt; vs. &lt;code&gt;i&lt;/code&gt; might be contentious, the rest of the function should be much clearer. &lt;code&gt;getAccountsTotalBalance&lt;/code&gt; fully communicates the intent of the function and the prefix &lt;code&gt;get&lt;/code&gt; indicates that it will not result in any mutations. It's worth the code author investing increased effort in exchange for the benefit of the reader. Your future self will appreciate the extra work when they're maintaining the code six months later.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you're worried about line length, consider using a tool like Prettier to automatically format the code.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The goal of these rules is to bring as much meaning as possible to the code we write for future readers. Find the ones that work for your context, and if a rule is doing more harm than good, change or abandon it. Codifying your team's rules will help communicate your thoughts on the subject and is not meant to bring a hammer down on your teammates.&lt;/p&gt;

&lt;p&gt;Please share any other rules you follow when naming variables, functions, classes, etc. or let me know if you disagree with any of the rules here and how you'd change them.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>javascript</category>
      <category>react</category>
      <category>codequality</category>
    </item>
    <item>
      <title>10 Tips for Structuring a React Native Project</title>
      <author>Kadi Kraman</author>
      <pubDate>Sun, 29 Nov 2020 12:25:03 +0000</pubDate>
      <link>https://dev.to/kadikraman/10-tips-for-structuring-a-react-native-project-k19</link>
      <guid>https://dev.to/kadikraman/10-tips-for-structuring-a-react-native-project-k19</guid>
      <description>&lt;p&gt;When starting a new project, there are plenty of choices to be made around code style, language, folder layout, and more. Consistency is the key for creating clean, maintainable codebases. Therefore once decided, you'd usually need to stick with these choices for a while.&lt;/p&gt;

&lt;p&gt;Time and experience will teach you what works and what doesn't. But what if you don't have time? You can always use someone else's experience.&lt;/p&gt;

&lt;p&gt;Here are my top 10 tips for structuring a React Native project:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-use-typescript" class="anchor"&gt;
  &lt;/a&gt;
  1. Use TypeScript
&lt;/h2&gt;

&lt;p&gt;Yes, there is a bit of a learning curve if you're used to plain JavaScript.&lt;/p&gt;

&lt;p&gt;Yes, it's worth it.&lt;/p&gt;

&lt;p&gt;Typed JavaScript makes refactoring a whole lot easier, and when done right, gives you a lot more confidence in your code. Use the guide in the &lt;a href="https://reactnative.dev/docs/typescript"&gt;docs&lt;/a&gt; for setup instructions. Make sure to enable strict mode (&lt;code&gt;"strict": true&lt;/code&gt; in the &lt;code&gt;compilerOptions&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;You can also add type checking in your CI with &lt;code&gt;tsc --noEmit&lt;/code&gt;, so you can be confident in your types!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-set-up-a-module-alias-to-raw-src-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  2. Set up a module alias to &lt;code&gt;/src&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Set up a single module alias to &lt;code&gt;/src&lt;/code&gt; (and a separate one for &lt;code&gt;/assets&lt;/code&gt; if needed), so instead of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CustomButton&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../../components/CustomButton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;you can do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CustomButton&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@src/components/CustomButton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I always use a &lt;code&gt;@&lt;/code&gt; or a &lt;code&gt;~&lt;/code&gt; in front of &lt;code&gt;src&lt;/code&gt; to highlight it's an alias.&lt;/p&gt;

&lt;p&gt;I've seen implementations where folks set up multiple type aliases - one for &lt;code&gt;@components&lt;/code&gt;, one for &lt;code&gt;@screens&lt;/code&gt;, one for &lt;code&gt;@util&lt;/code&gt; etc, but I've found a single top level alias to be the clearest.&lt;/p&gt;

&lt;p&gt;There's a handy guide for setting this up with TypeScript in the &lt;a href="https://reactnative.dev/docs/typescript#using-custom-path-aliases-with-typescript"&gt;React Native docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-use-inline-styles" class="anchor"&gt;
  &lt;/a&gt;
  3. Use Inline Styles
&lt;/h2&gt;

&lt;p&gt;You have an option for using the built in inline styles, or &lt;a href="https://styled-components.com/docs/basics#react-native"&gt;Styled Components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I started off with Styled Components, then switched to inline styles, because there used to be a performance implication, though that's &lt;a href="https://medium.com/@jm90mm/a-quick-performance-comparison-of-styled-components-vs-inline-styles-in-react-native-21d8f6a561d7"&gt;negligible&lt;/a&gt;, so now it's just a preference.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-one-style-file-per-component" class="anchor"&gt;
  &lt;/a&gt;
  4. One Style File Per Component
&lt;/h2&gt;

&lt;p&gt;Each component should have their own style file with a &lt;code&gt;styles.ts&lt;/code&gt; extension:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FirstComponent.tsx
FirstComponent.styles.ts
SecondComponent.tsx
SecondComponent.styles.tsx
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note, the &lt;code&gt;.styles.ts&lt;/code&gt; in the filename is just a convention I use to indicate that the styles belong to the component, the TypeScript compiler will treat these as regular &lt;code&gt;.ts&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;Each style file exports a single style object for the component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// FirstComponent.styles.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Each component only imports only its own styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// FirstComponent.tsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./FirstComponent.styles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-use-global-styles" class="anchor"&gt;
  &lt;/a&gt;
  5. Use Global Styles
&lt;/h2&gt;

&lt;p&gt;Create a &lt;code&gt;globalStyles.ts&lt;/code&gt; file at the top level of the &lt;code&gt;/src&lt;/code&gt; directory, and import it to the &lt;code&gt;.styles.ts&lt;/code&gt; as needed.&lt;/p&gt;

&lt;p&gt;Always use constants for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;colours&lt;/li&gt;
&lt;li&gt;fonts&lt;/li&gt;
&lt;li&gt;font sizes&lt;/li&gt;
&lt;li&gt;spacing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It may seem tedious at first, but handy in the long term. And if you find you're ending up creating constant for every single space, it's something to gently bring up with the Design team, as design guides would generally not want that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-flatten-style-constants" class="anchor"&gt;
  &lt;/a&gt;
  6. Flatten Style Constants
&lt;/h2&gt;

&lt;p&gt;Instead of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;globalStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#235789&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#C1292E&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#F1D302&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;globalStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;colorBlue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#235789&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;colorRed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#C1292E&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;colorYellow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#F1D302&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It can be tempting to group these, but I've found that keeping them flat can be more handy, e.g. if you wanted to replace all instances of &lt;code&gt;colorRed&lt;/code&gt; in your codebase, you could do a find and replace, whereas with &lt;code&gt;colors.red&lt;/code&gt; it'd be harder, since the colour could have been destructured. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-use-numbers-in-style-constants" class="anchor"&gt;
  &lt;/a&gt;
  7. Use Numbers in Style Constants
&lt;/h2&gt;

&lt;p&gt;Instead of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;globalStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extraSmall&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;small&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;medium&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;large&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;extraLarge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;globalStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;fontSize8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fontSize12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fontSize16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fontSize18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fontSize24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first option may look nicer when writing it down, but during development, you don't tend to care about "medium" and "large", and just care about the number. And it will avoid the awkward naming when the designers inevitably add a font size 14 and you have to start calling your variables things like &lt;code&gt;mediumSmall&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-one-component-per-file" class="anchor"&gt;
  &lt;/a&gt;
  8. One Component Per File
&lt;/h2&gt;

&lt;p&gt;Here's the template for a new component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.styles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Some things to note here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;function components over class components: I'd always use function components and manage any state and side-effects using hooks&lt;/li&gt;
&lt;li&gt;I use constant functions, but both &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;function&lt;/code&gt; are equally good here. In fact &lt;code&gt;function&lt;/code&gt; might be better in the long term&lt;/li&gt;
&lt;li&gt;default export: I always use a default export, though there is an argument to be made that named exports are better since they'll be clearer to refactor, and I agree - that might be the next step&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#9-separate-components-and-screens" class="anchor"&gt;
  &lt;/a&gt;
  9. Separate Components and Screens
&lt;/h2&gt;

&lt;p&gt;Here's a typical folder structure I end up with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/assets
  /images
    image.png
    anotherImage.png
  /icons
    icon.svg
    anotherIcon.svg
/src
  /components
    Component1.tsx
    Component1.styles.ts
    Component1.test.ts
    Component2.tsx
    Component2.styles.ts
    Component2.test.ts
  /screens
    Screen.tsx
    Screen.styles.ts
    Modal.tsx
    Modal.styles.ts
  App.tsx
  globalStyles.ts
  types.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I always separate components in the &lt;code&gt;/components&lt;/code&gt; directory and the screens and modals in the &lt;code&gt;/screens&lt;/code&gt; directory. When using &lt;code&gt;react-navigation&lt;/code&gt;, there is no structural difference between screens and modals, but I prefer to also differentiate the intent by naming the file &lt;code&gt;SomethingModal.tsx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another thing to note is the file names - rather than creating a folder with the file name, and naming each file &lt;code&gt;index.tsx&lt;/code&gt;, the filename should reflect the component name. That is mostly for convenience - in most editors, it'll get tedious to track down which file you're editing when they're all called &lt;code&gt;index.tsx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I've also seen implementations where all components are imported to a single &lt;code&gt;index.ts&lt;/code&gt; file and exported from there. I personally am not a fan of that solution and see it as an unnecessary extra step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-lint-your-code" class="anchor"&gt;
  &lt;/a&gt;
  10. Lint Your Code
&lt;/h2&gt;

&lt;p&gt;It's worth it. Trust me!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use &lt;a href="https://eslint.org/"&gt;eslint&lt;/a&gt; and &lt;a href="https://prettier.io/"&gt;prettier&lt;/a&gt; - they actually come pre-installed when you initialise a new project&lt;/li&gt;
&lt;li&gt;Set up a pre-commit hook - I usually set up a pre-commit hook for linting and pre-push hook for tests. There's a great guide &lt;a href="https://prettier.io/docs/en/precommit.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Check lint, test and TypeScript errors on CI! This is so important - the only way to ensure a consistent code style across the project lifecycle. Setting up CI is one of the first things I do when starting a new project.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hope this helps! Got any tips of your own that I did't list here? Let me know in the comments! 👀&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Are you a SOLID developer?</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Sun, 29 Nov 2020 11:42:11 +0000</pubDate>
      <link>https://dev.to/coderslang/are-you-a-solid-developer-5e30</link>
      <guid>https://dev.to/coderslang/are-you-a-solid-developer-5e30</guid>
      <description>&lt;p&gt;SOLID is an acronym for 5 object-oriented design principles formulated by Robert Martin - &lt;a href="https://twitter.com/unclebobmartin"&gt;@unclebobmartin&lt;/a&gt;. Following SOLID principles will help you build maintainable and extensible software.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--py_hyRUF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/solid-dev-guy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--py_hyRUF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/solid-dev-guy.jpeg" alt="cv-review"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-makes-you-solid" class="anchor"&gt;
  &lt;/a&gt;
  So, what makes you SOLID?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;S&lt;/strong&gt; - Single-responsibility principle&lt;br&gt;
&lt;strong&gt;O&lt;/strong&gt; - Open-closed principle&lt;br&gt;
&lt;strong&gt;L&lt;/strong&gt; - Liskov substitution principle&lt;br&gt;
&lt;strong&gt;I&lt;/strong&gt; - Interface segregation principle&lt;br&gt;
&lt;strong&gt;D&lt;/strong&gt; - Dependency inversion principle&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-single-responsibility-principle-srp" class="anchor"&gt;
  &lt;/a&gt;
  The Single Responsibility Principle (SRP)
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A class should have one and only one reason to change, meaning that a class should have only one job.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can apply this rule more broadly. Functions, variables, modules. Follow the SRP and don't try to create a Swiss Army knife everywhere you look.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-openclosed-principle-ocp" class="anchor"&gt;
  &lt;/a&gt;
  The Open-closed principle (OCP)
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Objects or entities should be open for extension but closed for modification.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At first, it may seem that there's nothing wrong with modification. Everything changes as they once sang.&lt;/p&gt;

&lt;p&gt;The issue with modification is that if you have some function that does multiple things, and you need to modify one of these, you might break other clients. And even if you're so smart and hardworking that you don't mind rewriting them all, others may be.&lt;/p&gt;

&lt;p&gt;So, follow the OCP and add extra behavior on top of the existing one, not by modifying the original. If you failed at SRP, it'd be pretty hard to keep up with OCP.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-liskov-substitution-principle-lsp" class="anchor"&gt;
  &lt;/a&gt;
  The Liskov Substitution Principle (LSP)
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Instances of a superclass should be replaceable with the instances of its subclasses.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In plain English, LSP means that if you have some &lt;code&gt;Dog&lt;/code&gt; which can &lt;code&gt;bark()&lt;/code&gt;, it's not very wise to build MechanicalDog that extends Dog and can only &lt;code&gt;bark()&lt;/code&gt; if provided with batteries and would otherwise throw an Error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interface-segregation-principle-isp" class="anchor"&gt;
  &lt;/a&gt;
  Interface Segregation Principle (ISP)
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;No client should be forced to depend on methods it does not use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can consider it an SRP for the interface design.&lt;/p&gt;

&lt;p&gt;Declutter and make sure everything is in the right place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dependency-inversion-principle-dip" class="anchor"&gt;
  &lt;/a&gt;
  Dependency inversion principle (DIP)
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Everything should depend on abstractions (interfaces).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The interfaces should never depend on details.&lt;/p&gt;

&lt;p&gt;Seems obvious? But look closer and you'll see violations of DIP literally everywhere.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Apply the SOLID principles today and you'll become a much better developer tomorrow!&lt;/p&gt;

&lt;p&gt;P. S. Oh, and don't forget the Agile approach.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make it work → Make it clever → Make it fast&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nobody will care about how good your code is if it doesn't solve a problem.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>leadership</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
