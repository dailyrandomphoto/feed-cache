<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Candy Color Button Animation</title>
      <author>Jayant Goel</author>
      <pubDate>Wed, 03 Nov 2021 19:41:45 +0000</pubDate>
      <link>https://dev.to/jayantgoel001/candy-color-button-animation-bgi</link>
      <guid>https://dev.to/jayantgoel001/candy-color-button-animation-bgi</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/yuhomyan/embed/OJMejWJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Download Button Animation</title>
      <author>Jayant Goel</author>
      <pubDate>Wed, 03 Nov 2021 19:41:28 +0000</pubDate>
      <link>https://dev.to/jayantgoel001/download-button-animation-36p9</link>
      <guid>https://dev.to/jayantgoel001/download-button-animation-36p9</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aaroniker/embed/MWgNKGr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>bootstrap 4 navbar</title>
      <author>Jayant Goel</author>
      <pubDate>Wed, 03 Nov 2021 19:37:16 +0000</pubDate>
      <link>https://dev.to/jayantgoel001/bootstrap-4-navbar-3hb2</link>
      <guid>https://dev.to/jayantgoel001/bootstrap-4-navbar-3hb2</guid>
      <description>&lt;p&gt;With Bootstrap, a navigation bar can extend or collapse, depending on the screen size. A standard navigation bar is created with the .navbar class, followed by a responsive collapsing class: .navbar-expand-xl. ... sm (stacks the navbar vertically on extra large, large, medium or small screens).&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/piyushpd/embed/gOYvZPG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Simple CSS Waves | Mobile &amp; Full width</title>
      <author>Jayant Goel</author>
      <pubDate>Wed, 03 Nov 2021 19:34:03 +0000</pubDate>
      <link>https://dev.to/jayantgoel001/simple-css-waves-mobile-full-width-265c</link>
      <guid>https://dev.to/jayantgoel001/simple-css-waves-mobile-full-width-265c</guid>
      <description>&lt;p&gt;Lightweight animation between header &amp;amp; content. Easy to customize and apply into any website! Works with all devices and screen sizes.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/goodkatz/embed/LYPGxQz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Caching - 101</title>
      <author>Uzair</author>
      <pubDate>Wed, 03 Nov 2021 19:02:36 +0000</pubDate>
      <link>https://dev.to/uzairali10/caching-101-3agp</link>
      <guid>https://dev.to/uzairali10/caching-101-3agp</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/uzairali10/load-balancer-101-4jl9"&gt;Load Balancing&lt;/a&gt; helps you to scale horizontally by increasing resources (increasing number of servers) while caching enables you to make better use the existing resource you have.&lt;/p&gt;

&lt;p&gt;Caching works on the principle that recently requested data is likely to be requested again&lt;/p&gt;

&lt;p&gt;Cache is a hardware or a software component which helps in serving the data which is either frequently requested or is resource expensive to compute, So cache stores the response and serves it when asked to do so.&lt;/p&gt;

&lt;p&gt;Caches can exist at all levels in architecture, but are often found at the level nearest to the client where they are implemented to return data quickly without taxing downstream levels.&lt;/p&gt;

&lt;p&gt;For example: &lt;/p&gt;

&lt;p&gt;A client requests image from a server, Initially the server looks through DB for the image and return it to client but however there are the following possibilities&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The response can be cached in server side (Eg: in reverse proxy)&lt;/li&gt;
&lt;li&gt;The response can be cached client side (Eg: Browser cache, Forward proxy)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way we are saving the copy of response and client do not have to request the server frequently for the same data, This even decrease the time to load data for client and even decreases load for the server.&lt;/p&gt;

&lt;p&gt;If the response for a particular request is saved in cache it is called &lt;code&gt;cache hit&lt;/code&gt; or else it is called &lt;code&gt;cache miss&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Improves read Performance (aka Latency)&lt;/li&gt;
&lt;li&gt;Reduce the Load (aka Throughput)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Increase complexity of System&lt;/li&gt;
&lt;li&gt;Consumes Resources&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cache-invalidation-amp-eviction"&gt;
  &lt;/a&gt;
  Cache Invalidation &amp;amp; Eviction
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#cache-invalidation"&gt;
  &lt;/a&gt;
  Cache Invalidation:
&lt;/h2&gt;

&lt;p&gt;Updating the cached data is known as cache invalidation. The most common technique used for this purpose is known as TTL (Time To live). A certain time period is defined for cache to live in the memory and after that interval of time cache expires. And new data is requested from server&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cache-eviction"&gt;
  &lt;/a&gt;
  Cache Eviction:
&lt;/h2&gt;

&lt;p&gt;As cache memory is limited so we have to decide which cached data to keep or not.&lt;/p&gt;

&lt;p&gt;Eg: our storage is capable of only storing only 100 keys and currently all of them are filled and now we want to add an additional key so we have to kick out an older cached key so that room for a new one can be made. This process is know as cache Eviction.&lt;/p&gt;

&lt;p&gt;Below are some parameters considered while Eviction of a cached key:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FIFO: First In First Out, In this the oldest cached key gets removed so that latest one can be occupied.&lt;/li&gt;
&lt;li&gt;LRU: Least Recently Used, In this the cached key which hasn't been used in recent time and was used a long time ago gets discarded.&lt;/li&gt;
&lt;li&gt;LFU: Least Frequently Used, In this the cached is used the most less number of times is discarded. Eg: there are 3 keys k1, k2, k3 and they are used 7,3,9 times respectively so k3 will be discarded first as it is used only 3 times which is the least number.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cache-patterns"&gt;
  &lt;/a&gt;
  Cache Patterns
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#cache-aside-pattern"&gt;
  &lt;/a&gt;
  Cache Aside pattern:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hbwp9R93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zt6k16ihp7hd95qognzs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hbwp9R93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zt6k16ihp7hd95qognzs.jpg" alt="Image description" width="445" height="549"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This is the most commonly used technique in this the cache does not interact with DB or Server it only interacts with Application.&lt;/p&gt;

&lt;p&gt;When a client request some data through application, Application looks for it in cache if found then returns it or else request the same to server and then returns to client and also caches it.&lt;/p&gt;

&lt;p&gt;Here there was no interaction between cache and server or DB &lt;/p&gt;

&lt;p&gt;When the data in DB changes corresponding data in cached memory also have to be modified either through some code by application or through TTL method or combination of both can be used&lt;/p&gt;

&lt;p&gt;Pros of cache aside:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caches only what is needed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons of cache Aside:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cache Miss are Expensive&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#read-through-pattern"&gt;
  &lt;/a&gt;
  Read Through pattern:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7Ok-RZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hatvrac2wge2kbfan7g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7Ok-RZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hatvrac2wge2kbfan7g.jpg" alt="Image description" width="485" height="539"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here the cache resides between application and server, in this case application never interacts with server or cache.&lt;/p&gt;

&lt;p&gt;When a client request some data it is first looked by the application in cache and if not found the cache itself request data to server and returns to the application.&lt;/p&gt;

&lt;p&gt;Pros of cache aside:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caches only what is needed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons of cache Aside:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cache Miss are Expensive&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#write-through-pattern"&gt;
  &lt;/a&gt;
  Write Through pattern:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b6KN1wYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi79b0ruuicotj38pqnk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b6KN1wYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi79b0ruuicotj38pqnk.jpg" alt="Image description" width="495" height="228"&gt;&lt;/a&gt;     &lt;/p&gt;

&lt;p&gt;The write-through strategy adds data or updates data in the cache whenever data is written to the database. Because the data in the cache is updated every time it's written to the database, the data in the cache is always current.&lt;/p&gt;

&lt;p&gt;Pros of Write Through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Up to Date Data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons of cache Aside:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writes are Expensive are Expensive&lt;/li&gt;
&lt;li&gt;There is a chance that we may add certain data to cache that no one ever reads&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#write-behind-pattern"&gt;
  &lt;/a&gt;
  Write Behind pattern:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YEQXpRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr6hujk16stfe9ykl0mg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YEQXpRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr6hujk16stfe9ykl0mg.jpg" alt="Image description" width="495" height="231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is similar to write through and just instead of updating cache instantaneously it waits for some time and sends requests in bulk&lt;/p&gt;

&lt;p&gt;Pros of Write Through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No Write penalty&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons of cache Aside:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Lack of consistency&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#where-do-cache-resides"&gt;
  &lt;/a&gt;
  Where Do Cache Resides
&lt;/h2&gt;

&lt;p&gt;Depending on the pattern used for caching and some other parameters cache can be embedded at various levels such as.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client Side (Like Browser cache or OS Cache)&lt;/li&gt;
&lt;li&gt;Forward proxy&lt;/li&gt;
&lt;li&gt;Reverse proxy&lt;/li&gt;
&lt;li&gt;Application layer itself&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>systems</category>
      <category>performance</category>
      <category>redis</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Deno script for adding Tailwind CSS to Next.js project in 4 seconds</title>
      <author>Max</author>
      <pubDate>Wed, 03 Nov 2021 19:01:51 +0000</pubDate>
      <link>https://dev.to/comingalive/deno-script-for-adding-tailwind-css-to-nextjs-project-in-4-seconds-24hg</link>
      <guid>https://dev.to/comingalive/deno-script-for-adding-tailwind-css-to-nextjs-project-in-4-seconds-24hg</guid>
      <description>&lt;p&gt;In your project folder run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deno run --allow-write --allow-read --allow-run https://denos.xyz/add-tailwind-to-next.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default it uses yarn. If you don't have yarn, it will use npm. You can force it by adding --npm after the module name.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>deno</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>C++ from the beginning - your first program</title>
      <author>Chris Noring</author>
      <pubDate>Wed, 03 Nov 2021 18:49:06 +0000</pubDate>
      <link>https://dev.to/azure/c-from-the-beginning-2o2l</link>
      <guid>https://dev.to/azure/c-from-the-beginning-2o2l</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TLDR; welcome to this series on C++, it will take you through the basics of C++ so you at the end of the series is able to use the language in a professional manner.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;C++ was invented by Bjarne Stroustrup in 1985. It's estimated to have more than 5.5 million users. &lt;/p&gt;

&lt;p&gt;Where is it used though?&lt;/p&gt;

&lt;p&gt;It's used by major corporations like Google, Facebook, Microsoft and so on and here's some areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Medical industry&lt;/li&gt;
&lt;li&gt;Gaming&lt;/li&gt;
&lt;li&gt;Video editing&lt;/li&gt;
&lt;li&gt;Backend systems&lt;/li&gt;
&lt;li&gt;Compilers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these areas needs highly performant languages where you are able to ensure speed, control memory usage and more. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0how-do-i-get-started"&gt;
  &lt;/a&gt;
   How do I get started
&lt;/h2&gt;

&lt;p&gt;First, you need a compiler. Check out the below guides to make sure you are set up for your OS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/cpp/config-linux"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/docs/cpp/config-clang-mac"&gt;Mac&lt;/a&gt; Mac usually have g++ installed already but this guide shows you how to install clang and use it with Visual Studio Code.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/cpp/config-mingw"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you are setup, you are ready to create your first program in C++.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0your-first-program"&gt;
  &lt;/a&gt;
   Your first program
&lt;/h2&gt;

&lt;p&gt;In this first program, you'll take some code, use the compiler to create a program that you can run.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a file &lt;em&gt;app.cpp&lt;/em&gt; and add this code:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;   &lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;   &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"First program in C++&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code prints out "First program in C++". Before we can see the output, let's compile the program.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use the compiler calling &lt;code&gt;g++ app.cpp&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   g++ app.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how it takes the name of your file as input. What happens now are many things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;preprocessing&lt;/strong&gt;. A preprocessor deals with directives like your first line &lt;code&gt;#include&lt;/code&gt; and tries to resolve what they mean. In this case, your first line brings a streaming library &lt;code&gt;iostream&lt;/code&gt; into scope that allows you to print to the screen. The output is a C++ without preprocessor directives.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compilation&lt;/strong&gt;. Next, the compiler takes the C++ output from the first step and turns it into an object file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;linking&lt;/strong&gt;. This is the last step, in which the object file is turned into either a library or an executable file that you can run.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Look at the output, you should have an &lt;em&gt;a.out&lt;/em&gt; file in the same directory as you ran &lt;code&gt;g++&lt;/code&gt;. It's a runnable file, exe file on Windows and a file with permission X(executable) on Linux/macOS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the file:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   ./a.out &lt;span class="c"&gt;# Linux, macOS&lt;/span&gt;
   a.out.exe &lt;span class="c"&gt;# windows&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see "First program in C++". Next, let's try to modify the code by adding a new row:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Modify the code like so (add the part in bold):&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;
#include 
using namespace std;

int main()
{
  cout &amp;lt;&amp;lt; "First program in C++\n";
  &lt;b&gt;cout &amp;lt;&amp;lt; "Here's another row";&lt;/b&gt; 
  return 0;
}
&lt;/pre&gt; 

&lt;ol&gt;
&lt;li&gt;Compile and run the code again:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   g++ app.cpp
   ./a.out
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see:&lt;/p&gt;

&lt;p&gt;"First program in C++"&lt;br&gt;
   "Here's another row"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0explain-the-code"&gt;
  &lt;/a&gt;
   Explain the code:
&lt;/h2&gt;

&lt;p&gt;Let's go through the code, line by line:&lt;/p&gt;

&lt;pre&gt;
#include 
&lt;/pre&gt;

&lt;p&gt;The above bring in the streaming library &lt;code&gt;iostream&lt;/code&gt; that's able to manage reading and writing to the console.&lt;/p&gt;

&lt;pre&gt;
#include 
&lt;b&gt;using namespace std;&lt;/b&gt;
&lt;/pre&gt;

&lt;p&gt;Next line brings in the namespace &lt;code&gt;std&lt;/code&gt; which enables you to type &lt;code&gt;cout&lt;/code&gt;, instead of &lt;code&gt;std::cout&lt;/code&gt;. A namespace is logical grouping where you usually place all programming constructs that goes together.&lt;/p&gt;

&lt;pre&gt;
#include 
using namespace std;

&lt;b&gt;int main()
{
}&lt;/b&gt;
&lt;/pre&gt;

&lt;p&gt;In this code, a function &lt;code&gt;main()&lt;/code&gt; is defined. A function groups programming statements into a named reference that you can call. In the case of &lt;code&gt;main()&lt;/code&gt;, it's called by the program by itself when the program is started at the console. The &lt;code&gt;main()&lt;/code&gt; function is also known as the &lt;em&gt;entry point&lt;/em&gt;, where the program begins.&lt;/p&gt;

&lt;pre&gt;
#include 
using namespace std;

int main()
{
  &lt;b&gt;cout &amp;lt;&amp;lt; "First program in C++\n";
  cout &amp;lt;&amp;lt; "Here's another row";&lt;/b&gt; 
}
&lt;/pre&gt; 

&lt;p&gt;Here two calls to &lt;code&gt;cout&lt;/code&gt; is made, which means it writes out strings to the console that the user can see.&lt;/p&gt;

&lt;pre&gt;
#include 
using namespace std;

int main()
{
  cout &amp;lt;&amp;lt; "First program in C++\n";
  cout &amp;lt;&amp;lt; "Here's another row"; 
  &lt;b&gt;return 0;&lt;/b&gt;
}
&lt;/pre&gt; 

&lt;p&gt;Lastly, a &lt;code&gt;return&lt;/code&gt; statement is added to the &lt;code&gt;main()&lt;/code&gt; function which means it fulfills the contract of the &lt;code&gt;main()&lt;/code&gt; function, which says to return a number &lt;code&gt;int main()&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;This was your first look into C++, stay tuned for more parts on C++ in this beginner series.  &lt;/p&gt;

</description>
      <category>cpp</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Nailing Your Next Flutter Interview</title>
      <author>Ayodeji Ogundairo</author>
      <pubDate>Wed, 03 Nov 2021 18:41:38 +0000</pubDate>
      <link>https://dev.to/xclusivecyborg/nailing-your-next-flutter-interview-2c8o</link>
      <guid>https://dev.to/xclusivecyborg/nailing-your-next-flutter-interview-2c8o</guid>
      <description>&lt;p&gt;So I'd like you to think about it, you love building with flutter right? and flutter's like your best friend just like me. What if there's an opportunity for you to get your dream job and then the interview doesn't go as planned due to the "tough" questions that you were asked? Well, the questions are not so tough and this article focuses on answering some of the questions around flutter interviews. &lt;/p&gt;

&lt;p&gt;If you are interviewing for a mid-level role majorly, these are some of the questions that you will be asked. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#interview-questions"&gt;
  &lt;/a&gt;
  Interview Questions
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;1. What is the difference between Stateful and Stateless widgets?&lt;/strong&gt; Stateful widgets are mutable widgets which means that their state can change over time. Stateful widgets for example are used when the part of the UI must change dynamically during runtime. Stateless widgets are the opposite of stateful widgets and they only get called once during runtime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Is Dart a single-threaded language or a multi-threaded language?&lt;/strong&gt; Dart is a single-threaded language and it makes use of Isolates to run tasks or processes concurrently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. What are Dart Isolates?&lt;/strong&gt; Since dart is a single-threaded programming language, it uses &lt;a href="https://www.youtube.com/watch?v=vl_AaCgudcY&amp;amp;t=4s"&gt;Isolates&lt;/a&gt; to run the concurrent tasks. Isolates are separate parts of your app, they have their own event loops, event queues, and memories. They perform tasks isolated from the main thread and they communicate with the main thread when these tasks are done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. What are event loops in Dart?&lt;/strong&gt; Dart uses  &lt;a href="https://www.youtube.com/watch?v=vl_AaCgudcY&amp;amp;t=4s"&gt;event loops&lt;/a&gt;  to handle events asynchronously. Event loops make asynchronous programming possible in dart. Being a single-threaded language, it is impossible for dart to predict when certain functions will happen in your app and because of this, dart runs an event loop to carry out events. It grabs events or functions from the event queue in your app, processes it and picks the next one, and processes it until the event queue is empty.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. How does flutter take care of garbage in memory?&lt;/strong&gt; In flutter, Dart uses garbage collection to take care of garbage in memory. Garbage collection is the process of searching dart objects that are dynamically allocated live in a portion of memory to locate and reclaim, regions of "dead" memory—memory that is no longer being used by an application. This process allows the memory to be re-used and minimizes the risk of an application running out of memory, causing it to crash. Garbage collection is performed automatically by the Dart VM (Dart Virtual Machine – It is a piece of software that directly executes dart code). In DevTools, you can perform garbage collection on demand by clicking the GC button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.What is MVVM architecture?&lt;/strong&gt;  &lt;a href="https://medium.com/flutterworld/flutter-mvvm-architecture-f8bed2521958"&gt;MVVM&lt;/a&gt;  which is an abbreviation for MODEL-VIEW-VIEW-MODEL is an architectural pattern that uses property-based data binding to establish a connection between the View-Model and the View and drives the View changes through the View-Model. This architectural design separates your UI from your logic and it helps your app with scalability and maintainability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;=&amp;gt; Model:&lt;/strong&gt; This component stores application data and it works with the view-model to get and store data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;=&amp;gt; View:&lt;/strong&gt; This is your user interface and it houses components that are visible to the screen. It provides the visualization to data stores in the model and offers interaction to the user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;=&amp;gt; View-Model:&lt;/strong&gt; The view model handles the logic behind your app. It houses the methods, function calls, and other factors that can help to maintain the actual state of the view.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. How do you manage Scalability in a Flutter app?&lt;/strong&gt; Scalability in flutter ensures you have the right architecture in place in other to be able to add new features to your app without breaking the rest of it. You can manage scalability by using a good software architectural design e.g. MVVM.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Why is null safety important?&lt;/strong&gt;  &lt;a href="https://dart.dev/null-safety"&gt;Null safety&lt;/a&gt;  in dart ensures nun-nullable fields in your app are not assigned null values. This is important as it helps your app runs faster and it also prevents your app from crashing. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. How do you migrate your app to null safety?&lt;/strong&gt;  To migrate your app to null safety, you can open your app in the terminal and run $‘dart migrate’. It is also essential to check the dependencies of your app and ensure they support null safety before migrating to null safety. To do this, you can run $’ pub outdated’ on your terminal and check for the dependencies that need to be upgraded then update them before migrating your app. You can also watch this &lt;a href="https://www.youtube.com/watch?v=bvq7wbn4VAA"&gt;video&lt;/a&gt; for more clarification.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Getting your dream tech job goes beyond your technical skills and it is quite important for you to be inclined about the theoretical background of your preferred programming language and its framework. &lt;br&gt;
I hope this article was helpful and I hope you nail your next flutter interview. &lt;/p&gt;

</description>
      <category>flutter</category>
      <category>interview</category>
      <category>dart</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Overview of AWS : Machine learning Services| AWS WhitePaper Summary</title>
      <author>‪Karim Negm‬‏</author>
      <pubDate>Wed, 03 Nov 2021 18:21:32 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/overview-of-aws-machine-learning-services-aws-whitepaper-summary-33h5</link>
      <guid>https://dev.to/awsmenacommunity/overview-of-aws-machine-learning-services-aws-whitepaper-summary-33h5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#machine-learning-services"&gt;
  &lt;/a&gt;
  Machine Learning services
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h5xRAej2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tvxhqw6gvj2eomwziv5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h5xRAej2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tvxhqw6gvj2eomwziv5.png" alt="Image description" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Augmented AI (Amazon A2I)&lt;/strong&gt; is a machine learning service that makes it easy to build the workflows required for human review. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon CodeGuru&lt;/strong&gt; is a developer tool that provides intelligent recommendations to improve code quality and identify an application’s most expensive lines of code. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CodeGuru Reviewer&lt;/strong&gt; uses machine learning and automated reasoning to identify critical issues, security vulnerabilities, and hard-to-find bugs during application development and provides recommendations to improve code quality.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CodeGuru Profiler&lt;/strong&gt; helps developers find an application’s most expensive lines of code by helping them understand the runtime behavior of their applications, identify and remove code inefficiencies, improve performance, and significantly decrease compute costs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Comprehend&lt;/strong&gt; is a natural language processing (NLP) service that uses machine learning to find insights and relationships in a text. No machine learning experience is required.&lt;br&gt;
Amazon Comprehend uses machine learning to help you uncover the insights and relationships in your unstructured data. The service identifies the language of the text; extracts key phrases, places, people, brands, or events; understands how positive or negative the text is; analyzes text using tokenization and parts of speech; and automatically organizes a collection of text files by topic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon DevOps Guru&lt;/strong&gt; is a Machine Learning (ML) powered service that makes it easy to improve an application’s operational performance and availability. DevOps Guru detects behaviors that deviate from normal operating patterns so you can identify operational issues long before they impact your customers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Elastic Inference&lt;/strong&gt; allows you to attach low-cost GPU-powered acceleration to Amazon EC2 and Amazon SageMaker instances to reduce the cost of running deep learning inference by up to 75%. Amazon Elastic Inference supports TensorFlow, Apache MXNet, PyTorch, and ONNX models.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Forecast&lt;/strong&gt; is a fully managed service that uses machine learning to deliver highly accurate forecasts.&lt;br&gt;
Amazon Forecast is a fully managed service, so there are no servers to provision, and no machine learning models to build, train, or deploy. You pay only for what you use, and there are no minimum fees and no upfront commitments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Fraud Detector&lt;/strong&gt; is a fully managed service that uses machine learning (ML) and more than 20 years of fraud detection expertise from Amazon, to identify potentially fraudulent activity so customers can catch more online fraud faster. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon HealthLake&lt;/strong&gt; is a HIPAA-eligible service that healthcare providers, health insurance companies, and pharmaceutical companies can use to store, transform, query, and analyze large-scale health data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Kendra&lt;/strong&gt; is an intelligent search service powered by machine learning. Kendra reimagines enterprise search for your websites and applications so your employees and customers can easily find the content they are looking for, even when it’s scattered across multiple locations and content repositories within your organization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Lex&lt;/strong&gt; is a service for building conversational interfaces into any application using voice and text. Lex provides the advanced deep learning functionalities of automatic speech recognition (ASR) for converting speech to text, and natural language understanding (NLU) to recognize the intent of the text, to enable you to build applications with highly engaging user experiences and lifelike conversational interactions. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Lookout&lt;/strong&gt; for Equipment analyzes the data from the sensors on your equipment (e.g. pressure in a generator, flow rate of a compressor, revolutions per minute of fans), to automatically train a machine learning model based on just your data, for your equipment – with no ML expertise required.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Lookout for Metrics&lt;/strong&gt; uses machine learning (ML) to automatically detect and diagnose anomalies in business and operational data, such as a sudden dip in sales revenue or customer acquisition rates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Lookout for Vision&lt;/strong&gt; is a machine learning (ML) service that spots defects and anomalies in visual representations using computer vision (CV). With Amazon Lookout for Vision, manufacturing companies can increase quality and reduce operational costs by quickly identifying differences in images of objects at scale. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Monitron&lt;/strong&gt; is an end-to-end system that uses machine learning (ML) to detect abnormal behavior in industrial machinery, enabling you to implement predictive maintenance and reduce unplanned downtime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Personalize&lt;/strong&gt; is a machine learning service that makes it easy for developers to create individualized recommendations for customers using their applications.&lt;br&gt;
Amazon Personalize is like having your own Amazon.com machine learning personalization team at your disposal, 24 hours a day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Polly&lt;/strong&gt; is a service that turns text into lifelike speech. Polly lets you create applications that talk, enabling you to build entirely new categories of speech-enabled products. Polly is an Amazon artificial intelligence (AI) service that uses advanced deep learning technologies to synthesize speech that sounds like a human voice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Rekognition&lt;/strong&gt; makes it easy to add image and video analysis to your applications using proven, highly scalable, deep learning technology that requires no machine learning expertise to use. With Amazon Rekognition, you can identify objects, people, text, scenes, and activities in images and videos, as well as detect any inappropriate content. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GqSdR2vD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfwjh41yekm0askwu5kv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GqSdR2vD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfwjh41yekm0askwu5kv.png" alt="Image description" width="720" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon SageMaker&lt;/strong&gt; is a fully-managed service that enables developers and data scientists to quickly and easily build, train, and deploy machine learning models at any scale. SageMaker removes all the barriers that typically slow down developers who want to use machine learning.&lt;br&gt;
SageMaker removes the complexity that holds back developer success with each of these steps. SageMaker includes modules that can be used together or independently to build, train, and deploy your machine learning models.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon SageMaker Ground Truth&lt;/strong&gt; helps you build highly accurate training datasets for machine learning quickly. SageMaker Ground Truth offers easy access to public and private human labelers and provides them with built-in workflows and interfaces for common labeling tasks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Textract&lt;/strong&gt; is a service that automatically extracts text and data from scanned documents. Amazon Textract goes beyond simple optical character recognition (OCR) to also identify the contents of fields in forms and information stored in tables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Transcribe&lt;/strong&gt; is an automatic speech recognition (ASR) service that makes it easy for developers to add speech-to-text capability to their applications. Using the Amazon Transcribe API, you can analyze audio files stored in Amazon S3 and have the service return a text file of the transcribed speech. You can also send a live audio stream to Amazon Transcribe and receive a stream of transcripts in real time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Translate&lt;/strong&gt; is a neural machine translation service that delivers fast, high-quality, and affordable language translation. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache MXNet&lt;/strong&gt; on AWS is a fast and scalable training and inference framework with an easy-to-use, concise API for machine learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The AWS Deep Learning AMIs&lt;/strong&gt; provide machine learning practitioners and researchers with the infrastructure and tools to accelerate deep learning in the cloud, at any scale. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS DeepComposer&lt;/strong&gt; is the world’s first musical keyboard powered by machine learning to enable developers of all skill levels to learn Generative AI while creating original music outputs. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS DeepLens&lt;/strong&gt; helps put deep learning in the hands of developers, literally, with a fully programmable video camera, tutorials, code, and pre-trained models designed to expand deep learning skills.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS DeepRacer&lt;/strong&gt; is a 1/18th scale race car which gives you an interesting and fun way to get started with reinforcement learning (RL). RL is an advanced machine learning (ML) technique which takes a very different approach to training models than other machine learning methods. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Inferentia&lt;/strong&gt; is a machine learning inference chip designed to deliver high performance at low cost. AWS Inferentia will support the TensorFlow, Apache MXNet, and PyTorch deep learning frameworks, as well as models that use the ONNX format.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TensorFlow on AWS&lt;/strong&gt; enables developers to quickly and easily get started with deep learning in the cloud. The framework has broad support in the industry and has become a popular choice for deep learning research and application development, particularly in areas such as computer vision, natural language understanding and speech translation.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>deeplearning</category>
      <category>aws</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Welcome Thread - v149</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 03 Nov 2021 18:18:35 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v149-4c6j</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v149-4c6j</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o72EWpXXrrFvEsZPO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o72EWpXXrrFvEsZPO/giphy.gif" alt="Jenny Slate saying Welcome" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Understanding React’s useEffect cleanup function</title>
      <author>Matt Angelosanto</author>
      <pubDate>Wed, 03 Nov 2021 18:18:31 +0000</pubDate>
      <link>https://dev.to/logrocket/understanding-reacts-useeffect-cleanup-function-1ek5</link>
      <guid>https://dev.to/logrocket/understanding-reacts-useeffect-cleanup-function-1ek5</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/chimezieinnocent/"&gt;Chimezie Innocent&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;React’s &lt;code&gt;useEffect&lt;/code&gt; cleanup function saves applications from unwanted behaviors like memory leaks by cleaning up effects. In doing so, we can optimize our application’s performance.&lt;/p&gt;

&lt;p&gt;To start off this article, you should have a basic understanding of what &lt;code&gt;useEffect&lt;/code&gt; is, including using it to fetch APIs. This article will explain the cleanup function of the &lt;code&gt;useEffect&lt;/code&gt; Hook and, hopefully, by the end of this article, you should be able to use the cleanup function comfortably.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-raw-useeffect-endraw-cleanup-function"&gt;
  &lt;/a&gt;
  What is the &lt;code&gt;useEffect&lt;/code&gt; cleanup function?
&lt;/h2&gt;

&lt;p&gt;Just like the name implies, the &lt;code&gt;useEffect&lt;/code&gt; cleanup is a function in the &lt;a href="https://blog.logrocket.com/guide-to-react-useeffect-hook/"&gt;&lt;code&gt;useEffect&lt;/code&gt;&lt;/a&gt; Hook that allows us to tidy up our code before our component unmounts. When our code runs and reruns for every render, &lt;code&gt;useEffect&lt;/code&gt; also cleans up after itself using the cleanup function.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useEffect&lt;/code&gt; Hook is built in a way that we can return a function inside it and this return function is where the cleanup happens. The cleanup function prevents memory leaks and removes some unnecessary and unwanted behaviors.&lt;/p&gt;

&lt;p&gt;Note that you don’t update the state inside the return function either:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;effect&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;cleanup&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-is-the-raw-useeffect-endraw-cleanup-function-useful"&gt;
  &lt;/a&gt;
  Why is the &lt;code&gt;useEffect&lt;/code&gt; cleanup function useful?
&lt;/h2&gt;

&lt;p&gt;As stated previously, the &lt;code&gt;useEffect&lt;/code&gt; cleanup function helps developers clean effects that prevent unwanted behaviors and optimizes application performance.&lt;/p&gt;

&lt;p&gt;However, it is pertinent to note that the &lt;code&gt;useEffect&lt;/code&gt; cleanup function does not only run when our component wants to unmount, it also runs right before the execution of the next scheduled effect.&lt;/p&gt;

&lt;p&gt;In fact, after our effect executes, the next scheduled effect is usually based on the &lt;code&gt;dependency(array)&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The dependency is an array&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dependency&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Therefore, when our effect is dependent on our prop or anytime we set up something that persists, we then have a reason to call the cleanup function.&lt;/p&gt;

&lt;p&gt;Let’s look at this scenario: imagine we get a fetch of a particular user through a user’s &lt;code&gt;id&lt;/code&gt;, and, before the fetch completes, we change our mind and try to get another user. At this point, the prop, or in this case, the &lt;code&gt;id&lt;/code&gt;, updates while the previous fetch request is still in progress.&lt;/p&gt;

&lt;p&gt;It is then necessary for us to abort the fetch using the cleanup function so we don’t expose our application to a memory leak.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-should-we-use-the-raw-useeffect-endraw-cleanup"&gt;
  &lt;/a&gt;
  When should we use the &lt;code&gt;useEffect&lt;/code&gt; cleanup?
&lt;/h2&gt;

&lt;p&gt;Let’s say we have a React component that fetches and renders data. If our component unmounts before our promise resolves, &lt;code&gt;useEffect&lt;/code&gt; will try to update the state (on an unmounted component) and send an error that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwv6C0Vh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/Warning-error.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwv6C0Vh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/Warning-error.png" alt="Warning Error" width="730" height="71"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To fix this error, we use the cleanup function to resolve it.&lt;/p&gt;

&lt;p&gt;According to React’s official documentation, “React performs the cleanup when the component unmounts. However… effects run for every render and not just once. This is why React also cleans up effects from the previous render before running the effects next time.”&lt;/p&gt;

&lt;p&gt;The cleanup is commonly used to cancel all subscriptions made and cancel fetch requests. Now, let’s write some code and see how we can accomplish these cancellations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cleaning-up-a-subscription"&gt;
  &lt;/a&gt;
  Cleaning up a subscription
&lt;/h3&gt;

&lt;p&gt;To begin cleaning up a subscription, we must first unsubscribe because we don’t want to expose our app to memory leaks and we want to optimize our app.&lt;/p&gt;

&lt;p&gt;To unsubscribe from our subscriptions before our component unmounts, let’s set our variable, &lt;code&gt;isApiSubscribed&lt;/code&gt;, to &lt;code&gt;true&lt;/code&gt; and then we can set it to &lt;code&gt;false&lt;/code&gt; when we want to unmount:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// set our variable to true&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isApiSubscribed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isApiSubscribed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// handle success&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// cancel the subscription&lt;/span&gt;
        &lt;span class="nx"&gt;isApiSubscribed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we set the variable &lt;code&gt;isApiSubscribed&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; and then use it as a condition to handle our success request. We, however, set the variable &lt;code&gt;isApiSubscribed&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; when we unmount our component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canceling-a-fetch-request"&gt;
  &lt;/a&gt;
  Canceling a fetch request
&lt;/h3&gt;

&lt;p&gt;There are different ways to cancel fetch request calls: either we use &lt;a href="https://blog.logrocket.com/axios-or-fetch-api/"&gt;&lt;code&gt;AbortController&lt;/code&gt;&lt;/a&gt; or we &lt;a href="https://github.com/axios/axios#cancellation"&gt;use Axios’ cancel token&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To use &lt;code&gt;AbortController&lt;/code&gt;, we must create a controller using the &lt;code&gt;AbortController()&lt;/code&gt; constructor. Then, when our fetch request initiates, we pass &lt;code&gt;AbortSignal&lt;/code&gt; as an option inside the request’s &lt;code&gt;option&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;This associates the controller and signal with the fetch request and lets us cancel it anytime using &lt;code&gt;AbortController.abort()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AbortController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// handle success&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// cancel the request before component unmounts&lt;/span&gt;
        &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can go further and add an error condition in our catch so our fetch request won’t throw errors when we abort. This error happens because, while unmounting, we still try to update the state when we handle our errors.&lt;/p&gt;

&lt;p&gt;What we can do is write a condition and know what kind of error we will get; if we get an abort error, then we don’t want to update the state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AbortController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// handle success&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AbortError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;successfully aborted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// handle error&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// cancel the request before component unmounts&lt;/span&gt;
    &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, even if we get impatient and navigate to another page before our request resolves, we won’t get that error again because the request will abort before the component unmounts. If we get an abort error, state won’t update either.&lt;/p&gt;

&lt;p&gt;So, let’s see how we can do the same using the Axios’ cancellation option, the Axios cancel token,&lt;/p&gt;

&lt;p&gt;We first store the &lt;code&gt;CancelToken.source()&lt;/code&gt; from Axios in a constant named source, pass the token as an Axios option, and then cancel the request anytime with &lt;code&gt;source.cancel()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CancelToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CancelToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CancelToken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;cancelToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;successfully aborted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// handle error&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// cancel the request before component unmounts&lt;/span&gt;
    &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just like we did with the &lt;code&gt;AbortError&lt;/code&gt; in &lt;code&gt;AbortController&lt;/code&gt;, Axios gives us a method called &lt;code&gt;isCancel&lt;/code&gt; that allows us to check the cause of our error and know how to handle our errors.&lt;/p&gt;

&lt;p&gt;If the request fails because the Axios source aborts or cancels, then we do not want to update the state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-the-raw-useeffect-endraw-cleanup-function"&gt;
  &lt;/a&gt;
  How to use the &lt;code&gt;useEffect&lt;/code&gt; cleanup function
&lt;/h2&gt;

&lt;p&gt;Let’s see an example of when the above error can happen and how to use the cleanup function when it does. Let’s begin by creating two files: &lt;code&gt;Post&lt;/code&gt; and &lt;code&gt;App&lt;/code&gt;. Continue by writing the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post component&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPosts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AbortController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a simple post component that gets posts on every render and handles fetch errors.&lt;/p&gt;

&lt;p&gt;Here, we import the post component in our main component and display the posts whenever we click the button. The button shows and hides the posts, that is, it mounts and unmounts our post component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App component&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShow&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showPost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// toggles posts onclick of button&lt;/span&gt;
    &lt;span class="nx"&gt;setShow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showPost&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Show Posts&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, click the button and, before the posts render, click the button again (in another scenario, it might navigate to another page before the posts render) and we get an error in the console.&lt;/p&gt;

&lt;p&gt;This is because React’s &lt;code&gt;useEffect&lt;/code&gt; is still running and trying to fetch the API in the background. When it is done fetching the API, it then tries to update the state, but this time on an unmounted component, so it throws this error:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Hbhkef---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/Error-updating-state-unmounted-component.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Hbhkef---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/Error-updating-state-unmounted-component.png" alt="Error Message From Updating The State Of An Unmounted Component" width="730" height="121"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, to clear this error and stop the memory leak, we must implement the cleanup function using any of the above solutions. In this post, we’ll use &lt;code&gt;AbortController&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post component&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPosts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AbortController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We still see in the console that even after aborting the signal in the cleanup function, the unmounting throws an error. As we discussed earlier, this error happens when we abort the fetch call.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt; catches the fetch error in the catch block and then try to update the error state, which then throws an error. To stop this update, we can use an &lt;code&gt;if else&lt;/code&gt; condition and check the type of error we get.&lt;/p&gt;

&lt;p&gt;If it’s an abort error, then we don’t need to update the state, else we handle the error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post component&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPosts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AbortController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AbortError&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;successfully aborted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we should only use &lt;code&gt;err.name === "AbortError"&lt;/code&gt; when using fetch and the &lt;code&gt;axios.isCancel()&lt;/code&gt; method &lt;a href="https://blog.logrocket.com/how-to-make-http-requests-like-a-pro-with-axios/"&gt;when using Axios.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With that, we are done!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt; has two types of side effects: those that don’t need cleanup and those that do need cleanup like the examples we’ve seen above. It is very vital we learn when and how to use the cleanup function of the &lt;code&gt;useEffect&lt;/code&gt; Hook to prevent memory leaks and optimize applications.&lt;/p&gt;

&lt;p&gt;I hope you find this article helpful and can now use the cleanup function properly.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-visibility-into-production-react-apps"&gt;
  &lt;/a&gt;
  Full visibility into production React apps
&lt;/h2&gt;

&lt;p&gt;Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;try LogRocket&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your React app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your React apps — &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;start monitoring for free&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Your first Web Application</title>
      <author>Vadim Kolobanov</author>
      <pubDate>Wed, 03 Nov 2021 18:01:40 +0000</pubDate>
      <link>https://dev.to/vadimkolobanov/ideas-for-web-applications-for-beginners-344o</link>
      <guid>https://dev.to/vadimkolobanov/ideas-for-web-applications-for-beginners-344o</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@andrewtneel?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Andrew Neel&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/first-projects?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi guys! When I started studying Web development, my biggest problem was the lack of ideas for home projects. My level was still too low for production, but theory without practice is dead. I want to share with you a list of the first projects that my Web development teacher once made for me. These projects are suitable even for those who have just started learning how to develop Web applications. There is no cool business logic, there are no complex connections in databases and the idea itself is clear from beginning to end. You just take the topic and already see the end result. Believe me, it helps a lot to get started. You will get a lot of experience in bringing your idea to the finish line, you will feel all the steps of working on a real project. But you will do it as a hobby, for yourself, without worrying about the quality or timing, for the requirements of the customer or employer.&lt;/p&gt;

&lt;p&gt;Let's start!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An application for creating text RPGs.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The application contains small articles that can be linked using the interface. After receiving the linked text, the application generates a file (book) with page numbers, allowing you to switch between chapters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;An application that allows you to store a lecture plan modularly&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a certain set of files is attached to each lesson, a many-to-many connection, contains a tag subsystem, a search.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Scrapper of data from the site with saving in the database&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make a simple request to the site and get the data from its page. Implement this through a web interface with the ability to substitute different links and change tags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pomodoro + telegram bot + vk bot&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No comments =) it's so fun!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;News site(blog)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are many tutorials on how to make a blog on Django, for example. Even Django's official documentation contains blog creation training. This is the simplest project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Search for deals&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a simple web application that notifies when the desired product for you will be put up for sale at a good price. You can use the web scraper to extract the product page and notify you of the price change. The problem is that it will be difficult to find test data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cost tracking&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a simple interface that you can use to add and break down your expenses by category. Generate a monthly report based on incoming data and write custom notifications like "spending too much on coffee... as always."&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Financial Independence Calculator&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In essence, financial independence is the preservation and investment of income (investment) as much as possible, which allows you not to need work to get money. Although many financially independent people continue to work, they can afford to work on what they like to do, and not what they pay more for. Build a tool to calculate how far you are from financial independence based on your current savings, investments, income, retirement accounts and expenses. Examples: FIREcalc, cFIREsim.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The "breaker" of bill&lt;/strong&gt; (proposed implementation: mobile application).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a simple tool to help you and your friends split the bill when you have lunch together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Application for "micro-learning"&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build an application that sends you one page daily on the topic you want to study. It can be a random page from Wikipedia, from React documentation, about the kanji letter, or a page from the CIA World Factbook. It is assumed that it is possible to create a program for micro-education.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tryst Planner&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The most difficult thing about dating and long-term relationships is deciding where to go on a date. Build a tool that looks at restaurant reviews, event calendars, and collects other data to come up with ideas. (parsing google places or something like that) The task is much more difficult than it seems at first glance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Some ideas look better on mobile. But we are learning). I hope someone will be able to find a suitable interesting idea here. I wanted to share not the same type of ideas from the Internet, but really exciting projects that will make you think, invent, send your imagination flying! I wish you success, my friends!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
