<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Run SQL in Slack</title>
      <author>Katie Hindson</author>
      <pubDate>Tue, 24 Nov 2020 16:17:20 +0000</pubDate>
      <link>https://dev.to/turinglovesdeathmetal/run-sql-in-slack-3lkm</link>
      <guid>https://dev.to/turinglovesdeathmetal/run-sql-in-slack-3lkm</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ziHgrgn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rvexaz0nvcj6lv3ae0wo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ziHgrgn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rvexaz0nvcj6lv3ae0wo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-sql-in-slack-and-bring-the-latest-analytics-into-the-conversation" class="anchor"&gt;
  &lt;/a&gt;
  Write SQL in Slack and bring the latest analytics into the conversation.
&lt;/h3&gt;

&lt;p&gt;In my first week at Hubble, a teammate shared a SQL query he'd run in Slack. &lt;/p&gt;

&lt;p&gt;Since I'd just joined, I hadn't set myself up with our company's database yet (and had spent a bit too much time getting my dev environment lookin' right üíÅ‚Äç‚ôÄÔ∏è). So, when I tried to open what he'd shared, it took me ~30 minutes before I could actually see the results. &lt;/p&gt;

&lt;p&gt;This got us to talking: how annoying was it that we couldn't just run SQL and share the results straight in Slack? &lt;/p&gt;

&lt;p&gt;This was a problem I'd run into before. At least once a week, I'll have to share SQL results with engineers in Slack for debugging, or invest ~ 1 hr of time getting someone set up with BigQuery and understanding the UI just so that they can re-run really specific queries I've written for them. &lt;/p&gt;

&lt;p&gt;A few other companies we'd talked to had also mentioned some of their frustrations in quick and easy SQL collaboration. Specifically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A fitness company wants to make their daily growth metrics visible by all the team each day, so they run SQL queries and copy the outputs to Slack each morning, where they know all team members will see it rather than logging into a BI dashboard.&lt;/li&gt;
&lt;li&gt;Another data analyst was trying to collaborate in SQL with their marketing director. They had to do a bunch of copy-pasting of code and sharing screenshots of the SQL output, making it really slow and difficult to actually identify any problems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this got us to thinking: &lt;strong&gt;why not bring SQL &lt;em&gt;into&lt;/em&gt; Slack?&lt;/strong&gt; (Because everyone needs a reason to spend more time in Slack, right?)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-built-beacon-so-you-can-collaborate-on-sql-with-your-team-directly-in-slack" class="anchor"&gt;
  &lt;/a&gt;
  We built Beacon so you can collaborate on SQL with your team, directly in Slack!
&lt;/h3&gt;

&lt;p&gt;With Beacon, I open Slack and run a query directly in Slack where the output is shared with my team. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t_dsMiKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://uploads-ssl.webflow.com/5eaf203a6af9c85f55e39a9a/5fad4e650f8dca25293794b3_ezgif-4-3b1cd25cc2c6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t_dsMiKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://uploads-ssl.webflow.com/5eaf203a6af9c85f55e39a9a/5fad4e650f8dca25293794b3_ezgif-4-3b1cd25cc2c6.gif" alt="https://uploads-ssl.webflow.com/5eaf203a6af9c85f55e39a9a/5fad4e650f8dca25293794b3_ezgif-4-3b1cd25cc2c6.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beacon makes the output from any SQL query super accessible to everyone in your team by posting the results right in Slack.&lt;/p&gt;

&lt;p&gt;And, collaborating in SQL becomes a breeze because you can save your favourite queries and share them with your team (because we all know, SQL is more fun with friends üë≠). All of your saved queries are automatically available to your whole team, so everyone has access to what they need, when they need it, at the click of a button &lt;strong&gt;all in Slack&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#try-using-beacon-to-share-kpis-save-common-queries-and-more" class="anchor"&gt;
  &lt;/a&gt;
  Try using Beacon to share KPIs, save common queries, and more!
&lt;/h3&gt;

&lt;p&gt;You can install Beacon into your Slack workspace using this link: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://slack.com/oauth/v2/authorize?client_id=1207722259383.1462138656839&amp;amp;scope=commands,users:read,users:read.email,team:read&amp;amp;user_scope=dev.to"&gt;Add to Slack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beacon connects to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Snowflake&lt;/li&gt;
&lt;li&gt;Bigquery&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;Redshift&lt;/li&gt;
&lt;li&gt;Rockset&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shoot me a message at &lt;a href="mailto:katie@gethubble.io"&gt;katie@gethubble.io&lt;/a&gt; if you have any questions or feedback, we'd love to hear from you üòä&lt;/p&gt;

</description>
      <category>sql</category>
      <category>productivity</category>
      <category>database</category>
      <category>analytics</category>
    </item>
    <item>
      <title>How to keep your local changes while pulling the code</title>
      <author>Saumya Agnihotri</author>
      <pubDate>Tue, 24 Nov 2020 16:11:58 +0000</pubDate>
      <link>https://dev.to/saumyaagnihtori/how-to-keep-your-changes-while-pulling-the-code-381c</link>
      <guid>https://dev.to/saumyaagnihtori/how-to-keep-your-changes-while-pulling-the-code-381c</guid>
      <description>&lt;p&gt;If you are working on a project in a team and you have used GitHub as your version control system then you might have come across a situation where you're working on some feature but the work hasn't finished yet and there are some update from other member and now you need to pull the code again from remote repository.&lt;/p&gt;

&lt;p&gt;Now a problem arises here, while you're pulling the code your changes (work in progress) will be overridden and you will lose your code that wasn't committed. So in such scenarios, you can use a git command known as git stash.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-git-stash" class="anchor"&gt;
  &lt;/a&gt;
  What is Git Stash?
&lt;/h2&gt;

&lt;p&gt;Git stash will solve the problem faced in the above scenario. You can keep your changes similar to keeping a draft and then after pulling the remote repo code you can go back to draft version and apply the changes again.&lt;/p&gt;

&lt;p&gt;So the usual flow will go like this :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are working on some unfinished feature and you need to save this (draft)&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;          git stash
           or 
          git stash save "feature X"
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now you pull the code&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;          git pull origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restore the work you were doing for feature X using below command&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;          git stash apply
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it. You are done ‚úÖ&lt;/p&gt;

&lt;p&gt;For learning more about git stash you can refer to these resources :&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links-" class="anchor"&gt;
  &lt;/a&gt;
  Links -
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=DeU6opFU_zw&amp;amp;feature=youtu.be"&gt;Git STASH Explained in Simple Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.atlassian.com/git/tutorials/saving-changes/git-stash"&gt;Git Stash tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>todayilearned</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The best way to learn React is.. to learn Angular?!</title>
      <author>Michael Di Prisco</author>
      <pubDate>Tue, 24 Nov 2020 15:23:37 +0000</pubDate>
      <link>https://dev.to/cadienvan/the-best-way-to-learn-react-is-to-learn-angular-4f08</link>
      <guid>https://dev.to/cadienvan/the-best-way-to-learn-react-is-to-learn-angular-4f08</guid>
      <description>&lt;h1&gt;
  &lt;a href="#intro-im-an-angular-developer-and-the-title-is-not-clickbait" class="anchor"&gt;
  &lt;/a&gt;
  Intro - I'm an Angular developer and the title is not click-bait.
&lt;/h1&gt;

&lt;p&gt;I've been working with Angular (From V4 to V9) for at least 1.5 years now and I've been enjoying every bit of it.&lt;/p&gt;

&lt;p&gt;In this post I'll try to explain my reasons behind moving from Angular to React, and why &lt;strong&gt;I'll probably come back&lt;/strong&gt;, in certain cases.&lt;/p&gt;

&lt;p&gt;From routing to dependency injection, from TypeScript support to services, I worked in both big and small projects and always felt empowered by the awesome toolkit provided by Angular.&lt;/p&gt;

&lt;p&gt;I had also a chance to look at state management via NgRx and NgXs and enjoyed them also.&lt;/p&gt;

&lt;p&gt;I feel like I'm not an Angular expert, but I can surely bring a nice project from idea to deployment with confidence.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#choosing-react" class="anchor"&gt;
  &lt;/a&gt;
  Choosing React.
&lt;/h1&gt;

&lt;p&gt;One day a call arrived and I decided to move.&lt;br&gt;
I'll start a new job at a new office in January and had a chance to choose my front-end stack as I'll be responsible for creating and training a new team for some new big projects to be developed during the next year, and felt like I could give another framework a try as I saw 99% of what I could see in Angular and wanted to learn something different.&lt;/p&gt;

&lt;p&gt;I had a look at Vue, as I've been working a little with it in 2018, but felt like, if I had to move, better do it for the most popular one, so I went for React.&lt;/p&gt;

&lt;p&gt;P.S. I didn't decide to try React because it was simply &lt;em&gt;the most popular&lt;/em&gt;, but because being such allows me to have a wider developer audience to get information and tools from. It's the first time for me as a team leader, so I felt having a little more help from the community could only help.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem" class="anchor"&gt;
  &lt;/a&gt;
  The problem.
&lt;/h1&gt;

&lt;p&gt;When I started studying Angular, coming from a vanilla JS - Vue.js background, I clearly felt overwhelmed by the steep learning curve everyone mentions when talking about this framework, and I needed ~3 months of studying in my free time to grab the fundamentals and start doing something good (P.S. Thank you Mosh Hamedani for your incredible &lt;a href="https://codewithmosh.com/p/angular-master-class"&gt;course&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;As someone who never looked at a single React snippet, I thought it could be equally hard to grasp and master this framework and started to feel a little doubtful about my decision.&lt;/p&gt;

&lt;p&gt;But, nonetheless, I decided I could give it a try.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#first-steps-with-react" class="anchor"&gt;
  &lt;/a&gt;
  First steps with React
&lt;/h1&gt;

&lt;p&gt;As soon as I started my new course on React (Thank you Mosh, again!) I realized the length was different (We are talking about ~75% length reduction in the course) and thought&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Well, I guess I could give it a try, see what it's all about, and then decide if I want to move to React or stick with Angular&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I started as everyone else did, I guess.&lt;/p&gt;

&lt;p&gt;Reactivity in React, a simple counter, child components, props, prop drilling, class vs function component, state management, hooks, and.. stop.&lt;/p&gt;

&lt;p&gt;Yes, you read that right, STOP! That's React.&lt;br&gt;
Of course, I know React has thousands of features coming from official and unofficial libraries, routing systems, global state managers, GraphQL clients, etc., but nonetheless React is just that, and if you want to start with some simple stuff, that's all it takes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-michael-how-much-time-did-it-take-for-you-to-learn-this-stuff" class="anchor"&gt;
  &lt;/a&gt;
  So, Michael, how much time did it take for you to learn this stuff?
&lt;/h1&gt;

&lt;p&gt;As I was running like Flash through the course, I realized one thing: Every framework shares a fair 50-60% of fundamentals with every other, so if you grasp them in Angular, you can reuse the same mental model for React. So what's my answer? &lt;strong&gt;3 hours&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Yes, I'm not joking, I just needed 3 hours to learn it. And wanna know the most incredible thing?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#i-took-the-best-from-angular-and-brought-it-with-me-into-react-with-no-hassle" class="anchor"&gt;
  &lt;/a&gt;
  I took the best from Angular and brought it with me into React with no hassle.
&lt;/h1&gt;

&lt;p&gt;I don't wanna bother you with code snippets and long discussions about which one is better. &lt;strong&gt;Angular and React solve different problems in different ways&lt;/strong&gt;. But, to provide an understandable example, everyone who has ever worked with Angular knows the intrinsic problem-solving power of services, so bringing them with me in React was an easy and powerful way to solve some of the problems I was facing in my sample apps.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#but-react-is-awesome-by-itself-too" class="anchor"&gt;
  &lt;/a&gt;
  But React is awesome by itself too.
&lt;/h1&gt;

&lt;p&gt;Yeah, I know, React purists are already taking the pitchforks so let me clear out one thing: React is awesome by itself, even without things taken from Angular. Of course, I'm really enjoying the simplicity of React compared to the structured, more secure but clearly more verbose and harder way of thinking and working in Angular. React is simply javascript with a small but clearly understandable pinch of magic.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ok-michael-so-the-question-is-will-you-move-to-react" class="anchor"&gt;
  &lt;/a&gt;
  Ok Michael, so the question is: Will you move to React?
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes and no.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I feel really good when I work with React, as it's easy, fast, reactive and does everything I want it to do letting me understand every bit of what I'm doing, instead of the fog you have in Angular in certain situations (Of course, there are many world-class Angular experts here on dev.to, but that's not the case for 90+% of front-end developers who approach Angular on a daily basis and can't easily grasp the inner bits and parts of Dependency Injection and Lazy Routing, for example).&lt;/p&gt;

&lt;p&gt;But at the same time, Angular solves different problems, hardly solvable by React without a good dose of patience and self-control, so I guess I'll use both, depending on the occasion.&lt;/p&gt;

&lt;p&gt;We are reaching a point where front-end developers are not expected to know just vanilla js and a framework, but to grasp the fundamentals of the whole industry, and I guess having two frameworks in my toolkit could solve me many issues in the future.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-do-you-think" class="anchor"&gt;
  &lt;/a&gt;
  What do you think?
&lt;/h1&gt;

&lt;p&gt;If you follow me, you know I always ask people to comment and provide their opinions, so feel free to share yours and let's discuss them together!&lt;/p&gt;

</description>
      <category>react</category>
      <category>angular</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How to Improve Lighthouse Score - Search Engine Optimization (SEO)</title>
      <author>Linda</author>
      <pubDate>Tue, 24 Nov 2020 14:55:27 +0000</pubDate>
      <link>https://dev.to/lindaojo/how-to-improve-lighthouse-score-search-engine-optimization-seo-20jh</link>
      <guid>https://dev.to/lindaojo/how-to-improve-lighthouse-score-search-engine-optimization-seo-20jh</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yOGvFAb---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wucwg72vpnxex3js2lnj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yOGvFAb---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wucwg72vpnxex3js2lnj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the first article of the Lighthouse Series üéâüéâüéâ&lt;/p&gt;

&lt;p&gt;Don't know how to check your website's Lighthouse score? No problem, use my last article &lt;a href="https://www.lindaojo.com/blog/how-to-check-lighthouse-scores-on-chrome-and-firefox/"&gt;How to Check Lighthouse Scores using Chrome or Firefox &lt;/a&gt; as a guide.&lt;/p&gt;

&lt;p&gt;In this post, we will be going through tips to improve your Lighthouse SEO score and the overall visibility of your website.&lt;/p&gt;

&lt;h3&gt;What is SEO?&lt;/h3&gt;

&lt;p&gt;Search Engine Optimization (SEO) simply means the process of improving your site to increase its visibility for relevant searches. The higher your SEO score, the better visibility your web pages have in search results.&lt;/p&gt;

&lt;p&gt;Lighthouse carries various audits on your website, these audits can be passed by making a few simple changes. Want to know what they are? Keep reading. &lt;/p&gt;

&lt;h3&gt;Add a title element&lt;/h3&gt;

&lt;p&gt;Adding a title element is very important because search engines such as Google rely on it heavily to determine if a page is relevant to their search. It also gives screen reader users an overview of the page. The title element is usually added to the head of an &lt;span class="code-word"&gt;index.html&lt;/span&gt; file as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Linda Ojo&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;Add necessary meta tags&lt;/h3&gt;  

&lt;p&gt;Meta tags provide information about a webpage. The meta tags don‚Äôt appear on the page itself, but only in the page‚Äôs source code. For starters, your website should have the meta tags shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; //optimize your webpage for smaller screens
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Linda Ojo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Articles on frontend development written by Linda Ojo, Frontend Developer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; //included in search results to concisely summarize page content.
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"keywords"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"HTML, CSS, JavaScript, Frontend, Web Development"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You could also customise the way your webpage link looks on social media platforms such as Twitter and Facebook. Though this does &lt;strong&gt;not&lt;/strong&gt; affect your lighthouse score, it's recommended.&lt;/p&gt;

&lt;p&gt;Below are meta tags I use to customise links to my website&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Facebook, Whatsapp --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:site_name"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Linda Ojo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Linda Ojo's Personal website and Blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Articles on frontend development written by Linda Ojo, Frontend Developer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"logo.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https//www.lindaojo.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

     &lt;span class="c"&gt;&amp;lt;!-- Twitter --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Linda Ojo's Personal website and Blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Articles on frontend development written by Linda Ojo, Frontend Developer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"logo.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"twitter:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https//www.lindaojo.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:card"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"summary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using the meta tags above, a link to my website on Twitter looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mo8hHr1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1606058540/twitter-card_mpspzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mo8hHr1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1606058540/twitter-card_mpspzu.png" alt="twitter card for website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Size interactive elements properly&lt;/h3&gt;

&lt;p&gt;Interactive elements such as links and buttons should be sized and spaced properly. This is very important as search engines rank pages based on how mobile-friendly they are.&lt;/p&gt;

&lt;p&gt;These elements should have a minimum size of 48px by 48px and a spacing of at least 8px in all directions.&lt;/p&gt;

&lt;h3&gt;Links should have descriptive text&lt;/h3&gt;

&lt;p&gt;Lighthouse flags generic link texts such as "click here", "go", "start", "more", "learn more" e.t.c. Using descriptive text for anchor elements will help search engines understand your content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Don't  --&amp;gt;&lt;/span&gt;
‚ùå &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;To read more articles about JavaScript, &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/articles"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;click here&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt; 

&lt;span class="c"&gt;&amp;lt;!-- Do --&amp;gt;&lt;/span&gt;
‚úÖ &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/articles"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Read more JavaScript articles&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;Add alternative text to images&lt;/h3&gt;

&lt;p&gt;All images should have the &lt;span class="code-word"&gt;alt&lt;/span&gt; attribute which contains a short descriptive text. If the image acts as decoration and does not provide any useful content, give it an empty &lt;span class="code-word"&gt;alt=""&lt;/span&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Do --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"background.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!--decorative image --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"dancers.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"4 female dancers in yellow dresses"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- informative image--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;Use legible font sizes for all screen sizes&lt;/h3&gt;

&lt;p&gt;The minimum accepted font size for text is 12px. Text with a font size lower than 12px forces most mobile users to zoom in in order to read. There are edge cases where small fonts are needed, these small fonts should not make up more than 40% of a page's text.&lt;/p&gt;

&lt;h3&gt;Use "hreflang" links to specify different Versions of a website&lt;/h3&gt;

&lt;p&gt;&lt;span class="code-word"&gt;hreflang&lt;/span&gt; links enables search engines to select the right version of a website based on the language and region of the user. Lighthouse checks for &lt;span class="code-word"&gt;hreflang&lt;/span&gt; links in the page's head and in its &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Response_header"&gt;response headers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class="code-word"&gt;hreflang&lt;/span&gt; links should be added to the head of your webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"alternate"&lt;/span&gt; &lt;span class="na"&gt;hreflang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;    //English
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"alternate"&lt;/span&gt; &lt;span class="na"&gt;hreflang=&lt;/span&gt;&lt;span class="s"&gt;"es"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://es.example.com"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // Spanish
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"alternate"&lt;/span&gt; &lt;span class="na"&gt;hreflang=&lt;/span&gt;&lt;span class="s"&gt;"de"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://de.example.com"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; // German
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For pages that allow users to select their language, use the x-default keyword:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"alternate"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com"&lt;/span&gt; &lt;span class="na"&gt;hreflang=&lt;/span&gt;&lt;span class="s"&gt;"x-default"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;The tips above will definitely boost your lighthouse SEO score and improve the overall visibility of your website on the internet.&lt;/p&gt;

</description>
      <category>performance</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build an Unsplash Photo Search App Using Vanilla JavaScript</title>
      <author>Tolu Agboola</author>
      <pubDate>Tue, 24 Nov 2020 14:51:55 +0000</pubDate>
      <link>https://dev.to/toluagboola/build-an-unsplash-photo-search-app-using-vanilla-javascript-441j</link>
      <guid>https://dev.to/toluagboola/build-an-unsplash-photo-search-app-using-vanilla-javascript-441j</guid>
      <description>&lt;p&gt;In this article, I will explain how I used JavaScript to build an image search app. It fetches and displays images from &lt;a href="//unsplash.com"&gt;Unsplash&lt;/a&gt; based on the user's search query. This is one of several personal projects I've built to enable me to gain some practice on all I've been learning. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PjMb4zck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dipyaby4f/image/upload/v1604092951/2020-10-13_12.15.33_e9ecfae75723.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PjMb4zck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dipyaby4f/image/upload/v1604092951/2020-10-13_12.15.33_e9ecfae75723.png" alt="My Unsplash search app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-markup-and-styles" class="anchor"&gt;
  &lt;/a&gt;
  Setting up the markup and styles
&lt;/h2&gt;

&lt;p&gt;I thought about what I wanted the page to look like and decided on a simple white page (as shown above) with the input and submit button at the top, and the results in a grid formation. You can view the whole code below:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Tolu-Agboola/embed/WNxOoqZ?height=600&amp;amp;default-tab=html&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tackling-the-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Tackling the JavaScript
&lt;/h2&gt;

&lt;p&gt;I first globally stored references to the form and some other HTML elements that I was going to work with. I would still select others within functions later. I also added a &lt;code&gt;submit&lt;/code&gt; event listener to the form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.js-form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.js-next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prevBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.js-prev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;resultStats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.js-result-stats&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then I defined the callback function &lt;code&gt;handleSubmit&lt;/code&gt; in the event listener as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.js-search-input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;searchQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;fetchResults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This function takes an event as its argument and first of all prevents the page from reloading using the &lt;code&gt;preventDefault()&lt;/code&gt; method. It then stores the value of the search input in &lt;code&gt;inputValue&lt;/code&gt; and removes any whitespace with the &lt;code&gt;trim()&lt;/code&gt; method. It stores the trimmed input value in &lt;code&gt;searchQuery&lt;/code&gt; and passes it as an argument to the &lt;code&gt;fetchResults&lt;/code&gt; function which is being called there. I logged the value of &lt;code&gt;searchQuery&lt;/code&gt; to the console to make sure the right value was being passed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetch-results-from-unsplash" class="anchor"&gt;
  &lt;/a&gt;
  Fetch results from Unsplash
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;searchUnsplash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://api.unsplash.com/search/photos?query=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;client_id=YOUR_ACCESS_KEY`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchResults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;searchUnsplash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;displayResults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Failed to search Unsplash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To be able to use Unsplash's API, you have to create a developer account. Only after that do you get your unique API key with which you can access the photos on the site. An AJAX request is made to Unsplash using a URL containing the endpoint and the relevant query parameters. More information on this is provided in the &lt;a href="//unsplash.com/documentation"&gt;Documentation&lt;/a&gt; page on their website.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;searchUnsplash&lt;/code&gt; takes one parameter (&lt;code&gt;searchQuery&lt;/code&gt;), which is inserted into the endpoint as the value of the &lt;code&gt;query&lt;/code&gt; query parameter. Now, the URL is stored in a variable &lt;code&gt;endpoint&lt;/code&gt; which is passed as a parameter to &lt;code&gt;fetch&lt;/code&gt;. The &lt;code&gt;fetch()&lt;/code&gt; method takes one argument, the path to the resource you want to fetch, which is stored in &lt;code&gt;endpoint&lt;/code&gt; in this case. It always returns a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promise&lt;/a&gt;. Now, if the response is 200 OK, it is parsed as JSON which is stored in the &lt;code&gt;json&lt;/code&gt; variable. The result is logged to the console so as to view the contents of the JSON data.&lt;/p&gt;

&lt;p&gt;Both functions above are asynchronous which means that the &lt;code&gt;await&lt;/code&gt; keyword can be used to pause the execution of the function until a promise is resolved. This is achieved by placing the &lt;code&gt;async&lt;/code&gt; keyword before declaring a function. I used a &lt;code&gt;try...catch&lt;/code&gt; block in the &lt;code&gt;fetchResults&lt;/code&gt; function. The &lt;code&gt;try&lt;/code&gt; block 'tries' to execute the code within it and, should there be an exception or error, the &lt;code&gt;catch&lt;/code&gt; block saves the day and responds appropriately with whatever code is written within it. This is a control flow mechanism which prevents the code from crashing if an error occurs while fetching the results. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#display-the-results-on-the-page" class="anchor"&gt;
  &lt;/a&gt;
  Display the results on the page
&lt;/h3&gt;

&lt;p&gt;The next thing is to display the results on the page. If you check the JSON data looged to the console, you will find that it contains several properties which have different contents.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K4cSgRjv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dipyaby4f/image/upload/v1604239194/2020-11-01_14.57.12_5a4befeb5bd3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K4cSgRjv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dipyaby4f/image/upload/v1604239194/2020-11-01_14.57.12_5a4befeb5bd3.png" alt="Chrome console containing raw JSON data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;results&lt;/code&gt; property is an array in which the search results are contained. Each search result is an object and can be accessed using either dot or bracket notation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayResults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchResults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.js-search-results&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;searchResults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;small&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unsplashLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;photographer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;photographerPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;searchResults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertAdjacentHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;beforeend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;`&amp;lt;div&amp;gt;
                &amp;lt;a href="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;unsplashLink&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" target="_blank"&amp;gt;
                    &amp;lt;div class="result-item" style="background-image: url(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;);"&amp;gt;&amp;lt;/div&amp;gt;
                &amp;lt;/a&amp;gt;
                &amp;lt;p class="photographer-name"&amp;gt;
                    &amp;lt;a href="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;photographerPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" target="_blank" style="color: black; text-decoration: none;"&amp;gt;Photo by &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;photographer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/a&amp;gt;
                &amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;`&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;totalResults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;resultStats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`About &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;totalResults&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; results found`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;An empty &lt;code&gt;div&lt;/code&gt; with a class of &lt;code&gt;search-results&lt;/code&gt; was already created in the HTML file. It is then selected in the JS file within a new function called &lt;code&gt;displayResults&lt;/code&gt; which takes a JSON object as an argument. The &lt;code&gt;textContent&lt;/code&gt; is also set to an empty string to clear all previous results.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H-uCtHCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dipyaby4f/image/upload/v1606212496/2020-11-24_10.28.47_9df83f297e27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H-uCtHCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dipyaby4f/image/upload/v1606212496/2020-11-24_10.28.47_9df83f297e27.png" alt="JSON Object"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, the &lt;code&gt;results&lt;/code&gt; array is iterated over using the &lt;code&gt;forEach&lt;/code&gt; method. Within the callback function, the nested object can be accessed through the &lt;code&gt;result&lt;/code&gt; parameter. If you study the above image closely, you will find that each object in the array contains several keys such as &lt;code&gt;links&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;urls&lt;/code&gt;. These can be used to access different categories of information on the object in question.&lt;/p&gt;

&lt;p&gt;The first lines within the callback function are variables in which the different values needed are stored. They were all accessed using dot notation and include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the image url&lt;/li&gt;
&lt;li&gt;the link to the image on Unsplash&lt;/li&gt;
&lt;li&gt;the name of the photographer&lt;/li&gt;
&lt;li&gt;the link to the photographer's Unsplash profile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Afterwards, each result is inserted into the &lt;code&gt;searchResults&lt;/code&gt; element using the &lt;a href="https://developer.mozilla.org/en/docs/Web/API/Element/insertAdjacentHTML"&gt;insertAdjacentHTML&lt;/a&gt; method. This method takes two arguments: the position of the element, and the text to be parsed as HTML. Template literals are used in the second argument because of the parts of the code that will be changing constantly. These are represented by placeholders in the code. The function &lt;code&gt;displayResults&lt;/code&gt; is then called in &lt;code&gt;fetchResults&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;Each image is set to be the background of its container, and is also a link to its Unsplash page. The name of the photographer, which links to his/her Unsplash profile, is placed right under the image and the result display was styled using CSS Grid.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#show-a-loading-indicator" class="anchor"&gt;
  &lt;/a&gt;
  Show a loading indicator
&lt;/h3&gt;

&lt;p&gt;This is something to be displayed when a search query is being executed to let the user know that the operation is still in progress. I selected a spinner from &lt;a href="https://tobiasahlin.com/spinkit/"&gt;this website&lt;/a&gt; and pasted the HTML and CSS into my code. A referece to the spinner was stored globally in a variable &lt;code&gt;spinner&lt;/code&gt; and then the &lt;code&gt;fectchResults&lt;/code&gt; function was updated as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spinner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.js-spinner&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchResults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;spinner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;searchUnsplash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total_pages&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;displayResults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Failed to search Unsplash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;spinner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this tutorial, we have seen how an interactive application can be built using JavaScript. I hope you learnt a lot from it. &lt;/p&gt;

&lt;p&gt;I will be writing a continuation to this tutorial very soon, and it will contain how I added other features like pagination and increasing the limit of results shown per page etc. &lt;/p&gt;

&lt;p&gt;Also, I'm currently looking for an internship / junior role. Any information on openings will be really appreciated.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>An Introduction to Web Analytics</title>
      <author>Stephanie Morillo</author>
      <pubDate>Tue, 24 Nov 2020 14:46:00 +0000</pubDate>
      <link>https://dev.to/radiomorillo/an-introduction-to-web-analytics-2cip</link>
      <guid>https://dev.to/radiomorillo/an-introduction-to-web-analytics-2cip</guid>
      <description>&lt;p&gt;If you‚Äôre a developer running your own site, or you have a blog hosted on a blogging platform, you‚Äôre probably aware of web analytics. Content publishers rely on web analytics to understand how audiences are engaging with their content and to spot trends or patterns that will help them improve baseline metrics. For the purposes of this post, we‚Äôll define web analytics and metrics as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Web (or site) analytics&lt;/strong&gt;: the collection, analysis, and reporting of data compiled from a website for the purpose of research and optimization. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Metrics&lt;/strong&gt;: something that you want to measure, often (but not always) correlated with an action a user takes on the site or a page. Well known metrics include ‚Äúpage views‚Äù, ‚Äúunique visits‚Äù, and ‚Äúclick-through rate‚Äù. While the definitions of these metrics are more or less the same across web analytics tools and services, the way they‚Äôre calculated depends on the platform in question.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you‚Äôre unsure about what web analytics are or what metrics you should pay attention to, this post is for you. Resources for additional reading will be available at the end of this post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-questions-to-guide-how-you-look-at-web-analytics" class="anchor"&gt;
  &lt;/a&gt;
  Use Questions to Guide How You Look at Web Analytics
&lt;/h2&gt;

&lt;p&gt;What makes web analytics useful is its ability to help you optimize your site and content strategy. Without these questions, analytics are an otherwise nice-to-have feature that you might not use. Analytics are only as reliable as the questions you ask and taking action based on your findings.&lt;/p&gt;

&lt;p&gt;I only care about the data in aggregate, meaning, I look at what my total visitors do, not what an individual user did or did not do. I don‚Äôt run ads, I don‚Äôt retarget users on different platforms, and I don‚Äôt personalize my site content. I segment users in my email marketing platform in order to send relevant newsletters to specific subscribers and to archive inactive subscribers.&lt;/p&gt;

&lt;p&gt;Here are some questions I look to my web analytics to answer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What keywords are people using to find my content in organic search?&lt;/li&gt;
&lt;li&gt;How do people find my blog?&lt;/li&gt;
&lt;li&gt;After reading a post, where on my site do people go to next?&lt;/li&gt;
&lt;li&gt;What are the biggest entry points on my site?&lt;/li&gt;
&lt;li&gt;What types of content perform the best?&lt;/li&gt;
&lt;li&gt;Which pages are underperforming?&lt;/li&gt;
&lt;li&gt;How many people are opening my newsletters?&lt;/li&gt;
&lt;li&gt;Which links in my newsletters receive the most clicks?&lt;/li&gt;
&lt;li&gt;Are there trends or patterns among these links that I should be aware of?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start crafting questions or problem statements to help you maximize the value of your web analytics. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-web-analytics-can-amp-cant-tell-you" class="anchor"&gt;
  &lt;/a&gt;
  What Web Analytics Can &amp;amp; Can‚Äôt Tell You
&lt;/h2&gt;

&lt;p&gt;As a content creator, web analytics is a tool that will help you gauge how well your content is performing. Web analytics can tell you what users do when they land on your post, what they do next, and how they get there. You can use this information to optimize your content calendar for high-performing topics, or to improve your search engine optimization strategy if you notice you get little traffic coming from search engines. &lt;/p&gt;

&lt;p&gt;Web analytics cannot tell you why a user took a certain path, why a bounce rate is so high, or why a blog post performed lower than expected. You can infer by looking at the data over time and identify patterns of behavior, by formulating a hypothesis based on what you see and running an experiment (A/B test), or by conducting user research like usability testing and user interviews.&lt;/p&gt;

&lt;p&gt;Also ‚Äì different platforms may only analyze a portion of the available data, especially if you‚Äôre using it for free (Google Analytics does this for sites using its free version) or paying for a premium service but by tier (Matomo Analytics prices its plans according to a monthly visitor cap). Blogging platforms that have their own native web analytics may give you only a limited set of metrics to look at; for example, Hashnode and DEV Community will show you total pageviews, number of comments, and number of ‚Äúreactions‚Äù, i.e. likes, but that‚Äôs it. &lt;/p&gt;

&lt;p&gt;Cookies (otherwise known as HTML cookies or site cookies) impact the data your analytics tools are able to collect. If you use persistent cookies, you may be required to display a cookie banner on your site (there are exceptions; look at your web analytics provider for more details). Also, blogs hosted on platforms like Hashnode and DEV Community are governed by the platform‚Äôs cookie compliance policies). Users may have ‚Äúdo not track‚Äù settings enabled, and whenever a user clears their cache, they‚Äôre treated as a unique visitor the next time they visit your site. These aren‚Äôt things to lose sleep over but important to keep in mind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-metrics-and-user-data" class="anchor"&gt;
  &lt;/a&gt;
  Types of Metrics and User Data
&lt;/h2&gt;

&lt;p&gt;Web analytics tools also calculate metrics. Here are some common metrics by analytics tool (this is not an exhaustive list):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web analytics metrics&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Total &amp;amp; unique visits &lt;/li&gt;
&lt;li&gt;Total &amp;amp; unique page views&lt;/li&gt;
&lt;li&gt;New vs returning visitors&lt;/li&gt;
&lt;li&gt;Traffic sources&lt;/li&gt;
&lt;li&gt;Bounce rate &lt;/li&gt;
&lt;li&gt;Exit rate&lt;/li&gt;
&lt;li&gt;Click-through rate&lt;/li&gt;
&lt;li&gt;Time on page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Social media analytics metrics&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Total number of impressions&lt;/li&gt;
&lt;li&gt;Number of likes&lt;/li&gt;
&lt;li&gt;Number of comments&lt;/li&gt;
&lt;li&gt;Number of retweets/reposts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Email marketing metrics&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Total number of recipients&lt;/li&gt;
&lt;li&gt;Number of opens&lt;/li&gt;
&lt;li&gt;Open rate &lt;/li&gt;
&lt;li&gt;Number of clicks&lt;/li&gt;
&lt;li&gt;Click-through rate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also add your own metrics to these platforms; many companies have metrics that correspond with different funnels and will make sure their analytics includes all the metrics they need to track.&lt;/p&gt;

&lt;p&gt;How about user data? If you‚Äôre using a robust analytics platform, you‚Äôll be able to view the following user data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Referral sources: the places where users come from and drive traffic to your site&lt;/li&gt;
&lt;li&gt;Device type&lt;/li&gt;
&lt;li&gt;Operating system&lt;/li&gt;
&lt;li&gt;Country: where users are located &lt;/li&gt;
&lt;li&gt;Region&lt;/li&gt;
&lt;li&gt;Browser language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This data might be way more than you need at this point. But this type of data forms the basis of segmentation. Segmentation is the grouping of audiences by specific characteristics. If you want to run A/B tests for specific subsets of users, or if you want to focus on improving your site‚Äôs UX for certain device types, this type of data will help you target the right users&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-web-analytics-platforms-get-data" class="anchor"&gt;
  &lt;/a&gt;
  How Web Analytics Platforms Get Data
&lt;/h2&gt;

&lt;p&gt;In general, most web analytics platforms will require you to embed a tracking code (usually JavaScript) to your site‚Äôs header or footer. The code will execute on each page on the site. This lets your web analytics capture ‚Äúevents‚Äù on each page, or actions your users do like clicking a link, a page, the time they spend on a page, and so forth. Your web analytics platform logs the data and will often display data as visualizations in a dashboard. Most platforms have default dashboards but you can also create custom dashboards and reports from within your tool. &lt;/p&gt;

&lt;p&gt;Furthermore, web analytics platforms drop cookies in a user‚Äôs browser to track them on the site during their current visit (these are called ‚Äúsession‚Äù cookies) or to remember them in subsequent visits and/or track their movements beyond the site for advertising purposes (these are called ‚Äúpersistent‚Äù cookies). Analytics uses session vs persistent cookies to differentiate between total visits and unique visits, which count only the first time you visited the site. Note: cookies don't track users across devices, so the same user accessing the same page on both their mobile phone and their laptop would count as two unique visits.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-uses-of-web-analytics" class="anchor"&gt;
  &lt;/a&gt;
  Other Uses of Web Analytics
&lt;/h2&gt;

&lt;p&gt;Because of the mechanisms used to collect data, web analytics platforms also power the following types of activities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Retargeting&lt;/strong&gt;. If you‚Äôve seen an ad on a news website for a product you shopped for on a different site, this is retargeting in action. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A/B testing&lt;/strong&gt;. Online experiments, or A/B tests, work by serving up a variation of a page that has had a small change made to it. Visitors are randomly assigned to either the ‚Äúcontrol‚Äù group or the ‚Äútreatment‚Äù group; the control group sees the existing experience and the treatment sees the change. On the backend, the analytics platform measures any changes to key metrics on the page and uses statistics to determine which version is the winner.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Personalization&lt;/strong&gt;. Personalization works by serving a different version of a page to a group, or ‚Äúsegment‚Äù of users, based on shared characteristics. These segments are built based on the activity previous site visitors have done and will ‚Äúserve‚Äù them an experience based on which segment they fall into.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These activities may require a separate system to run, but they use web analytics as their data source.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-web-analytics-tool-to-use" class="anchor"&gt;
  &lt;/a&gt;
  Which Web Analytics Tool to Use
&lt;/h2&gt;

&lt;p&gt;Google Analytics by far is the most popular web analytics platform for everything from personal sites to large, enterprise sites. It‚Äôs free to use, but with everything, there‚Äôs a catch: GA will only analyze a portion of your data, and user data is sent to and hosted on Google servers. If this is an issue, consider other analytics tools. When looking for an analytics platform, I was looking for one that was robust, that didn‚Äôt share data with third parties, and that was privacy-minded. Here are some platforms that are similar (some are even open source):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Matomo Analytics&lt;/li&gt;
&lt;li&gt;Fathom Analytics&lt;/li&gt;
&lt;li&gt;Simple Analytics&lt;/li&gt;
&lt;li&gt;Plausible Analytics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that there‚Äôs nothing wrong with only having access to a slice of your metrics and data. For some people, platforms like Matomo and Google Analytics are too rich and tell them more about their users than they need or want to know. As long as you understand what metrics are valuable to you and what you can and can‚Äôt infer from these metrics, use the platform that is right for your use case.&lt;/p&gt;

&lt;p&gt;I would recommend reading up on all of these options (and there are many more) to find the one that meets your needs. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Web analytics tools work by collecting data on the actions users take on your site in order to improve your site‚Äôs usability, content, or to create personalized experiences. To use them for data-driven decision-making, craft questions that align with your metrics and look at your analytics regularly to spot changes in metrics. Finally, research the differences between analytics tools to identify the best one for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.usability.gov/what-and-why/web-analytics.html"&gt;https://www.usability.gov/what-and-why/web-analytics.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plausible.io/vs-google-analytics"&gt;https://plausible.io/vs-google-analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://matomo.org/blog/2020/02/web-analytics-cookies-gdpr/"&gt;https://matomo.org/blog/2020/02/web-analytics-cookies-gdpr/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.bounteous.com/insights/2019/12/23/how-google-analytics-uses-cookies-identify-users/"&gt;https://www.bounteous.com/insights/2019/12/23/how-google-analytics-uses-cookies-identify-users/&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.stephaniemorillo.co/post/an-introduction-to-web-analytics"&gt;&lt;em&gt;This post originally appeared on my blog.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'm Stephanie, a Content Strategist and Technical PM. Visit &lt;a href="https://www.developersguidetocontent.com"&gt;developersguidetocontent.com&lt;/a&gt; to learn more about my work!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>analytics</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Make Your Angular SPA Accessible</title>
      <author>Alula TYC</author>
      <pubDate>Tue, 24 Nov 2020 14:01:47 +0000</pubDate>
      <link>https://dev.to/altsyset/make-your-angular-spa-accessible-16h</link>
      <guid>https://dev.to/altsyset/make-your-angular-spa-accessible-16h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#implementing-the-skip-to-main-content-bypass-block-link-on-angular-project" class="anchor"&gt;
  &lt;/a&gt;
  Implementing the "Skip to Main Content" (Bypass Block) link on Angular project
&lt;/h2&gt;

&lt;p&gt;One of the most important links you can build on your project to help visually impaired users is to implement the "Skip to Main Content" link.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-skip-to-main-content-link" class="anchor"&gt;
  &lt;/a&gt;
  What is the "Skip to Main Content" link
&lt;/h2&gt;

&lt;p&gt;If you are a regular keyboard user you definitely used and love this link. Here is a screenshot of what I am talking about in action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bAKH-jlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ujabi9eo8w9z324cs2ar.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bAKH-jlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ujabi9eo8w9z324cs2ar.PNG" alt="The Skip To Main Content link in action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To see this screen for yourself, type your search key, and press enter. Then press the tab key. You will see the 'Skip to Main Content' link.&lt;/p&gt;

&lt;p&gt;The main purpose of this link is to help keyboard users and visually impaired users to jump to the main content instead of tabbing over all the links on top of it. In this scenario, users won't have to deal with the search box, the icons around it, all the links below it("All", "Image", "News", etc.). Instead, the keyboard will jump to the first link of the search result.&lt;/p&gt;

&lt;p&gt;This is a very valuable usability asset you can implement in your angular project as follows. Please read the &lt;a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-skip.html"&gt;WCAG standards&lt;/a&gt; on this topic for more.&lt;/p&gt;

&lt;p&gt;You can take a number of approaches to implement this feature. Here I will show one of these approaches you can use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-one-enable-anchore-scrolling" class="anchor"&gt;
  &lt;/a&gt;
  Step One, Enable Anchore Scrolling.
&lt;/h2&gt;

&lt;p&gt;First enable anchor tags in your angular project by just adding this block on your app-routing.module.ts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;RouterModule.forRoot(routes, {
    anchorScrolling: 'enabled',
  })

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-two-the-link" class="anchor"&gt;
  &lt;/a&gt;
  Step Two, the link.
&lt;/h2&gt;

&lt;p&gt;Implement a simple link on top of your components. In most cases, it will be on the &lt;code&gt;app.component.html&lt;/code&gt; file. It will be something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a class="nav-link" [routerLink]="[currentUrl]" [fragment]="'main'" &amp;gt;Skip to Main Content &amp;lt;/a&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will discuss the &lt;code&gt;[routerLink]&lt;/code&gt; part of this simple anchor link later. But the &lt;code&gt;[fragment]&lt;/code&gt; is just the &lt;code&gt;'#main'&lt;/code&gt; part of the url that will be appended to it, considering we will have a &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;section&lt;/code&gt; with an &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-three-subscribe-to-the-router-event" class="anchor"&gt;
  &lt;/a&gt;
  Step three, subscribe to the router event.
&lt;/h2&gt;

&lt;p&gt;Every time the user clicks and navigates to different pages and components, the URL changes. Our task will be to listen to these changes by subscribing to this event. That way we can always know the current URL and add it as the &lt;code&gt;[routerLink]&lt;/code&gt; value in the link that you see above. You can do this in the constructor of your app component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;currentUrl: any = ''
constructor(router: Router) {
    router.events.subscribe((e) =&amp;gt; {
      if (e instanceof NavigationEnd) {
        if (e.url != '') {
          this.currentUrl = e.url;
        } else {
          this.currentUrl ='';
        }
      }
    });
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note: You have to import Router and NavigationEnd from &lt;code&gt;@angular/router&lt;/code&gt; on top of this class as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Router, NavigationEnd, NavigationStart } from "@angular/router";
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finally-step-four-the-main-section" class="anchor"&gt;
  &lt;/a&gt;
  Finally, step four, the main section.
&lt;/h2&gt;

&lt;p&gt;Finally, make sure you have a &lt;code&gt;section&lt;/code&gt; of a &lt;code&gt;div&lt;/code&gt; with an id of &lt;code&gt;main&lt;/code&gt; so that when the user clicks the link and redirected to the same url with &lt;code&gt;#main&lt;/code&gt;, our app jumps to it.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>a11y</category>
      <category>spa</category>
      <category>keyboard</category>
    </item>
    <item>
      <title>Destructuring Assignment Indepth Syntax Comparison - JavaScript Vs Python</title>
      <author>Sachin üë®üèª‚Äçüíª</author>
      <pubDate>Tue, 24 Nov 2020 11:34:09 +0000</pubDate>
      <link>https://dev.to/devdios/destructuring-assignment-indepth-syntax-comparison-javascript-vs-python-2nl5</link>
      <guid>https://dev.to/devdios/destructuring-assignment-indepth-syntax-comparison-javascript-vs-python-2nl5</guid>
      <description>&lt;p&gt;The destructuring or an unpacking assignment syntax is an expression that makes it possible to unpack values from iterables like array and objects in javascript and list, tuples, dictionaries in Python into distinct variables.This post will look at the difference in syntax used in Python and JavaScript for destructuring or unpacking assignments.&lt;/p&gt;

&lt;p&gt;Unstructuring assignment is quite useful as it allows us to assign values to several variables at once from a single collection, is easy to understand and improves code-readability(if there exist such a term). &lt;/p&gt;

&lt;p&gt;One simple examples includes performing swap operation on two variables,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; 
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# 7 5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 7 5 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arraylist-destructuring" class="anchor"&gt;
  &lt;/a&gt;
  Array/List Destructuring
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;example_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;example_list&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;# 1 2 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above code snippet shows a simple list destructing in Python. Here the assignment of variables depends simply upon the order of items in the list.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;third&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;third&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;example_array&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;third&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Array Destructuring in JavaScript requires variable to be enclosed with "[ ]"&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ignoring-values" class="anchor"&gt;
  &lt;/a&gt;
  Ignoring values
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;example_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;example_list&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 1 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The values to ignored are to be replaced with ' _ '&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;third&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;example_array&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;third&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 1 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The values to be ignored are just empty with commas after them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Python, if we try to destructure a collection with more or fewer values than we provide variables, we end up with a &lt;code&gt;ValueError&lt;/code&gt;. Whereas in Javascript it will not show any error&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;example_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;example_list&lt;/span&gt;
&lt;span class="c1"&gt;#ValueError: not enough values to unpack (expected 2)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;third&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fourth&lt;/span&gt;

&lt;span class="c1"&gt;//when destructuring less values&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;example_array&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 1 2&lt;/span&gt;

&lt;span class="c1"&gt;//when destructuring more values&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;third&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fourth&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;example_array&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;third&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fourth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 1 2 3 undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In JavaScript, When unpacking less number of values, only the initial values are assigned, while unpacking of more number of values, the only the first three variables are assigned a value, and the last remains as undefined.&lt;/p&gt;

&lt;p&gt;In such a scenario, JavaScript allows us to use a default value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;third&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fourth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;example_array&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;third&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fourth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 1 2 3 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#collecting-values" class="anchor"&gt;
  &lt;/a&gt;
  Collecting Values
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 1
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# [2, 3, 4, 5]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [2, 3, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;...&lt;/code&gt; is known as "rest" operator in JavaScript &lt;/p&gt;

&lt;p&gt;Be aware that a &lt;code&gt;SyntaxError&lt;/code&gt; will be thrown if a trailing comma is used on the right-hand side of a rest element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// SyntaxError: rest element may not have a trailing comma&lt;/span&gt;
&lt;span class="c1"&gt;// Always consider using rest operator as the last element&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#argskwargs-in-python-and-object-destructuring-in-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Args/Kwargs in Python and Object Destructuring in JavaScript
&lt;/h2&gt;

&lt;p&gt;In Python, we can pass a variable number of arguments to a function using special symbols. There are two special symbols:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;*args&lt;/code&gt; (Non Keyword Arguments)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;**kwargs&lt;/code&gt; (Keyword Arguments)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A typical example where one might need something like &lt;code&gt;*args&lt;/code&gt; is given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;standard&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;adder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sum:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we are to add multiple numbers but are unsure of how many numbers we'll have to add&lt;/p&gt;

&lt;p&gt;We can modify adder in two ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we can put the numbers to be added to a list and pass the list as an argument.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;adder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sum : "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But this requires to add maintain a list and remove and add numbers to list accordingly.&lt;/p&gt;

&lt;p&gt;This is where &lt;code&gt;*args&lt;/code&gt; comes into play:&lt;/p&gt;

&lt;p&gt;Python has &lt;code&gt;*args&lt;/code&gt; which allow us to pass the variable number of non keyword arguments to function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;modifying the adder functions using *args:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;adder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sum:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# args is just a conventional name used in python, we can use any name
# (like num in this example)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;We use *args and **kwargs as an argument when we are unsure about the number of arguments to pass in the functions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;*args&lt;/code&gt; allow to pass mulitple arguments to function while &lt;code&gt;**kwargs&lt;/code&gt; allows to pass multiple keyword arguments to a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;printSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Sachin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 1
# (2, 3, 4) - args becomes a tuple
# {'name': 'Sachin', 'age': 21} - kwargs becomes a dictionary
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;*args&lt;/code&gt; functionality can be replicated in JS using rest operator as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Only the last parameter can be a "rest parameter".&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;manyMoreArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;manyMoreArgs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;manyMoreArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;myFun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;one&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;two&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;four&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;five&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;six&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Console Output:&lt;/span&gt;
&lt;span class="c1"&gt;// a, one&lt;/span&gt;
&lt;span class="c1"&gt;// b, two&lt;/span&gt;
&lt;span class="c1"&gt;// manyMoreArgs, ["three", "four", "five", "six"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Object Destructuring in JS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;is_verified&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;is_verified&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// here the name of variable should be same as the object's keys&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 42&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;is_verified&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Since the variable names should match the object's key, JS allows using aliases:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 42 &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Destructuring of argument passed as Object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sachin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;profession&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Software Engineer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printDetails&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;profession&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;job&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;printDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// name Sachin&lt;/span&gt;
&lt;span class="c1"&gt;// age 21&lt;/span&gt;
&lt;span class="c1"&gt;// job Software Engineer&lt;/span&gt;

&lt;span class="c1"&gt;// default age 18&lt;/span&gt;
&lt;span class="c1"&gt;// job as alias to profession&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With so many rules with quite some similarities and subtle differences, remembering all these can seem to be overwhelming at first. I suggest not to mug up these syntax if you use either Python or JS or both, you can always bookmark this and read it later as and when you need to look up for something. &lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.tecladocode.com/destructuring-in-python/"&gt;Teclado - Destructuring in Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;MDN Web Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.programiz.com/python-programming/args-and-kwargs"&gt;Programiz - Python Args and Kwargs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading. Stay tuned!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Angular Directives in 5 minutes</title>
      <author>Eldrige</author>
      <pubDate>Tue, 24 Nov 2020 10:33:39 +0000</pubDate>
      <link>https://dev.to/eldrige/angular-directives-in-5-minutes-3ja2</link>
      <guid>https://dev.to/eldrige/angular-directives-in-5-minutes-3ja2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#so-what-are-directives" class="anchor"&gt;
  &lt;/a&gt;
  So what are directives?
&lt;/h1&gt;

&lt;p&gt;These are attributes added to our DOM elements, that make them dynamic. They supercharge  ‚ö° our DOM by adding extra functionality.&lt;/p&gt;

&lt;p&gt;In angular there are two types of directives. Structural and Attribute directives.&lt;/p&gt;

&lt;p&gt;Structural directives, change the DOM layout, by adding or removing content. Some examples include *ngIf and *ngFor.&lt;br&gt;
On the other hand attribute directives, change the behavior of an element. Some examples include *ngClass and *ngStyle.&lt;/p&gt;

&lt;p&gt;In this post, we will be looking at the most commonly used directives.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ngif" class="anchor"&gt;
  &lt;/a&gt;
  *ngIf
&lt;/h3&gt;

&lt;p&gt;This directive conditionally shows content based on an expression's value. &lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
 *ngIf="expression"&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XmCOUs6K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6pt22303spifz1g78q7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XmCOUs6K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6pt22303spifz1g78q7g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If our expression results in a truthy value, our HTML tag will be rendered. In this case our expression is false, so the p tag will not be rendered&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ngfor" class="anchor"&gt;
  &lt;/a&gt;
  *ngFor
&lt;/h3&gt;

&lt;p&gt;This directive repeats a given DOM element for each element found in an array.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
*ngFor="let item of items"&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z70qEPLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/102thpeefencqiiwurrr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z70qEPLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/102thpeefencqiiwurrr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here our array is the fruits array, and we reference each item in the array as fruit. Then we display it in our component using interpolation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8mK_9QVF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wli6cj7bei7g6i9xl50c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8mK_9QVF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wli6cj7bei7g6i9xl50c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ngstyle" class="anchor"&gt;
  &lt;/a&gt;
  *ngStyle
&lt;/h3&gt;

&lt;p&gt;This directive allows us to add styles dynamically to our tags.&lt;br&gt;
Syntax:&lt;br&gt;
In its simplest form, it is just property binding&lt;br&gt;
We bind the background color of this div to be red&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h4YrfIVB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/028o8vxcas09t36935y7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h4YrfIVB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/028o8vxcas09t36935y7.png" alt="ngStyle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plain syntax:&lt;br&gt;
[ngStyle]="{style: expression}"&lt;/p&gt;

&lt;p&gt;In this case, we bind it directly to a property in our logic. So our div will be red.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xe2lvkMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2ryvf49y88ok7zpsknqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xe2lvkMN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2ryvf49y88ok7zpsknqt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ngclass" class="anchor"&gt;
  &lt;/a&gt;
  *ngClass
&lt;/h3&gt;

&lt;p&gt;This directive allows us to set classes dynamically to our elements.&lt;br&gt;
Syntax:&lt;br&gt;
[ngClass]="{cssClass: expression}"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NFE0In6K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qtlaoa9mzmru4462h3mc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NFE0In6K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qtlaoa9mzmru4462h3mc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m5yVNdmR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s5unj9z7rt9e0x46x8sd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m5yVNdmR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s5unj9z7rt9e0x46x8sd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Directives are powerful, when it comes to handling logic, there is a lot more to directives. We can even create our own custom directives. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>angular</category>
      <category>html</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Advantages of Using Fish Shell üêü </title>
      <author>Mina Tafreshi</author>
      <pubDate>Tue, 24 Nov 2020 10:27:04 +0000</pubDate>
      <link>https://dev.to/minatafreshi/advantages-of-using-fish-shell-3fjd</link>
      <guid>https://dev.to/minatafreshi/advantages-of-using-fish-shell-3fjd</guid>
      <description>&lt;h3&gt;
  &lt;a href="#a-short-definition" class="anchor"&gt;
  &lt;/a&gt;
  A Short Definition:
&lt;/h3&gt;

&lt;p&gt;Fish is a smart and user-friendly command-line shell for Linux, macOS, and the rest of the family. I've been using &lt;a href="https://ohmyz.sh/"&gt;zsh&lt;/a&gt; and some other bunch of shells for many years but recently I have upgraded my hardware and I got a chance to taste the &lt;a href="http://fishshell.com/"&gt;Fish&lt;/a&gt;. Additionally, I have to say that I'm not planning to go back and I encourage others to use and experience Fish.&lt;br&gt;
There are so many advantages of using Fish as a default shell which can improve your experience, namely:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-autosuggestion" class="anchor"&gt;
  &lt;/a&gt;
  1. Autosuggestion
&lt;/h2&gt;

&lt;p&gt;One of the main reasons that I use Fish Shell is the autosuggestion implemented in the shell. This feature gives you the capability of quick access to the commands as you type. You can find this in &lt;a href="https://github.com/zsh-users/zsh-autosuggestions"&gt;zsh&lt;/a&gt; as well. However, it was originally in Fish Shell at first place. In addition, Fish Shell has other features too, like if you mistype, it will show the wrong and invalid commands in red.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bQtMvVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvzjvug8gd6r1xblekpo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bQtMvVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvzjvug8gd6r1xblekpo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-web-interface" class="anchor"&gt;
  &lt;/a&gt;
  2. Web Interface
&lt;/h2&gt;

&lt;p&gt;Another amazing feature of Fish is that you can configure it as a web interface running on your local server. Also, the web interface allows you to modify the color of the scheme that you want. It also lets you browse your environment variables too. There are more features:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Finding terminal keybindings.&lt;/li&gt;
&lt;li&gt;Beautiful and colorful command prompts.&lt;/li&gt;
&lt;li&gt;Command line history!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwEOxK1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fe7vht8bcqrz0wl23j8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwEOxK1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fe7vht8bcqrz0wl23j8e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-obvious-error-messages" class="anchor"&gt;
  &lt;/a&gt;
  3. Obvious Error Messages
&lt;/h2&gt;

&lt;p&gt;When you screw up, Fish shows the errors and your faults plus the way that you can handle it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-some-up" class="anchor"&gt;
  &lt;/a&gt;
  To Some up
&lt;/h3&gt;

&lt;p&gt;Fish is so powerful and useful for users who work with other shells like zsh, bash, and so on if they want to try a new and advantageous shell.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>bash</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Doing Animal Crossing Reactions with Gestures in Teachable Machine</title>
      <author>Mathew Chan</author>
      <pubDate>Tue, 24 Nov 2020 09:38:19 +0000</pubDate>
      <link>https://dev.to/mathewthe2/doing-animal-crossing-reactions-with-gestures-in-teachable-machine-1h8m</link>
      <guid>https://dev.to/mathewthe2/doing-animal-crossing-reactions-with-gestures-in-teachable-machine-1h8m</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lhTZdFUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/la266msu4mqmvxdi9ciy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lhTZdFUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/la266msu4mqmvxdi9ciy.gif" alt="demo-gesture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#overview" class="anchor"&gt;
  &lt;/a&gt;
  Overview
&lt;/h1&gt;

&lt;p&gt;By training models in Google's &lt;a href="https://teachablemachine.withgoogle.com/"&gt;Teachable Machine&lt;/a&gt; to learn our gestures, we could &lt;strong&gt;swing our hands or make a face&lt;/strong&gt; to send the corresponding reaction command to Animal Crossing's API.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reverse-engineer-animal-crossings-api" class="anchor"&gt;
  &lt;/a&gt;
  Reverse Engineer Animal Crossing's API
&lt;/h1&gt;

&lt;p&gt;The NSO app on the phone allows us to send reaction commands to the game. By using a tool called &lt;a href="https://mitmproxy.org/"&gt;mitmproxy&lt;/a&gt;, we could know what requests are sent from our phone and simulate the reaction command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;mitmproxy
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Or use &lt;em&gt;pip install mitmproxy&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#run-mitmproxy" class="anchor"&gt;
  &lt;/a&gt;
  Run mitmproxy
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mitmproxy &lt;span class="nt"&gt;-h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#install-the-mitmproxy-certificate-on-your-phone" class="anchor"&gt;
  &lt;/a&gt;
  Install the mitmproxy certificate on your phone
&lt;/h4&gt;

&lt;p&gt;With your phone connected to the same internet as your computer, visit &lt;a href="http://mitm.it/"&gt;http://mitm.it/&lt;/a&gt; and install the certificate. In the internet settings on your phone, add a manual proxy that points to your computer's IP address.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Checking IP Address on your Mac&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r_mBhYVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jn6xg430kswtisopa7ls.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_mBhYVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jn6xg430kswtisopa7ls.png" alt="1_EmOSYwm_HrWN5gk19nBMwQ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Setting Manual Proxy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PN7a9QL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cb34ng8gapltljca288c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PN7a9QL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cb34ng8gapltljca288c.png" alt="1_P7kxd2Iy890nzjanLA6zDw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Download Certificate on &lt;a href="http://mitm.it"&gt;http://mitm.it&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_08bs12G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p3soy42ixdx3hwa6elq3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_08bs12G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p3soy42ixdx3hwa6elq3.png" alt="1__YLfocKpqlcfSqRKwVzD6Q"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;About &amp;gt; Certificate Trust Settings &amp;gt; Enable Certificate&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6vVOOhFM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3br1gaxiqvqc2pl86g88.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6vVOOhFM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3br1gaxiqvqc2pl86g88.png" alt="1_TaW2bdtKLkM1sXoZrWSKDw"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#sending-requests-through-nintendo-switch-app" class="anchor"&gt;
  &lt;/a&gt;
  Sending Requests through Nintendo Switch App
&lt;/h4&gt;

&lt;p&gt;Now launch the NSO app on the phone and play around with the Animal Crossing App. You should see your phone's request data coming in through the mitmproxy terminal. We can start finding out the request format of reactions by sending them from our phone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A93RwYKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g7k2c1juqx2i393r1zhg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A93RwYKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g7k2c1juqx2i393r1zhg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2RzNHR-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ykksbhnwctlxhnle2yb5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2RzNHR-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ykksbhnwctlxhnle2yb5.png" alt="Screenshot 2020-11-24 at 12.34.59 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The request endpoint for messaging and reaction is &lt;strong&gt;api/sd/v1/messages&lt;/strong&gt;. Click on it and you should see the cookies and form data of this post request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gMamEohw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/45ys43hmkk94st10n4n6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gMamEohw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/45ys43hmkk94st10n4n6.png" alt="Screenshot 2020-11-24 at 12.36.21 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The post data is as follows.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Smiling"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"emoticon"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Press &lt;strong&gt;q&lt;/strong&gt; in the mitmproxy terminal to return to the request list.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These are some of the reaction types I've collected: &lt;em&gt;Hello, Greeting, HappyFlower, Negative, Apologize, Aha, QuestionMark...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---JEYX7ZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7juc1eev1oxhlatoy4he.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---JEYX7ZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7juc1eev1oxhlatoy4he.png" alt="Screenshot 2020-11-24 at 2.02.23 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.google.com/spreadsheets/d/1cXCxJ1t-YsfQnGYCZ9C2yRQLwlXN0--hej7sqSFy1-c/edit?usp=sharing"&gt;List of Reaction Values&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I don't have all the reactions in my game right now. It would be great if  anyone could provide the other reaction values!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#accessing-nintendo-switch-api" class="anchor"&gt;
  &lt;/a&gt;
  Accessing Nintendo Switch API
&lt;/h1&gt;

&lt;p&gt;Access to Nintendo Switch API requires making multiple requests to Nintendo's server with an authentication token. &lt;br&gt;
Full tutorial:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/mathewthe2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aJgWoN1x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vcJ3bK0---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/511663/a19483a7-b48a-4388-9de1-4d865b031e60.jpg" alt="mathewthe2 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mathewthe2/intro-to-nintendo-switch-rest-api-2cm7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Intro to Nintendo Switch REST API&lt;/h2&gt;
      &lt;h3&gt;Mathew Chan „Éª Nov 17 „Éª 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#api&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;Successful authentication will give us three values: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;_g_token&lt;/strong&gt; cookie&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;_park_session&lt;/strong&gt; cookie&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;authentication bearer&lt;/strong&gt; token
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;user_auth_app_head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'Host'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'web.sd.lp1.acbaa.srv.nintendo.net'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'User-Agent'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Mozilla/5.0 (Linux; Android 7.1.2; Pixel Build/NJH47D; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/59.0.3071.125 Mobile Safari/537.36'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Accept'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'application/json, text/plain, */*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Connection'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'keep-alive'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Referer'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'https://web.sd.lp1.acbaa.srv.nintendo.net/?lang=en-US&amp;amp;na_country=US&amp;amp;na_lang=en-US'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Authorization'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'tmp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Accept-Encoding'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'gzip, deflate, br'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Accept-Language'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'en-us'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sendReaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reaction_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reaction_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'emoticon'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post_AC_NSOJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_auth_app_head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'https://web.sd.lp1.acbaa.srv.nintendo.net/api/sd/v1/messages'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;'status'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Reaction sent!'&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s"&gt;'code'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;  &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'1001'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Animal Crossing Session Not Connected'&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_AC_NSOJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;
  &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Authorization'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Bearer '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ac_b'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;pcookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="n"&gt;pcookie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'_gtoken'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ac_g'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;pcookie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'_park_session'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ac_p'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pcookie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;thejson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;thejson&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Test and see if it works :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sendReaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Aha'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CnT6Fdy7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/axrjnrwdud1d5e5ruiji.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CnT6Fdy7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/axrjnrwdud1d5e5ruiji.jpeg" alt="EnkWy81UcAAvyr_"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#teachable-machine" class="anchor"&gt;
  &lt;/a&gt;
  Teachable Machine
&lt;/h1&gt;

&lt;p&gt;Google's &lt;a href=""&gt;Teachable Machine&lt;/a&gt; is an easy-to-use online tool to train models to recognize your speech, photo, and video. If you're new to machine learning, I highly recommend watching &lt;a href="https://www.youtube.com/playlist?list=PLJfHZtseuscuTQfodmFnbZ3rBgCWsRT9t"&gt;Google's 5 minute tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C6u6iCPI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/303bsxqwzutp0leyg1tx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C6u6iCPI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/303bsxqwzutp0leyg1tx.png" alt="Screenshot 2020-11-24 at 2.29.55 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First create a &lt;strong&gt;Pose Project&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--54LDEXKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/brkda5qkvy3k42vxy1w3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--54LDEXKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/brkda5qkvy3k42vxy1w3.png" alt="Screenshot 2020-11-24 at 2.32.20 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose &lt;strong&gt;Webcam&lt;/strong&gt; for Pose Samples. Name your first class &lt;strong&gt;neutral&lt;/strong&gt; and record yourself without any gestures. Then add extra classes such as clapping or waving. You can be as creative as you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9Il3HzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/68xyahx15r3flfpn0lh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9Il3HzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/68xyahx15r3flfpn0lh7.png" alt="Screenshot 2020-11-24 at 5.06.04 PM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;When you're done, press train. When training is done, you can test the model in preview. Once you're satisfied, press &lt;strong&gt;Export Model&lt;/strong&gt; above the preview panel and download the TensorFlow model. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eb0jU5CV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jcurf1hwuailuni2f27c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eb0jU5CV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jcurf1hwuailuni2f27c.png" alt="tw4v4ehpbvbu4vew0bg3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can use the provided &lt;a href="https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/pose"&gt;Tensorflow.js Sample Script&lt;/a&gt; for a simple user interface. Copy the sample script to an empty html file and serve it through Node.js.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;http-server &lt;span class="nt"&gt;-g&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;my-pose-model
http-server 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Insert our API call inside the &lt;strong&gt;predict()&lt;/strong&gt; function. The API endpoint should direct to our python server to send the reaction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;confidence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Confidence range is 0 to 1&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prediction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posenetOutput&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;maxPredictions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;classPrediction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;probability&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Insert the API call here&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;probability&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;confidence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nx"&gt;callReaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;labelContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;classPrediction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// finally draw the poses&lt;/span&gt;
  &lt;span class="nx"&gt;drawPose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pose&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;clapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// number of times of detection to run API&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callReaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;predictionClassName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;predictionClassName&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Clapping&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clapping&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clapping&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://myapi.com/?reaction=Clapping&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Change to your own API endpoint&lt;/span&gt;
      &lt;span class="nx"&gt;clapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// reset for threshold&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Be creative and have fun!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3cZnpwia--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/58y7y32rvj05ewcc80nu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3cZnpwia--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/58y7y32rvj05ewcc80nu.png" alt="Screenshot 2020-11-24 at 5.19.11 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Reverse engineer private APIs with mitmproxy&lt;/li&gt;
&lt;li&gt;Send API requests with Python&lt;/li&gt;
&lt;li&gt;Use Google's Teachable Machine for ML prototyping&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://medium.com/what-i-talk-about-when-i-talk-about-ios-developmen/setting-up-mitmproxy-on-macos-to-intercept-https-requests-f3cba29ff003"&gt;Setting-up mitmproxy on macOS to intercept https requests&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations on finishing this tutorial! Let me know if it was helpful. :)&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>api</category>
      <category>python</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Responsive Images - A Reference Guide from A to Z</title>
      <author>Manu Chaudhary</author>
      <pubDate>Tue, 24 Nov 2020 06:26:15 +0000</pubDate>
      <link>https://dev.to/manu4543/responsive-images-a-reference-guide-from-a-to-z-30aa</link>
      <guid>https://dev.to/manu4543/responsive-images-a-reference-guide-from-a-to-z-30aa</guid>
      <description>&lt;h2&gt;
  &lt;a href="#chapter-1-what-is-responsive-images" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 1 - What is responsive images?
&lt;/h2&gt;

&lt;p&gt;In this guide, we will learn everything related to responsive images along with sample code. Basic knowledge of HTML and CSS is required to understand the concepts discussed here. After you finish reading, you will know the latest tools &amp;amp; techniques to implement responsive images correctly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Responsive images are the set of techniques used to load the right image based on device resolution, orientation, screen size, network connection, and page layout. The browser should not stretch the image to fit the page layout, and loading it shouldn‚Äôt result in time &amp;amp; bandwidth wastage. It improves user experience as images load fast and look crisp to the human eye.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#quick-example-of-the-responsive-images-in-html" class="anchor"&gt;
  &lt;/a&gt;
  Quick example of the responsive images in HTML
&lt;/h2&gt;

&lt;p&gt;The best way to understand responsive images is with a quick example. For simplicity, we will load a 2200px wide image on different devices. Everything else remains the same except the viewport size.&lt;/p&gt;

&lt;p&gt;The markup would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- The width of the orignal image is 2200px --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b8Qr82rb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/different-device-image-loading_0JWHR54wa.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b8Qr82rb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/different-device-image-loading_0JWHR54wa.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For desktop (iMac), the image is optimal because the width of the viewport and image matches.&lt;/p&gt;

&lt;p&gt;However, in mobile, as we can see, the viewport is only 375 CSS pixels wide. The same is valid for the tablet. The viewport is only 1024 CSS pixels wide. We are wasting time and bandwidth downloading this overly large file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-happening" class="anchor"&gt;
  &lt;/a&gt;
  What‚Äôs happening?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DzqUazDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/responsive-images-basic_-JpFBXzZ2.png%3Ftr%3Dw-1400%2Cf-png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzqUazDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/responsive-images-basic_-JpFBXzZ2.png%3Ftr%3Dw-1400%2Cf-png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a simplified version of responsive images in action. üôå&lt;/p&gt;

&lt;p&gt;We used &lt;code&gt;srcset&lt;/code&gt; (source set) to provide the browser with three different size images. The browser picked the right option based on the actual viewport size of the device. We will soon discover more about &lt;code&gt;srcset&lt;/code&gt; and other options in great detail.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that we are still using the old &lt;code&gt;src&lt;/code&gt; attribute as a fallback if the browser doesn‚Äôt support the &lt;code&gt;srcset&lt;/code&gt; attribute. As of Oct 2020, all browsers support &lt;code&gt;srcset&lt;/code&gt; except Opera mini and IE.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#chapter-2-why-do-we-need-responsive-images" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 2 - Why do we need responsive images?
&lt;/h2&gt;

&lt;p&gt;As you saw in the above example, one size doesn‚Äôt fit all. A responsive design should adapt based on user screen size, pixel density, and device orientation to ensure a great user experience.&lt;/p&gt;

&lt;p&gt;Here are three main reasons why we need to implement responsive images:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Render a high-quality image on different devices&lt;/li&gt;
&lt;li&gt;Loading the right image - Art direction&lt;/li&gt;
&lt;li&gt;Faster loading web pages&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-render-a-highquality-image-on-different-devices" class="anchor"&gt;
  &lt;/a&gt;
  1. Render a high-quality image on different devices
&lt;/h2&gt;

&lt;p&gt;An image without perceptible artifacts looks crisp and contributes towards a great user experience. This is especially important on retail sites where users expect to view high-resolution closeups of product images to better look at texture &amp;amp; details. &lt;/p&gt;

&lt;p&gt;For an image to look good, it must adapt based on viewport width and screen pixel density. Let‚Äôs understand these:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different viewport width case&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If your layout changes based on the device viewport, the loaded image dimension should match the container CSS/HTML width. If the browser stretches a smaller image to fit the design, the rendered image will look blurred, and if you load a bigger image on a device with small viewport width, it results in bandwidth and time wastage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different pixel density case&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;High-resolution displays have a higher pixel density. This means more pixels in the same amount of physical space. As a result, high-resolution displays demand images with more pixels. In simple terms, a large image is required to fit the same physical image.&lt;/p&gt;



&lt;p&gt;Consider an iPhone8:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS viewport size: 375px by 667px
&lt;/li&gt;
&lt;li&gt;Pixel density: 2
&lt;/li&gt;
&lt;li&gt;Effective device resolution: 750px by 1334px&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It means if we want to render a 100 CSS pixels wide image, we will have to load a 200px wide image for it to look sharp.&lt;/p&gt;

&lt;p&gt;For a device with pixel density 3, we will have to load a 300px wide image.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;However, note that it does not always mean that we have to load a large file size. On a device, with DPR (device pixel ratio) 2, a 2x wide image with low-quality (50) will look better than a 1x wide image with high-quality(90). Despite being similar in terms of file-size, the 2x image will give a sharper appearance. You can &lt;a href="https://imagekit.io/how-to-show-high-quality-e-commerce-product-images/"&gt;learn more&lt;/a&gt; about this technique.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-loading-the-right-image-art-direction" class="anchor"&gt;
  &lt;/a&gt;
  2. Loading the right image - Art direction
&lt;/h2&gt;

&lt;p&gt;When a large image is resized to fit a small area, it can lose its relevance, usefulness, and legibility. The most important part might get cropped. &lt;/p&gt;

&lt;p&gt;For example, consider this screenshot of a dashboard on a product landing page. It is highlighting different elements of the user interface to a potential user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nYL9wvQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/screenshot-desktop_T6JakuDWz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nYL9wvQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/screenshot-desktop_T6JakuDWz.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the desktop, the above image is perfect. However, if we downscale the same image to fit a mobile viewport, we are losing many essential elements of the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cumCW0Gf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/screenshot-mobile_G_jAuf4fb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cumCW0Gf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/screenshot-mobile_G_jAuf4fb.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, an altogether different image might have been more appropriate, for example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JChZzDF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/screenshot-mobile-1_OukK3jT_X.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JChZzDF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/screenshot-mobile-1_OukK3jT_X.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is called &lt;strong&gt;art direction&lt;/strong&gt;. By "art directing", you can explicitly decide which image should be shown based on the image's size on the page. We will cover this technique in more detail soon.&lt;/p&gt;

&lt;p&gt;You can also use this to show different images in a mobile device based on orientation - landscape vs portrait mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-faster-loading-web-pages" class="anchor"&gt;
  &lt;/a&gt;
  3. Faster loading web pages
&lt;/h2&gt;

&lt;p&gt;According to the HTTP archive data, 64% of a website‚Äôs page weight, on an average, is made up of images. With mobile traffic surpassing desktop traffic, it has become even more crucial to optimize images for different device sizes.&lt;/p&gt;

&lt;p&gt;Ideally, you would like to serve images that are resized to match the user‚Äôs viewport dimensions. Without a means to do this, you will have to send an overly large image to all users. This means that the user on a mobile device with a small viewport width has to download that extra data, which slows down the page load. This is a wastage of time, bandwidth, and money and degrades the overall user experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chapter-3-how-to-make-images-responsive" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 3 - How to make images responsive?
&lt;/h2&gt;

&lt;p&gt;There are many methods for implementing responsive images. We have come a long way from using hacky javascript based solutions to having native support in modern browsers.&lt;/p&gt;

&lt;p&gt;In this chapter, we will cover the latest methods for implementing responsive images.&lt;/p&gt;

&lt;p&gt;Let‚Äôs have a quick comparison before discussing each of these techniques in more details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Srcset&lt;/li&gt;
&lt;li&gt;Srcset with sizes&lt;/li&gt;
&lt;li&gt;Picture element&lt;/li&gt;
&lt;li&gt;Client-hints&lt;/li&gt;
&lt;li&gt;Responsive images in CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;When to use&lt;/th&gt;
&lt;th&gt;Markup complexity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Using srcset&lt;/td&gt;
&lt;td&gt;For fixed-size images that take roughly whole viewport width, e.g., full-width promotional banner.&lt;/td&gt;
&lt;td&gt;Simple&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Using srcset + sizes&lt;/td&gt;
&lt;td&gt;For flexible images. When the layout &amp;amp; image size changes based on the viewport width. For e.g., a three-column layout on desktop vs a two-column layout on the mobile device.&lt;/td&gt;
&lt;td&gt;Slightly complex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Using picture element&lt;/td&gt;
&lt;td&gt;When you want to load an entirely different image based on screen size i.e. &lt;strong&gt;art direction&lt;/strong&gt;. Or you want to use the latest image formats like &lt;code&gt;webp&lt;/code&gt; or &lt;code&gt;avif&lt;/code&gt; on a supported device.&lt;/td&gt;
&lt;td&gt;Highly complex.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Using client-hints&lt;/td&gt;
&lt;td&gt;When you don‚Äôt want to make major changes in the HTML markup.&lt;/td&gt;
&lt;td&gt;No major code change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Responsive images in CSS&lt;/td&gt;
&lt;td&gt;When you are loading images via CSS styles as a background image.&lt;/td&gt;
&lt;td&gt;Simple&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#chapter-4-srcset" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 4 - Srcset
&lt;/h2&gt;

&lt;p&gt;The standard &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag allows us to define a single image source. As a web developer, it becomes our responsibility to make sure that the right source is defined. But since we don‚Äôt have all the information about the device beforehand, it becomes tricky to create a bulletproof markup that loads optimal images for all resolutions.&lt;/p&gt;

&lt;p&gt;Remember the little conversation between a web developer and a browser?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DzqUazDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/responsive-images-basic_-JpFBXzZ2.png%3Ftr%3Dw-1400%2Cf-png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzqUazDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/responsive-images-basic_-JpFBXzZ2.png%3Ftr%3Dw-1400%2Cf-png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;srcset&lt;/code&gt; allows you to define a list of different image resources along with size information so that browser can pick the most appropriate image based on the actual device‚Äôs resolution.&lt;/p&gt;

&lt;p&gt;Each comma-separated item in &lt;code&gt;srcset&lt;/code&gt; has:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Image URL, e.g. &lt;code&gt;http://ik.imagekit.io/demo/default-image.jpg&lt;/code&gt; or relative path &lt;code&gt;/demo/default-image.jpg&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;An empty space&lt;/li&gt;
&lt;li&gt;The actual width of the image or display density:

&lt;ul&gt;
&lt;li&gt;Either using display density descriptor, for example, &lt;code&gt;1.5x&lt;/code&gt;, &lt;code&gt;2x&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;Or, using width descriptors, for example, &lt;code&gt;450w&lt;/code&gt;. This is the width of the image in pixels.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#using-display-density-descriptor" class="anchor"&gt;
  &lt;/a&gt;
  Using display density descriptor
&lt;/h2&gt;

&lt;p&gt;The syntax for display density descriptors is straightforward. &lt;code&gt;srcset&lt;/code&gt; provides a comma-separated list of image resources along with display density it should be used, for example&lt;code&gt;1x&lt;/code&gt;, &lt;code&gt;2x&lt;/code&gt; etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg"&lt;/span&gt; 
     &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg,
             image_2x.jpg 2x"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If a display density descriptor isn‚Äôt provided, it is assumed to be &lt;code&gt;1x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo - srcset with density descriptor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs see this in action with a live demo - &lt;a href="https://imagekitio.github.io/responsive-images-guide/srcset-density.html"&gt;https://imagekitio.github.io/responsive-images-guide/srcset-density.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://developers.google.com/web/tools/chrome-devtools/device-mode"&gt;device emulator&lt;/a&gt; in Chrome, at DPR 1, the image currentSrc is &lt;code&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MKtzq8rZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/srcset-density-demo_9xtjWY-J3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MKtzq8rZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/srcset-density-demo_9xtjWY-J3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly, if we consider different DPR values:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;DPR value&lt;/th&gt;
&lt;th&gt;Image picked by browser (currentSrc)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-600"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-600&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-900"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-900&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;When to use display density descriptors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use display density descriptors if your images are of fixed width, and the only thing that varies is display density. It is never that simple though üòâ &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenges in using display density descriptor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As per pixensity.com, there are more than 300 different types of phones, tablets, laptops, and desktop devices with varying screen sizes and display density. &lt;/p&gt;

&lt;p&gt;The critical question becomes, do you want to track different display densities available, for example, 1x, 1.5x, 2x, 2.5x, 3x 4x, etc. More often, you will need to go beyond taking care of display density, so this method won‚Äôt be sufficient. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-width-descriptor" class="anchor"&gt;
  &lt;/a&gt;
  Using width descriptor
&lt;/h2&gt;

&lt;p&gt;The syntax is similar to the display density descriptor, but instead of display density values, we provide the actual width of the image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg"&lt;/span&gt; 
     &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 300w,
             medium.jpg 600w,
             large.jpg 900w"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;This lets the browser pick the best image&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using width descriptor allows the browser to pick the best candidate from &lt;code&gt;srcset&lt;/code&gt; based on the actual width needed to render that image on that particular display at runtime. &lt;/p&gt;

&lt;p&gt;Note that display pixel density is also taken into account by the browser while calculating the required width. üòé&lt;/p&gt;

&lt;p&gt;For example, assuming an image takes up the whole viewport width - On a 300px wide screen with DPR 2, the browser will pick &lt;code&gt;medium.jpg&lt;/code&gt; because it needs a 300x2=600px wide image. On a 300px wide screen with DPR value 3, the browser will select &lt;code&gt;large.jpg&lt;/code&gt; because it needs a 300x3=900px wide image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo - srcset with width descriptor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let see this in action with a live demo - &lt;a href="https://imagekitio.github.io/responsive-images-guide/srcset-width.html"&gt;https://imagekitio.github.io/responsive-images-guide/srcset-width.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using the device emulator, let‚Äôs resize the screen to 250px and set DPR at 1. The image loaded in this case is &lt;code&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JdFerxgS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/srcset-width-descriptor-demo_4T81jNSqR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JdFerxgS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/srcset-width-descriptor-demo_4T81jNSqR.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly, if we consider combinations with different viewport width and DPR values:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Viewport width&lt;/th&gt;
&lt;th&gt;DPR value&lt;/th&gt;
&lt;th&gt;Final width of the image required (width √ó DPR)&lt;/th&gt;
&lt;th&gt;Image picked by the browser (currentSrc)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;250px&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;250 √ó 1 = 250px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;250px&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;250 √ó 2 = 500px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-600"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-600&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;250px&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;250 √ó 3 = 750px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-900"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-900&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;300px&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;300 √ó 1 = 300px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;300px&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;300 √ó 2 = 600px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-600"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-600&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;300px&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;300 √ó 3 = 900px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-900"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-900&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Notice how the browser is taking display density and viewport width into account while calculating the required image's final width.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenges-with-using-only-srcset" class="anchor"&gt;
  &lt;/a&gt;
  Challenges with using only srcset
&lt;/h2&gt;

&lt;p&gt;If you are loading a fixed-width image that will take up almost full viewport width, then use &lt;code&gt;srcset&lt;/code&gt; along with width descriptors.&lt;/p&gt;

&lt;p&gt;However, in the below cases using &lt;code&gt;srcset&lt;/code&gt; alone won‚Äôt be sufficient:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you are loading flexible images i.e. when the size of your image changes based on the size of the viewport. For example, a single-column layout on the mobile and a three-column layout on desktop devices will need different dize images.&lt;/li&gt;
&lt;li&gt;Or when the image is only taking a fraction of viewport width. Since the browser is not aware of the layout, it will assume the image will take up the whole viewport width and download a much bigger image than required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wait. What? The browser is not aware of the layout!&lt;/p&gt;

&lt;p&gt;It is logical to think that browser has stylesheets to find our required size of the image element but note that those stylesheets are not parsed yet. If the browser waits till all stylesheets are parsed &amp;amp; executed, it will inevitably delay the downloading of images.&lt;/p&gt;

&lt;p&gt;To understand this better, let‚Äôs first look at how the browser loads a page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-browser-loads-a-webpage-the-old-way" class="anchor"&gt;
  &lt;/a&gt;
  How browser loads a webpage ‚Äî the old way
&lt;/h3&gt;

&lt;p&gt;A web page is made up of text, CSS, JS, and fonts. A lot happens in the background once you hit enter, and a page is finally rendered on your screen.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, the HTML is downloaded, and the browser starts parsing it. If it comes across an external style sheet, it starts downloading it in parallel and continue parsing HTML.&lt;/li&gt;
&lt;li&gt;If it comes across an inline &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags, it pauses the HTML parsing and executes the script right away.&lt;/li&gt;
&lt;li&gt;If it comes across a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag (one without &lt;code&gt;defer&lt;/code&gt; or &lt;code&gt;async&lt;/code&gt; attribute) that points to an external URL, it pauses the HTML parsing and first download and executes that Javascript resource.&lt;/li&gt;
&lt;li&gt;If it comes across an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag, it starts downloading the image resource in parallel and continues parsing HTML.&lt;/li&gt;
&lt;li&gt;Once all blocking external style sheets and Javascript is downloaded, parsed, and executed, the page is rendered.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if we have a HTML like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"vendor.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"zoom.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image1.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image2.jpg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;‚Äì the browser loads resources like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--moWKV4sy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/guides/sequential-loading_YL1vzHxKJB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--moWKV4sy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/guides/sequential-loading_YL1vzHxKJB.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pausing the parser whenever a script is encountered results in sub-optimal use of the browser‚Äôs ability to download multiple external resources over the network in parallel. This method is delaying the download of resources required to render the page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#preloaders-or-speculative-parsing-to-rescue-the-new-way" class="anchor"&gt;
  &lt;/a&gt;
  Pre-loaders or speculative parsing to rescue - the new way
&lt;/h3&gt;

&lt;p&gt;Internet Explorer, WebKit, and Mozilla all implemented pre-loaders in 2008 to improve the low network utilization problem that we just discussed. &lt;/p&gt;

&lt;p&gt;Essentially, the idea is that the browser cannot build DOM while executing a script but can still parse the rest of the markup looking for other resources, for example, stylesheets, javascript files, or images that are linked. These files are added to a list and start downloading in the background. By the time all scripts execute and HTML parsing finishes, hopefully, the browser has already downloaded these resources, and there won‚Äôt be any further delay.&lt;/p&gt;

&lt;p&gt;The waterfall chart for the example above now looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SD--DpC_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/guides/parallel-download_mNDsx1fm-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SD--DpC_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/guides/parallel-download_mNDsx1fm-.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we understand why &lt;code&gt;srcset&lt;/code&gt; alone is not sufficient for the browser to understand the image's required size. To overcome this problem, we have the &lt;code&gt;sizes&lt;/code&gt; attribute.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chapter-5-srcset-with-sizes" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 5 - Srcset with sizes
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;sizes&lt;/code&gt; attribute contains a comma-separated list. Each item in the list describes the size of the image in relation to the viewport.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;sizes&lt;/code&gt; attribute with &lt;code&gt;srcset&lt;/code&gt; provides the browser with enough information to start downloading the right image as soon as it sees an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag in HTML without waiting for styles sheets to complete downloading and parsing. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do we need sizes?&lt;/strong&gt;&lt;br&gt;
If you scrolled here directly and wondering why the browser is not aware of how big the image will render, &lt;a href="#how-browser-loads-a-webpage--the-old-way"&gt;checkout how the browser loads a web page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg"&lt;/span&gt; 
     &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 300w,
             medium.jpg 600w,
             large.jpg 900w"&lt;/span&gt;
     &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw, (max-width: 600px) 50vw, (max-width: 900px) 33vw, 900px"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Each comma-separated item in &lt;code&gt;sizes&lt;/code&gt; has:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Media conditions, for example, &lt;code&gt;(max-width: 300px)&lt;/code&gt; - It describes a possible state that the screen can be in. &lt;code&gt;(max-width: 300px)&lt;/code&gt; means when the viewport width is 300 CSS pixels or less. It is similar to media queries but with some limitations. You cannot use &lt;code&gt;screen&lt;/code&gt; or &lt;code&gt;print&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;An empty space.&lt;/li&gt;
&lt;li&gt;The width of the image element when the media condition is true. You can provide an absolute length (px, em) or a length relative to the viewport (vw), but not percentages.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Demo - srcset with sizes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs see this in action with a live demo - &lt;a href="https://imagekitio.github.io/responsive-images-guide/srcset-sizes.html"&gt;https://imagekitio.github.io/responsive-images-guide/srcset-sizes.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-ZeGQEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/srcset-sizes-demo_AGqVFPTap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-ZeGQEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/srcset-sizes-demo_AGqVFPTap.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The layout is such that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If viewport width is above 900px, each image takes a fix 225px width.&lt;/li&gt;
&lt;li&gt;Upto 900px, each image takes up 33vw i.e. 33% width of total viewport width.&lt;/li&gt;
&lt;li&gt;Upto 700px, each image takes up 50vw i.e. 50% width of total viewport width.&lt;/li&gt;
&lt;li&gt;Upto 400px, each image takes up 100vw i.e. the whole viewport width.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTML markup of a single image element looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://ik.imagekit.io/ikmedia/women-dress-1.jpg"&lt;/span&gt; 
     &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-225 225w,
             https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-300 300w,
             https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350 350w,
             https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-640 640w"&lt;/span&gt;
     &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 400px) 100vw, (max-width: 700px) 50vw, (max-width: 900px) 33vw, 225px"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let‚Äôs see what happens at different screen size and DPR values -&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Viewport width&lt;/th&gt;
&lt;th&gt;DPR value&lt;/th&gt;
&lt;th&gt;Image size required (width √ó DPR)&lt;/th&gt;
&lt;th&gt;Image picked by the browser (currentSrc)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;350px&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;100vw i.e. 350 √ó 1 = 350px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;350px&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;100vw i.e. 350 √ó 2 = 700px&lt;/td&gt;
&lt;td&gt;Closest candidate is &lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-640"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-640&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;650px&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;50vw i.e. (650/2) √ó 1 = 325px&lt;/td&gt;
&lt;td&gt;Closest candidate is&lt;br&gt;&lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1024px&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;225 √ó 1 = 225px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-225"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-225&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1024px&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;225 √ó 2 = 450px&lt;/td&gt;
&lt;td&gt;Closest candidate is &lt;br&gt;&lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#how-to-choose-breakpoints-for-srcset-and-define-sizes" class="anchor"&gt;
  &lt;/a&gt;
  How to choose breakpoints for srcset and define sizes?
&lt;/h2&gt;

&lt;p&gt;When implementing responsive images, you will have to write the values for the &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; attributes. It can quickly get tricky. So let‚Äôs repeat the purpose of these two attributes so that it becomes easy to derive the values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;srcset&lt;/code&gt; - To define multiple image sources of different widths and let the browser pick the most appropriate candidate during HTML parsing.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sizes&lt;/code&gt; - To define the size of the image element. It could be a fixed size like &lt;code&gt;225px&lt;/code&gt; or relative to the viewport. You can use CSS media conditions here to provide different size values based on the viewport width.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before you provide different image sources in  &lt;code&gt;srcset&lt;/code&gt;, you need to understand what all sizes do you need based on the layout. It is going to be site-specific, meaning it is closely tied to your CSS.&lt;/p&gt;

&lt;p&gt;Here is a simple approach to this problem.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While calculating sizes, think in terms of image width relative to the viewport. For example - ‚ÄúMy layout is such that my image is going to be roughly X percent of the viewport if the screen size is above Y px.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let‚Äôs understand this with a few examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;sizes="(min-width 1024px) 33vw, 95vw)"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It means - ‚ÄúThe image is in a three-column layout on a screen larger than 1024px. Otherwise, it is close to full viewport width leaving some space around it‚Äù.&lt;/p&gt;

&lt;p&gt;Now, let‚Äôs pick the &lt;code&gt;sizes&lt;/code&gt; from our demo - &lt;a href="https://imagekitio.github.io/responsive-images-guide/srcset-sizes.html"&gt;https://imagekitio.github.io/responsive-images-guide/srcset-sizes.html&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;sizes="(max-width: 400px) 100vw, (max-width: 700px) 50vw, (max-width: 900px) 33vw, 225px"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It means - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If viewport width is upto 400px, each image takes up 100vw i.e. the whole viewport width.&lt;/li&gt;
&lt;li&gt;Upto 700px, each image takes up 50vw i.e. 50% width of total viewport width.&lt;/li&gt;
&lt;li&gt;Upto 900px, each image takes up 33vw i.e. 33% width of total viewport width.&lt;/li&gt;
&lt;li&gt;Above 900px, each image takes a fix 225px width.
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Defining image width relative to viewport does not always provide the most optimal image considering many devices &amp;amp; corresponding viewport width &amp;amp; DPR values. However, it is a practical solution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once we know the value of &lt;code&gt;sizes&lt;/code&gt;, it is easy to find out what all different size images we need to define in &lt;code&gt;srcset&lt;/code&gt; - &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Image size candidates from sizes&lt;/th&gt;
&lt;th&gt;Effective size at different DPR values&lt;br&gt;(width √ó DPR)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;400px&lt;br&gt;From the first media condition i.e.&lt;br&gt;&lt;code&gt;max-width: 400px) 100vw&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;400px at 1x&lt;br&gt;800px at 2x&lt;br&gt;1200px at 3x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;350px&lt;br&gt;From the second media condition i.e.&lt;br&gt;&lt;code&gt;(max-width: 700px) 50vw&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;350px at 1x&lt;br&gt;700px at 2x&lt;br&gt;1025px at 3x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;300px&lt;br&gt;From the third media condition i.e.&lt;br&gt;&lt;code&gt;max-width: 900px) 33vw&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;300px at 1x&lt;br&gt;600px at 2x&lt;br&gt;900px at 3x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;225px&lt;br&gt;From the fourth default media condition i.e. &lt;br&gt;&lt;code&gt;225px&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;225px at 1x&lt;br&gt;450px at 2x&lt;br&gt;675px at 3x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If you sort the effective sizes, here is what you will get - &lt;/p&gt;

&lt;p&gt;&lt;code&gt;225px&lt;/code&gt;, &lt;code&gt;300px&lt;/code&gt;,  &lt;code&gt;350px&lt;/code&gt;, &lt;code&gt;400px&lt;/code&gt;, &lt;code&gt;450px&lt;/code&gt;, &lt;code&gt;600px&lt;/code&gt;, &lt;code&gt;675px&lt;/code&gt;, &lt;code&gt;700px&lt;/code&gt;, &lt;code&gt;800px&lt;/code&gt;, &lt;code&gt;900px&lt;/code&gt;, &lt;code&gt;1025px&lt;/code&gt; and &lt;code&gt;1200px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are using an image CDN like ImageKit.io, it is easy to provide images in different dimension by addign URL parameters e.g.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;225px&lt;/code&gt; wide image - &lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-225"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-225&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;300px&lt;/code&gt; wide image - &lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-300"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-300&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;600px&lt;/code&gt; wide image - &lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-600"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-600&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, you don‚Äôt have to provide images at all required sizes in &lt;code&gt;srcset&lt;/code&gt;. You can select a few candidates, and the browser will pick the closest one. This serves two purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You don‚Äôt have to generate and store multiple variants of the same image.&lt;/li&gt;
&lt;li&gt;If you are using a CDN for faster delivery and caching, then having a few variants will improve your cache hit ratio as the repeat request will increase.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So you can pick three or four candidates and write  &lt;code&gt;srcset&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;srcset="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-225 225w,
        https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350 350w,
        https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-700 700w,
        https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-900 900w"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tips-for-choosing-breakpoints-while-writing-srcset" class="anchor"&gt;
  &lt;/a&gt;
  Tips for choosing breakpoints while writing srcset
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can look at your Google analytics device report to see what screen resolutions you should care about most. Accordingly, you will know which layout needs the most optimization. For example, assuming that 60% of the users on your website see a three-column layout and 20% see a single column layout. Then you can consider all size variations you need for these two layouts at multiple DPR values and write &lt;code&gt;srcset&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To increase cache hit ratio on CDN, don‚Äôt try and provide &lt;code&gt;srcset&lt;/code&gt; for all possible breakpoints and sizes. CDN cannot cache all your resources. Some resources have to evict to make space for others. This would cause more performance bottlenecks than gains.&lt;/li&gt;
&lt;li&gt;When in doubt - First think about your layout, i.e. CSS  ‚û°Ô∏è , then accordingly write  &lt;code&gt;sizes&lt;/code&gt;  ‚û°Ô∏è And finally choose breakpoints for  &lt;code&gt;srcset&lt;/code&gt; considering different DPR values and effective image sizes you need üôå.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#chapter-6-using-picture-element" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 6 - Using picture element
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; are useful to define multiple dimension variants of the same image. But if you need art direction - that is, to explicitly dictate browser to load an entirely different image based on browser viewport or image format support, you need &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-the-picture-element" class="anchor"&gt;
  &lt;/a&gt;
  When to use the Picture element
&lt;/h2&gt;

&lt;p&gt;Picture element should be used to achieve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Art direction&lt;/li&gt;
&lt;li&gt;Different format support&lt;/li&gt;
&lt;li&gt;Color theme example&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/large.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 800px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/small.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 400px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/large.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element consists of zero or more  &lt;code&gt;source&lt;/code&gt; and one &lt;code&gt;img&lt;/code&gt; element. The browser will consider each &lt;code&gt;source&lt;/code&gt; element to choose the best match based on device display and image format support.&lt;/p&gt;

&lt;p&gt;Each &lt;code&gt;source&lt;/code&gt; accepts &lt;code&gt;media&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; attributes in addition to well known &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#media-attribute" class="anchor"&gt;
  &lt;/a&gt;
  Media attribute
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;media&lt;/code&gt; attribute contains a media condition like CSS media query. If a source‚Äôs element media condition evaluates to &lt;code&gt;false&lt;/code&gt;, the browser skips that source. If none of the source element‚Äôs media conditions evaluate to &lt;code&gt;true&lt;/code&gt;, the browser loads the image specified in the &lt;code&gt;img&lt;/code&gt; tag.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-loading-different-based-on-screen-size" class="anchor"&gt;
  &lt;/a&gt;
  Example - Loading different based on screen size
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/large.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 800px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/small.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 400px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/large.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The browser will pick one of the source elements based on the &lt;code&gt;media&lt;/code&gt; condition.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#srcset-attribute" class="anchor"&gt;
  &lt;/a&gt;
  Srcset attribute
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;srcset&lt;/code&gt; attribute is the same as we discussed before. It contains a comma-separated list of different image resources.&lt;/p&gt;

&lt;p&gt;Each comma-separated item in &lt;code&gt;srcset&lt;/code&gt; has:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Image URL, e.g. &lt;code&gt;http://ik.imagekit.io/demo/default-image.jpg&lt;/code&gt; or relative path &lt;code&gt;/demo/default-image.jpg&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;An empty space&lt;/li&gt;
&lt;li&gt;The real width of the image:

&lt;ul&gt;
&lt;li&gt;Either using display density descriptor e.g. &lt;code&gt;1.5x&lt;/code&gt;, &lt;code&gt;2x&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;Or, using width descriptors e.g. &lt;code&gt;450w&lt;/code&gt;. This is the width of the image in pixels.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#example-loading-different-based-on-device-pixel-ratio" class="anchor"&gt;
  &lt;/a&gt;
  Example - Loading different based on device pixel ratio
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"large_1x.jpg 1x, large_2x.jpg 2x, large_3x.jpg 3x"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 800px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small_1x.jpg 1x, small_2x.jpg 2x, small_1x.jpg 3x"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 400px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"large_3x.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#type-attribute" class="anchor"&gt;
  &lt;/a&gt;
  Type attribute
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;type&lt;/code&gt; attribute specified the MIME type of the resource URL(s) in the source‚Äôs &lt;code&gt;srcset&lt;/code&gt;. If the browser supports that MIME type, it will load the resource. Otherwise, it will skip that source and move to the next. If none of the source‚Äôs type is supported by the browser, the image in &lt;code&gt;img&lt;/code&gt; is loaded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-loading-different-image-format-based-on-browser-support" class="anchor"&gt;
  &lt;/a&gt;
  Example - Loading different image format based on browser support
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/image.webp"&lt;/span&gt;
          &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/image.avif"&lt;/span&gt;
          &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/avif"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/image.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-demo-of-using-the-picture-element" class="anchor"&gt;
  &lt;/a&gt;
  Live demo of using the picture element
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs see this in action with a live demo - &lt;a href="https://imagekitio.github.io/responsive-images-guide/picture.html"&gt;https://imagekitio.github.io/responsive-images-guide/picture.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ih0WyKDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/picture-element-demo_U9wD8pBJV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ih0WyKDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/picture-element-demo_U9wD8pBJV.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are two &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; elements in this demo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first example contains a screenshot of the ImageKit media library to showcase different user interface elements. The interface varies based on screen size. So to depict the same, we are loading a different screenshot based on screen size. For screen size greater than or equal to &lt;code&gt;800px&lt;/code&gt;, you will see a desktop version of the user interface i.e. &lt;a href="https://ik.imagekit.io/ikmedia/dashboard.png"&gt;https://ik.imagekit.io/ikmedia/dashboard.png&lt;/a&gt;. Otherwise, you will see a mobile-friendly version i.e. &lt;a href="https://ik.imagekit.io/ikmedia/dashboard-mobile.png"&gt;https://ik.imagekit.io/ikmedia/dashboard-mobile.png&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The second example demonstrates loading a WebP format image if the browser has support for it. Otherwise, a JPG image is loaded.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#loading-different-image-in-dark-mode-vs-light-mode" class="anchor"&gt;
  &lt;/a&gt;
  Loading different image in dark mode vs light mode
&lt;/h2&gt;

&lt;p&gt;Dark mode lets you change the background color of an app window to black. As a web developer, you can choose to load a different image if a user has turned on dark mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"dark.jpg"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(prefers-color-scheme: dark)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"light.jpg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The browser will evaluate the media condition &lt;code&gt;(prefers-color-scheme: dark)&lt;/code&gt;, and if it is &lt;code&gt;true&lt;/code&gt;, it will pick that source and load &lt;code&gt;dark.jpg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is how it looks, toggle the dark mode setting and refresh the page to see how the browser loads a different image.&lt;/p&gt;

&lt;p&gt;Live demo - &lt;a href="https://imagekitio.github.io/responsive-images-guide/dark-vs-light-mode.html"&gt;https://imagekitio.github.io/responsive-images-guide/dark-vs-light-mode.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ytXrd6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/guides/light-vs-dark-mode-demo_ngxfbrNyG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ytXrd6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/guides/light-vs-dark-mode-demo_ngxfbrNyG.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chapter-7-using-client-hints" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 7 - Using client hints
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#what-are-client-hints" class="anchor"&gt;
  &lt;/a&gt;
  What are client hints?
&lt;/h2&gt;

&lt;p&gt;As the name suggests, client hints are the hints provided by the client device to the server along with the request itself. These hints allow the server to fulfill a particular request with the most optimal resource. The latter is known as content negotiation.&lt;/p&gt;

&lt;p&gt;Client hints provide this information via HTTP request headers. For example - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rHIRHXSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/demo/imagekitwebsite/tr:f-png/wp-content/uploads/dpr_request_header.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rHIRHXSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/demo/imagekitwebsite/tr:f-png/wp-content/uploads/dpr_request_header.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-enable-client-hints" class="anchor"&gt;
  &lt;/a&gt;
  How to enable client hints?
&lt;/h2&gt;

&lt;p&gt;Not every request has these HTTP headers. You will have to explicitly tell the browser to include these client hints using a &lt;code&gt;meta&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Accept-CH"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"DPR, Viewport-Width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This allows the browser to send the &lt;code&gt;DPR&lt;/code&gt; value (device pixel ratio) and &lt;code&gt;Viewport-Width&lt;/code&gt; (device screen width in CSS pixels) along with image requests.&lt;/p&gt;

&lt;p&gt;That‚Äôs great. But why do we need client hints in implementing responsive images when we already have &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;picture&lt;/code&gt;?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-client-hints" class="anchor"&gt;
  &lt;/a&gt;
  Why do we need client hints?
&lt;/h2&gt;

&lt;p&gt;To understand the need for client hints, let's take a closer look at what we have learned so far -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; to define URLs of different image variants and specify rendered image size so that browser can download the most appropriate image based on the size of the viewport on its own.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;picture&lt;/code&gt; element to dedicate how the browser should load a differently cropped or entirely different image, which is better suited for a smaller display.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;picture&lt;/code&gt; provides us with everything we need to implement responsive images use-cases, but it could be time-consuming to develop and maintain for complex use cases.&lt;/p&gt;

&lt;p&gt;All of the above methods require you to modify markup so that as a web developer, you can pass the essential missing piece of information that the browser needs at runtime to be able to download the right image. Well, client-hints do the same but without the complex markup ‚Äî they provide the missing link between the browser and the server when it comes to layout information and device capabilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let‚Äôs understand with an example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Suppose you have a simple resolution switching use cases where you want to load a different size variant of the same image based on the viewport width. The syntax would be -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg"&lt;/span&gt; 
     &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 300w,
             medium.jpg 600w,
             large.jpg 900w"&lt;/span&gt;
     &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw, (max-width: 600px) 50vw, (max-width: 900px) 33vw, 225px"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;However, if you want to load a WebP image in a supported browser, your syntax becomes -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- webp format for (max-width: 300px) 100vw --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw"&lt;/span&gt;
          &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.webp 300w,
                  medium.webp 600w,
                  large.webp 900w"&lt;/span&gt;
            &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- jpg format for (max-width: 300px) 100vw --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw"&lt;/span&gt;
          &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 300w,
                  medium.jpg 600w,
                  large.jpg 900w"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/image.avif"&lt;/span&gt;
            &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/avif"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- webp format for (max-width: 600px) 50vw --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw"&lt;/span&gt;
          &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.webp 300w,
                  medium.webp 600w,
                  large.webp 900w"&lt;/span&gt;
            &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- jpg format for (max-width: 600px) 50vw --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw"&lt;/span&gt;
          &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 300w,
                  medium.jpg 600w,
                  large.jpg 900w"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/image.avif"&lt;/span&gt;
            &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/avif"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- webp format for (max-width: 900px) 33vw --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw"&lt;/span&gt;
          &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.webp 300w,
                  medium.webp 600w,
                  large.webp 900w"&lt;/span&gt;
            &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- jpg format for (max-width: 900px) 33vw --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw"&lt;/span&gt;
          &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 300w,
                  medium.jpg 600w,
                  large.jpg 900w"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"large.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Yes! It quickly gets complex.&lt;/p&gt;

&lt;p&gt;If we use client hints, the above syntax can be reduced to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Accept-CH"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"DPR, Width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/image.jpg"&lt;/span&gt; &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw, (max-width: 600px) 50vw, (max-width: 900px) 33vw, 225px"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Pretty amazing, right! No &lt;code&gt;srcset&lt;/code&gt;. But for this to work, the server should be capable of understanding client hints and respond appropriately.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We will discuss in detail how this is possible, but the bottom line is ‚Äî when possible, you should aim to centralize image resizing &amp;amp; processing and automate as much as possible. This is precisely what client-hints do. ImageKit supports client hints out of the box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#client-hints-for-responsive-images" class="anchor"&gt;
  &lt;/a&gt;
  Client hints for responsive images
&lt;/h2&gt;

&lt;p&gt;Among others, one of the primary uses of client hints is to send information about the required size of the image in the current page layout. This simplifies the markup and automates a lot of information passing from browser to web server when implementing responsive images. &lt;/p&gt;

&lt;p&gt;Let‚Äôs put that in perspective by taking a closer look at what all information does the browser need at runtime to be able to load an appropriate image -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Viewport width.&lt;/li&gt;
&lt;li&gt;How big will the image render? It depends upon your layout, which might adapt based on the width of the viewport.&lt;/li&gt;
&lt;li&gt;Device pixel ratio i.e. &lt;code&gt;1x&lt;/code&gt;, &lt;code&gt;2x&lt;/code&gt;, &lt;code&gt;3x&lt;/code&gt; or &lt;code&gt;4x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;URL of the image resource for different sizes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can opt-in the following client hints, which will be sent as request headers along with HTTP request - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Width&lt;/code&gt; - Final size of the required image in page layout considering device pixel ratio&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DPR&lt;/code&gt; - Device pixel ratio&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Viewport-Width&lt;/code&gt; - Viewport width in CSS pixels.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Accept&lt;/code&gt; - This header is always sent with every request by default.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Save-Data&lt;/code&gt; - &lt;code&gt;on&lt;/code&gt; or &lt;code&gt;off&lt;/code&gt; to indicate the user‚Äôs preference to receive less data.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ECT&lt;/code&gt; - &lt;em&gt;Effective Connection Type&lt;/em&gt; e.g. **&lt;code&gt;4g&lt;/code&gt;, &lt;code&gt;3g&lt;/code&gt;, &lt;code&gt;2g&lt;/code&gt;, and &lt;code&gt;slow-2g&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;RTT&lt;/code&gt; - &lt;em&gt;Round Trip Time&lt;/em&gt;, in milliseconds, on the application layer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Downlink&lt;/code&gt; - Approximate downstream speed of the user‚Äôs connection in megabits per second (Mbps).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Width&lt;/code&gt;,  &lt;code&gt;DPR&lt;/code&gt;, and &lt;code&gt;Viewport-Width&lt;/code&gt; hints are most relevant to responsive images implementation as they allow the webserver to control the image size from the backend.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Accept&lt;/code&gt; hint can be used by the server to deliver images in next-generation format e.g. WebP or AVIF, without changing the image source URL or using the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;The server can use network hints such as &lt;code&gt;Save-Data&lt;/code&gt;, &lt;code&gt;ECT&lt;/code&gt;, &lt;code&gt;RTT&lt;/code&gt;, and &lt;code&gt;Downlink&lt;/code&gt; to deliver a low-quality variant of the image, which will consume less data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#width" class="anchor"&gt;
  &lt;/a&gt;
  Width
&lt;/h3&gt;

&lt;p&gt;It provides the final size of the image required as per page layout after factoring in the device pixel ratio.  &lt;code&gt;Width&lt;/code&gt;  hint is sent with requests for image resources fired off by &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; tags using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-sizes"&gt;&lt;code&gt;sizes&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the most useful client hint with respect to implementing responsive images. &lt;/p&gt;

&lt;p&gt;For example - Let‚Äôs say a page has an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element with the &lt;code&gt;sizes&lt;/code&gt; attribute set to 300. This means the layout needs a &lt;code&gt;300&lt;/code&gt; CSS pixel wide image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Allow Width header to be sent --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Accept-CH"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/image.jpg"&lt;/span&gt;&lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"300px"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now the browser takes 300 and multiplies it with the device pixel ratio. Assuming device pixel ratio (DPR) is 2, browser sets &lt;code&gt;Width&lt;/code&gt; hint to &lt;code&gt;600,&lt;/code&gt; i.e. 300x2. This is the actual size of the image required for the current layout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Request headers
GET: /image.jpg
width: 600
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This allows the server to respond with an image, which is optimal for this device and the page's current layout.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dpr" class="anchor"&gt;
  &lt;/a&gt;
  DPR
&lt;/h3&gt;

&lt;p&gt;This hint provides the device pixel ratio. It is equivalent to &lt;code&gt;window.devicePixelRatio&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example - when opted in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Allow DPR header to be sent --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Accept-CH"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"DPR"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/image.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Assuming, device pixel ratio is 2, the browser will set the &lt;code&gt;DPR&lt;/code&gt; hint to 2.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Request headers
GET: /image.jpg
dpr: 2
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can use this header on the server to send the right image variant e.g. &lt;code&gt;1x&lt;/code&gt;, &lt;code&gt;2x&lt;/code&gt; or &lt;code&gt;3x&lt;/code&gt; based on the actual device pixel ratio.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#viewportwidth" class="anchor"&gt;
  &lt;/a&gt;
  Viewport-Width
&lt;/h3&gt;

&lt;p&gt;This hint provides the viewport width in CSS pixels. It is equivalent to &lt;code&gt;window.innerWidth&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;You can use this hint on the server-side to respond with an image that is suitable for a specific screen size. This is useful for implementing an art direction use-case.&lt;/p&gt;

&lt;p&gt;For example - when opted in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Allow Viewport-Width header to be sent --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Accept-CH"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Viewport-Width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/image.jpg"&lt;/span&gt;&lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"300px"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Assuming, device screen width is 300 CSS pixel wide, the browser will set &lt;code&gt;Viewport-Width&lt;/code&gt; hint to 300.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Request headers
GET: /image.jpg
viewport-width: 300
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#accept" class="anchor"&gt;
  &lt;/a&gt;
  Accept
&lt;/h3&gt;

&lt;p&gt;It provides what all content type the browser supports, which can be leveraged by the server to send the most optimal response.&lt;/p&gt;

&lt;p&gt;Example use case includes serving images in WebP or AVIF format when browser declares the support for it in &lt;code&gt;Accept&lt;/code&gt; header. For example - &lt;code&gt;Accept&lt;/code&gt; header value in an image resource request in Chrome is &lt;code&gt;image/avif,image/webp,image/apng,image/*,*/*;q=0.8&lt;/code&gt;. It has &lt;code&gt;image/webp&lt;/code&gt; in it, and the server can use this to respond with WebP format.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ARlKHy9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/accept-client-hint_GDvo26k8y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ARlKHy9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/accept-client-hint_GDvo26k8y.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are using ImageKit, then it &lt;a href="https://docs.imagekit.io/features/image-optimization/automatic-image-format-conversion"&gt;automatically converts image format&lt;/a&gt; based on Accept header value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#savedata" class="anchor"&gt;
  &lt;/a&gt;
  Save-Data
&lt;/h3&gt;

&lt;p&gt;This hint indicates the client's preference for reduced data usage. When the value is &lt;code&gt;on&lt;/code&gt;, the server should try to send an alternative smaller payload in the response. For example, in image requests, the server should respond with a lower quality image to reduce data usage if the value of &lt;code&gt;Save-Data&lt;/code&gt; request header is &lt;code&gt;on&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKgVOgTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/demo/imagekitwebsite/tr:w-700%2Cdpr-2%2Cf-png/wp-content/uploads/save-data-header.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKgVOgTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/demo/imagekitwebsite/tr:w-700%2Cdpr-2%2Cf-png/wp-content/uploads/save-data-header.jpg" alt="Save-Data Client Hint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mobile browsers such as Chrome Mobile and Opera Mobile allow the user to activate a data saver mode. With this mode enabled, the browsers send the &lt;code&gt;Save-Data&lt;/code&gt; header with the request, with the &lt;code&gt;on&lt;/code&gt; value. With this mode disabled, the &lt;code&gt;Save-Data&lt;/code&gt; header is not sent at all.&lt;/p&gt;

&lt;p&gt;For example, the right image is almost 33% smaller when accessed by a client with Save-Data enabled. You can test this on the Chrome desktop by installing &lt;a href="https://chrome.google.com/webstore/detail/data-saver/pfmgfdlgomnbgkofeojodiodmgpgmkac?hl=en"&gt;this extension&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nFK_uP4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/demo/imagekitwebsite/tr:w-720%2Cdpr-2%2Cf-png/wp-content/uploads/save-data-demo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nFK_uP4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/demo/imagekitwebsite/tr:w-720%2Cdpr-2%2Cf-png/wp-content/uploads/save-data-demo.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ImageKit &lt;a href="https://docs.imagekit.io/features/image-optimization/data-saver-mode"&gt;supports Save-Data mode&lt;/a&gt; and when enabled, it will deliver a low-quality image to reduce data transfer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#ect-rtt-and-downlink" class="anchor"&gt;
  &lt;/a&gt;
  ECT, RTT, and Downlink
&lt;/h3&gt;

&lt;p&gt;Besides &lt;code&gt;Save-Data&lt;/code&gt;  hint, we also have &lt;code&gt;ECT&lt;/code&gt;, &lt;code&gt;RTT&lt;/code&gt; and &lt;code&gt;Downlink&lt;/code&gt; client hints - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ECT&lt;/code&gt; - &lt;em&gt;Effective Connection Type&lt;/em&gt; e.g. **&lt;code&gt;4g&lt;/code&gt;, &lt;code&gt;3g&lt;/code&gt;, &lt;code&gt;2g&lt;/code&gt;, and &lt;code&gt;slow-2g&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;RTT&lt;/code&gt; - &lt;em&gt;Round Trip Time&lt;/em&gt;, in milliseconds, on the application layer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Downlink&lt;/code&gt; - Approximate downstream speed of the user‚Äôs connection in megabits per second (Mbps).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/client-hints"&gt;Jeremy Wagner&lt;/a&gt; wrote in Google Web Fundamentals -  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Adaptive performance is the idea that we can adjust how we deliver resources based on the information client hints makes available to us; specifically, information surrounding the current state of the user‚Äôs network connection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Time is the key&lt;/strong&gt; ‚Äî Taking forever to load a high-quality image on a slow network is more frustrating for your users than showing a low-quality variant that loads quickly. You can use these network client hints to &lt;a href="https://github.com/malchata/client-hints-example/blob/master/includes/functions.php#L8"&gt;calculate a score of client&lt;/a&gt;‚Äô&lt;a href="https://github.com/malchata/client-hints-example/blob/master/includes/functions.php#L8"&gt;s network connection quality&lt;/a&gt; and accordingly change your logic on server to help users on the slow network have decent experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitation-of-client-hints" class="anchor"&gt;
  &lt;/a&gt;
  Limitation of client hints
&lt;/h2&gt;

&lt;p&gt;Client hints look pretty amazing. They automate responsive images without major markup changes. But there are some limitations with client hints -&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#client-hints-dont-work-in-all-browsers" class="anchor"&gt;
  &lt;/a&gt;
  Client hints don‚Äôt work in all browsers
&lt;/h3&gt;

&lt;p&gt;At the moment, they are only supported in Chrome and Chromium-based browsers, Edge, and Opera.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lQOpSX-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_7E0F730B8904F9164DE50ED2794395678260F68A4F209B065252D2D8D36F2F6A_1604033274584_Screenshot%2B2020-10-30%2Bat%2B10.16.44%2BAM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lQOpSX-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_7E0F730B8904F9164DE50ED2794395678260F68A4F209B065252D2D8D36F2F6A_1604033274584_Screenshot%2B2020-10-30%2Bat%2B10.16.44%2BAM.png" alt="Can I Use - https://caniuse.com/client-hints-dpr-width-viewport"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crossorigin-client-hints-removed-in-chrome-67-in-the-desktop-version" class="anchor"&gt;
  &lt;/a&gt;
  Cross-origin client hints removed in Chrome 67 in the desktop version
&lt;/h3&gt;

&lt;p&gt;After client hints landing in Chrome 35, there were concerns around tracking users across multiple websites because of the device-related information passed through client hints.&lt;/p&gt;

&lt;p&gt;Essentially, sending highly granular data, such as image and viewport width, may help identify users across multiple requests. More importantly, there was no mechanism to control which origin should receive this. The moment you opt-in for client hints, all image resource type request will start sharing device-specific data with origins.&lt;/p&gt;

&lt;p&gt;If your website is hosted on &lt;code&gt;www.example.com&lt;/code&gt; and images are on &lt;code&gt;www.example.com/image.jpg&lt;/code&gt; it is fine. But if images on &lt;code&gt;www.images.third-party-service.com/image.jpg&lt;/code&gt; have the same data, it may reveal the same information about the user to other origins that may not have had access to it before.&lt;/p&gt;

&lt;p&gt;As a result, the Chrome team removed cross-origin client hints in the desktop version of Chrome 67, but they &lt;a href="https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/8RBFue7RMXQ/7TF4VPVzBAAJ"&gt;still work in mobile&lt;/a&gt;. These restrictions will be removed soon when work on &lt;a href="https://wicg.github.io/feature-policy/"&gt;Feature Policy&lt;/a&gt; is complete.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-server-should-support-client-hints" class="anchor"&gt;
  &lt;/a&gt;
  Your server should support client hints
&lt;/h3&gt;

&lt;p&gt;For client hints to work, your server should understand them and respond with an appropriate image.&lt;/p&gt;

&lt;p&gt;For example, the servers should be able to - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deliver the right size image based on the value of the &lt;code&gt;Width&lt;/code&gt; client hint.&lt;/li&gt;
&lt;li&gt;Serve images in WebP or AVIF format based on the value of the &lt;code&gt;Accept&lt;/code&gt; client hint.&lt;/li&gt;
&lt;li&gt;Select the right image variant based on the value of the &lt;code&gt;DPR&lt;/code&gt; client hint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fortunately, you can automate all this using an image CDN like &lt;a href="https://imagekit.io/"&gt;ImageKit.io&lt;/a&gt;, which supports client hints out of the box.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caching-on-cdn-can-be-tricky" class="anchor"&gt;
  &lt;/a&gt;
  Caching on CDN can be tricky
&lt;/h3&gt;

&lt;p&gt;You would want to &lt;a href="https://imagekit.io/blog/ultimate-guide-to-http-caching-for-static-assets/"&gt;cache your static resources&lt;/a&gt; like images to accelerate the download and decrease the load on your origin server. But with client hints in the mix, it can be tricky.&lt;/p&gt;

&lt;p&gt;Usually, a CDN looks for the objects in the cache based on the resource URL. However, when the server changes the response based on other request HTTP headers i.e. client hints, the CDN has to be aware of how to respond to future requests. Essentially if we are changing the response based on the &lt;code&gt;Accept&lt;/code&gt; request header value, we will have to configure the CDN to store seperate response in cache based on the value of the &lt;code&gt;Accept&lt;/code&gt; request header.&lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;Vary&lt;/code&gt; response header to indicate CDN and intermediate proxies to maintain different cache objects based on header names in &lt;code&gt;Vary&lt;/code&gt;. For example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Vary: Accept, DPR
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This means that CDN and intermediate proxies should take the value of the &lt;code&gt;Accept&lt;/code&gt; and &lt;code&gt;DPR&lt;/code&gt; request header in account in addition to resource URL while storing and looking up objects in the cache. The cache lookup key should be &lt;code&gt;Accept + DPR + resource URL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is important to note that you should not set &lt;code&gt;Vary: User-agent&lt;/code&gt; because there could be a huge number of unique values for the &lt;code&gt;User-Agent&lt;/code&gt; request header, resulting in a lower cache hit ratio on the CDN.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An image CDN like &lt;a href="https://imagekit.io/"&gt;ImageKit.io&lt;/a&gt; already takes care of CDN caching while ensuring the cache hit ratio is high.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#chapter-8-responsive-images-in-css" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 8 - Responsive images in CSS
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;background-image&lt;/code&gt; is a very powerful CSS property that allows you to insert images on elements other than &lt;code&gt;img&lt;/code&gt;. What you have learned so far about responsive images deals with only HTML markup. Let‚Äôs see how to implement responsive images in CSS.&lt;/p&gt;

&lt;p&gt;We have the following use-cases to cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Art direction i.e. loading entirely different images based on screen width. In HTML, we used the &lt;code&gt;picture&lt;/code&gt; element. In CSS, we can use old fashioned media queries.&lt;/li&gt;
&lt;li&gt;Providing high-resolution image variants to let the browser make a choice. In HTML &lt;code&gt;srcset&lt;/code&gt; attribute provides the browser with &lt;code&gt;1x&lt;/code&gt;, &lt;code&gt;2x&lt;/code&gt;, and &lt;code&gt;3x&lt;/code&gt; variants of the same image. In CSS, we have the option to use &lt;code&gt;image-set&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;In CSS media query alone is enough to implement responsive images. However, &lt;code&gt;image-set&lt;/code&gt; is similar to &lt;code&gt;srcset&lt;/code&gt; because it provides the options and lets the browser choose the image. But it is not equivalent to srcset.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#art-direction-in-css-loading-an-entirely-different-image-based-on-screen-size" class="anchor"&gt;
  &lt;/a&gt;
  Art direction in CSS ‚Äî loading an entirely different image based on screen size
&lt;/h2&gt;

&lt;p&gt;In HTML, we have a &lt;code&gt;picture&lt;/code&gt; element to load an image conditionally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/large.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 800px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/small.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 400px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/large.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In CSS, we have media queries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(small.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;background-position-x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(large.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this example, on small screen &lt;code&gt;background-image: url(small.jpg)&lt;/code&gt;  is applied and when viewport width is greater than or equal to 800px, &lt;code&gt;background-image: url(large.jpg)&lt;/code&gt; is applied.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loading-highresolution-images-based-on-device-pixel-ratio" class="anchor"&gt;
  &lt;/a&gt;
  Loading high-resolution images based on device pixel ratio
&lt;/h2&gt;

&lt;p&gt;In HTML we have &lt;code&gt;srcset&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg"&lt;/span&gt; 
     &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg 1x,
             image_2x.jpg 2x"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In CSS, we can use &lt;code&gt;image-set&lt;/code&gt; and media queries.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Using &lt;code&gt;image-set&lt;/code&gt; to provide high resolution images variants&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(image.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;fallback&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-webkit-image-set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="sx"&gt;url(image.jpg)&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="sx"&gt;url(image_2x.jpg)&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  
  &lt;span class="p"&gt;);&lt;/span&gt;  
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;image-set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="sx"&gt;url(image.jpg)&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="sx"&gt;url(image_2x.jpg)&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;image-set&lt;/code&gt; is not supported, the fallback &lt;code&gt;background-image: url(image.jpg)&lt;/code&gt; will be applied.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Using media queries&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(image.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;Standard&lt;/span&gt; &lt;span class="err"&gt;syntax&lt;/span&gt; &lt;span class="err"&gt;supported&lt;/span&gt; &lt;span class="err"&gt;in&lt;/span&gt; &lt;span class="err"&gt;Chrome,&lt;/span&gt; &lt;span class="err"&gt;Firefox,&lt;/span&gt; &lt;span class="err"&gt;and&lt;/span&gt; &lt;span class="err"&gt;Opera&lt;/span&gt;
  &lt;span class="err"&gt;@media&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="py"&gt;min-resolution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2dppx&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;-webkit-min-device-pixel-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;/* For Safari &amp;amp; Android Browser */&lt;/span&gt; 
  &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(image_2x.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#chapter-9-lazy-load-responsive-images" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 9 - Lazy load responsive images
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#what-is-lazy-loading-images" class="anchor"&gt;
  &lt;/a&gt;
  What is Lazy loading images?
&lt;/h2&gt;

&lt;p&gt;As Rahul Nanwani wrote in &lt;a href="https://imagekit.io/blog/lazy-loading-images-complete-guide/"&gt;lazy loading images guide&lt;/a&gt; -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lazy Loading Images is a set of techniques in web and application development that defer the loading of images on a page to a later point in time - when those images are actually needed, instead of loading them upfront. These techniques help in improving performance, better utilization of the device‚Äôs resources, and reducing associated costs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usually, to implement lazy loading in HTML, instead of &lt;code&gt;src&lt;/code&gt; or &lt;code&gt;srcset&lt;/code&gt; attributes, we use &lt;code&gt;data-src&lt;/code&gt; or &lt;code&gt;data-srcset&lt;/code&gt; so that browser does not load images during &lt;a href="#pre-loaders-or-speculative-parsing-to-rescue---the-new-way"&gt;speculative parsing&lt;/a&gt;. Later on, when Javascript is executed, and the user has scrolled near the image element, we load the actual image and update the &lt;code&gt;src&lt;/code&gt; or &lt;code&gt;srcset&lt;/code&gt; attribute‚Äôs value.&lt;/p&gt;

&lt;p&gt;Two very popular lazy loading libraries &lt;a href="https://github.com/aFarkas/lazysizes"&gt;lazysizes&lt;/a&gt; and &lt;a href="https://github.com/verlok/vanilla-lazyload"&gt;vanilla-lazyload&lt;/a&gt; support responsive images out of the box. In this guide, we will share a few examples of lazysizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lazy-loading-responsive-images-in-srcset-and-sizes" class="anchor"&gt;
  &lt;/a&gt;
  Lazy loading responsive images in srcset and sizes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 1000px) 930px, 90vw"&lt;/span&gt;
    &lt;span class="na"&gt;data-srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 500w,
                 medium.jpg 640w,
                 big.jpg 1024w"&lt;/span&gt;
    &lt;span class="na"&gt;data-src=&lt;/span&gt;&lt;span class="s"&gt;"medium.jpg"&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"lazyload"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-low-quality-placeholder-in-lazy-loading" class="anchor"&gt;
  &lt;/a&gt;
  Using low quality placeholder in lazy loading
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"low-quaity-placeholder.jpg"&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 1000px) 930px, 90vw"&lt;/span&gt;
    &lt;span class="na"&gt;data-srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 500w,
                 medium.jpg 640w,
                 big.jpg 1024w"&lt;/span&gt;
    &lt;span class="na"&gt;data-src=&lt;/span&gt;&lt;span class="s"&gt;"medium.jpg"&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"lazyload"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lazy-loading-images-in-picture-element" class="anchor"&gt;
  &lt;/a&gt;
  Lazy loading images in picture element
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;
          &lt;span class="na"&gt;data-srcset=&lt;/span&gt;&lt;span class="s"&gt;"500.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 500px)"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;
          &lt;span class="na"&gt;data-srcset=&lt;/span&gt;&lt;span class="s"&gt;"1024.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 1024px)"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;
          &lt;span class="na"&gt;data-srcset=&lt;/span&gt;&lt;span class="s"&gt;"1200.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"fallback-image.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;data-src=&lt;/span&gt;&lt;span class="s"&gt;"1024.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"lazyload"&lt;/span&gt;
          &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"image with artdirection"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#chapter-10-how-to-verify-responsive-image-implementation" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 10 - How to verify responsive image implementation?
&lt;/h2&gt;

&lt;p&gt;After you implement responsive images, it's essential to verify that the right image is being loaded on different devices. Let‚Äôs discuss how various tools and browser's developer console can help us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-imagekit-website-analyzer" class="anchor"&gt;
  &lt;/a&gt;
  Using ImageKit website analyzer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://imagekit.io/website-analyzer/"&gt;ImageKit website analyzer&lt;/a&gt; is a tailor-made tool to find our image related issues on the webpage. It loads the webpage in a headless browser. All the image requests are monitored and compared against the optimized version fetched from ImageKit. &lt;/p&gt;

&lt;p&gt;You will get a report like below. Look under &lt;strong&gt;Properly resize images&lt;/strong&gt; to see if images are in the right sizes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f3htp76b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/imagekit-website-analyzer-audit_pKqN97Pl8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f3htp76b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/imagekit-website-analyzer-audit_pKqN97Pl8.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tool also provides an image by image explanation for all images on the webpage like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FIAFGRXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_7E0F730B8904F9164DE50ED2794395678260F68A4F209B065252D2D8D36F2F6A_1605154179992_Screenshot%2B2020-11-12%2Bat%2B9.39.30%2BAM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FIAFGRXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_7E0F730B8904F9164DE50ED2794395678260F68A4F209B065252D2D8D36F2F6A_1605154179992_Screenshot%2B2020-11-12%2Bat%2B9.39.30%2BAM.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This tool provides image analysis reports for desktop and mobile. However, at the moment, it does not take into account the device pixel ratio, so you will have to consider that, especially while looking at the mobile report.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#using-lighthouse" class="anchor"&gt;
  &lt;/a&gt;
  Using Lighthouse
&lt;/h2&gt;

&lt;p&gt;You can use &lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt; to verify responsive images are implemented correctly. Run the Lighthouse Performance Audit for Mobile &amp;amp; Desktop and look for the &lt;strong&gt;Properly size images&lt;/strong&gt; audit results.&lt;/p&gt;

&lt;p&gt;This will show all the images that aren't appropriately sized based on the page layout.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qw95STs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_7E0F730B8904F9164DE50ED2794395678260F68A4F209B065252D2D8D36F2F6A_1605146844250_uses-responsive-images.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qw95STs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_7E0F730B8904F9164DE50ED2794395678260F68A4F209B065252D2D8D36F2F6A_1605146844250_uses-responsive-images.png" alt="Source - https://web.dev/uses-responsive-images/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manually-verifying-responsive-images" class="anchor"&gt;
  &lt;/a&gt;
  Manually verifying responsive images
&lt;/h2&gt;

&lt;p&gt;You can use the Chrome device emulator to load a webpage on different devices and see the image requests in the network tab. Few points to note before starting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Browser cache should be disabled - so that with subsequent reloads, we can see which image resources are being requested.&lt;/li&gt;
&lt;li&gt;Ensure device pixel ratio is added, as shown in the screenshot below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l4HPbxV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/chrome-emulate-enable-dpr_QdiHs9Mv5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l4HPbxV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/chrome-emulate-enable-dpr_QdiHs9Mv5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now open the webpage and hover over the image element to see its required CSS pixel width. Multiple it with DPR value to get the required width of the image resource. &lt;/p&gt;

&lt;p&gt;For example here, &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hxthEzCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/verifying-responsive-images-srcset-sizes_ygIzVisE6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hxthEzCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/verifying-responsive-images-srcset-sizes_ygIzVisE6.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DPR value - 2.6&lt;/li&gt;
&lt;li&gt;CSS pixel width - 206&lt;/li&gt;
&lt;li&gt;Required image size - 206 √ó 2.6 = 535.6&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Available options based on &lt;code&gt;srcset&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;srcset="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-225 225w,
        https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-300 300w,
        https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350 350w,
        https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-640 640w"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So the nearest candidate is a 640px wide image, and the browser downloads this image.  You can use the same technique to see if the right size images are loaded or not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#faqs" class="anchor"&gt;
  &lt;/a&gt;
  FAQs
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#why-cant-we-do-this-using-css-or-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Why can't we do this using CSS or JavaScript?
&lt;/h2&gt;

&lt;p&gt;It's logical to think that we have all the information about browser, device, and layout and can use Javascript to load the right size image. However, this will delay the loading of image resources and defeat the whole purpose of rendering images quickly. Modern browsers don‚Äôt wait for Javascript and CSS to be parsed and executed before it triggers the image request. The browser scans the whole HTML and looks for image resources without waiting for Javascript to execute. That is why we need to use the &lt;code&gt;srcset&lt;/code&gt;, &lt;code&gt;sizes&lt;/code&gt;, and &lt;code&gt;picture&lt;/code&gt; element to implement responsive images. Learn &lt;a href="#how-browser-loads-a-webpage--the-old-way"&gt;how the browser loads a webpage&lt;/a&gt; to understand this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-i-use-both-density-and-width-descriptor-in-srcset" class="anchor"&gt;
  &lt;/a&gt;
  Can I use both density and width descriptor in srcset?
&lt;/h2&gt;

&lt;p&gt;No. As per the &lt;a href="https://html.spec.whatwg.org/multipage/images.html#image-candidate-string"&gt;specifications&lt;/a&gt; about how &lt;code&gt;srcset&lt;/code&gt;  is parsed - If an image candidate string for an element has the width descriptor specified, all other image candidate strings for that element must also have the width descriptor specified. Also, if an element has a size attribute present, all image candidate strings for that element must have the width descriptor specified.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-sizes-attribute-with-srcset" class="anchor"&gt;
  &lt;/a&gt;
  Why do we need sizes attribute with srcset?
&lt;/h2&gt;

&lt;p&gt;So that browser can trigger image load as part of preloading instead of waiting for CSS to download &amp;amp; parse. Learn &lt;a href="#how-browser-loads-a-webpage--the-old-way"&gt;how the browser loads a webpage&lt;/a&gt; to understand this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-use-width-and-not-a-height-in-srcset" class="anchor"&gt;
  &lt;/a&gt;
  Why do we use width and not a height in srcset?
&lt;/h2&gt;

&lt;p&gt;We have been specifying only image widths in &lt;code&gt;srcset&lt;/code&gt; and not height because the vast majority of responsive design is width constrained and not height, so to keep things simple, the specification only deals in widths.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-sizes-values-should-i-declare" class="anchor"&gt;
  &lt;/a&gt;
  What sizes values should I declare?
&lt;/h2&gt;

&lt;p&gt;The value of the &lt;code&gt;sizes&lt;/code&gt; attribute should specify the size of the rendered image in CSS pixel. It could be an absolute value e.g. &lt;code&gt;250px&lt;/code&gt; or relative to viewport size e.g. &lt;code&gt;33vw&lt;/code&gt; means 33% of viewport width. You can use comma-separated media conditions in the &lt;code&gt;sizes&lt;/code&gt; attribute to tell how rendered image width changes based on viewport size. For example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;sizes="(max-width: 300px) 100vw, (max-width: 600px) 50vw, (max-width: 900px) 33vw, 900px"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-image-sizes-should-i-provide-in-srcset" class="anchor"&gt;
  &lt;/a&gt;
  What image sizes should I provide in srcset?
&lt;/h2&gt;

&lt;p&gt;First, think about your layout i.e., CSS. Then accordingly, write  &lt;code&gt;sizes&lt;/code&gt;. And finally, choose breakpoints for  &lt;code&gt;srcset&lt;/code&gt; considering different DPR values and effective image sizes you need üôå.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-should-i-generate-different-size-image-assets" class="anchor"&gt;
  &lt;/a&gt;
  How should I generate different size image assets?
&lt;/h2&gt;

&lt;p&gt;You will need to provide different size image variants to implement responsive images. On a typical e-commerce or news website, this could be a huge problem as we are dealing with thousands of photos. The solution is to use an &lt;a href="https://imagekit.io/blog/what-is-image-cdn-guide/"&gt;image CDN&lt;/a&gt;. ImageKit.io is an image CDN that provides real-time image resizing, automatic image format conversion, and optimization. It offers a &lt;a href="https://imagekit.io/registration"&gt;forever free plan&lt;/a&gt; with generous bandwidth limits.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-make-an-image-responsive-in-html" class="anchor"&gt;
  &lt;/a&gt;
  How do you make an image responsive in HTML?
&lt;/h2&gt;

&lt;p&gt;If you are wondering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to load different images based on screen size?&lt;/li&gt;
&lt;li&gt;How to change image size for mobile devices?&lt;/li&gt;
&lt;li&gt;How to display different images on mobile and desktop devices?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, know that all of these use-cases are related and can be solved using the latest responsive image techniques that we have discussed in this guide.&lt;/p&gt;

&lt;p&gt;Often you will only need &lt;a href="#chapter-4---srcset"&gt;&lt;code&gt;srcset&lt;/code&gt;&lt;/a&gt; attribute. In few cases you might want to use &lt;a href="#chapter-6---using-picture-element"&gt;&lt;code&gt;picture&lt;/code&gt;&lt;/a&gt; tag.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#srcset-not-working" class="anchor"&gt;
  &lt;/a&gt;
  Srcset not working
&lt;/h2&gt;

&lt;p&gt;You could face one problem while using &lt;code&gt;srcset&lt;/code&gt; in responsive images is that the browser is always using the largest image available. There could be two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you resized the window to test responsive image implementation and the browser has once loaded a high resolution bigger image, then it won‚Äôt load a smaller image again because it can use the largest one from the cache. It saves time &amp;amp; bandwidth. That is the whole point. It is specific to Chrome. &lt;/li&gt;
&lt;li&gt;You need to consider the DPR value into account. On the retina display, the browser will go for a wider image based on options available in &lt;code&gt;srcset&lt;/code&gt;. If 300px wide image is required and DPR is 2, the browser needs at-least 600px wide image. It might be confusing as you were expecting it to pick a 300px wide option from &lt;code&gt;srcset&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#client-hints-not-working" class="anchor"&gt;
  &lt;/a&gt;
  Client hints not working
&lt;/h2&gt;

&lt;p&gt;After client hints landing in Chrome 35, there were concerns around tracking users across multiple websites because of the device-related information passed through client hints. As a result, the Chrome team removed cross-origin client hints in the desktop version of Chrome 67, but they &lt;a href="https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/8RBFue7RMXQ/7TF4VPVzBAAJ"&gt;still work in mobile&lt;/a&gt;. These restrictions will be removed soon when work on &lt;a href="https://wicg.github.io/feature-policy/"&gt;Feature Policy&lt;/a&gt; is complete.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-make-a-background-image-responsive" class="anchor"&gt;
  &lt;/a&gt;
  How to make a background image responsive?
&lt;/h2&gt;

&lt;p&gt;Setting width and height is not enough when it comes to using background images. You can leverage the latest techniques to implement &lt;a href="#chapter-8---responsive-images-in-css"&gt;responsive images in CSS&lt;/a&gt; e.g. &lt;code&gt;image-set&lt;/code&gt; and well-known media queries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responsive-images-srcset-vs-picture" class="anchor"&gt;
  &lt;/a&gt;
  Responsive images srcset vs picture?
&lt;/h2&gt;

&lt;p&gt;More often than not, you will only need &lt;a href="#chapter-5---srcset-with-sizes"&gt;srcset with sizes&lt;/a&gt; while implementing responsive images. That is because the primary use-case of responsive images is to load the right size image on different devices e.g. mobile or desktop. However, a picture tag is there if you need to implement art direction i.e. to load an entirely different image based on available screen width or device orientation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#picture-tag-not-working" class="anchor"&gt;
  &lt;/a&gt;
  Picture tag not working
&lt;/h2&gt;

&lt;p&gt;If the picture element is not working, ensure that you have the &lt;code&gt;img&lt;/code&gt; element inside the picture element. This acts as a fallback when the browser doesn‚Äôt support the picture element. You can also use a &lt;a href="https://github.com/scottjehl/picturefill"&gt;polyfill for picture&lt;/a&gt; element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-make-images-responsive-in-wordpress" class="anchor"&gt;
  &lt;/a&gt;
  How to make images responsive in WordPress?
&lt;/h2&gt;

&lt;p&gt;Responsive images landed in WordPress 4.4, making it easier for theme developers to implement responsive images in their themes. As soon as an image is uploaded in the media library, WordPress creates multiple different size variants and store them. When you embed the image in a post, the &lt;code&gt;img&lt;/code&gt; element has &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Default sizes attribute&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By default, the value of the &lt;code&gt;size&lt;/code&gt; attribute is equivalent to -&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(max-width: {{image-width}}px) 100vw, {{image-width}}px&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, as a theme developer, you have the best knowledge of ideal image size, and you should override this default, as discussed below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configuring responsive images for your theme&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Theme developers should use &lt;code&gt;wp_calculate_image_sizes&lt;/code&gt; helper function to create the &lt;code&gt;sizes&lt;/code&gt; attribute for an image. &lt;/p&gt;

&lt;p&gt;For example, the below hook will apply to all content and featured/thumbnail images. Thanks to &lt;a href="https://www.smashingmagazine.com/2015/12/responsive-images-in-wordpress-core/"&gt;Tim Evko&lt;/a&gt; for the code snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;adjust_image_sizes_attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$sizes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$size&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$sizes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$sizes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;add_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wp_calculate_image_sizes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'adjust_image_sizes_attr'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also hook into &lt;code&gt;wp_calculate_image_srcset&lt;/code&gt; to calculate the image sources to include in a &lt;code&gt;srcset&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Responsive images in WordPress before 4.4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before version 4.4, you have to use the &lt;a href="https://wordpress.org/plugins/ricg-responsive-images/"&gt;RICG Responsive Images&lt;/a&gt; plugin. This plugin works by including all available image sizes for each image upload. Whenever WordPress outputs the image through the media uploader, or whenever a featured image is generated, those sizes will be included in the image tag via the &lt;code&gt;srcset&lt;/code&gt; attribute. This plugin doesn‚Äôt add a &lt;code&gt;sizes&lt;/code&gt; attribute, though.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#questions" class="anchor"&gt;
  &lt;/a&gt;
  Questions
&lt;/h2&gt;

&lt;p&gt;We hope this guide helped you understand the responsive images in HTML and CSS. If you have a question, feel free to comment or email on &lt;a href="mailto:support@imagekit.io"&gt;support@imagekit.io&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
    </item>
  </channel>
</rss>
