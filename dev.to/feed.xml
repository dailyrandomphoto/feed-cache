<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Understanding Asynchronous in javascript </title>
      <author>Heru Hartanto</author>
      <pubDate>Tue, 07 Dec 2021 22:32:36 +0000</pubDate>
      <link>https://dev.to/elukuro/understanding-asynchronous-in-javascript-267h</link>
      <guid>https://dev.to/elukuro/understanding-asynchronous-in-javascript-267h</guid>
      <description>&lt;p&gt;Let's me explain with a simple example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;First log&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Second log&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Third log&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, every line of code will waits for previous line to complete execution before execute next line. this is called with synchronous.&lt;/p&gt;

&lt;p&gt;Here another example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;First log&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Second log&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Third log&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;setTimeout function will wait for milisecond time that set in second argument and executes anonymous function in the first arguments&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;
&lt;span class="nx"&gt;Third&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;
&lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="nx"&gt;Second&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, Third log does not wait for Second log to execute, the method of not waiting for the previous code to complete is called asynchronous.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-we-need-asynchronous-"&gt;
  &lt;/a&gt;
  When we need asynchronous ?
&lt;/h3&gt;

&lt;p&gt;The best way to use asynchronous is when your website working with server to fetching data or getting response, instead of waiting all data from server fully loaded that maybe takes more than one minutes (depend on speed of your internet and server speed to resolve request) you could use asynchronous to make sure that code ahead will execute and javascript will not waiting server response to complete.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to create a resell token functionality in your NFT marketplace smart contract</title>
      <author>Mateus Ferreira</author>
      <pubDate>Tue, 07 Dec 2021 21:59:58 +0000</pubDate>
      <link>https://dev.to/mateusasferreira/how-to-create-a-resell-token-functionality-in-your-nft-marketplace-smart-contract-ha</link>
      <guid>https://dev.to/mateusasferreira/how-to-create-a-resell-token-functionality-in-your-nft-marketplace-smart-contract-ha</guid>
      <description>&lt;p&gt;This article is intended to be a continuation of &lt;a class="mentioned-user" href="https://dev.to/dabit3"&gt;@dabit3&lt;/a&gt;
's great tutorial on how to create a &lt;a href="https://dev.to/dabit3/building-scalable-full-stack-apps-on-ethereum-with-polygon-2cfb"&gt;NFT Marketplace on Ethereum with Polygon&lt;/a&gt;. So, if you haven't started from there, I suggest you do. &lt;/p&gt;

&lt;p&gt;I'll be covering how to create a resell item feature to your marketplace, since this was an issue to me and to other developers to whom I have talked to. &lt;/p&gt;

&lt;p&gt;First, in the NFT contract, we'll add a function to transfer the token. You may be asking why I don't just simply use &lt;a href="https://docs.openzeppelin.com/contracts/2.x/api/token/erc721#IERC721-transferFrom-address-address-uint256-"&gt;ERC721's tranferFrom function&lt;/a&gt;. And the reason is that when I tested my functions, in some situations requests reverted with "transfer caller is not owner nor approved", even though msg.sender === ownerOf(tokenId) asserted true. So my solution was to write a custom transfer function. But feel free to share the solution for this strange bug in the comments if you know it. So this will be added to your NFT contract:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;NFT&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721URIStorage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;(...)&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;transferToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ownerOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"From address must be token owner"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;_transfer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "external" visibility allows only other smart contracts to call the function. And the "require" statement checks if the caller is the token's current owner. &lt;/p&gt;

&lt;p&gt;Now, in the MarketPlace contract, you have to import the NFT contract to call the function, and it will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"./NFT.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second change I made was to add a "creator" attribute to the MarketItem struct, so it won't lose the information about who first minted the token between transfers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;MarketItem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;itemId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;nftContract&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="k"&gt;payable&lt;/span&gt; &lt;span class="n"&gt;creator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="k"&gt;payable&lt;/span&gt; &lt;span class="n"&gt;seller&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="k"&gt;payable&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;sold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That means you'll have to alter your other existing functions and add this attribute too. I also created a new event, to broadcast that the token is being sold again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;ProductListed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="k"&gt;indexed&lt;/span&gt; &lt;span class="n"&gt;itemId&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, to write smaller functions and be able to reuse code, I created a &lt;a href="https://docs.soliditylang.org/en/v0.8.10/contracts.html#function-modifiers"&gt;modifier function&lt;/a&gt; to prevent that others than the contract owner do the operation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;modifier&lt;/span&gt; &lt;span class="n"&gt;onlyItemOwner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;idToMarketItem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Only product owner can do this operation"&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, the function to (re)list the token in the marketplace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;putItemToResell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;nftContract&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;itemId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;newPrice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt;
        &lt;span class="k"&gt;payable&lt;/span&gt;
        &lt;span class="n"&gt;nonReentrant&lt;/span&gt;
        &lt;span class="n"&gt;onlyItemOwner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;tokenId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idToMarketItem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;itemId&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newPrice&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Price must be at least 1 wei"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;listingPrice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Price must be equal to listing price"&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//instantiate a NFT contract object with the matching type
&lt;/span&gt;        &lt;span class="n"&gt;NFT&lt;/span&gt; &lt;span class="n"&gt;tokenContract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NFT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nftContract&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//call the custom transfer token method   
&lt;/span&gt;        &lt;span class="n"&gt;tokenContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transferToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;this&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;oldOwner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idToMarketItem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;itemId&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;idToMarketItem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;itemId&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;payable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;idToMarketItem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;itemId&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;seller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oldOwner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;idToMarketItem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;itemId&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newPrice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;idToMarketItem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;itemId&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;sold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;_itemsSold&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;emit&lt;/span&gt; &lt;span class="n"&gt;ProductListed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For testing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chai&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hardhat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;market&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nftAddress&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;marketAddress&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Market&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContractFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NFTMarket&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;market&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Market&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;market&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deployed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;marketAddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;market&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NFT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContractFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NFT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;nft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;NFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marketAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;nft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deployed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;nftAddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Marketplace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;(...)&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should allow buyer to resell an owned item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;creator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buyer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSigners&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;nft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;creator&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;www.mytoken.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listingPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;market&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getListingPrice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;market&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;creator&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;createMarketItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nftAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;listingPrice&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;market&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buyer&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;createMarketSale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nftAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;market&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buyer&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;putItemToResell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nftAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;listingPrice&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;market&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchSingleItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seller&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buyer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;creator&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;creator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in the front-end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;resellOwnedItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;marketContract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;nftmarketaddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Market&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;signer&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listingPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;marketContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getListingPrice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;marketContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putItemToResell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;nftaddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parseUnits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ether&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;listingPrice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm taking the signer as an argument here but you can also fetch it in your function as &lt;a class="mentioned-user" href="https://dev.to/dabit3"&gt;@dabit3&lt;/a&gt;
 did:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;web3Modal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Web3Modal&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;web3Modal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Web3Provider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSigner&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is how I handled this task. If you found a better solution, please share in the comments. Thank you!&lt;/p&gt;

</description>
      <category>nft</category>
      <category>blockchain</category>
      <category>solidity</category>
      <category>web3</category>
    </item>
    <item>
      <title>The 3 Short Frontend tips for December</title>
      <author>Stas Melnikov</author>
      <pubDate>Tue, 07 Dec 2021 21:40:32 +0000</pubDate>
      <link>https://dev.to/melnik909/the-3-short-frontend-tips-for-december-3h90</link>
      <guid>https://dev.to/melnik909/the-3-short-frontend-tips-for-december-3h90</guid>
      <description>&lt;h2&gt;
  &lt;a href="#help-users-with-vision-disabilities-find-a-search"&gt;
  &lt;/a&gt;
  Help users with vision disabilities find a search
&lt;/h2&gt;

&lt;p&gt;Usually we know how to place a search for users without vision disabilities. But how should we do that for users with disabilities?&lt;/p&gt;

&lt;p&gt;There is a special search role in the WAI-ARIA standard that we should add for the form element. In this case screen readers will start to display search in the "Regions list" mode that is used by users for navigation.&lt;/p&gt;

&lt;p&gt;Pay attention, if we don't do that search will not be displayed in this mode. So it will hamper users start interaction with search. They will have to find a search using common keys. It's much longer than if they use the "Regions list" mode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MTpYVRqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.substack.com/image/fetch/w_1456%2Cc_limit%2Cf_auto%2Cq_auto:good%2Cfl_progressive:steep/https%253A%252F%252Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%252Fpublic%252Fimages%252F382c6125-e6a0-45d3-97d8-929b423f33f3_1080x1080.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MTpYVRqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.substack.com/image/fetch/w_1456%2Cc_limit%2Cf_auto%2Cq_auto:good%2Cfl_progressive:steep/https%253A%252F%252Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%252Fpublic%252Fimages%252F382c6125-e6a0-45d3-97d8-929b423f33f3_1080x1080.jpeg" alt="A search is created using the form element with the search role is good solution" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinking-about-a-main-and-additional-goal-when-we-work-with-focus"&gt;
  &lt;/a&gt;
  Thinking about a main and additional goal when we work with focus
&lt;/h2&gt;

&lt;p&gt;Did you think sometimes about how better to move focus when users open elements such as modals or dialogs? &lt;/p&gt;

&lt;p&gt;I think there is a main and additional goal when we work with focus. The main goal is what users want to do after moving focus for reaching their goals using a minimal number of actions. An additional is what they can do something else.&lt;/p&gt;

&lt;p&gt;Let's consider what I mean using the case of selecting a language on Booking. If we push the button of selecting a language we'll see modal with languages. &lt;/p&gt;

&lt;p&gt;Focus will move on the close button. Nice what we can close modal by pushing the enter key. But is that why we open the modal? No, we wanted to select a language. That's the main goal. And closing a modal is an additional goal.&lt;/p&gt;

&lt;p&gt;Now let's look at what Booking suggests for selecting a language. If we use only a keyboard we have to use the tab, ↑ or ↓ keys to start moving between languages. &lt;/p&gt;

&lt;p&gt;Then we push the same keys again until we find the necessary option.  If we push the enter key we'll select a language. Well, that's a nice solution but I want to suggest another. &lt;/p&gt;

&lt;p&gt;We have already identified that users open the modal because they want to select a language. It's the main goal. So we should give that to them. I think we can do that if we move focus on the current language. &lt;/p&gt;

&lt;p&gt;Then we should make the possibility of moving between languages using tab, ↑, →,  ↓ or ← keys immediately. The selection of a language we'll make using the enter key.  Also, we'll save the possibility of closing the modal using the Esc key like Booking made.&lt;/p&gt;

&lt;p&gt;I hope I was able to pass on the importance of defining a main and additional goal when you work with focus. Please, think about it and your interfaces will be user-friendly. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ofSE41h2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.substack.com/image/fetch/w_1456%2Cc_limit%2Cf_auto%2Cq_auto:good%2Cfl_progressive:steep/https%253A%252F%252Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%252Fpublic%252Fimages%252Fb03437f0-2564-4e99-bec4-ea01faa60c2a_1080x1080.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ofSE41h2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.substack.com/image/fetch/w_1456%2Cc_limit%2Cf_auto%2Cq_auto:good%2Cfl_progressive:steep/https%253A%252F%252Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%252Fpublic%252Fimages%252Fb03437f0-2564-4e99-bec4-ea01faa60c2a_1080x1080.jpeg" alt="" width="880" height="880"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IlXvDlve--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.substack.com/image/fetch/w_1456%2Cc_limit%2Cf_auto%2Cq_auto:good%2Cfl_progressive:steep/https%253A%252F%252Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%252Fpublic%252Fimages%252F36ff8283-37e7-43fb-a859-888744e72d22_1080x1080.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IlXvDlve--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.substack.com/image/fetch/w_1456%2Cc_limit%2Cf_auto%2Cq_auto:good%2Cfl_progressive:steep/https%253A%252F%252Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%252Fpublic%252Fimages%252F36ff8283-37e7-43fb-a859-888744e72d22_1080x1080.jpeg" alt="" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-highcontrast-background-color-is-a-simple-way-for-improving-content-accessibility"&gt;
  &lt;/a&gt;
  A high-contrast background color is a simple way for improving content accessibility
&lt;/h2&gt;

&lt;p&gt;In modern web design, we often meet with media content. Yes, that's a great way to draw users' attention. But we can make the mistake that will affect content accessibility. &lt;/p&gt;

&lt;p&gt;Loading of media content takes some time. At this moment, elements might be mixed with the page background color. As a result, users can't interact with them. They will be confused. &lt;/p&gt;

&lt;p&gt;For fixing this problem, we should add a high-contrast background color using the background-color property to the element with media content. Thus users will see all content and can interact with it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hTal1Bh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.substack.com/image/fetch/w_1456%2Cc_limit%2Cf_auto%2Cq_auto:good%2Cfl_progressive:steep/https%253A%252F%252Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%252Fpublic%252Fimages%252Fdf223a77-92bd-43b6-8c67-d13c0e14d2e6_1080x1080.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hTal1Bh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.substack.com/image/fetch/w_1456%2Cc_limit%2Cf_auto%2Cq_auto:good%2Cfl_progressive:steep/https%253A%252F%252Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%252Fpublic%252Fimages%252Fdf223a77-92bd-43b6-8c67-d13c0e14d2e6_1080x1080.jpeg" alt="" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5RL98i1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.substack.com/image/fetch/w_1456%2Cc_limit%2Cf_auto%2Cq_auto:good%2Cfl_progressive:steep/https%253A%252F%252Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%252Fpublic%252Fimages%252Fd12c92c6-d38f-4255-8b89-fecfb7202948_1080x1080.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5RL98i1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.substack.com/image/fetch/w_1456%2Cc_limit%2Cf_auto%2Cq_auto:good%2Cfl_progressive:steep/https%253A%252F%252Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%252Fpublic%252Fimages%252Fd12c92c6-d38f-4255-8b89-fecfb7202948_1080x1080.jpeg" alt="" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
❤ Thank you so much, my sponsors: Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten, Spiridon Konofaos&lt;/p&gt;

&lt;p&gt;💪 Get more free tips &lt;a href="https://uxa11y.substack.com"&gt;directly to your inbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👀 Also I tell stories from my career on Substack. Join &lt;a href="https://stasmelnikov.substack.com"&gt;my free newsletter&lt;/a&gt;, if you're interested in my background&lt;/p&gt;

</description>
      <category>ux</category>
      <category>css</category>
      <category>webdev</category>
      <category>a11y</category>
    </item>
    <item>
      <title>Os cuidados para um deploy "Zero Down Time"</title>
      <author>Leonardo Lemos</author>
      <pubDate>Tue, 07 Dec 2021 21:36:15 +0000</pubDate>
      <link>https://dev.to/convenia/os-cuidados-para-um-deploy-zero-down-time-5a3</link>
      <guid>https://dev.to/convenia/os-cuidados-para-um-deploy-zero-down-time-5a3</guid>
      <description>&lt;p&gt;Atualmente existem ferramentas que nos ajudam a executar containers em produção e a maioria delas trazem funcionalidades preciosas como "Health Checks", "Limite de recursos" e até mesmo prometem um deploy &lt;a href="https://avikdas.com/2020/06/30/scalability-concepts-zero-downtime-deployments.html"&gt;"Zero Down Time"&lt;/a&gt;, o foco deste post é nesse último Item. Na &lt;a href="https://convenia.com.br/"&gt;Convenia&lt;/a&gt; utilizamos o &lt;a href="https://docs.docker.com/engine/swarm/"&gt;Docker Swarm&lt;/a&gt; para gerenciar alguns containers em produção e o Docker Swarm entrega esse tipo de deploy "Zero Down Time" através de uma simples configuração, porém após alguns testes em uma API sob stress constatamos que sempre ocorriam alguns erros no momento do deploy. Aprofundando a análise do que poderia causar esses erros, percebemos que podemos cometer alguns "equívocos" que nos impedem de ter um deploy verdadeiramente sem Down Time e ainda podemos constatar que esses "equívocos" são comuns em outras ferramentas como &lt;a href="https://kubernetes.io/pt-br/"&gt;Kubernetes&lt;/a&gt; também, dai saiu a motivação para escrever esse post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#graceful-shutdown"&gt;
  &lt;/a&gt;
  Graceful ShutDown
&lt;/h2&gt;

&lt;p&gt;A grosso modo podemos definir "Graceful shutdown" como a maneira "natural" em que um processo é desligado. Muitos processos abrem sockets e trabalham com estado em memória então para esses processos desligarem naturalmente muito provavelmente eles vão fechar as conexões abertas e persistirem o estado, que está na memória, no HD para que não haja perda de dados e para poder retomarem as atividades sem maiores problemas quando forem reiniciados, em uma queda de energia por exemplo, os processos não tem esse privilégio, nesse caso podemos nos deparar com erros durante a próxima inicialização do processo, isso é conhecido como "Hard Shutdown".&lt;/p&gt;

&lt;p&gt;A boa notícia é que todos os softwares mais difundidos fazem isso por padrão, o &lt;a href="https://www.nginx.com/"&gt;nginx&lt;/a&gt; quando recebe o "sinal" de desligamento espera a resposta de todos os requests que estão em execução no momento, antes de desligar de fato. Esse "Graceful Shutdown" é importante porque o deploy consiste na "troca" de um processo com a versão antiga do software pelo mesmo processo contendo a versão nova, ao desligar o processo contendo a versão antiga, os requests que estiverem em execução não podem falhar, pois eles ainda estão sendo respondidos pelo processo antigo enquanto os novos requests já estão sendo servidos pelo processo novo como mostrado na imagem abaixo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kti9Rd0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ft293jsqsbem1iyh7dbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kti9Rd0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ft293jsqsbem1iyh7dbf.png" alt="Troca dos containers em um deploy" width="741" height="362"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na &lt;a href="https://convenia.com.br"&gt;Convenia&lt;/a&gt; temos muitos listeners feitos com o &lt;a href="https://convenia.github.io/Pigeon/#/"&gt;Pigeon&lt;/a&gt;, nesse caso não estamos falando de um webserver e sim de um &lt;a href="https://convenia.github.io/Pigeon/#/EVENT_DRIVEN?id=listening-for-events"&gt;consumer&lt;/a&gt; que "ouve" uma fila do &lt;a href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt;, você já deve imaginar que para "ouvir" essa fila temos que ter uma conexão aberta com o &lt;a href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt; então nada mais justo que fechar as conexões no momento em que o processo for desligado, é justamente isso que o &lt;a href="https://convenia.github.io/Pigeon/#/"&gt;Pigeon&lt;/a&gt; faz no código a seguir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;listenSignals&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'AMQP_WITHOUT_SIGNALS'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'AMQP_WITHOUT_SIGNALS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nb"&gt;pcntl_async_signals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nb"&gt;pcntl_signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'signalHandler'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="nb"&gt;pcntl_signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'signalHandler'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="nb"&gt;pcntl_signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SIGQUIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'signalHandler'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;signalHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$signalNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$signalNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;SIGTERM&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;// 15 : supervisor default stop&lt;/span&gt;
                &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;quitHard&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;SIGQUIT&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;// 3  : kill -s QUIT&lt;/span&gt;
                &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;quitHard&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;SIGINT&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="c1"&gt;// 2  : ctrl+c&lt;/span&gt;
                &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nesse código definimos handlers para os sinais de desligamento que o processo pode receber e chamamos os métodos &lt;code&gt;quit()&lt;/code&gt; e &lt;code&gt;quitHard()&lt;/code&gt; que têm como objetivo fechar a conexão com o RabbitMQ. Até agora falamos muito sobre esses sinais que os processos podem receber de outro processos, ou até mesmo do kernel, mas caso você não estaja familiarizado ou se não souber exatamente a diferença entre eles, você pode ficar um pouco mais por dentro &lt;a href="https://www.ctl.io/developers/blog/post/gracefully-stopping-docker-containers/"&gt;nesse artigo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pid-1"&gt;
  &lt;/a&gt;
  PID 1
&lt;/h2&gt;

&lt;p&gt;Quando utilizamos &lt;a href="https://www.docker.com/"&gt;docker&lt;/a&gt; para executar nossa aplicação em produção e fazemos um deploy, um container com a nova versão da aplicação é iniciado,o container com a versão antiga da aplicação recebe o sinal "SIGTERM" que é um pedido formal de desligamento, caso o container demore mais que 10 segundos para  desligar ele será morto, logo o processo dentro do container tem 10 segundos para fazer o seu "Graceful Shutdown". A grande pegadinha é que dentro do container apenas o processo de ID 1 vai receber esse sinal, se dentro do container iniciarmos um outro processo antes da nossa aplicação, esse processo vai portar o id 1 e não a nossa aplicação. Agora que temos outro processo recebendo os sinais de desligamento no lugar da nossa aplicação, nunca vamos ter a oportunidade de fazer um Graceful Shutdown porque nunca saberemos o momento de desligar, por mais que esse pareça um erro bobo na verdade isso acaba acontecendo com uma certa frequência como por exemplo nos &lt;a href="https://docs.docker.com/engine/reference/builder/"&gt;Dockerfiles&lt;/a&gt; a seguir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; nginx:latest&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["nginx", "-g", "daemon off;"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O Dockerfile acima está com o &lt;code&gt;ENTRYPOINT&lt;/code&gt; no formato de array, se você entrar dentro do container gerado por esse Dockerfie e executar o comando &lt;code&gt;pstree&lt;/code&gt; verá o seguinte output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_7H596n2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du8k1y9gv6pgpl7bii58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_7H596n2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du8k1y9gv6pgpl7bii58.png" alt="Output do comando pstree em um container corretamente configurado" width="756" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perceba que o "nginx" é o primeiro processo mais a esquerda, isso significa que atingiremos o objetivo de ter um Graceful Shutdown visto que o nginx vai receber os sinais pessoalmente e ele sabe muito bem como lidar, para tirar a dúvida podemos executar um &lt;code&gt;docker stop&lt;/code&gt; no container em execução e provavelmente veremos o container sendo desligado quase instantaneamente.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; nginx:latest&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; nginx -g 'daemon off;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A Mudança no dockerfile acima foi sutil, mas faz toda a diferença, com a sintaxe corrida do &lt;code&gt;ENTRYPOINT&lt;/code&gt; o comando em questão é executato pelo shell dentro do container, segue o output do &lt;code&gt;pstree&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1i-Qiwoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7d1x9fa3ekg7ei2x0oll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1i-Qiwoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7d1x9fa3ekg7ei2x0oll.png" alt="output do comando pstree em um container mal configurado" width="756" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora o processo mais a esquerda é o &lt;code&gt;sh&lt;/code&gt;, ele quem receberá os sinais de desligamento e por acaso não sabe muito bem o que fazer com esses sinais, se você executar um &lt;code&gt;docker stop&lt;/code&gt; nesse container verá que demora 10 segundos para parar, dessa forma não faremos o "Graceful Shutdown" e nunca teremos um verdadeiro deploy "Zero Down Time" porque sempre que o container com a versão antiga do código morrer, vai levar os requests que estão em execução para a vala junto. Logo devemos nos assegurar que nosso processo está recebendo o sinal de desligamento corretamente.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#v%C3%A1rios-processos-no-mesmo-container"&gt;
  &lt;/a&gt;
  Vários processos no mesmo container
&lt;/h2&gt;

&lt;p&gt;É conceitualmente correto que o container contenha apenas um processo(PID 1), mas é relativamente comum aparecer a necessidade de executar mais de um processo no mesmo container. Tomando como exemplo uma aplicação &lt;a href="https://www.php.net/"&gt;PHP&lt;/a&gt;, que não é capaz de responder como uma aplicação completa(HTTP) apenas com o processo do &lt;a href="https://www.php.net/manual/pt_BR/install.fpm.php"&gt;PHP-FPM&lt;/a&gt;, pois necessita de um &lt;a href="https://www.nginx.com/resources/glossary/reverse-proxy-server/"&gt;reverse proxy&lt;/a&gt; como &lt;a href="https://www.apache.org/"&gt;apache&lt;/a&gt; ou &lt;a href="https://www.nginx.com/"&gt;nginx&lt;/a&gt; para isso, como poderíamos fazer um único container  contendo tanto nginx como php-fmp e que funcione como uma aplicação completa capaz de entender o protocolo HTTP? A própria &lt;a href="https://docs.docker.com/config/containers/multi-service_container/"&gt;documentação do docker nos traz algumas recomendações&lt;/a&gt; sendo que dentre elas a melhor seria utilizar o &lt;a href="http://supervisord.org/"&gt;supervisord&lt;/a&gt; como processo principal no container, cuidando dos outros processos. O supervisord é capaz de propagar os sinais de desligamento que recebe para os processos filhos, sendo assim tanto o nginx quanto o PHP-FPM terão a possibilidade de fazer um "Graceful Shutdown" assim que o supervisord receber o sinal SIGTERM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prioridade-dos-processos-dentro-do-container"&gt;
  &lt;/a&gt;
  Prioridade dos processos dentro do container
&lt;/h2&gt;

&lt;p&gt;Bom temos uma aplicação PHP sendo executada em produção e seguimos tudo que foi falado até agora, estamos executando tanto o php-fpm quanto o nginx, ambos rodando sobre o supervisord, porém por incrível que pareça estamos notando o erro &lt;code&gt;502&lt;/code&gt; durante o deploy. Isso acontece porque durante o deploy um novo container é criado e o supervisord simplesmente não sabe qual processo deve iniciar primeiro, se por acaso o nginx estiver pronto para receber um request, mas o php-fpm ainda não foi corretamente iniciado então temos um &lt;code&gt;502&lt;/code&gt;. Resolver esse problema de prioridade entre os processos é relativamente simples, o supervisord tem uma flag priority que tem o proposito de dizer quem é o processo de maior prioridade, entre outras palavras esse processo deve ser criado primeiro e morrer por último, a seguir segue uma configuração real de uma aplicação da &lt;a href="https://convenia.com.br"&gt;Convenia&lt;/a&gt; em produção:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[supervisord]
nodaemon=true

[program:nginx]
command = nginx -c /etc/nginx/nginx.conf  -g 'daemon off;'
user = app
autostart = true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
redirect_stderr=true

[program:php-fpm]
command = /usr/sbin/php-fpm7 -F
priority = 1
user = app
autostart = true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
redirect_stderr=true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esse é um arquivo de configuração do supervisord, perceba a configuração do php-fpm &lt;code&gt;priority = 1&lt;/code&gt;, essa configuração vai instruir o supervisord a criar o php-fpm primeiro e a desligar ele por último, agora sim temos um deploy perfeito, sem downtime.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Para alcançar um deploy perfeito não adianta simplesmente utilizar os orquestradores mais poderosos do mercado, precisamos tomar alguns cuidados com o nosso container e aplicação também:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Garantir que a aplicação é capaz de fazer um Graceful Shutdown&lt;/li&gt;
&lt;li&gt;Garantir que a aplicação está recebendo os sinais de desligamento corretamente, ou mantendo a aplicação como sendo o primeiro processo dentro do container, ou utilizando alguma ferramenta como o supervisord que propaga os sinais que ela recebe.&lt;/li&gt;
&lt;li&gt;Garantir que os processos estão sendo iniciados e desligados na ordem correta, caso o container rode mais de um processo.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tomado esses cuidados estamos prontos para ter um deploy sem Downtime.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>deploy</category>
      <category>php</category>
      <category>laravel</category>
    </item>
    <item>
      <title>Heads up: Stackbit integration removal</title>
      <author>Ben Halpern</author>
      <pubDate>Tue, 07 Dec 2021 21:32:40 +0000</pubDate>
      <link>https://dev.to/devteam/heads-up-stackbit-integration-removal-2m11</link>
      <guid>https://dev.to/devteam/heads-up-stackbit-integration-removal-2m11</guid>
      <description>&lt;p&gt;Hey folks, this is a heads up that the special DEV/Stackbit integration &lt;a href="https://dev.to/settings/extensions"&gt;available in settings&lt;/a&gt; has stopped working and the reference to it will be removed shortly.&lt;/p&gt;

&lt;p&gt;A couple of years ago &lt;a href="https://dev.to/devteam/you-can-now-generate-self-hostable-static-blogs-right-from-your-dev-content-via-stackbit-7a5"&gt;we developed an integration that would allow folks to &lt;em&gt;automatically&lt;/em&gt; use DEV as a headless CMS for generating a Stackbit site&lt;/a&gt;. Making this possible in the first place was a big effort in data portability and trying to ensure DEV was not an all-consuming platform. We continue on this mission, but this specific very custom integration no longer fit the roadmap on either side. &lt;/p&gt;

&lt;p&gt;The specialized integration is going away, but there are &lt;em&gt;a lot&lt;/em&gt; of ways you can still hook up DEV to continue to act this way. For example, just a few weeks ago &lt;a class="mentioned-user" href="https://dev.to/vjnvisakh"&gt;@vjnvisakh&lt;/a&gt;
 posted this:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/vjnvisakh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZWskIlmd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_1S3ajsw--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/97730/b14b4ca5-6281-42a1-a6d6-173b480c35cd.png" alt="vjnvisakh"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/vjnvisakh/devto-as-a-headless-cms-efb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Dev.to as a headless CMS&lt;/h2&gt;
      &lt;h3&gt;Visakh Vijayan ・ Nov 6 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;This was one of the few remaining bits of code that is super specialized for DEV. User-friendly integrations like this will return in a more generalized form in the future, in the meantime there are plenty of ways to use the API and existing tools to interact with DEV.&lt;/p&gt;

&lt;p&gt;You've probably noticed several deprecations lately. It's all in a larger effort to put more resources into the core functionality and make room for future extensibility. Of course, &lt;a href="https://github.com/forem/forem"&gt;everything we do is open source via Forem&lt;/a&gt; and free to use. We look forward to continued collaboration with the whole community.&lt;/p&gt;

</description>
      <category>meta</category>
      <category>stackbit</category>
    </item>
    <item>
      <title>How to become a React developer in 2022? Here is the complete Roadmap.</title>
      <author>Ali Raza</author>
      <pubDate>Tue, 07 Dec 2021 21:14:26 +0000</pubDate>
      <link>https://dev.to/aliraza/how-to-become-a-react-developer-in-2022-here-is-the-complete-roadmap-4fgc</link>
      <guid>https://dev.to/aliraza/how-to-become-a-react-developer-in-2022-here-is-the-complete-roadmap-4fgc</guid>
      <description>&lt;p&gt;React is the leading technology for building outstanding, fast, scalable, and most importantly reusable frontends. As per the 2021 Developer Survey conducted by StackOverFlow, React is the most used web framework. More companies are looking for React developers in 2022 than ever.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is React.js?&lt;/strong&gt;&lt;br&gt;
React.js is a JavaScript UI library, created by Facebook, for building scalable UI components. It can be used for building single-page applications, mobile apps, PWAs. The most important factor behind its popularity is the lower learning slope.&lt;/p&gt;

&lt;p&gt;In this article, we will learn step by step that how can one become a React developer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Most of the non-reactive code written in React is JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;## Pre-requisites&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;a. JavaScript&lt;/strong&gt;&lt;br&gt;
As React is a JavaScript library, it is important to have a background in JS and an understanding of some important concepts. React nowadays comprise React Hooks and functional components, learning ES6 is recommended.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript concepts, you should know:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Variables in JS&lt;/li&gt;
&lt;li&gt;Arrow Functions&lt;/li&gt;
&lt;li&gt;Data Types and their methods&lt;/li&gt;
&lt;li&gt;Dom Manipulation and events&lt;/li&gt;
&lt;li&gt;Higher-Order and Callback Functions&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Asynchronous JS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;b. HTML / CSS&lt;/strong&gt;&lt;br&gt;
The representational components in React are developed using HTML and styled via CSS or a third-party tool. Suppose you are creating a button component. That component will have a label, styling, and some attributes. More than often, the HTML button element will be used for creating that component and that will be styled using CSS or any other styling library.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#core-react-concepts-to-master"&gt;
  &lt;/a&gt;
  Core React Concepts to master
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Virtual Dom and Diffing algorithm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Virtual Dom and Diffing algorithm are behind the scene of React.js. Manipulating real dom is slow, so React utilized the concept of virtual dom. Virtual dom is an abstraction of real dom. Every time a component or element is rendered, the virtual dom object gets updated. It then compares the recently updated virtual dom with a copy of the pre-updated virtual dom and figures out which dom object to update. The process to compare two virtual doms is called diffing. In the next step real dom is updated with the virtual dom and the updated virtual dom becomes pre-updated virtual dom for the next dom change.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. JSX: React Template Language&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JSX can be called the syntax of React. It stands for JavaScript XML and helps to write HTML code in JavaScript and render your custom component on UI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const blog = 'programinja'
You can add variable "blog" in "p" element by using power of JSX.
&amp;lt;p&amp;gt;Blog: {blog}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Components: building blocks of React apps&lt;/strong&gt;&lt;br&gt;
The React app comprises React components. From a simple button to a complex dashboard chart, each and everything in React apps is a component. The below code snippet is a simple React component and will render a link on UI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
const SimpleComponent = () =&amp;gt; {
  return (
        &amp;lt;a href='https://www.google.com'&amp;gt;Google!&amp;lt;/a&amp;gt;
  )
}
export default SimpleComponent
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The component is not reusable as its label and URL are fixed. To make a component re-usable props come in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Props&lt;/strong&gt;&lt;br&gt;
Props are property objects, used to pass read-only data between React components. Props can be passed as a variable or object and in a uni-directional flow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/// simpleComponent.js
import React from 'react'
const SimpleComponent = ({ label, url }) =&amp;gt; {
  return (
        &amp;lt;a href={label}&amp;gt;{url}&amp;lt;/a&amp;gt;
  )
}
export default SimpleComponent
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Link component is now reusable and can be rendered with different labels and URLs as shown in the below snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/// index.js
import SimpleComponent from './simpleComponent'
const App = () =&amp;gt; {
  return (
      &amp;lt;SimpleComponent label='Google!' url='https://www.google.com' /&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5. State Management&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In layman’s language, a state is a Javascript object, which stores mutable data that can be used and updated by the component. Any change in state re-renders the component. Historically state is associated with class-based components, however, with the useState / useReducer hook, it can be managed in functional components.&lt;/p&gt;

&lt;p&gt;The state can be managed at the component level by calling useState hook and at the global level through state management solutions such as Redux, Context API, Recoil, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. React Hooks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React 16.8 introduced hooks in 2018. React hooks help manage state and lifecycle methods in functional components and have made class-based components redundant. Hooks can only be used in functional components and at the top level.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basic Hooks&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;useState&lt;/li&gt;
&lt;li&gt;useEffect&lt;/li&gt;
&lt;li&gt;useContext&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Advanced Hooks&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;useReducer&lt;/li&gt;
&lt;li&gt;useCallback&lt;/li&gt;
&lt;li&gt;useMemo&lt;/li&gt;
&lt;li&gt;useRef&lt;/li&gt;
&lt;li&gt;useImperativeHandle&lt;/li&gt;
&lt;li&gt;useLayoutEffect&lt;/li&gt;
&lt;li&gt;useDebugValue
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from 'react'
const App = () =&amp;gt; {
const [sum, setSum] = useState(1) /// The initial value of sum is 1.
return (
  &amp;lt;&amp;gt;
    &amp;lt;button onClick={() =&amp;gt; setSum(sum + 1)} &amp;gt;+&amp;lt;/button
    &amp;lt;span&amp;gt;{sum}&amp;lt;/span&amp;gt;
    &amp;lt;button disabled={sum === 1} onClick={() =&amp;gt; setSum(sum - 1)}&amp;gt;-    &amp;lt;/button&amp;gt;
  &amp;lt;/&amp;gt;
  )
}
export default App
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above component, the state is managed via useState Hooks at the local level.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Creating your own custom hooks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Custom hooks can be created to share reusable functional logic across multiple components. For example, a custom hook to detect the browser window width or fetch data from APIs can be created and used across the app. A custom hook starts with use.&lt;/p&gt;

&lt;p&gt;In the below example, a custom hook is created, which returns the width and height of the browser window. It can be used for mobile responsiveness, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useLayoutEffect, useState } from 'react'
const useWindowSize = () =&amp;gt; {
const [size, setSize] = useState([0, 0])
useLayoutEffect(() =&amp;gt; {
const updateSize = () =&amp;gt; {
setSize([window.innerWidth, window.innerHeight])
}
window.addEventListener('resize', updateSize)
updateSize()
return () =&amp;gt; window.removeEventListener('resize', updateSize)
}, [])
return size
}
export default useWindowSize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use useWindowSize hook to detect widows width and render desktop or mobile components against respective screen sizes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const NavBar = () =&amp;gt; {
  const [width] = useWindowSize()
  return (
    width &amp;gt; 786 ? &amp;lt;Desktop /&amp;gt; : &amp;lt;Mobile /&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have mastered these concepts, you can call yourself a beginner React developer. But, there are some higher-level concepts to be learned to beat the crowd.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-react-topics"&gt;
  &lt;/a&gt;
  Advanced React Topics
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Higher-Order Components&lt;/li&gt;
&lt;li&gt;Code-splitting&lt;/li&gt;
&lt;li&gt;Refs&lt;/li&gt;
&lt;li&gt;Context API&lt;/li&gt;
&lt;li&gt;Server-side Rendering&lt;/li&gt;
&lt;li&gt;React Suspense&lt;/li&gt;
&lt;li&gt;React Server Components&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After picking up these concepts you can call yourself a React developer.&lt;/p&gt;

&lt;p&gt;So now you have learnt basic and advanced level React.&lt;/p&gt;

&lt;p&gt;But, as React is itself a library, so we need to use other libraries and node packages, such as React Router for routing, Redux for state management, etc, to leverage more functionalities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-ecosystem"&gt;
  &lt;/a&gt;
  React Ecosystem
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. React Router / React Router Dom&lt;/strong&gt;&lt;br&gt;
React Router is a routing library for navigating between React components by modifying URLs. When a user lands on a URL, React Router will detect if a component is set to render against that router and render on UI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. State Management via third-party libraries&lt;/strong&gt;&lt;br&gt;
Although React provides state management at component and global level via useState hook and Context API. However, if an app is much complex and you want more control, a third-party tool like Redux, Recoil, Mobx can be used. Personally, I suggest using Context API with useReducer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Forms&lt;/strong&gt;&lt;br&gt;
Creating dynamic and complex forms with validations and other stuff requires using a library. Formic and React Hooks Forms are widely used for creating forms. These libraries handle all aspects of a form seamlessly. Yup is widely used for adding validations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. React Testing&lt;/strong&gt;&lt;br&gt;
React testing is a concept to test your components if a component behaves as expected. For example, you have created an input field and expect it to behave in a certain way. The test will be written to cater to those use-cases. Automated testing help stabilize the components and reduce manual testing and captures bugs immediately. It is important for a developer to write test cases for your components. Jest, Cypress and React Testing Library are widely used for testing React apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Styling / UI libraries&lt;/strong&gt;&lt;br&gt;
Instead of creating UI components, such as Modals, Buttons, Menu, Dropdowns, etc, any UI library can be used. Common examples are Material-UI, Antd, Bootstrap. Besides, there are also multiple styling libraries to create your own styling such as Styled-components, Tailwind CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Handling APIs&lt;/strong&gt;&lt;br&gt;
Multiple promises-based libraries are providing awesome solutions to work with Rest and GraphQL APIs. Axios, Superagent and are the popular ones for Rest APIs. Apollo and Relay dominate GraphQL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#relevant-tools-you-should-learn"&gt;
  &lt;/a&gt;
  Relevant tools you should learn
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;NPM&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Webpack&lt;/li&gt;
&lt;li&gt;Heroku / Netlify&lt;/li&gt;
&lt;li&gt;Firebase / AWS Amplify&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#projects-to-build"&gt;
  &lt;/a&gt;
  Projects to build
&lt;/h2&gt;

&lt;p&gt;E-commerce stores&lt;br&gt;
To-do app&lt;br&gt;
A basic SAAS app&lt;/p&gt;

&lt;p&gt;Congratulations. After learning these concepts, you are now a ninja React developer. Start applying and continue learning.&lt;br&gt;
Thanks for reading.&lt;/p&gt;

&lt;p&gt;Follow me at LinkedIn: &lt;a href="https://www.linkedin.com/in/thealiraza"&gt;https://www.linkedin.com/in/thealiraza&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Zafiyetli Makine Çözümü</title>
      <author>Berkay-Şen</author>
      <pubDate>Tue, 07 Dec 2021 21:03:35 +0000</pubDate>
      <link>https://dev.to/yusiber/zafiyetli-makine-cozumu-i6</link>
      <guid>https://dev.to/yusiber/zafiyetli-makine-cozumu-i6</guid>
      <description>&lt;p&gt;Zaafiyetli makine çözümümüze başlamadan önce birkaç kavramı teorik olarak bilmemiz gerekiyor.Örnek olarak Exploit,payload gibi kavramlara hakim olalım ki sızma testi işleminin mantığını kavrayabilelim.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Exploit Nedir?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Exploit bilgisayar, yazılım, programlarda veyahutta&lt;br&gt;
bir sistemde, sistem açıklarından ya da programcının kod&lt;br&gt;
hatalarını kullanarak sisteme sızmaya veya sistemde istenmeyen hatalar oluşturmak için geliştirilmiş yazılımlar ve programlardır diyebiliriz.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Exploitler Neler Yapabilir&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Exploitler yetkimizin bulunmadığı bir sisteme izinsiz giriş yapmabilme,verileri çalabilme,verileri görüntüleme,bu verileri değiştirebilme, sistem üzerinde yetkili kullanıcılar oluşturabilme ,sistemin işleyişini yavaşlatabilme,işleyişi aksatabilme veyahutta devre dışı bırakabilme gibi özellikleri gerçekleştirebilirler.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Zero-Day Exploit Nedir?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Zero-Day exploitler henüz daha açığı kapatılmamış,(yama yapılmamış)&lt;br&gt;
exploitlerdir.Hackerlar geliştirdikleri exploitlerin yayılmasını istemezler. Çünkü yayılırsa bu açık kapanacaktır.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Exploit Veritabanları&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.rapid7.com"&gt;https://www.rapid7.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.exploit-db.com"&gt;https://www.exploit-db.com&lt;/a&gt;&lt;br&gt;
Bu ve bunun gibi sitelerin içerisinde bir çok exploit bulunmaktadır. Rapid7 Metasploit aracının içerisinde bulunan exploitlerin bulunduğu sitedir.Aynı exploitleri Metasploit aracında da bulabiliriz&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Payload Nedir ?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hedef sisteme exploit doğru bir şekilde uygulandıktan sonra hedefe yollanıp çalıştırılaması istenen yazılıma/modüle verilen addır. Bu modül sayesinde karşı tarafla bağlantımız sağlamış olup karşı tarafa göndereceğimiz gereken komutları bizden bekler/dinler ve modül sayesinde açmış olduğumuz servise gönderir ve bu komutların karşı tarafta çalışmasını sağlar.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bind Payload Nedir?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bind payload türünde hedefin açık portundan içeriye sızılıp,bizim hedefe bağlanmamızı sağlayan payloadlardır. Biz karşı sisteme bağlandığımız için olası antivirüsler ve firewall’lar yakalayabilir.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Reverse Payload Nedir?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Reverse payload türünde ise karşı hedef bizim cihazımıza bağlanarak sızma işlemi gerçekleştirilir. Karşı hedef bize bağlandığı için firewall ve antivürüslere yakalanma olasığı düşüktür.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#s%C4%B1zma-i%CC%87%C5%9Flemine-giri%C5%9F"&gt;
  &lt;/a&gt;
  Sızma İşlemine Giriş
&lt;/h2&gt;

&lt;p&gt;İlk başta nmap aracı ile ağımızdaki cihazları tarayıp listeleyerek sızacağımız cihazın IP adresini bulalım.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nmap 10.0.2.0/24 –T5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;-T5 parametresi ile taramanın hızlı olmasını sağlıyoruz.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0VbaYM6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hb8ugv4y2u21j56640a0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0VbaYM6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hb8ugv4y2u21j56640a0.png" alt="Image description" width="491" height="540"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Şimdi bu IP üzerinden hedef sistemdeki portlarda çalışan servislerin versiyonları hakkında bilgi alalım.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nmap –sV 10.0.2.4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;-sV parametresi servislerin versiyonlarını getirir.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EcbyWR7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ut3mhcp1ftgvvuop65r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EcbyWR7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ut3mhcp1ftgvvuop65r.png" alt="Image description" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Metasploit Nedir ? ( msfconsole )&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Metasploit Framework, hem ofansif hem de defansif güvenlikte kullanılan açık kaynaklı ve Ruby dili ile yazılmış bir  platformdur. Metasploit Framework, sistemlerde bulunan açıkların tespit edilmesi, sömürülmesi ve sistemlere sızılması için gerekli araçları içinde barındıran bir yapıdır. &lt;/p&gt;

&lt;p&gt;Metasploit Framework’ü Kali Linux içerisinde hazır olarak gelmektedir.Çalıştırmak için ise &lt;code&gt;msfconsole&lt;/code&gt; Komutu kullanılmalıdır.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qzQIiNvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/411gegohgs8z4phlr8al.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qzQIiNvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/411gegohgs8z4phlr8al.png" alt="Image description" width="722" height="324"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Metasploit üzerinde bir servisin exploitin bulunup bulunmadığını anlamak için &lt;code&gt;search&lt;/code&gt; komutunu kullanırız.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lmHE5iOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck9350ytcwkxsd1a5zgi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lmHE5iOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck9350ytcwkxsd1a5zgi.png" alt="Image description" width="880" height="232"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;search vsftpd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Komutunu kullanarak vsftpd servisinde bir exploitin bulunup bulunmadığını aradık ver karşımıza bir adet exploit çıktı.Bu exploiti kullanmak için bulduğumuz exploitin Name kısmını kullanarak exploiti seçiyoruz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use exploit/unix/ftp/vsftpd_234_backdoor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5qocDE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0cljbyxknrbi2s6vk2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5qocDE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0cljbyxknrbi2s6vk2h.png" alt="Image description" width="880" height="124"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exploitimizi seçtik,şimdi de bu exploite uygun payloadları listelememiz gerekiyor bunun için şu komutu kullanıyoruz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;show payloads
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--90pAUsM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8b552jukvfpr0zx3cx1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90pAUsM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8b552jukvfpr0zx3cx1.png" alt="Image description" width="880" height="163"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Payloadlar listelendi.Aralarından birini seçmek için ise;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set payload payload/cmd/unix/interact 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ufn3aFrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ze0hbrxf84nocg13778y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ufn3aFrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ze0hbrxf84nocg13778y.png" alt="Image description" width="880" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exploitimizi de payloadımızı da seçtik. Şimdi bu exploitin hangi sisteme IP'ye sızacağını belirtmemiz gerek. Aksi takdirde exploit hangi sisteme sızma işlemi yapacağını normal olarak bilemeyecektir. Ayarları göstermek için ise;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;show options 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;komutunu kullanırız.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6xV_qvBc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh45ccmijhbxvuuigis1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6xV_qvBc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh45ccmijhbxvuuigis1.png" alt="Image description" width="859" height="331"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Buradaki ayarların ne olduğunu açıklayacak olursak,&lt;br&gt;
RHOST Hedef cihazın IP’si olmalı,&lt;br&gt;
RPORT ise hedef cihazda hangi porttan sızma işlemi yapacaksak o portun numarası olmalı.&lt;br&gt;
Bu ayarları değiştirmek için;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set RHOST 10.0.2.4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set RPORT 21
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7AxmEmJi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e27r454b7i3xj0vtdi4t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7AxmEmJi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e27r454b7i3xj0vtdi4t.png" alt="Image description" width="846" height="190"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sızma işlemini başlatmak için ise&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;run 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ya da&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exploit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Komutlarını kullanırız.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P0S78ODJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikkn1mjx42jek4wxgb4o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P0S78ODJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikkn1mjx42jek4wxgb4o.png" alt="Image description" width="868" height="197"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Görüldüğü gibi bir shell bağlantısının açıldığı yazıyor ekranda. Şuan karşı sisteme başarılı bir şekilde sızdığımızı söyleyebilirim. Şuan karşı sistemde bazı komutları kullanmayı deneyebilirsiniz. Örnek olarak &lt;code&gt;ls&lt;/code&gt; , &lt;code&gt;whoami&lt;/code&gt; vb.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cg18CUlH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dqxmz2rc0sj5sxvqfnu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cg18CUlH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dqxmz2rc0sj5sxvqfnu.png" alt="Image description" width="794" height="540"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hedef sistemde hangi kullanıcı ile giriş yaptığımızı görmek için &lt;br&gt;
&lt;code&gt;whoami&lt;/code&gt; kullanalım.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_mG_KdM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htwbn000clu3w9h5wzvs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_mG_KdM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htwbn000clu3w9h5wzvs.png" alt="Image description" width="880" height="103"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gördüğünüz gibi root kullanıcıyız.Ancak her zaman bu kadar şanslı olamayabiliriz. Yetkisi düşük bir kullanıcı ile giriş yapmış olabilirdir.O zaman da yetkimizi yükseltmek için farklı yöntemlere başvuracaktık.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Şimdi ise başka bir sızma testini reverse payload ile yapalım.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bu sefer 6667. portta çalışan servisten sisteme sızacağız.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HfuanlXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kllt4tv6624dw2butjew.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HfuanlXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kllt4tv6624dw2butjew.png" alt="Image description" width="880" height="222"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Msfconsole üzerinden bu servisi aratalım.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Search UnrealIRCd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MlU6g142--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1tbpq0y1037but474la.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MlU6g142--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1tbpq0y1037but474la.png" alt="Image description" width="880" height="189"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gördüğünüz gibi yine bu servis ile ilgili bir exploit bulundu. Hemen kullanımına geçelim.&lt;/p&gt;

&lt;p&gt;Bulduğumuz exploiti seçelim.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use exploit/unix/irc/unreal_ircd_3281_backdoor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YXe8TQ7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mfsdeokdl9pbvznys947.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YXe8TQ7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mfsdeokdl9pbvznys947.png" alt="Image description" width="880" height="57"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exploiti use komutu ile seçtikten sonra payloadlara göz atalım.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;show payloads
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PjUgxUPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0mxw9pj3m422otszpas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PjUgxUPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0mxw9pj3m422otszpas.png" alt="Image description" width="880" height="275"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Payladımızı set komutu ile seçelim&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set payload payload/cmd/unix/reverse
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Her payload çalışmayabilir,çalışmayan payload olursa başka bir payload denemeliyiz.Eğer sisteme sızamazsak bu exploit çalışmadığı anlamına gelmez.Payload'ımızda sorun olabilir,farklı payloadlar denersek sorunu çözebiliriz.&lt;/p&gt;

&lt;p&gt;Gerekli ayarlamaları yapalım.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;show options
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EwDEjYt5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01ilb23cg35ar89slz0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EwDEjYt5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01ilb23cg35ar89slz0t.png" alt="Image description" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bu sefer RHOST ve RPORT dışında da farklı ayarlar gördük. Bunlar &lt;strong&gt;LHOST&lt;/strong&gt; ve &lt;strong&gt;LPORT&lt;/strong&gt; .Peki bu LHOST ve LPORT nedir. Başta anlattığımız reverse payload'ın ayarlarıdır. Reverse payloadın çalışma mantığı sızacağımız sistem bize bağlanıyordu. Bu yüzden &lt;/p&gt;

&lt;p&gt;LHOST bizim IP adresimiz&lt;br&gt;
LPORT karşı bağlantının bizimle iletişime geçecek olan port numarası.&lt;/p&gt;

&lt;p&gt;Ayarları yaptıktan sonra exploiti çalıştırabiliriz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOHClr0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63izb3cpcjb1z9r5hke9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOHClr0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63izb3cpcjb1z9r5hke9.png" alt="Image description" width="880" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ve gördüğünüz gibi tekrardan karşı sisteme sızmış bulunmaktayız...&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>linux</category>
    </item>
    <item>
      <title>What it takes to be a Senior Engineer</title>
      <author>Daniel Kassen</author>
      <pubDate>Tue, 07 Dec 2021 20:45:05 +0000</pubDate>
      <link>https://dev.to/dkassen/what-it-takes-to-be-a-senior-engineer-51fp</link>
      <guid>https://dev.to/dkassen/what-it-takes-to-be-a-senior-engineer-51fp</guid>
      <description>&lt;p&gt;Hello Friends.&lt;/p&gt;

&lt;p&gt;I finally did it. Happened about a month and a half ago. I was ✨ promoted ✨ to a senior level engineering position. Want to know the most frustrating part about it? It didn't feel like I deserved it. Yes, imposter syndrome sticks with you.&lt;/p&gt;

&lt;p&gt;I started my career as a software engineer five years ago after working a job as a developer at a small startup that just needed hands and thoughts which I kinda see as my boot camp experience.&lt;/p&gt;

&lt;p&gt;I started my "engineering" career at a larger, yet still small startup in San Francisco, where I learned a lot, but not enough to become a senior there. I did primarily backend work with a spattering of frontend excursions. I got close to senior at that company. So close that my manager wasn't able to pinpoint anything specific to work on.&lt;/p&gt;

&lt;p&gt;I was good enough though to land a job at a larger, public company where I was given a position that was once called senior (but was actually software engineer III). The job didn't feel senior and I didn't feel senior. I've stayed at this company for over two years, learned how things work, started working in the frontend, started planning projects, started running certain meetings, and it finally happened. I got promoted. That's the basic history. Five years. Expect that long.&lt;/p&gt;

&lt;p&gt;Now for what &lt;em&gt;actually&lt;/em&gt; got me to where I am.&lt;/p&gt;

&lt;p&gt;You need expertise in the technology. I have four years of experience as a backend engineer and one as a fullstack engineer. I know databases, APIs, graphQL, react and redux, bash, vim, how to use my IDE effectively, how to test things properly, a bit about AWS, networking, algorithms and data structures, design patterns, architecture best practices.. the list goes on. There's a lot you need to know -- some you'll encounter in your day-to-day, some you need to seek out. I read a lot of books. Things will start to meld together and your thoughts and ideas will become more complex without you even noticing.&lt;/p&gt;

&lt;p&gt;You need expertise in yourself. My work ethic has fluctuated over the years, but like the Dow Jones, it inches up ever so slightly over time. You need to learn how to use your time effectively. You need to know your limits, set boundaries, and keep focused on one thing at a time, as much as possible. Time management is a skill you build up over time (is that a pun? not a good one, if so) and I -still- suck at it, but I'm  getting better as more responsibility is piled on to my plate.&lt;/p&gt;

&lt;p&gt;You need expertise in interpersonal communication. If you've read the 7 habits of highly effective people (if you haven't do it, and read it slowly, and absorb what he is saying), you might recognize that the first two paragraphs of what you need are all about becoming independent. Independent is good, but the real magic comes from interdependence -- working with a team of independent people who leverage each other's strengths to create something much bigger and stronger than they are alone. You need to learn how to communicate your problems, what you know, how you can help, what you need help with. Communication is something I can't effectively teach, it's just something that comes with time and experience. One thing I can advise is this -- listen twice as much as you speak. Not just at your job, but in every aspect of your life. Listen to understand, not to respond.&lt;/p&gt;

&lt;p&gt;I probably didn't hit on every detail precisely, because your journey will differ from mine. Like I said, this kind of came together over the course of 5 years, plus the boot camp time. Invest in yourself. Learn as much as you can. Bring value to your team, your customers, and yourself. You can do it, so stick to it.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
    </item>
    <item>
      <title> JavaScript Keyboard events on ubuntu system</title>
      <author>gwendolinebinya</author>
      <pubDate>Tue, 07 Dec 2021 20:31:41 +0000</pubDate>
      <link>https://dev.to/gwendolinebinya/javascript-keyboard-events-on-ubuntu-system-5c6</link>
      <guid>https://dev.to/gwendolinebinya/javascript-keyboard-events-on-ubuntu-system-5c6</guid>
      <description>&lt;p&gt;I am having problems firing &lt;br&gt;
JavaScript keyboard events on my laptop which has ubuntu.the program works well with windows.Any one who has encountered such a problem? And how did you resolve it&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>What is Authorization (with examples)</title>
      <author>propelauthblog</author>
      <pubDate>Tue, 07 Dec 2021 20:05:08 +0000</pubDate>
      <link>https://dev.to/propelauth/what-is-authorization-with-examples-33cp</link>
      <guid>https://dev.to/propelauth/what-is-authorization-with-examples-33cp</guid>
      <description>&lt;p&gt;The word "auth" is complicated because there a wide range of topics that fall in the bucket of "auth." In this series, we'll take a practical approach to understanding many of these topics with examples to learn from.&lt;/p&gt;

&lt;p&gt;Previously, we wrote about &lt;a href="https://blog.propelauth.com/understanding-user-authentication-from-scratch/"&gt;user authentication&lt;/a&gt;. Now, let's look at a related topic, authorization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-authorization"&gt;
  &lt;/a&gt;
  What is Authorization?
&lt;/h2&gt;

&lt;p&gt;Authorization is the process of determining if someone has access to something. This is different from authentication, which is about determining who someone is in the first place.&lt;/p&gt;

&lt;p&gt;As an example, imagine we are building a simplified Twitter. Users can sign up, post tweets, and delete tweets. When we receive a request to delete a tweet, we need to do two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Determine who made the request&lt;/li&gt;
&lt;li&gt;Determine if they are allowed to delete the tweet&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Step 1 is authentication - we are determining &lt;strong&gt;who&lt;/strong&gt; the user is. Step 2 is authorization - we are determining if that user &lt;strong&gt;is allowed&lt;/strong&gt; to delete the tweet.&lt;/p&gt;

&lt;p&gt;In this case, step 2 could be as simple as only the user that made the tweet is allowed to delete it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;canDeleteTweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Authentication&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserThatMadeTheRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Authorization &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 2 could also include other rules, like maybe we hire a moderation team and allow them to delete tweets as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;canDeleteTweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Authentication&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserThatMadeTheRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Authorization &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isUserAModerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementing-authorization"&gt;
  &lt;/a&gt;
  Implementing Authorization
&lt;/h2&gt;

&lt;p&gt;There are a lot of different approaches to implementing authorization. One example that you might have come across before is role-based access control (RBAC). Role-based access control is a fancy way of saying "assign each user to a role (or group) and each role has a defined set of actions they can take".&lt;/p&gt;

&lt;p&gt;We actually already looked at an example of RBAC above. In our simplified Twitter example, we had two roles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Moderators&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Users&lt;/strong&gt; (we implicitly defined this as everyone who isn't a moderator)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Users can create tweets and delete their own tweets. Moderators can delete anyone's tweets.&lt;/p&gt;

&lt;p&gt;You can extend this in a lot of ways. For example, maybe your roles are hierarchical. Each role has its own set of permissions and also gets all the permissions from any role beneath it in the hierarchy.&lt;/p&gt;

&lt;p&gt;RBAC is generally seen as a coarser form of authorization, since each user must belong to a role and every user within that role gets the same permissions. Another example approach is attribute-based access control (ABAC), where you look at attributes (e.g. what team the user is on, is this production or staging, etc.) to determine if a user can perform some action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authorization-for-b2b-businesses"&gt;
  &lt;/a&gt;
  Authorization for B2B Businesses
&lt;/h2&gt;

&lt;p&gt;Let's look at another example - building a B2B / SaaS business. In this case, let's say we're making an MVP of &lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a B2B business, users will use your product along with their coworkers. To accommodate that, each user can be a member of an organization. &lt;/p&gt;

&lt;p&gt;The first permission that we need is the ability to create an organization and every user should be allowed to do it. Once an organization is created, we have three hierarchical roles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Owner&lt;/strong&gt; - Able to delete the organization, manage billing, and invite new owners&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Admin&lt;/strong&gt; - Able to create new channels, manage organization settings, and invite new admins/members&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Member&lt;/strong&gt; - Able to send messages in any channel&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Importantly, these roles apply only within the context of an organization. I can be an &lt;strong&gt;Owner&lt;/strong&gt; of organization A and a &lt;strong&gt;Member&lt;/strong&gt; of organization B. Those roles dictate my permissions within the organization - not globally.&lt;/p&gt;

&lt;p&gt;Since these roles are hierarchical, Admins have all the permissions that Members have, and Owners have all the permissions that Admins have.&lt;/p&gt;

&lt;p&gt;The Owner, Admin, and Member hierarchy is straightforward, and works for a lot of B2B businesses but it can be tricky to manage in practice. If you'd prefer to let someone else handle it, &lt;a href="https://www.propelauth.com"&gt;PropelAuth&lt;/a&gt; provides this structure by default - including UIs for inviting users, UIs for managing roles, and libraries for adding authorization to your backend.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>tutorial</category>
      <category>security</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Tips for writing performant code</title>
      <author>Demetre</author>
      <pubDate>Tue, 07 Dec 2021 20:00:45 +0000</pubDate>
      <link>https://dev.to/demetrejou/tips-for-writing-performant-code-2c4</link>
      <guid>https://dev.to/demetrejou/tips-for-writing-performant-code-2c4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-performant-code-is-all-about-memory"&gt;
  &lt;/a&gt;
  Why performant code is all about memory
&lt;/h2&gt;

&lt;p&gt;Increasing the performance of a given piece of code is not as simple as throwing more ram, more GHz, or more cores by cranking the cloud provider's knob to 11. Decreasing the runtime of a serial program or improving the scaling per core of a parallel program requires not only a deeper understanding of the underlying hardware, but also writing code with that hardware in mind.&lt;/p&gt;

&lt;p&gt;While it is true that the number of transistors has doubled each year, the per-core frequency has been tapering off since 2010. CPUs single-core performance has started to follow the same tampering off trend. In contrast, the number of logical cores per processor has doubled every few years. In recent history, AMD's Ryzen line has pushed 4 cores / 8 threads from being the top of the line to 32 cores / 32 threads now being top of the line.&lt;/p&gt;

&lt;p&gt;While the number of transistors and logical cores continues to climb every year, unfortunately, the speed of memory accesses has not. The gap between the speed the CPU can process numbers and the speed it can access memory from cache or main memory has grown every year. For any modern machine, the time spent pulling data from memory vastly overshadows that of actually doing useful computations. This is why, when trying to improve the run time performance of code, it is not a technique to decrease the number of computations that materialize the largest improvement. It instead requires changes to how data is used and accessed. It is techniques to best utilizing the cache that specifically has the biggest effect.&lt;/p&gt;

&lt;p&gt;An easy to understand generalization of modern memory is that there are 2 levels. The first, being a small but very fast cache and the other, a slow but larger main memory (or DRAM). When something is initially loaded from DRAM to be used by the CPU, it is also placed into the cache, evicting something else to take its place. This simple model is nice, but in reality, there are multiple cache layers and multiple ways to pick what to evict. Things like hardware prefetching and cache lines also come into play. Those topics are all much outside the scope of this article, but interesting to read about nonetheless. This nice and simple model is what we're going to use. For reference, reading from cache is an order of magnitude faster than reading from main memory. It takes single-digit nano-seconds (ns) to read from cache vs. ~100ns to read from main memory, although this still depends entirely on specific hardware.  While a programmer can't directly choose what goes into cache and what gets evicted, they can still get a very good idea. Being always cognizant of what's likely to be in cache and avoiding these slow memory accesses is the key to achieving a sizable speed up.&lt;/p&gt;

&lt;p&gt;This entire article will be written with C in mind but the main ideas are transferable to most anything else.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#foreword"&gt;
  &lt;/a&gt;
  Foreword
&lt;/h2&gt;

&lt;p&gt;Before trying to engineer code to run faster, the underlying algorithm should always be looked at first. There is almost no reason to try to optimize an O(n^2) algorithm when an O(n) one exists. While there are cases, especially when dealing with small amounts of data, that n^2 might be faster due to implementation details, this article is targeting algorithms running on data much larger than that. Nothing in this article will help make selection sort faster than merge sort for significantly large arrays.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ways-to-increase-cache-hits"&gt;
  &lt;/a&gt;
  Ways to increase cache hits
&lt;/h2&gt;

&lt;p&gt;The whole name of the game to improve serial performance is increasing cache hits. Or otherwise, the goal is to reduce how often something is loaded from main memory. Either way, the end goal is to reduce the amount of time (cycles) it takes to load something into the CPU. The two major ways to do this is with the techniques of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Temporal locality and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spatial locality.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before moving on, we should add a small but important twist to the simple memory model. When something is loaded from slow memory into cache, the level of granularity is not a single byte or word but an entire cache line. These cache lines are in the range of 64 or 128 bytes. When a single int is requested by the program and that int is in slow memory, the entire cache line the int is in is also brought into cache.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#temporal-locality"&gt;
  &lt;/a&gt;
  Temporal locality
&lt;/h3&gt;

&lt;p&gt;Reuse data that is already in cache.&lt;/p&gt;

&lt;p&gt;This means that once a value is loaded in for the first time, it should be used as much as possible. It should be mentioned that it’s never possible to 100% avoid slow memory accesses since at some point something has to be loaded in for the first time, even when considering cache lines.&lt;/p&gt;

&lt;p&gt;For an example, compare the following code snippets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for person in persons:

    person.first_name.lower()

// lots of unrelated memory loads here

for person in persons:

    person.last_name.lower()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;vs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for person in persons:

    person.first_name.lower()
    person.last_name.lower()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While this is a quite simplified example, the idea is visible. For a large &lt;code&gt;persons&lt;/code&gt; array, each     &lt;code&gt;person&lt;/code&gt; will have to be loaded twice in the first example, but only once in the second. While a good compiler can see this and might fuse the loops together, it can't always rely on compiler optimizations to reordering large blocks of code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#spatial-locality"&gt;
  &lt;/a&gt;
  Spatial locality
&lt;/h3&gt;

&lt;p&gt;Operate on data that are stored close to each other in memory and potentially would have been brought into cache together.&lt;br&gt;
Because data is brought into cache at the cache line level, adjacent data is also brought in cache. When iterating through a list, it is much better to access linearly instead of random accesses because of this.&lt;/p&gt;

&lt;p&gt;While most loops are linear by default, one must not forget about the instructions of the code itself. Those still need to be brought into cache and read in order to be executed. While this effect is small, having many function calls requires many jumps in instruction memory, creating more slow memory accesses. This is why some compilers will automatically inline functions, saving this extra function call overhead and potential slow memory access. Modern CPUs also do branch prediction which somewhat mitigates the performance hit of function calls or logical branching statements. Again though, one can't always rely on compiler optimizations when trying to squeeze out the little bit of performance that is possible. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parallel-processing"&gt;
  &lt;/a&gt;
  Parallel Processing
&lt;/h2&gt;

&lt;p&gt;"But why can't you just add more cores to the code to make it run faster? Why bother spending time to make serial code faster?"&lt;/p&gt;

&lt;p&gt;Without fast serial code, the parallel code won't be good. All the same principles to making serial code fast apply to parallel code as well. Without these good fundamentals already satisfied, the parallel code will never be as fast as it could be. There are extra things to keep in mind when dealing with parallel code. Explaining how to decompose data, decompose tasks, schedule threads, and everything else required to make incredibly fast parallel code, would fill up an entire book. Instead, this article will mention just some basic things to keep in mind before trying to turn serial code into parallel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amdahls-law"&gt;
  &lt;/a&gt;
  Amdahl's Law
&lt;/h3&gt;

&lt;p&gt;Amdahl's law gives the formula for the theoretically speed up in run time of a task or program. Not all parts of a program can be parallelized. So, even with infinite cores and perfect parallelized code, there is still a minimum amount of run time because of the serial parts of the program. This is why focusing on writing fast serial code is important to do as a first step. Even if 90% of the program can be parallelized, with infinite cores the program can still only achieve a 10x speedup. If 75% of the program can be parallelized, the program can achieve at best a 4x speedup. Well-written serial code can easily achieve a 4x speedup by itself and is easier to write, easier to debug, and easier to understand.&lt;/p&gt;

&lt;p&gt;Starting with a slow serial implementation and trying to parallelize it will never give as good of results as writing very good serial code from the start and parallelizing that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#embarrassing-parallel"&gt;
  &lt;/a&gt;
  Embarrassing parallel
&lt;/h3&gt;

&lt;p&gt;This is almost opposite to the idea of Amdahl's law. Amdahl's law says that even in the best case one can only achieve a modest speedup multiplier. Embarrassing parallel problems are ones in which little to no effort is required to effectively parallelize a problem. Sometimes these problems are also called perfectly parallel, or pleasingly parallel. The opposite of these would be inherently serial problems that can't be meaningfully parallelized at all.&lt;/p&gt;

&lt;p&gt;It's worth learning which types of problems are embarrassing parallel, because they're the low-hanging fruit when trying to decrease run time. These problems are normally characterized by having no interdependencies between tasks. The data can be easily split, no thread-to-thread communication is required. Things like password cracking, 3D video rendering, and numerical integration are all examples of this set of problems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parallelizing-isnt-free"&gt;
  &lt;/a&gt;
  Parallelizing isn't free
&lt;/h3&gt;

&lt;p&gt;For a given problem, where a large part of it can be parallelized and that part can be parallelized well, there is still an added runtime cost of parallelizing it. Only in outlier circumstances will no synchronization between threads be required. In C/C++, locking and unlocking mutexes still has a cost. While there are fewer (operating) system calls when the mutex isn't contested by other threads there is still additional overhead. There are other ways to synchronize threads, semaphores, signals, and barriers. These additional synchronization mechanics are often required to ensure program correctness and avoid race conditions. They also add additional developer overhead which is an extra thing to consider. There is no free lunch by parallelizing part of the algorithm. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#false-sharing"&gt;
  &lt;/a&gt;
  False Sharing
&lt;/h3&gt;

&lt;p&gt;When 2 threads load the same cache line into their respective caches and the cache line values are only read and not modified, there is no issue. However, when one thread writes to any part of that cache line, the entire cache line is now marked as invalid and written back to main memory. Whenever another thread tries to read that now invalid cache line, it will have to re-read it from slow memory even if it's trying to access a different part of the cache line. This issue is called false sharing and causes almost an artificial increase in run time. This problem can be commonly seen when an array is shared between threads. If each thread writes to a different index of the array, there will be no synchronization required, but the data access times will be very bad because that entire cache line will have to be reloaded from slow memory every time. This issue can be worked around by creating a new local variable for each thread instead of sharing the array, or padding the array with dummy values so that each thread is reading values at least one cache line away from each other.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#measure-scaling"&gt;
  &lt;/a&gt;
  Measure scaling
&lt;/h3&gt;

&lt;p&gt;In an ideal world, the run time decreases linearly with the number of threads or cores added. Real world use cases rarely reflect this ideal speed up. When measuring the speedup achieved by adding additional cores, there are two ways to measure it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Strong Scaling&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is when the amount of data being worked on stays the same and the amount of cores increases,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Weak scaling&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is when the amount of data increases with the number of cores being added.&lt;/p&gt;

&lt;p&gt;These scaling amounts are by no means guaranteed to be the same, and it's worth investigating both of these scaling values when comparing a parallel version of a program to a serial version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-not-mentioned"&gt;
  &lt;/a&gt;
  Things not mentioned
&lt;/h2&gt;

&lt;p&gt;While these topics are interesting and worth investigating in their own right, they're simply too complex for this article.&lt;/p&gt;

&lt;p&gt;Other kinds of compiler optimizations include:&lt;br&gt;
Optimizing registers,&lt;br&gt;
Different levels of gcc optimization e.g -O1, -O2, -O3,&lt;br&gt;
Loop unrolling,&lt;br&gt;
Different multi-processor models such as distributed systems and GPUs,&lt;br&gt;
Calculating efficiency, machine balance, and machine peak,&lt;br&gt;
Branch prediction on modern CPUs, and&lt;br&gt;
Hardware prefetching (or why iterating through a loop doesn't normally have cache misses).&lt;/p&gt;

</description>
    </item>
    <item>
      <title>ASMR JavaScript Home Budget App Coding</title>
      <author>Bek Brace</author>
      <pubDate>Tue, 07 Dec 2021 19:59:44 +0000</pubDate>
      <link>https://dev.to/bekbrace/asmr-javascript-home-budget-app-coding-5ebk</link>
      <guid>https://dev.to/bekbrace/asmr-javascript-home-budget-app-coding-5ebk</guid>
      <description>&lt;p&gt;This is a No Talk coding video session in my flat in Lodz, Poland on a rainy night with my hot cup of black coffee.&lt;/p&gt;

&lt;p&gt;ASMR coding a JavaScript Home Budget application, AKA "Expense Tracker" which is suitable for anyone that wants to keep track of their daily finances.&lt;/p&gt;

&lt;p&gt;No talk, just typing quietly on my mechanical keyboard "Genesis Thor 300 TKL".&lt;/p&gt;

&lt;p&gt;There's the video, so you can prepare your hot beverage and code along with me :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aw78jgX0nU4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hope you enjoy, guys&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-media"&gt;
  &lt;/a&gt;
  Social Media  
&lt;/h2&gt;

&lt;p&gt;Facebook : &lt;a href="https://www.facebook.com/bekbrace%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B/"&gt;https://www.facebook.com/bekbrace​​​​/&lt;/a&gt; &lt;br&gt;
Twitter : &lt;a href="https://twitter.com/BekBrace/"&gt;https://twitter.com/BekBrace/&lt;/a&gt;&lt;br&gt;
Instagram : &lt;a href="https://www.instagram.com/bek_brace/"&gt;https://www.instagram.com/bek_brace/&lt;/a&gt;&lt;br&gt;
GitHub profile : &lt;a href="https://github.com/BekBrace/%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://github.com/BekBrace/​​​&lt;/a&gt;&lt;br&gt;
Website : &lt;a href="https://bekbrace.com/"&gt;https://bekbrace.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reach out  : &lt;a href="mailto:info@bekbrace.com"&gt;info@bekbrace.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-used-in-video"&gt;
  &lt;/a&gt;
  Tools used in video:
&lt;/h2&gt;

&lt;p&gt;Microphone used in recording Blue Yeti&lt;br&gt;
Coding on Genesis Thor 300 TKL keyboard&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;Join the Channel &lt;br&gt;
OR&lt;br&gt;
☕ Buy Me A Coffee : &lt;a href="https://www.buymeacoffee.com/bekbrace"&gt;https://www.buymeacoffee.com/bekbrace&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
