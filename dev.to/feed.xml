<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Generating accessor methods easily</title>
      <author>masaushi</author>
      <pubDate>Sun, 17 Oct 2021 05:16:29 +0000</pubDate>
      <link>https://dev.to/masaushi/generating-accessor-methods-easily-3p61</link>
      <guid>https://dev.to/masaushi/generating-accessor-methods-easily-3p61</guid>
      <description>&lt;p&gt;Hi all,&lt;br&gt;
I have made a go tool to generate accessor methods(getter or setter) for unexported struct fields, so let me introduce it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/masaushi/accessory"&gt;https://github.com/masaushi/accessory&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/masaushi"&gt;
        masaushi
      &lt;/a&gt; / &lt;a href="https://github.com/masaushi/accessory"&gt;
        accessory
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      accessor methods generator for Go programming language
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
accessory&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/masaushi/accessory/actions/workflows/test.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KcZire5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/masaushi/accessory/actions/workflows/test.yml/badge.svg" alt="test"&gt;&lt;/a&gt;
&lt;a href="https://github.com/masaushi/accessory/actions/workflows/release.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NL7Nc4l7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/masaushi/accessory/actions/workflows/release.yml/badge.svg" alt="release"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;accessory is an accessor generator for &lt;a href="https://golang.org/" rel="nofollow"&gt;Go programming language&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
What is accessory?&lt;/h2&gt;
&lt;p&gt;Accessory is a tool that generates accessor methods from any structs.&lt;/p&gt;
&lt;p&gt;Sometimes you might make struct fields unexported in order for values of fields not to be accessed
or modified from anywhere in your codebases, and define getters or setters for values to be handled in a desired way.&lt;/p&gt;
&lt;p&gt;But writing accessors for so many fields is time-consuming, but not exciting or creative.&lt;/p&gt;
&lt;p&gt;Accessory frees you from tedious, monotonous tasks.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;To get the latest released version&lt;/p&gt;
&lt;h3&gt;
Go version &amp;lt; 1.16&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;go get github.com/masaushi/accessory&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Go 1.16+&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;go install github.com/masaushi/accessory@latest&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;h3&gt;
Declare Struct with &lt;code&gt;accessor&lt;/code&gt; Tag&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;accessory&lt;/code&gt; generates accessor methods from defined structs, so you need to declare a struct and fields with &lt;code&gt;accessor&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;Values for &lt;code&gt;accessor&lt;/code&gt; tag is &lt;code&gt;getter&lt;/code&gt; and &lt;code&gt;setter&lt;/code&gt;, &lt;code&gt;getter&lt;/code&gt; is for generating getter method and &lt;code&gt;setter&lt;/code&gt; is for setter methods.&lt;/p&gt;
&lt;p&gt;Here…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/masaushi/accessory"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Sometimes you might make struct fields unexported in order for values of the fields not to be accessed or modified from anywhere in your codebases.&lt;/p&gt;

&lt;p&gt;Making struct fields unexported will prevent data from unexpected use or change.&lt;br&gt;
But you sometimes might need accessor methods for some fields to get/set data in a desired way.&lt;/p&gt;

&lt;p&gt;However, writing accessors for many fields is time-consuming, but not exciting or creative.&lt;/p&gt;

&lt;p&gt;This tool frees you from that tedious, monotonous task.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;
&lt;h5&gt;
  &lt;a href="#1-declare-a-model-with-raw-accessor-endraw-tag"&gt;
  &lt;/a&gt;
  1. Declare a model with &lt;code&gt;accessor&lt;/code&gt; tag.
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;MyStruct&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;field1&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`accessor:"getter"`&lt;/span&gt;
    &lt;span class="n"&gt;field2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;      &lt;span class="s"&gt;`accessor:"setter"`&lt;/span&gt;
    &lt;span class="n"&gt;field3&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`accessor:"getter,setter"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#2-run-raw-accessory-endraw-command"&gt;
  &lt;/a&gt;
  2. Run &lt;code&gt;accessory&lt;/code&gt; command
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;accessory &lt;span class="nt"&gt;-type&lt;/span&gt; MyStruct &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#3-accessor-methods-will-be-generated"&gt;
  &lt;/a&gt;
  3. Accessor methods will be generated.
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MyStruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Field1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MyStruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SetField2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MyStruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Field3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MyStruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SetField3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#4-you-can-customize-method-name"&gt;
  &lt;/a&gt;
  4. You can customize method name
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;MyStruct&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;field1&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`accessor:"getter:GetFirstField"`&lt;/span&gt;
    &lt;span class="n"&gt;field2&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;    &lt;span class="s"&gt;`accessor:"setter:ChangeSecondField"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Generated methods will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MyStruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;GetFirstField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MyStruct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ChangeSecondField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#5-you-can-also-generate-accessors-with-raw-go-generate-endraw-"&gt;
  &lt;/a&gt;
  5. You can also generate accessors with &lt;code&gt;go generate&lt;/code&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;//go:generate accessory -type MyStruct&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;MyStruct&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;field1&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`accessor:"getter"`&lt;/span&gt;
    &lt;span class="n"&gt;field2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;   &lt;span class="s"&gt;`accessor:"setter"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Generating accessors easily will save your time and help you focus on writing important business logics.&lt;/p&gt;

&lt;p&gt;I'm looking forward to getting your feedback.&lt;/p&gt;

&lt;p&gt;Have a wonderful day!&lt;/p&gt;

</description>
      <category>go</category>
    </item>
    <item>
      <title>How to Force Re-Render a React Component &amp; Should you do it?</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 17 Oct 2021 05:06:33 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/how-to-force-re-render-a-react-component-should-you-do-it-5h1p</link>
      <guid>https://dev.to/ruppysuppy/how-to-force-re-render-a-react-component-should-you-do-it-5h1p</guid>
      <description>&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; automatically &lt;strong&gt;Re-Renders&lt;/strong&gt; the components whenever any of its &lt;strong&gt;props&lt;/strong&gt; or its &lt;strong&gt;state&lt;/strong&gt; is updated. But quite often beginners &lt;em&gt;(especially me in my early days)&lt;/em&gt; find it quite difficult getting a component &lt;strong&gt;re-rendered&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First, let's look at the &lt;em&gt;methods we can use to &lt;strong&gt;re-render&lt;/strong&gt; a component&lt;/em&gt;, and discuss &lt;em&gt;whether we should really force a &lt;strong&gt;re-render&lt;/strong&gt;&lt;/em&gt; or let &lt;strong&gt;React&lt;/strong&gt; take care of it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rerender-a-class-component"&gt;
  &lt;/a&gt;
  Re-Render a Class Component
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Class Components&lt;/strong&gt; provide you a &lt;strong&gt;built-in method&lt;/strong&gt; to trigger a &lt;strong&gt;Re-Render&lt;/strong&gt;. Simply use &lt;code&gt;forceUpdate&lt;/code&gt; method to force &lt;strong&gt;React&lt;/strong&gt; to &lt;strong&gt;Re-Render&lt;/strong&gt; the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forceUpdateHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forceUpdateHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;forceUpdateHandler&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forceUpdate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forceUpdateHandler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Change&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Random&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#rerender-a-functional-component"&gt;
  &lt;/a&gt;
  Re-Render a Functional Component
&lt;/h1&gt;

&lt;p&gt;Unfortunately, &lt;strong&gt;Functional Component&lt;/strong&gt; doesn't have a &lt;code&gt;forceUpdate&lt;/code&gt; method for ease of use. You can use &lt;code&gt;useState&lt;/code&gt; hook to simulate an update or create a &lt;strong&gt;custom hook&lt;/strong&gt; too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// forceUpdate hook&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useForceUpdate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// component&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;forceUpdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForceUpdate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;forceUpdate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Change&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Random&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#should-you-force-rerender-a-react-component"&gt;
  &lt;/a&gt;
  Should you Force Re-Render a React Component?
&lt;/h1&gt;

&lt;p&gt;Now for answering the most important question...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-no-and-no"&gt;
  &lt;/a&gt;
  &lt;strong&gt;NO! NO! and NO!!!!!!!!!!&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--riXuMcS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erjatgj9qpcfzvjde116.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--riXuMcS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erjatgj9qpcfzvjde116.gif" alt="No"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In most cases, you DEFINITELY SHOULD NOT &lt;strong&gt;force a re-render&lt;/strong&gt;! &lt;/p&gt;

&lt;p&gt;There are a few &lt;em&gt;niche cases&lt;/em&gt;, like &lt;strong&gt;modifying a blockchain&lt;/strong&gt; (which only returns a &lt;strong&gt;transaction hash&lt;/strong&gt; and no data), where the &lt;strong&gt;forced re-render&lt;/strong&gt; makes sense to &lt;em&gt;fetch the updated data&lt;/em&gt; from the &lt;strong&gt;blockchain&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#debugging-why-the-component-isnt-updating"&gt;
  &lt;/a&gt;
  Debugging Why the Component isn't Updating
&lt;/h1&gt;

&lt;p&gt;Let's look at some of the common issues why &lt;em&gt;&lt;strong&gt;React&lt;/strong&gt; fails to update your components&lt;/em&gt; and &lt;em&gt;find solutions for them as well&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-incorrectly-updated-state"&gt;
  &lt;/a&gt;
  1. Incorrectly Updated State
&lt;/h2&gt;

&lt;p&gt;Let's consider the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;updateUser&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Update&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;App&lt;/code&gt; component would not be &lt;strong&gt;re-rendering&lt;/strong&gt; the &lt;em&gt;user's name&lt;/em&gt; even when the &lt;code&gt;Update User&lt;/code&gt; button is clicked.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; evaluates state changes by checking its &lt;strong&gt;shallow equality&lt;/strong&gt; (also called &lt;strong&gt;reference equality&lt;/strong&gt;), which checks to see if &lt;em&gt;both the current and the new value for state reference the same object&lt;/em&gt;. In our example, we updated one of the properties of the &lt;strong&gt;user object&lt;/strong&gt;, but we technically made &lt;code&gt;setUser&lt;/code&gt; the same object reference, and thus, &lt;strong&gt;React&lt;/strong&gt; &lt;em&gt;didn’t perceive any change in its state&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As &lt;a href="https://reactjs.org/docs/react-component.html#state"&gt;&lt;strong&gt;React&lt;/strong&gt; documentation&lt;/a&gt; mentions, &lt;em&gt;State should be treated as immutable&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, how do we fix it? We could &lt;em&gt;create a new object with the updated values&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-incorrectly-updated-props-without-state-change"&gt;
  &lt;/a&gt;
  2. Incorrectly Updated Props (without state change)
&lt;/h2&gt;

&lt;p&gt;Incorrectly updating props without a state change can also leads to bugs. Let’s look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// setInterval(() =&amp;gt; {&lt;/span&gt;
&lt;span class="c1"&gt;//   console.log(time)&lt;/span&gt;
&lt;span class="c1"&gt;// }, 1000);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;intervalId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intervalId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Clock&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Clock&lt;/code&gt; in the example doesn't update the &lt;code&gt;time&lt;/code&gt; after the first load. To confirm that the &lt;code&gt;time&lt;/code&gt; is being properly updated, you can just un-comment the &lt;code&gt;console.log&lt;/code&gt;. Every second, &lt;em&gt;the runtime will update the variable &lt;code&gt;time&lt;/code&gt;, which is then passed to our &lt;code&gt;Clock&lt;/code&gt; component for rendering&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When the state changes, &lt;code&gt;App&lt;/code&gt; (parent component) is &lt;strong&gt;re-rendered&lt;/strong&gt;, thus triggering a &lt;strong&gt;re-rendered&lt;/strong&gt; in &lt;code&gt;Clock&lt;/code&gt; (child component) with the updated &lt;code&gt;time&lt;/code&gt;. Thus &lt;em&gt;updating state is what actually triggers the re-render&lt;/em&gt;, which is then &lt;em&gt;propagated through the props&lt;/em&gt;. So updating the state is ABSOLUTELY CRUCIAL!&lt;/p&gt;

&lt;p&gt;So to fix the issue, we could use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTime&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;intervalId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intervalId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Clock&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h1&gt;

&lt;p&gt;Just like everything in this world, this article too has to end 😛 &lt;/p&gt;

&lt;p&gt;In the article, we went through some of the ways you can &lt;strong&gt;force re-render&lt;/strong&gt; your &lt;strong&gt;React&lt;/strong&gt; Components as well as the common causes of why &lt;em&gt;&lt;strong&gt;React&lt;/strong&gt; fails to re-render the components&lt;/em&gt;. Hope this helps you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best of Luck with your React Development Journey!&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Looking for ways to boost your productivity? Check out my &lt;strong&gt;Bi-Weekly Productivity Blogs&lt;/strong&gt; on &lt;a href="https://tapajyotibose.medium.com/"&gt;Medium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Need a &lt;strong&gt;Top Rated Front-End Development Freelancer&lt;/strong&gt;? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a &lt;strong&gt;Digital Nomad&lt;/strong&gt; in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for &lt;strong&gt;Weekly new Tidbits&lt;/strong&gt; on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are a few commonly asked questions I get. So, I hope this &lt;strong&gt;FAQ&lt;/strong&gt; section solves your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
Look into the following articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf"&gt;Front End Development Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Sorry, I am already under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you like to collaborate on our site?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As mentioned in the &lt;em&gt;previous question&lt;/em&gt;, I am in a time crunch, so I would have to pass on such opportunities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Connect to me on&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Add Power Off and Reboot to grub menu</title>
      <author>Dhananjay Tanpure</author>
      <pubDate>Sun, 17 Oct 2021 04:57:04 +0000</pubDate>
      <link>https://dev.to/dtan13/add-power-off-and-reboot-to-grub-menu-a45</link>
      <guid>https://dev.to/dtan13/add-power-off-and-reboot-to-grub-menu-a45</guid>
      <description>&lt;p&gt;To add &lt;strong&gt;Power Off&lt;/strong&gt; and &lt;strong&gt;Reboot&lt;/strong&gt; options to grub menu, you need to update a file in your grub configuration directory.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/grub.d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#open-raw-40custom-endraw-in-your-favorite-editor"&gt;
  &lt;/a&gt;
  Open &lt;code&gt;40_custom&lt;/code&gt; in your favorite editor
&lt;/h3&gt;

&lt;p&gt;For me its &lt;code&gt;micro&lt;/code&gt; :&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;micro 40_custom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#add-following-line-at-the-end-of-the-file"&gt;
  &lt;/a&gt;
  Add following line at the end of the file
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
 menuentry &lt;span class="s2"&gt;"Reboot"&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      reboot
&lt;span class="o"&gt;}&lt;/span&gt;

menuentry &lt;span class="s2"&gt;"Power Off"&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      halt
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Do not change the &lt;code&gt;exec tail&lt;/code&gt; line in the file&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h3&gt;
  &lt;a href="#update-your-raw-grubcfg-endraw-file"&gt;
  &lt;/a&gt;
  Update your &lt;code&gt;grub.cfg&lt;/code&gt; file
&lt;/h3&gt;



&lt;ul&gt;
&lt;li&gt;  For Debian based distros
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;update-grub
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  For Arch based and Other distros
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;grub-mkconfig &lt;span class="nt"&gt;-o&lt;/span&gt; /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>grublinux</category>
    </item>
    <item>
      <title>Improve your productivity as a developer</title>
      <author>Dylan Oh</author>
      <pubDate>Sun, 17 Oct 2021 04:38:27 +0000</pubDate>
      <link>https://dev.to/ohdylan/improve-your-productivity-as-a-developer-22kc</link>
      <guid>https://dev.to/ohdylan/improve-your-productivity-as-a-developer-22kc</guid>
      <description>&lt;p&gt;We are in the era of information explosion. People are tend to have poor concentration and cause low productivity nowadays. As a developer, our main role is to create great product in the least possible time. However, how can we improve and become the best productive self at work / on project? These are my personal experience for improving productivity and I hope it helps you too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Planning before execution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we are new, we tend to jump straight into execution of tasks without planning. This is one of the most valuable lessons that I have learnt from my senior (shout-out to Jessie) when I first joined the company. Always, always, always plan before you start coding / working on the tasks. We usually find ourselves got stuck in the middle of writing codes, and have to rewrite a huge chunk of code after realising that the logic that we structured our codes was wrong. We can start with pseudocodes, and that always helps to visualise the overall big picture for the task. Besides, it is easier to amend pseudocodes. After you have sorted out the logic, all that left is to execute and transform them into codes. If you take 80% of your time to plan them carefully, you will only need the remaining 20% to execute. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Breakdown tasks and set deadline for each of the task&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the reasons that leads to procrastination is that we are not sure where to start with when looking at a large task / project, for example building your portfolio website. What we have to do to overcome this is to break down this large task into smaller pieces, and set a firmed deadline to each of them. Take building portfolio website as an example, we can split that into sourcing assets for your website, UI Design &amp;amp; wireframing, transforming the design into UI Components, etc. Meanwhile, UI components can be further broken down into NavBar, Button, Card and so on. By creating the workflow and making a gigantic task into more manageable tasks, we tend not to procrastinate our works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Deep work&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Writing codes is a task that requires deep focus. Personally, I have to manage projects and provide technical supports sometimes other than coding. You might get a lot of interruptions, and it takes time to get back to the state of focus. The way that I deal with this is that I switch off all the notifications from email, messages and other apps for 2 hours and just focus on coding. You might be surprised on how much you could achieve by deep focusing for just 2 hours.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Environment of working is an element of boosting productivity as well, especially for those who are working from home. It is important to separate working and relaxing area. My room is the only place I can work + study + rest at home (I am currently renting a room). Therefore, unless I am forced to work at home, I would prefer to go to office so that I have a better environment for work. Besides, keep your mobile phone away, and set an alarm clock to get some rest after working a period of time. You can also play some white noise in the background and that really helps me focusing more on my tasks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. If you feel like you cannot focus, go for a short walk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do not force yourself to sit in front of desk when you are in a state where you cannot focus. There are times where we were just staring at the screen and our brain is just not functioning at all. Go for a walk, meditate or taking a shower might help to reboot your system and get back to work in a better state.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>selfimprovement</category>
    </item>
    <item>
      <title>x86 vs x64 systems for roadrunners</title>
      <author>Tharun Shiv</author>
      <pubDate>Sun, 17 Oct 2021 03:59:17 +0000</pubDate>
      <link>https://dev.to/developertharun/x86-vs-x64-systems-for-roadrunners-1nle</link>
      <guid>https://dev.to/developertharun/x86-vs-x64-systems-for-roadrunners-1nle</guid>
      <description>&lt;h2&gt;
  &lt;a href="#x86-systems"&gt;
  &lt;/a&gt;
  x86 Systems
&lt;/h2&gt;

&lt;p&gt;x86 is a generic name that is used to refer to all Intel processors that were released after the original 8086 or 8088 variant of Intel processors. The variants like 80286, 80386, 80486 so on.. were named using the convention x86, where the 80 is implicit, and x can be replaced with a number conveniently. These are backward compatible systems.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;8086 or 8088 are the various names that are used to Identify the microprocessors of Intel that were released in the 1970s.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#registers-used-in-the-early-x86-systems"&gt;
  &lt;/a&gt;
  Registers used in the early x86 systems
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A Register is a tiny memory holding electronic device that is used by the processor to either store instructions, data or address. These are fundamental units that are used when executing a computer instruction to perform a task.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;x86 systems ranged from 8-bit, 16-bit and then 32bit. What do these bits refer to? They are the highest number of bits in a single register that exists in the system.&lt;br&gt;
Maximum memory limit&lt;/p&gt;

&lt;p&gt;When we say 32-bit, the number will contain 32 digits with each of them being either 0 or 1. The number system used here is Binary System ( power 2 ). Hence, the maximum possible value here will be 2³², which is 42,94,967,295. These are the maximum number of memory locations that a 32-bit register can access. We can only attach that memory device which the register can completely make use of.&lt;/p&gt;

&lt;p&gt;Thus, a 32-bit register can cater a maximum of 4GB of RAM. This is because, if each memory location that the register points to can hold 1 byte of data, then 42,94,967,295 bytes = 4.29 G. Although this is theoretical, the actual RAM that can be used will be less than around 3.5G, because of certain parts of the register being used to store other types of data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#x64-systems"&gt;
  &lt;/a&gt;
  x64 Systems
&lt;/h2&gt;

&lt;p&gt;For the systems that evolved to use 64-bit registers, they initially named it x86–64, but since this sounds longer, the naming was changed to x64 systems. x64 is a generic name that is used to refer to all Intel processors that are 64-bit processors.&lt;/p&gt;

&lt;p&gt;The x64 systems as mentioned above contains registers that are even capable of storing 64bits in a single register.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#theoretical-maximum-memory-limit"&gt;
  &lt;/a&gt;
  Theoretical Maximum memory limit
&lt;/h3&gt;

&lt;p&gt;When we say 64-bit, the number will contain 64 digits with each of them being either 0 or 1. The number system used here will be Binary system just like the 32-bit family. Hence, the maximum possible value here will be 2⁶⁴.&lt;/p&gt;

&lt;p&gt;Thus each 64-bit register can cater a maximum of around 18 Quintillion bytes of memory. ( One Quintillion is 10¹⁸ ). Therefore it will be able to handle the usual RAM that we come across everyday effortlessly, including enterprise production servers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#processing-power-of-x64-systems"&gt;
  &lt;/a&gt;
  Processing power of x64 systems
&lt;/h3&gt;

&lt;p&gt;x64 systems come with configurations like dual core, quad core, octa core and so on, which depicts the number of processors that work simultaneously in an integrated circuit. This enables the Operating system to perform tasks parallely. While dual-core has two cores than one single core, every task that it does need not be twice as fast as a single core machine. This is because, even the operating systems and programs that is using the processors should be able to perform parallely using multi processors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#current-generation"&gt;
  &lt;/a&gt;
  Current generation
&lt;/h2&gt;

&lt;p&gt;Currently the popular architecture is to use the 64-bit system.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Roadrunners is a series that is aimed at delivering concepts as precise as possible. Here, a roadrunner is referred to a person who does things super fast &amp;amp; efficient. Are you a roadrunner?&lt;/em&gt;&lt;/p&gt;

</description>
      <category>systems</category>
      <category>computerscience</category>
      <category>architecture</category>
      <category>processor</category>
    </item>
    <item>
      <title>AWK an old-school tool today</title>
      <author>Sergio Marcial</author>
      <pubDate>Sun, 17 Oct 2021 03:56:59 +0000</pubDate>
      <link>https://dev.to/kh40sz3r0/awk-an-old-school-tool-today-4p3</link>
      <guid>https://dev.to/kh40sz3r0/awk-an-old-school-tool-today-4p3</guid>
      <description>&lt;h4&gt;
  &lt;a href="#what-is-awk"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is AWK?&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;AWK is a command-line programming language primarily oriented to text and files processing - some might call it a tool -, simple yet elegant continuous lines of code can replace multiple lines of a more robust language like java or node without losing their intention.&lt;/p&gt;

&lt;p&gt;In essence, AWK code is so simple that you can just throw it away after the execution or once your program has finished its work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'BEGIN { print "Hello World" }'&lt;/span&gt;
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But there is so much more than that; considering the constant need to process data files, once you have started with AWK, you will stop building complete programs to process CSV or log files for faster and more straightforward with a couple of instructions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $0 }'&lt;/span&gt; example.txt
This is an AWK example

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $4, $1, $5, $3, $2 }'&lt;/span&gt; example.txt
AWK This example an is

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $1, "could be your", $4, $5 }'&lt;/span&gt; example.txt
This could be your AWK example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Calculations become somewhat ridiculously simple to process&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $0 }'&lt;/span&gt; example_numbers.txt
1 2 3 testing

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $1 + $2 + $3, $4 }'&lt;/span&gt; example_numbers.txt
6 testing

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $2 * $3, $4 }'&lt;/span&gt; example_numbers.txt
6 testing

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $2 / $3, $4 }'&lt;/span&gt; example_numbers.txt
0.666667 testing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the real potential of AWK is still beyond simple operations. With the help of control statements, loops, switch functions, this command-line tool is closer to a programming language hand to hand with multiple file processing operations to make our lives even simpler&lt;/p&gt;

&lt;p&gt;For loop example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;cat &lt;/span&gt;loop.awk
&lt;span class="c"&gt;#!/bin/awk -f&lt;/span&gt;

BEGIN &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;i &lt;span class="o"&gt;=&lt;/span&gt; 1&lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; 3&lt;span class="p"&gt;;&lt;/span&gt; i++&lt;span class="o"&gt;)&lt;/span&gt;
        print i
&lt;span class="o"&gt;}&lt;/span&gt; 

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; loop.awk
1
2
3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#why-is-relevant-today"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why is relevant today?&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;In a generation of powerful and versatile programming languages, sometimes we engineers tend to overcomplicate problems, most commonly because of lack of knowledge in other options, so think about how many times have you develop a small Python, NodeJS, or Golang script to read a huge CSV file, or even build a small JVM-oriented language utility with the language of your choice and without even realizing already develop multiple lines of boilerplate (useless) code.&lt;/p&gt;

&lt;p&gt;Python script to read a file line by line and print result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Line {}: {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same but with &lt;strong&gt;AWK&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print "Line ", $1, ":", $2 }'&lt;/span&gt; example.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you could create more examples to explain the difference between creating scripts with AWK and with any other language, but also it is pretty performant in comparison with other&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q87bYCIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf9bj815v22dp4l35dm6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q87bYCIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf9bj815v22dp4l35dm6.png" alt="AWK and its variations' performance measurements"&gt;&lt;/a&gt;&lt;br&gt;
AWK and its variations' performance measurements &lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;/p&gt;

&lt;p&gt;As you can see, this old-school language (&lt;strong&gt;AWK was created initially in 1977&lt;/strong&gt;) could outshine some of these more robust and modern languages in some tasks, and learning it might give you a new tool you didn't even know you want to have.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#first-steps-in-awk"&gt;
  &lt;/a&gt;
  &lt;strong&gt;First steps in AWK&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Let's start by mentioning that AWK is in every Linux and macOS distribution (how cool is that?); for Windows, you have to install it (but I am pretty sure it cannot be that hard, right?).&lt;/p&gt;

&lt;p&gt;How to know what version of AWK you currently have installed?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-version&lt;/span&gt;
&lt;span class="nb"&gt;awk &lt;/span&gt;version 20200816
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now let's start with the basics; AWK commands' structure is pretty simple; however, there are some tricks to it, especially if you want to use it for actual text processing, the basic command could be described in this way &lt;code&gt;&amp;lt;condition&amp;gt; { action }&lt;/code&gt; where &lt;code&gt;condition&lt;/code&gt; is optional as we saw in a previous example &lt;code&gt;awk '{ print $0 }' example.txt&lt;/code&gt; while the &lt;code&gt;action&lt;/code&gt; is the operation you need to execute.&lt;/p&gt;

&lt;p&gt;For the conditions, there are only two types of conditions, &lt;code&gt;BEGIN&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt;, and they also can have actions, for example, consider &lt;code&gt;BEGIN&lt;/code&gt; as the entry instruction where you can enable, disable or configure different variables within the script run execution, for example, if you want to change the delimiter character from the default space (&lt;code&gt;' '&lt;/code&gt;) to a semicolon (&lt;code&gt;;&lt;/code&gt;) you can add something like at the beginning of the script &lt;code&gt;BEGIN { FS= ';'}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;AWK provides 8 built-in variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;FILENAME&lt;/strong&gt; - Name of the current input file&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;FS&lt;/strong&gt; - Input field separator variable&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;FNR&lt;/strong&gt; - Number of Records relative to the current input file&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;NF&lt;/strong&gt; - Number of Fields in a record&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;NR&lt;/strong&gt; - Number of Records Variable&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;OFS&lt;/strong&gt; - Output Field Separator Variable&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ORS&lt;/strong&gt; - Output Record Separator Variable&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;RS&lt;/strong&gt; - Record Separator variable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;END&lt;/code&gt;, on the other hand, will always be at the closing statement and can be used to execute any finishing commands after the main body has been completed, for example, printing final variables' values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;BEGIN &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;i &lt;span class="o"&gt;=&lt;/span&gt; 1&lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; 3&lt;span class="p"&gt;;&lt;/span&gt; i++&lt;span class="o"&gt;)&lt;/span&gt;
        s +&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; 
&lt;span class="o"&gt;}&lt;/span&gt;
END &lt;span class="o"&gt;{&lt;/span&gt; print s &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Something else worth mentioning is the fact that AWK supports the creation of custom functions when you need to do more complex operations and the script starts to become hard to manage &lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print "The square root of", $1, "is", sqrt($1) }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;AWK also provides the functionality to create Arrays (and operations built-in to manage them) and multiple other data types that we won't be discussing in this post because it might take a couple of hundreds of lines. Still, you can find a good description of them &lt;a href="https://www.gnu.org/software/gawk/manual/html_node/General-Data-Types.html"&gt;here&lt;/a&gt;, so please take a look if you are curious to learn more.&lt;/p&gt;

&lt;p&gt;Example of array operations in AWK:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Array addition&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;BEGIN &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;i &lt;span class="o"&gt;=&lt;/span&gt; 1&lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; 3&lt;span class="p"&gt;;&lt;/span&gt; i++&lt;span class="o"&gt;)&lt;/span&gt;
        array[&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="o"&gt;}&lt;/span&gt;
END &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;position &lt;span class="k"&gt;in &lt;/span&gt;array&lt;span class="o"&gt;)&lt;/span&gt; 
        print position &lt;span class="s2"&gt;": "&lt;/span&gt; array[position]
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Array deleting&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
BEGIN &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;i &lt;span class="o"&gt;=&lt;/span&gt; 1&lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; 3&lt;span class="p"&gt;;&lt;/span&gt; i++&lt;span class="o"&gt;)&lt;/span&gt;
        array[&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="o"&gt;}&lt;/span&gt;
END &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;position &lt;span class="k"&gt;in &lt;/span&gt;array&lt;span class="o"&gt;)&lt;/span&gt; 
        delete array[position]
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in case you are thinking how powerful this is and like me trying to take it further to create small AWK powered "apps" to do the monotonous tasks while wondering how can you verify if what you are coding is valid, you can execute any number of unit tests for shell scripts, and therefore, AWK scripts using &lt;a href="https://github.com/kward/shunit2"&gt;shunit2&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#data-processing-with-awk"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Data processing with AWK&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;As mentioned a couple of times during this post, AWK's main objective is to process data, which could mean data in files, lines provided command output, or any other form of input data, but let's start simple.&lt;/p&gt;

&lt;p&gt;Opening a file and reading the data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;cat &lt;/span&gt;example.txt
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; This is an AWK example

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $0 }'&lt;/span&gt; example.txt
This is an AWK example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the previous example AWK, we can notice some things like how AWK uses indexes to split the data provided within the file; these indexes are created using the delimiter, which by default is the blank space (check the example in this post on how to define a new delimiter)&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;$0&lt;/code&gt; will print the whole line, while using the sequence generated based on the number of columns will give you control of the data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;cat &lt;/span&gt;example.txt
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; This is an AWK example

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $4, $1, $5, $3, $2 }'&lt;/span&gt; example.txt
AWK This example an is
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also straightforwardly concatenate strings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;cat &lt;/span&gt;example.txt
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; This is an AWK example

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $1, "could be your", $4, $5 }'&lt;/span&gt; example.txt
This could be your AWK example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Searching a value&lt;/p&gt;

&lt;p&gt;AWK can search information within the provided input, and one way is using regexp.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;cat &lt;/span&gt;example.txt
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; This is an AWK example

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/This/ { print $0 }'&lt;/span&gt;
This is an AWK example

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/test/ { print $0 }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another searching mechanism is using control operations like &lt;code&gt;if&lt;/code&gt;, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;% &lt;span class="nb"&gt;cat &lt;/span&gt;example.txt
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; This is an AWK example

% &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'if ($1=="This"){ print $0 }'&lt;/span&gt;
This is an AWK example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#awk-gawk-nawk-or-mawk"&gt;
  &lt;/a&gt;
  &lt;strong&gt;AWK, GAWK, NAWK or MAWK&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Finally as usual in any programming language, variants tend to appear with time, and AWK was not the exception; what could be considered the most important (according to me) are the next.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;GAWK&lt;/strong&gt; - GNU AWK is available from the GNU project's &lt;a href="http://savannah.gnu.org/projects/gawk/"&gt;open source&lt;/a&gt; and is currently maintained.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;NAWK&lt;/strong&gt; - New AWK Computing, a news release on the AWK project &lt;sup id="fnref3"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MAWK&lt;/strong&gt; - Fast AWK implementation which it's codebase is based on a byte-code interpreter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, there are other multiple variants out there, and you won't have any trouble finding them.&lt;/p&gt;

&lt;p&gt;As you can see, AWK is an excellent flexible and robust command-line tool, which takes a while to ramp up to, but once you get the basics is pretty simple to use and explode its potential.&lt;/p&gt;

&lt;p&gt;In the next post, I will go deeper into different and more complex scenarios and examples; let me know if you have any questions or comments or want more specific related content.&lt;/p&gt;







&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://brenocon.com/blog/2009/09/dont-mawk-awk-the-fastest-and-most-elegant-big-data-munging-language/"&gt;https://brenocon.com/blog/2009/09/dont-mawk-awk-the-fastest-and-most-elegant-big-data-munging-language/&lt;/a&gt; &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;&lt;a href="https://www.gnu.org/software/gawk/manual/html_node/Function-Calls.html"&gt;https://www.gnu.org/software/gawk/manual/html_node/Function-Calls.html&lt;/a&gt; &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;Robbins, Arnold (March 2014). &lt;a href="http://www.skeeve.com/gnu-awk-and-me-2014.pdf"&gt;"The GNU Project and Me: 27 Years with GNU AWK"&lt;/a&gt; (PDF). skeeve.com. Retrieved October 4, 2014. &lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>beginners</category>
      <category>linux</category>
      <category>tooling</category>
      <category>programming</category>
    </item>
    <item>
      <title>Advanced Front End Developer , Interview Essentials - Part 2</title>
      <author>Goutham JM</author>
      <pubDate>Sun, 17 Oct 2021 03:31:00 +0000</pubDate>
      <link>https://dev.to/gouthamjm/advanced-front-end-developer-interview-essentials-part-2-41gm</link>
      <guid>https://dev.to/gouthamjm/advanced-front-end-developer-interview-essentials-part-2-41gm</guid>
      <description>&lt;p&gt;This post is a continuation of &lt;a href="https://dev.to/gouthamjm/advanced-fe-dev-interview-essentials-1-45ho"&gt;Advanced Front End Developer , Interview Essentials - Part 1&lt;/a&gt; ,if you haven't read it I strongly recommend you to go through the post where I have explained the CRP in detail&lt;/p&gt;

&lt;p&gt;Optimizing the Critical Rendering Path is very essential for performance of a site , and always keep in mind the below rule&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You cannot optimize something that you cannot measure&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1dom-optimization"&gt;
  &lt;/a&gt;
  1.DOM Optimization
&lt;/h2&gt;

&lt;p&gt;You should stream HTML as fast as you can ,we can achieve that by these step's minification,compression and caching the HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In which stage of CRP, Do you think will the page be rendered ?&lt;/strong&gt; &lt;br&gt;
It will be rendered when the render tree is constructed ,i.e. just after CSSOM has been constructed, and it will be the render blocking step , so it becomes crucial to optimize CSSOM&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2cssom-optimization"&gt;
  &lt;/a&gt;
  2.CSSOM Optimization
&lt;/h2&gt;

&lt;p&gt;As CSS is a render blocking resource,always keep your CSS lean, deliver it as quickly as possible, and we can use media types and queries to unblock rendering&lt;/p&gt;

&lt;p&gt;If we have some CSS styles that are only used under certain conditions, for example, when the page is being printed or being projected onto a large monitor,but you are viewing in a mobile ,then we can block rendering on the resources that are not used.&lt;/p&gt;

&lt;p&gt;CSS &lt;code&gt;media types&lt;/code&gt; and &lt;code&gt;media queries&lt;/code&gt; allow us to address these use cases,in the below example if we maintain a separate style sheet for different use cases , &lt;em&gt;Example&lt;/em&gt; : we may need to apply certain styling for print or in responsive site we can mention a specific width during which case only the style sheet must be imported&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"print.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"print"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"other.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 40em)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When declaring your style sheet assets, pay close attention to the media type and queries; they greatly impact critical rendering path performance&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;    &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;    &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"portrait.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"orientation:portrait"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"print.css"&lt;/span&gt;    &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"print"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The first declaration is render blocking and matches in all conditions.&lt;/li&gt;
&lt;li&gt;The second declaration is also render blocking: "all" is the default type, so if you don’t specify any type, it’s implicitly set to "all". Hence, the first and second declarations are actually equivalent.&lt;/li&gt;
&lt;li&gt;The third declaration has a dynamic media query, which is evaluated when the page is loaded. Depending on the orientation of the device while the page is loading, portrait.css may or may not be render blocking.&lt;/li&gt;
&lt;li&gt;The last declaration is only applied when the page is being printed, so it is not render blocking when the page is first loaded in the browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#avoid-css-imports"&gt;
  &lt;/a&gt;
  Avoid CSS imports
&lt;/h3&gt;

&lt;p&gt;The CSS import (&lt;code&gt;@import&lt;/code&gt;) directive enables one stylesheet to import rules from another stylesheet file. However, avoid these directives because they introduce additional roundtrips into the critical path: the imported CSS resources are discovered only after the CSS stylesheet with the &lt;code&gt;@import&lt;/code&gt; rule itself is received and parsed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#put-css-in-the-document-head"&gt;
  &lt;/a&gt;
  Put CSS in the document head
&lt;/h3&gt;

&lt;p&gt;Specify all CSS resources as early as possible within the HTML document so that the browser can discover the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags and dispatch the request for the CSS as soon as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-js-optimization"&gt;
  &lt;/a&gt;
  3. JS Optimization
&lt;/h2&gt;

&lt;p&gt;JavaScript allows us to modify just about every aspect of the page: content, styling, and its response to user interaction . JavaScript can also block DOM construction and delay when the page is rendered. To deliver optimal performance, make your JavaScript async and eliminate any unnecessary JavaScript from the critical rendering path&lt;/p&gt;

&lt;p&gt;By default, JavaScript execution is "parser blocking": when the browser encounters a script in the document it must pause DOM construction, hand over control to the JavaScript runtime, and let the script execute before proceeding with DOM construction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's take the below example where there is a style sheet as well as script that modify the  &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag , so will the text be rendered black or red , the answer to this lies in the order of the execution &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Page requests for HTML, and it will start building the DOM&lt;/li&gt;
&lt;li&gt;Then it will encounter style and request for CSS resources ,during this time CSS doesn't know whether the script will modify the CSS, so it will wait for  CSSOM to be constructed&lt;/li&gt;
&lt;li&gt;After CSSOM is constructed, then JS will be executed and will build the Render Tree&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CSS blocks script as well as rendering page, so it becomes crucial  to optimize the CSS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3pEZRCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofq4xmg7o9zfdbyjf6n1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3pEZRCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofq4xmg7o9zfdbyjf6n1.png" alt="JS Optimization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution :&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;1.All JS code might not modify the DOM in such cases one way we can optimize JS it to load it after DOM has been loaded ,like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      function loadFunction() &lt;span class="si"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Window is loaded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="si"&gt;}&lt;/span&gt;
      window.onload = loadFunction();
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.Another way to solve this is to add &lt;code&gt;async&lt;/code&gt; attribute to the  &lt;code&gt;script&lt;/code&gt; tag , it does two things - it doesn't block DOM construction, and CSSOM construction , so basically what it does is it will allow JS not to block CRP &lt;br&gt;
3.There is also a &lt;code&gt;defer&lt;/code&gt; attribute that you can add to the script tag that tells the parser that the script should wait to execute until after the document is loaded&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary:
&lt;/h2&gt;

&lt;p&gt;So let's see what all the options we have to optimize the CRP&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Minification,Compression and Caching - HTML,CSS and JS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduce critical resources  - CSS media query ,avoid imports and use critical inline CSS , JS - with async or defer attribute&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shorten CRP length , i.e. reduce the number of round trips for fetching resources , there are a ton of ways to optimize it based on different communication protocol,You can refer it &lt;a href="https://hpbn.co/"&gt;here&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimize the order in which the remaining critical resources are loaded: download all critical assets as early as possible to shorten the critical path length.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are other methods of optimizing a site ,in my next post I will discuss on how to achieve Fast Load time for your site&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;References:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path"&gt;https://developers.google.com/web/fundamentals/performance/critical-rendering-path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://classroom.udacity.com/courses/ud884"&gt;https://classroom.udacity.com/courses/ud884&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Difference between Methods and functions in Javascript </title>
      <author>Amran AL Ketara</author>
      <pubDate>Sun, 17 Oct 2021 03:30:05 +0000</pubDate>
      <link>https://dev.to/amk/difference-between-methods-and-functions-in-javascript-53f5</link>
      <guid>https://dev.to/amk/difference-between-methods-and-functions-in-javascript-53f5</guid>
      <description>&lt;p&gt;In this article I'm explaining what is the difference between functions and methods in Javascript.&lt;br&gt;
&lt;a href="https://amkblog.com/javascript/methods-and-functions/"&gt;https://amkblog.com/javascript/methods-and-functions/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Creating a personal image gallery with VueJS, Auth0 and Cloudinary.</title>
      <author>TemitopeAsama</author>
      <pubDate>Sun, 17 Oct 2021 03:08:43 +0000</pubDate>
      <link>https://dev.to/hackmamba/creating-a-personal-image-gallery-with-vuejs-auth0-and-cloudinary-56pf</link>
      <guid>https://dev.to/hackmamba/creating-a-personal-image-gallery-with-vuejs-auth0-and-cloudinary-56pf</guid>
      <description>&lt;p&gt;In this article, you will be learning how to create a personal image gallery using VueJS, Auth0 and Cloudinary API. With this application, users will be able to sign in using the authorization and authentication features of Auth0, create a profile and upload and download images with the help of Cloudinary.&lt;/p&gt;

&lt;p&gt;You might be looking for the complete code. I've created a &lt;a href="https://github.com/TemitopeAsama/Hackmamba-Repository/tree/master/ackmamba_jamstack_hackathon_video_collection--master"&gt;GitHub repo&lt;/a&gt; where you can find the complete code for the app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-auth0"&gt;
  &lt;/a&gt;
  Setting up Auth0
&lt;/h3&gt;

&lt;p&gt;Auth0 is a flexible, drop-in solution to add authentication and authorization services to your applications. You are able to avoid the cost, time, and risk that come with building your own solution to authenticate and authorize users.&lt;/p&gt;

&lt;p&gt;To set up Auth0, the first thing you will be needing is an Application in Auth0, so head on over to their website and &lt;a href="https://auth0.com/"&gt;create an account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After setting up your account, the next thing you want to do is create your first application. You can do that by clicking the applications item on the menu on the left side and click “Create Application”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JYh6CL6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jgqq0qsk9ss4bm4us5d9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JYh6CL6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jgqq0qsk9ss4bm4us5d9.png" alt="Image1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the image above, we see what that dropdown looks like;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first arrow points to the name box; here you can enter the name for your app and in this example, we’ll be calling it &lt;strong&gt;“My App”&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;The second arrow points to the application type options available, and for this project we’ll be using the &lt;strong&gt;“Single Page Web Applications”&lt;/strong&gt; option, because just like the description says, we’ll be building a JavaScript front-end app that uses an API. &lt;/li&gt;
&lt;li&gt;When that’s done, click &lt;strong&gt;“Create”&lt;/strong&gt;. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This sets up the application with default configuration for a Single Page Web Application. This configuration can be tweaked or changed later if you need or want to.&lt;/p&gt;

&lt;p&gt;In the settings, add &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to the Allowed Callback URLs, Allowed Logout URLs, Allowed Web Origins and Allowed Origins (CORS) fields. This is due to the fact that the sample client will be running on &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; you'll need to add the appropriate values if you're running on a server or a different port or on a host that isn't localhost&lt;/p&gt;

&lt;p&gt;The rest of the defaults can be left as is.&lt;/p&gt;

&lt;p&gt;From the image above, we see what that dropdown looks like;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first arrow points to the name box; here you can enter the name for your app and in this example, we’ll be calling it “My App”. &lt;/li&gt;
&lt;li&gt;The second arrow points to the application type options available, and for this project we’ll be using the “Single Page Web Applications” option, because just like the description says, we’ll be building a JavaScript front-end app that uses an API. &lt;/li&gt;
&lt;li&gt;When that’s done, click “Create”. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This sets up the application with default configuration for a Single Page Web Application. This configuration can be tweaked or changed later if you need or want to.&lt;/p&gt;

&lt;p&gt;In the settings, add &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to the Allowed Callback URLs, Allowed Logout URLs, Allowed Web Origins and Allowed Origins (CORS) fields. This is due to the fact that the sample client will be running on &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; you'll need to add the appropriate values if you're running on a server or a different port or on a host that isn't localhost&lt;/p&gt;

&lt;p&gt;The rest of the defaults can be left as is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-cloudinary"&gt;
  &lt;/a&gt;
  Setting up Cloudinary
&lt;/h3&gt;

&lt;p&gt;Cloudinary is a media management platform for web and mobile developers. Cloudinary is an end-to-end image- and video-management solution for websites and mobile apps, covering everything from image and video uploads, storage, manipulations, optimizations to delivery.&lt;/p&gt;

&lt;p&gt;First, just like we did with Auth0, we have to &lt;a href="https://cloudinary.com/"&gt;create an account on Cloudinary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cr8fGcZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylkbvjxnahlhi6h7308v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cr8fGcZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylkbvjxnahlhi6h7308v.png" alt="Image2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When creating an account on Cloudinary, it’s important to choose the option that best describes your use for it. Here, we’ll be making use of their API to manipulate media on our project, so it’s only appropriate that we select the option “Programmable Media for image and video API”. When that’s over and done, you can then proceed to creating your account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rj_whZyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yizge1vuy0k3r8jahwr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rj_whZyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yizge1vuy0k3r8jahwr.png" alt="Image11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When your account is created and fully functional, you should see your dashboard, just like the one above.&lt;/p&gt;

&lt;p&gt;Log into your Cloudinary account and set up an upload preset that will be handling the images being uploaded. Before setting up an upload preset, you’ll first have to create a media library folder that will hold the images being uploaded. You can do this using the following steps;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the media library.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T5KpuFyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrd7ym522xk703yfjpas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T5KpuFyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrd7ym522xk703yfjpas.png" alt="Image3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new folder. we’ll be calling our folder “My images”.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WHCJ97K9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7jjsuj3tgw2v7qglyb1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WHCJ97K9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7jjsuj3tgw2v7qglyb1.png" alt="Image4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, Cloudinary gives developers a tool that allows us integrate it in VueJS applications, called the VueJS SDK. The Cloudinary Vue.js SDK serves as a layer on top of Cloudinary's JavaScript (Cloudinary-core) library.&lt;/p&gt;

&lt;p&gt;We can install the SDK by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install cloudinary-vue

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can proceed with creating the upload preset.&lt;br&gt;
Go to the Settings option and click Upload (tab)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlFQRD2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7klexvx7lmneh3ylk0zs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlFQRD2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7klexvx7lmneh3ylk0zs.png" alt="Image5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll down to and click on add upload preset.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hMqDABg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrqs0mnnnohww2goqp6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hMqDABg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrqs0mnnnohww2goqp6p.png" alt="Image6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set the Upload preset name, select the Unsigned signing mode and input the name of the folder that you created above. In this case, &lt;strong&gt;“my images”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSaI935P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v6dm01beucnq10qq4zt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSaI935P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v6dm01beucnq10qq4zt.png" alt="Image7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set the Upload preset name, select the Unsigned signing mode and input the name of the folder that you created above. In this case, “my images”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jO021Cnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CD896DC971CCB47C6D3C431710AC6C2AE63CC9D657F228DAF13FC2AF20E55F45_1633502628689_ab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jO021Cnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CD896DC971CCB47C6D3C431710AC6C2AE63CC9D657F228DAF13FC2AF20E55F45_1633502628689_ab.png" alt="img8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s important to note that &lt;strong&gt;Unsigned upload presets are used when implementing upload capabilities from client-side apps i.e. allowing uploads straight from the browser&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Go to Upload control and switch the return delete token on if you’d like to be able to delete uploaded images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BWmxeS9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dzz50utgbr2cno317vs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BWmxeS9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dzz50utgbr2cno317vs.png" alt="Image9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can only use the delete token to delete an uploaded file within a span of ten minutes after uploading it.&lt;/p&gt;

&lt;p&gt;Set up the rest of the settings to your preferences and click on 'save' to save this new upload preset.&lt;br&gt;
Back on the settings page and upload tab the new upload preset will be listed amongst the existing presets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BweHGbta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c10nfd3aot68xkdenlm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BweHGbta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c10nfd3aot68xkdenlm.png" alt="Image10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: You can only use the delete token to delete an uploaded file within a span of ten minutes after uploading it.&lt;/p&gt;

&lt;p&gt;Set up the rest of the settings to your preferences and click on 'save' to save this new upload preset.&lt;br&gt;
Back on the settings page and upload tab the new upload preset will be listed amongst the existing presets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mSpf_3LS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YuIjlk3S--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t4cp1pbkhac8gxrwjefx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mSpf_3LS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YuIjlk3S--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t4cp1pbkhac8gxrwjefx.gif" alt="Credit: James Sinkala"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-vue-component"&gt;
  &lt;/a&gt;
  The Vue Component
&lt;/h3&gt;

&lt;p&gt;So to create the Vue Component that will allow users upload images to Cloudinary through the created upload preset.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-template"&gt;
  &lt;/a&gt;
  The Template
&lt;/h2&gt;

&lt;p&gt;The template below contains the file upload button that will trigger the uploader modal. We can put in a &lt;code&gt;Main.vue&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;template&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;Header/&amp;gt;
  &amp;lt;v-card&amp;gt;
    &amp;lt;div class="helldo"&amp;gt;
      &amp;lt;input type="file" @change="onFileSelected"&amp;gt; 
      &amp;lt;v-btn v-if="displayUploadBtn" outlined @click="uploadFile"&amp;gt; Upload &amp;lt;/v-btn &amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;v-tabs
      color="deep-purple accent-4"
      right
    &amp;gt;
      &amp;lt;v-tab&amp;gt;Landscape&amp;lt;/v-tab&amp;gt;
      &amp;lt;v-tab&amp;gt;City&amp;lt;/v-tab&amp;gt;
      &amp;lt;v-tab&amp;gt;Abstract&amp;lt;/v-tab&amp;gt;
      &amp;lt;v-tab-item
        v-for="n in 3"
        :key="n"
      &amp;gt;
        &amp;lt;v-container fluid&amp;gt;
          &amp;lt;v-row&amp;gt;
            &amp;lt;v-col
              v-for="i in 6"
              :key="i"
              cols="12"
              md="4"
            &amp;gt;
              &amp;lt;v-img
                :src="`https://picsum.photos/500/300?image=${i * n * 5 + 10}`"
                :lazy-src="`https://picsum.photos/10/6?image=${i * n * 5 + 10}`"
                aspect-ratio="1"
              &amp;gt;&amp;lt;/v-img&amp;gt;
            &amp;lt;/v-col&amp;gt;
          &amp;lt;/v-row&amp;gt;
        &amp;lt;/v-container&amp;gt;
      &amp;lt;/v-tab-item&amp;gt;
    &amp;lt;/v-tabs&amp;gt;
  &amp;lt;/v-card&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;:src&lt;/strong&gt; attributes on line 35 and 36 serves to generate random images from &lt;a href="https://picsum.photos/500/300?image="&gt;Picsum&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-axios"&gt;
  &lt;/a&gt;
  Installing Axios
&lt;/h3&gt;

&lt;p&gt;To make promise-based HTTP requests, I’d be installing &lt;a href="https://www.npmjs.com/package/axios"&gt;Axios&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#install axios
npm i axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installing Axios, I can then use it to make request to the Cloudinary API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
import axios from "axios"
import Header from '../Header/Main.vue'

export default {
    name: "home",
    data: () =&amp;gt; ({
    displayUploadBtn: false,
    selectedFile: null,
    CLOUDINARY_URL: "https://api.cloudinary.com/v1_1/yungscript/upload",
    CLOUDINARY_PRESET: "hk7esqdc" //your Cloudinary preset
}),

components: {
  Header
  },
    methods: {
    onFileSelected(event) {
    this.selectedFile = event.target.files[0]
    this.displayUploadBtn = true
},

uploadFile() {

let file = this.selectedFile
let formData = new FormData()

console.log(file);

formData.append("file", file)
formData.append("upload_preset", this.CLOUDINARY_PRESET)

axios({
  url: this.CLOUDINARY_URL,
  method: "POST",
  headers: {
  "Content-Type": "application/x-www-form-urlencoded"
},
data: formData
})
.then((res) =&amp;gt; {
console.log(res);
})
.catch((err) =&amp;gt; {
console.log(err);
})
}
}
};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the CLOUDINARY_URL is the URL that contains the images uploaded by the user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrating-auth0"&gt;
  &lt;/a&gt;
  Integrating Auth0
&lt;/h3&gt;

&lt;p&gt;From the account you created above, you’d be given a domain name and a client ID. Your domain is the base URL that you will use to access the Auth0 APIs and the URL where you'll redirect users to log in, while the client ID is an alphanumeric string, and it's the unique identifier for your application.  You cannot modify the Client ID. You will use the Client ID to identify the Auth0 Application to which the Auth0 SPA SDK needs to connect.&lt;/p&gt;

&lt;p&gt;Now, you’ll create an &lt;strong&gt;auth_config.json&lt;/strong&gt; file and add both your client ID and Domain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
{
    "domain": "YOUR_AUTH0_DOMAIN",
  "clientId": "YOUR_AUTH0_CLIENT_ID"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, Execute the following command to install the Auth0 SPA SDK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @auth0/auth0-spa-js

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create an auth directory within the src directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir src/auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create an index.js file within the src/auth directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch src/auth/index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Populate index.js with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/**
 *  External Modules
 */

import Vue from 'vue';
import createAuth0Client from '@auth0/auth0-spa-js';

/**
 *  Vue.js Instance Definition
 */

let instance;

export const getInstance = () =&amp;gt; instance;

/**
 *  Vue.js Instance Initialization
 */

export const useAuth0 = ({
  onRedirectCallback = () =&amp;gt;
    window.history.replaceState({}, document.title, window.location.pathname),
  redirectUri = window.location.origin,
  ...pluginOptions
}) =&amp;gt; {
  if (instance) return instance;

  instance = new Vue({
    data() {
      return {
        auth0Client: null,
        isLoading: true,
        isAuthenticated: false,
        user: {},
        error: null,
      };
    },
    methods: {

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to handle the callback when logging in using a redirect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/** Handles the callback when logging in using a redirect */
      async handleRedirectCallback() {
        this.isLoading = true;
        try {
          await this.auth0Client.handleRedirectCallback();
          this.user = await this.auth0Client.getUser();
          this.isAuthenticated = true;
        } catch (error) {
          this.error = error;
        } finally {
          this.isLoading = false;
        }
      },

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In cases where the user forget the password or token and might have to retrieve or renew it, we can then use the following to allow for token retrieval and redirect the user back to the login page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/** Authenticates the user using the redirect method */
      loginWithRedirect(options) {
        return this.auth0Client.loginWithRedirect(options);
      },
/** Returns the access token. If the token is invalid or missing, a new one is retrieved */
      logout(options) {
        return this.auth0Client.logout(options);
      },
/** Returns the access token. If the token is invalid or missing, a new one is retrieved */
      getTokenSilently(o) {
        return this.auth0Client.getTokenSilently(o);
      },
    },

/** Use this lifecycle method to instantiate the SDK client */
    async created() {
      this.auth0Client = await createAuth0Client({
        ...pluginOptions,
        domain: pluginOptions.domain,
        client_id: pluginOptions.clientId,
        audience: pluginOptions.audience,
        redirect_uri: redirectUri,
      });

      try {
// If the user is returning to the app after authentication..
        if (
          window.location.search.includes('code=') &amp;amp;&amp;amp;
          window.location.search.includes('state=')
        ) {
          const { appState } = await this.auth0Client.handleRedirectCallback();

 // Notify subscribers that the redirect callback has happened, passing the appState
                    // (useful for retrieving any pre-authentication state)
          onRedirectCallback(appState);
        }
      } catch (error) {
        this.error = error;
      } finally {
 // Initialize our internal authentication state
        this.isAuthenticated = await this.auth0Client.isAuthenticated();
        this.user = await this.auth0Client.getUser();
        this.isLoading = false;
      }
    },
  });

  return instance;
};

/**
 *  Vue.js Plugin Definition
 */
// Create a simple Vue plugin to expose the wrapper object throughout the application
export const Auth0Plugin = {
  install(Vue, options) {
    Vue.prototype.$auth = useAuth0(options);
  },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#routing"&gt;
  &lt;/a&gt;
  Routing
&lt;/h3&gt;

&lt;p&gt;The following block of code serves to tell the browser what page to load. From the four components created, I can import and reference them as below;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import Vue from 'vue'
import VueRouter from 'vue-router'
// import Home from '../views/Home.vue'
// import Profile from "../components/Profile/Profile.vue";
const Home = () =&amp;gt; import(/* webpackChunkName: "about" */ '../components/Home/Main.vue') //imports the Home Component
const About = () =&amp;gt; import(/* webpackChunkName: "about" */ '../components/About/Main.vue') //imports the About Component
const Profile = () =&amp;gt; import(/* webpackChunkName: "about" */ '../components/Profile/Main.vue') //imports the Profile Component
const Media = () =&amp;gt; import(/* webpackChunkName: "about" */ '../components/Media/Main.vue') //imports the Media component
import { authGuard } from "../auth/authGuard";

Vue.use(VueRouter)
const routes = [
  {
    path: '/',
    name: 'Home',
    // redirect: "/home",
    component: Home
  },
  {
    path: '/about',
    name: 'About', //go to About Page
    component: About
  },
  {
    path: "/profile",
    name: "Profile", // go to Profile Page
    component: Profile,
    beforeEnter: authGuard //before user goes to profile page, it checks if user is logged in. If not, it redirects the user to the login page.
  },
  {
    path: "/media",
    name: "Media", // go to Profile Page
    component: Media
  }
]
const router = new VueRouter({
  mode: 'history',
  base: process.env.BASE_URL,
  routes
})
export default router

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#plugins"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h3&gt;

&lt;p&gt;I added the Vuetify package to style the project but feel free to use what you like. Bootstrap works just fine as well. Install Vuetify in your Vue app after creating your Vue project using Vue CLI like this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vue add vuetify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import Vue into your project as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import Vue from 'vue';
import Vuetify from 'vuetify/lib/framework';
Vue.use(Vuetify);
export default new Vuetify({
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila, you’ve successfully integrated Cloudinary and Auth0 into your VueJS project.&lt;/p&gt;

&lt;p&gt;Content created for the &lt;a href="https://content.hackmamba.io/"&gt;Hackmamba&lt;/a&gt; Jamstack Content Hackathon with &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt; and &lt;a href="https://cloudinary.com/"&gt;Cloudinary&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>cloudinary</category>
    </item>
    <item>
      <title>How to setup Postcss, Tailwind, React, and Webpack from Scratch</title>
      <author>ynwd</author>
      <pubDate>Sun, 17 Oct 2021 02:03:53 +0000</pubDate>
      <link>https://dev.to/ynwd/how-to-setup-postcss-tailwind-react-and-webpack-from-scratch-2o6c</link>
      <guid>https://dev.to/ynwd/how-to-setup-postcss-tailwind-react-and-webpack-from-scratch-2o6c</guid>
      <description>&lt;p&gt;I want to create a shared react component for a monorepo with tailwindcss. However, while reading the document, it was found that tailwind uses craco. Meanwhile I want to use webpack. And it definitely doesn't suit my needs. So I searched everywhere, to find setting everything up from scratch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── babel.config.js
├── package.json
├── postcss.config.js
├── src
│   ├── App.js
│   ├── index.css
│   ├── index.html
│   └── index.js
├── tailwind.config.js
└── webpack.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following are some of my notes. I hope this helps people with similar needs to mine.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ynwd/how-to-integrate-postcss-and-webpack-ed5"&gt;How to integrate postcss and webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ynwd/how-to-integrate-tailwind-and-webpack-525d"&gt;How to integrate tailwind and webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ynwd/how-to-integrate-tailwind-react-and-webpack-2gdf"&gt;How to integrate tailwind, react and webpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webpack</category>
      <category>react</category>
      <category>tailwindcss</category>
      <category>postcss</category>
    </item>
    <item>
      <title>How to Create a Bot that Automates Website Clicks Without Coding</title>
      <author>Stefan Smiljkovic</author>
      <pubDate>Sun, 17 Oct 2021 02:00:46 +0000</pubDate>
      <link>https://dev.to/shtefcs/how-to-create-a-bot-that-automates-website-clicks-without-coding-11dk</link>
      <guid>https://dev.to/shtefcs/how-to-create-a-bot-that-automates-website-clicks-without-coding-11dk</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MW2jUBVJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/0%2ApyTXt1hbixBWi1xi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MW2jUBVJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/0%2ApyTXt1hbixBWi1xi.png" alt="how to make bot that click"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://automatio.co/blog/how-to-automate-website-clicks/"&gt;Automatio Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you are looking for a way to automate browser website clicks, you came to the right place.&lt;/p&gt;

&lt;p&gt;In this article, you will learn how to build a bot that will click on websites, links, buttons, or anything clickable, without the need for technical knowledge or writing a single line of code.&lt;/p&gt;

&lt;p&gt;Below are examples of what click actions you could automate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Automate clicking on buttons&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automate filling forms&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automate clicking on links&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating bot website traffic/visitors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automate clicking on follow/like button on social media&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automate collecting points on rewards websites&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And many more&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let’s get started
&lt;/h2&gt;

&lt;p&gt;To create our click bot, we are going to use our tool &lt;a href="https://automatio.co/"&gt;Automatio&lt;/a&gt;. It’s no-code web automation and data extraction tool, that gives you the ability to create all kinds of simple or complex bots without writing any code.&lt;/p&gt;

&lt;p&gt;If you are already registered on Automatio and have the Chrome Extension installed, then you can proceed, if not, click here to &lt;a href="https://app.automatio.co/register"&gt;sign up&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bot-that-clicks-on-vote-buttons-voting-bot"&gt;
  &lt;/a&gt;
  A bot that clicks on vote buttons (voting bot)
&lt;/h2&gt;

&lt;p&gt;In this scenario, we are going to create a simple bot that goes on a specific website, which in our example is basically a list of popular links/articles, and  clicks on the vote-up buttons .&lt;/p&gt;

&lt;p&gt;Open the Automatio Chrome Extension and select the  Click action  from the extension sidebar. Check the screenshot below 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_ek9okH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/0%2AF7U9l8a-lqA3IqyW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_ek9okH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/0%2AF7U9l8a-lqA3IqyW.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have the Click action selected, click on the three dots dropdown to reveal more options and select  Repeat click . By default, the Click action can click only on a single element. With the Repeat click option, we can select multiple elements and Automatio will execute those clicks in sequence. In this case, clicking on the upvotes buttons one by one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YCf3UEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2Ad-Dx6zSF6YLJve7L.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YCf3UEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2Ad-Dx6zSF6YLJve7L.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to select the elements which we want to be clicked. In this example, we’ll be selecting the upvote buttons. To do that, you will see the &lt;code&gt;Eyedroper&lt;/code&gt; icon on the top right of the Click action. By clicking on it, you will instantly be in selection mode. Now you can select the elements Automatio will click on.&lt;/p&gt;

&lt;p&gt;Also pay attention to how I am unselecting (rejecting) the unwanted elements, the downvote buttons. Check this short clip below 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pEBribJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/io54ifp2nc713doa53q5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pEBribJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/io54ifp2nc713doa53q5.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see on the screenshot below, now you have ‘17’ selected elements, shown on the Click action where you saw the (&lt;em&gt;Eyedropper icon previously&lt;/em&gt;). If you hover over the Click action, the selected and rejected elements will be highlighted.&lt;/p&gt;

&lt;p&gt;Green 🟩 means the original selection (the one you clicked to select), red 🟥 means the element you rejected, and the blue 🟦 ones are auto-selected / suggested elements by the Automatio selector engine algorithm.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R1oeySG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3348/0%2AlfEsZBKMDrZxZknG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R1oeySG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3348/0%2AlfEsZBKMDrZxZknG.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we start this bot that we created using the Chrome extension right now, Automatio will run from a cloud server and execute (click) on those upvote buttons we selected, one by one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--unR5ccey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w49049nzy06d244majaw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unR5ccey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w49049nzy06d244majaw.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see from the logs, the Click actions are happening in real-time. But how can we be sure if Automatio really clicked it? The best way to know is to use  Screenshot action,  which will be our “eyes” in Automatio. So, let’s add it.&lt;/p&gt;

&lt;p&gt;We’ll use  Toolbox -&amp;gt; Screenshot  action for that. I’m also going to add a  Toolbox -&amp;gt; Wait  action before Screenshot, to give a bit of time for events to happen on the page (e.g loading all elements properly). The default wait time in Wait action is 2,500 milliseconds or 2.5 seconds. Since there will be nothing special to load between each of the clicks on upvote buttons, I’m going to decrease the wait time to 1 second (1000 ms).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5EnifQkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2qf490kq7ukr57gdgd8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5EnifQkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2qf490kq7ukr57gdgd8.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see from the clip above, I dragged and dropped the  Wait action  inside of the  Click action , to nest it. You are probably wondering “What is  Nested action?”  Well, those are actions that will be executed for every loop we have. In this case, Click repeat is a  loop  as it has 17 upvotes buttons to click. So for each upvote click, we want to execute all nested actions we have, which are Screenshot and Wait in this case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---xPeeiNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2046/0%2AzXI-UDrKFWe-U2bh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---xPeeiNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2046/0%2AzXI-UDrKFWe-U2bh.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;And that’s it. We just easily created a bot that will click on each upvote button, without writing a single line of code. Now we could extend this bot with various functionality. It could extract data, fill the form, solve the captcha or just run by itself every X minutes, hours, or days and repeat the same process again. We’ll cover that in the next tutorials. Till then, stay tuned and peace ✌.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-version"&gt;
  &lt;/a&gt;
  🎬 Video version
&lt;/h2&gt;

&lt;p&gt;By the way, here is the short video that covers this whole tutorial.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/z4n4M_z-KMk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webscraping</category>
      <category>scraper</category>
      <category>automation</category>
      <category>dataextraction</category>
    </item>
    <item>
      <title>Create a Custom React.js Hook to Get Subdomains</title>
      <author>Garrick Crouch</author>
      <pubDate>Sun, 17 Oct 2021 01:30:02 +0000</pubDate>
      <link>https://dev.to/localpathcomp/create-a-custom-reactjs-hook-to-get-subdomains-3mal</link>
      <guid>https://dev.to/localpathcomp/create-a-custom-reactjs-hook-to-get-subdomains-3mal</guid>
      <description>&lt;p&gt;Often times it's extremely useful to be able to easily parse the hostname or domain parts of your website. The use cases are many but we'll just look at how to make a react hook to help us get subdomain info for use in our application.&lt;/p&gt;

&lt;p&gt;We'll use the Web API window.location.hostname. It'll return the string representation of the current host.&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/hostname"&gt;https://developer.mozilla.org/en-US/docs/Web/API/Location/hostname&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useSubdomain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;subdomain&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;
        &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;
        &lt;span class="nx"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;
        &lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;subdomain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see we just create an array from the hostname parts based on the &lt;code&gt;.&lt;/code&gt; as a delimiter, and access the array index you pass in as the argument for the call to the hook.&lt;/p&gt;

&lt;p&gt;We could take it a step further and create a function to run this logic at any time, but for now let's just assume that we only want this to run once as we call it, so we would use it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subdomain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSubdomain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      The website subdomain is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;subdomain&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could add checks in to make sure you're actually on a subdomain as well, and also guards for www.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
