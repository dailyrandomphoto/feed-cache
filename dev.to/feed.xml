<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Fashion Mobile App UI Kit Screen Design Sketch  Resource</title>
      <author>Ui card</author>
      <pubDate>Fri, 26 Nov 2021 11:54:22 +0000</pubDate>
      <link>https://dev.to/uicard/fashion-mobile-app-ui-kit-screen-design-sketch-resource-5603</link>
      <guid>https://dev.to/uicard/fashion-mobile-app-ui-kit-screen-design-sketch-resource-5603</guid>
      <description>&lt;p&gt;The Fashion Mobile App UI Kit is a beautiful, premium Brand Store App UI Kit design that consists of 25+ unique screens which you can easily customize to fit your design style. Create an online store.&lt;/p&gt;

&lt;p&gt;Everything is vector-based and completely editable giving you the freedom to change anything you want and create whatever you can imagine! This project contains 25+ design screens for mobile app layouts. It also contains a large number of buttons and icons to match the screens.&lt;/p&gt;

&lt;p&gt;What’s inside: – 25+ Unique App Screens – Well Organized Layers and Components – Easy to Use – Clean and Modern Design Thank you!&lt;/p&gt;

&lt;p&gt;Download 15,000+ design resources from uihut&lt;/p&gt;

&lt;p&gt;UIHUT is a collection of high-quality UI design resources for professional designers, available in Sketch, Figma, and Adobe XD file formats. We’ve built dozens of premium Figma, Adobe XD and Sketch UI Kits and exported them to other popular UI editors as SVG symbols.&lt;br&gt;
Thank you&lt;/p&gt;

</description>
      <category>udesig</category>
      <category>appdesign</category>
      <category>fashion</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Abstract Factory Pattern | Design Patterns in Java</title>
      <author>coder4life</author>
      <pubDate>Fri, 26 Nov 2021 11:48:00 +0000</pubDate>
      <link>https://dev.to/coder4_life/abstract-factory-pattern-design-patterns-in-java-k7d</link>
      <guid>https://dev.to/coder4_life/abstract-factory-pattern-design-patterns-in-java-k7d</guid>
      <description>&lt;p&gt;Java implementation of the Abstract Factory Pattern which basically is a factory class structure for returning other factories. In this example the "Regular Shape" and the "Rounded Shape" represent separate object structures with their own factory class. The "FactoryCreator" is the abstract factory since it returns either a rounded-shape-factory or a regular-shape-factory.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/eXANLuM4-RE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>java</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Factory pattern in a nutshell</title>
      <author>Abhinav Pandey</author>
      <pubDate>Fri, 26 Nov 2021 11:47:04 +0000</pubDate>
      <link>https://dev.to/abh1navv/factory-pattern-in-a-nutshell-2cif</link>
      <guid>https://dev.to/abh1navv/factory-pattern-in-a-nutshell-2cif</guid>
      <description>&lt;p&gt;Factory pattern is a design pattern that allows you to create objects without exposing the instantiation logic to the client.&lt;/p&gt;

&lt;p&gt;It's a way to delegate the instantiation of an object to a factory class without the client having to decide the concrete class to instantiate.&lt;/p&gt;

&lt;p&gt;Let's see some terminology:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Client&lt;/strong&gt; - The class that needs the object.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Factory&lt;/strong&gt; - The class that creates the object.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deciding parameters&lt;/strong&gt; - The parameters that the factory class uses to decide which concrete class to instantiate.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The Abstraction&lt;/strong&gt; - When the client gets an object, it wants it to do something. So it needs to know which types of objects it needs.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#a-real-world-analogy"&gt;
  &lt;/a&gt;
  A real world analogy
&lt;/h3&gt;

&lt;p&gt;Let's think about a real world example of factory pattern&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's say you order a Car through the Uber app.&lt;/li&gt;
&lt;li&gt;You order a car for a particular location and maybe a particular time.&lt;/li&gt;
&lt;li&gt;However, you don't know which car will be provided to you until the order is complete.&lt;/li&gt;
&lt;li&gt;Once the order is complete, you can get the car details. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's compare this to our factory terminology:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You are the client.&lt;/li&gt;
&lt;li&gt;Uber is the factory. It will find a car for you. You don't need to know how it does that.&lt;/li&gt;
&lt;li&gt;Location and time are the deciding parameters.&lt;/li&gt;
&lt;li&gt;The car is the abstraction. You are certain that you need a car and specifically will be provided a car.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's implement this in Java.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-abstraction"&gt;
  &lt;/a&gt;
  The Abstraction
&lt;/h3&gt;

&lt;p&gt;First, lets create a Car interface and provide some implementations for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Car interface&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// its implementations&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sedan&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Driving a Sedan"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SUV&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Driving a SUV"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Car could also be an abstract class in case you want to provide some common functionality to all the cars. It could also have more methods. Leaving the extra code out for simplicity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-factory"&gt;
  &lt;/a&gt;
  The Factory
&lt;/h3&gt;

&lt;p&gt;Now, let's create a factory class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CarFactory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt; &lt;span class="nf"&gt;getCar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"LA"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"morning"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Sedan&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"LA"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"evening"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SUV&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"NY"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"morning"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SUV&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"NY"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"evening"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Sedan&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please bear with my Car choosing logic. I do not work for Uber. (yet?)&lt;/p&gt;

&lt;p&gt;Location and time are the deciding parameters here. There could be multiple ways to write a factory.&lt;/p&gt;

&lt;p&gt;Two other common ways are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using a switch case&lt;/li&gt;
&lt;li&gt;Using a map of strings to objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We generally choose these two when there is only one deciding parameter.&lt;/p&gt;

&lt;p&gt;The map way can help further in case you want to avoid creating redundant objects every time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-client"&gt;
  &lt;/a&gt;
  The Client
&lt;/h3&gt;

&lt;p&gt;Now, let's create a client class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;CarFactory&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CarFactory&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;Car&lt;/span&gt; &lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"LA"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"morning"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;car&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sorry, no car available"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this code will print out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Driving a Sedan
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#advantages-of-using-factory-pattern"&gt;
  &lt;/a&gt;
  Advantages of using Factory Pattern
&lt;/h2&gt;

&lt;p&gt;There are many advantages of using factory pattern.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Separation of concerns (loose coupling) - The client doesn't have to know how the factory class works. The client or the factory class don't have to know how the concrete implementation of the Car class work. &lt;/li&gt;
&lt;li&gt;Easy to extend - You can add more cars to the factory without having to change the client code.&lt;/li&gt;
&lt;li&gt;Easy to test - You can test the client code without having to change the factory code. You can mock the factory class to return any Car object you want to test.&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Thanks for reading! This should help you understand the concept of factory pattern. Stay tuned for more design patterns.&lt;br&gt;
If you want to connect with me, you can find me on Twitter &lt;a href="https://twitter.com/abh1navv"&gt;@abh1navv&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>codequality</category>
      <category>oop</category>
    </item>
    <item>
      <title>Test plan vs. test strategy: what’s the difference? </title>
      <author>OKQA</author>
      <pubDate>Fri, 26 Nov 2021 11:21:13 +0000</pubDate>
      <link>https://dev.to/okqa/test-plan-vs-test-strategy-whats-the-difference-4743</link>
      <guid>https://dev.to/okqa/test-plan-vs-test-strategy-whats-the-difference-4743</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/@okqa/test-plan-vs-test-strategy-whats-the-difference-5ca9635201af"&gt;https://medium.com/@okqa/test-plan-vs-test-strategy-whats-the-difference-5ca9635201af&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>qa</category>
      <category>okqa</category>
    </item>
    <item>
      <title>First NPM Package</title>
      <author>Hung Nguyen</author>
      <pubDate>Fri, 26 Nov 2021 11:15:08 +0000</pubDate>
      <link>https://dev.to/nguyenhung15913/first-npm-package-eh1</link>
      <guid>https://dev.to/nguyenhung15913/first-npm-package-eh1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;npm install osd600-ssg --save&lt;/code&gt;&lt;br&gt;
So I am very excited that I have published my first package to NPM. As a Javascript developer, I have used many NPM packages more than I can remember, now, my tool has become a part of them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#process"&gt;
  &lt;/a&gt;
  Process
&lt;/h1&gt;

&lt;p&gt;I tested my tool locally first to find any possible errors. Then I went to the Internet and did some research and went through some tutorial about how to publish a package to NPM. The steps were not complicated so that all the developers with different levels could publish their tools to the community. However, I had to modify some files. &lt;/p&gt;

&lt;p&gt;In &lt;code&gt;package.json&lt;/code&gt;, the name of the tool needed to be lowercase, for me, it was  not satisfied about that because the original name was all uppercase as that was my favorite naming. I then forgot that I needed to add a &lt;code&gt;git tag&lt;/code&gt; to give my tool a version. &lt;code&gt;README.md&lt;/code&gt; needed to be updated as well, since my tool now can be run with &lt;code&gt;npm install osd600-ssg&lt;/code&gt;, the developers who would like to contribute do not have to clone my git repo anymore. On top of that, I realized that in &lt;code&gt;package.json&lt;/code&gt;, I could add a property called &lt;code&gt;repository&lt;/code&gt;. This would allow NPM to create a link to your GitHub repo, which is very convenient. Just like GitHub, NPM can read your &lt;code&gt;README.md&lt;/code&gt; so it was not difficult for me to fix the instruction and features of my package. And everything is good for other users to test.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h1&gt;

&lt;p&gt;I downloaded my package and tested it. It worked as I expected. I also invited some of my friends to try OSD600-SSG. So far, one of them has had a good review on it, but he recommended me that I needed to specify what packages I used in my tool. Right now, I have still been waiting for the others' feedback.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;npm install osd600-ssg --save&lt;/code&gt;&lt;br&gt;
As simply as that. If you have a text or markdown file, and you want to convert it to HTML file, after installing my package, just simply write:&lt;br&gt;
&lt;code&gt;osdssg -i &lt;/code&gt; &lt;br&gt;
There are still a lot of options, and you can find them out in the documents in both GitHub and NPM sites. Your feedback will be important for me to improve the tool so that it will get better and better.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h1&gt;

&lt;p&gt;GitHub: &lt;a href="https://github.com/nguyenhung15913/OSD600-SSG"&gt;https://github.com/nguyenhung15913/OSD600-SSG&lt;/a&gt;&lt;br&gt;
NPM: (update soon)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Graphen Cheat Sheet</title>
      <author>Anne Quinkenstein</author>
      <pubDate>Fri, 26 Nov 2021 11:14:58 +0000</pubDate>
      <link>https://dev.to/annequinkenstein/graphen-cheat-sheet-48j9</link>
      <guid>https://dev.to/annequinkenstein/graphen-cheat-sheet-48j9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#graph"&gt;
  &lt;/a&gt;
  Graph
&lt;/h1&gt;

&lt;p&gt;•Graph G(V, E) - Graph, welcher aus der Knoten- und Kantenmenge V und E besteht.&lt;br&gt;
•Knoten v - Element aus V, der Menge der Knoten (v ∈ V) &lt;br&gt;
•Kante e - Element aus E, der Menge der Kanten (e ∈ E) &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ungerichteter-graph"&gt;
  &lt;/a&gt;
  ungerichteter Graph
&lt;/h2&gt;

&lt;p&gt;E ⊆ { {i,j} : i ∈ V, j ∈ V, i ≠ j } &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gerichteter-graph"&gt;
  &lt;/a&gt;
  gerichteter Graph
&lt;/h2&gt;

&lt;p&gt;E ⊆ { (i,j) : i ∈ V, j ∈ V }  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nachbarschaft"&gt;
  &lt;/a&gt;
  Nachbarschaft
&lt;/h3&gt;

&lt;p&gt;G = (V, E): gerichteter Graph. &lt;br&gt;
•Zwei Knoten i, j ∈ V heißen benachbart, wenn eine Kante &lt;br&gt;
zwischen ihnen verläuft, also (i, j) ∈ E oder (j, i) ∈ E. &lt;br&gt;
•Schleife : Eine Kante (i, i) mit identischem Ausgangs- und Endknoten &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grad"&gt;
  &lt;/a&gt;
  Grad
&lt;/h3&gt;

&lt;p&gt;GradG(v) = |{e(i, j) ∈ E : v = i ∨ v = j}| &lt;br&gt;
Da jede Kante genau zwei Knoten verbindet ist die Summe aller &lt;br&gt;
Knotengrade = 2∗|E|(Anzahl der Kanten) &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#eingangsgrad"&gt;
  &lt;/a&gt;
  Eingangsgrad
&lt;/h4&gt;

&lt;p&gt;GradIN(v) = |{e(i, j) ∈ V : v = j}|&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ausgangsgrad"&gt;
  &lt;/a&gt;
  Ausgangsgrad
&lt;/h4&gt;

&lt;p&gt;GradOUT(v) = |{e(i, j) ∈ V : v = i}|&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#darstellung"&gt;
  &lt;/a&gt;
  Darstellung
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#abstrakt"&gt;
  &lt;/a&gt;
  Abstrakt
&lt;/h3&gt;

&lt;p&gt;Sei G1(V1, E1) &lt;br&gt;
•V1 = {a, b, c, d} &lt;br&gt;
•E1 = {  (a,b), (a,c), (a,d), (b,b), (b,c), (d,b), (d,c) }&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphisch"&gt;
  &lt;/a&gt;
  graphisch
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ukoZoXsd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j078ifldmcqfa3g0p8l4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ukoZoXsd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j078ifldmcqfa3g0p8l4.png" alt="Image description" width="485" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adjazenzliste"&gt;
  &lt;/a&gt;
  Adjazenzliste
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H9_uEA30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkral7w214dx1zdl1mci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H9_uEA30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkral7w214dx1zdl1mci.png" alt="Image description" width="412" height="385"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adjazenzmatrix"&gt;
  &lt;/a&gt;
  Adjazenzmatrix
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6SnwwsOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9spa673cvpwebywgqy0p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6SnwwsOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9spa673cvpwebywgqy0p.png" alt="Image description" width="532" height="510"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#weg"&gt;
  &lt;/a&gt;
  Weg
&lt;/h3&gt;

&lt;p&gt;Weg in G ist ein &lt;em&gt;Tupel&lt;/em&gt; (v0, v1, ..., vk), so dass für alle i mit 0 ≤ i &amp;lt; k gilt: &lt;br&gt;
•(vi, vi+1) ∈ E für gerichtete Graphen &lt;br&gt;
•{vi, vi+1} ∈ E für ungerichtete Graphen &lt;br&gt;
•Das Tupel (v0, v1, ..., vk) wird dann ein Weg von v0 nach vk &lt;br&gt;
genannt. k ist die Länge des Weges. k gibt also an, wie viele Kanten auf dem Weg durchlaufen werden. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#einfach"&gt;
  &lt;/a&gt;
  einfach
&lt;/h3&gt;

&lt;p&gt;kein Knoten kommt mehr als einmal in dem Weg vor&lt;br&gt;
Kreis heißt einfach, wenn keine Kante mehrfach durchlaufen wird und ( abgesehen von Start- und Endknoten ) kein Knoten mehr als einmal in dem Weg vorkommt&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#azyklisch"&gt;
  &lt;/a&gt;
  azyklisch
&lt;/h3&gt;

&lt;p&gt;Ein Graph heißt azyklisch, falls er keinen einfachen Kreis enthält.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zusammenh%C3%A4ngend"&gt;
  &lt;/a&gt;
  zusammenhängend
&lt;/h3&gt;

&lt;p&gt;ungerichteter Graph&lt;br&gt;
G ist zusammenhängend, wenn für alle Knoten v, w ∈ V gilt: Es &lt;br&gt;
gibt einen Weg von v nach w.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stark-zusammenh%C3%A4ngend"&gt;
  &lt;/a&gt;
  stark zusammenhängend
&lt;/h3&gt;

&lt;p&gt;gerichteter Graph&lt;br&gt;
G ist stark zusammenhängend, wenn für alle Knoten v, w ∈ V gilt: Es gibt einen Weg von v nach w.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hamilton"&gt;
  &lt;/a&gt;
  Hamilton
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#weg"&gt;
  &lt;/a&gt;
  Weg
&lt;/h3&gt;

&lt;p&gt;Ein Weg W = (v0, ..., vk) ist ein Hamilton-Weg wenn jeder Knoten aus V genau einmal in W vorkommt &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kreis"&gt;
  &lt;/a&gt;
  Kreis
&lt;/h3&gt;

&lt;p&gt;Ein Weg W = (v0, ..., vk) ist ein Hamilton-Kreis wenn k &amp;gt; 1 und v0 = vk und (v0, ..., vk-1) ein Hamilton-Weg ist&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#euler"&gt;
  &lt;/a&gt;
  Euler
&lt;/h2&gt;

&lt;p&gt;ungerichteter Graph&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#weg"&gt;
  &lt;/a&gt;
  Weg
&lt;/h3&gt;

&lt;p&gt;Ein Weg W = (v0, ..., vk) ist ein Euler-Weg wenn W jede Kante aus E genau einmal durchläuft. D.h. für jedes e ∈ E genau ein&lt;br&gt;&lt;br&gt;
i ∈ {0, ..., k−1} gibt, so dass e = {vi, vi+1} &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kreis"&gt;
  &lt;/a&gt;
  Kreis
&lt;/h3&gt;

&lt;p&gt;Ein Weg W = (v0, ..., vk) ist ein Euler-Kreis wenn W ein Euler-Weg ist und v0 = vk.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#isomorph"&gt;
  &lt;/a&gt;
  isomorph
&lt;/h2&gt;

&lt;p&gt;Zwei Graphen G1= (V1, E1) und G2= (V2, E2) heißen isomorph, wenn sie sich höchstens in der Bezeichnung ihrer Knoten&lt;br&gt;
unterscheiden, ansonsten aber die selbe Struktur haben.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bijektive-funktion"&gt;
  &lt;/a&gt;
  bijektive Funktion
&lt;/h3&gt;

&lt;p&gt;f: V1⟶V2 existieren, mit den Eigenschaften: &lt;br&gt;
•falls G1 und G2 gerichtete Graphen sind: &lt;br&gt;
(u, v) ∈ E1 ⟷ (f(u), f(v)) ∈ E2 &lt;br&gt;
•falls G1 und G2 ungerichtete Graphen sind: &lt;br&gt;
{u, v} ∈ E1 ⟷ {f(u), f(v)} ∈ E2 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planar"&gt;
  &lt;/a&gt;
  planar
&lt;/h2&gt;

&lt;p&gt;wenn sich in der graphischen Darstellung keine zwei Kanten überkreuzen&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tFAQuod---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyi0auibvja0h01razkb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tFAQuod---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyi0auibvja0h01razkb.png" alt="Image description" width="862" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gewichtet"&gt;
  &lt;/a&gt;
  gewichtet
&lt;/h2&gt;

&lt;p&gt;eine Funktion, welche jeder Kante in G eine reelle Zahl (das Gewicht) zuordnet. &lt;br&gt;
d: E ⟶ ℝ&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#b%C3%A4ume"&gt;
  &lt;/a&gt;
  Bäume
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#ungerichteter-baum-b"&gt;
  &lt;/a&gt;
  ungerichteter Baum B
&lt;/h2&gt;

&lt;p&gt;B ist ein ungerichteter, zusammenhängender Graph G = (V, E), der keinen einfachen Kreis enthält. &lt;br&gt;
Es existiert genau ein einfacher Weg, der die Knoten x und y &lt;br&gt;
verbindet. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spannb%C3%A4ume"&gt;
  &lt;/a&gt;
  Spannbäume
&lt;/h2&gt;

</description>
    </item>
    <item>
      <title>My Top 3 Server Side Technologies. What are yours ? </title>
      <author>The Nerdy Dev</author>
      <pubDate>Fri, 26 Nov 2021 11:10:35 +0000</pubDate>
      <link>https://dev.to/thenerdydev/my-top-3-server-side-technologies-what-are-yours--5a5f</link>
      <guid>https://dev.to/thenerdydev/my-top-3-server-side-technologies-what-are-yours--5a5f</guid>
      <description>&lt;p&gt;Hey guys 👋🏻,&lt;br&gt;
In this article, I will unveil &lt;strong&gt;My Top 3 Server Side Technologies&lt;/strong&gt; that I work with.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was first published on&lt;/em&gt; &lt;a href="https://the-nerdy-dev.com/"&gt;https://the-nerdy-dev.com/&lt;/a&gt;.&lt;br&gt;
&lt;em&gt;Check the website for more interesting articles and tutorials on Web Development.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZtRU14N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgmvv78lts7x168huzqy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZtRU14N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgmvv78lts7x168huzqy.png" alt="Image description" width="704" height="893"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  Node.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x_KHYOiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9pajbpoun0qtjag6h4c9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x_KHYOiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9pajbpoun0qtjag6h4c9.png" alt="Image description" width="493" height="186"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Node.js is a JavaScript Runtime for building &lt;em&gt;scalable network applications&lt;/em&gt;. It is blazing fast and it is best to use when we have large number of &lt;strong&gt;concurrent&lt;/strong&gt; connections active at a given point of time and requires immediate response time. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#django"&gt;
  &lt;/a&gt;
  Django
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RRwJfKdc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsx161ciujycsrs5soxk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RRwJfKdc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsx161ciujycsrs5soxk.png" alt="Image description" width="491" height="192"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Django is a backend development framework that provides you a lot of things out of the box (authentication system for example). It allows you to focus on building the application without re-inventing the wheel. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#ruby-on-rails-ror"&gt;
  &lt;/a&gt;
  Ruby on Rails (ROR)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6IEvZ3Xm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02bu6pbfsoboeua8ig85.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6IEvZ3Xm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02bu6pbfsoboeua8ig85.png" alt="Image description" width="549" height="173"&gt;&lt;/a&gt;&lt;br&gt;
Ruby on Rails is just like Django which uses &lt;strong&gt;batteries included approach&lt;/strong&gt;. It helps developers to build scalable applications because it abstracts and simplifies common repetitive tasks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are your Top 3 ? Let me know in the comments section&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my articles, consider following me on Twitter for more interesting stuff :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" alt="Image description" width="284" height="255"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;⚡Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Jun 10 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>From Java to C++ - lambdas</title>
      <author>Michał Piotrowski</author>
      <pubDate>Fri, 26 Nov 2021 11:08:48 +0000</pubDate>
      <link>https://dev.to/chlebik/from-java-to-c-lambdas-3jm0</link>
      <guid>https://dev.to/chlebik/from-java-to-c-lambdas-3jm0</guid>
      <description>&lt;p&gt;In Java, we have our take on functional programming with &lt;strong&gt;lambdas&lt;/strong&gt;. Obviously, as functional programmers love to tell us - they're just a mere simplifications of the 'real' functional languages. However, introduced in Java 8, they've had  really changed how we do things in Java now. As for C/C++, functions were there from the very beginning  obviously!), but concepts of &lt;strong&gt;lambdas&lt;/strong&gt; emerged just in the latest C++20 standard.&lt;/p&gt;

&lt;p&gt;In this post I will try to take more broad approach to the concepts of &lt;strong&gt;functions&lt;/strong&gt; and &lt;strong&gt;lambdas&lt;/strong&gt; in C++. I've thought about writing about C &lt;em&gt;function pointers&lt;/em&gt;, but I've decided to just refresh my memory with &lt;strong&gt;Richard Reese&lt;/strong&gt;  &lt;em&gt;Understanding and using C pointers'&lt;/em&gt; book, but do not write about it here. Let's keep it pure C++, and concentrate on more abstract solutions. Like the one just coming in our way - functions as objects.&lt;/p&gt;

&lt;h2&gt;Function as an object&lt;/h2&gt;

&lt;p&gt;The concept of functions being &lt;em&gt;first class citizens&lt;/em&gt; in the programming languages has a long tradition. In order to achieve that in C++, we need a way to pass functions to the methods as params. A universal container for callable objects is &lt;em&gt;std::function&lt;/em&gt; class - wrapper around &lt;em&gt;function pointer&lt;/em&gt;. It's a piece of standard library, residing in the &lt;em&gt; header&lt;/em&gt;. I'm starting with it, as it is more generic than &lt;strong&gt;lambdas&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In general, it's possible to create an empty &lt;em&gt;std::function&lt;/em&gt; object, but that won't be much of use - trying to call such object will result in &lt;em&gt;std::bad_function_call&lt;/em&gt; exception being thrown. What we need, is object that actually holds a callable 'thing'. There are two ways to assign a callable object to the &lt;em&gt;std::function&lt;/em&gt; instance - either as a constructor param, or just by assigning it to the pointer. Here's an example:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;functional&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Test function"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;testFunctionHandler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;testFunction&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;testFunctionHandler2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;testFunctionHandler&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;testFunctionHandler2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It does not look scary - maybe syntax is a little weird, but nothing we cannot handle. &lt;em&gt;std::function&lt;/em&gt; can serve as w convenient abstraction, representing all the types of callable things. However, here's the more modern approach to functional programming in C++ (and more close to Java equivalent) - &lt;strong&gt;lambdas&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Lambdas in C++&lt;/h2&gt;

&lt;p&gt;The same as in Java, it's a popular use case, to just pass some behaviour represented by a function. We don't need to (or don't want to), create a separate function or an object for that. What we want, is to pass some behaviour to the method and let it do its job. That's what &lt;strong&gt;lambdas&lt;/strong&gt; are for - simple (ok, got me) concepts of passable behaviour. Let's start with the most simple example of a function - that takes nothing and returns nothing (besides side-effect):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printSomeMsg&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Some message"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printSomeMsg&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As simple as it is - it just prints the hardcoded message. However, let's assume that we don't want to write such a trivial function in our code. We just need its functionality in the specific places. That's where the lambda comes in. Let's take a look at this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;functional&amp;gt;
#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;ourLambdaAsAuto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Some message"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ourLambdaAsFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Some message 2"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;ourLambdaAsAuto&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;ourLambdaAsFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, the syntax may look scary at the beginning, but that's not that big of a deal. Let's go through it step by step:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
&lt;strong&gt;[]&lt;/strong&gt; - it is empty now, but that does not mean it's not being used. These square brackets are responsible for specifying &lt;strong&gt;captures&lt;/strong&gt;. In simple words - they fetch needed data/variables from the calling context. We will discuss this in detail later, as it is quite important.&lt;/li&gt;
    &lt;li&gt;
&lt;strong&gt;()&lt;/strong&gt; - rather familiar feature. In the simple parenthesis we just specify arguments to the lambda. We don't have any here, that's why it's empty.&lt;/li&gt;
    &lt;li&gt;
&lt;strong&gt;{}&lt;/strong&gt; - in the curly braces we provide the body of our lambda. In short - the job to be done.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wasn't that bad, right? Of course, our simple example did not cover everything. Generic expression for lambda creation looks like this:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[captures] (parameters) modifiers -&amp;gt; return-type { body }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above expression we know already &lt;em&gt;captures, parameters&lt;/em&gt; and &lt;em&gt;body&lt;/em&gt;. The remaining two are quite simple:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
&lt;strong&gt;modifiers&lt;/strong&gt; - we can specify different modifiers, but depending on the standard they may vary, and their behaviour too. The best way to learn about them is to visit &lt;a href="https://en.cppreference.com/w/cpp/language/lambda"&gt;official C++ ref docs&lt;/a&gt;. The most popular are &lt;strong&gt;const&lt;/strong&gt; and &lt;strong&gt;constexpr&lt;/strong&gt;.&lt;/li&gt;
    &lt;li&gt;
&lt;strong&gt;return type&lt;/strong&gt; - by default the compiler will deduce the return type of the lambda. However, especially when we're using template lambdas, it's advisable to help the compiler with small hint. Like in this example:

&lt;em&gt;
[](auto x, double y) -&amp;gt; decltype(x+y) { return x + y; }
&lt;/em&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;More about lambdas params&lt;/h3&gt;

&lt;p&gt;Parameters to &lt;strong&gt;lambdas&lt;/strong&gt; are not that different from the regular ones. That means, we can both assign to them default values, and use &lt;em&gt;auto&lt;/em&gt; type. Slightly modified example taken from &lt;em&gt;'C++ Crash Course'&lt;/em&gt; shows these two in combination.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Lambda captures&lt;/h3&gt;

&lt;p&gt;Remember these square brackets that up until now we've always left empty? Now the time has come to tell something more about them. &lt;strong&gt;Captures&lt;/strong&gt; are quite important for &lt;strong&gt;lambdas&lt;/strong&gt;, as they allow them to have context passed. Let's start with simple example.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MySimpleClassPiece&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;public:&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;someStringValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MySimpleClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;public:&lt;/span&gt;
        &lt;span class="n"&gt;MySimpleClassPiece&lt;/span&gt; &lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;



&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;MySimpleClass&lt;/span&gt; &lt;span class="n"&gt;mySimpleClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;MySimpleClassPiece&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"someStringValue"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;mySimpleClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someStringValue&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;mySimpleClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything here is public, for the sake of simplicity. Printing to the standard output is done directly in the &lt;em&gt;main &lt;/em&gt;function, and that is not what we want in the long run. Let's assume, that based on some logic, we want to either print the object state to the console, or modify the values in the object. As this is purely behaviour-driven thing, we're going to use lambdas for this. Let's start with the printing piece first.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Everything besides main() is the same as above&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;MySimpleClass&lt;/span&gt; &lt;span class="n"&gt;mySimpleClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;MySimpleClassPiece&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"someStringValue"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;printingLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mySimpleClass&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;mySimpleClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someStringValue&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;mySimpleClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;printingLambda&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running above code snippet produces the same output as before. What happened here? In general, in the &lt;strong&gt;capture&lt;/strong&gt; section of a &lt;strong&gt;lambda&lt;/strong&gt;, we can put whatever parameters we want, and what is more, we can select variables from the calling context, to pass into the &lt;strong&gt;lambdas' body&lt;/strong&gt; (as presented above). By default, all the variables &lt;strong&gt;are passed by value!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course, we're not limited to just passing the value - we can change its name. It is done like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;MySimpleClass&lt;/span&gt; &lt;span class="n"&gt;mySimpleClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;MySimpleClassPiece&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"someStringvalue"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;printingLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;externalVariable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mySimpleClass&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;externalVariable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someStringValue&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;externalVariable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;printingLambda&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using this technique can improve the readability of the code, especially when the &lt;strong&gt;lambda&lt;/strong&gt; is contained within the same compilation unit. But that's not over! When it comes to parameters, we can also provide new ones, completely unrelated to the context variables.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;MySimpleClass&lt;/span&gt; &lt;span class="n"&gt;mySimpleClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;MySimpleClassPiece&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"someStringvalue"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;zz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;printingLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;externalVariable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mySimpleClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;zz&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;externalVariable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someStringValue&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;externalVariable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;printingLambda&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This piece of code will actually print:&lt;/p&gt;

&lt;pre&gt;someStringvalue
1
6
15
&lt;/pre&gt;

&lt;p&gt;As you can see this feature is quite powerful, and enables &lt;strong&gt;lambda&lt;/strong&gt; to get as much data as needed, to perform a specific operation. However, up until now we're operating with &lt;em&gt;named parameters&lt;/em&gt; - we're specifying all of them in the &lt;em&gt;captures&lt;/em&gt; section. That gives us a lot of flexibility, but sometimes we just want to pass everything to the &lt;strong&gt;lambda&lt;/strong&gt; at once. We don't want to provide variables one by one, or (in the future), have to add additional params when new variables appear.&lt;/p&gt;

&lt;p&gt;The way to achieve that, is to use 'wildcard-style' in the square brackets. By putting there &lt;em&gt;'='&lt;/em&gt; sign, we pass to the lambda all the variables that enclosing context contains, and lambda wants to use. As simple as that:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;MySimpleClass&lt;/span&gt; &lt;span class="n"&gt;mySimpleClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;MySimpleClassPiece&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"someStringvalue"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;zz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;zz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;printingLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Pay attention that we have to use the name of the original variable here! &lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;mySimpleClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someStringValue&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;mySimpleClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;printingLambda&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It makes the code easier to maintain, but as I've said - it may influence the readability. Therefore, it's always situation based, whether we use &lt;em&gt;default capture&lt;/em&gt; or &lt;em&gt;named one&lt;/em&gt;. Ok, so far we've been dealing with parameters' values, as by default the parameters are passed by values. What if the &lt;strong&gt;lambda&lt;/strong&gt; wanted to actually modify them? Trying to do that in the above example will fail.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;printingLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;mySimpleClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someStringValue&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;mySimpleClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;piece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// Results in compilation error with:  assignment of read-only variable 'result'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to make modifications to the variables, we could fall in a nasty trap here. I've mentioned in the list above, that one part of &lt;strong&gt;lambda&lt;/strong&gt; expression can belong to &lt;strong&gt;modifiers&lt;/strong&gt;. One of them is actually &lt;strong&gt;mutable&lt;/strong&gt;. Sounds about right! Let's take a look at the following code, and try to predict how it behaves.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;toAdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;printingLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="k"&gt;mutable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="c1"&gt;//  mutable added &lt;/span&gt;
        &lt;span class="n"&gt;toAdd&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;toAdd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;printingLambda&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"In main: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;toAdd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printingLambda&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"In main: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;toAdd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printingLambda&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"In main: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;toAdd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you've expected ever-increasing output I have bad news for you. It actually looks like this:&lt;/p&gt;

&lt;pre&gt;5
In main: 0
10
In main: 0
15
In main: 0
&lt;/pre&gt;

&lt;p&gt;Weird, isn't it? The problem here is, that &lt;strong&gt;mutable&lt;/strong&gt; does not allow modifying params passed by values - quite reasonable I would say. What it does instead, is that it creates a new variable named exactly as the one used (in this example it is &lt;strong&gt;toAdd&lt;/strong&gt;), and then keeps it in memory, as long as &lt;strong&gt;lambda&lt;/strong&gt; is in use. That explains how we got this specific output.&lt;/p&gt;

&lt;p&gt;All right, but what if I want to modify actual variables from the outside world. Well, that's not a problem - just pass them as references. We can do that by replacing &lt;em&gt;'='&lt;/em&gt; sign with &lt;em&gt;'&amp;amp;'&lt;/em&gt; one.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;toAdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;printingLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;toAdd&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;toAdd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;printingLambda&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"In main: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;toAdd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printingLambda&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"In main: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;toAdd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printingLambda&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"In main: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;toAdd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that change, our output looks like we wanted it for the first time:&lt;/p&gt;

&lt;pre&gt;5
In main: 5
10
In main: 10
15
In main: 15
&lt;/pre&gt;

&lt;p&gt;What must be said here, is that we're not limited to either &lt;em&gt;named captures&lt;/em&gt; and &lt;em&gt;default ones&lt;/em&gt;! We can mix them for every &lt;strong&gt;lambda&lt;/strong&gt;! Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;toAdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;printingLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;toAdd&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;toAdd&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;toAdd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// toAdd passing/changes will work as in the previous example&lt;/span&gt;

        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// x += 10;   This line will cause compiler to fail&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// printing skipped&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To finish discussing &lt;strong&gt;captures&lt;/strong&gt; I have to mention, that it's also possible to pass to the &lt;strong&gt;lambda&lt;/strong&gt; (either by value or by reference), an actual instance of the wrapping class. However, the topic is not trivial - I recommend reading &lt;a href="https://www.nextptr.%20com/tutorial/ta1430524603/capture-this-in-lambda-expression-timeline-of-change"&gt;an excellent article on Nextptr.com&lt;/a&gt;. What is more - linked presentation in the sources section also provides valuable info about it. That's it for today.&lt;/p&gt;

&lt;p&gt;SOURCES:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
&lt;a href="https://lp.embarcadero.com/cpplambdasebook"&gt;Free ebook about lambdas&lt;/a&gt; - whole book dedicated to lambdas in C++. Just provide email address and it's yours.&lt;/li&gt;
    &lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=3jCOwajNch0&amp;amp;ab_channel=CppCon"&gt;Introduction to lambdas&lt;/a&gt; - BackToBasis series on CPPConf&lt;/li&gt;
    &lt;li&gt;
&lt;em&gt;'Understanding and using C Pointers'&lt;/em&gt; by Richard Reese, chapter about function pointers&lt;/li&gt;
    &lt;li&gt;
&lt;em&gt;'C++ Crash Course' &lt;/em&gt;by Josh Lospinoso&lt;/li&gt;
    &lt;li&gt;
&lt;a href="https://www.nextptr.%20com/tutorial/ta1430524603/capture-this-in-lambda-expression-timeline-of-change"&gt;Nexptr.com article&lt;/a&gt; about the evolution of &lt;em&gt;this&lt;/em&gt; capturing&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cpp</category>
      <category>lambda</category>
      <category>java</category>
      <category>functional</category>
    </item>
    <item>
      <title>Mobile Security: OWASP List</title>
      <author>Surhid Amatya</author>
      <pubDate>Fri, 26 Nov 2021 11:03:58 +0000</pubDate>
      <link>https://dev.to/surhidamatya/mobile-security-owasp-list-1fee</link>
      <guid>https://dev.to/surhidamatya/mobile-security-owasp-list-1fee</guid>
      <description>&lt;p&gt;Technological revolution has been the most dynamic thing in the world to change it's dynamics. Less than a decade ago, smartphones were a little device which would be accessible to wealthy persons only. Today, smartphone has been an integral part of everyone's life. With the rise in use of smartphone there has been rise in use of mobile application as well. These apps running on our mobile saves/shares our personal information, pictures, recordings, notes, account data, business information, location and much more.&lt;/p&gt;

&lt;p&gt;With every enhancement in technology gives birth to new security risks and mobile technology is no different. Even though mobile operating systems like iOS and Android are arguably more secure by design compared to traditional Desktop operating systems, there's still a lot of things that can go wrong when security is not considered during the mobile app development process. Data storage, inter-app communication, proper usage of cryptographic APIs and secure network communication are only some of the aspects that require careful consideration.&lt;/p&gt;

&lt;p&gt;When it comes to addressing application security, we need to keep eye on security from the very first stage (very beginning) of application development. There may be various areas to take care of during the process, and have been narrowed down to top ten items by OWASP.&lt;/p&gt;

&lt;p&gt;Following listed are the TOP 10 OWASP Mobile Risks:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#m1%E2%80%8A%E2%80%8Aimproper-platform-usage"&gt;
  &lt;/a&gt;
  M1 - Improper Platform Usage
&lt;/h2&gt;

&lt;p&gt;Misuse of a mobile platform feature or failure to use platform security controls adequately&lt;br&gt;
It might include Android intents, platform permissions, misuse of TouchID, the Keychain, or some other security control that is part of the mobile operating system&lt;br&gt;
Some examples includes the violation of published guidelines, violation of convention or common practice, and any unintentional misuse&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#m2%E2%80%8A%E2%80%8Ainsecure-data-storage"&gt;
  &lt;/a&gt;
  M2 - Insecure Data Storage
&lt;/h2&gt;

&lt;p&gt;Insufficient protection mechanisms towards user or app data stored locally&lt;br&gt;
Scope of coverage includes an adversary that has attained a lost or stolen mobile device, malware or a repackaged app acting on the adversary's behalf that executes on the mobile device&lt;br&gt;
Data insecurely stored includes files such as SQLite databases, log files, XML files and cookies&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#m3%E2%80%8A%E2%80%8Ainsecure-communication"&gt;
  &lt;/a&gt;
  M3 - Insecure Communication
&lt;/h2&gt;

&lt;p&gt;Insufficient protection mechanisms towards user or app data transmitted over the mobile device's carrier network or the internet&lt;br&gt;
It might cover an adversary that shares the same Local Area Network (LAN), network devices or malware; and whether defensive mechanisms such as Certificate Pinning has been implemented in the mobile app&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#m4%E2%80%8A%E2%80%8Ainsecure-authentication"&gt;
  &lt;/a&gt;
  M4 - Insecure Authentication
&lt;/h2&gt;

&lt;p&gt;Lack of proper authentication methods and controls&lt;br&gt;
Scope of coverage includes the exploitation of authentication vulnerabilities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#m5%E2%80%8A%E2%80%8Ainsufficient-cryptography"&gt;
  &lt;/a&gt;
  M5 - Insufficient Cryptography
&lt;/h2&gt;

&lt;p&gt;Usage of inadequately strong cryptographic standards, or poor cryptography implementation and usages&lt;br&gt;
Scope of coverage includes the cracking of improperly encrypted data through physical access or mobile malware acting on an adversary's behalf&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#m6%E2%80%8A%E2%80%8Ainsecure-authorization"&gt;
  &lt;/a&gt;
  M6 - Insecure Authorization
&lt;/h2&gt;

&lt;p&gt;Lack of proper roles and permissions validation and access rights controls&lt;br&gt;
Scope of coverage includes the exploitation of the authorization vulnerabilities like insecure direct object references&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#m7%E2%80%8A%E2%80%8Apoor-code-quality"&gt;
  &lt;/a&gt;
  M7 - Poor Code Quality
&lt;/h2&gt;

&lt;p&gt;Insufficient consistency in coding patterns and lack of proper user data input validations and method calls&lt;br&gt;
Scope of coverage includes any plausible endpoints that can pass untrusted inputs to method calls made within the mobile app's code, resulting in potential exploitation via malware or phishing scams&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#m8%E2%80%8A%E2%80%8Acode-tampering"&gt;
  &lt;/a&gt;
  M8 - Code Tampering
&lt;/h2&gt;

&lt;p&gt;Lack of runtime checks function that perform app code integrity checks&lt;br&gt;
Scope of coverage includes exploitation through code modification via malicious forms of the apps hosted in third-party app stores. Malicious attacker may also trick the user into installing the app via phishing attacks&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#m9%E2%80%8A%E2%80%8Areverse-engineering"&gt;
  &lt;/a&gt;
  M9 - Reverse Engineering
&lt;/h2&gt;

&lt;p&gt;Missing obfuscation methods&lt;br&gt;
Scope of coverage includes downloading the mobile app from an app store and analyze it within their own local environment using a suite of different tools to identify potential attack vectors&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#m10%E2%80%8A%E2%80%8Aextraneous-functionality"&gt;
  &lt;/a&gt;
  M10 - Extraneous Functionality
&lt;/h2&gt;

&lt;p&gt;Lack of logs and endpoints verification prior to publishing the production builds&lt;br&gt;
Scope of coverage includes the identification of hidden or extraneous functionality in the backend system or the mobile app itself, and then exploit it directly from their own systems without any involvement by end-users.&lt;/p&gt;

&lt;p&gt;In order to allow the user to browse through the app securely and conveniently developer need to take care of all these items in the list and make sure they have properly followed all the steps to make app more secure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://mobilesecuritywiki.com/"&gt;https://mobilesecuritywiki.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-project-mobile-top-10/"&gt;https://owasp.org/www-project-mobile-top-10/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>android</category>
      <category>mobiledevelopment</category>
      <category>security</category>
      <category>applicationsecurity</category>
    </item>
    <item>
      <title>Introduction to mutation testing with PiTest</title>
      <author>Cédric Teyton</author>
      <pubDate>Fri, 26 Nov 2021 10:44:51 +0000</pubDate>
      <link>https://dev.to/promyze/introduction-to-mutation-testing-with-pitest-3lgo</link>
      <guid>https://dev.to/promyze/introduction-to-mutation-testing-with-pitest-3lgo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#mutation-testing"&gt;
  &lt;/a&gt;
  Mutation testing❓
&lt;/h2&gt;

&lt;p&gt;Write tests for your software has many advantages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It ensures your business requirements are satisfied&lt;/li&gt;
&lt;li&gt;It's a security net against regressions&lt;/li&gt;
&lt;li&gt;If you practice &lt;a href="https://dev.to/promyze/setup-mocha-in-watch-mode-for-tdd-in-node-js-1mah"&gt;TDD&lt;/a&gt;, it guides your implementation thanks to an emerging design. That's what we promote at &lt;a href="https://promyze.com?utm_source=DevTo"&gt;Promyze&lt;/a&gt; since it helped us a lot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we said that, the most challenging part of the works comes in: writing &lt;strong&gt;valuable and relevant&lt;/strong&gt; tests. &lt;/p&gt;

&lt;p&gt;It's one thing to say, "&lt;em&gt;We have a bunch of unit tests and a high code coverage rate&lt;/em&gt;." But it's another thing to have relevant tests that do not run only to increase this metric beloved by non-technical people 😉&lt;/p&gt;

&lt;p&gt;Mutation testing is a discipline that aims at improving the quality of our tests suite. Let's see the basic principles and a concrete example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-concept-of-code-mutation"&gt;
  &lt;/a&gt;
  The concept of code mutation
&lt;/h2&gt;

&lt;p&gt;Using a mutation testing framework will run many executions of your test suite with some &lt;strong&gt;modifications&lt;/strong&gt; to your business code. These modifications are called &lt;strong&gt;mutants&lt;/strong&gt; and can have the following form: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An arithmetic (+, -, *, /, %) operator is changed to another value&lt;/li&gt;
&lt;li&gt;Some statements are removed.&lt;/li&gt;
&lt;li&gt;Boolean literals are reversed&lt;/li&gt;
&lt;li&gt;Assignment expressions are changed (+= to -=) for instance&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea is straightforward: if your tests &lt;strong&gt;survive&lt;/strong&gt; mutants' introduction, they're not robust enough. If your tests failed, the mutants have been killed ✅ !&lt;/p&gt;

&lt;p&gt;A mutation testing framework will identify for you which mutants survived, questioning the relevance of these lines and also the scope of your tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example-with-pitest-in-java"&gt;
  &lt;/a&gt;
  An example with PiTest in Java
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://pitest.org"&gt;PIT&lt;/a&gt; is a mutation testing framework for Java. This is how you can include it your pom.xml file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        ...
        &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.pitest&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;pitest-maven&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.7.2&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'll take a straightforward example here to illustrate the concept.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.promyze.shop&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.ArrayList&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.List&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Basket&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;products&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;computePrice&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;products&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mapToInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;Product:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getPrice&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;computePriceWithDiscount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;discount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;computePrice&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;discount&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;discount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this test suite was written with JUnit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.promyze.shop.test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.promyze.shop.Basket&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.promyze.shop.Product&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;framework&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BasketTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testProductPrice&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Basket&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Basket&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"orange"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

        &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;computePrice&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testBasketPriceWithDiscount&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Basket&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Basket&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"orange"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

        &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;computePriceWithDiscount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testBasketPriceWithDiscountWhenDiscountIsHigherThanBasketPrice&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="nc"&gt;Basket&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Basket&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
       &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

       &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;computePriceWithDiscount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now run PIT with the following maven command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mvn &lt;span class="nb"&gt;test &lt;/span&gt;pitest:mutationCoverage pitest:report &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; pom.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;⏲️ One important thing to know is that mutation testing may require a &lt;strong&gt;long execution time&lt;/strong&gt; depending on the size of your codebase. You won't get an instant result, just be aware of that. &lt;/p&gt;

&lt;p&gt;An HTML report is now available in the target/pit-reports folder, and you can navigate through the result. The report indicates which mutants were introduced and whether they were killed or survived (hover the Markers on the left side).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JHK-83vL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8pa3gnldck4svfi2az3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JHK-83vL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8pa3gnldck4svfi2az3.png" alt="PiTest" width="880" height="187"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, it probably changed "&amp;lt;" to "≤, " and the test still passed. I could indeed reinforce my test suite with another test or change that condition! &lt;/p&gt;

&lt;p&gt;That's all for the intro; I think you got the concept now 🤗 !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-i-kill-all-mutants"&gt;
  &lt;/a&gt;
  Should I kill all mutants?
&lt;/h2&gt;

&lt;p&gt;There's no silver bullet here since the fact that mutants survived may not imply an issue with your tests. You should review each mutant to figure out if an action is necessary. &lt;/p&gt;

&lt;p&gt;To go further, you'll find a curated list of open-source mutation testing frameworks on this &lt;a href="https://awesomeopensource.com/projects/mutation-testing"&gt;link&lt;/a&gt;. You can also discover another post we made on &lt;a href="https://dev.to/promyze/improve-our-code-with-the-property-based-testing-and-fast-check-10p1"&gt;Property-based Testing&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>codequality</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Understanding The Building Blocks Of Android</title>
      <author>Surhid Amatya</author>
      <pubDate>Fri, 26 Nov 2021 10:39:35 +0000</pubDate>
      <link>https://dev.to/surhidamatya/understanding-the-building-blocks-of-android-17ig</link>
      <guid>https://dev.to/surhidamatya/understanding-the-building-blocks-of-android-17ig</guid>
      <description>&lt;p&gt;App components are the essential building blocks of an Android app. Each component is an entry point through which the system or a user can enter app. Some components depend on others.In this post we are going to discuss about the four fundamental building blocks from which all the android applications are built. These building blocks are implemented as Java classes.&lt;/p&gt;

&lt;p&gt;There are four major building blocks of Android, let's understand them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activity"&gt;
  &lt;/a&gt;
  Activity
&lt;/h3&gt;

&lt;p&gt;Anything that is visible to the user has an activity. Basically, activity is defined to present the graphical user interface to the user and capture user's interaction through that interface. An activity should support a single focused thing that the user can do. eg: any UI visible in the app.Basically, it is an entry point for interacting with user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#services"&gt;
  &lt;/a&gt;
  Services
&lt;/h3&gt;

&lt;p&gt;Unlike activities, services don't require any user interface and runs in the background thread. We basically place long running operations in services. They provide a way for different processes to request operations and share data. eg: music application, while we play a song, it is still playing in the background even though the app is closed.We can say, Service is an entry point for keeping an application to run in background.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#broadcast-receiver"&gt;
  &lt;/a&gt;
  Broadcast Receiver
&lt;/h3&gt;

&lt;p&gt;Broadcast receivers are the fundamental components that listens to and responds to events. Broadcast receiver acts as a subscriber that listens to its required Intents and respond to it. eg: messaging app which shows a notification when a message is received.A broadcast receiver is a component/entry point that enables the system to deliver events to the app outside of a regular user flow, allowing the app to respond to system-wide broadcast announcements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#content-provider"&gt;
  &lt;/a&gt;
  Content Provider
&lt;/h3&gt;

&lt;p&gt;If an application manages data and needs to expose that data to other applications, we use Content Providers. Content Providers allows applications to store and share data. If an application needs to access data from another application this is done through Content Provider of that application. The access might be read or write or both operations. Similarly, content provider is used to provide data to the same containing application as well. Thus, we can say content provider is a database style component that handles interprocess communication between applications. eg: messaging app which can explore our contacts through contacts application.&lt;br&gt;
You must declare all app components using the following elements:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;activity&amp;gt; elements for activities.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;service&amp;gt; elements for services.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;receiver&amp;gt; elements for broadcast receivers.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;provider&amp;gt; elements for content providers.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Activities, services, and content providers that you include in your source but do not declare in the manifest are not visible to the system and, consequently, can never run. However, broadcast receivers can be either declared in the manifest or created dynamically in code as BroadcastReceiver objects and registered with the system by&lt;br&gt;
&lt;em&gt;callingregisterReceiver().&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/guide/components/fundamentals"&gt;https://developer.android.com/guide/components/fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/SiddheshPalkar1/building-blocks-of-android"&gt;https://www.slideshare.net/SiddheshPalkar1/building-blocks-of-android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/stacklearning/basic-building-blocks-of-android-8a346570033"&gt;https://medium.com/stacklearning/basic-building-blocks-of-android-8a346570033&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://acadgild.com/blog/android-components-basic-building-block"&gt;https://acadgild.com/blog/android-components-basic-building-block&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>android</category>
      <category>mobiledevelopment</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Day 71-72/100 HTTP and Forms</title>
      <author>Rio Cantre</author>
      <pubDate>Fri, 26 Nov 2021 10:29:30 +0000</pubDate>
      <link>https://dev.to/riocantre/day-71-72100-http-and-forms-2bjj</link>
      <guid>https://dev.to/riocantre/day-71-72100-http-and-forms-2bjj</guid>
      <description>&lt;p&gt;"Communication must be stateless in nature [...] such that each request from client to server must contain all of the information necessary to understand the request, and cannot take advantage of any stored context on the server."&lt;/p&gt;

&lt;p&gt;– Roy Fielding, Architectural Styles and the Design of Network-based Software Architectures&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7-05NdYt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9ptkwu4bc64l5o6vium.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7-05NdYt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9ptkwu4bc64l5o6vium.png" alt="script" width="880" height="570"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>programming</category>
      <category>challenge</category>
      <category>motivation</category>
    </item>
  </channel>
</rss>
