<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>roadmap for front-end development</title>
      <author>Souvik</author>
      <pubDate>Sun, 13 Jun 2021 11:11:36 +0000</pubDate>
      <link>https://dev.to/8bitsouvik/roadmap-for-front-end-development-4077</link>
      <guid>https://dev.to/8bitsouvik/roadmap-for-front-end-development-4077</guid>
      <description>&lt;p&gt;There are some great roadmaps for web developers out there. But some make you solve a "puzzle" before even getting started, as there are multiple choices that you have to make.&lt;/p&gt;

&lt;p&gt;When I started to learn Web Development, I wished that I could find an experienced developer who would tell me what they had done to become a Web Developer. Unfortunately, I couldn't find anyone.&lt;/p&gt;

&lt;p&gt;I will also be talking about some example projects that you can build to practice your skills.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tools-you-need-to-know-to-become-a-web-developer"&gt;
  &lt;/a&gt;
  Tools You Need to Know to Become a Web Developer
&lt;/h4&gt;

&lt;p&gt;I'll assume that you are a beginner. In that case, there are a few tools that you need to know before getting into programming.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#vs-code-or-other-code-editor"&gt;
  &lt;/a&gt;
  VS Code (or other code editor)
&lt;/h5&gt;

&lt;p&gt;First, you should learn how to use Visual Studio Code, which is a source code editor. It is a free and powerful tool.&lt;/p&gt;

&lt;p&gt;In the beginning, I recommend learning some of the basic shortcuts and installing some of the extensions like &lt;strong&gt;ESlint&lt;/strong&gt;, &lt;strong&gt;Prettier&lt;/strong&gt;, or &lt;strong&gt;Live Server&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here's a free, full-length course on the freeCodeCamp YouTube channel to get you started.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#the-command-line"&gt;
  &lt;/a&gt;
  The Command Line
&lt;/h5&gt;

&lt;p&gt;Next, you need to know about the Command-Line. You should learn what it is, and some of the basic commands like how to move around directories, how to create a new directory, or how to create a new file.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#version-control-git-and-github"&gt;
  &lt;/a&gt;
  Version Control - Git and GitHub
&lt;/h5&gt;

&lt;p&gt;No matter what you do, as a developer, you need to know about Git. Git is a Version Control system used for tracking changes. It is usually used with GitHub, which is a code hosting platform.&lt;/p&gt;

&lt;p&gt;In the beginning, learning Git might be overwhelming, therefore you just need to know some of the basics like how to create a new Repository, how to clone a project, how to make a new commit, and how to pull and push the new changes.&lt;/p&gt;

&lt;p&gt;One of the best ways to practice Git is by working in a team. There, you need to know how to create a new branch, how to make pull requests, and how to resolve conflicts.&lt;/p&gt;

&lt;p&gt;Here's a great Git and GitHub crash course on the freeCodeCamp YouTube channel to get you going with version control.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#design-tools-figma"&gt;
  &lt;/a&gt;
  Design tools - Figma
&lt;/h5&gt;

&lt;p&gt;The last tool is Figma. Figma is a design tool and is free to use for individuals. But here I want to talk about how to use Figma as a developer.&lt;/p&gt;

&lt;p&gt;Alright, so these are the tools that you need to know of when getting started. You don't need to know everything, but be sure that you understand the basics so that you can improve while learning to code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U8m6VtAU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzf76wnrr3ho1rkwh4n4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U8m6VtAU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzf76wnrr3ho1rkwh4n4.jpg" alt="rough idea for roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#html-and-css"&gt;
  &lt;/a&gt;
  HTML and CSS
&lt;/h4&gt;

&lt;p&gt;Next, let's continue with programming languages. And let's start off by talking about Responsive Websites.&lt;/p&gt;

&lt;p&gt;Responsive websites are sites that look good and are usable on all devices or screen sizes. You probably know how important it is to build a responsive website, as people use so many different devices these days.&lt;/p&gt;

&lt;p&gt;So let's jump to the first two languages that you need to know to build a website: HTML and CSS.&lt;/p&gt;

&lt;p&gt;HTML stands for Hypertext Markup Language. It it is used to build the skeleton for your website. HTML is not difficult to learn, but you might want to pay more attention to HTML forms as they will be fundamental in the future.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#css-stands-for-cascading-style-sheets-this-is-a-markup-language-but-i-also-consider-it-to-be-a-programming-language-css-is-not-necessarily-difficult-to-learn-but-its-difficult-to-master"&gt;
  &lt;/a&gt;
  CSS stands for Cascading Style Sheets. This is a markup language but I also consider it to be a programming language. CSS is not necessarily difficult to learn but it's difficult to master.
&lt;/h6&gt;

&lt;p&gt;There are few topics that you want to pay more attention to like:&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Box model&lt;/strong&gt; - how margins, padding, and borders work together.&lt;br&gt;
• &lt;strong&gt;CSS units&lt;/strong&gt; - used for expressing lengths (e.g: rem, vh, and vw).&lt;br&gt;
• &lt;strong&gt;Position&lt;/strong&gt; - specifies the type of positioning method. It also confuses many people so make sure you spend some time on it.&lt;br&gt;
• &lt;strong&gt;Variables&lt;/strong&gt; - or Custom properties are entities that can be reused throughout a document. This is my favorite feature in CSS. They make working with CSS so enjoyable and you can create themes with just a few lines of code.&lt;br&gt;
• &lt;strong&gt;Media query&lt;/strong&gt; - decides what to show on different screen sizes. They are a key component of responsive design.&lt;br&gt;
• &lt;strong&gt;Animation&lt;/strong&gt; - lets an element change from one style to another. If you know how to use animation correctly, it makes your site stand out. Otherwise, it will make your website look unprofessional, so be careful.&lt;br&gt;
• &lt;strong&gt;Flexbox, CSS Grid&lt;/strong&gt; - used for building Responsive layouts (I forgot to mention this in the video).&lt;/p&gt;

&lt;p&gt;When you know the basics of HTML and CSS, the next step is to build some basic websites. For example, you can try a Homepage, a Form like a login page or a checkout page. You can even build a Portfolio. You can find example projects on DevChallenges.io.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#website-deployment"&gt;
  &lt;/a&gt;
  Website deployment
&lt;/h4&gt;

&lt;p&gt;Once you have your website, you need to put it on the internet, so people can see it. Deployment is the process of deploying your code to a hosting platform.&lt;/p&gt;

&lt;p&gt;Back in the day it was a lot more difficult to do. But now, it's super easy and you can use tools like GitHub Pages, Netlify, or Vercel.&lt;/p&gt;

&lt;p&gt;Here's a full YouTube course on how to get your site online that covers the entire process from start to finish.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#javascript-fundamentals"&gt;
  &lt;/a&gt;
  JavaScript - Fundamentals
&lt;/h5&gt;

&lt;p&gt;Alright, the next topic is JavaScript. JavaScript is a popular programming language and is widely used for Web Development, among other things.&lt;/p&gt;

&lt;p&gt;You will need to learn some of the basic features of the language like Data Types, Loops, and Conditionals.&lt;/p&gt;

&lt;p&gt;Then there are topics that you will want to dive deeper into.&lt;/p&gt;

&lt;p&gt;First, we have debugging. This is the process of finding and fixing errors. Here's a great in-depth guide to bug squashing to get you started.&lt;/p&gt;

&lt;p&gt;Then there are other topics like Objects, Primitives, and Arrays. Especially when working with Arrays, you need to know about Array methods as well.&lt;/p&gt;

&lt;p&gt;Functions are the main building blocks in your program. So make sure that you don't overlook them.&lt;/p&gt;

&lt;p&gt;One of my favorite features in JavaScript is &lt;strong&gt;de-structuring&lt;/strong&gt; – it is easy to write and makes the language super powerful.&lt;/p&gt;

&lt;p&gt;And no matter how good you are with programming, you will have errors in your scripts. This means you'll want to know about Error handling as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asynchronous programming&lt;/strong&gt; is important, especially when you need to communicate with the server. So spend some time learning about Promises and &lt;strong&gt;Async/Await&lt;/strong&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#javascript-browser"&gt;
  &lt;/a&gt;
  JavaScript - Browser
&lt;/h5&gt;

&lt;p&gt;Let's move on to how JavaScript is used in the browser.&lt;/p&gt;

&lt;p&gt;First, you need to know what a Document Object Model or DOM is. Then you need to know how to get elements, how to change the classes, or how to change the style with JavaScript.&lt;/p&gt;

&lt;p&gt;After that you have to introduced with JS DOM (Document Object Model)&lt;/p&gt;

&lt;p&gt;You also need to learn about different User Interface Events like click, mouse over, mouse down, and so on.&lt;/p&gt;

&lt;p&gt;And, you'll also want to pay more attention to Forms in JavaScript as they have many events and properties&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#javascript-other-features"&gt;
  &lt;/a&gt;
  JavaScript - Other features
&lt;/h4&gt;

&lt;p&gt;The Fetch API is an important topic. It lets you send network requests to servers. This is useful, for example, when we need to submit a form or get a user's information.&lt;/p&gt;

&lt;p&gt;Another important topic is Storing Data in the browser. Here you need to know what the differences are between &lt;strong&gt;Cookies&lt;/strong&gt;, &lt;strong&gt;LocalStorage&lt;/strong&gt;, and &lt;strong&gt;sessionStorage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Other less important topics when you are just getting started are &lt;strong&gt;Regular expressions&lt;/strong&gt;, &lt;strong&gt;Web Components&lt;/strong&gt;, and &lt;strong&gt;Websockets&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Regular expressions are used to search and replace text. Web Components, are a new thing but you should totally check them out.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#lastly-we-have-websockets-they-are-useful-when-you-need-to-have-continuous-data-exchanges-like-in-chat-applications"&gt;
  &lt;/a&gt;
  Lastly, we have Websockets. They are useful when you need to have continuous data exchanges like in chat applications.
&lt;/h6&gt;

&lt;p&gt;So after learning Javascript, you might want to spend some time to learn about TypeScript. I love TypeScript as it gives me a safe feeling while writing code.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#typescript-provides-static-typing-that-allows-you-to-catch-errors-earlier-in-the-debugging-process-it-also-saves-your-time-as-it-finds-bugs-before-the-code-runs"&gt;
  &lt;/a&gt;
  TypeScript provides static typing, that allows you to catch errors earlier in the debugging process. It also saves your time as it finds bugs before the code runs.
&lt;/h6&gt;

&lt;p&gt;Here's a helpful post on TypeScript types to help you think about them the right way.&lt;/p&gt;

&lt;p&gt;You can stop here and start working on some projects. But personally, I would continue by learning at least one framework. Then you can practice JavaScript at the same time.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to publish packages to npm</title>
      <author>Clément Gaudinière</author>
      <pubDate>Sun, 13 Jun 2021 11:04:13 +0000</pubDate>
      <link>https://dev.to/clementgaudiniere/how-to-publish-packages-to-npm-dg</link>
      <guid>https://dev.to/clementgaudiniere/how-to-publish-packages-to-npm-dg</guid>
      <description>&lt;p&gt;Hello everyone, have you ever created a project that should be accessible to all and quickly ? Fortunately, thanks to the npm package system, you can download any package in one command line. Today in this tutorial I'm going to show you how to publish your package to npm, so that it's available to everyone. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;The first thing you will need is to have Node.js installed on your machine. To do this, go to the official Node.js website, and download the &lt;a href="https://nodejs.org/en/"&gt;latest version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second thing you will need is an npm account. If you don't have one, you can create one for free on this page: &lt;a href="https://www.npmjs.com/signup"&gt;https://www.npmjs.com/signup&lt;/a&gt;. This step is essential as you can only publish packages if you are logged in. Once you have created your account, and validated your email address (required), memorize your username and password.&lt;/p&gt;

&lt;p&gt;Once this is done, you are ready to go !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#publish-to-npm"&gt;
  &lt;/a&gt;
  Publish to npm
&lt;/h2&gt;

&lt;p&gt;Often, when we publish a package on npm, it is on a GitHub repository. In our example, we will imagine that the GitHub package is called: example-package, and is available at this address : &lt;a href="https://github.com/user/exemple-package"&gt;https://github.com/user/exemple-package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Go to your project folder, and open a command prompt. In this one, enter &lt;code&gt;npm login&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm login
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You then enter your npm username (that's why you had to remember it) and your password. Don't worry, if you don't see the number of characters in the password, it's perfectly normal (linuxians know).&lt;/p&gt;

&lt;p&gt;Now you will have to create a file named package.json, to do this you can use the following command : &lt;code&gt;npm init&lt;/code&gt;. It allows you to fill in all the necessary fields from the command prompt.  Be careful though, the package name must be unique, so you may not be able to choose a package name that is already taken. Then enter the version or click on enter, then the description, etc.  For the git repository, you enter the url of your repository, in my case, it is &lt;a href="https://github.com/user/exemple-package"&gt;https://github.com/user/exemple-package&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm init
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this step is complete, you can check your package.json file to see if everything is in order.&lt;/p&gt;

&lt;p&gt;Now it's the big moment, you are ready to publish your package on the npm network with the magic command : &lt;code&gt;npm publish&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm publish
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can test if your package is on the npm network, by going into an empty folder and running the command &lt;code&gt;npm install [name]&lt;/code&gt; in my case, this gives: &lt;code&gt;npm install example-package&lt;/code&gt;. If any files appear in your folder, it has worked. Packages are often found in a folder called &lt;code&gt;node_modules&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hope this tutorial has helped you publish your own package on the NPM network. If you have any questions, don't hesitate to ask them in the comments. See you next time for another tutorial. 👍&lt;/p&gt;

</description>
      <category>node</category>
      <category>github</category>
      <category>npm</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Do you need variable fonts?</title>
      <author>Julien Maury</author>
      <pubDate>Sun, 13 Jun 2021 11:03:16 +0000</pubDate>
      <link>https://dev.to/jmau111/do-you-need-variable-fonts-5dh4</link>
      <guid>https://dev.to/jmau111/do-you-need-variable-fonts-5dh4</guid>
      <description>&lt;p&gt;The history of fonts begins long before digital technology (centuries ago). At that time, people use several frames of metal letters to print long pages of text.&lt;/p&gt;

&lt;p&gt;With digital fonts, you have a large choice of free and paid resources to style your pages. The challenge is to choose the right fonts for the right design, though.&lt;/p&gt;

&lt;p&gt;In any case, without this wide variety of typefaces and fonts, the web would be the most boring place in the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;Most people use terms such as "fonts" and "typefaces" interchangeably, and I'll do the same in this post, even if it's not the same thing. &lt;/p&gt;

&lt;p&gt;It makes sense, though, especially with variable typefaces.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digital-fonts-in-short"&gt;
  &lt;/a&gt;
  Digital fonts in short
&lt;/h2&gt;

&lt;p&gt;Anyone can use digital fonts. There are multiple ways to customize fonts, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.cssfontstack.com/"&gt;pre-installed fonts&lt;/a&gt; (via the operating system)&lt;/li&gt;
&lt;li&gt;self-hosted fonts via the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face"&gt;&lt;code&gt;@font-face&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Google font embeds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;N.B.: note that Google allows you now to download its fonts if you want to self-host them, and if you care about performances, you should consider this option&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-fontface-endraw-css-at-rule"&gt;
  &lt;/a&gt;
  The &lt;code&gt;@font-face&lt;/code&gt; CSS at rule
&lt;/h2&gt;

&lt;p&gt;The modern way to declare self-hosted fonts is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@font-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"MyFancyFont"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('path/to/fancyfont.woff2')&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'woff2'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="sx"&gt;url('path/to/fancyfont.woff')&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'woff'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you need support for ancient browsers, you can extend it with TrueType (ttf) and Embedded OpenType (eot) formats. The browser takes the first rule it understands. That's why we write the WOFF2 version first. WOFF is a format with a specific compression algorithm.&lt;/p&gt;

&lt;p&gt;Once you've done that, you can use &lt;code&gt;MyFancyFont&lt;/code&gt; in your CSS, for example, with the &lt;code&gt;font-family&lt;/code&gt; and the &lt;code&gt;font-weight&lt;/code&gt; properties to style HTML elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"MyFancyFont"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that your source files &lt;strong&gt;MUST be compatible&lt;/strong&gt; with all variations (fonts) you use in your CSS. Otherwise, you might get entire "unstyled" areas in your web pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-variable-fonts"&gt;
  &lt;/a&gt;
  What are variable fonts
&lt;/h2&gt;

&lt;p&gt;OpenType Variable fonts are now &lt;a href="https://caniuse.com/variable-fonts"&gt;supported in most browsers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While a classic font provides a specific variation only, a variable font can give all possible styles and weights in a single file.&lt;/p&gt;

&lt;p&gt;This approach is pretty convenient for styling as there's only one file to load, and everything works (styles, weights, sizes).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;N.B.: after some researches for this post, I learned there could be two files actually, but it's not more than that&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I sometimes read it's excellent for performances. It does have an impact as loading one single file, even if it's larger than a classic font file, is still smaller than loading nine or ten classic font files.&lt;/p&gt;

&lt;p&gt;However, if you use HTTP2, you care less about the number of HTTP requests as all static files get loaded in parallel, and the expected performance gain might not happen.&lt;/p&gt;

&lt;p&gt;Anyway, it's beneficial if you use many variations (many fonts), but convenience and flexibility are stronger arguments in favor of variable fonts, IMHO.&lt;/p&gt;

&lt;p&gt;Variable fonts contain all possible permutations, so you get everything you need to style all HTML elements.&lt;/p&gt;

&lt;p&gt;Here is a CSS example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@supports&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;font-variation-settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@font-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"MyVariableFont"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('path/to/myvariablefont.woff2')&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'woff2'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
      &lt;span class="sx"&gt;url('path/to/myvariablefont.woff')&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'woff'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt; &lt;span class="m"&gt;900&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"MyVariableFont"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;em&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.italic&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;350&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;font-variation-settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'ital'&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;font-variation-settings&lt;/code&gt; is not the only property you can use. You can visit &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide"&gt;MDN - variable fonts&lt;/a&gt; to get details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-concept-of-axes"&gt;
  &lt;/a&gt;
  The concept of "axes"
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Axes&lt;/strong&gt; are ranges for specific aspects of the typeface. For example, weight, width, and optical size are called &lt;strong&gt;registered axes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With the weight axis, you control the lightness or the heaviness. The width defines whether letters are condensed or extended. The optical size allows for varying the overall stroke thickness of letterforms based on physical size.&lt;/p&gt;

&lt;p&gt;There are slant and italic axes too. They allow for tuning the angle of the letterforms.&lt;/p&gt;

&lt;p&gt;The font developer can also define &lt;strong&gt;custom axes&lt;/strong&gt; with a four-letter identifier. This way, you can call this custom variation in your CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.myelement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/*BIRD had no particular meaning here, it's just four letters*/&lt;/span&gt;
  &lt;span class="py"&gt;font-variation-settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'wght'&lt;/span&gt; &lt;span class="m"&gt;350&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;'BIRD'&lt;/span&gt; &lt;span class="m"&gt;777&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea is to customize the typeface accurately to get the best result in terms of readability, legibility, and aesthetics, without the hassle of loading one file per each variation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide"&gt;Source: MDN - variable fonts&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use
&lt;/h2&gt;

&lt;p&gt;Let's answer the central question: "Do you need it?"&lt;/p&gt;

&lt;p&gt;In short, if you don't have a complex design to code that needs many variations of the same typefaces, it makes less sense to use variable fonts. Besides, the performance gain in terms of loading is not guaranteed.&lt;/p&gt;

&lt;p&gt;It doesn't do evil, and it's quite an exciting feature, but be aware it only makes a difference when there are many variations involved.&lt;/p&gt;

&lt;p&gt;However, it could have a significant impact on accessibility. It's not something I read everywhere, but I think that's a critical point.&lt;/p&gt;

&lt;p&gt;Variable fonts allow for improving readability and legibility. In addition, it's easier to adjust the font size, weight, and many properties according to the screen size and the user's preferences.&lt;/p&gt;

&lt;p&gt;This way, it's easier to adjust information density too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As it's not uncommon to have complex designs nowadays and use more than ten different weight and width combinations in a typographic system, variable fonts can save considerable time. Moreover, it provides way more flexibility than classic fonts.&lt;/p&gt;

&lt;p&gt;It's beneficial for branding, and it can also improve accessibility for the web.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@charissek?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Charisse Kenion&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/font?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
    </item>
    <item>
      <title>Authentication and Authorization in a Microservice Architecture | OAuth 2.0 | JWT</title>
      <author>Srajan Gupta</author>
      <pubDate>Sun, 13 Jun 2021 10:52:34 +0000</pubDate>
      <link>https://dev.to/srajangupta__/authentication-and-authorization-in-a-microservice-architecture-oauth-2-0-jwt-59lg</link>
      <guid>https://dev.to/srajangupta__/authentication-and-authorization-in-a-microservice-architecture-oauth-2-0-jwt-59lg</guid>
      <description>&lt;p&gt;In this video tutorial, we will be looking into:&lt;br&gt;
1) How Authentication and Authorization work in a Microservice Architecture?&lt;br&gt;
2) What problems do we face when performing Authentication in Microservices? &lt;br&gt;
3) What could be the best possible solution to Authentication and Authorization in Microservices?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Rn8ts-3eayc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>authentication</category>
      <category>authorization</category>
      <category>systemdesign</category>
    </item>
    <item>
      <title>vim and the quickfix list: jump to a location, search and replace in multiple files, and other shenanigans</title>
      <author>Heiker</author>
      <pubDate>Sun, 13 Jun 2021 10:18:39 +0000</pubDate>
      <link>https://dev.to/vonheikemen/vim-and-the-quickfix-list-jump-to-a-location-search-and-replace-in-multiple-files-and-other-shenanigans-3ki8</link>
      <guid>https://dev.to/vonheikemen/vim-and-the-quickfix-list-jump-to-a-location-search-and-replace-in-multiple-files-and-other-shenanigans-3ki8</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Puedes leer la versión en español &lt;a href="https://dev.to/vonheikemen/vim-y-el-quickfix-list-saltar-a-una-ubicacion-buscar-y-reemplazar-en-multiples-archivos-y-otras-curiosidades-13n4"&gt;aquí&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are going to learn about an avanced feature of vim, the quickfix list. We're going to figure out how to use it to search (and replace) a pattern in multiple files, and also how can we jump to the location of an error thrown by an external command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quickfix-list"&gt;
  &lt;/a&gt;
  Quickfix list
&lt;/h2&gt;

&lt;p&gt;Is a special mode where vim show us a list of positions, meaning line and column numbers in a file. This list was made to save the position of the errors we see in the error message of a compiler. This way we could jump quickly to this location, fix the bug and then go to the next or try to compile the code again.&lt;/p&gt;

&lt;p&gt;My description can make it sound like a feature with a very minimal scope, but fear not, there is more to it than that. For starters the quickfix list can be created in different ways. We can create it with commands like &lt;code&gt;:make&lt;/code&gt;, &lt;code&gt;:vimgrep&lt;/code&gt; and &lt;code&gt;:grep&lt;/code&gt;. And can also be created programatically with the help of the &lt;code&gt;setqflist&lt;/code&gt; function, so we do have a great deal of flexibility.&lt;/p&gt;

&lt;p&gt;I feel the need to tell you that when I say quickfix list I literally mean the list of positions. There are two ways we can see this list, we have the &lt;code&gt;quickfix window&lt;/code&gt; and the &lt;code&gt;location list&lt;/code&gt;. Both of these are "windows" in which the quickfix list is shown. The quickfix window is global, we can only have one in the current active vim session. Meanwhile, we can have many location lists in the current active vim session&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jump-to-a-location"&gt;
  &lt;/a&gt;
  Jump to a location
&lt;/h2&gt;

&lt;p&gt;So, our journey throught the wonderful quickfix list begins with the &lt;code&gt;:make&lt;/code&gt; command, this is one of vim's native way of calling a compiler. But does the name &lt;code&gt;make&lt;/code&gt; sound familiar to you? If so, I can assure you it is not a coincidence. vim does assume we have &lt;a href="https://www.gnu.org/software/make/"&gt;make&lt;/a&gt; installed on our system. How can you be sure? Well, let's make a test. Create a file called &lt;code&gt;Makefile&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="nl"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;test another&lt;/span&gt;

&lt;span class="nl"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="err"&gt;@echo&lt;/span&gt; &lt;span class="s1"&gt;'hello'&lt;/span&gt;

&lt;span class="nl"&gt;another&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="err"&gt;@echo&lt;/span&gt; &lt;span class="s1"&gt;'another'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;In this post I will not tell you how to use &lt;code&gt;make&lt;/code&gt; but if you want to know how you can use it like a regular task runner you can &lt;a href="https://vinta.ws/code/use-makefile-as-the-task-runner-for-arbitrary-projects.html"&gt;read this one&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you call the &lt;code&gt;:make&lt;/code&gt; command you should get something like this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hello

(1 de 1): hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;make&lt;/code&gt;'s default behaviour is to execute the first "task" it sees in our &lt;code&gt;Makefile&lt;/code&gt;. Cool, but then how do we get it to execute &lt;code&gt;another&lt;/code&gt;? We just provide more arguments to our command, like this: &lt;code&gt;:make [argument]&lt;/code&gt;. If you try to execute &lt;code&gt;:make another&lt;/code&gt; you should get this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;another

(1 de 1): another
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's fine, but those commands don't output any error. After showing the messages nothing happens.&lt;/p&gt;

&lt;p&gt;This is the perfect time for our first contrived example. Since vim knows how to "read" the errors &lt;code&gt;gcc&lt;/code&gt; gives let me show you an example using C.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#an-example-in-c"&gt;
  &lt;/a&gt;
  An example in C
&lt;/h3&gt;

&lt;p&gt;So let's create a file &lt;code&gt;hello.c&lt;/code&gt; with this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Notice that there is nothing wrong here. We can compile this thing easily using &lt;code&gt;make&lt;/code&gt;. So our next step will be to create a &lt;code&gt;Makefile&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="nl"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;run-hello&lt;/span&gt;

&lt;span class="nl"&gt;run-hello&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="err"&gt;gcc&lt;/span&gt; &lt;span class="err"&gt;-Wall&lt;/span&gt; &lt;span class="err"&gt;-o&lt;/span&gt; &lt;span class="err"&gt;hello&lt;/span&gt; &lt;span class="err"&gt;hello.c&lt;/span&gt;
  &lt;span class="err"&gt;./hello&lt;/span&gt;
  &lt;span class="err"&gt;rm&lt;/span&gt; &lt;span class="err"&gt;./hello&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With everything in place, we can run &lt;code&gt;:make --silent run-hello&lt;/code&gt;. If we did everything right we should have our &lt;code&gt;hello world&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello, World!

(1 de 1): Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If we introduce an error, like say delete a semicolon, this is what we should get.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hello.c: In function ‘main’:
hello.c:4:28: error: expected ‘;’ before ‘return’
    printf("Hello, World!\n")
                            ^
                            ;
    return 0;
    ~~~~~~
make: *** [Makefile:7: run-hello] Error 1

(2 de 8): error: expected ‘;’ before ‘return’
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After showing this message you'll notice that vim took you to the location of the error (how cool is that?). If you want to check the content of the quickfix list you'll need to open the quickfix window using the &lt;code&gt;:copen&lt;/code&gt; command. You should have something like this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;|| hello.c: In function ‘main’:
hello.c|4 col 28| error: expected ‘;’ before ‘return’                  
||     printf("Hello, World!\n")
||                             ^
||                             ;
||     return 0;
||     ~~~~~~
make: *** [Makefile|7| run-hello] Error 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;To close the quickfix window we use the &lt;code&gt;:cclose&lt;/code&gt; command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now pay attention to this line.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hello.c|4 col 28| error: expected ‘;’ before ‘return’
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In here vim is telling us where is the error, it's showing the file name, the line and the column. Right now what we should do is fix the bug and try to compile again. For the most part this is the workflow that we want. But if you do have more than one item in the quickfix list you could navigate between them using the commands &lt;code&gt;:cnext&lt;/code&gt; and &lt;code&gt;:cprev&lt;/code&gt;, to go forward and backwards in the quickfix list.&lt;/p&gt;

&lt;p&gt;This is nice and all but what happens if we don't use &lt;code&gt;gcc&lt;/code&gt;? What if we use &lt;code&gt;nodejs&lt;/code&gt;? Could vim handle it? Yes, with some help.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#errorformat"&gt;
  &lt;/a&gt;
  errorformat
&lt;/h3&gt;

&lt;p&gt;If you start using other compilers or interpreters you'll notice that vim can't read properly all the error messages they give you. To overcome this vim offers an option called &lt;code&gt;errorformat&lt;/code&gt;, a variable that can store the "shape" of an error message, this way vim can recognize it when they appear in the quickfix list.&lt;/p&gt;

&lt;p&gt;To test this thing let's try make vim read the errors &lt;code&gt;node&lt;/code&gt; shows us. Start by creating a file called &lt;code&gt;greeting.js&lt;/code&gt; and make a simple "hello world" that has an error.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello, World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now in our &lt;code&gt;Makefile&lt;/code&gt; let's add another task.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="nl"&gt;run-greeting&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="err"&gt;node&lt;/span&gt; &lt;span class="err"&gt;./greeting.js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If we try to run &lt;code&gt;:make --silent run-greeting&lt;/code&gt; we'll get this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(greeting);
            ^

ReferenceError: Cannot access 'greeting' before initialization
    at Object.&amp;lt;anonymous&amp;gt; (/tmp/test/greeting.js:1:13)
    at Module._compile (internal/modules/cjs/loader.js:1063:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)
    at Module.load (internal/modules/cjs/loader.js:928:32)
    at Function.Module._load (internal/modules/cjs/loader.js:769:14)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
    at internal/main/run_main_module.js:17:47
make: *** [Makefile:4: run-greeting] Error 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;vim will try to take us to the location of the error but it is not likely to succeed. In my case, it tried to take me to a file it doesn't exists.&lt;/p&gt;

&lt;p&gt;To fix this we need to tell vim how to read these messages. I'm going to show one way of doing it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;errorformat&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;%E%&lt;span class="p"&gt;.&lt;/span&gt;%#ReferenceError&lt;span class="p"&gt;:&lt;/span&gt;\ %&lt;span class="k"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;%Z%&lt;span class="p"&gt;.&lt;/span&gt;%#%at\ Object&lt;span class="p"&gt;.&amp;lt;&lt;/span&gt;anonymous&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;\ &lt;span class="p"&gt;(&lt;/span&gt;%&lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;%&lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;%&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In here we specify the "shape" of each line in the error message or at least the ones we care about. Each line has its own format and must be separated by a coma. That means...&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;%E%.%#ReferenceError:\ %m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;%Z%.%#%at\ Object.&amp;lt;anonymous&amp;gt;\ (%f:%l:%c)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Are two expressions that tell vim how to read the error message. We are telling vim where it can find the type of the error (&lt;code&gt;ReferenceError&lt;/code&gt;) and where is the location data of the error. In our example those two things are in separate lines so we must have these expressions separated by a coma.&lt;/p&gt;

&lt;p&gt;If we want to improve readability we could also try to write it this way.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;errorformat&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;%E%&lt;span class="p"&gt;.&lt;/span&gt;%#ReferenceError&lt;span class="p"&gt;:&lt;/span&gt;\ %&lt;span class="k"&gt;m&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;errorformat&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;%Z%&lt;span class="p"&gt;.&lt;/span&gt;%#%at\ Object&lt;span class="p"&gt;.&amp;lt;&lt;/span&gt;anonymous&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;\ &lt;span class="p"&gt;(&lt;/span&gt;%&lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;%&lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;%&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When we do it this way we don't need to put the coma at the end. But we still need a &lt;code&gt;\&lt;/code&gt; before each special character (like a blank space) so there is no conflict between vim's syntax and the error format. If you find that annoying you could try another way.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;errorformat&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
&lt;span class="se"&gt;  \&lt;/span&gt; &lt;span class="s1"&gt;'%E%.%#ReferenceError: %m,'&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="se"&gt;  \&lt;/span&gt; &lt;span class="s1"&gt;'%Z%.%#at Object.&amp;lt;anonymous&amp;gt; (%f:%l:%c)'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When we use &lt;code&gt;let&lt;/code&gt; we have the oportunity to use strings to write our formats, &lt;br&gt;
avoiding any sort of conflict between vim's syntax and the &lt;code&gt;errorformat&lt;/code&gt;. To further improve readability I have every expression in its own line, taking advantage of the &lt;code&gt;.&lt;/code&gt; operator to concat these strings.&lt;/p&gt;

&lt;p&gt;Now if we try to run &lt;code&gt;:make --silent run-greeting&lt;/code&gt; vim will take us to the right place, which is where &lt;code&gt;node&lt;/code&gt; says the error is. The quickfix should show us this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;|| /tmp/test/greeting.js:1
|| console.log(greeting);
||             ^
|| 
greeting.js|1 col 13 error| Cannot access 'greeting' before initialization
||     at Module._compile (internal/modules/cjs/loader.js:1063:30)
||     at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)
||     at Module.load (internal/modules/cjs/loader.js:928:32)
||     at Function.Module._load (internal/modules/cjs/loader.js:769:14)
||     at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
||     at internal/main/run_main_module.js:17:47
|| make: *** [Makefile:4: run-greeting] Error 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now the &lt;code&gt;ReferenceError&lt;/code&gt; is no longer on the quickfix list, neither the line that was below. Those has been replaced with this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;greeting.js|1 col 13 error| Cannot access 'greeting' before initialization
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If vim shows that, it means the &lt;code&gt;errorformat&lt;/code&gt; worked.&lt;/p&gt;

&lt;p&gt;We have a bit of an issue, those two expressions will only work with a &lt;code&gt;ReferenceError&lt;/code&gt; type. You probably need more than that in your day to day workflow. We should really have something like this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;errorformat&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
&lt;span class="se"&gt;  \&lt;/span&gt; &lt;span class="s1"&gt;'%E%.%#AssertionError %m,'&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="se"&gt;  \&lt;/span&gt; &lt;span class="s1"&gt;'%E%.%#TypeError: %m,'&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="se"&gt;  \&lt;/span&gt; &lt;span class="s1"&gt;'%E%.%#ReferenceError: %m,'&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="se"&gt;  \&lt;/span&gt; &lt;span class="s1"&gt;'%E%.%#SyntaxError: %m,'&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="se"&gt;  \&lt;/span&gt; &lt;span class="s1"&gt;'%E%.%#RangeError: %m,'&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="se"&gt;  \&lt;/span&gt; &lt;span class="s1"&gt;'%Z%.%#at Object.&amp;lt;anonymous&amp;gt; (%f:%l:%c),'&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="se"&gt;  \&lt;/span&gt; &lt;span class="s1"&gt;'%-G%.%#'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#special-tokens"&gt;
  &lt;/a&gt;
  Special tokens
&lt;/h4&gt;

&lt;p&gt;That's a lot weird stuff, stuff you might want to know about. Let's dive a little bit into the syntax I use in that last example.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%f&lt;/code&gt;: Is the filepath where the error was found.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%l&lt;/code&gt;: Is the line number where the error was found.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%c&lt;/code&gt;: Is the column number where the error was found.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%m&lt;/code&gt;: Is the error message. In our example we use it to capture the text that's right after the type of the error.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%E&lt;/code&gt;: Tells vim this is the beginning of a multi-line error message. The letter &lt;code&gt;E&lt;/code&gt; means this is an error. There other types of messages like warnings (&lt;code&gt;%W&lt;/code&gt;), informative (&lt;code&gt;%I&lt;/code&gt;) or general purpose (&lt;code&gt;%G&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%Z&lt;/code&gt;: Means is the end of the message. Specifically, that is the last line of the message.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%.%#&lt;/code&gt;: This one is a wildcard, one that matches everything. So, you could read &lt;code&gt;%Z%.%#at Object.&amp;lt;anonymous&amp;gt; (%f:%l:%c)&lt;/code&gt; like this: The last line of this message (&lt;code&gt;%Z&lt;/code&gt;) can start with anything (&lt;code&gt;%.%#&lt;/code&gt;) followed by &lt;code&gt;at Object.&amp;lt;anonymous&amp;gt;&lt;/code&gt; and in parenthesis you'll find the filepath (&lt;code&gt;%f&lt;/code&gt;), the line number (&lt;code&gt;%l&lt;/code&gt;) and the column (&lt;code&gt;%c&lt;/code&gt;) where the error was found.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%-&lt;/code&gt;: Tells vim it should exclude this piece from the quickfix window. &lt;code&gt;%-G&lt;/code&gt; could be read like "don't include this message." In our example we use &lt;code&gt;%-G%.%#&lt;/code&gt; which means "ignore everything else." Now, since &lt;code&gt;%.%#&lt;/code&gt; matches everything, we put this expression last.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to know more about the special tokens the &lt;code&gt;errorformat&lt;/code&gt; can have run the command &lt;code&gt;:help errorformat&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#makeprg"&gt;
  &lt;/a&gt;
  makeprg
&lt;/h3&gt;

&lt;p&gt;By now you know you can make vim read any type of error but the current configuration is still tied to &lt;code&gt;make&lt;/code&gt;. It doesn't have to be like that. We can change the command vim calls when we run &lt;code&gt;:make&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's say we want to use &lt;code&gt;node&lt;/code&gt;, just &lt;code&gt;node&lt;/code&gt;, to achieve this we need to change the option &lt;code&gt;makeprg&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;makeprg&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Or we can do.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;makeprg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'node'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now instead of using &lt;code&gt;:make --silet run-greeting&lt;/code&gt; we can run &lt;code&gt;:make ./greeting.js&lt;/code&gt; or &lt;code&gt;:make %&lt;/code&gt; if we are already editing &lt;code&gt;greeting.js&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#search"&gt;
  &lt;/a&gt;
  Search
&lt;/h2&gt;

&lt;p&gt;Jumping to an error is not the only feature of the quickfix list, we can also use it to explore the code we are working on. For this vim has commands like &lt;code&gt;:grep&lt;/code&gt; and &lt;code&gt;:vimgrep&lt;/code&gt;, they create a quickfix list with the results of a search.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vimgrep"&gt;
  &lt;/a&gt;
  vimgrep
&lt;/h3&gt;

&lt;p&gt;With this command we can take advantage of the built-in search engine that &lt;br&gt;
comes with vim. It is very much like the good old &lt;a href="https://linux.die.net/man/1/grep"&gt;grep&lt;/a&gt;, but the &lt;code&gt;:vimgrep&lt;/code&gt; command uses vim's regex engine. Basically &lt;code&gt;:vimgrep&lt;/code&gt; is what we'll use when we want to search a pattern (a regular expression) in multiple files. This is how you use it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;vimgrep&lt;/span&gt; &lt;span class="sr"&gt;/&amp;lt;pattern&amp;gt;/&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;files&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;/&lt;/code&gt; in the pattern are not mandatory, but they are useful when your pattern has characters that cause a conflict with vim's syntax. Like in this example.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;vimgrep&lt;/span&gt; &lt;span class="sr"&gt;/create table/&lt;/span&gt; db&lt;span class="sr"&gt;/**/&lt;/span&gt;*&lt;span class="p"&gt;.&lt;/span&gt;sql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we are searching the pattern &lt;code&gt;create table&lt;/code&gt; in a folder called &lt;code&gt;db&lt;/code&gt;. And we are searching only in the files that end with &lt;code&gt;.sql&lt;/code&gt; extension&lt;/p&gt;

&lt;p&gt;These delimeters we use in the search pattern don't have to be &lt;code&gt;/&lt;/code&gt;. They could be anything that vim doesn't consider to be an "identifier". Find out more about identifiers in the documentation, using the command &lt;code&gt;:help isident&lt;/code&gt;. This is specially useful when our search pattern already has a &lt;code&gt;/&lt;/code&gt;. Imagine we are searching for a path in our code, we could write our search like this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:vimgrep #/home/user/code# scripts/*.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But what happens when we want to ignore a whole directory in our search? There are several solutions. For starters we could set the option &lt;code&gt;wildignore&lt;/code&gt;. Say we want to ignore a &lt;code&gt;cache&lt;/code&gt; and &lt;code&gt;tmp&lt;/code&gt; directories, we could set &lt;code&gt;wildignore&lt;/code&gt; to something like this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;wildignore&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;*&lt;span class="sr"&gt;/cache/&lt;/span&gt;*&lt;span class="p"&gt;,&lt;/span&gt;*&lt;span class="sr"&gt;/tmp/&lt;/span&gt;*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As far as I can tell &lt;code&gt;wildignore&lt;/code&gt; tells vim the paths that should be excluded when doing a path expansion. For example, if we use this pattern &lt;code&gt;**/*.js&lt;/code&gt; vim will exclude any directory that has &lt;code&gt;/cache/&lt;/code&gt; or &lt;code&gt;/tmp/&lt;/code&gt; anywhere in its path. So &lt;code&gt;:vimgrep&lt;/code&gt; will not search these directories because it will never receive them as arguments. This means &lt;code&gt;wildignore&lt;/code&gt; can affect other commands, and not just &lt;code&gt;:vimgrep&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Some &lt;em&gt;stackoverflow&lt;/em&gt; questions suggest this method may not work all the time. In that case we can try to create the argument list with a backtick expression, these will let you call an external command with your shell. We could for example search only on files tracked by git, like this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;vimgrep&lt;/span&gt; &lt;span class="sr"&gt;/function/&lt;/span&gt; `git &lt;span class="k"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;files&lt;/span&gt;`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this case &lt;code&gt;git ls-files&lt;/code&gt; will give us a list file path which will then be processed by &lt;code&gt;:vimgrep&lt;/code&gt;. Isn't that cool? The best part is that as long as &lt;code&gt;:vimgrep&lt;/code&gt; gets a valid a file list everything will work as expected.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#grep"&gt;
  &lt;/a&gt;
  grep
&lt;/h3&gt;

&lt;p&gt;And then there is the &lt;code&gt;:grep&lt;/code&gt; command. This is vim's way of integrating with the search utility &lt;code&gt;grep&lt;/code&gt;. This command works almost like &lt;code&gt;:vimgrep&lt;/code&gt; but this time we need to use a "syntax" that is compatible with &lt;code&gt;grep&lt;/code&gt;. Take this example.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"create table"&lt;/span&gt; db&lt;span class="sr"&gt;/**/&lt;/span&gt;*&lt;span class="p"&gt;.&lt;/span&gt;sql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Notice I'm not using &lt;code&gt;/&lt;/code&gt; as delimeters, also I'm adding the &lt;code&gt;-r&lt;/code&gt; flag (to enable a recursive search), this is because vim calls &lt;code&gt;grep&lt;/code&gt; in a non-interactive shell and gives all the arguments to &lt;code&gt;grep&lt;/code&gt; as is.&lt;/p&gt;

&lt;p&gt;But now the question is "when should we use &lt;code&gt;:grep&lt;/code&gt; instead of &lt;code&gt;:vimgrep&lt;/code&gt;?" Turns out &lt;code&gt;:grep&lt;/code&gt; is much faster and efficient than &lt;code&gt;:vimgrep&lt;/code&gt;. So, &lt;code&gt;:grep&lt;/code&gt; would be the better choice if your search involves lots of files.&lt;/p&gt;

&lt;p&gt;Okay, that's fine. What about the opposite? What advantage &lt;code&gt;:vimgrep&lt;/code&gt; has over &lt;code&gt;:grep&lt;/code&gt;? Not much I'd say. If you're more familiar with vim's regular expressions maybe that would be a reason to choose &lt;code&gt;:vimgrep&lt;/code&gt;. &lt;code&gt;:vimgrep&lt;/code&gt; also works fine on all platforms, since it's all done inside vim.&lt;/p&gt;

&lt;p&gt;Cross-platform support. That's a problem with &lt;code&gt;:grep&lt;/code&gt;, how does vim solve it? Well, in the same way &lt;code&gt;:make&lt;/code&gt; does. We can configure the external command vim calls with the variable &lt;code&gt;grepprg&lt;/code&gt;. Say that instead of using &lt;code&gt;grep&lt;/code&gt; we want to use &lt;a href="https://github.com/BurntSushi/ripgrep"&gt;ripgrep&lt;/a&gt;, in order to do that we add this to our config.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;grepprg&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;rg\ &lt;span class="p"&gt;--&lt;/span&gt;&lt;span class="k"&gt;vimgrep&lt;/span&gt;\ &lt;span class="p"&gt;--&lt;/span&gt;smart&lt;span class="p"&gt;-&lt;/span&gt;case\ &lt;span class="p"&gt;--&lt;/span&gt;follow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With that in place vim will use &lt;code&gt;rg&lt;/code&gt; with all those arguments included when we invoke &lt;code&gt;:grep&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#special-guess-fzf"&gt;
  &lt;/a&gt;
  Special guess: FZF
&lt;/h3&gt;

&lt;p&gt;The last external search tool I'll mention is &lt;a href="https://github.com/junegunn/fzf.vim"&gt;fzf.vim&lt;/a&gt;. This is a plugin that provides an interface where we can execute an interactive search. I won't get into any details here. Just going to tell you something I found out long after I started using it.&lt;/p&gt;

&lt;p&gt;Turns out we can populate the quickfix list using FZF, specifically with the results of commands like &lt;code&gt;:Rg&lt;/code&gt; or &lt;code&gt;:Ag&lt;/code&gt;. After doing a search you'll have all the matches inside a list ready to be filtered, it's here when you can select an item using &lt;code&gt;tab&lt;/code&gt; or select all using &lt;code&gt;Alt + a&lt;/code&gt;, then press &lt;code&gt;enter&lt;/code&gt;. After this the quickfix list will have every item you selected. This little feature is very useful when you want to execute a certain command only on specific parts of your code using &lt;code&gt;:cdo&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#replace"&gt;
  &lt;/a&gt;
  Replace
&lt;/h2&gt;

&lt;p&gt;Speaking of &lt;code&gt;:cdo&lt;/code&gt;, let me show you one cool thing we can do with it: search and replace in multiple files. If you ever wondered how to do this in vim, the answer is the quickfix list and the &lt;code&gt;:cdo&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;In a simple case where all we want to do is replace a known pattern this is what we do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use our favorite search command &lt;code&gt;:grep&lt;/code&gt;, &lt;code&gt;:vimgrep&lt;/code&gt; or anything that can populate the quickfix list.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 2 (optional):&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open the quickfix window using &lt;code&gt;:copen&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 3:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use &lt;code&gt;:cdo&lt;/code&gt; to execute a command on every item in the quickfix list. In our case what we want to do is replace the pattern, which we can do using this syntax &lt;code&gt;s/{pattern}/{replacement}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Say that our quickfix list is filled with the results of this search.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;vimgrep&lt;/span&gt; node **/*&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Once that is done we can replace the word &lt;code&gt;node&lt;/code&gt; with &lt;code&gt;deno&lt;/code&gt; using this command.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;cdo&lt;/span&gt; s&lt;span class="sr"&gt;/node/&lt;/span&gt;deno/ &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;update&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With it vim will run the command &lt;code&gt;s/node/deno | update&lt;/code&gt; on every item in the quickfix list. We take advantage of the fact &lt;code&gt;:cdo&lt;/code&gt; can execute any valid vim command and actually do two things, we replace the pattern &lt;code&gt;node&lt;/code&gt; and save the changes to the file.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-more-advanced-use-case"&gt;
  &lt;/a&gt;
  A more advanced use case
&lt;/h3&gt;

&lt;p&gt;Now let's take it one step further, suppose we want to replace some pattern but before doing anything we want filter the results so we only change some parts of our code. Basically we don't want to replace all the matches of a search. How do we do it? One way would be changing the quickfix list so it only has the items we want to replace.&lt;/p&gt;

&lt;p&gt;This process will take a bit of effort. First, we need to tell vim how to read its own quickfix list, so we can create modified versions of other quickfix lists. To achieve our goal we need to add a pattern to the &lt;code&gt;errorformat&lt;/code&gt; option. So in your &lt;code&gt;.vimrc&lt;/code&gt; you should have something like this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;errorformat&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;%&lt;span class="k"&gt;f&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;%&lt;span class="k"&gt;l&lt;/span&gt;\ &lt;span class="k"&gt;col&lt;/span&gt;\ %&lt;span class="k"&gt;c&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;%&lt;span class="k"&gt;m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are one step closer but it's still not enough, vim will not let us change the quickfix list. For this we need to be able to write to the buffer where the quickfix list is. We need to run this command.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;modifiable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Once we do that we can delete the items we want, but we can't run &lt;code&gt;:cdo&lt;/code&gt; just yet. We need to save the changes we've made with this command.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;cgetbuffer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, just to be on the safe side, make sure you're going to perform the actions on the correct version of the quickfix list. Run, &lt;code&gt;:cclose&lt;/code&gt; and &lt;code&gt;:copen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally you can execute the substitute command.&lt;/p&gt;

&lt;p&gt;Here is a demo of the whole process.&lt;/p&gt;


&lt;div class="ltag_asciinema"&gt;
  
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;See in &lt;a href="https://asciinema.org/a/385145"&gt;asciinema&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#improving-the-experience"&gt;
  &lt;/a&gt;
  Improving the experience
&lt;/h2&gt;

&lt;p&gt;As you might have noticed the quickfix list is not the most intuitive thing in the world. But we can make it better. I can give you a few suggestions you can add to your &lt;code&gt;.vimrc&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A better grep.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First thing you might want to do is make vim open the quickfix window after doing a search. Lucky for us the official documentation offers something we can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;command&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=+&lt;/span&gt; Grep &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;'silent grep! &amp;lt;args&amp;gt;'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;copen&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think in this case you could change &lt;code&gt;grep&lt;/code&gt; with &lt;code&gt;vimgrep&lt;/code&gt; if you wanted to. The important thing is, with this now you could use &lt;code&gt;:Grep&lt;/code&gt; (with capital &lt;code&gt;G&lt;/code&gt;) to make your search.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigating throught the results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We could "navigate" throught every item in the quickfix list without even opening the quickfix window with this shortcuts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Go to the previous location&lt;/span&gt;
nnoremap &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;q&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;cprev&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Go to the next location&lt;/span&gt;
nnoremap &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;q&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;cnext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Manage your window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your going to use the quickfix window you better have some keybindings to show and hide it easily.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Show the quickfix window&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;co&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;copen&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Hide the quickfix window&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;cc&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;cclose&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The errorformat.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's make sure vim can always read the format on the quickfix list when we want to update it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;augroup quickfix_group
  autocmd&lt;span class="p"&gt;!&lt;/span&gt;
  autocmd &lt;span class="k"&gt;filetype&lt;/span&gt; qf &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;errorformat&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;%&lt;span class="k"&gt;f&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;%&lt;span class="k"&gt;l&lt;/span&gt;\ &lt;span class="k"&gt;col&lt;/span&gt;\ %&lt;span class="k"&gt;c&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;%&lt;span class="k"&gt;m&lt;/span&gt;
augroup END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Keybindings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll also need some keybindings that only work on the quickfix window. You know, so the "advance use case" won't be so tedious.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; QuickfixMapping&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="c"&gt;" Go to the previous location and stay in the quickfix window&lt;/span&gt;
  nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; K &lt;span class="p"&gt;:&lt;/span&gt;cprev&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;zz&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;

  &lt;span class="c"&gt;" Go to the next location and stay in the quickfix window&lt;/span&gt;
  nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; J &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;cnext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;zz&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;

  &lt;span class="c"&gt;" Make the quickfix list modifiable&lt;/span&gt;
  nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;modifiable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;" Save the changes in the quickfix window&lt;/span&gt;
  nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;cgetbuffer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;:&lt;/span&gt;&lt;span class="k"&gt;cclose&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;:&lt;/span&gt;&lt;span class="k"&gt;copen&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;" Begin the search and replace&lt;/span&gt;
  nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;r&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;cdo&lt;/span&gt; s&lt;span class="sr"&gt;//&lt;/span&gt;/ \&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Left&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Left&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;Left&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;Left&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;Left&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

augroup quickfix_group
    autocmd&lt;span class="p"&gt;!&lt;/span&gt;
    autocmd &lt;span class="k"&gt;filetype&lt;/span&gt; qf &lt;span class="k"&gt;call&lt;/span&gt; QuickfixMapping&lt;span class="p"&gt;()&lt;/span&gt;
augroup END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now everything put together.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" :Grep - search and then open the window&lt;/span&gt;
command&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=+&lt;/span&gt; Grep &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;'silent grep! &amp;lt;args&amp;gt;'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;copen&lt;/span&gt;

&lt;span class="c"&gt;" Go to the previous location&lt;/span&gt;
nnoremap &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;q&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;cprev&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Go to the next location&lt;/span&gt;
nnoremap &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;q&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;cnext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Show the quickfix window&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;co&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;copen&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;" Hide the quickfix window&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;cc&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;cclose&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; QuickfixMapping&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="c"&gt;" Go to the previous location and stay in the quickfix window&lt;/span&gt;
  nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; K &lt;span class="p"&gt;:&lt;/span&gt;cprev&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;zz&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;

  &lt;span class="c"&gt;" Go to the next location and stay in the quickfix window&lt;/span&gt;
  nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; J &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;cnext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;zz&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;

  &lt;span class="c"&gt;" Make the quickfix list modifiable&lt;/span&gt;
  nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;modifiable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;" Save the changes in the quickfix window&lt;/span&gt;
  nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;cgetbuffer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;:&lt;/span&gt;&lt;span class="k"&gt;cclose&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;:&lt;/span&gt;&lt;span class="k"&gt;copen&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;" Begin the search and replace&lt;/span&gt;
  nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;r&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;cdo&lt;/span&gt; s&lt;span class="sr"&gt;//&lt;/span&gt;/ \&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Left&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Left&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;Left&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;Left&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;Left&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

augroup quickfix_group
  autocmd&lt;span class="p"&gt;!&lt;/span&gt;

  &lt;span class="c"&gt;" Use custom keybindings&lt;/span&gt;
  autocmd &lt;span class="k"&gt;filetype&lt;/span&gt; qf &lt;span class="k"&gt;call&lt;/span&gt; QuickfixMapping&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c"&gt;" Add the errorformat to be able to update the quickfix list&lt;/span&gt;
  autocmd &lt;span class="k"&gt;filetype&lt;/span&gt; qf &lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;errorformat&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;%&lt;span class="k"&gt;f&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;%&lt;span class="k"&gt;l&lt;/span&gt;\ &lt;span class="k"&gt;col&lt;/span&gt;\ %&lt;span class="k"&gt;c&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;%&lt;span class="k"&gt;m&lt;/span&gt;
augroup END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#plugins"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h3&gt;

&lt;p&gt;If you know how and you're willing to install some plugins I'd recommend these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/romainl/vim-qf"&gt;vim-qf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This one sets some sane defaults to the behaviour of the quickfix window. For example, it can open the quickfix window after calling &lt;code&gt;:grep&lt;/code&gt;, &lt;code&gt;:vimgrep&lt;/code&gt; and even &lt;code&gt;:vimgrep&lt;/code&gt; without having to create new commands. Things don't end there, it also offers some functions we can bind.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Toggle the quickfix window.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;cc&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;qf_qf_toggle&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Navigating throught results
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Go to previous location&lt;/span&gt;
nmap &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;q&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;qf_qf_previous&lt;span class="p"&gt;)&lt;/span&gt;zz

&lt;span class="c"&gt;" Go to next location&lt;/span&gt;
nmap &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;q&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;qf_qf_next&lt;span class="p"&gt;)&lt;/span&gt;zz

&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; QuickfixMapping&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="c"&gt;" Go to the previous location and stay in the quickfix window&lt;/span&gt;
  nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; K &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;qf_qf_previous&lt;span class="p"&gt;)&lt;/span&gt;zz&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;

  &lt;span class="c"&gt;" Go to the next location and stay in the quickfix window&lt;/span&gt;
  nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; J &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;qf_qf_next&lt;span class="p"&gt;)&lt;/span&gt;zz&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

augroup quickfix_group
    autocmd&lt;span class="p"&gt;!&lt;/span&gt;
    autocmd &lt;span class="k"&gt;filetype&lt;/span&gt; qf &lt;span class="k"&gt;call&lt;/span&gt; QuickfixMapping&lt;span class="p"&gt;()&lt;/span&gt;
augroup END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference between these command and the built-in vim commands is, the plugin commands will not throw an error when we reach the end of the list. Meaning that if we are on last location of the list pressing &lt;code&gt;]q&lt;/code&gt; will take us to the first item in the quickfix list.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/stefandtw/quickfix-reflector.vim"&gt;quickfix-reflector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This plugin makes everything I told you in the "advanced use case" section be useless. Once is installed the buffer in the quickfix window acts like a normal buffer. On top of that, every change we make is "reflected" on the actual file.&lt;/p&gt;

&lt;p&gt;Remember the example I showed in the demo. Say we have this on the quickfix list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./test dir/a-file.txt|1 col 11| nnoremap &amp;lt;leader&amp;gt;f :FZF
./test dir/a-file.txt|2 col 11| nnoremap &amp;lt;leader&amp;gt;ff :FZF&amp;lt;CR&amp;gt;
./test dir/a-file.txt|3 col 11| nnoremap &amp;lt;leader&amp;gt;fh :History&amp;lt;CR&amp;gt;
./test dir 2/another-file.txt|1 col 11| nnoremap &amp;lt;leader&amp;gt;? :Maps&amp;lt;CR&amp;gt;
./test dir 2/another-file.txt|2 col 11| nnoremap &amp;lt;leader&amp;gt;bb :Buffers&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now say I modify the list, delete the first and fourth item using &lt;code&gt;dd&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- ./test dir/a-file.txt|1 col 11| nnoremap &amp;lt;leader&amp;gt;f :FZF
&lt;/span&gt;&lt;span class="gi"&gt;+ ./test dir/a-file.txt|1 col 11| nnoremap &amp;lt;AAA&amp;gt;f :FZF
&lt;/span&gt;  ./test dir/a-file.txt|2 col 11| nnoremap &amp;lt;leader&amp;gt;ff :FZF&amp;lt;CR&amp;gt;
  ./test dir/a-file.txt|3 col 11| nnoremap &amp;lt;leader&amp;gt;fh :History&amp;lt;CR&amp;gt;
&lt;span class="gd"&gt;- ./test dir 2/another-file.txt|1 col 11| nnoremap &amp;lt;leader&amp;gt;? :Maps&amp;lt;CR&amp;gt;
&lt;/span&gt;&lt;span class="gi"&gt;+ ./test dir 2/another-file.txt|1 col 11| nnoremap &amp;lt;BBB&amp;gt;? :Maps&amp;lt;CR&amp;gt;
&lt;/span&gt;  ./test dir 2/another-file.txt|2 col 11| nnoremap &amp;lt;leader&amp;gt;bb :Buffers&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If I save these changes with the &lt;code&gt;:write&lt;/code&gt; command (or the short version &lt;code&gt;:w&lt;/code&gt;) they will take effect on their respective files. This gives us great power and flexibility because now the changes we can make are only limited by our knowledge of vim.&lt;/p&gt;

&lt;p&gt;Any trick you can think that can modify chunks of code should work flawlessly with this plugin. For example if we want to make the same thing I did in the demo we would do it like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Delete the lines we don't want to change
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./test dir/a-file.txt|1 col 11| nnoremap &amp;lt;leader&amp;gt;f :FZF
./test dir/a-file.txt|3 col 11| nnoremap &amp;lt;leader&amp;gt;fh :History&amp;lt;CR&amp;gt;
./test dir 2/another-file.txt|1 col 11| nnoremap &amp;lt;leader&amp;gt;? :Maps&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Use the "regular" substitution command.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;%s&lt;span class="sr"&gt;/leader/&lt;/span&gt;localleader/&lt;span class="k"&gt;g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that quickfix list should be on this state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./test dir/a-file.txt|1 col 11| nnoremap &amp;lt;localleader&amp;gt;f :FZF
./test dir/a-file.txt|3 col 11| nnoremap &amp;lt;localleader&amp;gt;fh :History&amp;lt;CR&amp;gt;
./test dir 2/another-file.txt|1 col 11| nnoremap &amp;lt;localleader&amp;gt;? :Maps&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Save the changes.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;write&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We got to know what is the quickfix list and its most common use cases.&lt;/p&gt;

&lt;p&gt;Now we know we can use &lt;code&gt;:make&lt;/code&gt; to call any compiler or external command that can run our code and give us error messages. We also have the tools to "teach" vim how to read an error message and put all the information we need in the quickfix list.&lt;/p&gt;

&lt;p&gt;We learned that we can use &lt;code&gt;:vimgrep&lt;/code&gt; and &lt;code&gt;:grep&lt;/code&gt; to search patterns in multiple files in our project. We had the chance to explore a few methods to search and replace text, with some simple cases and another one slightly more complex. With these examples we learned how to replace text with and without plugins.&lt;/p&gt;

&lt;p&gt;Lastly we learned about some options and commands we can use in our &lt;code&gt;.vimrc&lt;/code&gt; to improve the user experience when we use the quickfix list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vimhelp.org/quickfix.txt.html"&gt;:help quickfix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/vim/comments/7dv9as/how_to_edit_the_vim_quickfix_list/"&gt;How to edit the vim quickfix list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thank you for your time. If you find this article useful and want to support my efforts, &lt;a href="https://www.buymeacoffee.com/vonheikemen"&gt;buy me a coffee ☕&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/vonheikemen"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IF_mutQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/vonheikemen/image/upload/v1618466522/buy-me-coffee_ah0uzh.png" alt="buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vim</category>
      <category>shell</category>
    </item>
    <item>
      <title>Solution: Palindrome Pairs</title>
      <author>seanpgallivan</author>
      <pubDate>Sun, 13 Jun 2021 10:07:43 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-palindrome-pairs-23j6</link>
      <guid>https://dev.to/seanpgallivan/solution-palindrome-pairs-23j6</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/palindrome-pairs/discuss/1269310"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-336-hard-palindrome-pairs"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/palindrome-pairs/"&gt;Leetcode Problem #336 (&lt;em&gt;Hard&lt;/em&gt;): Palindrome Pairs&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given a list of &lt;strong&gt;unique&lt;/strong&gt; &lt;code&gt;words&lt;/code&gt;, return all the pairs of the &lt;strong&gt;distinct&lt;/strong&gt; indices (&lt;code&gt;i, j&lt;/code&gt;) in the given list, so that the concatenation of the two words &lt;code&gt;words[i] + words[j]&lt;/code&gt; is a palindrome.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;words = ["abcd","dcba","lls","s","sssll"]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[[0,1],[1,0],[3,2],[2,4]]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;The palindromes are ["dcbaabcd","abcddcba","slls","llssssll"]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;words = ["bat","tab","cat"]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[[0,1],[1,0]]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;The palindromes are ["battab","tabbat"]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;words = ["a",""]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[[0,1],[1,0]]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= words.length &amp;lt;= 5000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= words[i].length &amp;lt;= 300&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;words[i]&lt;/code&gt; consists of lower-case English letters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;A naive approach here would attempt every possible pairing of &lt;strong&gt;words&lt;/strong&gt;, but that would be inefficient. Instead, we can figure out what possible words would pair with each word and specifically check for those.&lt;/p&gt;

&lt;p&gt;To do this, we'll first have to store each word in a &lt;strong&gt;map&lt;/strong&gt; structure (&lt;strong&gt;wmap&lt;/strong&gt;), with the word as the key and the index as the value. This way, we can look up any possible matches with the current word as we iterate through &lt;strong&gt;words&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The next thing we'll want to do is define a helper function (&lt;strong&gt;isPal&lt;/strong&gt;) to check if a word is a palindrome. Rather than having to pass it a substring of a word, we can define it to take a range of indexes to check, so that we're not constantly building new strings.&lt;/p&gt;

&lt;p&gt;As we iterate through &lt;strong&gt;words&lt;/strong&gt;, then, each word will possibly match another word in one of three ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A blank string word will match on either side with any palindrome word. &lt;em&gt;(e.g. "" will match with "abc" and vice versa)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;A full word will match on either side with its backwards version. &lt;em&gt;(e.g. "abc" will match with "cba", and vice versa)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;A partial word will match its backwards version on the opposite side if the leftover portion of the word is a palindrome &lt;em&gt;(e.g. "abcddd" will match with "cba" because "abc" matches with "cba" and "ddd" is a palindrome)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first check is easy to perform. If we find a blank string, we can iterate through the entire &lt;strong&gt;words&lt;/strong&gt; list an extra time searching for palindromes to match. We just need to remember not to match the blank string with itself.&lt;/p&gt;

&lt;p&gt;For the second check, since we'll eventually iterate to the matching full word, we should only add the one pair at this time, rather than both, as we'll be able to add the second ordering of the same pair when we get to the second word.&lt;/p&gt;

&lt;p&gt;The third check is the most difficult. For this, we'll want to first reverse the current word to its backwards version (&lt;strong&gt;bw&lt;/strong&gt;), since we'll be matching existing frontwards words in &lt;strong&gt;wmap&lt;/strong&gt;. Then we should iterate through the indexes of the word itself, testing both sides of the dividing index (&lt;strong&gt;j&lt;/strong&gt;) for being a palindrome.&lt;/p&gt;

&lt;p&gt;If a palindrome is found, then we can attempt to lookup the &lt;em&gt;other&lt;/em&gt; portion of the word in &lt;strong&gt;wmap&lt;/strong&gt;. If a match is found, we can push that pair to our answer array (&lt;strong&gt;ans&lt;/strong&gt;). At the end of the iteration of &lt;strong&gt;words&lt;/strong&gt;, we can &lt;strong&gt;return ans&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N * M^2)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the length of &lt;strong&gt;words&lt;/strong&gt; and &lt;strong&gt;M&lt;/strong&gt; is the average length of the words in &lt;strong&gt;words&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(N)&lt;/strong&gt; for &lt;strong&gt;wmap&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;palindromePairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isPal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isPal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isPal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isPal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;palindromePairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
        &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                    &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isPal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="n"&gt;bw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isPal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;:]]])&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isPal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;isPal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;palindromePairs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;wmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
            &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isPal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="nc"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;sb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isPal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;substring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
                        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isPal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;substring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
                        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isPal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;palindromePairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;unordered_map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isPal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
                        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isPal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]});&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isPal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;wmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nl"&gt;private:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isPal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Raspberry Pi 4 : quick review </title>
      <author>Souvik</author>
      <pubDate>Sun, 13 Jun 2021 09:43:40 +0000</pubDate>
      <link>https://dev.to/8bitsouvik/raspberry-pi-4-quick-review-59o7</link>
      <guid>https://dev.to/8bitsouvik/raspberry-pi-4-quick-review-59o7</guid>
      <description>&lt;p&gt;In the month of June of 2019 raspberry Pi foundation introduced a new model of SBC(single board computer) named 'Raspberry Pi 4 (model B)',  which was 50% more powerful and 30% more efficient than its previous version. this was one of among most powerful ARM device in the first two decades of 21st century.&lt;/p&gt;

&lt;h3&gt;Spec.: &lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ihKpypE8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2zms61vb951w5zjo6ob.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ihKpypE8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2zms61vb951w5zjo6ob.jpg" alt="Raspberry Pi 4 (overview) "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         RAM: 1GB/2GB/4GB/8GB (DDR4)
         CPU: 4 cores (ARM cortex A72)
         Clock Speed: 1.5gHz
         Storage type: micro SD card, USB(external)
         Wireless connectivity: bluetooth 2.4/5 gHz, Wifi 802.11ac
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt; I/O: &lt;/h3&gt; 

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FvVTsumt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09atal7iccavtb8nkyf0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FvVTsumt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09atal7iccavtb8nkyf0.jpg" alt="Specifications"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         2x USB type-A (3.0)
         2x USB type-A (2.0)
         1x USB type-C 
         1x Ethernet port (RJ-45)
         2x micro HDMI
         1x headphone jack (3.0)
         1x CSI connector
         1x DSI connector
         40x GPIO pin
         4x PoE hat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt; software: &lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6tYsczQj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vev39h2hxprxufvdywbi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6tYsczQj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vev39h2hxprxufvdywbi.jpg" alt="Raspbian OS"&gt;&lt;/a&gt;&lt;br&gt;
           •  Raspbian OS (officially supported)&lt;br&gt;
           •  Ubuntu 20.4 LTS (officially supported)&lt;br&gt;
           •  Windows IoT version&lt;br&gt;
             except these a wide range of linux distros is supported unofficially.&lt;/p&gt;

&lt;h3&gt; pros. &lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;       •  Most powerful Raspberry Pi to date.
       •  Offered in three RAM amounts.
       •  Supports two 4K external displays.
       •  Gigabit Ethernet jack onboard.
       •  USB 3.0 support.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt; cons. &lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;       •   Needs fan and case.
       •   No built-in storage.
       •   Alternate operating systems need higher-spec, more expensive              versions.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt; pricing:  &lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    (from electronicscomp.com)

     •   1 GB - ₹2690.00 (tax excluded)
     •   2 GB - ₹3085.00 (tax excluded)
     •   4 GB - ₹4185.00 (tax excluded)
     •   8 GB - ₹5695.00 (tax excluded)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt; conclusion: &lt;/h3&gt; 
             

&lt;p&gt;As an educational &amp;amp; development and introductory computer, it's hard to bet to Raspberry Pi. Every new release has managed to do more without fundamentally changing the size of the board, adding more powerful features day by day while still supporting the same interface for third party hardware, supporting a wide range of Operating Systems. As someone who grew up with 1980s 8-bit or 16-bit computers, there's a certain nostalgia in a device like this, but this category of hardware clearly looks forward, building on its heritage and aiming to encourage more developer and engineers.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>opensource</category>
      <category>raspberrypi</category>
    </item>
    <item>
      <title>Generative Adversarial  Networks </title>
      <author>Aditya Kumar Gupta</author>
      <pubDate>Sun, 13 Jun 2021 09:32:46 +0000</pubDate>
      <link>https://dev.to/geekquad/generative-adversarial-networks-430e</link>
      <guid>https://dev.to/geekquad/generative-adversarial-networks-430e</guid>
      <description>&lt;p&gt;Ever wondered how Mona Lisa would have looked in real life? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--izBxqd6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623223167460/_3fKpGF2j.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--izBxqd6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623223167460/_3fKpGF2j.gif" alt="mona.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or have you ever wanted to create new faces so well that most people can’t distinguish the faces it generates from real photos? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xTJH8AsW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623232563162/CYdrUl9Ox.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xTJH8AsW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623232563162/CYdrUl9Ox.gif" alt="fave.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How would you feel if I would say that you can predict future frames of a video? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HRBi0O0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623235379028/JtI8xRqCZ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HRBi0O0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623235379028/JtI8xRqCZ.gif" alt="1_Mi4TbX-_KoxJ3Y3giJBfXg.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fascinated, right?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each of these is possible with the power of GANs. &lt;br&gt;
Let's understand what these are and how they work!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generative Adversarial Network&lt;/strong&gt; or &lt;strong&gt;GANs&lt;/strong&gt; are deep generative models. These are a combination of two networks that are opposed against each other and are neural network architectures that are capable of generating new data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JUg2xbfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623251700556/WoBhRSg-D.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JUg2xbfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623251700556/WoBhRSg-D.gif" alt="ezgif.com-gif-maker.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let us break down the word and understand them. &lt;br&gt;
&lt;code&gt;Generative&lt;/code&gt; means capable of production or reproduction,&lt;br&gt;
&lt;code&gt;Adversarial&lt;/code&gt; means two sides who oppose each other and &lt;br&gt;
&lt;code&gt;Network&lt;/code&gt; means a system of interconnected things.&lt;/p&gt;

&lt;p&gt;GANs are actually two different networks joined together and are composed of two halves: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Generator&lt;/li&gt;
&lt;li&gt;Discriminator&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But before understanding what these two are, let us know what is Loss Function 🤔.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loss-function"&gt;
  &lt;/a&gt;
  Loss Function:
&lt;/h3&gt;

&lt;p&gt;The loss function describes how far the results produced by our network are from the expected result: how far an estimated value is from its true value. Its objective isn't to make the model good but is to keep it from going wrong. &lt;br&gt;
&lt;strong&gt;Loss Function gives us the direction of the optimal solution.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generator"&gt;
  &lt;/a&gt;
  Generator:
&lt;/h2&gt;

&lt;p&gt;The generator is the neural network architecture that takes in some input and reshapes it to get a recognizable structure that is close to the target. The main aim of the generator is to make the output look as close as possible to the real data. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwNBpFQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623235760646/zF8WIAy8n.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwNBpFQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623235760646/zF8WIAy8n.jpeg" alt="gg.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But to make this possible, the generator network needs to be trained heavily.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-understand-how-loss-function-for-generator-network-works"&gt;
  &lt;/a&gt;
  Let's understand how Loss Function for Generator Network works:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5TwKixjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unw4ycbk8jnr8lw4bqe4.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5TwKixjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unw4ycbk8jnr8lw4bqe4.JPG" alt="Generator Loss Function"&gt;&lt;/a&gt;&lt;br&gt;
We want to fool the &lt;strong&gt;Discriminator&lt;/strong&gt; into believing that the output from the &lt;strong&gt;Generator&lt;/strong&gt; is actually real. &lt;/p&gt;

&lt;p&gt;So this term is going to be 1 if we are successfully able to fool the Discriminator. &lt;br&gt;
Hence, we will have a log(something close to zero). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So does the generator want to maximize or minimize the loss?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Generator wants to minimize this loss. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#discriminator"&gt;
  &lt;/a&gt;
  Discriminator:
&lt;/h2&gt;

&lt;p&gt;The discriminator is a regular neural network architecture that does the classification job to categorize real data from the fake samples generated by the Generator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gz0QvOVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623235824102/zQ83M0kmt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gz0QvOVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623235824102/zQ83M0kmt.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Discriminator's training data comes from two sources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read data used for training. &lt;/li&gt;
&lt;li&gt;Fake data generated by the Generator.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#lets-understand-how-loss-function-discriminator-network-works"&gt;
  &lt;/a&gt;
  Let's understand how Loss Function Discriminator Network works:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kWuOfsxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623326153664/gynes492c.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kWuOfsxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623326153664/gynes492c.jpeg" alt="discrimniator.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ao_OgQlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjisapmh0o16m19uapnb.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ao_OgQlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjisapmh0o16m19uapnb.JPG" alt="Symbol Meaning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's divide this equation into 2 terms:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First term:&lt;/strong&gt;&lt;br&gt;
We take the log of D(x(i)), &lt;br&gt;
where &lt;code&gt;x(i) = real&lt;/code&gt; so we want our &lt;code&gt;Discriminator&lt;/code&gt; to output &lt;code&gt;1&lt;/code&gt; here. &lt;br&gt;
So, if we look at &lt;code&gt;log(1)&lt;/code&gt;, the output is going to be &lt;code&gt;zero&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second term:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;log(1-D(G(z)))&lt;/code&gt; generator is going to take in some random noise and it's gonna output something close to real(close to reality) and the discriminator is going to output either &lt;code&gt;0 or 1&lt;/code&gt; and from discriminator's point of view, we want the output to be &lt;code&gt;zero&lt;/code&gt; here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So does the Discriminator want to maximize or minimize the loss?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Discriminator wants to maximize this loss.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#combining-both-of-these"&gt;
  &lt;/a&gt;
  Combining both of these:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6V_tc6X---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oamy1yql1mt0l5xes60.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6V_tc6X---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oamy1yql1mt0l5xes60.JPG" alt="Losses Together"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LHS of this expression means that we want to &lt;strong&gt;minimize w.r.t Generator&lt;/strong&gt; and &lt;strong&gt;maximize w.r.t Discriminator&lt;/strong&gt; for some value function V takes to input the Generator and the Discriminator(D, G). &lt;/p&gt;

&lt;p&gt;In practice the generator is trained to instead: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZaAD2P7z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4k71ektbto32408pbh41.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZaAD2P7z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4k71ektbto32408pbh41.jpg" alt="Alt Text"&gt;&lt;/a&gt;to &lt;strong&gt;maximize the Generator MaxG&lt;/strong&gt; because this new expression leads to non-saturating gradients which makes it a lot easier for training. &lt;/p&gt;

&lt;p&gt;In simple words, the generative and discriminator models play a symmetric opponent game or a &lt;strong&gt;zero-sum game&lt;/strong&gt; with each other that is where one side's benefits come at the expense of the other. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LrRYET4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z44imd2dg3vf7pqrbiam.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LrRYET4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z44imd2dg3vf7pqrbiam.jpg" alt="A Typical Structure of GAN"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the end, after a lot of training process, the generator can make &lt;br&gt;
indistinguishable things from real ones and the Discriminator is forced to Guess. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q9OyHRKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623223056553/lUVbKI1QZ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q9OyHRKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623223056553/lUVbKI1QZ.gif" alt="loss.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both the generator and the discriminator start from scratch without any prior knowledge and are simultaneously trained together. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Generative models can generate new examples from the sample that are not only similar to the class but real.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wondering-what-are-gans-used-for"&gt;
  &lt;/a&gt;
  Wondering what are GANs used for?
&lt;/h2&gt;

&lt;p&gt;GANs have seen major success in the past years. They have a wider range of applications. Usage of GANs is not limited to these. Here are a few use cases. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Generating New Data&lt;/strong&gt;:&lt;br&gt;
Rather than augmenting the data, new training data samples can be generated by GANs from the existing data. Here is an example of Fashion MNIST samples generated by GANs. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1GHSAOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623253947819/Lf4tkZAHp.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1GHSAOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623253947819/Lf4tkZAHp.webp" alt="cifar.webp"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Super Resolution&lt;/strong&gt;: GANs can be used to enhance the resolution of images and videos. Here is an example of video super-resolution done by &lt;a href="https://arxiv.org/abs/1801.09710"&gt;tempoGAN&lt;/a&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WczadXaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623321486822/M5Q5_ry-j.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WczadXaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623321486822/M5Q5_ry-j.gif" alt="dd.gif"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;: GANs can be used for malware detection and intrusion detection. GANs can be used in a variety of cybersecurity applications, including enhancing existing attacks beyond what a standard detection system can handle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Audio Generation&lt;/strong&gt;: GANs can be used to generate high-quality audio, instrumentals, and voice samples. &lt;a href="https://salu133445.github.io/musegan/"&gt;MuseGAN&lt;/a&gt; and [WaveGAN] are two such GANS. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mgMEoN2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623519529711/whcvrgSiy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mgMEoN2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623519529711/whcvrgSiy.gif" alt="sound.gif"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Healthcare&lt;/strong&gt;: GANs can be utilized to detect tumors. By comparing photos with a library of datasets of healthy organs, the neural network can be used to identify cancers. By finding disparities between the patient's scans and photos and the dataset images, the network can discover abnormalities in the patient's scans and photographs. Using generative adversarial networks, malignant tumors can be detected faster and more accurately.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yrinlh4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623326984323/DoDcCKyN6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yrinlh4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623326984323/DoDcCKyN6.gif" alt="h.gif"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://arxiv.org/abs/1406.2661"&gt;Original GAN Paper&lt;/a&gt; - Ian Goodfellow&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/machine-learning/gan/gan_structure"&gt;Generative Adversarial Network&lt;/a&gt; - Google Developers&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Please share your thoughts and comments if you found this post interesting and helpful. Follow the links below to get in touch with me:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/geekquad/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/geekquad"&gt;GitHub&lt;/a&gt; | &lt;a href="https://twitter.com/geekquad_"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>deeplearning</category>
      <category>computerscience</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Custom React Router Prompt</title>
      <author>Yadhunandan S</author>
      <pubDate>Sun, 13 Jun 2021 09:29:38 +0000</pubDate>
      <link>https://dev.to/yadhus/custom-react-router-prompt-40io</link>
      <guid>https://dev.to/yadhus/custom-react-router-prompt-40io</guid>
      <description>&lt;p&gt;How to implement the custom prompt on navigation using react-router&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#whats-the-need-for-custom-prompt-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What’s the need for custom prompt ?&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Most of the react projects follow the UI &lt;a href="https://uxdesign.cc/everything-you-need-to-know-about-design-systems-54b109851969"&gt;design system&lt;/a&gt; for their components. In order to achieve the same design consistency across the app, they reuse the components. However to block the navigation in case there are some unsaved user data, default browser prompt is the most common and easy way to block the user from navigating to different routes. But the popup does not match your library component.&lt;/p&gt;

&lt;p&gt;There is no official docs explicitly mentioning how to use the custom modal instead of the default &lt;code&gt;react-router&lt;/code&gt; &lt;strong&gt;Prompt&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Solution&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;There are few simple steps to be followed in order to get the required result. Each step contains 100% working code snippets. You can use it in your projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 1&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We need to disable or block the default browser prompt. This can be done by passing an empty callback to the &lt;strong&gt;&lt;code&gt;getUserConfirmation&lt;/code&gt;&lt;/strong&gt; function prop of the &lt;strong&gt;BrowserRouter&lt;/strong&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 2&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Now let’s create a custom &lt;strong&gt;RouterPrompt&lt;/strong&gt; component using the &lt;strong&gt;&lt;code&gt;useHistory&lt;/code&gt;&lt;/strong&gt; hook from the react-router-dom and &lt;a href="https://ant.design/components/modal/"&gt;ant design&lt;/a&gt; component library for the &lt;strong&gt;Modal&lt;/strong&gt; component.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 3&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Let’s create two sample components for navigating between pages. For example, let the first component be &lt;code&gt;Dashboard.jsx&lt;/code&gt; and the second component be &lt;code&gt;Home.jsx&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The home component contains our custom &lt;strong&gt;RouterPrompt&lt;/strong&gt; component. The prompt is triggered on the page change and also based on the &lt;strong&gt;&lt;code&gt;when&lt;/code&gt;&lt;/strong&gt; prop. The when prop is used to conditionally trigger the prompt. For instance, if the when prop is set to &lt;strong&gt;true&lt;/strong&gt; , the prompt will be shown every time page navigates (from home route to other routes or navigate forward / back).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;onOK&lt;/code&gt; and &lt;code&gt;onCancel&lt;/code&gt; callback props must return boolean value in order to proceed with the route.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Result&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IiZv8aDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8hisl4zmjl9p8s6ipiv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IiZv8aDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8hisl4zmjl9p8s6ipiv.png" alt="Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You can use any component library’s modal, even your own custom modal or default browser prompt. But just be careful when implementing the &lt;strong&gt;&lt;code&gt;history.block&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By following the above steps you can achieve the desired solution. The code is 100% working. You can copy the code snippets to your applications to save time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  &lt;strong&gt;References&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://reactrouter.com/web/api/Hooks/usehistory"&gt;https://reactrouter.com/web/api/Hooks/usehistory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactrouter.com/web/api/history"&gt;https://reactrouter.com/web/api/history&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>reactrouter</category>
      <category>javascript</category>
      <category>design</category>
    </item>
    <item>
      <title>How to refresh next-i18next content update automatically?</title>
      <author>Ryosuke Iwanaga</author>
      <pubDate>Sun, 13 Jun 2021 08:51:04 +0000</pubDate>
      <link>https://dev.to/riywo/how-to-refresh-next-i18next-content-update-automatically-1e83</link>
      <guid>https://dev.to/riywo/how-to-refresh-next-i18next-content-update-automatically-1e83</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  tl;dr
&lt;/h2&gt;

&lt;p&gt;If you want to refresh your Next.js app using &lt;a href="https://github.com/isaachinman/next-i18next"&gt;&lt;code&gt;next-i18next&lt;/code&gt;&lt;/a&gt; automatically, you can do it like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;i18n&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next-i18next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;serverSideTranslations&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next-i18next/serverSideTranslations&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;reloadResources&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;serverSideTranslations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;common&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Home&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-was-the-issue"&gt;
  &lt;/a&gt;
  What was the issue?
&lt;/h2&gt;

&lt;p&gt;When I started using &lt;a href="https://github.com/isaachinman/next-i18next"&gt;&lt;code&gt;next-i18next&lt;/code&gt;&lt;/a&gt;, I realized &lt;code&gt;next dev&lt;/code&gt; server only loaded the translation files once when initialized and never updated even if I reloaded the page on my browser since server side doesn't change. Whenever I updated the translation, I needed to restart &lt;code&gt;next dev&lt;/code&gt; server, which was bad developer experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternative-solutions"&gt;
  &lt;/a&gt;
  Alternative solutions
&lt;/h2&gt;

&lt;p&gt;That is a known limitation and there are multiple GitHub issues like &lt;a href="https://github.com/isaachinman/next-i18next/issues/881"&gt;this&lt;/a&gt;. I was able to find two approaches:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Restart &lt;code&gt;next dev&lt;/code&gt; automatically whenever the content is updated.&lt;/li&gt;
&lt;li&gt;Poll API endpoint to monitor the content update and refresh the content.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The option 1 is simple and &lt;a href="https://www.npmjs.com/package/nodemon"&gt;&lt;code&gt;nodemon&lt;/code&gt;&lt;/a&gt; can easily achieve the goal. However, this is not "Fast Refresh" and takes a while.&lt;/p&gt;

&lt;p&gt;The option 2 seems better because &lt;code&gt;next dev&lt;/code&gt; server keeps running, but too complicated to implement internal API. It can be done without API like &lt;a href="https://github.com/hashicorp/next-remote-watch"&gt;&lt;code&gt;next-remote-watch&lt;/code&gt;&lt;/a&gt; which monitors files and calls Next.js's internal method to reload the page. I tried it but it still requires implementation of content refresh by calling &lt;code&gt;i18n.reloadResources()&lt;/code&gt; anyway. Also, page refresh is not "Fast Refresh" neither.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;Then, I realized this can be done much simpler. First of all, it anyway requires polling from client side because there is no public method to execute &lt;a href="https://nextjs.org/docs/basic-features/fast-refresh"&gt;"Fast Refresh"&lt;/a&gt; from Next.js server side. Using internal method like &lt;code&gt;next-remote-watch&lt;/code&gt; does is not sustainable. Therefore, client side polling is the best way.&lt;/p&gt;

&lt;p&gt;However, setting up an API (i.e. &lt;code&gt;/api/something&lt;/code&gt;) for such a simple polling seems overkill. I thought it's probably enough by just re-rendering the page. With this approach, unless the virtual DOM of React has been updated, nothing happens on client side (I think).&lt;/p&gt;

&lt;p&gt;Now, how I can tell the translation files' change to the client? Next.js has a good mechanism to provide props to page i.e. &lt;code&gt;GetStaticProps&lt;/code&gt; which is already used by &lt;code&gt;next-i18next&lt;/code&gt; installation. I found &lt;a href="https://www.joshwcomeau.com/nextjs/refreshing-server-side-props/"&gt;a great solution&lt;/a&gt; to trigger this from client side.&lt;/p&gt;

&lt;p&gt;In addition, I found that it can call &lt;code&gt;i18n.reloadResources()&lt;/code&gt; there because &lt;code&gt;i18n&lt;/code&gt; instance is stored in a global value. I lazily implemented it with reloading &lt;code&gt;i18n&lt;/code&gt; at every request because my project doesn't have large translation files. This can eliminate file watcher logic at all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclustion"&gt;
  &lt;/a&gt;
  Conclustion
&lt;/h2&gt;

&lt;p&gt;Now, by adding a simple &lt;code&gt;SetInterval()&lt;/code&gt; to refresh the page every 5 seconds on client side and reloading &lt;code&gt;i18n&lt;/code&gt; on every &lt;code&gt;GetStaticProps&lt;/code&gt; call, my Next.js pages are always in sync within 5 seconds. This is Next.js/React refresh, not browser refresh nor server restart, thus it's fast enough.&lt;/p&gt;

&lt;p&gt;Let me know if you have a better solution or if you find a drawback of this solution :)&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>i18next</category>
      <category>react</category>
    </item>
    <item>
      <title>How I structure my mid-size NextJs projects</title>
      <author>Joseph Mukorivo</author>
      <pubDate>Sun, 13 Jun 2021 08:44:19 +0000</pubDate>
      <link>https://dev.to/josemukorivo/how-i-structure-my-nextjs-projects-5n8</link>
      <guid>https://dev.to/josemukorivo/how-i-structure-my-nextjs-projects-5n8</guid>
      <description>&lt;p&gt;As you know React is not an opinionated library. What that means is that there is no clearly defined way of doing things, for instance, React doesn't force you to structure your projects in a certain way. All that is left for you the developer.&lt;/p&gt;

&lt;p&gt;Here we are going to be using NextJS, which is a framework built on top of React. NextJS helps us by optimizing our app through code-splitting, image optimization, static site generation, server-side rendering, etc. In this article, we are ignoring all this awesomeness as it is not the focus of the article. I recommend looking at &lt;a href="https://nextjs.org/"&gt;NextJs&lt;/a&gt; docs if you are new to it.&lt;/p&gt;

&lt;p&gt;Below is a high-level folder structure of our app.&lt;br&gt;
&lt;code&gt;&lt;br&gt;
📦src&lt;br&gt;
 ┣ 📂charts&lt;br&gt;
 ┃ ┣ 📜index.js&lt;br&gt;
 ┃ ┗ 📜sunburst.js&lt;br&gt;
 ┣ 📂components&lt;br&gt;
 ┃ ┣ 📂breadcrumb&lt;br&gt;
 ┃ ┃ ┣ 📂styles&lt;br&gt;
 ┃ ┃ ┃ ┗ 📜breadcrumb.js&lt;br&gt;
 ┃ ┃ ┗ 📜index.js&lt;br&gt;
 ┃ ┗ 📜index.js&lt;br&gt;
 ┣ 📂containers&lt;br&gt;
 ┃ ┣ 📜index.js&lt;br&gt;
 ┃ ┗ 📜navbar.js&lt;br&gt;
 ┣ 📂fixtures&lt;br&gt;
 ┃ ┗ 📜data.json&lt;br&gt;
 ┣ 📂lib&lt;br&gt;
 ┃ ┗ 📜gtag.js&lt;br&gt;
 ┣ 📂pages&lt;br&gt;
 ┣ 📂public&lt;br&gt;
 ┃ ┣ 📂fonts&lt;br&gt;
 ┃ ┃ ┗ 📂Arial&lt;br&gt;
 ┃ ┣ 📂icons&lt;br&gt;
 ┃ ┣ 📂images&lt;br&gt;
 ┃ ┃ ┣ 📂svg&lt;br&gt;
 ┃ ┣ 📂videos&lt;br&gt;
 ┃ ┣ 📜manifest.json&lt;br&gt;
 ┃ ┣ 📜sitemap.xml&lt;br&gt;
 ┃ ┗ 📜sw.js&lt;br&gt;
 ┣ 📂scripts&lt;br&gt;
 ┃ ┗ 📜generate-sitemap.js&lt;br&gt;
 ┣ 📂styles&lt;br&gt;
 ┣ 📂utils&lt;br&gt;
 ┣ 📜.env&lt;br&gt;
 ┗ 📜next.config.js&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
Yes I know, this looks a bit complex. Let's demystify it by looking at each folder separately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#charts"&gt;
  &lt;/a&gt;
  Charts
&lt;/h2&gt;

&lt;p&gt;Usually, my applications have some charts to visualize data. All my charts will be located here and exported from an &lt;code&gt;index.js&lt;/code&gt; file that acts as a barrel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;This is probably the most interesting folder because that's where you will spend most of your time in. For each component in my components, I create a separate folder for it, and in that folder I create an &lt;code&gt;index.js&lt;/code&gt; file to export the component and a separate folder for the component styles. There is also an &lt;code&gt;index.js&lt;/code&gt; file in the components folder that exports all the components. If you then want to import say a &lt;code&gt;&amp;lt;Button /&amp;gt;&lt;/code&gt; component you will do it like so &lt;code&gt;import { Button } from 'components'&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#containers"&gt;
  &lt;/a&gt;
  Containers
&lt;/h2&gt;

&lt;p&gt;This folder is also important. Components acts as atoms and if we combine those atoms we form elements. For example if we combine links, buttons and grids components(atoms) we can create a navbar container(element). This makes it easy to compose to UIs. These containers are imported in pages to form the complete webpages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixtures"&gt;
  &lt;/a&gt;
  Fixtures
&lt;/h2&gt;

&lt;p&gt;This folder contains some static data like a list of all links.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lib"&gt;
  &lt;/a&gt;
  Lib
&lt;/h2&gt;

&lt;p&gt;Files in this directory acts as an interface between our application and external libraries like google analytics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#public"&gt;
  &lt;/a&gt;
  Public
&lt;/h2&gt;

&lt;p&gt;This folder host the static files like images, fonts, videos, sitemaps, service workers, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scripts"&gt;
  &lt;/a&gt;
  Scripts
&lt;/h2&gt;

&lt;p&gt;This folder contains some scripts that I usually run at build time like generation of sitemaps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styles"&gt;
  &lt;/a&gt;
  Styles
&lt;/h2&gt;

&lt;p&gt;Global styles are stored in this directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#utils"&gt;
  &lt;/a&gt;
  Utils
&lt;/h2&gt;

&lt;p&gt;Functions that I want to be shared across the whole application are stored in this directory.&lt;/p&gt;

&lt;p&gt;I hope this article helped you, let me know if you have another folder structure that you want me to look at. I will be happy to try it out.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Importance of programmers work life balance</title>
      <author>Rezaul karim</author>
      <pubDate>Sun, 13 Jun 2021 08:43:54 +0000</pubDate>
      <link>https://dev.to/rezaulkarim/the-importance-of-programmers-work-life-balance-4bhb</link>
      <guid>https://dev.to/rezaulkarim/the-importance-of-programmers-work-life-balance-4bhb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EcE05QWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623573206624/8NgLyp5J2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EcE05QWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623573206624/8NgLyp5J2.jpeg" alt="work-life-balance-concept-undecided-businessman-standing-front-left-right-arrow-direction_34048-1235.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, Discuss about why programmers work life balance is critical to maintaining your mental health. And preventing you from burning out. So I think it’s really important that programmers developers software and engineers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programmers-work-life"&gt;
  &lt;/a&gt;
  Programmers work life:
&lt;/h2&gt;

&lt;p&gt;You know anyone that’s doing a lot of mentally strenuous work everyday. Maintain healthy work-life balance to prevent burning.Now often in startup culture you see that, they usually have a lot of younger employees who don’t have families or have more time.&lt;/p&gt;

&lt;p&gt;They can dedicate to working and being at the office and while that’s fine when you’re young and you have that kind of schedule and that availability. If you want to know further Career and get ahead and maybe really rack up that experience early on. And you want to spend 12 hours at the office a day. That’s fine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-need-work-life-balance"&gt;
  &lt;/a&gt;
  Why need work life balance:
&lt;/h2&gt;

&lt;p&gt;But when you’re older and you have a family, is not realistic to maintain that. And if you try to do that, you’ll eventually burn out. It’ll happen if you work too much you’ll burn out and if right now you’re self-taught programmer and you’re studying everyday and you’re spending hours upon hours on your laptop doing tutorials and building projects and working on your resume working on your portfolio into Doing everything that you got to do to try to get that first job. It can be really difficult and it can be really hard to maintain that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CypnIesc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623573169907/B4ldNbwBm.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CypnIesc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623573169907/B4ldNbwBm.jpeg" alt="work-life-balance-concept-low-section-man-standing-with-half-shoes-legs_34048-390.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So it’s okay to take a break. Although you want to code all the time and you want it and you want to try to code as much as you can until you get that first job. You can and realistically you’ll, it’s not good for you to try to do that all day every single day.&lt;/p&gt;

&lt;p&gt;So you want to take those breaks when you have time. Take breaks.Get away from The get out. Get some fresh air who do something that you enjoy doing that is not code related. Your all your side projects don’t have to be based around code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-to-maintain"&gt;
  &lt;/a&gt;
  Try To Maintain:
&lt;/h2&gt;

&lt;p&gt;I know that in your software development career early on you feel that a lot of your extra-curricular work needs to be code related. And that’s simply not true. You might feel that you need to stay Cutting Edge and work with the latest tech. If you’re not working with the latest tech in your current role. While that’s fine don’t focus on that stuff too much. And maybe focus on it a little bit more when you’re trying to look for a new job. It doesn’t have to be about code all the time.&lt;/p&gt;

&lt;p&gt;And it’s okay to take breaks. You know work-life balance may not mean much to you. But it’s definitely something you should think about. We think about it when you’re looking for a job and applying for jobs. And really look into what kind of work-life benefits do they offer and consider that. Because you’re going to be there for a few years and you’re going to dedicate a bunch of time there and you don’t want to You don’t want to end up.&lt;/p&gt;

&lt;p&gt;He’s somewhere that you’re not going to enjoy working and it doesn’t offer you the kind of work-life balance that you’re looking for. You know, those things are important to you if having holidays off is important. If having flexible schedules and flexible days, if just being able to call in sick and not have to worry about it. Important to you make sure that you look for that make sure that your You’re checking all the time. Is where you can get this information and I mean don’t be scared to ask around online either post stuff on Reddit post questions,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-note"&gt;
  &lt;/a&gt;
  Important Note:
&lt;/h2&gt;

&lt;p&gt;Wherever you need to to find out about a company that you may be applying for. And if work-life balance is really important to you and it should be work-life balance should be important to everyone. You should make sure that the company you’re applying for offers those things. Or if you’re applying right now and you don’t have a job. If you do have a job and you don’t and you’re not happy with the way that your work-life balance is at that job.&lt;/p&gt;

&lt;p&gt;Make sure to think about this the next the next job you look for you know, my first job.&lt;/p&gt;

&lt;p&gt;The programmer’s work life balance wasn’t terrible, but it wasn’t all that great. I did take some work home with me more than I want to you. Really never want to take any work home with you. That just developed bad habits to have you end up burning out. And working way more than you should just kind of think about. Like, what do you make an hour at out at one point is your hourly wage work that if you’re making 50 bucks an hour. Because you’re making a hundred grand a year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-idea"&gt;
  &lt;/a&gt;
  Some Idea:
&lt;/h2&gt;

&lt;p&gt;That’s cool and all but if you’re working 14-16 hour days because you have that kind of company culture. That Send you to work that much that’s just a recipe for Burnout. And really at the end of the day how much money are you really making an hour? If you’re working double the time that you should be seized. And this also relates to if you’re trying to learn how to code to remember. You know, many people circumstances are different when I was learning how to code.&lt;/p&gt;

&lt;p&gt;My family was just getting started and I had that extra time and my schedule at work a lot. Allowed me to work and study at the same time. And I had enough time off and availability during my days off to be able to study and dedicate that much time.&lt;/p&gt;

&lt;p&gt;But some people only have a few hours a day and and honestly just try to be as consistent as you can. And if you start feeling like you’re burning out think about if you’re just spending too much time working you’re learning how to code and you have A job and you have a family and you know, you have to you have to learn how to code and you feel like it’s just something that you have to do and you realize that you’ve been doing it for a couple months and you’re no longer having any fun and doing anything that brings you any Joy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinking-on-work-life-balance"&gt;
  &lt;/a&gt;
  Thinking on work life balance:
&lt;/h2&gt;

&lt;p&gt;You’re just working and tending the things around the house and learning how to code. You’ve given up all your extracurricular activities and you’ve given up. Your hobbies because you’re determined to learn how to code I kind of did that myself and it’s not healthy. It wasn’t healthy for me and I got lucky that I did it burn out but you know. Everyone’s different you just make sure that you listen to to how you’re feeling and play it by ear.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And remember that this is a Marathon not a Sprint, you know, you’re going to be learning for a while and it’s going to take you a while to get a job.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts:
&lt;/h2&gt;

&lt;p&gt;Some people do get a job soon and quickly. But a lot of people would take some a little longer. So don’t rush to get to the Finish Line because the thing is once you get there. You’re going to realize that your journey is just started and you’re going to be learning all the time.&lt;/p&gt;

&lt;p&gt;Every day And it’s never going to end.It’s a good thing and I enjoy and if you’re learning how to code and you’ve already been doing it for a while. You’ve probably already got that personality that enjoys trying to figure out . I’m trying to work on stuff and try to solve problems and and that’s good. And use that to keep you going. But realize when you’re not having fun and you need a break because that’s important, too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mrezaulkarim.com/programmers-work-life-balance/"&gt;Read this article on my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more exciting tips and tricks please read our  &lt;a href="https://mrezaulkarim.com/blog/"&gt;others articles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find My page on Instagram:  &lt;a href="//instagram.com/stack.content"&gt;@stack.content&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>workstations</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
