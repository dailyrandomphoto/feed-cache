<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>8 Things I wish I knew as a Junior Developer</title>
      <author>Krowser Web Services </author>
      <pubDate>Sat, 12 Jun 2021 03:30:39 +0000</pubDate>
      <link>https://dev.to/krowser/8-things-i-wish-i-knew-as-a-junior-developer-29di</link>
      <guid>https://dev.to/krowser/8-things-i-wish-i-knew-as-a-junior-developer-29di</guid>
      <description>&lt;p&gt;Being a junior developer is not easy. You have a lot of work to do, and you're expected to know everything that's going on in your company. These tips will help you get started on the right foot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't be afraid to ask questions&lt;/strong&gt;&lt;br&gt;
Asking questions is probably one of the most critical skills for any programmer. You should always try to learn something new when working on a problem or feature, even if it's just some new concept that might come in handy later.&lt;/p&gt;

&lt;p&gt;Besides, there are times when you will encounter issues that have already been solved by someone else (such as Stack Overflow). In these cases, don't be afraid to ask for help! It's better to spend 10 minutes googling and asking questions than spending 2 hours debugging an issue that someone else has already solved.&lt;/p&gt;

&lt;p&gt;I think this is true for senior developers. You never know what obscure problem someone else might run into that will save them time down the road (or even give them ideas for features they could implement). Even if it doesn't help anyone directly, every question asked and answered helps everyone indirectly by increasing our collective knowledge base.&lt;/p&gt;

&lt;p&gt;If your company has a mentorship program or internal forums where you can ask questions, take advantage of them! Even if they aren't related to your specific project or team, asking about general issues will likely still help you out in the long run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't worry about seniority&lt;/strong&gt;&lt;br&gt;
This is probably the most critical point on this list. It's straightforward to get caught up in the idea of seniority and worry about whether or not you are "senior enough" to do a particular task. There is no such thing as being "senior enough" for anything in my experience. If you think you are ready, then go ahead and try it!&lt;/p&gt;

&lt;p&gt;Even if you fail at first, learn from your mistakes and move on. You can always ask for help if you need it. Just remember that seniority is all relative. There will always be someone who has more experience than you, so don't let that hold you back from doing something because of how it will look on your resume or portfolio.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be proactive&lt;/strong&gt;&lt;br&gt;
To be successful in software development, immensely as a junior developer, it helps to take the initiative when solving problems or implementing features. This means going above and beyond what was asked of you and making sure that things are done the first time correctly (it also makes it easier for other developers to review your code).&lt;/p&gt;

&lt;p&gt;I personally find this approach useful because it allows me to learn more about the problem domain I am working in (which is often a requirement when working with larger projects). Asking questions during these times can be helpful, too, since they often lead to discussions about why individual decisions were made or why certain approaches were taken (this may help guide future decision-making).&lt;/p&gt;

&lt;p&gt;Even if your ideas aren't implemented right away, they might inspire others or even make their way into future versions of the product (I have seen this happen many times before).&lt;/p&gt;

&lt;p&gt;This also helps build trust with your team members since they know that you will do what needs to be done without continually asking them for guidance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write good code&lt;/strong&gt;&lt;br&gt;
This may seem obvious, but it's straightforward to get caught up in the idea of shipping features and not worrying about how they are implemented. This is especially true when working on a team with many developers (or even working alone).&lt;/p&gt;

&lt;p&gt;However, writing good code makes it easier for other developers to read and review your work (which saves time in the long run). It also makes it easier for you to understand your own code later on (saving time in the short run).&lt;/p&gt;

&lt;p&gt;If you have never written tests before, this is another area where you can take the initiative and learn more about your language or framework by reading about testing strategies or writing some simple tests yourself. If you write tests, they will help you catch bugs early on instead of debugging them after a feature has been shipped.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read code&lt;/strong&gt;&lt;br&gt;
This one is pretty obvious, but it's still essential. Reading code is a great way to learn how things are done in other projects and languages. It also allows you to see what kinds of problems developers face when writing software, which will help you with problem-solving later on in your career.&lt;/p&gt;

&lt;p&gt;If you ever get stuck on something and need help from someone else, being able to explain the problem is extremely important. This helps with communication between developers as well as collaboration on projects (which should be the primary goal of any developer). Also, reading code may just give you some ideas for your own project!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn from others&lt;/strong&gt;&lt;br&gt;
This point should be obvious too, but I think it's important enough that I wanted to mention it anyway. Take advantage of opportunities to learn from others! For example, if someone asks a question on Stack Overflow that you know the answer, go ahead and answer it! You might also consider sharing your knowledge by blogging or speaking at meetups/conferences. Even if your answer isn't directly related to your job duties, there is still value in answering questions since you are likely learning something new while doing so (this might help solve future problems that come up as well).&lt;/p&gt;

&lt;p&gt;Also, keep an eye out for articles/videos/podcasts/books that might be relevant to what you are working on. These can often explain why certain decisions were made and how they could be improved upon.&lt;/p&gt;

&lt;p&gt;Finally, don't forget about books! Books are probably one of the best ways to learn new things because they allow you to read at your own pace without being interrupted by meetings or interruptions from coworkers.&lt;/p&gt;

&lt;p&gt;There are so many great books out there that cover a wide range of topics. Ensure that whatever book(s) you choose covers topics relevant to what you do day-to-day!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practice what you learn&lt;/strong&gt;&lt;br&gt;
This is a great way to solidify your knowledge of a topic, and it's also an easy way to show off what you have learned to others (such as interviewers or potential employers). You could start doing some JavaScript practice projects, for example.&lt;/p&gt;

&lt;p&gt;It might be a little more difficult if you are working on a large project, but there are still opportunities to practice what you learn. For example, maybe you can implement some features using the latest technology that your company just started using. If not, you can try implementing some small feature using this new technology and sharing it with your team members.&lt;/p&gt;

&lt;p&gt;The point is that even if you aren't able to use the new stuff at work, there are plenty of opportunities outside of work where you can show off what you have learned (such as meetups/conferences or hackathons). You might even consider writing blog posts about the technologies/frameworks that interest you. I have found many useful articles/videos on blogs before!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't worry about experience&lt;/strong&gt;&lt;br&gt;
I think this one applies more to junior developers who have recently graduated from college or Bootcamp. It's very easy for junior developers who just graduated to focus too much on building up their resume and acquiring "senior level" experience instead of focusing on learning new things and developing their skillset.&lt;/p&gt;

&lt;p&gt;However, this approach doesn't always work out well in the long run because it leads to junior developers trying to do things they aren't ready for yet (and then getting frustrated when they fail).&lt;/p&gt;

&lt;p&gt;Instead, I would recommend focusing on learning new things regardless of whether or not they will help your resume in the short term. If anything, take advantage of opportunities to build your skillset and give yourself an edge over other candidates during interviews (even if they don't lead directly to a job offer).&lt;/p&gt;

&lt;p&gt;Also, don't worry about whether or not something counts as "senior-level experience". Only worry about whether or not something will help you become a better developer!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final Thoughts&lt;/strong&gt;&lt;br&gt;
Junior developers should really focus on the fundamentals of programming and building projects while also improving their problem-solving skills. This will help you develop into a better developer over time.&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Our 8 favorite tools for monetizing your Jamstack website</title>
      <author>Jaden Baptista</author>
      <pubDate>Sat, 12 Jun 2021 01:41:30 +0000</pubDate>
      <link>https://dev.to/takeshape/our-8-favorite-tools-for-monetizing-your-jamstack-website-30pa</link>
      <guid>https://dev.to/takeshape/our-8-favorite-tools-for-monetizing-your-jamstack-website-30pa</guid>
      <description>&lt;p&gt;The Jamstack and ecommerce are a lot like chocolate and avocado. At first, they don't sound like they'll go together, but they actually work really well; once you try it and realize the potential, you'll find that there's a whole community of people ready to share their amazing recipes on how to make them taste great together. In the same way, the Jamstack can sometimes appear incompatible with ecommerce, but it doesn't have to be! Here are our top ten favorite tools to help you start selling on your Jamstack site:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#takeshape"&gt;
  &lt;/a&gt;
  &lt;a href="http://takeshape.io/"&gt;TakeShape&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TakeShape&lt;/strong&gt;'s API Mesh enables front-end developers to harness the power of the Jamstack by stitching together multiple external APIs with an intuitive internal CMS. I've actually been working on a series of livestreams about hydrating a product page with content from the TakeShape CMS and pricing data from Stripe, and while that might seem complex, TakeShape handles it smoothly. I just have to make one GraphQL request, and exactly the data I need arrives at the client, regardless of where that data originally came from. I wrote a summary article about those streams so you can see the process; you can &lt;a href="https://www.takeshape.io/articles/using-api-mesh-to-streamline-ecommerce-development-a-stream-summary/"&gt;check it out here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'm a little biased towards TakeShape, so I'll skip the ratings for this one, but I honestly love it; I'm including it in almost every project nowadays and think it's awesome.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stripe"&gt;
  &lt;/a&gt;
  &lt;a href="http://stripe.com/"&gt;Stripe&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The whole point of ecommerce is to make money, so you need a tool to collect payment information and actually charge your customers. &lt;strong&gt;Stripe&lt;/strong&gt; is the gold standard here. It's super simple to use, especially with the kits and libraries they provide, like &lt;a href="https://stripe.com/docs/payments/checkout"&gt;Checkout&lt;/a&gt; and &lt;a href="https://stripe.com/docs/stripe-js"&gt;Elements&lt;/a&gt;. Their documentation is best-in-class, and their developer support team is the most helpful I've ever had to deal with.&lt;/p&gt;

&lt;p&gt;Some more complicated setups can start getting difficult to manage, as Stripe locks you to using their system of products, subscriptions, prices, and customers, but that system is more than adequate for the vast majority of use cases. You do have to use something on the server-side for this, since Stripe requires that you keep one of your API keys secret for obvious reasons. On the Jamstack, that means running it on a host that supports serverless functions or funneling the requests to Stripe through an API Mesh like &lt;a href="http://takeshape.io/"&gt;TakeShape&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All in all, I give Stripe a 9.5/10 based on its incredible developer experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#snipcart"&gt;
  &lt;/a&gt;
  &lt;a href="https://snipcart.com/"&gt;Snipcart&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Snipcart&lt;/strong&gt;'s tagline is Add a shopping cart to any website. It sure is bold, but they live up to that claim: devs from big names like &lt;a href="https://www.fiverr.com/"&gt;Fiverr&lt;/a&gt; to small ecom sites are turning to Snipcart to make selling on the Internet easier. Using just HTML and JavaScript, you can inject a cart onto your site, define some attributes to describe whatever you're selling, and hook up your "Add To Cart" button. &lt;a href="https://docs.snipcart.com/v3/setup/installation"&gt;It's really that simple.&lt;/a&gt; DX is definitely important, but if the product manager still needs a little more convincing, you can tell them that it's portable (it's not stuck to any specific stack) and will speed up your development by working with your existing site. A lot of the tools in this market require you to build the site to work with the tool, but Snipcart has no such requirements.&lt;/p&gt;

&lt;p&gt;Snipcart is flexible enough to handle almost any use case well, but there are some situations where you might be better off reaching for a more low-level tool. For example, I was looking into building a marketplace, and the guys from Snipcart told me that having money moving from a buyer to a seller would be difficult to implement without the money first going through a single account, which opens you up to higher transaction fees and getting taxed on those transactions differently depending on your jurisdiction.&lt;/p&gt;

&lt;p&gt;Snipcart isn't the magic solution to every ecommerce need, but it absolutely nails its intended functionality, so I can confidently give this a 10/10.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memberful"&gt;
  &lt;/a&gt;
  &lt;a href="https://memberful.com/"&gt;Memberful&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Ecommerce is more than just paying for a product online; one of the core concepts in ecom is the membership subscription. &lt;strong&gt;Memberful&lt;/strong&gt; aims to simplify and abstract away the difficulty of this often tricky payment model, and man, does it succeed. Take a look at &lt;a href="https://memberful.com/help/how-to/create-a-plan/"&gt;this guide&lt;/a&gt; for an example of its simplicity. It's definitely designed with non-developers in mind, so this will be a perfect fit for you if you're trying to paywall content on a larger site with dedicated content managers, if you're working on a site without a backend (like a Jamstack site), or with a Wordpress site (they've got an excellent and well-maintained plugin).&lt;/p&gt;

&lt;p&gt;One thing I like about Memberful is that they're honest about their tool not being for everyone. &lt;a href="https://memberful.com/alternatives/"&gt;In their own words&lt;/a&gt;, "we'd rather recommend a competitor that’s a better fit for your business than try to hard sell you on Memberful." They go on to list some situations where Memberful might be a little tougher to use and then they offer some better alternatives. For example, Memberful works best on digital content, so if you're selling physical products via an online experience (like &lt;a href="https://www.butcherbox.com/"&gt;Butcher Box&lt;/a&gt; or &lt;a href="https://www.dollarshaveclub.com/"&gt;Dollar Shave Club&lt;/a&gt;), you might be better off with an all-in-one solution like &lt;a href="https://squareup.com/us/en"&gt;Square&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's less flexible than other solutions, but Memberful takes the master-of-one over the jack-of-all-trades approach, so they make up for it by perfecting their core feature set. They've definitely earned my approval: 9/10.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#auth0"&gt;
  &lt;/a&gt;
  &lt;a href="http://auth0.com/"&gt;Auth0&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Authentication is really hard to get right, and no matter how many times I try to roll it myself, I always fail. But then I heard about &lt;strong&gt;Auth0&lt;/strong&gt;, and I believe I physically sighed in relief. They just give you a login system with best practices built right in, something I was really bad at building previously. Their security experts have already worked out &lt;a href="https://auth0.com/blog/how-retailers-can-prevent-ecommerce-fraud-this-holiday-season/"&gt;solutions to fraud and other problems&lt;/a&gt; that modern ecommerce platforms are bound to face at some point or another.&lt;/p&gt;

&lt;p&gt;That said, Auth0 can be difficult to get started with. It takes a bit of knowledge about those best practices to use Auth0's platform correctly without introducing more bugs and vulnerabilities. Thankfully, they've taken care of this by creating an excellent store of educational content on this topic to make integrating with them far easier. If you're interested in learning about how to work with Auth0, the best place to start is &lt;a href="https://auth0.com/blog/"&gt;their blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With that said, it's the most powerful solution to one of the most common problems on the Internet: authentication. Auth0 earns a 8/10 from me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#foxyio-foxycart"&gt;
  &lt;/a&gt;
  &lt;a href="http://foxy.io/"&gt;Foxy.io&lt;/a&gt; (FoxyCart)
&lt;/h2&gt;

&lt;p&gt;If Snipcart is the easy-to-use, build-into-your-existing-website shopping cart solution, &lt;strong&gt;Foxy.io&lt;/strong&gt; is the super-powerful, only-for-devs, uber-customizable shopping cart solution. It's not better, just different from Snipcart, and so we use it in different scenarios. Perhaps when our small-town Mama's Pizza wants to start selling their pizzas online, Snipcart would be best, but Foxy.io might be the powerhouse needed to turn the gears behind BestBuy's website (large, but still with a single seller). Foxy.io doesn't manage inventory, while Snipcart does. Large sites like BestBuy likely are already handling that with a custom inventory solution, while something small like Mama's Pizza might make use of the inventory features of Snipcart to store their limited slate of pizza options. Foxy.io also can handle more payment gateways, which is unnecessary for smaller sites but could be critical for something as large as BestBuy.&lt;/p&gt;

&lt;p&gt;I really like how they put it on &lt;a href="https://wiki.foxycart.com/v/2.0/foxycarts_reason_for_being"&gt;this page&lt;/a&gt;: "FoxyCart is not a turnkey solution. This generally makes FoxyCart perfect for some and just plain wrong for others." I couldn't have said it better; Foxy.io (what they call it now) does the cart and checkout really well, but if that's not the largest part and central focus of your website, then you might be better off with a simple solution like Snipcart.&lt;/p&gt;

&lt;p&gt;It's perfect for a small set of ecommerce sites, but go with Snipcart for everything else. I give it a solid 6/10 though.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sendgrid"&gt;
  &lt;/a&gt;
  &lt;a href="https://sendgrid.com/"&gt;SendGrid&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Ah, &lt;strong&gt;SendGrid&lt;/strong&gt;. Where were you all my life? Emailing is super difficult. The World Wide Web has evolved for the last 25 years, but the whole emailing system is stuck in 1996. SendGrid is kind of like a translator between that nonsense we had to deal with ages ago and the modern way we work with APIs. With customer outreach, support, and marketing being such a big part of the ecommerce world, tools that can make emailing easy like SendGrid have become absolutely indispensable. There's not that much to say about SendGrid other than the fact that they're trusted with handling crucial parts of the architecture of big websites like eBay, Nextdoor, Uber, AirBNB, and Yelp.&lt;/p&gt;

&lt;p&gt;It does lean more towards being developer-friendly over content-creator-friendly, so you might find the interface a bit clunky if you're using SendGrid for blast emailing at a bigger company with dedicated marketers. It also looks like they funnel a lot of resources into development, which leaves customer support to focus on the biggest customers, so some smaller users have reported long stretches of time going by before hearing back from them.&lt;/p&gt;

&lt;p&gt;Overall, I love SendGrid, and despite its minor flaws, it's always worked well for me. I give this one a 9.5/10.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shopify"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.shopify.com/"&gt;Shopify&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You were expecting this one, weren't you? I'll admit, I used to rail against &lt;strong&gt;Shopify&lt;/strong&gt;, and I still have my qualms, but I've come to see just how powerful it can be. It's probably the least technical tool on this list, so that immediately opens up all sorts of possibilities to non-developers. That's quite important to a lot of web development agencies as their developers then don't have to be bogged down with minor updates and can focus on future development, depending on how much you've customized the templates they give you. There's a massive community (as one would expect the largest ecommerce solution to garner), and they've created all sorts of plugins and templates to make the developer's job even easier.&lt;/p&gt;

&lt;p&gt;There is a caveat in that last pro, though. The plugin system can put the stability of your website in the hands of others, and we've seen that go well — and occasionally very, very badly — for Wordpress. Using plugins like this can open you up to vulnerabilities exposed by the plugin authors (who can be sometimes slow to fix them), so make sure to only use plugins created by companies you trust. Shopify also tends to be more of a platform than an add-on tool, so while you get the convenience of using prebuilt templates, it's much harder to customize and add non-ecommerce content. Many ecommerce companies run blogs or other informational pages, which aren't so easy to implement (it's definitely possible though!). Lastly, there's the fees. On top of the fee to use Shopify (which can be anywhere from $9 - $2000 depending on your needs), you'll likely be paying a fee on every transaction (plus your payment processor's fee).&lt;/p&gt;

&lt;p&gt;I've grown to enjoy Shopify recently, but for many it's an acquired taste. Given just how powerful it can be, I'll give it a 7/10.&lt;/p&gt;

&lt;p&gt;There you have it! That's my favorite 8 tools for turning a profit from your Jamstack site. It might've been historically difficult to combine ecommerce and the simplicity of the Jamstack, but thanks to tools like these 8, I'm hopeful that we'll be seeing more amazing ecommerce Jamstack experiences on the web in the future.&lt;/p&gt;

&lt;p&gt;If you've got any questions about TakeShape or about the list in general, feel free to contact us on Twitter (&lt;a href="http://twitter.com/takeshapeio"&gt;@TakeShapeIO&lt;/a&gt;, &lt;a href="http://twitter.com/jadenguitarman"&gt;@jadenguitarman&lt;/a&gt;) or at &lt;a href="http://takeshape.io/"&gt;takeshape.io&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ecommerce</category>
      <category>api</category>
    </item>
    <item>
      <title>BugUFO: Get paid to debug or pay someone to debug it for you</title>
      <author>Nicolas Russo</author>
      <pubDate>Sat, 12 Jun 2021 00:37:30 +0000</pubDate>
      <link>https://dev.to/nicolasxrusso/bugufo-get-paid-to-debug-or-pay-someone-to-debug-it-for-you-4fk4</link>
      <guid>https://dev.to/nicolasxrusso/bugufo-get-paid-to-debug-or-pay-someone-to-debug-it-for-you-4fk4</guid>
      <description>&lt;p&gt;Could this be the future of debugging? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-bugufo"&gt;
  &lt;/a&gt;
  What is BugUFO?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://bugufo.com"&gt;BugUFO&lt;/a&gt; is a marketplace where programmers can post code bugs with a bounty, and the first programmer to solve the bug gets the bounty.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BD-TH-yE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/11072/1%2AVXgaoOgMjOVLV7K3hR29Jw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BD-TH-yE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/11072/1%2AVXgaoOgMjOVLV7K3hR29Jw.png" alt="Courtesy of BugUFO"&gt;&lt;/a&gt;&lt;br&gt;
&lt;sup&gt;Courtesy of BugUFO&lt;/sup&gt; &lt;/p&gt;

&lt;p&gt;The founders of &lt;a href="https://bugufo.com"&gt;BugUFO&lt;/a&gt; are 2 programmers, Ilya and Youssef, who were frustrated with the current state of debugging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HZkKizaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A3WNmV9SMbTWDHiMR-Z12Vw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HZkKizaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A3WNmV9SMbTWDHiMR-Z12Vw.gif" alt="Courtesy of BugUFO"&gt;&lt;/a&gt;&lt;br&gt;
&lt;sup&gt;Courtesy of BugUFO&lt;/sup&gt; &lt;/p&gt;

&lt;p&gt;According to the founders of BugUFO, typically, for a programmer to debug a program, they initially try to solve the problem themselves using print statements, and &lt;a href="https://en.wikipedia.org/wiki/Shotgun_debugging"&gt;shotgun debugging&lt;/a&gt;. If they’re slightly more advanced or the problem is slightly more difficult, they might use a debugger and approaches such as &lt;a href="https://en.wikipedia.org/wiki/Program_slicing"&gt;program slicing&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Profiling_(computer_programming)"&gt;code profiling&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Time_travel_debugging"&gt;time travel debugging&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Why%E2%80%93because_analysis"&gt;why-because analysis&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/Delta_debugging"&gt;delta debugging&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When all else fails, most programmers tend to resort to googling the error in the hopes of finding some solution to their problem.&lt;/p&gt;

&lt;p&gt;This is fine for simple bugs, but for slightly more niche or nuanced bugs, googling is not always a fruitful path.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#oneclick-debugging"&gt;
  &lt;/a&gt;
  One-click debugging
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwSL9Eoo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/10000/1%2AcOyk984oHVgMEhbjQOHuEw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwSL9Eoo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/10000/1%2AcOyk984oHVgMEhbjQOHuEw.jpeg" alt="Courtesy of BugUFO"&gt;&lt;/a&gt;&lt;br&gt;
&lt;sup&gt;Courtesy of BugUFO&lt;/sup&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nicolas&lt;/strong&gt;: The first question that I feel will be on most people’s minds is how this differs from free question answering sites (Stack Overflow, Quora, Reddit, etc.) or doing a quick google search?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Youssef&lt;/strong&gt;: We like and are frequent users ourselves of all these options. But oftentimes, we’ve posted questions that were ignored either because they were too long, had been marked as duplicates and closed (in Stack Overflow’s case), have gotten no useful responses, not to mention the anxiety and uncertainty of waiting for a response.&lt;/p&gt;

&lt;p&gt;In addition, if you’re googling, each response you come across needs to be vetted to make sure it solves your problem and not merely a similar problem.&lt;/p&gt;

&lt;p&gt;If you ask a question, and get a response, the response may be correct but too advanced for you to understand.&lt;/p&gt;

&lt;p&gt;With more complex problems, the response can sometimes be in the form of a hint, pseudo-code, or a code-snippet, instead of working code.&lt;/p&gt;

&lt;p&gt;Essentially, you’re unable to immediately incorporate it into your own code.&lt;/p&gt;

&lt;p&gt;There’s a cycle you go through of checking whether or not every answer actually solves your problem by making a change in your code, running it, and seeing if the error is gone, and the code functions as expected.&lt;/p&gt;

&lt;p&gt;There are only so many cycles that a developer can go through before they burn out.&lt;/p&gt;

&lt;p&gt;We’re trying to remove this menial, cyclic checking process such that you get rapid, tested solutions instead of suggestions that may or may not work.&lt;/p&gt;

&lt;p&gt;Another pain point in terms of question answering sites is on the problem-solver side, helpers are operating without enough information. For instance, users posting the problem to question answering sites may not elaborate on their specific development environment, or don’t post all of their code, only a small segment, or their question suffers from the &lt;a href="https://en.wikipedia.org/wiki/XY_problem"&gt;XY problem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XFS-v0lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/4712/1%2Agi1XuILJ-xPSfzfjYVODwQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XFS-v0lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/4712/1%2Agi1XuILJ-xPSfzfjYVODwQ.jpeg" alt="Courtesy of BugUFO"&gt;&lt;/a&gt;&lt;br&gt;
&lt;sup&gt;Courtesy of BugUFO&lt;/sup&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nicolas&lt;/strong&gt;: What about paid options (Fiverr, Upwork, etc.)?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ilya&lt;/strong&gt;: The paid options are more for wholesale outsourcing of code or feature development instead of quick code fixes.&lt;/p&gt;

&lt;p&gt;What if you’re trying to learn coding yourself or are a developer who has a bug in your code? Do you really want to go through the time and energy of vetting five developers, coordinating timezones, and overpaying, only to have 1 bug fixed? That could’ve been done in 15 minutes or you could’ve gone and done something else while someone was working on your problem without ever vetting any candidates. Basically, we’re saying: At the click of a button, someone starts working on your problem without ever having to talk to a human. If your problem isn’t solved, you don’t pay anything.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nicolas&lt;/strong&gt;: Why is your solution a paid solution rather than free?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ilya&lt;/strong&gt;: Paying someone drastically increases the odds that someone will actually solve your custom problem and do so in the timeframe you desire.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-bugufo-affects-the-learning-experience"&gt;
  &lt;/a&gt;
  How BugUFO affects the learning experience
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8WUZwEQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/18520/1%2AwrZ2HdYyoxo4eO-JjQpaew.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8WUZwEQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/18520/1%2AwrZ2HdYyoxo4eO-JjQpaew.png" alt="Courtesy of BugUFO"&gt;&lt;/a&gt;&lt;br&gt;
&lt;sup&gt;Courtesy of BugUFO&lt;/sup&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We think that BugUFO could be like a wormhole through time for self-learners — Youssef, BugUFO&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Nicolas&lt;/strong&gt;: As a self-taught programmer, I’m curious how this affects learning. Is paying for debugging going to hurt or help the learning experience in your opinion?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ilya&lt;/strong&gt;: For someone who is serious about improving, seeing working code can help the learning experience (e.g. by giving them the freedom to play with the code) and encourage them to keep on going.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Youssef&lt;/strong&gt;: For many people, struggling for hours to solve a problem you care about can hurt you more than help you because you end up developing negative associations with the project or with programming in general if you aren’t making progress. We think that BugUFO could be like a wormhole through time for self-learners, allowing for accelerated &lt;a href="https://en.wikipedia.org/wiki/Just-in-time_learning"&gt;just-in-time learning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nicolas&lt;/strong&gt;: How does a coder decide when to use BugUFO vs. figuring it out themselves?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ilya&lt;/strong&gt;: There are probably three typical use cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you come across an error that feels way beyond your current skill level&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you feel that you could eventually figure it out but it might take several days or weeks, and you’d rather make faster progress.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If there’s a time constraint that is tighter than your expected turnaround time solving it yourself.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Nicolas&lt;/strong&gt;: Thanks for your time. Would you be open to maybe doing a follow-up interview in the future?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ilya&lt;/strong&gt;: Anytime!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nicolas&lt;/strong&gt;: By the way, how did you come up with the name “BugUFO”?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Youssef &amp;amp; Ilya:&lt;/strong&gt; Top secret. (Laughter).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Special thanks to J.B. for getting me in touch with BugUFO’s founders.)&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>news</category>
      <category>startup</category>
    </item>
    <item>
      <title>JavaScript Quick Tip: Quickly Filter Out All Falsy Values From An Array</title>
      <author>Oliver Jumpertz</author>
      <pubDate>Fri, 11 Jun 2021 23:37:23 +0000</pubDate>
      <link>https://dev.to/oliverjumpertz/javascript-quick-tip-quickly-filter-out-all-falsy-values-from-an-array-4bcj</link>
      <guid>https://dev.to/oliverjumpertz/javascript-quick-tip-quickly-filter-out-all-falsy-values-from-an-array-4bcj</guid>
      <description>&lt;p&gt;Working with arrays in a functional way has mostly become the default when working with JavaScript these days. Why should you use a traditional imperative loop, like for, for..of, while, do..while, etc., when you can use map, filter, and forEach?&lt;/p&gt;

&lt;p&gt;These functional methods have one caveat, though: You can never throw from them without aborting the whole pipeline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someConditionMet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// this is not the best idea...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;someValidValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what do you do then? Well, you can return null to mark that you have an invalid result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someConditionMet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// now the pipeline can continue&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;someValidValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's fine. If you don't want your pipeline to abort, you can continue using null values as a marker for "this didn't work out".&lt;/p&gt;

&lt;p&gt;But what if you want to get rid of those values afterward? Perhaps something like this?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;someArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someConditionMet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// now the pipeline can continue&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;someValidValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This leaves you only with valid values, which is perfectly fine, but we can make this even shorter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;JavaScript has first-class functions. You can pass any function reference to any other function that expects a function as this particular argument. And the Boolean constructor is actually the function responsible to define truthy and falsy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the filter step of this pipeline has run, you only have all truth values left, and can continue working with them without having to handle special cases like null or undefined.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-whole-tip-as-an-image"&gt;
  &lt;/a&gt;
  The Whole Tip As An Image
&lt;/h2&gt;

&lt;p&gt;If you like visual content more, or if you want to store it for later, I put all this into one image for you. I hope you like it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m90T-qr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623430761783/YZiXOTzyD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m90T-qr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623430761783/YZiXOTzyD.png" alt="A picture showcasing the above code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-you-leave"&gt;
  &lt;/a&gt;
  Before You Leave
&lt;/h2&gt;

&lt;p&gt;If you would love to read even more content like this, feel free to visit me on &lt;a href="https://twitter.com/intent/follow?screen_name=oliverjumpertz"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/oliverjumpertz/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'd love to count you as my ever-growing group of awesome friends!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Data Structures and Algorithms</title>
      <author>Zach</author>
      <pubDate>Fri, 11 Jun 2021 23:33:47 +0000</pubDate>
      <link>https://dev.to/zbretz/data-structures-and-algorithms-i91</link>
      <guid>https://dev.to/zbretz/data-structures-and-algorithms-i91</guid>
      <description>&lt;p&gt;This might be a bit of a rambling post. I'm new to this. I'll try my best.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-you-want-to-work-for-one-of-the-big-boys"&gt;
  &lt;/a&gt;
  Do you want to work for one of the big boys?
&lt;/h2&gt;

&lt;p&gt;Then you better get good at data structures and algorithms (DSA). Google, Facebook, Apple, etc - from what I've gathered, they all run you through a gauntlet of questions / toy problems to test your reasoning skills and ability to apply algorithms to coding challenges. Think LeetCode, etc.&lt;/p&gt;

&lt;p&gt;Those problems are really hard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-i-want-to-work-for-one-of-those-companies"&gt;
  &lt;/a&gt;
  Do I want to work for one of those companies?
&lt;/h3&gt;

&lt;p&gt;I'm not sure. But maybe I will when my bootcamp is over and if I do, I know I'd thank myself for getting an early start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-at-the-start"&gt;
  &lt;/a&gt;
  Let's start at the start.
&lt;/h2&gt;

&lt;p&gt;While researching Hack Reactor I came across a great youtube resource. There's this guy that interviews graduates of the many coding bootcamps, and during his HR interview (video below), all of the panelists said that they wish they had started sooner on learning DSA. So I'm like, ok! This sounds like advice.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B5oVd5g4kmY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;After getting through Precourse, I had a week before the immersive began - a week of free time - and so I set myself on getting the ball rolling. There are a lot of learning resources out there, and I had a bit of analysis paralysis choosing among them so I thought I'd go with the shortest one that covered what I wanted to learn. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/t2CEgPsws3U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I've only gotten through Binary Trees (maybe a third of the way through?) but I think I've got an understanding of what this intimidating sounding stuff is all about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#binary-trees"&gt;
  &lt;/a&gt;
  Binary Trees
&lt;/h2&gt;

&lt;p&gt;Binary trees are pretty intuitive (at the level I understand them). Take an ordered list and search through it for a specific list item (a number). But don't start at the front and work through to the end. Instead, examine the halfway item and if that item is smaller than the number you're looking for, throw out the first half of the list. If it's too big, throw out the second half. And repeat.&lt;/p&gt;

&lt;p&gt;Ok cool. Why search in that way? What's wrong with traversing a list from front to back? Well for whatever reason at this point, my brain remembered a video I had watch some time ago. So I gave it a re-watch. Here are two google engineers role-playing their interview process:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XKu_SEDAykw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The 'interviewee' makes references to quadratic, linear, and logarithmic solutions and describes how some of these are quicker and less computationally expensive for a computer to process. What do those terms mean? Well I went on a hunt to find out and found these articles that helped me make some sense of it all.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@StueyGK/algorithm-time-complexity-and-big-o-notation-51502e612b4d"&gt;algorithm-time-complexity-and-big-o-notation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation"&gt;a-beginners-guide-to-big-o-notation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/dataseries/how-to-calculate-time-complexity-with-big-o-notation-9afe33aa4c46"&gt;how-to-calculate-time-complexity-with-big-o-notation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, I think I get it. Binary search is O(log n). I'm missing some words in that sentence but you get the drift. It solves large data sets with logarithmic efficiency.&lt;/p&gt;

&lt;p&gt;Remember how the list is ordered? If our target number is  smaller than the halfway point, it's also smaller than all of the numbers to the right of the halfway point. In this way, we can throw away list the one-half at a time without wasting cycles looking through numbers that are either too big or too small.&lt;/p&gt;

&lt;p&gt;What does that mean? Well let's say it takes one second to go through a computing cycle. If I have a list that is 10 items long, it'll take 10 seconds to find an item at the end of the list. If I extend the list to 20 items, it'll take 20 seconds to traverse the list. The computing time grows linearly with the size of the list.&lt;/p&gt;

&lt;p&gt;Well with binary search, as the item list grows, the computing time only grows logarithmically, which, as the numbers get large, provides a huge savings in cycles. Here's what I mean. Let's say it takes our binary search 10 seconds to find one number in a list of ten. How long will it take to find one item out of twenty? Not twice as long, not even close. Because the algorithm throws away half the list at each step, it only takes one cycle (which we were very flexibly saying took one second) to halve our list from twenty items to ten.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h5C_Z9Zc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn10e8dd8zcqs6k0xtdh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h5C_Z9Zc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn10e8dd8zcqs6k0xtdh.png" alt="log vs linear growth"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is dope.&lt;/p&gt;

&lt;p&gt;So alright, that makes sense, let's apply it.&lt;/p&gt;

&lt;p&gt;That's the cool thing about code. You learn something, you want to try it out. Open a code editor and boom. And a great way to learn something isn't just to read about it. It's to do it. It's way too tempting to read something and because you can follow the explanation, assume you know it. But I don't think I really know something unless I can explain it, or in the case of code, implement it on my own.&lt;/p&gt;

&lt;p&gt;In my next post I'll share some of the code I wrote to compare the speeds of binary and linear solutions to the simple task of finding one single number in an ordered list of numbers. &lt;/p&gt;

&lt;p&gt;Ok, I think that's enough for now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I really really enjoyed the process I wrote about above. It answered so many questions and opened up so many more. What is space complexity? Is recursion time expensive? Why was it so hard to write those simple search functions and the next time I write them, will it be easier for me?&lt;/p&gt;

&lt;p&gt;So yeah, I think I'm going to take that advice and start studying this stuff. It might lead to more employment opportunities, and besides -- debugging and thinking pain aside -- it's fun to make things work the way you want them to.&lt;/p&gt;

&lt;p&gt;My understanding is that smaller companies place less of an emphasis on DSA in the interview process. What if I go in that direction in my job search? Will I have wasted my time studying DSA? Nope. I mean first of all I may be wrong. And besides, it means I'll be ready for whatever they throw at me. I'll have a deeper understanding of programming, of how to write efficient code, and shoot, the nerd in me is loving it.&lt;/p&gt;

</description>
      <category>datastructures</category>
      <category>algorithms</category>
      <category>learning</category>
      <category>bootcamp</category>
    </item>
    <item>
      <title>ALPHA REACT 18 HAS ARRIVED </title>
      <author>michelledev</author>
      <pubDate>Fri, 11 Jun 2021 23:20:44 +0000</pubDate>
      <link>https://dev.to/michelledev3/alpha-react-18-has-arrived-4712</link>
      <guid>https://dev.to/michelledev3/alpha-react-18-has-arrived-4712</guid>
      <description>&lt;p&gt;The React team announced earlier this week that the initial preview for React 18 is live, and work has started for the React 18 release. This is an alpha release and not suitable for production but encourages testing and feedback. Now is the time that library authors can try React 18 and provide feedback and direction before its official release. A primary goal is to prepare the ecosystem for a smooth and graduation adoption of React 18 by using existing applications and libraries. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-18-good-news"&gt;
  &lt;/a&gt;
  React 18 Good News
&lt;/h2&gt;

&lt;p&gt;The upgrades provided with React 18 do not require significant code changes!  We may need to repeat this and embrace the beauty of the good news.  Almost all of the benefits of the upgrade do not require code changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-18-highlights-ux-internal-architecture-and-more"&gt;
  &lt;/a&gt;
  React 18 Highlights | UX, Internal Architecture, and More
&lt;/h2&gt;

&lt;p&gt;React 18 includes out-of-the-box improvements (automatic batching), new APIs ( ), and a new streaming server renderer with built-in support for  . React 18 also includes architectural improvements for React server-side rendering (SSR) performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-optin-mechanism"&gt;
  &lt;/a&gt;
  New Opt-In Mechanism?
&lt;/h2&gt;

&lt;p&gt;Concurrent Rendering (the new opt-in mechanism) and let's React prepare multiple versions of the UI simultaneously. This change is primarily behind the scenes, but it unlocks new possibilities to improve your app's actual and perceived performance.&lt;br&gt;
Since concurrency in React 18 is opt-in, there are no significant out-of-the-box breaking changes to component behavior. You can upgrade to React 18 with minimal or no changes to your application code, with a level of effort compared to a typical major React release. According to the working team at React, many users will be able to upgrade within a single afternoon. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-new-root-api"&gt;
  &lt;/a&gt;
  The New Root API
&lt;/h2&gt;

&lt;p&gt;This ReactDOM.render() is now called the Legacy Root API. It works the same way as React 17. You can still use this but know that it will be deprecated eventually.&lt;br&gt;&lt;br&gt;
New Root API &lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B8LZlIC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjcps0nxwelym290rmd6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B8LZlIC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjcps0nxwelym290rmd6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Very similar to the previous Root API.  With React 18 use &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WV9i_rAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cly9n7vi7e73lfbgg713.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WV9i_rAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cly9n7vi7e73lfbgg713.png" alt="Alt Text"&gt;&lt;/a&gt; .&lt;br&gt;
The React 18 Root API change means:&lt;br&gt;&lt;br&gt;
• The hydrate method and render callback are gone&lt;br&gt;
• There is now a createRoot option  &lt;/p&gt;

&lt;p&gt;When you switch to the New Root API, you automatically get the new out-of-the-box improvements that come with React 18!&lt;br&gt;
This change is all you need to do to upgrade the client to React 18. If you only use React client-side, you are finished.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starttransition-api"&gt;
  &lt;/a&gt;
  startTransition API
&lt;/h2&gt;

&lt;p&gt;The new API helps with webpage responsiveness. The startTransition can not only keep current webpage responsive and able to perform heavy non-blocking UI updates at the same time. &lt;br&gt;
Think of it when a user types in a search box, the input value is immediately updated while the research results may wai t afew milliseconds. The API provides a way to differientation between quick and delayed updates. The delayed udpates is referred to as Transition Updates. &lt;br&gt;
Heavy UI or non-urgent updates we can wrap with startTransition API as:&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tzhjWVUY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwk6rgytutxux0p1fa0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tzhjWVUY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwk6rgytutxux0p1fa0i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverside-rending-improvements"&gt;
  &lt;/a&gt;
  Server-Side Rending Improvements
&lt;/h2&gt;

&lt;p&gt;React 18 offers full support for Suspense; if you remember, React 16 had support but not full support. &lt;br&gt;
Suspense is a functionality set that allows for waiting for data to resolve before a state transition (delayed transitions), reducing UI clashes while data loads (placeholder throttling), and coordinating the appearance of a set of components by streaming them in order (SuspenseList). With React 18, we can break React components into smaller chunks using .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timeline"&gt;
  &lt;/a&gt;
  TimeLine
&lt;/h2&gt;

&lt;p&gt;There is no specific release date scheduled, but we should expect something over the next few months.&lt;br&gt;&lt;br&gt;
• Library Alpha: Available June 2021&lt;br&gt;
• Public Beta: June 2021 + a few months &lt;br&gt;
• Release Candidate (RC): Several weeks post Beta Release &lt;br&gt;
• General Availability: Several weeks post RC&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alpha-beta-gamma-the-good-old-days-"&gt;
  &lt;/a&gt;
  Alpha, Beta, Gamma? (the good old days ;)
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#alpha"&gt;
  &lt;/a&gt;
  Alpha
&lt;/h2&gt;

&lt;p&gt;The initial preview.  Most features are stable, but work is being done to finalizes new APIs   and stylesheets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beta"&gt;
  &lt;/a&gt;
  Beta
&lt;/h2&gt;

&lt;p&gt;Once React 18 is feature complete, the React 18 Beta will be released.  The Beta version includes all of the breaking changes and new features to the final release. Beta is also a time for a larger community (outside of the library authors) to start trying React 18, provide feedback, and report any remaining issues. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rc"&gt;
  &lt;/a&gt;
  RC
&lt;/h2&gt;

&lt;p&gt;When React 18 is fully feature complete and confident in the stability of the release, it becomes a release candidate. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stable"&gt;
  &lt;/a&gt;
  Stable
&lt;/h2&gt;

&lt;p&gt;Then React 18 can release!&lt;/p&gt;

&lt;p&gt;I am excited to check out the Alpha, as React 17 was the building block for the highly anticipated React 18. I would love to read your insights on the new alpha. &lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rJuI7jc---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sefhy3k7qk4obc77t32y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rJuI7jc---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sefhy3k7qk4obc77t32y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>discuss</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Best Laptops for Software Development in 2021</title>
      <author>Hello Dev World Blog</author>
      <pubDate>Fri, 11 Jun 2021 22:28:47 +0000</pubDate>
      <link>https://dev.to/hellodevworldblog/2021-best-laptops-for-software-development-573p</link>
      <guid>https://dev.to/hellodevworldblog/2021-best-laptops-for-software-development-573p</guid>
      <description>&lt;p&gt;&lt;em&gt;This post contains affiliate links. If you use these links to buy something I may earn a commission. Thanks.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, I often get asked what the best computer for doing software development is and I kind of hate that question because the answer is it depends. Are you only going to use it for software development? What else do you want to do on it? What operating system do you want? What kind of development are you going to be doing? So ya. It depends and arguably you could do development from just your phone. Nothing special needed. However, I will do my best to make a top 5 list of best laptop choices for software development (in no particular order).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-macbook-pro-13"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://amzn.to/35d1a3q"&gt;MacBook Pro 13”&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Okay so this is a hot topic but I love using a &lt;a href="https://amzn.to/35d1a3q"&gt;MacBook&lt;/a&gt; for development. I’ve been using them for years and never had issues. It’s also a must-have if you are doing ruby development as you may run into issues with it on a PC. The reason I say a &lt;a href="https://amzn.to/35d1a3q"&gt;13” MacBook Pro&lt;/a&gt; is because the &lt;a href="https://amzn.to/35bOxp5"&gt;16” versions&lt;/a&gt; don’t have the M1 chip yet. It is on its way but not out yet. When that comes out I will be updating this for that instead. You can never have too much real estate when developing especially for web developers. If you are looking to do App development and want to support apple devices an &lt;a href="https://amzn.to/3cBs74K"&gt;iMac&lt;/a&gt; or &lt;a href="https://amzn.to/35d1a3q"&gt;MacBook Pro&lt;/a&gt; will be a must-have as you need them to compile your apps and release them to the store. If you are a game engineer the screens on the &lt;a href="https://amzn.to/35d1a3q"&gt;MacBooks&lt;/a&gt; are incredible and with the new M1 chips you shouldn’t have any issue with processing power although they may run a little hot. I also get the higher RAM and storage because I would rather have more and not need it than need it but not have it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-razer-blade-15"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://amzn.to/35fsUEi"&gt;Razer Blade 15&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you are leaning more towards a pc the &lt;a href="https://amzn.to/35fsUEi"&gt;razer blade 15 with a RTX 3070&lt;/a&gt; is a great choice. I love this laptop because is a beast and super portable. I used to have this laptop for traveling because I liked that I could do work and gaming on the laptop. If you want a lot of power in a small laptop this is a great choice. The screen is also amazing. It also has plenty of processing power for the game developers and a great screen for them to work on. If you are doing .NET development (not core but anything other than core) you will want to opt for a PC as you won’t be able to do it on a mac. Again I opt for the higher ram and if possible get more storage. I also opt for &lt;a href="https://amzn.to/35fsUEi"&gt;the 3070&lt;/a&gt; instead of &lt;a href="https://amzn.to/3gdVJYc"&gt;the 3060&lt;/a&gt; because I use it for gaming and would rather have the power than not. The extra power is also a must if you are going to be doing game development or video processing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-asus-rog-zephyrus%EF%BB%BF%EF%BB%BF"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://amzn.to/3iyW9dh"&gt;Asus ROG Zephyrus﻿﻿&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This is actually the current laptop that I have as my travel laptop. It is such a beast of a computer for a great price. It isn’t too heavy and has enough power for gaming as well as web development. If you want the best screen around this isn’t the best choice you get a lot for your money with this laptop. You get a great amount of storage and RAM in a small laptop for around $2000. I have last years’ version and since then they have unfortunately raised the prices I think due to the expense of the new graphics cards but I still think this years’ is a great choice for a great price. They do have a &lt;a href="https://amzn.to/3ivtKoq"&gt;cheaper option with a 3060&lt;/a&gt; instead of a 3070 personally I think it’s worth the extra for the better graphics card but I also play some graphics-intensive games. Again if you are doing .NET development (not core but anything other than core) you will want to opt for a PC as you won’t be able to do it on a mac. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-surface-pro"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://amzn.to/2RMpupv"&gt;Surface Pro&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I have always found &lt;a href="https://amzn.to/2RMpupv"&gt;surface pros&lt;/a&gt; really interesting. At this point, they are a great very portable option. However, they are more like tablets which bother some people. They do run the full Windows OS and can definitely handle web development. I wouldn’t choose this if you are a game developer as I don’t think it would have enough processing power. But if you are looking for a lightweight very portable option for development definitely check one of these out! One these I actually opt for the cheaper options because you won’t be using this for much more than web development or basic web browsing and I don’t think it’s worth the extra cost for the &lt;a href="https://amzn.to/3cBc6vy"&gt;upgraded version with more RAM and storage&lt;/a&gt; as the &lt;a href="https://amzn.to/2RMpupv"&gt;lower version&lt;/a&gt; can handle everything you’d be doing on it. Again if you are doing .NET development (not core but anything other than core) you will want to opt for a PC as you won’t be able to do it on a mac although visual studio (the full IDE) does take a good amount of processing power usually so if you will be doing this I would consider the upgraded version of the surface&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-dell-xps-15"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://amzn.to/3gceQBU"&gt;Dell XPS 15&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you are a .Net developer or work in a PC shop you will most likely have used this before or may currently be using it. Say what you will about dell but I never had issues developing on an &lt;a href="https://amzn.to/3gceQBU"&gt;XPS&lt;/a&gt;. They are a super solid option if you are doing web development as they are plenty powerful but don’t have all the bells and whistles that you pay extra for in other computers. I don’t think they are the best option for gaming devs or people who want to also use their laptops for gaming but if you just want to use your computer for development this is a very solid and cheap option.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-msi-stealth"&gt;
  &lt;/a&gt;
  *Bonus &lt;a href="https://amzn.to/3pJm7wf"&gt;MSI Stealth&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I have always been a huge MSI fan. My first laptop was an MSI and lasted over 5 years. They are a little more pricey but they have great customer service and are built really well. &lt;a href="https://amzn.to/3pJm7wf"&gt;This MSI laptop&lt;/a&gt; will be able to handle anything and everything and is definitely a great investment especially if you are a game developer or would like to play games on this laptop as well. They do have &lt;a href="https://amzn.to/35f4zhT"&gt;cheaper versions&lt;/a&gt; of this laptop with similar specs. But, these are the specs I would go for especially if you are doing any gaming. If you don’t care a lot about refresh rate or playing a lot of processor-heavy games you can definitely go with the &lt;a href="https://amzn.to/35f4zhT"&gt;cheaper version&lt;/a&gt; though and they are still a great choice. &lt;/p&gt;

&lt;p&gt;I hope this helps you when deciding on your next laptop you really can’t go wrong with any of the options just keep in mind the type of development you want to do and what else you may want to do on the laptop.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>career</category>
      <category>help</category>
    </item>
    <item>
      <title>Working with Sprite Sheets in Unity</title>
      <author>Joseph Maurer</author>
      <pubDate>Fri, 11 Jun 2021 21:22:14 +0000</pubDate>
      <link>https://dev.to/mwrpwr/working-with-sprite-sheets-in-unity-3pjb</link>
      <guid>https://dev.to/mwrpwr/working-with-sprite-sheets-in-unity-3pjb</guid>
      <description>&lt;p&gt;Sprites are a vital part of working on a game in Unity. Part of that is how do you go about slicing a sprite that contains multiple images within it. I’m going to spend some time going through a basic example of how to split a sprite and hook it up to an animation 2D platform game! Let’s get started!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AQXs_w_IaxU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;To start you are going to need to acquire a sprite sheet from somewhere. &lt;a href="https://kenney.nl/assets/platformer-characters"&gt;Here is a link to where I acquired the platform character for this project&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f0XT5P9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7jic13nw3vngha2gxhq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f0XT5P9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7jic13nw3vngha2gxhq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once imported into Unity, you are going to need to splice the sprite. You can do this in a number of ways, but I suggest starting by seeing if Unity can automatically figure out each of the images. To do this, use automatic mode as pictured below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBjApIbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfwq7c16fldqx9izuxw4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBjApIbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfwq7c16fldqx9izuxw4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once finished, you will see a light grey box around each of the images in the sheet. Hit Apply and let Unity work the magic behind the scenes to cut each image into a usable asset. You will know it is done when you can expand the sheet and see each image appended. Something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O3-XakX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvagop9t3kvxjmc1hbpx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O3-XakX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvagop9t3kvxjmc1hbpx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, you can start making your animations for your character. In my basic example, this just involved swapping the sprites on each possible state to be the correct image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro tip:&lt;/strong&gt; Expose lots of variables within your Animator so that it’s easy to tell your player how to move!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nfS1t8DY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ridzxlkjb3vvnalmb4vz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nfS1t8DY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ridzxlkjb3vvnalmb4vz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And then you’re done! You now have an easy way to control your player in code so that you can make a cool game!&lt;/p&gt;




&lt;p&gt;I hope this tip helps! Follow me on twitter for more tech tips!&lt;/p&gt;

</description>
      <category>unity3d</category>
      <category>tutorial</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Validate Your Endpoints Using Spring</title>
      <author>Abdulcelil Cercenazi</author>
      <pubDate>Fri, 11 Jun 2021 21:16:19 +0000</pubDate>
      <link>https://dev.to/jarjanazy/validate-your-endpoints-using-spring-4l3e</link>
      <guid>https://dev.to/jarjanazy/validate-your-endpoints-using-spring-4l3e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-do-we-want-to-do"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What Do We Want To Do?&lt;/strong&gt; 🤔
&lt;/h2&gt;

&lt;p&gt;Apply validation to the objects we receive at the endpoint controllers from clients.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-first-solution-that-comes-to-mind"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What Is The First Solution That Comes To Mind?&lt;/strong&gt; 🧠
&lt;/h2&gt;

&lt;p&gt;it's simple, right? write functions that validate those objects.&lt;/p&gt;

&lt;p&gt;Say we have an endpoint to add new Shipments. 🚚&lt;/p&gt;

&lt;p&gt;Let's start with the DTO classes (Data Transfer Object)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RequiredArgsConstructor&lt;/span&gt; &lt;span class="nd"&gt;@Getter&lt;/span&gt;  
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ShipmentComponentDTO&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RequiredArgsConstructor&lt;/span&gt; &lt;span class="nd"&gt;@Getter&lt;/span&gt;  
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ShipmentDTO&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ShipmentComponentDTO&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;shipmentComponentDTOs&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the controller&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RestController&lt;/span&gt;  
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ShipmentController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="nd"&gt;@PostMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/shipment/add"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;addShipment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@RequestBody&lt;/span&gt; &lt;span class="nc"&gt;ShipmentDTO&lt;/span&gt; &lt;span class="n"&gt;shipmentDTO&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shipmentDTO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProductCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;badRequest&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Product code can't be null"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shipmentDTO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCount&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;badRequest&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Count can't be negative or zero"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;allComponentsAreValid&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shipmentDTO&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;badRequest&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Component product code can't be null"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":)"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;allComponentsAreValid&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ShipmentDTO&lt;/span&gt; &lt;span class="n"&gt;shipmentDTO&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ShipmentComponentDTO&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;shipmentComponentDTOs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shipmentDTO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getShipmentComponentDTOs&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;shipmentComponentDTOs&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  
                &lt;span class="n"&gt;shipmentComponentDTOs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  
                &lt;span class="n"&gt;shipmentComponentDTOs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
                &lt;span class="nf"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;  
                &lt;span class="n"&gt;allMatch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shipmentComponentDTO&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;shipmentComponentDTO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProductCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#notice-all-the-manual-tedious-work-we-had-to-do"&gt;
  &lt;/a&gt;
  Notice all the manual tedious work we had to do.🤕
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#cant-anyone-help-us-make-this-task-more-fun"&gt;
  &lt;/a&gt;
  Can't anyone help us make this task more fun?😏
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#please-meet-the-javax-validator"&gt;
  &lt;/a&gt;
  Please meet the Javax validator.🥳
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It provides a set of annotations that are used with class fields.&lt;/li&gt;
&lt;li&gt;They act as constraints.

&lt;ul&gt;
&lt;li&gt;this field should not be null&lt;/li&gt;
&lt;li&gt;this list should have a minimum size of 5&lt;/li&gt;
&lt;li&gt;and many more...&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-do-it"&gt;
  &lt;/a&gt;
  How to do it?👀
&lt;/h2&gt;

&lt;p&gt;For the object we want to validate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We annotate the fields we want to validate with annotations from

&lt;code&gt;javax.validation.constraints&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Then, we annotate the parameter of the controller where we want to validate.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We then have to catch the error thrown by the validator, and return a proper response to the user.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#lets-code-it"&gt;
  &lt;/a&gt;
  Let's code it 🦾
&lt;/h3&gt;

&lt;p&gt;Here are the DTO objects&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RequiredArgsConstructor&lt;/span&gt; &lt;span class="nd"&gt;@Getter&lt;/span&gt;  
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ShipmentComponentDTO&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="nd"&gt;@NotBlank&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Component product code can't be null"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
    &lt;span class="c1"&gt;// required by the javax validation code  &lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ShipmentComponentDTO&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;productCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RequiredArgsConstructor&lt;/span&gt; &lt;span class="nd"&gt;@Getter&lt;/span&gt;  
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ShipmentDTO&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="nd"&gt;@NotBlank&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Product code can't be null"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
    &lt;span class="nd"&gt;@Min&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  

    &lt;span class="nd"&gt;@Size&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Component product code can't be empty"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="nd"&gt;@NotNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Component product code can't be null"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="nd"&gt;@Valid&lt;/span&gt;  
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ShipmentComponentDTO&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;shipmentComponentDTOs&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ok-what-were-those-annotations"&gt;
  &lt;/a&gt;
  Ok, what were those annotations?👇
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;NotBlank

&lt;ul&gt;
&lt;li&gt;This field can't be null or empty string&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Min

&lt;ul&gt;
&lt;li&gt;this integer should have a min value we specify&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Size

&lt;ul&gt;
&lt;li&gt;this array's size should be within the boundaries we specify&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;NotNull

&lt;ul&gt;
&lt;li&gt;This field must not be null &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Valid

&lt;ul&gt;
&lt;li&gt;Validate the fields in this object &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#now-here-is-the-controller"&gt;
  &lt;/a&gt;
  Now, here is the controller👇
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RestController&lt;/span&gt;  
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ShipmentController_Validation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="nd"&gt;@PostMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"validation/shipment/add"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;addShipment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@RequestBody&lt;/span&gt; &lt;span class="nd"&gt;@Validated&lt;/span&gt; &lt;span class="nc"&gt;ShipmentDTO&lt;/span&gt; &lt;span class="n"&gt;shipmentDTO&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":)"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-was-that-validated-annotation"&gt;
  &lt;/a&gt;
  What was that @Validated annotation?🤨
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;it tells Spring to run the validation mechanism on this object according to its validation annotations(NotBlank, etc..)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#finally-lets-catch-the-exception-thrown-by-the-validator-and-generate-a-proper-response"&gt;
  &lt;/a&gt;
  Finally, let's catch the exception thrown by the validator and generate a proper response
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Order&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Ordered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;HIGHEST_PRECEDENCE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;span class="nd"&gt;@ControllerAdvice&lt;/span&gt;  
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ValidationAdvice&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="nd"&gt;@ResponseStatus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;BAD_REQUEST&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="nd"&gt;@ResponseBody&lt;/span&gt;  
 &lt;span class="nd"&gt;@ExceptionHandler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MethodArgumentNotValidException&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;methodArgumentNotValidException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MethodArgumentNotValidException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="nc"&gt;BindingResult&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBindingResult&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
        &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FieldError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fieldErrors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFieldErrors&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;errorMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fieldErrors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getDefaultMessage&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;badRequest&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errorMessage&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion✍️
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Imagine having an API with many endpoints that we need to validate. Which method would be better?&lt;/li&gt;
&lt;li&gt;The Validator.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#code-on-github"&gt;
  &lt;/a&gt;
  Code on &lt;a href="https://github.com/Jarjanazy/Spring-Validation-demo"&gt;GitHub&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>webdev</category>
      <category>java</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>My new website 😊</title>
      <author>dever404</author>
      <pubDate>Fri, 11 Jun 2021 21:11:03 +0000</pubDate>
      <link>https://dev.to/dever404/my-new-website-3ojc</link>
      <guid>https://dev.to/dever404/my-new-website-3ojc</guid>
      <description>&lt;p&gt;Check my new website version using #reactjs and deployed on #firebase&lt;br&gt;
&lt;a href="http://www.errafaiy.com"&gt;www.errafaiy.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a beginner in #reactjs and I need your feedback&lt;br&gt;
Grinning face.&lt;/p&gt;

</description>
      <category>react</category>
      <category>firebase</category>
      <category>showdev</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>CSP - Content Security Policy</title>
      <author>Jordan Finneran</author>
      <pubDate>Fri, 11 Jun 2021 21:10:25 +0000</pubDate>
      <link>https://dev.to/jordanfinners/csp-content-security-policy-d3c</link>
      <guid>https://dev.to/jordanfinners/csp-content-security-policy-d3c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="#intro"&gt;Intro&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#directives"&gt;Directives&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#values"&gt;Values&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#summary"&gt;Summary&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Lastly but by no means least, carrying on from my previous blog about &lt;a href="https://jordanfinners.dev/blogs/website-security-week"&gt;website security week&lt;/a&gt;, we're going to talk about CSP or Content Security Policy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;CSP is Content Security Policy&lt;/a&gt; this is one of the most powerful tools in your arsenal to secure your website.&lt;/p&gt;

&lt;p&gt;These are two ways to to set your content security policy, either as a header &lt;code&gt;Content-Security-Policy&lt;/code&gt; or via a meta tag in your HTML for example:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta http-equiv="Content-Security-Policy" content="default-src 'none'; img-src https://google.com; child-src 'none';"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#directives"&gt;
  &lt;/a&gt;
  Directives &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The content policy is made up of directives (the thing to restrict) and the value(s) on how it can be restricted. We won't cover all all the possible directives in this blog but you can find &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#directives"&gt;a list of all the directives here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They syntax is as follows:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: directive value; directive value value; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;There are some key directives you should set.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defaultsrc"&gt;
  &lt;/a&gt;
  default-src
&lt;/h3&gt;

&lt;p&gt;As the name suggests this is the fallback if there aren't more specific directives used. I'd recommend setting it to 'none'&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: default-src 'none'; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#connectsrc"&gt;
  &lt;/a&gt;
  connect-src
&lt;/h3&gt;

&lt;p&gt;This affects what you can 'connect' to via fetch and make HTTP requests to.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: default-src 'none'; connect-src https://some.api.com; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#imgsrc"&gt;
  &lt;/a&gt;
  img-src
&lt;/h3&gt;

&lt;p&gt;This affects where you can load images from.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: default-src 'none'; img-src https://some.img.host https://another.img.place; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#formaction"&gt;
  &lt;/a&gt;
  form-action
&lt;/h3&gt;

&lt;p&gt;This affects where you can send form submissions to via the HTML form attributes.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: default-src 'none'; form-action https://some.api.host; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;These are just a handful of the directives you should set on your content security policy. The more specific your content security policy directives the stronger your policy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#values"&gt;
  &lt;/a&gt;
  Values &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can specify many different types of values for each directive and its important to understand the affect of each one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#none"&gt;
  &lt;/a&gt;
  'none'
&lt;/h3&gt;

&lt;p&gt;This won't allow loading of any resources.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: default-src 'none'; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#self"&gt;
  &lt;/a&gt;
  'self'
&lt;/h3&gt;

&lt;p&gt;Only allow resources from the current domain.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: default-src 'self'; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#hosts"&gt;
  &lt;/a&gt;
  Hosts
&lt;/h3&gt;

&lt;p&gt;Allow loading from any number of hosts, it can also have an optional protocol e.g. http:// or https://, an optional port e.g. some.website:8080, and/or an optional path e.g. &lt;a href="https://some.website/path/to/file"&gt;https://some.website/path/to/file&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: img-src https://some.img.host some.other.images.com img.org:8080 img.co.uk/path/to/img.jpg; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#schema"&gt;
  &lt;/a&gt;
  Schema
&lt;/h3&gt;

&lt;p&gt;You can set just a schema e.g. https:, http:, data: but I generally wouldn't recommend this except perhaps for inline images which are data:xxxx.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: img-src data:; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#nonce"&gt;
  &lt;/a&gt;
  Nonce
&lt;/h3&gt;

&lt;p&gt;This works in conjunction with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-nonce"&gt;script HTML tag nonce attribute&lt;/a&gt;, the server must generate a unique value.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: script-src nonce-DhcnhD3khTMePgXwdayK9BsMqXjhguVV; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#sha"&gt;
  &lt;/a&gt;
  SHA
&lt;/h3&gt;

&lt;p&gt;This is a SHA hash of a resource for example, if you apply a content security policy the browser will generate these for you to use if you cannot use any of the other values.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: script-src sha256-jzgBGA4UWFFm; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You can use any of these values in combination with one another to lockdown your content security policy as much as possible.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: default-src 'none'; script-src 'self' &lt;a href="https://static.cloudflareinsights.com"&gt;https://static.cloudflareinsights.com&lt;/a&gt;; img-src 'self'; style-src 'self'; connect-src 'self' &lt;a href="https://cloudflareinsights.com"&gt;https://cloudflareinsights.com&lt;/a&gt; &lt;a href="https://api.challenge.new"&gt;https://api.challenge.new&lt;/a&gt;; font-src 'self'; base-uri 'none'; form-action 'none'; frame-ancestors 'none'; manifest-src 'self';&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#summary"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Summary &lt;a&gt;&lt;/a&gt;&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;In summary, setting a content security policy is one of the most powerful tools in your arsenal to secure your website. It can take some time to set up a strict content security policy but that time is payed back tenfold in the benefits it provides.&lt;/p&gt;

&lt;p&gt;Set that content security policy now!&lt;/p&gt;

&lt;p&gt;Happy Building!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>security</category>
    </item>
    <item>
      <title>AWS Location Service: Where my AWS Community Builders at?  </title>
      <author>Jared Donboch</author>
      <pubDate>Fri, 11 Jun 2021 20:46:06 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-location-service-where-my-aws-community-builders-at-e02</link>
      <guid>https://dev.to/aws-builders/aws-location-service-where-my-aws-community-builders-at-e02</guid>
      <description>&lt;p&gt;&lt;strong&gt;TLDR;&lt;/strong&gt; I built a map of AWS Community Builders using AWS Location Services.  &lt;a href="http://acbmap.humbleg.com/aws/"&gt;Click here for the map&lt;/a&gt;, &lt;a href="https://github.com/jdonboch/acbmap-aws"&gt;click here for the code&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;I was recently accepted into the &lt;a href="https://aws.amazon.com/developer/community/community-builders/"&gt;AWS Community Builders program&lt;/a&gt; and have been blown away by how geographically diverse the group is.  The program is split up into different technology-based cohorts--although this is very loose coupling and members are free to join discussions and sessions for any set of technology they are interested in--but there is no location based grouping.  &lt;/p&gt;

&lt;p&gt;This led to many asking the same question: are there any other AWS Community Builders near me?&lt;/p&gt;

&lt;p&gt;The manager of the program, &lt;a href="https://twitter.com/jasondunn"&gt;Jason Dunn&lt;/a&gt;, agreed to share some anonymized location data with me and I volunteered to draft a quick proof-of-concept map that would display the locations.  &lt;/p&gt;

&lt;p&gt;I initially implemented this via &lt;a href="https://developers.google.com/maps/documentation/javascript/overview"&gt;Google Maps JS API&lt;/a&gt; (&lt;a href="https://github.com/jdonboch/acbmap"&gt;code can be found here&lt;/a&gt;) but with the &lt;a href="https://aws.amazon.com/blogs/aws/amazon-location-service-is-now-generally-available-with-new-routing-and-satellite-imagery-capabilities/"&gt;release of AWS Location Service&lt;/a&gt;, I decided it was worth trying to experiment with this new service.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-amazon-location-service"&gt;
  &lt;/a&gt;
  What is Amazon Location Service?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/location/"&gt;Amazon Location Service&lt;/a&gt; is a new set of resources to support maps and location-based use cases such as geocoding, routing, asset/device tracking and geo-fence events.&lt;/p&gt;

&lt;p&gt;As of the writing of this, the AWS Location Service has been GA for less than 2 weeks.  I look forward to new features and integrations that will inevitably come in the future as the service continues to get some exercise.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initial-impressions-of-maps-and-geocoding"&gt;
  &lt;/a&gt;
  Initial Impressions (of Maps and Geocoding)
&lt;/h3&gt;

&lt;p&gt;Here are my initial impressions.  I have only really experimented with maps and geocoding to support this simple use case.  &lt;/p&gt;

&lt;p&gt;The routing, tracking and geofencing components look very interesting but I don't have any direct experience with them yet.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#good-great-integration-with-other-aws-services"&gt;
  &lt;/a&gt;
  Good: Great integration with other AWS Services
&lt;/h4&gt;

&lt;p&gt;If you are already in the AWS eco-system, using Amazon Location Services will be very easy as you can continue to use the tools and SDKs you are already using.  You can control access and security via IAM, automate deployments via CloudFormation, monitor with CloudWatch, be notified of location-based events via Amazon EventBridge, etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#good-creates-an-abstraction-for-various-location-providers"&gt;
  &lt;/a&gt;
  Good: Creates an abstraction for various location providers.
&lt;/h4&gt;

&lt;p&gt;Amazon currently supports its clients using &lt;a href="https://www.esri.com/en-us/home"&gt;Esri&lt;/a&gt; or &lt;a href="https://www.here.com/"&gt;HERE&lt;/a&gt; data sets and services.  When you create Amazon resources for maps, places, etc you choose which provider you want to supply the data.  Each provider has their own strengths and weakness but you can now switch easily without needing to integrate with each unique location provider API.  As new providers are added, you can continue to leverage the same interface.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#good-better-privacy-and-security"&gt;
  &lt;/a&gt;
  Good: Better privacy and security
&lt;/h4&gt;

&lt;p&gt;AWS does not have rights to sell your data or use it for advertising purposes (can Google say that?).  They also anonymize all your requests before submitting them to vendors.  Any tracking and geofence data is stored only in your AWS account (not 3rd parties) which gives you the power to control and secure that information.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#not-so-good-free-tierpricing"&gt;
  &lt;/a&gt;
  Not so good: Free Tier/Pricing
&lt;/h4&gt;

&lt;p&gt;AWS offers a free tier but it is only a 3-month trial.  After 3 months, you are on the hook for your requests based usage.  &lt;a href="https://cloud.google.com/maps-platform/pricing"&gt;Google Maps free-tier equivalent&lt;/a&gt; (free mobile usage and $200 maps credit each month) does not expire and is much more generous.  The maps and geocoding prices are competitive with other services but Amazon charges on a per-tile basis when many other providers charge on a per map-load basis.  This means if your users are zooming and panning frequently, you will likely be paying more for Amazon Location Services.&lt;/p&gt;

&lt;p&gt;This pricing makes Amazon Location Services a little less desirable for individuals, small prototyping efforts, and mobile map applications that are extremely price sensitive as you'll probably end up paying when other providers (i.e. Google) you can do a lot more with their free tier.&lt;/p&gt;

&lt;p&gt;I hope that Amazon creates a more permanent free-tier for the mapping service at least.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#not-so-good-lacking-access-controls-for-anonymous-access-to-public-maps"&gt;
  &lt;/a&gt;
  Not so good: Lacking access controls for anonymous access to public maps.
&lt;/h4&gt;

&lt;p&gt;Amazon Location Services provides an API that can be connected to other map libraries (i.e. &lt;a href="https://github.com/maplibre/maplibre-gl-js"&gt;MapLibre&lt;/a&gt; and &lt;a href="https://github.com/tangrams/tangram"&gt;Tangram&lt;/a&gt;).  This is sort of nice but it requires you to use a Cognito Identity Pool with anonymous access enabled if you want to display on a public website.  This is well documented in their &lt;a href="https://docs.aws.amazon.com/location/latest/developerguide/amazon-location-developer-guide.pdf.pdf"&gt;developer guide&lt;/a&gt; but I feel like there are some access-controls lacking as there is no way to lock down your anonymous credentials to a particular IP or HTTP referrer like you can do with Google's API Keys.  This means someone could grab the Cognito Identity Pool ID from the Javascript source code in the browser and use it for their own map requests.  This seems like a big flaw and hoping some additional Conditional support could be added to IAM policies to better control anonymous access.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-map-and-geocoding-the-data"&gt;
  &lt;/a&gt;
  Creating the map and geocoding the data
&lt;/h2&gt;

&lt;p&gt;To complete this proof of concept, I needed the following:&lt;/p&gt;

&lt;p&gt;Given a list of locations, I needed to 1) geocode the locations to get their latitudes and longitudes and then 2) create a static map webpage to display the locations as markers on a map.  Bonus points if we can add some metadata on the markers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-map"&gt;
  &lt;/a&gt;
  The map
&lt;/h3&gt;

&lt;p&gt;There was not much innovation for the map part of the project and just a quick proof of concept was the goal.  It was accomplished by walking through the &lt;a href="https://docs.aws.amazon.com/location/latest/developerguide/amazon-location-developer-guide.pdf.pdf"&gt;following sections of the AWS Location Service Developer Guide&lt;/a&gt; which is a great resource to get started! :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Page 27: &lt;a href="https://docs.aws.amazon.com/location/latest/developerguide/authenticating-using-cognito.html"&gt;Allowing unauthenticated guest access to your
application using Amazon Cognito&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Page 33: &lt;a href="https://docs.aws.amazon.com/location/latest/developerguide/maps-prerequisites.html#create-map-resource"&gt;Creating a Map Resource&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Page 34: &lt;a href="https://docs.aws.amazon.com/location/latest/developerguide/maps-prerequisites.html#tutorial-mapbox-identity-pool"&gt;Authenticating your requests&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Page 35: &lt;a href="https://docs.aws.amazon.com/location/latest/developerguide/tutorial-maplibre-gl-js.html"&gt;Using MapLibre GL JS with Amazon Location Service&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also used some MapLibre tutorials below to help create the markers, icons and pop ups on the map:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://maplibre.org/maplibre-gl-js-docs/example/add-image/"&gt;Add icon to map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://maplibre.org/maplibre-gl-js-docs/example/cluster/"&gt;Create and style clusters (stole the pop up code here)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-geocoding-process"&gt;
  &lt;/a&gt;
  The geocoding process
&lt;/h3&gt;

&lt;p&gt;We need to &lt;a href="https://docs.aws.amazon.com/location/latest/developerguide/places-prerequisites.html#create-place-index-resource"&gt;create a Place Index resource&lt;/a&gt; to support the geocoding.&lt;/p&gt;

&lt;p&gt;To do the geocoding and create the GeoJSON that is displayed by the map, I wrote a quick Python script to perform that. This was fairly easy since the geocoding actions have been added to boto3 (i.e. the Python AWS SDK).  &lt;/p&gt;

&lt;p&gt;Unfortunately, the only location information that we had for Amazon Community Builders was Country.  This resulted in many  duplicate markers being generated which the mapping library was not happy about.  In the end, I adjusted the logic of the geocoding script to create a single point for each country but then add properties to the point that indicated the number of people in that country.  This member count property could then be displayed as a pop up on the map when the user hovered over the map marker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-results"&gt;
  &lt;/a&gt;
  Final Results
&lt;/h2&gt;

&lt;p&gt;To see the final code and the geocoding script, &lt;a href="https://github.com/jdonboch/acbmap-aws"&gt;check out the acbmap-aws repo on GitHub&lt;/a&gt;.  I tried to add more details to that README with the specifics if you want to try and run this locally.&lt;/p&gt;

&lt;p&gt;You can find the a hosted version of the AWS Community Builders map, powered by Amazon Location Services, at the following location:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://acbmap.humbleg.com/aws/"&gt;http://acbmap.humbleg.com/aws/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>maps</category>
      <category>geo</category>
      <category>community</category>
    </item>
  </channel>
</rss>
