<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Update an object in nested array in MongoDB</title>
      <author>Rajesh Royal</author>
      <pubDate>Tue, 28 Sep 2021 14:06:46 +0000</pubDate>
      <link>https://dev.to/rajeshroyal/update-an-object-in-nested-array-in-mongodb-o5a</link>
      <guid>https://dev.to/rajeshroyal/update-an-object-in-nested-array-in-mongodb-o5a</guid>
      <description>&lt;p&gt;Hello Reader 👋&lt;/p&gt;

&lt;p&gt;To update an object inside a nested array in MongoDB you can use this approach, Its well tested and working.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#case"&gt;
  &lt;/a&gt;
  Case:
&lt;/h4&gt;

&lt;p&gt;Update nested array objects. See below picture for a better Idea what we are going to do. We will update the object which is nested by 3 levels of array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;discussionList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="nx"&gt;discussionList&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cMxmivVu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0h9ievy3ybu66mc2b3v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMxmivVu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0h9ievy3ybu66mc2b3v.jpg" alt="mongodb - update an object inside multilevel nested array"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;courseCategoryPostCommentReplyUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CommentReplyUpdateMutation&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IDocumentUpdateType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;courseCategoryPostCommentsModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;discussionList&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$elemMatch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commentId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discussionList._id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replyId&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discussionList.$[outer].discussionList.$[inner].payload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discussionList.$[outer].discussionList.$[inner].isUpdated&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discussionList.$[outer].discussionList.$[inner].commentUpdateTime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;arrayFilters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;outer._id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commentId&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inner._id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replyId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;FootNotes - this code is to update the reply of a comment.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That's how you can perform operations on an object in nested array in mongoDB document. You can also update/delete the objects which are having the more level of nesting by just modifying the query.&lt;/p&gt;

&lt;p&gt;Please let me know if the code needs an explanation. Thanks 🙂&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>🚀 The Missing SQL Basics Crash Course</title>
      <author>Bobby Iliev</author>
      <pubDate>Tue, 28 Sep 2021 14:00:20 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/the-missing-sql-basics-crash-course-323l</link>
      <guid>https://dev.to/bobbyiliev/the-missing-sql-basics-crash-course-323l</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;No matter if you are a DevOps/SysOps engineer, developer, or just a Linux enthusiast, you will most likely have to use SQL at some point in your career.&lt;/p&gt;

&lt;p&gt;The guide is suitable for anyone working as a developer, system administrator, or a DevOps engineer and wants to learn the basics of SQL.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#databases"&gt;
  &lt;/a&gt;
  Databases
&lt;/h1&gt;

&lt;p&gt;Before we dive deep into SQL, let's quickly define what a database is.&lt;/p&gt;

&lt;p&gt;The definition of databases from Wikipedia is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A database is an organized collection of data, generally stored and accessed electronically from a computer system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, a database is a collection of data stored and structured in different database tables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tables-and-columns"&gt;
  &lt;/a&gt;
  Tables and columns
&lt;/h2&gt;

&lt;p&gt;You've most likely worked with spreadsheet systems like Excel or Google Sheets. At the very basic, database tables are quite similar to spreadsheets.&lt;/p&gt;

&lt;p&gt;Each table has different &lt;strong&gt;columns&lt;/strong&gt; which could contain different types of data.&lt;/p&gt;

&lt;p&gt;For example, if you have a todo list app, you would have a database, and in your database, you would have different tables storing different information like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users - In the users table, you would have some data for your users like: &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;active&lt;/code&gt;, for example.&lt;/li&gt;
&lt;li&gt;Tasks - The tasks table would store all of the tasks that you are planning to do. The columns of the tasks table would be for example, &lt;code&gt;task_name&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;due_date&lt;/code&gt; and &lt;code&gt;priority&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Users table will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+----+----------+---------------+--------+
| id | username | name          | active |
+----+----------+---------------+--------+
| 1  |    bobby | Bobby Iliev   |   true |
| 2  |   greisi | Greisi I.     |   true |
| 3  |  devdojo | Dev Dojo      |  false |
+----+----------+---------------+--------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rundown of the table structure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have 4 columns: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;active&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We also have 3 entries/users&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;id&lt;/code&gt; column is a unique identifier of each user and is auto-incremented.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we will learn how to install MySQL and create our first database.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mysql"&gt;
  &lt;/a&gt;
  MySQL
&lt;/h1&gt;

&lt;p&gt;Now that you know what a database, table, and column are, the next thing that you would need to do is install a database service where you would be running your SQL queries on.&lt;/p&gt;

&lt;p&gt;We would be using MySQL as it is free, open-source, and very widely used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-mysql"&gt;
  &lt;/a&gt;
  Installing MySQL
&lt;/h2&gt;

&lt;p&gt;As we are going to use &lt;strong&gt;Ubuntu&lt;/strong&gt;, in order to install MySQL run the following commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First update your &lt;code&gt;apt&lt;/code&gt; repository:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt update -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Then install MySQL:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install mysql-server mysql-client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are installing 2 packages, one is the actual MySQL server, and the other is the MySQL client, which would allow us to connect to the MySQL server and run our queries.&lt;/p&gt;

&lt;p&gt;In order to check if MySQL is running, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl status mysql.service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to secure your MySQL server, you could run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then follow the prompt and finally choose a secure password and save it in a secure place like a password manager.&lt;/p&gt;

&lt;p&gt;With that, you would have MySQL installed on your Ubuntu server. The above should also work just fine on Debian.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-mysql-on-mac"&gt;
  &lt;/a&gt;
  Install MySQL on Mac
&lt;/h3&gt;

&lt;p&gt;I would recommend installing MySQL using &lt;a href=""&gt;Homebrew&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that start MySQL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew services start mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, secure it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case that you ever need to stop the MySQL service, you could do so with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew services stop mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-mysql-on-windows"&gt;
  &lt;/a&gt;
  Install MySQL on Windows
&lt;/h3&gt;

&lt;p&gt;In order to install MySQL on Windows, I would recommend following the steps from the official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.mysql.com/doc/refman/8.0/en/windows-installation.html"&gt;https://dev.mysql.com/doc/refman/8.0/en/windows-installation.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-mysql-via-cli"&gt;
  &lt;/a&gt;
  Accessing MySQL via CLI
&lt;/h2&gt;

&lt;p&gt;To access MySQL run the &lt;code&gt;mysql&lt;/code&gt; command followed by your user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-a-database"&gt;
  &lt;/a&gt;
  Creating a database
&lt;/h2&gt;

&lt;p&gt;After that, switch to the &lt;code&gt;demo&lt;/code&gt; database that we created in the previous chapter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;USE demo_db;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To exit the just type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exit;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configuring-raw-mycnf-endraw-"&gt;
  &lt;/a&gt;
  Configuring &lt;code&gt;.my.cnf&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;By configuring the &lt;code&gt;~/.my.cnf&lt;/code&gt; file in your user's home directory, MySQL would allow you to login without prompting you for a password.&lt;/p&gt;

&lt;p&gt;In order to make that change, what you need to do is first create a &lt;code&gt;.my.cnf&lt;/code&gt; file in your user's home directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch ~/.my.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, set secure permissions so that other regular users could not read the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chmod 600 ~/.my.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then using your favorite text editor, open the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano ~/.my.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the following configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[client]
user=YOUR_MYSQL_USERNAME
password=YOUR_MYSQL_PASSWORD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to update your MySQL credentials accordingly, then save the file and exit.&lt;/p&gt;

&lt;p&gt;After that, if you run just &lt;code&gt;mysql&lt;/code&gt;, you will be authenticated directly with the credentials that you've specified in the &lt;code&gt;~/.my.cnf&lt;/code&gt; file without being prompted for a password.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-mysqladmin-command"&gt;
  &lt;/a&gt;
  The mysqladmin command
&lt;/h2&gt;

&lt;p&gt;As a quick test, you could check all of your open SQL connections by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysqladmin proc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;mysqladmin&lt;/code&gt; tool would also use the client details from the &lt;code&gt;~/.my.cnf&lt;/code&gt; file, and it would list your current MySQL process list.&lt;/p&gt;

&lt;p&gt;Another cool thing that you could try doing is combining this with the &lt;code&gt;watch&lt;/code&gt; command and kind of monitor your MySQL connections in almost real-time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;watch -n1 mysqladmin proc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To stop the &lt;code&gt;watch&lt;/code&gt; command, just hit &lt;code&gt;CTRL+C&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gui-clients"&gt;
  &lt;/a&gt;
  GUI clients
&lt;/h2&gt;

&lt;p&gt;If you prefer using GUI clients, you could take a look a the following ones and install them locally on your laptop:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mysql.com/products/workbench/"&gt;MySQL Workbench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sequelpro.com/"&gt;Sequel Pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tableplus.com/"&gt;TablePlus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will allow you to connect to your database via a graphical interface rather than the &lt;code&gt;mysql&lt;/code&gt; command-line tool.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tables"&gt;
  &lt;/a&gt;
  Tables
&lt;/h1&gt;

&lt;p&gt;Before we get started with SQL, let's learn how to create tables and columns.&lt;/p&gt;

&lt;p&gt;As an example, we are going to create a &lt;code&gt;users&lt;/code&gt; table with the following columns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt; - this is going to be the primary key of the table and would be the unique identifier of each user.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;username&lt;/code&gt; - this column would hold the username of our users&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt; - here, we will store the full name of users&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;status&lt;/code&gt; - here, we will store the status of a user, which would indicate if a user is active or not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You need to specify the data type of each column.&lt;/p&gt;

&lt;p&gt;In our case it would be like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt; - Integer&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;username&lt;/code&gt; - Varchar&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt; - Varchar&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;status&lt;/code&gt; - Number&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data types
&lt;/h2&gt;

&lt;p&gt;The most common data types that you would come across are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CHAR&lt;/code&gt;(size): Fixed-length character string with a maximum length of 255 bytes.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;VARCHAR&lt;/code&gt;(size):  Variable-length character string. Max size is specified in parenthesis.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;TEXT&lt;/code&gt;(size): A string with a maximum length of 65,535 bytes.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;INTEGER&lt;/code&gt;(size) or &lt;code&gt;INT&lt;/code&gt;(size): A medium integer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;BOOLEAN&lt;/code&gt; or &lt;code&gt;BOOL&lt;/code&gt;: Holds a true or false value.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DATE&lt;/code&gt;: Holds a date.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's have the following users table as an example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt;: We would want to set the ID to &lt;code&gt;INT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt;: The name should fit in a &lt;code&gt;VARCHAR&lt;/code&gt; column.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;about&lt;/code&gt;: As the about section could be longer, we could set the column data type to &lt;code&gt;TEXT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;birthday&lt;/code&gt;: For the birthday column of the user, we could use &lt;code&gt;DATE&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information on all data types available, make sure to check out the official documentation &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/data-types.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-database"&gt;
  &lt;/a&gt;
  Creating a database
&lt;/h2&gt;

&lt;p&gt;As we briefly covered in the previous chapter, before you could create tables, you would need to create a database by running the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First access MySQL:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Then create a database called &lt;code&gt;demo_db&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE DATABASE demo_d;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: the database name needs to be unique, if you already have a database named &lt;code&gt;demo_db&lt;/code&gt; you would receive an error that the database already exists.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can consider this database as the container where we would create all of the tables in.&lt;/p&gt;

&lt;p&gt;Once you've created the database, you need to switch to that database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;USE demo_db;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can think of this as accessing a directory in Linux with the &lt;code&gt;cd&lt;/code&gt; command. With &lt;code&gt;USE&lt;/code&gt;, we switch to a specific database.&lt;/p&gt;

&lt;p&gt;Alternatively, if you do not want to 'switch' to the specific database, you would need to specify the so-called fully qualified table name. For example, if you had a &lt;code&gt;users&lt;/code&gt; table in the &lt;code&gt;demo_db&lt;/code&gt;, and you wanted to select all of the entries from that table, you could use one of the following two approaches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch to the &lt;code&gt;demo_db&lt;/code&gt; first and then run a select statement:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;USE demo_db;
SELECT username FROM demo_db.users;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Alternatively, rather than using the &lt;code&gt;USE&lt;/code&gt; command first, specify the database name followed by the table name separated with a  dot: &lt;code&gt;db_name.table_name&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT username FROM demo_db.users;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to cover the &lt;code&gt;SELECT&lt;/code&gt; statement more in-depth in the following chapters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-tables"&gt;
  &lt;/a&gt;
  Creating tables
&lt;/h2&gt;

&lt;p&gt;In order to create a table, you need to use the &lt;code&gt;CREATE TABLE&lt;/code&gt; statement followed by the columns that you want to have in that table and their data type.&lt;/p&gt;

&lt;p&gt;Let's say that we wanted to create a &lt;code&gt;users&lt;/code&gt; table with the following columns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt;: An integer value&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;username&lt;/code&gt;: A varchar value&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;about&lt;/code&gt;: A text type&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;birthday&lt;/code&gt;: Date&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;active&lt;/code&gt;: True or false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The query that we would need to run to create that table would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE users
(
    id INT,
    username VARCHAR(255),
    about TEXT,
    birthday DATE,
    active BOOL
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: You need to select a database first with the &lt;code&gt;USE&lt;/code&gt; command as mentioned above. Otherwise you will get the following error: &lt;code&gt;ERROR 1046 (3D000): No database selected&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To list the available tables, you could run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SHOW TABLES;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+-------------------+
| Tables_in_demo_db |
+-------------------+
| users             |
+-------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dropping-tables"&gt;
  &lt;/a&gt;
  Dropping tables
&lt;/h2&gt;

&lt;p&gt;You can drop or delete tables by using the &lt;code&gt;DROP TABLE&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;Let's test that and drop the table that we've just created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DROP TABLE users;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output that you would get would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Query OK, 0 rows affected (0.03 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, if you were to run the &lt;code&gt;SHOW TABLES;&lt;/code&gt; query again, you would get the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Empty set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#allowing-null-values"&gt;
  &lt;/a&gt;
  Allowing NULL values
&lt;/h2&gt;

&lt;p&gt;By default, each column in your table can hold NULL values. In case that you don't wanted to allow NULL values for some of the columns in a specific table, you need to specify this during the table creation or later on change the table to allow that.&lt;/p&gt;

&lt;p&gt;For example, let's say that we want the &lt;code&gt;username&lt;/code&gt; column to be a required one, we would need to alter the table create statement and include &lt;code&gt;NOT NULL&lt;/code&gt; right next to the &lt;code&gt;username&lt;/code&gt; column like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE users
(
    id INT,
    username VARCHAR(255) NOT NULL,
    about TEXT,
    birthday DATE,
    active BOOL
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That way, when you try to add a new user, MySQL will let you know that the &lt;code&gt;username&lt;/code&gt; column is required.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#specifying-a-primary-key"&gt;
  &lt;/a&gt;
  Specifying a primary key
&lt;/h2&gt;

&lt;p&gt;The primary key column, which in our case is the &lt;code&gt;id&lt;/code&gt; column, is a unique identifier for our users.&lt;/p&gt;

&lt;p&gt;We want the &lt;code&gt;id&lt;/code&gt; column to be unique, and also, whenever we add new users, we want the ID of the user to autoincrement for each new user.&lt;/p&gt;

&lt;p&gt;This can be achieved with a primary key and &lt;code&gt;AUTO_INCREMENT&lt;/code&gt;. The primary key column needs to be &lt;code&gt;NOT NULL&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;If we were to alter the table creation statement, it would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE users
(
    id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) NOT NULL,
    about TEXT,
    birthday DATE,
    active BOOL
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#updating-tables"&gt;
  &lt;/a&gt;
  Updating tables
&lt;/h2&gt;

&lt;p&gt;In the above example, we created a new table and then dropped it as it was empty. However, in a real-life scenario, this would really be the case.&lt;/p&gt;

&lt;p&gt;So whenever you need to add or remove a new column from a specific table, you would need to use the &lt;code&gt;ALTER TABLE&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;Let's say that we wanted to add an &lt;code&gt;email&lt;/code&gt; column with type varchar to our &lt;code&gt;users&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;The syntax would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALTER TABLE users ADD email VARCHAR(255);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, if you were to describe the table, you would see the new column:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DESCRIBE users;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+----------+--------------+------+-----+---------+
| Field    | Type         | Null | Key | Default |
+----------+--------------+------+-----+---------+
| id       | int          | NO   | PRI | NULL    |
| username | varchar(255) | NO   |     | NULL    |
| about    | text         | YES  |     | NULL    |
| birthday | date         | YES  |     | NULL    |
| active   | tinyint(1)   | YES  |     | NULL    |
| email    | varchar(255) | YES  |     | NULL    |
+----------+--------------+------+-----+---------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you wanted to drop a specific column, the syntax would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALTER TABLE table_name DROP COLUMN column_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: keep in mind that this is a permanent change, and if you have any critical data in the specific column, it would be deleted instantly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can use the &lt;code&gt;ALTER TABLE&lt;/code&gt; statement to also change the data type of a specific column. For example, you could change the &lt;code&gt;about&lt;/code&gt; column from &lt;code&gt;TEXT&lt;/code&gt; to &lt;code&gt;LONGTEXT&lt;/code&gt; type, which could hold longer strings.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Important thing to keep in mind is that if a specific table already holds a particular type of data value like an integer, you can't alter it to varchar, for example. Only if the column does not contain any values, then you could make the change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#basic-syntax"&gt;
  &lt;/a&gt;
  Basic Syntax
&lt;/h1&gt;

&lt;p&gt;In this chapter, we will go over the basic SQL syntax.&lt;/p&gt;

&lt;p&gt;SQL statements are basically the 'commands' that you run against a specific database. Through the SQL statements, you are telling MySQL what you want it to do, for example, if you wanted to get the &lt;code&gt;username&lt;/code&gt; of all of your users stored in the &lt;code&gt;users&lt;/code&gt; table, you would run the following SQL statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT username FROM users ;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rundown of the statement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;SELECT&lt;/code&gt;: First, we specify the &lt;code&gt;SELECT&lt;/code&gt; keyword, which indicates that we want to select some data from the database. Other popular keywords are: &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;username&lt;/code&gt;: Then we specify which column we want to select&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;users&lt;/code&gt;: After that, we specify the table that we want to select the data from.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;;&lt;/code&gt; is required. Every SQL statement needs to end with a semicolumn.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you run the above statement, you will get no results as the new &lt;code&gt;users&lt;/code&gt; table that we've just created is empty.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a good practice, all SQL keywords should be with uppercase, however, it would work just fine if you use lower case as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's go ahead and cover the basic operations next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#insert"&gt;
  &lt;/a&gt;
  INSERT
&lt;/h2&gt;

&lt;p&gt;To add data to your database, you would use the &lt;code&gt;INSERT&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;Let's use the table that we created in the last chapter and insert 1 user into our &lt;code&gt;users&lt;/code&gt; table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO users(username, email, active) VALUES('bobby', 'bobby@bobbyiliev.com', true);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rundown of the insert statement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;INSERT INTO users&lt;/code&gt;: first, we specify the &lt;code&gt;INSERT INTO&lt;/code&gt; keyword, which tells MySQL that we want to insert data into the &lt;code&gt;users&lt;/code&gt; table.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;users (username, email, active)&lt;/code&gt;: then, we specify the table name &lt;code&gt;users&lt;/code&gt; and the columns that we want to insert data into.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;VALUES&lt;/code&gt;: then, we specify the values that we want to insert in.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#select"&gt;
  &lt;/a&gt;
  SELECT
&lt;/h2&gt;

&lt;p&gt;Once we've inserted that user, let's go ahead and retrieve the information.&lt;/p&gt;

&lt;p&gt;To retrieve information from your database, you could use the &lt;code&gt;SELECT&lt;/code&gt; statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM users;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+----+----------+-------+----------+--------+---------------+
| id | username | about | birthday | active | email         |
+----+----------+-------+----------+--------+---------------+
|  1 | bobby    | NULL  | NULL     |      1 | bobby@b...com |
+----+----------+-------+----------+--------+---------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we specify &lt;code&gt;*&lt;/code&gt; right after the &lt;code&gt;SELECT&lt;/code&gt; keyword, this means that we want to get all of the columns from the &lt;code&gt;users&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;If we wanted to the only the &lt;code&gt;username&lt;/code&gt; and the &lt;code&gt;email&lt;/code&gt; columns instead, we would change the statement to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT username,email FROM users;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return all of the users, but as of the time being we have only 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+----------+----------------------+
| username | email                |
+----------+----------------------+
| bobby    | bobby@bobbyiliev.com |
+----------+----------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  UPDATE
&lt;/h2&gt;

&lt;p&gt;In order to modify data in your database, you could use the &lt;code&gt;UPDATE&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;The syntax would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UPDATE users SET username='bobbyiliev' WHERE id=1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rundown of the statement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;UPDATE users&lt;/code&gt;: first, we specify the &lt;code&gt;UPDATE&lt;/code&gt; keyword followed by the table that we want to update&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;username='bobbyiliev'&lt;/code&gt; Then we specify the columns that we want to update and the new value that we want to set.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;WHERE id=1&lt;/code&gt;: Finally, by using the &lt;code&gt;WHERE&lt;/code&gt; clause, we specify which user should be updated. In our case it is the user with ID 1.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: If we don't specify a &lt;code&gt;WHERE&lt;/code&gt; clause, all of the entries inside the &lt;code&gt;users&lt;/code&gt; table would be updated, and all users would have the &lt;code&gt;username&lt;/code&gt; set to &lt;code&gt;bobbyiliev&lt;/code&gt;. You need to be careful when you use the &lt;code&gt;UPDATE&lt;/code&gt; statement without a &lt;code&gt;WHERE&lt;/code&gt; clause, as every single row will be updated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are going to cover &lt;code&gt;WHERE&lt;/code&gt; more in-depth in the next few chapters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#delete"&gt;
  &lt;/a&gt;
  DELETE
&lt;/h2&gt;

&lt;p&gt;As the name suggests, the &lt;code&gt;DELETE&lt;/code&gt; statement would remove data from your database.&lt;/p&gt;

&lt;p&gt;The syntax is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DELETE FROM users WHERE id=1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to the &lt;code&gt;UPDATE&lt;/code&gt; statement, if you don't specify a &lt;code&gt;WHERE&lt;/code&gt; clause, all of the entries from the table will be affected, meaning that all of your users will be deleted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h2&gt;

&lt;p&gt;In case that you are writing a larger SQL script, it might be helpful to add some comments so that later on, when you come back to the script, you would know what each line does.&lt;/p&gt;

&lt;p&gt;As with all programming languages, you can add comments in SQL as well.&lt;/p&gt;

&lt;p&gt;There are two types of comments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inline comments:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To do so, you just need to add &lt;code&gt;--&lt;/code&gt; before the text that you want to comment out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM users; -- Get all users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Multiple-line comments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Similar to some other programming languages in order to comment multiple lines, you could wrap the text in &lt;code&gt;/*&lt;/code&gt; &lt;code&gt;*/&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/*
Get all of the users
from your database
*/
SELECT * FROM users;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could write that in &lt;code&gt;.sql&lt;/code&gt; file and then run it later on, or execute the few lines directly.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Those were some of the most common basic SQL statements.&lt;/p&gt;

&lt;p&gt;If you want to learn more about SQL make sure to check out my free eBook on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/introduction-to-sql"&gt;Free Introduction to SQL eBook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To support me, you could follow me on Twitter: &lt;a href="https://twitter.com/bobbyiliev_"&gt;@bobbyiliev_&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you already know the basics, I would suggest checking out &lt;a href="https://materialize.com/"&gt;Materialize&lt;/a&gt;. Materialize is a reactive database that delivers incremental view updates. Materialize helps developers easily build with streaming data using standard SQL.&lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>devops</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>[PT-BR] Minhas duas features preferidas do Java 17</title>
      <author>João Victor Martins</author>
      <pubDate>Tue, 28 Sep 2021 13:56:06 +0000</pubDate>
      <link>https://dev.to/j_a_o_v_c_t_r/pt-br-minhas-duas-features-preferidas-do-java-17-5aa</link>
      <guid>https://dev.to/j_a_o_v_c_t_r/pt-br-minhas-duas-features-preferidas-do-java-17-5aa</guid>
      <description>&lt;p&gt;No dia 14/09/2021, foi lançada a versão 17 do Java, sendo ela uma versão LTS &lt;em&gt;(Long Term Support)&lt;/em&gt;. Assim como nas últimas versões, a 17 trouxe algumas features bem divertidas. Minha ideia nesse post é mostrar as duas que mais me chamaram atenção, que são a &lt;strong&gt;409:Sealed Classes&lt;/strong&gt; e a &lt;strong&gt;406:Pattern Matching for Switch&lt;/strong&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sealed-classes"&gt;
  &lt;/a&gt;
  Sealed Classes
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Sealed&lt;/em&gt; classes e interfaces restringem quais outras classes ou interfaces devem estendê-las e/ou implementa-las. O objetivo é permitir que o autor da classe ou interface tenha mais controle sobre a mesma, além de prover um jeito mais declarativo de restringir o uso da super classe. Um outro objetivo é o suporte a &lt;em&gt;pattern matchings&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;sealed&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Automovel&lt;/span&gt; 
    &lt;span class="n"&gt;permits&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exemplo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;automovel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Carro&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;examplo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;automovel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Moto&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uma vez que eu defino quais classes irão poder estender de Automovel, qualquer outra classe diferente de Carro e Moto não deve ser permitida. É importante ressaltar, que as classes que irão estender uma &lt;em&gt;sealed class&lt;/em&gt;, deverão estar no mesmo módulo, caso esteja usando &lt;em&gt;JPMS (Java Platform Module System)&lt;/em&gt; ou no mesmo pacote, caso não esteja usando &lt;em&gt;JPMS&lt;/em&gt;. Para a classes que estendem, existem algumas regras. São elas: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Uma subclasse deve ser declarada como final para manter a hierarquia. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Uma subclasse deve ser declarada como &lt;em&gt;sealed&lt;/em&gt; e permitir a extensão de um novo conjunto de classes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Uma subclasse deve ser declarada como &lt;em&gt;non-sealed&lt;/em&gt; e assim permitir que qualquer classe a estenda. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#pattern-matching-for-switch"&gt;
  &lt;/a&gt;
  Pattern Matching for Switch
&lt;/h1&gt;

&lt;p&gt;Estender a correspondência de padrões para &lt;em&gt;switch&lt;/em&gt; permite que uma expressão seja testada em relação a vários padrões, cada um com uma ação específica, de forma que consultas complexas orientadas a dados possam ser expressas de forma concisa e segura. O objetivo é melhorar a expressividade e a aplicabilidade das extensões e instruções &lt;em&gt;switch&lt;/em&gt;, além de certificar que todas as expressões e instruções existentes continuem a compilar sem alterações.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printarTipoAutomovel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Automovel&lt;/span&gt; &lt;span class="n"&gt;automovel&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;automovel&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Carro&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"É um carro"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Moto&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"É uma moto"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Automóvel não identificado"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;É importante ressaltar que a &lt;strong&gt;JEP 406: Pattern Matching for switch&lt;/strong&gt; está como preview, o que significa que ela pode ser retirada e não fazer parte das próximas versões do Java. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#concluindo"&gt;
  &lt;/a&gt;
  Concluindo
&lt;/h1&gt;

&lt;p&gt;O objetivo do post era trazer as features que mais me interessaram no Java 17, sendo essa uma escolha totalmente pessoal. Existem muitas outras features legais, que podem ser vistas em: &lt;a href="https://openjdk.java.net/projects/jdk/17/"&gt;https://openjdk.java.net/projects/jdk/17/&lt;/a&gt;. Espero que gostem da leitura. Dúvidas, sugestões e/ou críticas, estou à disposição. &lt;/p&gt;

&lt;p&gt;Referências&lt;br&gt;
&lt;a href="https://openjdk.java.net/jeps/409"&gt;https://openjdk.java.net/jeps/409&lt;/a&gt;&lt;br&gt;
&lt;a href="https://openjdk.java.net/jeps/406"&gt;https://openjdk.java.net/jeps/406&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>jdk17</category>
    </item>
    <item>
      <title>Do you know all the popular NPM commands?</title>
      <author>Ankit Kumar</author>
      <pubDate>Tue, 28 Sep 2021 13:47:45 +0000</pubDate>
      <link>https://dev.to/knowankit/do-you-know-all-the-popular-npm-commands-22ac</link>
      <guid>https://dev.to/knowankit/do-you-know-all-the-popular-npm-commands-22ac</guid>
      <description>&lt;p&gt;We all have setup our node package manager application at least once. We hardly give importance to the &lt;code&gt;npm&lt;/code&gt; because it is not a core part of our development. We perceive &lt;code&gt;npm&lt;/code&gt; as a file which is just a dependency holder. But npm is much more than that, it is not difficult to have an average grip on npm.&lt;/p&gt;




&lt;p&gt;Let's begin with all the popular commands 🛣&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-npm-init-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm init&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This is the first command which you will use when you are setting up your project.&lt;/p&gt;

&lt;p&gt;This command asks for general information about the project name, description, version, author, github-link, homepage etc. It will generate a &lt;code&gt;package.json&lt;/code&gt; file in your root folder.&lt;br&gt;
You can edit the information anytime.&lt;/p&gt;

&lt;p&gt;If you don't want to enter the information and want to go for defaults then run this &lt;code&gt;npm init --yes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will pick the data from your config setup. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-npm-config-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm config&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;You can update your config with this.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm config set init-author-name "Ankit Kumar"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fetch the value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm config get init-author-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-npm-install-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm install&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Install the dependencies present in the package.json. Shorthand&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To install a package use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i package-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To save in dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i package-name --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To save in dev dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i package-name --save-dev or npm i package-name -D
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install a package globally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i package-name --global
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i package-name -g
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-npm-uninstall-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm uninstall&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Shorthand&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm un
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To uninstall a package do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm un package-name -g or -D or --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;-g&lt;/strong&gt; - remove package from global list&lt;br&gt;
&lt;strong&gt;--save&lt;/strong&gt; - remove package from dependency list&lt;br&gt;
&lt;strong&gt;-D&lt;/strong&gt; - remove package from dev dependency list&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-npm-ci-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm ci&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This command is similar to &lt;code&gt;npm install&lt;/code&gt; except it is used in automated environment like test platforms, continuous integration and deployments.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To run &lt;code&gt;npm ci&lt;/code&gt;, &lt;code&gt;package-lock.json&lt;/code&gt; must be present&lt;/li&gt;
&lt;li&gt;If there is any version mismatch between &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;package-lock.json&lt;/code&gt; then it will exit with errors.&lt;/li&gt;
&lt;li&gt;It is used to install entire projects and not individual package&lt;/li&gt;
&lt;li&gt;It will never write to &lt;code&gt;package.json&lt;/code&gt; or any of the &lt;code&gt;package-locks&lt;/code&gt;: installs are essentially frozen.&lt;/li&gt;
&lt;li&gt;If a node_modules is already present, it will be automatically removed before &lt;code&gt;npm ci&lt;/code&gt; begins its install.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#-raw-npm-audit-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm audit&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Scan your project for vulnerabilities and automatically install any compatible updates to vulnerable dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm audit fix
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-npm-cache-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm cache&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Add the specified package to the local cache. This command is primarily intended to be used internally by NPM, but it can provide a way to add data to the local installation cache explicitly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm cache add &amp;lt;tarball file&amp;gt;
npm cache add &amp;lt;folder&amp;gt;
npm cache add &amp;lt;tarball url&amp;gt;
npm cache add &amp;lt;name&amp;gt;@&amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whenever we install any package it does not caches so to make it available offline, we can use this command.&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;code&gt;yarn&lt;/code&gt; caches all the packages you install and is available offline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-npm-ls-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm ls&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This command will print to stdout all the versions of packages that are installed, as well as their dependencies, in a tree-structure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-npm-link-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm link&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This is very common for dev who wants to test their component  locally before publishing it on the &lt;code&gt;npm&lt;/code&gt; registry. It will create a symbolic link in the global folder. &lt;code&gt;{prefix}/lib/node_modules/&amp;lt;package&amp;gt;&lt;/code&gt; that links to the package where the &lt;code&gt;npm&lt;/code&gt; link command was executed.&lt;/p&gt;

&lt;p&gt;Next, in some other location, &lt;code&gt;npm link package-name&lt;/code&gt; will create a symbolic link from globally-installed package-name to node_modules/ of the current folder. Now you can import your created component and it should be present in the &lt;code&gt;node_modules&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that package-name is taken from package.json, not from directory name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-npm-publish-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm publish&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Publishes a package to the registry so that it can be installed by name. All files in the package directory are included if no local .gitignore or .npmignore file exists.&lt;/p&gt;

&lt;p&gt;By default npm will publish to the public registry. This can be overridden by specifying a different default registry or using a scope in the name (see package.json).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-npm-pack-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm pack&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;It creates a installable file with &lt;code&gt;.tgz&lt;/code&gt; extension called tarball. This is a package file which can be install in any app. &lt;/p&gt;

&lt;p&gt;For example :&lt;br&gt;
&lt;code&gt;example-component.tgz&lt;/code&gt; is tarball file. I will copy this in any node app. I will add this in my package.json like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"dependency": {
 "example-component: "file: ./example-component.tgz"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i/install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-npm-help-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm help&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;If supplied a topic, then show the appropriate documentation page.&lt;/p&gt;

&lt;p&gt;If the topic does not exist, or if multiple terms are provided, then run the help-search command to find a match.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-npm-whoami-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm whoami&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Print the username config to standard output.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-npm-loginlogout-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm login/logout&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;It just logins and logout &lt;/p&gt;

&lt;p&gt;Please go through the full &lt;a href="https://docs.npmjs.com/cli/v6/commands"&gt;NPM docs&lt;/a&gt; as I have mentioned only those commands which I have seen others and used myself commonly.&lt;/p&gt;




&lt;p&gt;Thanks for dropping by 🌟&lt;br&gt;
Add a ❤️ if you liked it. Checkout my &lt;a href="https://github.com/knowankit"&gt;GitHub&lt;/a&gt; profile for cool projects. I have published many NPM packages.&lt;br&gt;
Support me by following me on &lt;a href="https://twitter.com/knowankit"&gt;twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>HTTP Prompt for Performance Engineers</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Tue, 28 Sep 2021 13:37:54 +0000</pubDate>
      <link>https://dev.to/qainsights/http-prompt-for-performance-engineers-33jg</link>
      <guid>https://dev.to/qainsights/http-prompt-for-performance-engineers-33jg</guid>
      <description>&lt;p&gt;In this blog post, we are going to see how you can get started with HTTP Prompt - an interactive command-line HTTP client for testing and debugging purpose. In the last couple of posts, I have covered &lt;a href="https://qainsights.com/httpie-for-performance-engineers/" rel="noreferrer noopener"&gt;HTTPie &lt;/a&gt;and &lt;a href="https://qainsights.com/http-toolkit-for-performance-engineers/" rel="noreferrer noopener"&gt;HTTP Toolkit&lt;/a&gt; utilities for performance testers and engineers. Let us get started by installing it.&lt;/p&gt;

&lt;h2&gt;How to install HTTP Prompt?&lt;/h2&gt;

&lt;p&gt;The prerequisite is to have the latest version of Python and the PIP package. To install HTTP Prompt, I am going to use Windows Subsystem for Linux (WSL) and by issuing the below command. Alternatively, you can install it on the native OS as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install http-prompt&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;P.S: using the &lt;code&gt;sudo&lt;/code&gt; on &lt;code&gt;pip&lt;/code&gt; is not recommended.&lt;/p&gt;

&lt;p&gt;If you would like to upgrade, issue the below command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install -U http-prompt&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To validate the installation, issue the below command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http-prompt --version&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;HTTP Prompt Features&lt;/h2&gt;

&lt;p&gt;HTTP Prompt has all the essential features for testing HTTP requests. But what is unique in HTTP Prompt is the following features: &lt;strong&gt;interactive, auto-complete and syntax highlighting&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Other features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Auto Cookies&lt;/li&gt;
&lt;li&gt;OpenAPI/Swagger Integration&lt;/li&gt;
&lt;li&gt;Unix-like Pipelines&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://qainsights.com/httpie-for-performance-engineers/"&gt;HTTPie&lt;/a&gt; compatible&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Hello World&lt;/h2&gt;

&lt;p&gt;To start HTTP Prompt, open the command line prompt and issue the below command to start a session targetting https://example.com&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http-prompt https://example.com&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above command creates a session where you can interact with it, e.g. issuing the below command displays the HTTP response. While typing the command, HTTP Prompt will autofill it for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/09/supershot.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f5TMbW-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/09/supershot.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The below screenshot is how the response will show up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/09/supershot-1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atynGNDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/09/supershot-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To exit the session, type &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Let us order a pizza.&lt;/h2&gt;

&lt;p&gt;By leveraging the httpbin.org sample demo app, let us use the HTTP Prompt to send a POST request. HTTP Prompt provides an easy way to interact with the session, just like how you interact with the computer to navigate between folders. &lt;/p&gt;

&lt;p&gt;E.g. &lt;code&gt;cd&lt;/code&gt; for change directory, &lt;code&gt;ls&lt;/code&gt; or &lt;code&gt;dir&lt;/code&gt; to list contents in the current directory etc.&lt;/p&gt;

&lt;p&gt;To order a pizza on httpbin.org, below is the POST request that needs to be sent from an HTTP client.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://httpbin.org/post

POST data:
custname=Lilly&amp;amp;custtel=9876543210&amp;amp;custemail=lilly%40example.com&amp;amp;size=medium&amp;amp;topping=cheese&amp;amp;topping=onion&amp;amp;delivery=21%3A00&amp;amp;comments=please+knock+the+door&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But in HTTP Prompt, you can do this in an interactive way. First, you need to navigate to the URL  https://httpbin.org by issuing the below command. This will create a new session for httpbin.org&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http-prompt http://httpbin.org&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To navigate into /post URL, issue the below command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd post&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will navigate into the  http://httpbin.org/post URL.&lt;/p&gt;

&lt;p&gt;To order a pizza, you can send the key value pair one by one as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/09/supershot-2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x86lMPUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/09/supershot-2.png" alt=""&gt;&lt;/a&gt;The HTTP Prompt keeps adding the above key value pairs to the request. Once all the payload is added, to send the POST request, just issue the command &lt;code&gt;post&lt;/code&gt; inside the session. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/09/supershot-4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BNVyuZxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/09/supershot-4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To send other methods, you can use the below commands.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; get
&amp;gt; post
&amp;gt; put
&amp;gt; patch
&amp;gt; delete
&amp;gt; head&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the HTTPie commands are valid in HTTP Prompt.&lt;/p&gt;

&lt;p&gt;To view all the current session details, issue the &lt;code&gt;env&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;To save the current session, use &lt;code&gt;env &amp;gt; filepath_to_save&lt;/code&gt;, e.g. &lt;code&gt;env &amp;gt; ./mysession&lt;/code&gt;, this will save the session info to the current location.&lt;/p&gt;

&lt;p&gt;To load the current session, use &lt;code&gt;exec ./mysession&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To save the response, use &lt;code&gt;post &amp;gt; myresponse&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To leverage piping, &lt;code&gt;post | grep "data"&lt;/code&gt; or &lt;code&gt;post | jq '.data'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To remove all the options and parameters, &lt;code&gt;rm *&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To add a header, e.g. &lt;code&gt;Content-Type:application/json&lt;/code&gt;, auto-fill will assist you find the right syntax.&lt;/p&gt;

&lt;p&gt;To send a secret payload, store the content in a file and create a variable that needs to be sent using the below code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;secret==`cat my_secret_post_payload`&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The backticks load it from the shell. Send the request using the &lt;code&gt;post&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://httpbin.org/response-headers&amp;gt; env
cd https://httpbin.org/response-headers
'secret=={"name":"morpheus","job":"leader"}'&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/09/supershot-5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ECAfNADb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/09/supershot-5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Configuration Location&lt;/h2&gt;

&lt;p&gt;In Windows, the first user config file will be created at, &lt;code&gt;%LOCALAPPDATA%/http-prompt/config.py&lt;/code&gt;. Default location is &lt;code&gt;~/.config/http-prompt/config.py&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;HTTP Prompt supports OpenAPI specs using &lt;code&gt;--spec&lt;/code&gt;. You can refer to the other important commands from the HTTP Prompt documents. &lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Like HTTP Pie and HTTP Toolkit, HTTP Prompt helps to test and debug HTTP requests in an interactive way with syntax highlighting and color coding. Command-line in nature helps to automate and is easy to incorporate in CI/CD as well.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>tools</category>
      <category>webperf</category>
      <category>performance</category>
    </item>
    <item>
      <title>Splunk - Rex command</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 28 Sep 2021 13:27:47 +0000</pubDate>
      <link>https://dev.to/adaendra/splunk-rex-command-2c02</link>
      <guid>https://dev.to/adaendra/splunk-rex-command-2c02</guid>
      <description>&lt;p&gt;When you are debugging an application, you may need to extract some data from logs &lt;em&gt;(like an id in an URI...)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To help you to do that, Splunk has the &lt;strong&gt;rex&lt;/strong&gt; command.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command
&lt;/h2&gt;

&lt;p&gt;The simpliest way to use it is &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;| rex &lt;em&gt;regex&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With this command, you will search for an element in the whole log.&lt;/p&gt;

&lt;p&gt;If you want to search in a specific field, add &lt;strong&gt;field=&lt;/strong&gt; and the name of your field.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;| rex field=&lt;em&gt;&lt;/em&gt; &lt;em&gt;regex&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;example&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| rex field=uri *regex*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#regex"&gt;
  &lt;/a&gt;
  Regex
&lt;/h2&gt;

&lt;p&gt;About how to write the regex, you have to follow the next pattern&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[Regex about the text before the desired value][Regex about the desired value][Regex about the text after the desired value]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first and the last part are really look like a classic regex.&lt;br&gt;
But the middle part is a little bit particular.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(?\w+)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wrote like this, you will declare the field where you want insert your new data and you have the regex corresponding to your value.&lt;/p&gt;

&lt;p&gt;Also you can retrieve multiple datas from a single rex command.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;Retrieve a username&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| rex "user\s(?&amp;lt;username&amp;gt;\w+)\s"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Retrieve the email sender and the destination of a mail&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| rex field=_raw "From: &amp;lt;(?&amp;lt;from&amp;gt;.*)&amp;gt; To: &amp;lt;(?&amp;lt;to&amp;gt;.*)&amp;gt;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.splunk.com/Documentation/SplunkCloud/8.2.2106/SearchReference/Rex"&gt;Splunk - Rex command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.splunk.com/Documentation/SCS/current/SearchReference/RexCommandExamples"&gt;Splunk - Rex examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://karunsubramanian.com/splunk/how-to-use-rex-command-to-extract-fields-in-splunk/"&gt;Karunsubramanian.com - Post about Splunk rex command&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I hope it will help you! 🍺&lt;/p&gt;

</description>
      <category>devops</category>
      <category>sre</category>
      <category>splunk</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Lessons from a student hackathon</title>
      <author>Jelle Smeets</author>
      <pubDate>Tue, 28 Sep 2021 13:25:27 +0000</pubDate>
      <link>https://dev.to/smeetsmeister/lessons-from-a-student-hackathon-1kdb</link>
      <guid>https://dev.to/smeetsmeister/lessons-from-a-student-hackathon-1kdb</guid>
      <description>&lt;p&gt;I'd like to take you back to the second year of my degree in Computer science. All the way back to 2014 to be precise. A hackathon was organized where we could travel to Belgium and do a 2-day hackathon for a company, win a cash prize and stay the night in a hostel.&lt;/p&gt;

&lt;p&gt;This sounded like an exciting adventure! Getting to code with some of my classmates in a more competitive setting sounded like a nice change from the usual school projects. And having the evening to explore a nice town (and beers) in Belgium, sign me up!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hackathon"&gt;
  &lt;/a&gt;
  The Hackathon
&lt;/h2&gt;

&lt;p&gt;In hindsight, the hackathon project was nothing special. It was for a company that thought it invented a new social media that could get big. The goal was to build a Chrome extension where users could share the page they were on. Calling their APIs and scraping the page you were on.&lt;/p&gt;

&lt;p&gt;Our group consisted of a few students who already had some experience outside of the course. Some had some summer jobs or internships as web developers. By the end of day 1, our group was miles ahead of the other groups.&lt;/p&gt;

&lt;p&gt;The evening was spent on nice food, awesome Belgian beers, and we had a long and fun night exploring the local bars. Which is honestly why we were a bit tired and hungover for day 2. Halfway through the day, we saw that the other groups were never going to catch up with us, and we decided to take it easy for the rest of the day.&lt;/p&gt;

&lt;p&gt;When the final demos were done we thought this one is in the pocket! No other team was near as far as we were. But when the results came out, they announced we had the nicest solution but they did not like the fact we took such a slow pace on the second day. Instead, they gave the prize to the runner-ups, who did not have such a nice product but instead worked their asses off.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XEt_Jd8---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvannlfbcppj3qqka1j4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XEt_Jd8---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvannlfbcppj3qqka1j4.jpg" alt="loser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While I respect the decision made, we felt screwed. Instead of a €400 cash prize, we got a bottle of beer. We quickly thanked them for organizing and had a long and grumpy ride home to The Netherlands.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-aftermath"&gt;
  &lt;/a&gt;
  The aftermath
&lt;/h2&gt;

&lt;p&gt;A few weeks later we got an email from the company that organized the hackathon. They were still interested in our solution and asked if we could mail the source code. We felt used, apparently, it was not good enough to win, but they still wanted to use it.&lt;/p&gt;

&lt;p&gt;After some discussions in our group, we decided to make a bold statement. We emailed them back, that for €300 we could send them the source code. Feeling almost as scared as taking your driver's license exam we sent the email.&lt;/p&gt;

&lt;p&gt;Honestly, we did not expect to get it. As we sort of guessed, we got a very angry email telling us we were entitled students that still had a lot to learn in the "grown-up world".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons learned
&lt;/h2&gt;

&lt;p&gt;Our group talked to some teachers. Expecting to get in trouble. After all, they made the arrangements for the hackathon. Some agreed some did not really care, but one reaction really stood out and stuck with me.&lt;/p&gt;

&lt;p&gt;A teacher told us, you guys know what you were worth, they were probably pissed off you caught them in their game. Companies often take advantage of students/interns and I think it's a really good thing you stood up for yourselves. They probably just wanted to use what you coded and thought they could get away with getting it for (almost) free.&lt;/p&gt;

&lt;p&gt;The lesson this incident thought me is to always know your worth. Don't be afraid to stand your ground, but that can also mean you don't get what you want. But at least you won't feel taken advantage of.&lt;/p&gt;

&lt;p&gt;If you are interested in other lessons I learned, check the &lt;a href="https://blog.jellesmeets.nl/lists/4-lessons-i-learned-as-a-starting-scrum-master/"&gt;4 lessons I learned as a&lt;/a&gt; starting scrum master.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>career</category>
      <category>lessons</category>
    </item>
    <item>
      <title>Clean REACT Solutions</title>
      <author>Rupak Dey</author>
      <pubDate>Tue, 28 Sep 2021 13:19:45 +0000</pubDate>
      <link>https://dev.to/deyrupak/clean-react-solutions-10lg</link>
      <guid>https://dev.to/deyrupak/clean-react-solutions-10lg</guid>
      <description>&lt;p&gt;&lt;em&gt;Save for later.&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-selfinvoking-functions"&gt;
  &lt;/a&gt;
  1. Self-invoking functions
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Fetch data async when the page loads&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q1Yk545b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8faw8pn9l6njly3s02as.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q1Yk545b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8faw8pn9l6njly3s02as.jpg" alt="Fetch data async"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-long-shadows"&gt;
  &lt;/a&gt;
  2. Long Shadows
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Create artistic effects easily with CSS in JS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vkLK9_8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tb4azuwy6q5h2qhu3jz9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vkLK9_8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tb4azuwy6q5h2qhu3jz9.jpg" alt="Long Shadows"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-building-timers"&gt;
  &lt;/a&gt;
  3. Building Timers
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Make super simple timer with useRef hook&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SUFatf5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lykrtid2ctcexgrdvmd2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SUFatf5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lykrtid2ctcexgrdvmd2.jpg" alt="Timer"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;P.S. Want the next post to be something specific? Do let me know in the comments.&lt;/p&gt;

&lt;p&gt;🤘🏻&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Connect with me : &lt;a href="https://github.com/deyRupak"&gt;Github&lt;/a&gt; | &lt;a href="https://www.fiverr.com/share/V763ld"&gt;Tutoring&lt;/a&gt; | &lt;a href="https://www.fiverr.com/share/Rld9Y8"&gt;Freelance Web Dev&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introducing ngx-react : 🅰️Angular  + ⚛️React interoperability without pain.</title>
      <author>Olivier Guimbal</author>
      <pubDate>Tue, 28 Sep 2021 13:16:45 +0000</pubDate>
      <link>https://dev.to/oguimbal/introducing-ngx-react-angular-react-interoperability-without-pain-23k</link>
      <guid>https://dev.to/oguimbal/introducing-ngx-react-angular-react-interoperability-without-pain-23k</guid>
      <description>&lt;p&gt;Have you ever wanted to use React components in an Angular application ? Or to start migrating an Angular app to React component-by-component ? Or simply use both at the same time ?&lt;/p&gt;

&lt;p&gt;I developped &lt;a href="https://github.com/oguimbal/ngx-react"&gt;ngx-react&lt;/a&gt; which allows you to do just that with ease.&lt;/p&gt;

&lt;p&gt;It enables you to use your Angular components in React, and vice versa, quite transparently, and without boilerplate.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  📐 Setup
&lt;/h1&gt;

&lt;p&gt;Just declare a bridge, somewhere in your application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NgxReactBridge&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ngx-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bridge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NgxReactBridge&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;// bridge options:&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/** Add a global react provider here */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#use-in"&gt;
  &lt;/a&gt;
  Use 🅰️ in ⚛️
&lt;/h1&gt;

&lt;p&gt;Then, to use an Angular component in React, just import it like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AsReact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toReact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MyAngularCommonent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// use it 👉  &amp;lt;AsReact prop={whatever} /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The generated ⚛️ component will take as props all the &lt;code&gt;@Input()&lt;/code&gt;s of your 🅰️ component, and all the &lt;code&gt;@Output()&lt;/code&gt;s, mapped to functions. (i.e. &lt;code&gt;@Output() onThing: EventEmitter&amp;lt;string&amp;gt;&lt;/code&gt; will be mapped to prop &lt;code&gt;onThing: (event: string) =&amp;gt; void&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-in"&gt;
  &lt;/a&gt;
  Use ⚛️ in 🅰️
&lt;/h1&gt;

&lt;p&gt;To use a React component in Angular, you'll have to do a tiny bit more work... for instance if you have a React component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyReactComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;dataChange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// [...]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then magically convert it to its Angular counterpart like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-react-component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyReactComponent_Angular&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;reactBridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toAngular&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;MyReactComponent&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// a bit of extra work: You will have to map the properties yourself &lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;dataChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(the Angular compiler doesnt allow to build dynamic components... so we have to declare them statically)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#services"&gt;
  &lt;/a&gt;
  Services
&lt;/h1&gt;

&lt;p&gt;Just inject Angular services in React like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MyAngularService&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h1&gt;

&lt;p&gt;I'll write more about this when I have more time 👉 But please share your thought if you have some :) &lt;/p&gt;

&lt;p&gt;More details on  &lt;a href="https://github.com/oguimbal/ngx-react"&gt;the ngx-react repository&lt;/a&gt; &lt;/p&gt;

</description>
      <category>angular</category>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>🥁Cloud 66 Prepress - Build and deploy Jamstack site on your own cloud!</title>
      <author>Kasia</author>
      <pubDate>Tue, 28 Sep 2021 13:07:06 +0000</pubDate>
      <link>https://dev.to/kasia/cloud-66-prepress-build-and-deploy-jamstack-site-on-your-own-cloud-3nhc</link>
      <guid>https://dev.to/kasia/cloud-66-prepress-build-and-deploy-jamstack-site-on-your-own-cloud-3nhc</guid>
      <description>&lt;p&gt;We are happy to announce a release of a new product at Cloud 66, called &lt;a href="https://www.cloud66.com/frameworks/jamstack"&gt;Cloud 66 Prepress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Prepress allows you to benefit from the power of the Jamstack without being locked into a proprietary infrastructure solution. Your application is hosted on your own object storage via your own cloud account. We took the advantage of Cloud 66's existing DevOps tools and features, extending them to static site builders. &lt;/p&gt;

&lt;p&gt;Prepress generates static web sites (Jamstack) based on the automatically detected framework with full logs and deploys them to your own cloud. If you have a website, blog, or shop built with Jekyll, Gatsby, or Hugo, you can use Prepress to deploy it to your own AWS account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#without-prepress"&gt;
  &lt;/a&gt;
  Without Prepress
&lt;/h3&gt;

&lt;p&gt;Without Prepress, to host a static site built with Jekyll, Hugo or Gatsby you need to do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build the static assets by running the tool.&lt;/li&gt;
&lt;li&gt;Create an AWS S3 (or similar) object store and upload the assets to it.&lt;/li&gt;
&lt;li&gt;Configure the storage and the files for public (or private) access.&lt;/li&gt;
&lt;li&gt;Setup conventions like redirecting &lt;code&gt;/&lt;/code&gt; to &lt;code&gt;/index.html&lt;/code&gt; on the storage.&lt;/li&gt;
&lt;li&gt;Configure a CDN like Cloudfront to point to your site if you need SSL (HTTPS) support.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With every iteration of your site, you then need to upload the new files, set the access rights and invalidate the CDN caches.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-prepress"&gt;
  &lt;/a&gt;
  With Prepress
&lt;/h3&gt;

&lt;p&gt;Prepress takes care of all of this for you, and much more, in 3 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Connect your git repo&lt;/li&gt;
&lt;li&gt;Connect your AWS account&lt;/li&gt;
&lt;li&gt;Press Go!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Today's release is our first step towards making hosting static sites developer-friendly, but we are far from done. We have a packed calendar of Prepress feature releases including supporting more cloud providers, more frameworks, and adding many of the other DevOps features that static sites benefit from most.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#watch-2-mins-demo-on-cloud-66-prepress"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=GQ7VRXZrEzo"&gt;Watch 2 mins demo on Cloud 66 Prepress&lt;/a&gt;
&lt;/h4&gt;

</description>
      <category>jamstack</category>
      <category>aws</category>
      <category>gatsby</category>
      <category>cloud66</category>
    </item>
    <item>
      <title>Using Jaeger for your microservices</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Tue, 28 Sep 2021 13:02:08 +0000</pubDate>
      <link>https://dev.to/signoz/using-jaeger-for-your-microservices-4goi</link>
      <guid>https://dev.to/signoz/using-jaeger-for-your-microservices-4goi</guid>
      <description>&lt;p&gt;Jaeger is a popular open-source tool used for distributed tracing in a microservice architecture. In a microservice architecture, a user request or transaction can travel across hundreds of services before serving what a user wants. Distributed tracing helps to track the performance of a transaction across multiple services.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jaeger is a fantastic open-source tool for distributed tracing. But for effective resolution of production issues, engineering teams need both metrics and traces. &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt;, a full-stack open-source tool, provides a unified UI for both metrics and traces.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we deep dive into how Jaeger accomplishes distributed tracing for microservices-based architecture, let's take a short detour to understand distributed tracing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-distributed-tracing"&gt;
  &lt;/a&gt;
  What is distributed tracing?
&lt;/h2&gt;

&lt;p&gt;In the world of microservices, a user request travels through hundreds of services before serving a user what they need. To make a business scalable, engineering teams are responsible for particular services with no insight into how the system performs as a whole. And that's where distributed tracing comes into the picture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" alt="Microservices architecture"&gt;&lt;/a&gt;Microservice architecture of a fictional e-commerce application&lt;/p&gt;

&lt;p&gt;Distributed tracing gives you insight into how a particular service is performing as part of the whole in a distributed software system. There are two essential concepts involved in distributed tracing: &lt;strong&gt;Spans&lt;/strong&gt; and &lt;strong&gt;trace context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;User requests are broken down into spans.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are spans?&lt;br&gt;&lt;br&gt;
Spans represent a single operation within a trace. Thus, it represents work done by a single service which can be broken down further depending on the use case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A &lt;strong&gt;trace context&lt;/strong&gt; is passed along when requests travel between services, which tracks a user request across services. Thus, you can see how a user request performs across services and identify what exactly needs your attention without manually shifting through multiple dashboards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" alt="Trace context is passed to track user requests across services"&gt;&lt;/a&gt;A trace context is passed when user requests pass from one service to another&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jaeger"&gt;
  &lt;/a&gt;
  What is Jaeger?
&lt;/h2&gt;

&lt;p&gt;Jaeger is a distributed tracing tool meant to monitor and troubleshoot transactions in a microservice architecture. It was developed by teams at Uber and then open-sourced in 2015. It was accepted as a Cloud Native Computing Foundation (CNCF) Incubation project in 2017 and was promoted to graduate status in 2019.&lt;/p&gt;

&lt;p&gt;With Jaeger you can generate and visualize trace data, which gives you an idea of how your requests are performing across services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-jaeger-track-transactions-across-a-microservice-architecture"&gt;
  &lt;/a&gt;
  How does Jaeger track transactions across a microservice architecture?
&lt;/h2&gt;

&lt;p&gt;There are four key components to a distributed tracing tool. These components together capture transactions into spans and then correlate those spans to form a trace.&lt;/p&gt;

&lt;p&gt;The four key components are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instrumentation&lt;/li&gt;
&lt;li&gt;Data pipeline&lt;/li&gt;
&lt;li&gt;Backend Storage&lt;/li&gt;
&lt;li&gt;Web UI/Visualization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPD4rjIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/Jaeger_architecture-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPD4rjIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/Jaeger_architecture-min.jpg" alt="Jaeger architecture"&gt;&lt;/a&gt;Jaeger architecture (Source: Jaeger Website)&lt;/p&gt;

&lt;p&gt;Let us see in detail what these components are and how these components come together to monitor a microservice architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instrumentation"&gt;
  &lt;/a&gt;
  Instrumentation
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What is instrumentation?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instrumentation is the process of generating telemetry data(logs, metrics, and traces) from your application code. It is essentially writing code that enables your application code to emit telemetry data, which can be used later to investigate issues.&lt;/p&gt;

&lt;p&gt;Most distributed tracing tools offer clients libraries, agents, and SDKs to instrument application code. Jaeger's client libraries for instrumentation are based on &lt;a href="https://opentracing.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTracing APIs&lt;/b&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;OpenTracing was an open-source project aimed at providing vendor-neutral APIs and instrumentation for distributed tracing. It later got merged into &lt;a href="https://opentelemetry.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTelemetry&lt;/b&gt;&lt;/a&gt;. Jaeger has official client libraries in the following languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a service is instrumented, it generates spans for incoming transactions and attaches trace context to outgoing transactions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-pipeline"&gt;
  &lt;/a&gt;
  Data pipeline
&lt;/h3&gt;

&lt;p&gt;Once the trace data is collected with the help of client libraries, it can be directly sent to the storage backends for storage and visualization. But it's a good practice to have a tracing pipeline for data buffering as the application scales. The pipeline enables receiving data in multiple formats, manipulation, batching, indexing, and queueing.&lt;/p&gt;

&lt;p&gt;Jaeger provides Jaeger collectors, as seen in the architecture diagram. The collectors validate traces, index them and perform any transformation before storing the trace data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backend-storage"&gt;
  &lt;/a&gt;
  Backend Storage
&lt;/h3&gt;

&lt;p&gt;Jaeger ships with simple in-memory storage for testing setups. Jaeger supports two popular open-source NoSQL databases as trace storage backends:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cassandra&lt;/li&gt;
&lt;li&gt;ElasticSearch&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#web-uivisualization"&gt;
  &lt;/a&gt;
  Web UI/Visualization
&lt;/h3&gt;

&lt;p&gt;Jaeger's UI is basic but comprehensive when it comes to distributed tracing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" alt="Jaeger UI showing services and corresponding traces"&gt;&lt;/a&gt;Jaeger UI showing services and corresponding traces&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qEk5a2BH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_gantt_charts-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qEk5a2BH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_gantt_charts-min.png" alt="Jaeger UI showing spans"&gt;&lt;/a&gt;Jaeger's UI showing spans for selected traces&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenges-of-using-jaeger"&gt;
  &lt;/a&gt;
  Challenges of using Jaeger
&lt;/h2&gt;

&lt;p&gt;Jaeger is a preferred choice when it comes to distributed tracing. But engineering teams need more than traces to resolve issues quickly. They need access to both metrics and traces. Metrics such as response times, error rates, request rates, and CPU usage are equally important to understand application performance.&lt;/p&gt;

&lt;p&gt;A few key challenges of using Jaeger as a distributed tracing tool are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Only provides trace data. You will have to use another tool for metrics and log management.&lt;/li&gt;
&lt;li&gt;Databases supported by Jaeger need active maintenance.&lt;/li&gt;
&lt;li&gt;Jaeger's web UI is limited with basic visualizations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a fast-moving engineering team, you need dashboards that can drive quick insights and resolution. And that's where &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; comes into the picture. It is a great alternative to Jaeger for distributed tracing in microservices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#signoz-a-jaeger-alternative-for-microservices"&gt;
  &lt;/a&gt;
  SigNoz - a Jaeger alternative for microservices
&lt;/h2&gt;

&lt;p&gt;SigNoz is a full-stack open-source application performance monitoring and observability tool which can be used in place of Jaeger. SigNoz is built to support &lt;a href="https://opentelemetry.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTelemetry&lt;/b&gt;&lt;/a&gt; natively. OpenTelemetry is becoming the world standard to generate and maintain telemetry data(Logs, metrics, and traces).&lt;/p&gt;

&lt;p&gt;SigNoz can be used as a distributed tracing tool for a microservice architecture. &lt;/p&gt;

&lt;p&gt;SigNoz also provides users flexibility in terms of data storage.You can choose between ClickHouse or Kafka + Druid as your backend storage while installing SigNoz. Both are industry-proven and highly scalable databases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" alt="Architecture of SigNoz with OpenTelemetry and ClickHouse"&gt;&lt;/a&gt;Architecture of SigNoz with ClickHouse as storage backend and OpenTelemetry for code instrumentatiion&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box visualization of things like RED metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" alt="SigNoz UI showing the popular RED metrics"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;p&gt;You can also use flamegraphs to visualize spans from your trace data. All of this comes out of the box with SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" alt="Flamegraphs used to visualize spans of distributed tracing in SigNoz UI"&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing"&lt;/p&gt;

&lt;p&gt;Some of the things SigNoz can help you track:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Run aggregates on trace data&lt;/li&gt;
&lt;li&gt;Unified UI for both metrics and traces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out SigNoz's GitHub repo here 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>monitorring</category>
      <category>microservices</category>
      <category>jaeger</category>
    </item>
    <item>
      <title>Picking your tech stack - Canonic vs Strapi</title>
      <author>Arjun</author>
      <pubDate>Tue, 28 Sep 2021 13:01:09 +0000</pubDate>
      <link>https://dev.to/canonic/picking-your-tech-stack-canonic-vs-strapi-1b44</link>
      <guid>https://dev.to/canonic/picking-your-tech-stack-canonic-vs-strapi-1b44</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Canonic and Strapi are often compared as direct competitors. However, the two are quite different in terms of intended usage &amp;amp; audience. This article aims to highlight these differences from an unbiased perspective and help &lt;em&gt;you choose&lt;/em&gt; the perfect tool for &lt;em&gt;your particular use case.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--woklS0Lx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0ffwvjhir6dw6t4z6o0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--woklS0Lx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0ffwvjhir6dw6t4z6o0.jpg" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strapi positions itself as a developer first open-source headless CMS platform; essentially trying to make content management &amp;amp; subsequent development faster and easier. Canonic, on the other hand, positions itself as a low-code backend development platform trying to take care of all your backend requirements in a single place. The two platforms are, therefore, positioned differently which should give you a clear indication of the requirement each platform is trying to fulfil.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#pre-requisites"&gt;
  &lt;/a&gt;
  Pre Requisites
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#strapi-requires-certain-softwares-to-be-preinstalled"&gt;
  &lt;/a&gt;
  Strapi requires certain softwares to be pre-installed.
&lt;/h3&gt;

&lt;p&gt;Strapi requires three softwares to be pre-installed on your computer before you can use the platform. These are Node.js, Npm/Yarn and a database (SQLite, PostgreSQL, MySQL, etc). As Strapi is "developer-first", these softwares do have a certain learning curve to them (if you're not a developer) on top of the minimal learning curve of the platform itself. However, the well maintained Docs section or &lt;a href="https://www.youtube.com/watch?v=yH6cQRRWNFI"&gt;these video tutorials&lt;/a&gt; can help you get started in no time.&lt;/p&gt;

&lt;p&gt;Post the installation of the pre-requisites, you can get your Strapi Dashboard up and running!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5TLGNdiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6im9uktqlxi1w6jsal01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5TLGNdiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6im9uktqlxi1w6jsal01.png" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canonic-requires-no-prerequisites"&gt;
  &lt;/a&gt;
  Canonic requires no pre-requisites.
&lt;/h3&gt;

&lt;p&gt;Canonic does not have any pre-requisites. Since &lt;strong&gt;Canonic is a web app&lt;/strong&gt;, it can be accessed through any internet browser, removing the need to switch between applications. Everything created on the platform remains on the platform itself; therefore making it a complete backend development tool. &lt;/p&gt;

&lt;p&gt;The only learning curve here is of the platform itself which can be navigated through by reading the documentation or completing the onboarding. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3j6YWxoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgzsxvo4sbx61b3ew9r0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3j6YWxoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgzsxvo4sbx61b3ew9r0.png" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Canonic dashboard.&lt;/p&gt;

&lt;p&gt;For anyone without substantial development experience, Strapi might be a little overwhelming to get started with, in comparison to Canonic. However, if you are a fully-fledged developer, there is a good chance that you already have the Strapi pre-requisites installed on your computer and can get your project up &amp;amp; running in no time. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hosting-amp-security"&gt;
  &lt;/a&gt;
  Hosting &amp;amp; Security
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#strapi-projects-are-selfhosted"&gt;
  &lt;/a&gt;
  Strapi projects are self-hosted.
&lt;/h3&gt;

&lt;p&gt;Strapi projects are self-hosted which means that the data is hosted on your computer or your server(s). They do have a Cloud Server functionality coming soon; the dates of which haven't yet been released. &lt;br&gt;
Due to the projects being self-hosted, there lies a hidden pre-requisite to use Strapi in terms of DevOps / deployment experience as well as the knowledge of hosting your server. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canonic-projects-are-serverless-backends"&gt;
  &lt;/a&gt;
  Canonic projects are serverless backends.
&lt;/h3&gt;

&lt;p&gt;Canonic, on the other hand, is a cloud-based platform with a server-less architecture. The projects are serverless backends securely hosted on the AWS platform and your data is securely saved on your database; reducing the risk of losing data and allowing you to scale without worrying about the stability (in case of higher traffic or other such cases). &lt;br&gt;
There is no hidden requirement of DevOps experience to use Canonic.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#platform"&gt;
  &lt;/a&gt;
  Platform
&lt;/h2&gt;

&lt;p&gt;Both platforms utilise graphical interfaces. However, due to the differences in product orientation, the way data is represented varies immensely. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strapi-uses-a-listbased-view-to-make-content-management-faster"&gt;
  &lt;/a&gt;
  Strapi uses a list-based view to make content management faster.
&lt;/h3&gt;

&lt;p&gt;Strapi uses a list-based view to show the CMS collection types (essentially folders or elements of your database). This is helpful while maintaining a large number of entries as Strapi is more focused on content management as a platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zxivuMbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvgyqssogdza4bu2uzo4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zxivuMbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvgyqssogdza4bu2uzo4.png" alt="4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canonic-uses-a-graphical-nodebased-representation-for-your-database"&gt;
  &lt;/a&gt;
  Canonic uses a graphical node-based representation for your database.
&lt;/h3&gt;

&lt;p&gt;Canonic, on the other hand, differs completely. It uses a graph-like view to help see your database structure more clearly. With each table having separate nodes for fields, one can see the entire data structure in a single glance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s8wGP_-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vz31vqrl808bzgronkef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8wGP_-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vz31vqrl808bzgronkef.png" alt="5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore, a database with many fields of varying field types becomes faster to identify on Canonic as it is inherently a visual interface. The same can become a little difficult on Strapi.&lt;/p&gt;

&lt;p&gt;An instance of this is to see what fields in a table are of the "linked" type in a database. Visual interfaces can afford signifiers, which in this case, Canonic provides with the help of a dotted line to signify a linked table. Therefore, time to locate specific fields is reduced on Canonic's visual interface while the same can become a little tedious on Strapi. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0f4rOov4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7p113mya2prxp956u9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0f4rOov4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7p113mya2prxp956u9z.png" alt="6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Linked table types (or Relational Fields on Strapi).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MrNt5McX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0zaz1bsvskiet8rowdy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MrNt5McX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0zaz1bsvskiet8rowdy.png" alt="7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Linked field types on Canonic on the graph-view use a dotted line and show what table the field is linked to. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#apis"&gt;
  &lt;/a&gt;
  APIs
&lt;/h2&gt;

&lt;p&gt;Both platforms offer auto-generated CRUD APIs with the added functionality of adding custom-coded business logic and creating your own APIs. However, here is where a major difference lies between both platforms. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strapi-uses-a-plugin-to-view-apis-and-is-editable-through-your-code-editor"&gt;
  &lt;/a&gt;
  Strapi uses a plugin to view APIs and is editable through your code editor.
&lt;/h3&gt;

&lt;p&gt;Strapi provides you with a list of APIs by using a plugin built into the platform called Swagger. Since Strapi is developer-first, any modification/creation of APIs has to be done via your code editor. To aid this process, Strapi autogenerates folders inside your preferred code editor where you can meddle around with the APIs. &lt;/p&gt;

&lt;p&gt;The APIs documented on Swagger show up like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9xwolBM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymhnhmxhhqbyilavzj2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9xwolBM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymhnhmxhhqbyilavzj2q.png" alt="8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;API List on Swagger.&lt;/p&gt;

&lt;p&gt;The APIs are then incorporated inside your code editor, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8AoTC8c8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8sr8b6tsongdrrdzwdv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AoTC8c8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8sr8b6tsongdrrdzwdv.png" alt="9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strapi autogenerates folders directly inside your code editor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canonic-allows-you-to-createmodify-apis-all-in-one-place"&gt;
  &lt;/a&gt;
  Canonic allows you to create/modify APIs all in one place.
&lt;/h3&gt;

&lt;p&gt;Canonic works a little differently. Even though the platform has an &lt;a href="https://canonic.dev/features/sdk?utm_campaign=canonicvsstrapi"&gt;SDK&lt;/a&gt; to integrate your project directly into your code editor, the true power of the platform lies in the platform itself. Canonic is essentially a one-stop platform for all backend requirements. Your database, CMS, APIs and documentation exists in one place: on the Canonic web app.&lt;/p&gt;

&lt;p&gt;Each API and subsequent trigger/webhook is seen as an endpoint, again in a similar node-like structure. This makes it easy to see webhooks and APIs in logic blocks. However, this preference can be quite subjective. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qZJfOByj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbdugfmy7b8mopn1drrs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qZJfOByj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbdugfmy7b8mopn1drrs.png" alt="10"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;The documentation for the APIs exist on the platform itself, as shown below in the screenshot: &lt;/p&gt;

&lt;p&gt;Another point to highlight is that Canonic allows you to create complex workflows straight from the platform itself which you would otherwise have to write in code on Strapi or other headless CMS platforms. &lt;/p&gt;

&lt;p&gt;Therefore, the difference between the platforms also lies in the requirement of DevOps experience. While Strapi requires you to build out your APIs inside your code editor, Canonic allows you to do the same on the platform itself along with the added functionality of creating complex workflows and triggers; all on a visual interface. Custom business logic has to be written in code for both platforms. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2Az0ir9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nokdofr2sn5bdj6cg93m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2Az0ir9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nokdofr2sn5bdj6cg93m.png" alt="11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h2&gt;

&lt;p&gt;Both platforms feature a free forever plan along with several paid options. However, because of the difference in functionality and what each platform has to offer, there are differences in pricing options. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strapi-is-an-opensource-platform-and-has-a-free-forever-plan"&gt;
  &lt;/a&gt;
  Strapi is an open-source platform and has a "free forever" plan.
&lt;/h3&gt;

&lt;p&gt;Strapi's free forever plan allows you to have a self-hosted Strapi project with unlimited CMS entries and API Calls with 3 default roles. The paid plans offer features to scale up your project with more custom roles and support.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b7XuBprC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qj77rn6ff9cv0wokeyrk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b7XuBprC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qj77rn6ff9cv0wokeyrk.png" alt="12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canonic-features-a-freemium-plan"&gt;
  &lt;/a&gt;
  Canonic features a freemium plan.
&lt;/h3&gt;

&lt;p&gt;Canonic's free plan allows you to create 3 projects with one additional collaborator and 5000 requests a day. Paid pricing plans allow more API calls and CMS entries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oV4DPOU5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wufhhrb1psnzu2sxxmiq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oV4DPOU5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wufhhrb1psnzu2sxxmiq.png" alt="13"&gt;&lt;/a&gt; &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Based on the points above, it becomes evident that Canonic and Strapi are quite different in terms of positioning and what they're striving to do.&lt;/p&gt;

&lt;p&gt;If you are a developer with knowledge about backend systems and DevOps, Strapi integrates into your workflow more easily. It sits inside your code editor; leaving you to dabble between your Strapi CMS and frontend framework straight from your code editor. &lt;/p&gt;

&lt;p&gt;With Canonic, your entire backend system is in one single place complete with your database, CMS, APIs and documentation. This can be created regardless of development experience, making it a better choice for people who lack the knowledge or resources required to create a backend. While Canonic also allows you to use SDKs and incorporate your project with your frontend framework, the true power of the platform lies in the relative ease and rapid speed with which you can make a backend on the Canonic web app.&lt;/p&gt;

&lt;p&gt;The next major point of differentiation is hosting. Strapi allows you to self-host your project which means that the data is only with you (your server) and not on any other place on the internet. Canonic, on the other hand, hosts your backend for you and you can even select the region of deployment. Therefore, API response time is faster and the risk of losing your data becomes next to impossible. A serverless backend also removes the hindrance of unstable systems as you scale up your backend, accommodating higher API calls and CMS entries.&lt;/p&gt;

&lt;p&gt;Finally, the preference of Strapi over Canonic or vice-versa largely depends on your specific use case. If you are looking for a developer-first content management tool, look no further than Strapi. However, if you're looking for a fully-fledged low-code backend development tool, regardless of your development experience, Canonic might be a better fit for you.&lt;/p&gt;

&lt;p&gt;I hope this clarifies some of the confusion surrounding the similarity &amp;amp; differences between the two platforms. Let us know which one would you prefer and why in the comments below. Godspeed to your backends and you!&lt;/p&gt;




</description>
      <category>beginners</category>
      <category>backend</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
