<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A Visual Guide to React Rendering - Cheat Sheet</title>
      <author>Alex Sidorenko</author>
      <pubDate>Tue, 19 Oct 2021 09:05:11 +0000</pubDate>
      <link>https://dev.to/sidkh/a-visual-guide-to-react-rendering-cheat-sheet-2482</link>
      <guid>https://dev.to/sidkh/a-visual-guide-to-react-rendering-cheat-sheet-2482</guid>
      <description>&lt;p&gt;When does react component re-renders? What can cause the re-render, and how to prevent unnecessary renders? Here is a quick cheat sheet you can refer to whenever you find yourself asking these questions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article serves as a table of content for a &lt;a href="/blog/react-render-always-rerenders/"&gt;Visual Guide to React Rendering&lt;/a&gt; series. Every section of the cheat sheet links to the correspondent chapter of the guide that explores a topic in depth.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#standard-rendering-and-memo"&gt;
  &lt;/a&gt;
  Standard rendering and memo
&lt;/h2&gt;

&lt;p&gt;By default, when the state of the component changes, this component and &lt;strong&gt;all its children&lt;/strong&gt; re-render. You can wrap React component with &lt;code&gt;memo&lt;/code&gt; to prevent an entire subtree from re-rendering.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--raF9h16m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8gtqj690khv8vbcfk0e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--raF9h16m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8gtqj690khv8vbcfk0e.gif" alt="Image description"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="/blog/react-render-always-rerenders/" rel="noopener noreferrer"&gt;A Visual Guide To React Rendering - It Always Rerenders (Chapter 1)&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#primitive-vs-nonprimitive-props"&gt;
  &lt;/a&gt;
  Primitive vs Non-primitive props
&lt;/h2&gt;

&lt;p&gt;Non-primitive values in javascript are compared by reference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep that in mind when passing props to memoized components. Memoized components re-render when their props change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FtAfI4_i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb1ettwkfzxqgd9jlv0v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FtAfI4_i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb1ettwkfzxqgd9jlv0v.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="/blog/react-render-props/" rel="noopener noreferrer"&gt;A Visual Guide To React Rendering - Props (Chapter 2)&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#stable-reference-with-usememo"&gt;
  &lt;/a&gt;
  Stable reference with useMemo
&lt;/h2&gt;

&lt;p&gt;You can preserve a reference to a non primitive value with &lt;code&gt;useMemo&lt;/code&gt;. It won't change on re-renders.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jplMZXJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/819blf5o4qfxghq0ykpx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jplMZXJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/819blf5o4qfxghq0ykpx.gif" alt="Image description"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="/blog/react-render-usememo/" rel="noopener noreferrer"&gt;A Visual Guide To React Rendering - useMemo (Chapter 3)&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#stable-reference-with-usecallback"&gt;
  &lt;/a&gt;
  Stable reference with useCallback
&lt;/h2&gt;

&lt;p&gt;You can preserve a reference to a function with &lt;code&gt;useCallback&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RtUqTfma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7gebd4w1q7j8884hpu2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RtUqTfma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7gebd4w1q7j8884hpu2.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="/blog/react-render-usecallback/" rel="noopener noreferrer"&gt;A Visual Guide To React Rendering - useCallback (Chapter 4)&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering-and-context"&gt;
  &lt;/a&gt;
  Rendering and Context
&lt;/h2&gt;

&lt;p&gt;The component right under your context provider should probably use &lt;code&gt;memo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_bJ1TLKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmd83elstst9smak3gsg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_bJ1TLKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmd83elstst9smak3gsg.gif" alt="Image description"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="/blog/react-render-context/" rel="noopener noreferrer"&gt;A Visual Guide To React Rendering - Context (Chapter 5)&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#rendering-and-dom"&gt;
  &lt;/a&gt;
  Rendering and DOM
&lt;/h2&gt;

&lt;p&gt;React component render does not mean DOM update. React is smart enough to update only those parts of DOM that need to change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_oomOqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fst9efyaqhxs0o3g5qtu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_oomOqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fst9efyaqhxs0o3g5qtu.gif" alt="Image description"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="/blog/react-render-dom/" rel="noopener noreferrer"&gt;A Visual Guide To React Rendering - DOM (Chapter 6)&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Originally published at &lt;a href="https://alexsidorenko.com/blog/react-render-cheat-sheet/"&gt;alexsidorenko.com&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#articles-on-the-topic"&gt;
  &lt;/a&gt;
  Articles on the topic:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/"&gt;A (Mostly) Complete Guide to React Rendering Behavior&lt;/a&gt; - Mark Erikson&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kentcdodds.com/blog/fix-the-slow-render-before-you-fix-the-re-render"&gt;Fix the slow render before you fix the re-render&lt;/a&gt; - Kent C. Dodds&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://overreacted.io/before-you-memo/"&gt;Before You memo()&lt;/a&gt; - Dan Abramov&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Embold to integrate with Codesphere to bring advanced code analysis to the cloud</title>
      <author>Saji Wang</author>
      <pubDate>Tue, 19 Oct 2021 08:46:58 +0000</pubDate>
      <link>https://dev.to/codesphere/embold-to-integrate-with-codesphere-to-bring-advanced-code-analysis-to-the-cloud-3m36</link>
      <guid>https://dev.to/codesphere/embold-to-integrate-with-codesphere-to-bring-advanced-code-analysis-to-the-cloud-3m36</guid>
      <description>&lt;p&gt;We are happy to announce our collaboration with &lt;a href="https://embold.io/"&gt;Embold&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FnbOah3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q618sd6480mtfcqgiypc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FnbOah3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q618sd6480mtfcqgiypc.png" alt="emboldlogo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Embold offers a static code analysis tool that checks your code for bad coding practices, antipatterns, and style issues so you know exactly where to start debugging. We also plan to integrate the embold ai code completion and automatic documentation as part of our vision for the future of the Codesphere IDE. We hope to assist the programmer in their coding style as well as to predict and prevent errors. &lt;/p&gt;

&lt;p&gt;When we first met with founders in late 2020 we were immediately impressed with the capacity of their systems for deep code analysis. It also excels at showing coupling, bad architecture, and the quality of real (not syntactic) code patterns. Our aim is to provide a complete development experience with everything our users love in their home environment but without any of the setup or installation. Collaboration with, and the integration of, tools like Embold are helping us get closer to that vision every day.&lt;/p&gt;

&lt;p&gt;We look forward to implementing the embold solution to our IDE in the near future.&lt;/p&gt;




&lt;p&gt;In the meantime, check out &lt;a href="https://embold.io/"&gt;Embold&lt;/a&gt; to help improve your code!&lt;/p&gt;

&lt;p&gt;And of course, happy coding from &lt;a href="https://link.codesphere.com/EQ"&gt;Codesphere&lt;/a&gt;, the most intuitive cloud provider on the market.&lt;/p&gt;

</description>
      <category>collaboration</category>
      <category>cloud</category>
      <category>codequality</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Blade Runner 2049, but it is in your Windows Terminal</title>
      <author>Retiago Drago</author>
      <pubDate>Tue, 19 Oct 2021 08:31:05 +0000</pubDate>
      <link>https://dev.to/ranggakd/blade-runner-2049-but-it-is-in-your-windows-terminal-365h</link>
      <guid>https://dev.to/ranggakd/blade-runner-2049-but-it-is-in-your-windows-terminal-365h</guid>
      <description>&lt;p&gt;My lab assistant once said, "&lt;em&gt;Make your terminal feels like your home!&lt;/em&gt;" and proceed to show me a cool terminal during lab session. I didn't have the time to do it back then but now I get a chance to. So here's how I make my Windows Terminal looks like I using it from the movie &lt;a href="https://www.imdb.com/title/tt1856101/"&gt;Blade Runner 2049&lt;/a&gt; since it feels like a futuristic home to me 😉.&lt;/p&gt;

&lt;p&gt;&lt;a href="#1-install-windows-subsystem-linux-2-wsl2"&gt;1. Install Windows Subsystem Linux 2 (WSL2)&lt;/a&gt;&lt;br&gt;
&lt;a href="#2-install-windows-terminal"&gt;2. Install Windows Terminal&lt;/a&gt;&lt;br&gt;
&lt;a href="#3-install-z-shell-zsh-as-the-default-shell"&gt;3. Install Z Shell (zsh) as the default shell&lt;/a&gt;&lt;br&gt;
&lt;a href="#4-prepare-the-image-or-GIF-for-the-background"&gt;4. Prepare the image or GIF for the background&lt;/a&gt;&lt;br&gt;
&lt;a href="#5-change-the-background-and-text"&gt;5. Change the background and text&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-install-windows-subsystem-linux-2-wsl2"&gt;
  &lt;/a&gt;
  1. Install Windows Subsystem Linux 2 (WSL2)
&lt;/h2&gt;

&lt;p&gt;The first thing is to install WSL2 on the device since I'm using Windows as my OS and WSL2 provide more than the previous version. You might ask, why don't you use PowerShell or Windows Command Prompt instead? The reason is I'm not used to it since my college and my work environment mostly depends on Windows. &lt;strong&gt;Go to step 2 if you don't wanna install&lt;/strong&gt;. You need to &lt;strong&gt;install WSL1 before&lt;/strong&gt; you could &lt;strong&gt;install WSL2&lt;/strong&gt;. I'm not gonna explain it further here since it is out of this scope. There's just no shortcut to install WSL2. Follow &lt;a href="https://www.windowscentral.com/install-windows-subsystem-linux-windows-10"&gt;this instruction&lt;/a&gt; on &lt;strong&gt;WSL&lt;/strong&gt; installation first, then &lt;a href="https://www.windowscentral.com/how-install-wsl2-windows-10"&gt;this instruction&lt;/a&gt; on &lt;strong&gt;WSL2&lt;/strong&gt; installation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pmIpc8wn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3oisr36qhd7ftu42mv9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pmIpc8wn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3oisr36qhd7ftu42mv9.png" alt="WSL2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-install-windows-terminal"&gt;
  &lt;/a&gt;
  2. Install Windows Terminal
&lt;/h2&gt;

&lt;p&gt;This is quite easy. Go to the &lt;strong&gt;Microsoft Store&lt;/strong&gt; and &lt;strong&gt;type &lt;code&gt;Windows Terminal&lt;/code&gt;&lt;/strong&gt; on the search bar. Click the product and click the Get or Install button. Let the process finish. Once it's done you're on set. Hold &lt;code&gt;Win + R&lt;/code&gt; and type &lt;code&gt;wt&lt;/code&gt; to run Windows Terminal. We are installing this after WSL2 so Windows Terminal could instantly register WSL2 on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GIdHxNnj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ueo7oss8yfb7hz70cm7q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GIdHxNnj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ueo7oss8yfb7hz70cm7q.png" alt="Windows Terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-install-z-shell-zsh-as-the-default-shell"&gt;
  &lt;/a&gt;
  3. Install Z Shell (zsh) as the default shell
&lt;/h2&gt;

&lt;p&gt;This step is just for &lt;strong&gt;WSL users only&lt;/strong&gt;. &lt;strong&gt;Go to step 4 if you are not&lt;/strong&gt;. The reason I choose this shell is for these 2 primary reasons. First, zsh is the &lt;a href="https://towardsdatascience.com/comparing-sh-bash-ksh-and-zsh-speed-82a72bbc20ed"&gt;second-fastest shell&lt;/a&gt; as far as I know. Second, it has a great framework that improves usability, &lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;Oh-My-Zsh&lt;/a&gt;, no pun intended. Follow &lt;a href="https://medium.com/tech-notes-and-geek-stuff/install-zsh-on-arch-linux-manjaro-and-make-it-your-default-shell-b0098b756a7a"&gt;this article&lt;/a&gt; on how to install zsh and its plugins. When it comes to choosing a &lt;a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes"&gt;zsh theme&lt;/a&gt;, just go for the &lt;code&gt;jonathan&lt;/code&gt; or  &lt;code&gt;agnoster&lt;/code&gt; theme. For me personally, the terminal designs fit perfectly with the futuristic nuance of the movie 🤖.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hoG0Eojc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ao7sjdvdt46ad0n30a50.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hoG0Eojc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ao7sjdvdt46ad0n30a50.png" alt="zsh"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-prepare-the-image-or-gif-for-the-background"&gt;
  &lt;/a&gt;
  4. Prepare the image or GIF for the background
&lt;/h2&gt;

&lt;p&gt;This part, I leave it to you, whether to choose a static image or gif for the background. For me personally, I want something alive accompanying me while I'm doing some code or script on the terminal 😂. So I go with the gif. Usually the gif itself I get from a certain movie scene. I look for the scene on YouTube, download it, &lt;a href="https://online-video-cutter.com/"&gt;trim it&lt;/a&gt; if it's too long and &lt;a href="https://ezgif.com/video-to-gif"&gt;convert it into a gif&lt;/a&gt;. I'll use this gif below from a hilarious movie &lt;a href="https://www.imdb.com/title/tt1032755/"&gt;RocknRolla&lt;/a&gt; directed by one of my favourite directors Guy Ritchie on my PowerShell. This scene depicts perfectly what I thought about PowerShell in case I must use it for effectiveness. Handsome Bob (Tom Hardy) once came out to his friend OneTwo (Gerard Butler) and then said, "&lt;em&gt;I told you, you wouldn't understand!&lt;/em&gt;". It might apply as well when I was told to explain my code to my colleagues. And believe me. it is way funnier in the movie context 🤣😭.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qvUfCn6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8e8kh2eqlzgfv93e9rv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qvUfCn6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8e8kh2eqlzgfv93e9rv.gif" alt="Handsome Bob"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-change-the-background-and-text"&gt;
  &lt;/a&gt;
  5. Change the background and text
&lt;/h2&gt;

&lt;p&gt;Here's come the neat part 😎. On Windows Terminal, hold &lt;code&gt;ctrl + ,&lt;/code&gt; to open &lt;strong&gt;Settings&lt;/strong&gt;. There's a lot of options here but we just focus on these 2 things, background and font style. Under &lt;strong&gt;Profiles&lt;/strong&gt; Section, choose your CLI program, in this case, I choose PowerShell first. Go to &lt;strong&gt;Appearance&lt;/strong&gt; and then scroll down until you find &lt;strong&gt;Retro toggle&lt;/strong&gt; and switch it on. Then scroll down once more and you will get to the &lt;strong&gt;Background image&lt;/strong&gt; and browse for the gif file path. Don't forget to adjust the background through its stretch mode, alignment and opacity. I'm using "uniform to fill", "center" and 40% respectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a8ccDZVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58pqmecl8mrqsdna1gra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a8ccDZVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58pqmecl8mrqsdna1gra.png" alt="Appearance configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that configuration yield this result which is perfect! 👌. Programmer tends to look on the darker work environment so that's why I only use 40% opacity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--90UBjEeL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1qrqz8er970rczy37rd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90UBjEeL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1qrqz8er970rczy37rd.gif" alt="Windows Terminal - Powershell"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, that was PowerShell I rarely use. This one is for my WSL2. First, I could use any scene with Joe or Agent K from Blade Runner 2049 movie for my background. But then the longer I stare at this terminal, the more depressing I've become to think about my &lt;em&gt;existential crisis regarding my code and myself&lt;/em&gt;. Then I come to terms with this background. Instead of thinking about depressing stuff, why don't I turn it into something positive, let's say a therapy session 💡? I ended up using Pat from &lt;a href="https://www.imdb.com/title/tt1045658/"&gt;Silver Lining Playbook&lt;/a&gt; on his therapy session since it's spark a hilarious and refreshing moment when I stare at it 😁.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZOxMN9wd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6u3lykx9jh914jukcp4h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZOxMN9wd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6u3lykx9jh914jukcp4h.gif" alt="Windows Terminal - WSL2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, that's it. One might say I don't really use the Blade Runner 2049 reference on this but for me, mine is enough to hype the vibe and keep me motivated. How about yours? 😎&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>wsl</category>
      <category>windowsterminal</category>
    </item>
    <item>
      <title>Build a backend API with Serverless, AWS, Express, and Fauna</title>
      <author>uma victor</author>
      <pubDate>Tue, 19 Oct 2021 08:24:29 +0000</pubDate>
      <link>https://dev.to/umavictor6/build-a-backend-api-with-serverless-aws-express-and-fauna-2n8g</link>
      <guid>https://dev.to/umavictor6/build-a-backend-api-with-serverless-aws-express-and-fauna-2n8g</guid>
      <description>&lt;p&gt;Serverless can mean a variety of things, depending on the context, ranging from 3rd party libraries like Netlify to frameworks for creating serverless applications. This tutorial guides us on how we can build an API with AWS and serverless using express,  modify it to fetch data the store the generated data in Fauna.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we will look at how to create an express REST API using the serverless approach with AWS lambda and the Serverless CLI. Creating and managing our handlers. We will also learn how to store the data generated by our API in a database and read the data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To follow along in this tutorial, you need&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Little knowledge of node&lt;/li&gt;
&lt;li&gt;AWS account&lt;/li&gt;
&lt;li&gt;Serverless CLI&lt;/li&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-our-project"&gt;
  &lt;/a&gt;
  Setting up our Project
&lt;/h2&gt;

&lt;p&gt;For this tutorial, we will be building our backend API using NodeJS in the Command-Line-Interface. To begin our project, we will create the directory we will be using.&lt;br&gt;
In our command line, we create our directory structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir serverless &amp;amp;&amp;amp; cd serverless
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we created a directory called serverless and entered this directory. We will then create a &lt;code&gt;package.json&lt;/code&gt; file by running the npm initialization command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When this is done, notice that a new file package.json which holds meta-data related to our project has been added to our directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-serverless"&gt;
  &lt;/a&gt;
  Setup Serverless
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.serverless.com/framework/docs/"&gt;Serverless&lt;/a&gt; refers to a method of providing backend services based on usage requirements. In this tutorial, we will use Serverless to manage our project, deploy, and manage resources along with AWS.&lt;br&gt;
To install Serverless, input the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g serverless
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To setup, run the serverless command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;serverless
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command sets up the required backend service for our API. Select AWS Node.js and enter the application name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-aws-nodejs"&gt;
  &lt;/a&gt;
  Setup AWS Node.js
&lt;/h2&gt;

&lt;p&gt;Upon completion of the previous step, the &lt;code&gt;aws-node&lt;/code&gt; template is downloaded and we get a prompt requesting us to login/register to Serverless dashboard. Select yes and follow the process to create a new account if you do not have one. After this, return to the CLI and select &lt;code&gt;local AWS access key&lt;/code&gt; then proceed to create the account to get this key.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-aws-account"&gt;
  &lt;/a&gt;
  Create AWS account
&lt;/h2&gt;

&lt;p&gt;We have a link opened up in our browser where you can create an AWS account and generate the needed credentials. Here we follow the steps for account creation to set up your user account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-aws-credentials"&gt;
  &lt;/a&gt;
  Get AWS credentials
&lt;/h2&gt;

&lt;p&gt;You can now proceed to add your credentials to the command line. These keys can be found under the security credentials of our user account. Here, we click on create new access key&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yLOAI8yY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1632088087496_Screenshot%2B175.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yLOAI8yY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1632088087496_Screenshot%2B175.png" alt="Generating access key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the keys in the pop up that appears by clicking on the show access key. Copy and paste these into your command line.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HLCkPSzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1632090137417_access%2Bkey%2Bshow.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HLCkPSzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1632090137417_access%2Bkey%2Bshow.jpg" alt="getting access credentials"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select yes to deploy the project. Move all generated serverless files from the created directory to the root directory and delete the empty folder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-all-resources-lambda-functions"&gt;
  &lt;/a&gt;
  Deploy all resources (lambda functions)
&lt;/h2&gt;

&lt;p&gt;Open the project directory in your code editor. In the directory within the serverless file created for us, we find a file named &lt;code&gt;serverless.yml&lt;/code&gt; that contains a function called &lt;code&gt;hello&lt;/code&gt; and a handler, &lt;code&gt;handler.hello&lt;/code&gt;. Navigate to &lt;code&gt;handler.js&lt;/code&gt; we notice a function called hello is exported which takes an event and returns a response. &lt;br&gt;
On our browser, on the AWS console page, search for Lamba in the service search bar. In it, we find the exported function &lt;code&gt;hello&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CpEWECYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1632091772235_lambda.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CpEWECYs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1632091772235_lambda.jpg" alt="lambda function"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connect-our-handler-to-express"&gt;
  &lt;/a&gt;
  Connect our handler to express
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#install-awsserverlessexpress"&gt;
  &lt;/a&gt;
  install aws-serverless-express
&lt;/h3&gt;

&lt;p&gt;To install this, run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i aws-serverless-express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#other-dependencies"&gt;
  &lt;/a&gt;
  Other dependencies
&lt;/h3&gt;

&lt;p&gt;For this tutorial we would require Express.js and other packages. We will install them using CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i express body-parser cors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We would then create a new folder in our root folder called src. This will be where all our express codes will be stored.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initialize-the-express-handler"&gt;
  &lt;/a&gt;
  Initialize the Express handler
&lt;/h2&gt;

&lt;p&gt;Create a file in the src folder called index.js to be the root file for the express app. Add the following code to the index.js to initialize our app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const app = express();
module.exports = app;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#modify-the-serverless-file"&gt;
  &lt;/a&gt;
  Modify the Serverless file
&lt;/h2&gt;

&lt;p&gt;First, we will clear all the code within the handler.js file and replace it with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const awsServerlessExpress = require('aws-serverless-express');
const app = require('./src/index');

const server = awsServerlessExpress.createServer(app);

module.handler = (event, context) =&amp;gt; {
  return awsServerlessExpress.proxy(server, event, context);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have made imports for &lt;code&gt;aws-serverless-express&lt;/code&gt; and our app from &lt;code&gt;index.js&lt;/code&gt;. We created a &lt;code&gt;const&lt;/code&gt; named server to create our server. We then modified the handler function to return certain parameters.&lt;br&gt;
Navigate to the &lt;code&gt;serverless.yml&lt;/code&gt; file and here we will change the name of the function to something more descriptive, then change the name of the handler to the name of the function we exported above which is &lt;code&gt;handler&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;functions:
  app-api:
    handler: handler.handler
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will set events the function will respond to. To do this, add the following code to your &lt;code&gt;functions&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;events:
      http:
        - http:
          path: /
          method: get
          cors: true
      - http:
          path: /{proxy+}
          method: any
          cors: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These events for the &lt;code&gt;app-api&lt;/code&gt; function are set up to respond to any requests that get sent to it. It acts as a proxy based on the specified method first on the root path and then any other URL structure dependent on the API.&lt;br&gt;
We will now proceed to modify our index.js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const bodyParser = require('body-parser');
const express = require('express');
const cors = require('cors')
const app = express();
app.use(cors());
app.use(bodyParser.json());
module.exports = app;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have added imports for extra dependencies and use these dependencies as middleware on the response that is returned to &lt;code&gt;app&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-our-route"&gt;
  &lt;/a&gt;
  Setup our Route
&lt;/h2&gt;

&lt;p&gt;We will create a folder called routes within our src directory. Inside it, create a file called routes.js. Populate this file with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const routes = express.Router({
    mergeParams: true
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we created a &lt;code&gt;const&lt;/code&gt; called routes which takes in an object value. The &lt;code&gt;mergeParams&lt;/code&gt; property is used to set up a child router to prevent having to specify the full route when responding to a request but can append as many routes as required to the existing child route.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-simple-get-route"&gt;
  &lt;/a&gt;
  Create a simple get route
&lt;/h3&gt;

&lt;p&gt;To set up this route, add the following code to the routes.js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;routes.get('/', (req, res) =&amp;gt; {
    res.status(200).json({});
})
module.exports = {
    routes,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we created a route with a get method and a root path. There is a second parameter which is a callback function that takes two parameters &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; provided by express. This provides information on incoming requests. We send back an empty status of 200 and an empty array whenever the router is hit.&lt;br&gt;
Finally, we will add this created route to our &lt;code&gt;index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const {
    routes: userRoutes,
} = require('./routes/routes');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then add it as a middleware for our app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use('/user', userRoutes)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this does is that any path that has /user is automatically handled by &lt;code&gt;userRoutes&lt;/code&gt;. You can now deploy your project in CLI by navigating to the folder containing &lt;code&gt;serverless.yml&lt;/code&gt; and typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sls deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#test-our-route-with-postman"&gt;
  &lt;/a&gt;
  Test our route with postman
&lt;/h3&gt;

&lt;p&gt;After deploying, you will have an output in your CLI similar to the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--grn3y2_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1632103742118_Screenshot%2B176.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--grn3y2_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1632103742118_Screenshot%2B176.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the &lt;code&gt;URL&lt;/code&gt; from the &lt;code&gt;GET&lt;/code&gt; method, open postman and click on new &lt;code&gt;http&lt;/code&gt; request. paste the &lt;code&gt;URL&lt;/code&gt; and add &lt;code&gt;/user&lt;/code&gt; at the end to make the request use the route we defined. Click on send request. The result will be a status code of 200 and an empty array.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DyJNd0qP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1632103990396_postman.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DyJNd0qP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1632103990396_postman.jpg" alt="Postman"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congrats, you just built an API. In modern applications where API’s are used to fetch large quantities of data, rather than simply returning the data to JSON, it is better practice to store this data in a database. This eases easy accessibility, arrangement and management of the data, and erases the need to run a new fetch request whenever the data is required as it is stored in a database. We will use &lt;a href="http://fauna.com?utm_source=DevTo&amp;amp;utm_medium=referral&amp;amp;utm_campaign=WritewithFauna_BackendAPI_VUma"&gt;Fauna&lt;/a&gt; a serverless real-time database to show how we can store and read data from our API. One major perk of Fauna is that it is easy to adopt and also easily accesible via API’s.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fauna-installation"&gt;
  &lt;/a&gt;
  Fauna installation
&lt;/h2&gt;

&lt;p&gt;To install Fauna in the CLI, use the commands below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save faunadb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installation, we can initialize it by adding the following code at the top of our &lt;code&gt;routes.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var faunadb = require('faunadb')
var q = faunadb.query;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;fauna.query&lt;/code&gt; module contains the functions we would require to create Fauna queries. Next, we would require an Admin key to access our Fauna database. First &lt;a href="https://dashboard.fauna.com/accounts/register?utm_source=DevTo&amp;amp;utm_medium=referral&amp;amp;utm_campaign=WritewithFauna_BackendAPI_VUma"&gt;create an account&lt;/a&gt; on Fauna, create a database with a name of your choice, then on the dashboard click on security and create a new key.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HrKNv6JM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1633689462856_serveless.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HrKNv6JM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1633689462856_serveless.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, I’ve created a database named &lt;code&gt;backendapi&lt;/code&gt;. Click on save and copy the key displayed on the page that opens next to your &lt;code&gt;route.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const client = new faunadb.Client({ secret: 'YOUR_FAUNADB_ADMIN_SECRET' });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will also create a collection to store our data in and an index to reference the collection.&lt;/p&gt;

&lt;p&gt;Then we create the index to reference the collection:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kOdiTZWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1633885550383_news%2Bindex.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOdiTZWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1633885550383_news%2Bindex.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will modify our API to fetch news from &lt;a href="https://newsapi.org/"&gt;NewsAPI&lt;/a&gt;.  Create an API key and create your request by modifying the routes. Before that, we would need the node fetch module to perform fetch requests to get data from the news API. We will install this via CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install node-fetch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installation, we can import it into our &lt;code&gt;routes.js&lt;/code&gt; file and also export it so that it will be added when we deploy to Serverless.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const fetch = require("node-fetch");
//routes here
module.exports = {
  routes,
  fetch
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then to fetch the news from NewsAPI we modify the routes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;routes.get("/", async (req, res) =&amp;gt; {
   const response = await fetch(
     "https://newsapi.org/v2/top-headlines?sources=techcrunch&amp;amp;pageSize=1&amp;amp;apiKey=your API key"
   );
  const news = await response.json();
  res.status(200).json(news);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the request, I have set the value of pageSize to 1 to return only one result. If you run &lt;code&gt;sls deploy&lt;/code&gt; to deploy to Serverless, and run API testing on the link. We get the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dDbWxHcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1633874433668_servelss%2Bnews.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dDbWxHcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1633874433668_servelss%2Bnews.jpg" alt="news fetch added"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will now modify the code to create a collection in our database and add the values of the article title and author from the request to our database. The finished code in  routes  will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var faunadb = require("faunadb");
const express = require("express");
const app = express();
const fetch = require("node-fetch");
const routes = express.Router({
  mergeParams: true,
});
const getreq = async () =&amp;gt; {
  const client = new faunadb.Client({
    secret: "your Fauna secret",
  });
  const q = faunadb.query;
  try {
    const response = await fetch(
      "https://newsapi.org/v2/top-headlines?sources=techcrunch&amp;amp;pageSize=1&amp;amp;apiKey=your API key here"
    );
    const news = await response.json();
    await client.query(
      q.Create(q.Collection("news"), {
        data: { title:await news.articles[0].title, author:await news.articles[0].author },
      })
    );
    const document = await client.query(q.Get(q.Match(q.Index("news_index"))));
    return {
      statusCode: 200,
      body: {
        snippet: document.data,
      },
    };
  } catch (error) {
    res.status(400).json(error);
  }
}
routes.get("/", async (req, res) =&amp;gt; {
   const info = await getreq();
   res.status(200).json(await info);
});
module.exports = {
  routes,
  fetch,
  faunadb
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we created an async function &lt;code&gt;getreq&lt;/code&gt; which we used to create the collection news with the data we got from the NewsAPI. We then referenced the news collection via the &lt;code&gt;news_index&lt;/code&gt; index, got the data stored there and returned it. Now if you run &lt;code&gt;sls deploy&lt;/code&gt; and run API testing on the URL you will get an image similar to the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7uaVvv4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1633900724747_after%2Bfauna.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7uaVvv4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1633900724747_after%2Bfauna.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, if you check your collection in the Fauna database, you will also see the data from the API:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXQzh38L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1633900784993_fauna%2Bafter%2Bapi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXQzh38L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_34CCC46F9DF0D64D8C3FB725C0A44045224E9DA8C117303A381F97EE1D16D22A_1633900784993_fauna%2Bafter%2Bapi.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have finally come to the end of this tutorial. Here, we covered how to create an express REST API using the serverless approach with AWS lambda and the serverless CLI. Creating and managing our handlers. Then we fetched data using the API and stored the data in a Fauna database.&lt;/p&gt;

&lt;p&gt;Written in connection with the &lt;a href="https://fauna.com/blog/write-with-fauna"&gt;Write with Fauna Program&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>fauna</category>
      <category>serverless</category>
    </item>
    <item>
      <title>fractal.build as an atomic design tool</title>
      <author>Ingo Steinke</author>
      <pubDate>Tue, 19 Oct 2021 08:20:35 +0000</pubDate>
      <link>https://dev.to/ingosteinke/fractalbuild-as-an-atomic-design-tool-4bjn</link>
      <guid>https://dev.to/ingosteinke/fractalbuild-as-an-atomic-design-tool-4bjn</guid>
      <description>&lt;p&gt;Recently, I discovered a tool that helped me build a design system: &lt;a href="https://fractal.build/"&gt;fractal.build&lt;/a&gt;. Described in by Rachel Andrew in her article &lt;a href="https://www.smashingmagazine.com/2018/07/pattern-library-first-css/"&gt;Pattern Library First&lt;/a&gt; back in 2018, fractal does look a little old school, but it can be customized and does a good job without getting into your way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternatives-to-fractal"&gt;
  &lt;/a&gt;
  alternatives to fractal
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Fractal&lt;/strong&gt; looks less shiny than &lt;a href="https://storybook.js.org"&gt;Storybook&lt;/a&gt;, that I have used for &lt;a href="https://reactjs.org"&gt;ReactJS&lt;/a&gt; projects, but it can easily be used for projects without any JavaScript framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fractal&lt;/strong&gt; seemed easier, at least to me, to understand and maintain, than &lt;a href="https://patternlab.io"&gt;PatternLab&lt;/a&gt;, which I failed to install due a bug in the current installer (and when I managed to install the grunt version, I was already told that there is fractal as a possible alternative).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#atomic-design-and-design-systems"&gt;
  &lt;/a&gt;
  atomic design and design systems
&lt;/h2&gt;

&lt;p&gt;So what are &lt;a href="https://modus.medium.com/set-your-design-system-up-for-success-c34eb1503e17"&gt;design systems&lt;/a&gt; and what is &lt;a href="https://bradfrost.com/blog/post/atomic-web-design/"&gt;atomic design&lt;/a&gt;?&lt;br&gt;
Much has been said and written about CSS methodologies like &lt;a href="http://getbem.com"&gt;BEM&lt;/a&gt;, &lt;a href="https://css-tricks.com/abem-useful-adaptation-bem/"&gt;ABEM&lt;/a&gt;, &lt;a href="https://itcss.io"&gt;ITCSS&lt;/a&gt;, and utility-based approaches like &lt;a href="https://tailwindcss.com"&gt;Tailwind&lt;/a&gt; or &lt;a href="https://getbootstrap.com"&gt;Bootstrap&lt;/a&gt;. Follow the links for further reading, if you like.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#agnostic-fractal"&gt;
  &lt;/a&gt;
  agnostic fractal
&lt;/h2&gt;

&lt;p&gt;Fractal is quite agnostic about tools, methods, and coding style. Which also allows for a pragmatic approach that does not adhere to one single methodology.&lt;/p&gt;

&lt;p&gt;The default setup allows you to build and compose components using handlebars, HTML, and CSS. Fractal can be customized to use any other markup language like Twig or Nunjucks, so you could probably use it for a JAMStack setup with 11ty as well.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#boilerplates-to-start-with"&gt;
  &lt;/a&gt;
  boilerplates to start with
&lt;/h3&gt;

&lt;p&gt;Other users have created boilerplates for using &lt;a href="https://imarc.github.io/boilerplate-components/pattern-library/docs/abem.html"&gt;ABEM CSS in fractal&lt;/a&gt; or ditching handlebars to use &lt;a href="https://github.com/davidlagace/fractal-twig-boilerplate"&gt;fractal with twig&lt;/a&gt; templates instead.&lt;/p&gt;

&lt;p&gt;To use CSS on a component level, you can add a tool chain of your choice (or just the first copy-and-paste-able example you find on Google), like SASS or PostCSS, together with a build process based on Webpack, Gulp, or plain Node.js.&lt;/p&gt;

&lt;p&gt;In my first &lt;a href="https://github.com/openmindculture/fractal-build-example"&gt;fractal.build example&lt;/a&gt;, I used a gulp setup with SASS for a quick proof of concept. In a future JAMStack project, I would go for PostCSS to use native CSS 3 / CSSnext features and try to avoid unnecessary tool depencies.&lt;/p&gt;

&lt;p&gt;But still, after changing one's mind about tools or language choices, any existing code could be refactored easily while keeping the same folder structure.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#advantages-and-suggestions"&gt;
  &lt;/a&gt;
  advantages and suggestions
&lt;/h2&gt;

&lt;p&gt;Apart from its agnostic and pragmatic approach, fractal has some other advantages.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#preview-theme-customization"&gt;
  &lt;/a&gt;
  preview theme customization
&lt;/h3&gt;

&lt;p&gt;Fractal's user interface can be themed / customized, so we do not have to stick to the original UI. We can set colors, logo, and fonts to match our customers' corporate design before a presentation.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#component-composition"&gt;
  &lt;/a&gt;
  component composition
&lt;/h3&gt;

&lt;p&gt;Components can include other components, so we can build a design system bottom-up starting with colors, icons, buttons etc. to be used in forms, paragraphs, sliders, navigation which can then be composed to larger blocks and pages.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#variants"&gt;
  &lt;/a&gt;
  variants
&lt;/h3&gt;

&lt;p&gt;Components can have variants, either by configuration (in a config file) or by using file names accordingly, like in this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/coponents/my-component/
  my-component.config.yml (or .json)
  my-component.hbs (default variant)
  my-component.css (classes used by my component)
  my-component--with-arrow.hbs
  my-component--with-arrow-without-borders.hbs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can get confusing quickly, but you can (mis)use the default variant to display an overview page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight handlebars"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- my-component.hbs --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Component with Arrow&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;{{&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="na"&gt;@my-component--with-arrow&lt;/span&gt; &lt;span class="k"&gt;}}&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Component with Arrow but without Borders&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;{{&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="na"&gt;@my-component--with-arrow-without-borders&lt;/span&gt; &lt;span class="k"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  disadvantages
&lt;/h2&gt;

&lt;p&gt;Some aspects to consider before choosing fractal:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#invalid-markup-breaks-the-preview"&gt;
  &lt;/a&gt;
  invalid markup breaks the preview
&lt;/h3&gt;

&lt;p&gt;Some invalid markup can break the whole preview. One single mistyped character inside a handlebars include will show an error message instead of the preview.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#component-names-must-be-unique"&gt;
  &lt;/a&gt;
  component names must be unique
&lt;/h3&gt;

&lt;p&gt;This might be an advantage or a disadvantage, according to your own point of view: while components can be nested and composed, there is no hierarchy.&lt;/p&gt;

&lt;p&gt;Instead, all components exist on the same level and share the same namespace, so their technical names have to be unique.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-must-do-it-by-yourself"&gt;
  &lt;/a&gt;
  you must do it by yourself
&lt;/h3&gt;

&lt;p&gt;Apart from its agnostic and pragmatic approach being an advantage for me, it might be a disadvantage to you.&lt;/p&gt;

&lt;p&gt;Fractal is just a tool, and quite a simple one, at least when you have experience with other tools and frameworks. It is up to you to complete the setup by making further choices and implementations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  conclusion
&lt;/h2&gt;

&lt;p&gt;Despite fractal being not the latest fad (or maybe even because of that) I have discovered it as a practical development and preview tool that does not get in your way.&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>React with Typescript</title>
      <author>Mohammad Abdul Alim</author>
      <pubDate>Tue, 19 Oct 2021 07:58:29 +0000</pubDate>
      <link>https://dev.to/alim1496/react-with-typescript-1gp5</link>
      <guid>https://dev.to/alim1496/react-with-typescript-1gp5</guid>
      <description>&lt;p&gt;At present react js has been a very popular library to build beautiful and scalable user interfaces. Today I would like to build a demo react project with typescript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h3&gt;

&lt;p&gt;We would like to use the &lt;code&gt;create-react-app&lt;/code&gt; environment built by facebook developer team to create our project. Our project will have a form to add favorite tv series and show the list. It will be a single page website. At first we will run the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app --template typescript fav-tv-series
cd fav-tv-series
npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first command will create a react app named &lt;code&gt;fav-tv-series&lt;/code&gt; having typescript template. Then after going to that directory we will run the third command which will create a process running on port number 3000 and look like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lxjjYqnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkdawy8q5lugx5uiskch.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lxjjYqnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkdawy8q5lugx5uiskch.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-interface"&gt;
  &lt;/a&gt;
  Creating Interface
&lt;/h3&gt;

&lt;p&gt;In typescript our main concern will be defining strict type to every data that will be used. &lt;code&gt;interface&lt;/code&gt; is a pretty good way to define a data and use that as a type in ts. In the &lt;code&gt;src&lt;/code&gt; folder of the root folder we will create a directory named &lt;code&gt;interfaces&lt;/code&gt; and inside it we will create a file named &lt;code&gt;SeriesProps.tsx&lt;/code&gt;. Here we will create an interface named &lt;code&gt;SeriesProps&lt;/code&gt; like following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export interface SeriesProps {
    seriesList: {
        name: string;
        imdb: number;
        cover: string;
        seasons: number;
        genre: string;
      }[]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#updating-app"&gt;
  &lt;/a&gt;
  Updating App
&lt;/h3&gt;

&lt;p&gt;At first we will update the existing &lt;code&gt;App.tsx&lt;/code&gt; file by removing the existing code. Our single page web application will contain two components. One is a form where a user will give necessary inputs about his favourite series and another is a list containing those serieses. The data will be stored in a state named &lt;code&gt;seriesList&lt;/code&gt; and updated with the help of &lt;code&gt;setSeriesList&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from 'react';
import { SeriesProps } from './interfaces/SeriesProps';
import './App.css';
import List from './components/List';
import Form from './components/Form';

function App() {
  const [seriesList, setSeriesList] = useState&amp;lt;SeriesProps["seriesList"]&amp;gt;([]);

  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;h1&amp;gt;My Favourite TV Series&amp;lt;/h1&amp;gt;
      &amp;lt;Form seriesList={seriesList} setSeriesList={setSeriesList} /&amp;gt;
      &amp;lt;List seriesList={seriesList} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-list"&gt;
  &lt;/a&gt;
  Creating List
&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;src&lt;/code&gt; directory of root folder we will create a directory named &lt;code&gt;components&lt;/code&gt; and there we will create the &lt;code&gt;List.tsx&lt;/code&gt; file. Our component will look like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { FC } from "react";
import { SeriesProps } from "../interfaces/SeriesProps";

const List:FC&amp;lt;SeriesProps&amp;gt; = ({seriesList}) =&amp;gt; (
    &amp;lt;div className="series-list"&amp;gt;
        {seriesList.map((series) =&amp;gt; (
            &amp;lt;div className="series-item"&amp;gt;
                &amp;lt;img src={series.cover} alt="Series-cover" /&amp;gt;
                &amp;lt;p&amp;gt;&amp;lt;b&amp;gt;{series.name}&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;{series.genre}&amp;lt;/p&amp;gt; 
                &amp;lt;p&amp;gt;{series.seasons} seasons&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;★★★★★ {series.imdb}&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        ))}
    &amp;lt;/div&amp;gt;
);

export default List;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we can have a look at &lt;code&gt;FC&lt;/code&gt; which means Functional Component and it guides us with types. Here we have passed &lt;code&gt;SeriesProps&lt;/code&gt; as props and finally we have used &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"&gt;map&lt;/a&gt; function to render tv series list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-form"&gt;
  &lt;/a&gt;
  Creating Form
&lt;/h3&gt;

&lt;p&gt;Now we are left with creating the form element where we will give necessary inputs. Here we will use &lt;a href="https://reactjs.org/docs/forms.html"&gt;controlled components&lt;/a&gt; to build input elements. For simplicity we will create a state object where the necessary input values will be kept. We will use &lt;code&gt;useState&lt;/code&gt; for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [input, setInput] = useState({
        name: "",
        genre: "",
        cover: "",
        imdb: 0,
        seasons: 0
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will render the components. Here we will have five input fields having three text and two number type inputs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
        &amp;lt;div className="form-container"&amp;gt;
            &amp;lt;div className="form-div"&amp;gt;
                &amp;lt;label htmlFor="name"&amp;gt;Name&amp;lt;/label&amp;gt;
                &amp;lt;input type="text" name="name" id="name" value={input.name} onChange={handleChange} /&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className="form-div"&amp;gt;
                &amp;lt;label htmlFor="genre"&amp;gt;Genre&amp;lt;/label&amp;gt;
                &amp;lt;input type="text" name="genre" id="genre" value={input.genre} onChange={handleChange} /&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className="form-div"&amp;gt;
                &amp;lt;label htmlFor="cover"&amp;gt;Cover Link&amp;lt;/label&amp;gt;
                &amp;lt;input type="text" name="cover" id="cover" value={input.cover} onChange={handleChange} /&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className="form-div"&amp;gt;
                &amp;lt;label htmlFor="imdb"&amp;gt;IMDB Rating&amp;lt;/label&amp;gt;
                &amp;lt;input type="number" name="imdb" id="imdb" value={input.imdb} onChange={handleChange} /&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className="form-div"&amp;gt;
                &amp;lt;label htmlFor="seasons"&amp;gt;Total Seasons&amp;lt;/label&amp;gt;
                &amp;lt;input type="number" name="seasons" id="seasons" value={input.seasons} onChange={handleChange} /&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;button type="button" onClick={handleClick}&amp;gt;Add Series&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we can see that the value of each input field will be stored to the state object. We can see that all input fields have a function named &lt;code&gt;handleChange&lt;/code&gt; which will be invoked as an &lt;code&gt;onChange&lt;/code&gt; listener and the button has an &lt;code&gt;onClick&lt;/code&gt; listener named &lt;code&gt;handleClick&lt;/code&gt;. We will implement these two methods now. The handleChange method is quite straight forward. Here we destructure the &lt;code&gt;input&lt;/code&gt; state and update the particular state element needed to be updated. One important thing to notice is that the type of event we are passing to that function. Here the type is &lt;code&gt;ChangeEvent&amp;lt;HTMLInputElement&amp;gt;&lt;/code&gt; which means our handleChange method will only accept html input element change event. One thing to notice is that we have kept the name and value of each input same for which we can use &lt;code&gt;[name]: value&lt;/code&gt; statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const handleChange = (e: ChangeEvent&amp;lt;HTMLInputElement&amp;gt;) =&amp;gt; {
        const { value, name } = e.target;
        setInput({
            ...input,
            [name]: value
        });
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before implementing the handleClick method we need to define a props which will be used to update and store the series list. As we have already defined a state in our &lt;code&gt;App.tsx&lt;/code&gt; using &lt;code&gt;useState&lt;/code&gt;, we need to pass those in this &lt;code&gt;Form&lt;/code&gt; component and use in our handleClick method. Lets have a look at the following interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface Props {
    seriesList: SeriesProps["seriesList"],
    setSeriesList: Dispatch&amp;lt;SetStateAction&amp;lt;SeriesProps["seriesList"]&amp;gt;&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will implement our handleClick method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const handleClick = (e: MouseEvent&amp;lt;HTMLButtonElement&amp;gt;) =&amp;gt; {
        const { name, genre, cover, imdb, seasons } = input;
        if(!name &amp;amp;&amp;amp; !genre &amp;amp;&amp;amp; !cover &amp;amp;&amp;amp; !imdb &amp;amp;&amp;amp; !seasons) return;
        const series = { name, genre, cover, imdb, seasons };
        setSeriesList([...seriesList, series]);
        setInput({
            name: "",
            genre: "",
            cover: "",
            imdb: 0,
            seasons: 0
        });
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our method only accepts a mouse event coming from an html button element. At first we have destructured our input state. Then we have checked whether any input field is empty. If so then we won't move further. Otherwise we have created a series object and appended it to the series list. After that we have made all fields empty. So our complete &lt;code&gt;Form.tsx&lt;/code&gt; looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { FC, useState, ChangeEvent, MouseEvent, Dispatch, SetStateAction } from "react";
import { SeriesProps } from "../interfaces/SeriesProps";

interface Props {
    seriesList: SeriesProps["seriesList"],
    setSeriesList: Dispatch&amp;lt;SetStateAction&amp;lt;SeriesProps["seriesList"]&amp;gt;&amp;gt;
}

const Form: FC&amp;lt;Props&amp;gt; = ({ seriesList, setSeriesList }) =&amp;gt; {

    const [input, setInput] = useState({
        name: "",
        genre: "",
        cover: "",
        imdb: 0,
        seasons: 0
    });

    const handleChange = (e: ChangeEvent&amp;lt;HTMLInputElement&amp;gt;) =&amp;gt; {
        const { value, name } = e.target;
        setInput({
            ...input,
            [name]: value
        });
    };

    const handleClick = (e: MouseEvent&amp;lt;HTMLButtonElement&amp;gt;) =&amp;gt; {
        const { name, genre, cover, imdb, seasons } = input;
        const series = { name, genre, cover, imdb, seasons };
        if(!name &amp;amp;&amp;amp; !genre &amp;amp;&amp;amp; !cover &amp;amp;&amp;amp; !imdb &amp;amp;&amp;amp; !seasons) return;
        setSeriesList([...seriesList, series]);
        setInput({
            name: "",
            genre: "",
            cover: "",
            imdb: 0,
            seasons: 0
        });
    };

    return (
        &amp;lt;div className="form-container"&amp;gt;
            &amp;lt;div className="form-div"&amp;gt;
                &amp;lt;label htmlFor="name"&amp;gt;Name&amp;lt;/label&amp;gt;
                &amp;lt;input type="text" name="name" id="name" value={input.name} onChange={handleChange} /&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className="form-div"&amp;gt;
                &amp;lt;label htmlFor="genre"&amp;gt;Genre&amp;lt;/label&amp;gt;
                &amp;lt;input type="text" name="genre" id="genre" value={input.genre} onChange={handleChange} /&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className="form-div"&amp;gt;
                &amp;lt;label htmlFor="cover"&amp;gt;Cover Link&amp;lt;/label&amp;gt;
                &amp;lt;input type="text" name="cover" id="cover" value={input.cover} onChange={handleChange} /&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className="form-div"&amp;gt;
                &amp;lt;label htmlFor="imdb"&amp;gt;IMDB Rating&amp;lt;/label&amp;gt;
                &amp;lt;input type="number" name="imdb" id="imdb" value={input.imdb} onChange={handleChange} /&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className="form-div"&amp;gt;
                &amp;lt;label htmlFor="seasons"&amp;gt;Total Seasons&amp;lt;/label&amp;gt;
                &amp;lt;input type="number" name="seasons" id="seasons" value={input.seasons} onChange={handleChange} /&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;button type="button" onClick={handleClick}&amp;gt;Add Series&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    );
};

export default Form;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are only left with adding css styles. For simplicity we have made change only in the &lt;code&gt;App.css&lt;/code&gt; files which looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.form-container {
  width: 400px;
  margin: auto;
}

h1 {
  text-align: center;
}

.form-div {
  margin-bottom: 10px;
}

input[type='text'],
input[type='number'] {
  float: right;
  width: 70%;
  padding: 3px;
}

input[type='checkbox'] {
  margin-left: 110px;
}

button {
  margin: 10px 0;
  padding: 10px 0;
  width: 100%;
  cursor: pointer;
  font-weight: bold;
  text-transform: uppercase;
  font-size: 16px;
}

p {
  line-height: 5px;
}

.series-list {
  display: flex;
  flex-flow: wrap;
  margin: 50px auto;
  width: 90%;
}

.series-item {
  padding: 0 20px 20px 0;
  width: 300px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we are finished with all coding, we can have a look at our browser's &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; link. After adding some data it should look like following&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IKDMen1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6tbsdnr8ux7kkfdjjj9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IKDMen1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6tbsdnr8ux7kkfdjjj9.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;br&gt;
The whole project is in github. You can very well have a look in it &lt;a href="https://github.com/alim1496/react-with-typescript"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Coding 😀😀😀😀😀&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>typescript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Installation of GDAL on jupyter notebook</title>
      <author>Tek Bahadur Kshetri</author>
      <pubDate>Tue, 19 Oct 2021 07:54:54 +0000</pubDate>
      <link>https://dev.to/iamtekson/installation-of-gdal-on-jupyter-notebook-p5d</link>
      <guid>https://dev.to/iamtekson/installation-of-gdal-on-jupyter-notebook-p5d</guid>
      <description>&lt;p&gt;Installation of &lt;code&gt;GDAL&lt;/code&gt; in windows machine is always a challenging task. But anaconda environment on python makes it easier to install through &lt;code&gt;conda&lt;/code&gt; distribution. In this blog, I will write about the installation of &lt;code&gt;GDAL&lt;/code&gt; on jupyter notebook.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-conda-environment"&gt;
  &lt;/a&gt;
  Step 1: Create conda environment
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;conda create &lt;span class="nt"&gt;--name&lt;/span&gt; venv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After creating the virtual environment, by default it will install some of the packages. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-installation-of-gdal"&gt;
  &lt;/a&gt;
  Step 2: Installation of gdal
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;conda &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; conda-forge gdal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-installation-of-ipykernel"&gt;
  &lt;/a&gt;
  Step 3: Installation of ipykernel
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;conda &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; anaconda ipykernel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-add-ipykernel-and-run-jupyternotebook"&gt;
  &lt;/a&gt;
  Step 4: Add ipykernel and run jupyternotebook
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python &lt;span class="nt"&gt;-m&lt;/span&gt; ipykernel &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--user&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;venv
jupyter notebook
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations! You successfully installed the GDAL on jupyter notebook.&lt;/p&gt;

&lt;p&gt;If you like this blog, please subscribe to my youtube channel: &lt;a href="https://www.youtube.com/c/iamtekson"&gt;https://www.youtube.com/c/iamtekson&lt;/a&gt;&lt;/p&gt;

</description>
      <category>jupyter</category>
      <category>gdal</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Convert Next.js app to PWA</title>
      <author>Jatin Sharma</author>
      <pubDate>Tue, 19 Oct 2021 07:18:17 +0000</pubDate>
      <link>https://dev.to/j471n/convert-nextjs-app-to-pwa-3fd</link>
      <guid>https://dev.to/j471n/convert-nextjs-app-to-pwa-3fd</guid>
      <description>&lt;p&gt;To make Next.js app into PWA, we need the given things -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;next-pwa&lt;/code&gt; package&lt;/li&gt;
&lt;li&gt;Service Worker&lt;/li&gt;
&lt;li&gt;Manifest &amp;amp; Icons&lt;/li&gt;
&lt;li&gt;Maskable Icon&lt;/li&gt;
&lt;li&gt;Meta Tags &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-raw-nextpwa-endraw-package"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;next-pwa&lt;/code&gt; package
&lt;/h3&gt;

&lt;p&gt;To convert your nextjs app into PWA you need to install this package via &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;&lt;br&gt;
to install this run -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i next-pwa &lt;span class="c"&gt;# npm&lt;/span&gt;
yarn add next-pwa &lt;span class="c"&gt;# yarn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installation go to your next &lt;code&gt;next.config.js&lt;/code&gt; as update it as follows -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// next.confg.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;withPWA&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next-pwa&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withPWA&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
 &lt;span class="c1"&gt;//...before&lt;/span&gt;
  &lt;span class="na"&gt;pwa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;skipWaiting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;//...after&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-service-worker"&gt;
  &lt;/a&gt;
  2. Service Worker
&lt;/h3&gt;

&lt;p&gt;We don't need to add external service worker the &lt;code&gt;next-pwa&lt;/code&gt; will take of that and it will auto generate the &lt;code&gt;sw.js&lt;/code&gt; for us so we don't need to do anything in that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── public
|  ├── sw.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-manifest-and-icons"&gt;
  &lt;/a&gt;
  3. Manifest and Icons
&lt;/h3&gt;

&lt;p&gt;To gernerate Icon and Manifest Go to &lt;a href="https://www.simicart.com/manifest-generator.html/"&gt;PWA Manifest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fW_oppKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ILwfs0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fW_oppKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ILwfs0f.png" alt="manifes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fill all the details and attach the &lt;code&gt;icon&lt;/code&gt; in 512x512 it will generate the icons and manifest for you and you can download the zip file.&lt;/p&gt;

&lt;p&gt;Go to your public directory and create a folder &lt;code&gt;icons&lt;/code&gt; and put all the icons in that folder like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── public
|  ├── icons
|  |  ├── icons.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after that create a &lt;code&gt;manifest.json&lt;/code&gt; in you &lt;code&gt;public/&lt;/code&gt; which should be look like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;manifest.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"theme_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"background_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#fff"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"display"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"standalone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pwa"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"short_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pwa"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pwa"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"icons"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"icons/icon-192x192.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"192x192"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"icons/icon-256x256.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"256x256"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"icons/icon-384x384.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"384x384"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"icons/icon-512x512.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"512x512"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that we need the &lt;code&gt;favicon&lt;/code&gt; to get that go to &lt;a href="https://favicon.io/favicon-converter/"&gt;Favicon Generator&lt;/a&gt; and upload your main icon and it will generate the rest of icon for you and download the zip after that from that we need only need two icon which is &lt;code&gt;favicon.ico&lt;/code&gt; and &lt;code&gt;apple-touch-icon&lt;/code&gt; put them into your &lt;code&gt;public/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the path -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── public
|  ├── apple-touch-icon.png
|  ├── favicon.ico
|  ├── icons
|  |  ├── icon-192x192.png
|  |  ├── icon-256x256.png
|  |  ├── icon-384x384.png
|  |  ├── icon-512x512.png
|  |  └── maskable.png
|  ├── manifest.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-maskable-icon"&gt;
  &lt;/a&gt;
  4. Maskable Icon
&lt;/h3&gt;

&lt;p&gt;To make the maskabel icon we need to visit &lt;a href="https://maskable.app/editor"&gt;Maskable Editor&lt;/a&gt; and upload your icon and edit it &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WhaEy50Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WBk9a7y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WhaEy50Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WBk9a7y.png" alt="masakable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;after editing export the icon but be care full with the ratio&lt;br&gt;
always choose the square ration and remember the ratio because we will need it in the &lt;code&gt;manifest&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T96U8ZMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/iAIctjQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T96U8ZMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/iAIctjQ.png" alt="sizes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After downloading the &lt;code&gt;icon&lt;/code&gt; put it into the &lt;code&gt;public/icons/&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── public
|  ├── icons
|  |  └── maskable.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and add that to the &lt;code&gt;manifest.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;manifest.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"icons"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"maskable.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"48x48"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;      
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/x-icon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"purpose"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"maskable"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="err"&gt;//...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you need to specify the size of the maskable image if the image size is &lt;code&gt;512x512&lt;/code&gt; then in the &lt;code&gt;json&lt;/code&gt; it should be &lt;code&gt;"sizes": "512x512"&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-meta-tags"&gt;
  &lt;/a&gt;
  5. Meta Tags
&lt;/h3&gt;

&lt;p&gt;Now to get all this work we need some meta tags put them wher is the &lt;code&gt;Head&lt;/code&gt; of your application, which are given below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;equiv&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description of your project"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"theme-color"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#000"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Title of the project&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"manifest"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/manifest.json"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"shortcut icon"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.ico"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"apple-touch-icon"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/apple-icon.png"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After all that Go to the Developer Console and Generate Resport for PWA in Lighthouse you will see the PWA and installable badge.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fVMY1INK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Txni6L6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fVMY1INK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Txni6L6.png" alt="PWA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You need to push your website with &lt;code&gt;https&lt;/code&gt; you can use &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt; or &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; &lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>pwa</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript. Memory. Architecture and Lifecycle.</title>
      <author>Valerii Udodov</author>
      <pubDate>Tue, 19 Oct 2021 07:13:38 +0000</pubDate>
      <link>https://dev.to/vudodov/javascript-memory-architecture-and-lifecycle-ae9</link>
      <guid>https://dev.to/vudodov/javascript-memory-architecture-and-lifecycle-ae9</guid>
      <description>&lt;p&gt;I'll start this article with a quote that changed the way I think of memory. The way I perceive memory lifecycle in major modern languages (those that have automatic memory release aka garbage collection).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Garbage collection is simulating a computer with an infinite amount of memory.&lt;br&gt;
-- &lt;a href="https://twitter.com/ChenCravat"&gt;Raymond Chen&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is exactly how we think of memory in JavaScript. We don't...&lt;/p&gt;

&lt;p&gt;Indeed, since I stopped writing C++ code I forgot about memory management. And I couldn't be bothered. Why would I? I mean it just works. Here's a variable, here's another one, no worries at all... Nowadays memory leak is rarely an issue. Most of the time you need to put an effort to create a one...&lt;/p&gt;

&lt;p&gt;But it wouldn't be JavaScript if there were no interesting quirks and features hidden behind this area...&lt;/p&gt;

&lt;p&gt;Further, we'll explore JavaScript memory architecture, main concepts and organization. And memory lifecycle, from allocation to release.&lt;br&gt;
Also, we'll look through some common memory leaks and how to avoid them.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#memory"&gt;
  &lt;/a&gt;
  Memory
&lt;/h2&gt;

&lt;p&gt;In programming everything requires space. Number, string, object, function. Even in the abstract Computer Science algorithmic department, there's a measurement for a space complexity.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#memory-is-different"&gt;
  &lt;/a&gt;
  Memory is different
&lt;/h3&gt;

&lt;p&gt;In JavaScript (similarly to many other languages) there are two main types of memory &lt;strong&gt;Stack&lt;/strong&gt; and &lt;strong&gt;Heap&lt;/strong&gt;. Both are managed by the &lt;a href="https://valerii-udodov.com/posts/run-javascript-run/#the-engine"&gt;JavaScript Engine&lt;/a&gt;, both are for storing runtime data.&lt;br&gt;
The difference lays in speed and size. Heap is bigger and slower, Stack is smaller and faster.&lt;/p&gt;

&lt;p&gt;How does the engine know which one to use? The rule of thumbs is: &lt;em&gt;if the engine is not sure about the size it uses Heap. If the engine can calculate the size beforehand, it uses Stack&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;All the primitives like &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt;, &lt;code&gt;BigInt&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; always go to the Stack. Also, references are stored there, we'll talk about references in a minute.&lt;br&gt;
What's left will end up in the Heap. This includes arbitrary objects and functions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--npcrR5tP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wjza3ht1gplz7yko7l5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--npcrR5tP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wjza3ht1gplz7yko7l5.jpg" alt="two jars"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;💡 &lt;em&gt;The data that goes in the Stack is usually called static because it has a static size that won't change, hence it is allocated at the compile-time.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;The data that goes in the Heap is usually called dynamic because it has unpredictable size (and potentially can change throughout the program execution) and is allocated dynamically at the runtime.&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;ℹ️ &lt;em&gt;Have you heard of the term &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"&gt;Hoisting&lt;/a&gt;?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Memory allocation in the Stack (aka static memory allocation) happening right before the code (next lexical scope) execution. References are stored in the Stack, thus they are allocated before the code is executed. Hence if we declare the variable it will be available even before the actual declaration in the code. Although value will be &lt;code&gt;undefined&lt;/code&gt; because it doesn't have value to point to yet...&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yolo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;yolo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Variables declared with &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt; are hoisted, although &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; won't return &lt;code&gt;undefined&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;The referencing concept is a major pillar of the JavaScript memory organization. It indirectly impacts how most of the key operations (such as assignment and equation) work.&lt;br&gt;
However often it is poorly understood and thus results in occasional surprises and confusions.&lt;/p&gt;

&lt;p&gt;Imagine a big bookshelf with multiple compartments. Each compartment has a label with a unique number on it. Every time you place something in the compartment you take a piece of paper and write down the number of the compartment and a short description of what is stored there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bKjccVQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsftlris7gute9h3d3y5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bKjccVQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsftlris7gute9h3d3y5.jpg" alt="bookshelf"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the gist of how references work. The short description is a variable name, the shelf number is a memory address. The address is stored in the variable, which is stored in the Stack. And the actual object on the shelf is an object stored in the Heap, referenced by the variable...&lt;/p&gt;

&lt;p&gt;Every time we use the assign (=) operator we are &lt;strong&gt;not&lt;/strong&gt; assigning the value... We are creating a pointer to the memory where the value is stored. Your variable storing the address, that pointing to the memory where the actual value is stored.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Some personal opinion here...🤪&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I think the language we use matters. Therefore I think the word "assign" and operator &lt;code&gt;=&lt;/code&gt; is &lt;del&gt;evil&lt;/del&gt; misleading and creates cognitive confusion and unnecessary simplification. I think a huge amount of bugs came from such confusion.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'd personally prefer to be more explicit about what is happening and suggest using a term like "pointing" or "referencing" instead of "assigning" and operator like &lt;code&gt;-&amp;gt;&lt;/code&gt; instead of &lt;code&gt;=&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But we have what we have 🤷&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that we have an idea of memory organization, let's reinforce it with some examples. We will start with primitive values and gradually move toward objects...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O8OUolNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dc7ixdskpuihrg07if1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O8OUolNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dc7ixdskpuihrg07if1.jpg" alt="42"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we figured before we are not setting value we are pointing to it... Pretty straightforward so far, let's make it a bit more complicated...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;true_answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 43&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;true_answer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ENExYqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgc206iyc1fjecvbmmos.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ENExYqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgc206iyc1fjecvbmmos.gif" alt="42 43"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same principle here. First both &lt;code&gt;answer&lt;/code&gt; and &lt;code&gt;trueAnswer&lt;/code&gt; point to the same address where value &lt;code&gt;42&lt;/code&gt; is stored. Once we do &lt;code&gt;answer = 43&lt;/code&gt; we change not the value, but memory where we pointing...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Primitives are immutable. It kinda becomes obvious and almost redundant to mention if we talk it through. If we try to change &lt;code&gt;42&lt;/code&gt; (e.g. add &lt;code&gt;1&lt;/code&gt; to it), we will simply get another number, which is not &lt;code&gt;42&lt;/code&gt;...we won't change &lt;code&gt;42&lt;/code&gt; (&lt;code&gt;42&lt;/code&gt; will still exist)... Hence it is immutable.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Nor we can extend it. E.g. &lt;code&gt;42.value = 22&lt;/code&gt; won't work, although it will if &lt;code&gt;42&lt;/code&gt; would be an object...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hope it all made sense lol 😅&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's do another example with primitives... &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; are primitives. What does that mean? They act like all primitives...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;null1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;null2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;null1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;null2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;undefined1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;undefined2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;undefined1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;undefined2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NSx44eT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bgpct13q5s4p4djcyd6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NSx44eT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bgpct13q5s4p4djcyd6.gif" alt="null and undefined"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we see why both values are strictly equal, pointing to the same value.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Funny fact&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;It is not true, &lt;code&gt;null&lt;/code&gt; is not an object. It is &lt;a href="https://2ality.com/2013/10/typeof-null.html?ck_subscriber_id=727966771"&gt;a bug&lt;/a&gt; that can't and won't be fixed...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's do the last one on primitives...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3u-lqXm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kilut1zuzfb6kbn2gg1v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3u-lqXm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kilut1zuzfb6kbn2gg1v.jpg" alt="boolean"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everything looks very familiar.&lt;/p&gt;

&lt;p&gt;Now let's try something new. Objects. Objects are different, they represent a more complex tree-structure 🌳. And unlike primitives, objects are mutable. This property produces some interesting effects.&lt;br&gt;
This is where the &lt;code&gt;=&lt;/code&gt; operator will reveal its full evilness 😈.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;catzilla&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Catzilla&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bengal Cat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;peanut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;catzilla&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;peanut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peanut&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;catzilla&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { name: "Peanut", breed: "Bengal Cat" }&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;peanut&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { name: "Peanut", breed: "Bengal Cat" }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GiXi61DH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1c8k9es38zkncf0yn20.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GiXi61DH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1c8k9es38zkncf0yn20.gif" alt="catzilla"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Probably not what was intended...&lt;br&gt;
Remember that the &lt;code&gt;=&lt;/code&gt; actually points to the data. We are just routing pointers here.&lt;/p&gt;

&lt;p&gt;Luckily we can fix it easily...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;catzilla&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Catzilla&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bengal Cat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;peanut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;catzilla&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;peanut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peanut&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;catzilla&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { name: "Catzilla", breed: "Bengal Cat" }&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;peanut&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { name: "Peanut", breed: "Bengal Cat" }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With a help of &lt;code&gt;...&lt;/code&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"&gt;spread operator&lt;/a&gt;) we managed to clone whatever &lt;code&gt;catzilla&lt;/code&gt; was pointing to in the new address and made &lt;code&gt;peanut&lt;/code&gt; point to it. This is not the original intention, how this operator should be used. But (as it usually happens with JavaScript) this side-effect was warmly accepted by the JavaScript community as a way to perform shallow cloning.&lt;/p&gt;

&lt;p&gt;Things start to get really messy with more complicated objects...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;breed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bengal Cat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;United States&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;spotted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;brown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;catzilla&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Catzilla&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;breed&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;peanut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;catzilla&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;peanut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Peanut&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;peanut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;marble&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;catzilla&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/*
  {
    name: "Catzilla",
    breed: {
      name: "Bengal Cat",
      origin: "United States,
      color: {
        pattern: "spotted",
        name: "marble"
      }
    }
  }
*/&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;peanut&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/*
  {
    name: "Peanut",
    breed: {
      name: "Bengal Cat",
      origin: "United States,
      color: {
        pattern: "spotted",
        name: "marble"
      }
    }
  }
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It happened again... Both cats have the same color, although it wasn't the intention...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xo3n3HBZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sc125nmsris3oxzwe6a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xo3n3HBZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sc125nmsris3oxzwe6a.gif" alt="catzilla again"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are performing the so-called shallow clone only top layer (first level of the tree), to make it work properly we need to perform so-called deep cloning. The easiest way would be doing something like...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;peanut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;catzilla&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ugly, but does the job. It forces the engine to allocate a new chunk of memory and fill it with object data.&lt;br&gt;
Unfortunately, JavaScript does not provide a good cloning mechanism out of the box. Hence this is the approach to clone the object without employing extra tools.&lt;br&gt;
If you are after a more elegant and efficient solution, I'd recommend using something like &lt;a href="https://underscorejs.org/"&gt;underscore.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alright, here's a curly one ⚾... Can you guess why this happening?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({}&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Surprised?&lt;br&gt;
Let's try to re-write this example a bit...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Does it make more sense?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To understand it completely we need to understand how the equals &lt;code&gt;==&lt;/code&gt; and the strictly equals &lt;code&gt;===&lt;/code&gt; operators work, unfortunately, it is not very trivial. However, to prevent this article from bloating, let's just say that comparison happening by actual value in the variable. As we know now it is an address of the object, rather than value. Because we are pointing to two different objects, located by two different addresses. Values are not equal...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9PCYaCO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wmat4zyz993n3k4lart.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9PCYaCO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wmat4zyz993n3k4lart.jpg" alt="two objects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#garbage-collection"&gt;
  &lt;/a&gt;
  Garbage Collection
&lt;/h2&gt;

&lt;p&gt;The concept of reference (which we just discussed) is what the process of memory releasing/cleaning (aka garbage collection) is based on. Using references garbage collector can determine what is "garbage" and requires a collection and what is not yet.&lt;/p&gt;

&lt;p&gt;There are two main algorithms used for that matter.&lt;br&gt;
The "new" one: its variation is used in all modern browsers&lt;br&gt;
And "old" one: nowadays its variation is rarely used anywhere, because of its built-in flaws (we'll talk about them further)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#new-mark-and-sweep"&gt;
  &lt;/a&gt;
  New: Mark And Sweep
&lt;/h3&gt;

&lt;p&gt;Principle lays in finding &lt;strong&gt;unreachable&lt;/strong&gt; objects...&lt;br&gt;
The unreachable object is any object that can't be reached via traversal through references from the so-called &lt;em&gt;root&lt;/em&gt;. In browser-world &lt;em&gt;root&lt;/em&gt; is represented by the &lt;code&gt;window&lt;/code&gt; object (aka Global Scope).&lt;/p&gt;

&lt;p&gt;📝 &lt;em&gt;Just a side-note, that all global variables in JavaScript are not hanging in the air, they are rather attached with references to the &lt;code&gt;window&lt;/code&gt; object...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Every now and then, garbage collector starts. And follows these phases&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start phase: Once started, it assumes that all objects are unreachable.&lt;/li&gt;
&lt;li&gt;Mark phase: Then the actual tree traversal from the &lt;em&gt;root&lt;/em&gt; (through references) starts. Every object found on the way is marked as reachable.&lt;/li&gt;
&lt;li&gt;Sweep phase: Once traversal is finished all unreachable objects are eliminated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4JlheJHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q039crkb9qkgu4i14t9h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4JlheJHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q039crkb9qkgu4i14t9h.gif" alt="garbage collection diagram"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#optimization"&gt;
  &lt;/a&gt;
  Optimization
&lt;/h4&gt;

&lt;p&gt;Mark and Sweep algorithm belong to the &lt;a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection"&gt;Tracing Garbage Collection&lt;/a&gt; family. There are few family-dedicated optimizations (like tri-color marking). These are low-hanging fruits 🍐.&lt;/p&gt;

&lt;p&gt;Nevertheless, most JavaScript Engines will perform some additional optimizations that are usually borrowed from other garbage-collected languages.&lt;/p&gt;

&lt;p&gt;One such classic optimization is the so-called garbage collection based on generations.&lt;br&gt;
The principle is based on one observation. Old objects are less likely to be garbage-collected. They proved it by surviving multiple garbage collections. Thus statistically we can assume these objects will be kept in use.&lt;br&gt;
With this knowledge, we can improve the garbage collection time significantly by simply rarely bothering old objects 👴.&lt;/p&gt;

&lt;p&gt;Here is how it works. Each object is assigned to a generation. All objects start at the zero generation. If an object survives garbage collection it moves up, to the next generation. The garbage collection is happening on the young generations more frequently than on old ones.&lt;br&gt;
The more garbage collections object survive the older generation it is assigned to and the less likely it will be collected.&lt;br&gt;
Ultimately this approach reduces traversals through statistically "low-chance-collection" candidates. And focus on those who statistically have higher chances to be collected...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#old-reference-counting"&gt;
  &lt;/a&gt;
  Old: Reference Counting
&lt;/h3&gt;

&lt;p&gt;This algorithm was last used in IE 7 and deprecated since 2012. So this section serves purely historical purposes.&lt;/p&gt;

&lt;p&gt;Unlike the Mark and Sweep, this one will try to find unreferenced objects instead of unreachable...&lt;br&gt;
This algorithm does not try to determine whether the object is still needed (in the previous example reachable from the &lt;em&gt;root&lt;/em&gt;). Instead, it only checks if anything references the object.&lt;/p&gt;

&lt;p&gt;This might not look like a big difference, but this approach is less restrictive. And due to this fact comes with a major flaw.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#major-flaw"&gt;
  &lt;/a&gt;
  Major flaw
&lt;/h4&gt;

&lt;p&gt;The major flaw is circular references. Two objects might not be reachable, but as long as they reference each other they won't be collected.&lt;/p&gt;

&lt;p&gt;Let's look at the following example...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;catdog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

  &lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;catdog&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code (if used with the current algorithm) creates a memory leak. Because memory allocated for variables &lt;code&gt;cat&lt;/code&gt; and &lt;code&gt;dog&lt;/code&gt; will never be collected, even though it never used in outer scope...🐱🐶&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memory-leaks"&gt;
  &lt;/a&gt;
  Memory Leaks
&lt;/h2&gt;

&lt;p&gt;🤔 &lt;em&gt;Why do memory leaks still exist?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because the process of determining whether a certain piece of memory is used or not is a so-called &lt;a href="https://en.wikipedia.org/wiki/List_of_undecidable_problems"&gt;undecidable problem&lt;/a&gt;. Sounds scary, but it means that there's no good way to program a machine to determine if memory can be safely released. Thus only a human can make a real complete judgment about it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While we were exploring the old garbage collection algorithm we saw an example of a memory leak. It appears that a memory leak is just an accidentally forgotten reference to an object. An object that never going to be garbage-collected. And will keep uselessly occupy memory as long as the application is running. There are quite a few ways to create a memory leak.&lt;br&gt;
Since we know how the memory is allocated and garbage-collected we can look through few most common examples&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#global-variables"&gt;
  &lt;/a&gt;
  Global variables
&lt;/h3&gt;

&lt;p&gt;Nowadays usage of global variables is a mauvais ton (bad practice). If happens, it is usually accidental. This problem can be easily caught by the linter 👮. Or prevented from happening by adding &lt;code&gt;use strict&lt;/code&gt; at the beginning of the file.&lt;/p&gt;

&lt;p&gt;The leak happens like this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We create a global variable (it is automatically referenced by &lt;code&gt;window&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;And it forever stays there...&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#the-fix"&gt;
  &lt;/a&gt;
  The Fix
&lt;/h4&gt;

&lt;p&gt;Don't use global variables.&lt;br&gt;
It has been recognized as a bad practice for a reason. So the best way to avoid this problem is simply to avoid global variables.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#observers-or-forgotten-interval-timers"&gt;
  &lt;/a&gt;
  Observers or Forgotten interval timers
&lt;/h3&gt;

&lt;p&gt;This one is harder to trace, we forget to release timers once we don't need them.&lt;/p&gt;

&lt;p&gt;This leak happens like this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We create an interval timer with a callback like &lt;code&gt;setInterval(() =&amp;gt; {}, 1000);&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We make sure we referencing something from the outer scope&lt;/li&gt;
&lt;li&gt;The thing we reference will never be garbage-collected
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memoryLeak&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;massiveData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I am your memory leak!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;memoryLeak&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;memoryLeak&lt;/code&gt; object will never be released even though we might not need the whole object anymore.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#the-fix"&gt;
  &lt;/a&gt;
  The Fix
&lt;/h4&gt;

&lt;p&gt;The best way to prevent this from happening is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timerId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;memoryLeak&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// do stuff&lt;/span&gt;

&lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timerId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a-camouflaged-version-of-the-global-variable-or-detached-dom-elements"&gt;
  &lt;/a&gt;
  A Camouflaged version of the global variable or Detached DOM elements
&lt;/h3&gt;

&lt;p&gt;Another classical one. If you are working with something like React or Angular, there's no reason to worry. Nevertheless, it is an interesting way to lose some memory 🧠...&lt;br&gt;
It is a camouflage version of the global variable memory leak. And it happens even nowadays pretty often, usually in-between the &lt;code&gt;script&lt;/code&gt; tags.&lt;/p&gt;

&lt;p&gt;This leak happens like this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We reference arbitrary DOM elements in the code (e.g. by calling &lt;code&gt;document.getElementById('i-will-leak')&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Even though we delete the element from the DOM it still hangs in the lexical scope or global scope (e.g. by calling &lt;code&gt;document.body.removeChild(document.getElementById('i-will-leak'))&lt;/code&gt;)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;memoryLeak&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i-will-leak&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;memoryLeak&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;memoryLeak&lt;/code&gt; will never be garbage-collected, the &lt;code&gt;removeChild&lt;/code&gt; here is very misleading, it seems like it will remove the element from everywhere, but it does it only for the DOM tree.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-fix"&gt;
  &lt;/a&gt;
  The Fix
&lt;/h3&gt;

&lt;p&gt;The fix is the same as for the Global Variables leak. Don't use global variables 😀 Instead, we can use child lexical scope, e.g. function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;memoryLeak&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i-will-leak&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;memoryLeak&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}();&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is self-executable function will create a local lexical scope and after it will finish execution, all local variables will be garbage-collected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you've read my &lt;a href="https://valerii-udodov.com/tags/javascript-runtime/"&gt;previous JavaScript-Runtime-related articles&lt;/a&gt;, you know that JavaScript Runtime differs between browsers. Therefore the way memory is managed from browser to browser might be different. Although it would be unfair not to mention that in the past decade more and more commonalities appearing. And reduces a headache for us...&lt;br&gt;
Moreover, given the unstoppably growing JavaScript infrastructure, including various linters, module bundlers, and well-matured frameworks for DOM interactions, problems with memory leaks are reduced to a bare minimum.&lt;/p&gt;

&lt;p&gt;But...Garbage collection is still listed as an &lt;a href="https://en.wikipedia.org/wiki/List_of_undecidable_problems"&gt;undecidable problem&lt;/a&gt;, hence there's always a way to make a boo-boo. Understanding the way JavaScript organizes the memory and how references are managed might save you hours and hours of debugging.&lt;/p&gt;

&lt;p&gt;Anyhow, hope you enjoyed the read and found something new for yourself 😀&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>memory</category>
      <category>garbagecollector</category>
    </item>
    <item>
      <title>How we created a web-based typing experiment</title>
      <author>johannchopin</author>
      <pubDate>Tue, 19 Oct 2021 07:11:36 +0000</pubDate>
      <link>https://dev.to/johannchopin/how-we-created-a-web-based-typing-experiment-52e4</link>
      <guid>https://dev.to/johannchopin/how-we-created-a-web-based-typing-experiment-52e4</guid>
      <description>&lt;p&gt;We had little time, an experience to build and now to spread.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-goal-of-the-experiment"&gt;
  &lt;/a&gt;
  🎯 The goal of the experiment
&lt;/h2&gt;

&lt;p&gt;The objective of this study is to determine the optimal way to display and to type alphanumeric sequences (such as identifiers, order numbers, etc.). According to research in cognitive psychology, it is easier to read and copy elements that are grouped in chunks of 2 or 3, rather than placed one after the other without grouping. Can we prove it ?&lt;br&gt;
So we made a tiny app everyone can try: &lt;a href="https://ux-typing-experiment-five.vercel.app"&gt;https://ux-typing-experiment-five.vercel.app&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8F%9B-how-we-created-it-"&gt;
  &lt;/a&gt;
  🏛 How we created it ?
&lt;/h2&gt;

&lt;p&gt;We had 3 well-known challenges to build this project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create a web interface&lt;/li&gt;
&lt;li&gt;store the data of the experiment&lt;/li&gt;
&lt;li&gt;make it available&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;and a little time dedicated to it :'(&lt;/p&gt;

&lt;p&gt;There is a lot of web framework around here (Vue, React, ...Angular) but we wanted to try something different and new. As Svelte becomes well-tooled, we wanted to give it a try. Its minimalist architecture, while being efficient, convinced us. The learning curve is fast. Perfect ! Add a slider and here we go to design each pages.&lt;/p&gt;

&lt;p&gt;Hosting the data must be fast and easy. The free tier of Firestore fits our need for this project. Drawing and setup a relational database was overkill for it. Its document-based approach to store data is efficient for our need. One user: one document.&lt;/p&gt;

&lt;p&gt;Then we deploy the whole project with Vercel. It is easy, fast and already automated. Moreover Vercel deploy the app for every Pull Request, allowing to make a quick test on the user interface. Thanks for it Vercel.&lt;/p&gt;

&lt;p&gt;That's a summary of it. Here some highlights on this project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-obstacles-that-we-met-and-how-we-solved-them"&gt;
  &lt;/a&gt;
  🚧 Some obstacles that we met and how we solved them
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;svelte-i18n&lt;/code&gt; is not reactive. So we stored the i18n keys instead of their value in the objects that we pass around the components. The translated string is handled directly in the view with &lt;a href="https://svelte.dev/docs#Text_expressions"&gt;text expression&lt;/a&gt;. Okay ¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/p&gt;

&lt;p&gt;Mixing reactivity inside a callback is no good idea. We don't know why but a reactive value inside a callback was not updated on time on keypress. Moving it into a reactive statement solved the problem (see: &lt;a href="https://github.com/Lyokolux/ux-typing-experiment/commit/adcedf5ad8061de89bb641fd0d8a867e1214afa4"&gt;#adcedf5&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Focusing the first input on the next slide is a must-have for such an experience. It was not so trivial as we thought. We ended up with a small-efficient function, leveraging the Javascript power of DOM manipulation 😅💪 (see: &lt;a href="https://github.com/Lyokolux/ux-typing-experiment/blob/2d6e441572100af3693d4af59cf73311f2c44f70/src/pages/Experiences.svelte#L44"&gt;Experiences.svelte#44&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#each-slide-or-page-runs-smoothly-to-the-next-one"&gt;
  &lt;/a&gt;
  💫 Each slide (or page) runs smoothly to the next one
&lt;/h3&gt;

&lt;p&gt;This is a key point to a good experience: it has to be smooth. Any superfluous actions must be avoided and the necessary ones must fit in the flow.&lt;/p&gt;

&lt;p&gt;When a user fills a form, a smooth button is displayed to validate the input. So they knows everything is ok and they can go on.&lt;/p&gt;

&lt;p&gt;After finishing to type, it transitions to the next one. No button is needed as the input does not have to be checked. Fill the appreciation form after the typing session and go on.&lt;/p&gt;

&lt;p&gt;We want to scroll and go further. Thus every slide contains a small amount of information and are reviewed quickly.&lt;/p&gt;

&lt;p&gt;We hope these thoughts we had are making the experiment, well, smooth. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#give-it-a-try"&gt;
  &lt;/a&gt;
  Give it a try ❤️
&lt;/h2&gt;

&lt;p&gt;You can participate in this experience too with the following link: &lt;a href="https://ux-typing-experiment-five.vercel.app/"&gt;https://ux-typing-experiment-five.vercel.app/&lt;/a&gt;. You can quit at every moment or you can stay until the end. You choose what the best fit for you ;) &lt;br&gt;
If you find any issues, please feel free to submit an issue on the &lt;a href="https://github.com/Lyokolux/ux-typing-experiment/issues"&gt;Github repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can see some results too: &lt;a href="https://ux-typing-experiment-five.vercel.app/results"&gt;https://ux-typing-experiment-five.vercel.app/results&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is again a work in progress. We need first to gather more data, and improve the app.&lt;/p&gt;




&lt;p&gt;Original post by &lt;a href="https://dev.to/lyokolux"&gt;Lyokolux&lt;/a&gt; --&amp;gt; &lt;a href="https://dev.to/lyokolux/how-we-created-a-web-based-typing-experiment-1mdk"&gt;https://dev.to/lyokolux/how-we-created-a-web-based-typing-experiment-1mdk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>svelte</category>
      <category>webdev</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Variables Comparison JS✍</title>
      <author>Sudharshan S</author>
      <pubDate>Tue, 19 Oct 2021 07:10:29 +0000</pubDate>
      <link>https://dev.to/sudharshan24/variables-comparison-js-472</link>
      <guid>https://dev.to/sudharshan24/variables-comparison-js-472</guid>
      <description>&lt;p&gt;👉 var -&amp;gt; Var can be re-assigned, re-defined and has a function-scope. When we declared outside the function, it has a global scope and it attached itself to the window object.&lt;/p&gt;

&lt;p&gt;👉 let -&amp;gt; Let can be re-assigned. It’s scope is within a block of code.&lt;/p&gt;

&lt;p&gt;👉 const -&amp;gt; Const cannot be re-assigned or re-defined. It’s scope is within a block of code.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>variables</category>
    </item>
    <item>
      <title>Top 5 Best Online Code Editors</title>
      <author>CoderZ90</author>
      <pubDate>Tue, 19 Oct 2021 07:02:20 +0000</pubDate>
      <link>https://dev.to/official_fire/top-5-best-online-code-editors-1ei2</link>
      <guid>https://dev.to/official_fire/top-5-best-online-code-editors-1ei2</guid>
      <description>&lt;p&gt;Hello Guys 👋 In this blog post i will tell you the top 5 best online code editors (No Downloads!).&lt;/p&gt;

&lt;p&gt;Before we move further please subscribe to my youtube channel ( i post coding tutorials ) - &lt;a href="https://youtube.com/codingfire?sub_confirmation=1"&gt;https://youtube.com/codingfire?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-1-stackblitz"&gt;
  &lt;/a&gt;
  &lt;strong&gt;No 1. Stackblitz&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Stackblitz claims to be the fastest, most secure&lt;br&gt;
dev environment on the planet and in my opinion it is actually very fast.. Stackblitz is also very easy to use.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Website Link - &lt;a href="https://stackblitz.com/"&gt;https://stackblitz.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0r9-Y7WE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/teoDX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0r9-Y7WE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/teoDX.png" alt="StackBlitz Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-2-codesandbox"&gt;
  &lt;/a&gt;
  &lt;strong&gt;No 2. Codesandbox&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Codesandbox it is pretty famous and i guess many of you who know this website right ?. But for those who dont know let me tell you. it is an online editor for rapid web development. With CodeSandbox, you can prototype quickly, experiment easily, and share creations with a click. Use it to create static sites, full-stack web apps, or components on any device with a web browser.&lt;/p&gt;

&lt;p&gt;The best part of codesandbox is that codesandbox is not only available for pc but also for tab / android devices. Good thing right ? 😊&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Website Link - &lt;a href="https://codesandbox.io/"&gt;https://codesandbox.io/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PuR_Jvw2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codesandbox.io/static/video-e6a34ad1b9555966b2b8be018e27c2a2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PuR_Jvw2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codesandbox.io/static/video-e6a34ad1b9555966b2b8be018e27c2a2.png" alt="Codesandbox Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-3-replit"&gt;
  &lt;/a&gt;
  &lt;strong&gt;No 3. Replit&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Replit allows users to write code and build apps and websites using a browser. Not only apps and websites but you can also code python in the browser and more. The site also has various collaborative features, including capability for real-time, multi-user editing with a live chat feed. Coooolll...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Website Link - &lt;a href="https://replit.com/"&gt;https://replit.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5lOcFXbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://appedus.com/wp-content/uploads/2021/02/Repl.it-Funding-Round-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5lOcFXbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://appedus.com/wp-content/uploads/2021/02/Repl.it-Funding-Round-2.png" alt="Replit image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-4-codepen"&gt;
  &lt;/a&gt;
  &lt;strong&gt;No 4. Codepen&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Now codepen is not just an online code editor. in codepen you can also share your projects with others, discover other projects, follow each other, fork pens and more&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Website Link - &lt;a href="https://codepen.io"&gt;https://codepen.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jElyxoJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://martech.zone/wp-content/uploads/2021/03/codepen-html-css-javascript-testing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jElyxoJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://martech.zone/wp-content/uploads/2021/03/codepen-html-css-javascript-testing.png" alt="Codepen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-5-jsfiddle"&gt;
  &lt;/a&gt;
  &lt;strong&gt;No 5. Jsfiddle&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;JSFiddle is an online IDE service and online community for testing and showcasing user-created and collaborational HTML, CSS and JavaScript code snippets, known as 'fiddles'. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Website Link - &lt;a href="https://jsfiddle.net/"&gt;https://jsfiddle.net/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gn4m2IWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---cRJS076--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_900%2Cq_auto%2Cw_1600/https://thepracticaldev.s3.amazonaws.com/i/5zzr3h0foe04onjolqx7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gn4m2IWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---cRJS076--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_900%2Cq_auto%2Cw_1600/https://thepracticaldev.s3.amazonaws.com/i/5zzr3h0foe04onjolqx7.png" alt="jsfiddle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So i think all done. Thankyou for giving your time and reading this blog i hope you liked it&lt;/p&gt;

&lt;p&gt;Also dont forget to subscribe to my youtube channel 😊 - &lt;a href="https://youtube.com/codingfire?sub_confirmation=1"&gt;https://youtube.com/codingfire?sub_confirmation=1&lt;/a&gt;  🙏&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
