<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Important notice for websites and app developers</title>
      <author>aeksaayush</author>
      <pubDate>Wed, 14 Apr 2021 11:53:27 +0000</pubDate>
      <link>https://dev.to/aeksaayush/important-notice-for-websites-and-app-developers-5f5a</link>
      <guid>https://dev.to/aeksaayush/important-notice-for-websites-and-app-developers-5f5a</guid>
      <description>&lt;p&gt;If anyone wants paid Google playstore 5 star reviews please message me only 5 rs per review I can also do digital marketing for your app or website&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Logs - Why, good practices, and recommendations</title>
      <author>Thiago Nascimento Figueiredo</author>
      <pubDate>Wed, 14 Apr 2021 11:05:19 +0000</pubDate>
      <link>https://dev.to/tnfigueiredo/logs-why-good-practices-and-recommendations-ojd</link>
      <guid>https://dev.to/tnfigueiredo/logs-why-good-practices-and-recommendations-ojd</guid>
      <description>&lt;h1&gt;
  &lt;a href="#why-logging-is-important"&gt;
  &lt;/a&gt;
  Why logging is important?
&lt;/h1&gt;

&lt;p&gt; &lt;br&gt;
Logging information is important to understand the behavior of the application and to understand problems in several different scenarios. Into the application lifetime, it will eventually crash, a server will go down, users may complain about a bug that “randomly” appears, or the client could realize that some data is missing, and there is no clue when or why this data got lost. Those are some examples of scenarios where there is a need to understand the application behavior through the development application lifecycle, track problems during QA validations and incident scenarios, and other possible situations. That is why the application solution logs must be designed, implemented, and tested.&lt;/p&gt;

&lt;p&gt;Considering those issues related to the importance of logs it is necessary to define for the application what, how, and when to log and even how to extract meaningful data from logs. This brings the need to define a structure for log messages. The need to define a log structure is to extract the information needed (most of the time with the support of tools).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A_Ykblx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9pjx40st0dbh4kyr5i1j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A_Ykblx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9pjx40st0dbh4kyr5i1j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another issue that is worthy to mention is that log messages need to be sent at least in every layer of the architecture with meaningful and enough contextual information. Having at least one log entry per request/result in every layer of the application allows providing accurate context about what the user was doing when a specific error or situation happened.&lt;/p&gt;

&lt;p&gt;Once it is defined the structure of the log messages, the next step is to have clear what to log and how to log. The log messages for the application need to inform about errors (to use them for troubleshooting purposes), but also useful information about successful requests to have a clear idea of how users work with the application. In this subject, we get through the usage of log level messages related to the purpose of the information we want to inform.&lt;br&gt;
 &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#logging-levels"&gt;
  &lt;/a&gt;
  Logging levels
&lt;/h1&gt;

&lt;p&gt;The usage of a good logging strategy needs to take into consideration the proper usage of log levels for its messages. This strategy related to log level messages is essential to avoid “noise” when looking for information and track possible evidences to evaluate a problem or analyze the application behavior. The main cons about this are that when a problem comes up, you are likely to proper contextual information to be analyzed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JqS0XsE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2aydlw8ixqvc3tdt782g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JqS0XsE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2aydlw8ixqvc3tdt782g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There will be frameworks to help handle logging messages for the different programming languages and the definition among the log levels can slightly vary among the framework implementations. But they follow the same semantic purpose. The following example shows this for a few Java frameworks possible to be used.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lb02OIde--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhnbyb2wbdef3i2vk4ds.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lb02OIde--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhnbyb2wbdef3i2vk4ds.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The log level information has well-defined usage recommendations for each situation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sxq6g5mh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atd49gel95khv4dyt7kn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sxq6g5mh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atd49gel95khv4dyt7kn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#good-practice-recommendations"&gt;
  &lt;/a&gt;
  Good practice recommendations
&lt;/h1&gt;

&lt;p&gt;According to the presented reasons over the application logging practices, there are a few good practices and recommendations to be followed to provide log messages that are meaningful and useful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-good-practices"&gt;
  &lt;/a&gt;
  General good practices
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Set the current log level via external configuration: the modification of the current log level messages should always be an operational task done in runtime. This allows fast action to problem troubleshooting and situation analysis without stopping the application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Default log level information configuration by environments: For the production environment it is interesting to have the default log level as “Information”. This will allow that Fatal, Error, Warning, and Information log entries will be written. while Debug and Trace log entries will be suppressed. Environments that need more detailed information can have default log level set to debug or trace.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The proper log level is important to avoid noise: log application information with the proper log level avoids mistaken interpretation between data that represent problems and data that represents application behavior:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the Warning and Information Log Levels properly: Warning should be for logs that are not errors, but are not normal behavior. Information should be for application normal execution when something important is to be communicated.&lt;/li&gt;
&lt;li&gt;Log catastrophic failures using Critical/Fatal: when there is an unrecoverable error during the application start-up or execution log it using the Critical log level. Tools can use this log level for emitting alerts.&lt;/li&gt;
&lt;li&gt;Step through code using the Debug log level: When your application is misbehaving it is necessary to get enhanced visibility into what is going on. The good use of the Debug log level can get you more detailed about what is occurring.&lt;/li&gt;
&lt;li&gt;Inspect variables using the Trace log level: The use of trace log level to write the values of variables, parameters, and settings to the logs for inspection can help you when the debug log level isn’t enough. This mimics the behavior of inspecting the contents of variables with the debugger attached.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Never log personal identifying Information or secrets: It is important because of GDPR, CCPA, and other privacy laws and for security issues.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#events-log-good-practices"&gt;
  &lt;/a&gt;
  Events log good practices
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use clear key-value pairs: tolls extract fields from events when you search, creating structure out of unstructured data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create events that humans can read: complex encoding that would require lookups to make event information intelligible. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use timestamps for every event: The correct time is critical to understanding the proper sequence of events, for debugging, analytics, and deriving transactions. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use correlation IDs for tracking operations: Correlation ID (also known as a Transit ID) is a unique identifier value that is attached to requests and messages that allow reference to a particular transaction or event chain. They are helpful when debugging and tracking transactions through the system and follow them across machines, networks, and services.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid logging binary information: It is not good for reading what is happening through the log events and also does not work well when tools are indexing the information.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use data structured formats: They are readable by humans and machines and can be easily parsed by most programming languages right in your browser. This helps tools and log search when evaluating log events.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Identify the source (class, function, or filename): Useful to understand where the problem is.&lt;br&gt;
 &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#operational-good-practices"&gt;
  &lt;/a&gt;
  Operational good practices
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Log locally to files: If you log to a local file, it provides a local buffer and you aren't blocked if the network goes down.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use tools for streaming and monitoring logs: Tools can collect logging data and then send this information to the indexers. They will be able to work well among the large amount of information generated by the logging activity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use rotation and retention policies: Logs can take up a lot of space. Good rotation strategies can help to decide when to destroy or back up your logs (if needed). It is especially essential considering scenarios for cloud solutions where storage price is important.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collect events from all possible sources: The more data you capture, the more visibility you have. Some example of possible sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application logs;&lt;/li&gt;
&lt;li&gt;Database logs;&lt;/li&gt;
&lt;li&gt;Network logs;&lt;/li&gt;
&lt;li&gt;Configuration files;&lt;/li&gt;
&lt;li&gt;Performance data.
 &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#tools-for-dealing-with-log-information"&gt;
  &lt;/a&gt;
  Tools for dealing with log information
&lt;/h1&gt;

&lt;p&gt;Without tools for dealing with log information, the amount of data created by logging activity can be meaningless. Besides that, in a scenario where there are several instances of distributed applications and several services that those applications integrate, those tools are helpful to track information that comes from different sources. Each of those sources formats and stores logs in their own way, making it really difficult to find useful data.&lt;/p&gt;

&lt;p&gt;The logging tools that we have available do streaming over log messages and centralize its access, allowing log search and aggregation to turn all this generated data into useful information. There are several examples of logging tools nowadays, but here follow the example of the structure of two of them. The first image is from an example using splunk, and the following image is an example using the Elastic stack:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SQjJ46q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3u8z5zkaytnaoofrebx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SQjJ46q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3u8z5zkaytnaoofrebx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--awFiJmsQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6gy88j6a5f3syoonjwy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--awFiJmsQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6gy88j6a5f3syoonjwy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those tools get the log messages through collectors and store the information into repositories where the information is indexed. When the collectors get the information, they analyze the log structure to process its data before storage. Once the log messages are stored and indexed it is possible to search information, create charts and create alerts through the interface of those tools. Here follow a few examples of the mentioned log searching UI. The presented UIs are from the tools Splunk, Graylog, and Kibana.&lt;/p&gt;

&lt;p&gt;Splunk:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DiSv0HLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq4b9tkj9yhw0z542989.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DiSv0HLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq4b9tkj9yhw0z542989.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Graylog:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--koVyaZc9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbtpiap7m6jgmxrm6c5d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--koVyaZc9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbtpiap7m6jgmxrm6c5d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kibana:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tr3v0Ah5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/257dp7pj6ola826o0enk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tr3v0Ah5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/257dp7pj6ola826o0enk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As it is possible to see, those tools provide very interesting features related to logging activity. That brings a good reason to work with the messages following a well-defined structure, good practices, and recommendations. It makes the log information possible to be processed, tracked, and handled by the referred tools so they become useful.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;h5&gt;
  &lt;a href="#logging-best-practices"&gt;
  &lt;/a&gt;
  Logging Best Practices:
&lt;/h5&gt;

&lt;p&gt;Ray Saltrelli - &lt;a href="https://dev.to/raysaltrelli/logging-best-practices-obo"&gt;https://dev.to/raysaltrelli/logging-best-practices-obo&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#logging-best-practices-in-an-app-or-addon-for-splunk-enterprise"&gt;
  &lt;/a&gt;
  Logging best practices in an app or add-on for Splunk Enterprise:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://dev.splunk.com/enterprise/docs/developapps/addsupport/logging/loggingbestpractices/"&gt;https://dev.splunk.com/enterprise/docs/developapps/addsupport/logging/loggingbestpractices/&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#the-importance-of-logging-introducing-elastic-stack"&gt;
  &lt;/a&gt;
  The Importance of logging: introducing Elastic Stack
&lt;/h5&gt;

&lt;p&gt;Christian Claudio Bohm - &lt;a href="https://www.hexacta.com/importance-logging-introducing-elastic-stack/"&gt;https://www.hexacta.com/importance-logging-introducing-elastic-stack/&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#9-logging-best-practices-based-on-handson-experience"&gt;
  &lt;/a&gt;
  9 Logging Best Practices Based on Hands-on Experience
&lt;/h5&gt;

&lt;p&gt;Liron Tal - &lt;a href="https://www.loomsystems.com/blog/single-post/2017/01/26/9-logging-best-practices-based-on-hands-on-experience"&gt;https://www.loomsystems.com/blog/single-post/2017/01/26/9-logging-best-practices-based-on-hands-on-experience&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to host multiple Django Project under subdomains with uWSGI and NGINX on a single server?</title>
      <author>Manthankumar Satani </author>
      <pubDate>Wed, 14 Apr 2021 10:42:09 +0000</pubDate>
      <link>https://dev.to/itsmnthn/how-to-host-multiple-django-project-under-subdomains-with-uwsgi-and-nginx-on-a-single-server-2942</link>
      <guid>https://dev.to/itsmnthn/how-to-host-multiple-django-project-under-subdomains-with-uwsgi-and-nginx-on-a-single-server-2942</guid>
      <description>&lt;div class="ltag__stackexchange--container"&gt;
  &lt;div class="ltag__stackexchange--title-container"&gt;
    
      &lt;div class="ltag__stackexchange--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gn-iPj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt=""&gt;
            &lt;a href="https://stackoverflow.com/questions/67090144/how-to-host-multiple-django-project-under-sub-domains-with-uwsgi-and-nginx-on-si" rel="noopener noreferrer"&gt;
               How to host multiple Django Project under sub domains with uWSGI and NGINX on single server?
            &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__stackexchange--post-metadata"&gt;
          &lt;span&gt;Apr 14 '21&lt;/span&gt;
            &lt;span&gt;Comments: 1&lt;/span&gt;
            &lt;span&gt;Answers: 0&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/67090144/how-to-host-multiple-django-project-under-sub-domains-with-uwsgi-and-nginx-on-si" rel="noopener noreferrer"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9mJpuJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt=""&gt;
        &lt;div class="ltag__stackexchange--score-number"&gt;
          0
        &lt;/div&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wif5Zq3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt=""&gt;
      &lt;/a&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--body"&gt;
    
&lt;p&gt;I've been trying to deploy two Django projects on a single server using uWSGI and Unix socket Nginx, I've cross-checked the configuration it seems fine, but it behaves oddly. Let me give the project names &lt;strong&gt;A&lt;/strong&gt; for first and &lt;strong&gt;B&lt;/strong&gt; for second for better understanding and referencing.&lt;/p&gt;
&lt;p&gt;For both projects…&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--btn--container"&gt;
    
      &lt;a href="https://stackoverflow.com/questions/67090144/how-to-host-multiple-django-project-under-sub-domains-with-uwsgi-and-nginx-on-si" rel="noopener noreferrer"&gt;Open Full Question&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>nginx</category>
      <category>django</category>
      <category>ubuntu</category>
      <category>devops</category>
    </item>
    <item>
      <title>My New React Portfolio is out!</title>
      <author>Rithik Samanthula</author>
      <pubDate>Wed, 14 Apr 2021 10:40:56 +0000</pubDate>
      <link>https://dev.to/code2rithik/my-new-react-portfolio-is-out-37l7</link>
      <guid>https://dev.to/code2rithik/my-new-react-portfolio-is-out-37l7</guid>
      <description>&lt;p&gt;Hey Guys!&lt;/p&gt;

&lt;p&gt;I have redesigned my portfolio beautifully using, guess what?&lt;/p&gt;

&lt;p&gt;Our all-time friend, REACT.JS!&lt;/p&gt;

&lt;p&gt;For my &lt;a href="https://rithik.vercel.app"&gt;previous&lt;/a&gt; portfolio, I used Vanilla HTML, CSS, JS and jQuery.&lt;/p&gt;

&lt;p&gt;I will be explaining to you the process of how I made my portfolio website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rithikdeveloper.web.app/"&gt;Click Here&lt;/a&gt; to view my portfolio.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-steps"&gt;
  &lt;/a&gt;
  The steps:
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#my-vscode-screen"&gt;
  &lt;/a&gt;
  My VSCode Screen:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T3dZAOyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7ixbbb9ye2wd1yw5if2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T3dZAOyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7ixbbb9ye2wd1yw5if2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the image below, I organized all of my components in each folder along with it's own JS and CSS file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JNl-cwxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj1wr02a1lu1lfa9out6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JNl-cwxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj1wr02a1lu1lfa9out6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my portfolio.js file, I added my text and info in constants which I styled with react:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXvSSHp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/im4gka4f0ksgiulv1qdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXvSSHp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/im4gka4f0ksgiulv1qdg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, I was done with the portfolio and needed to host it online.&lt;/p&gt;

&lt;p&gt;This time, I decided to do something different and hosted it with firebase.&lt;/p&gt;

&lt;p&gt;For those of you who don't know what firebase is, check out this helpful video:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/O17OWyx08Cg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I used the Firebase CLI to deploy my website. It was a pretty easy process.&lt;/p&gt;

&lt;p&gt;Finally, I ended with my final website.&lt;/p&gt;

&lt;p&gt;I would love to hear your feedback about my portfolio in the comments below. &lt;/p&gt;

&lt;p&gt;And rememeber....&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keep-coding-yall"&gt;
  &lt;/a&gt;
  Keep Coding Y'All 👨🏻‍💻
&lt;/h1&gt;

</description>
      <category>react</category>
      <category>portfolio</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Beginners Guide to Bit Manipulation</title>
      <author>Sai Ashish</author>
      <pubDate>Wed, 14 Apr 2021 10:40:25 +0000</pubDate>
      <link>https://dev.to/theinsightfulcoder/a-beginners-guide-to-bit-manipulation-35ek</link>
      <guid>https://dev.to/theinsightfulcoder/a-beginners-guide-to-bit-manipulation-35ek</guid>
      <description>&lt;p&gt;Bit Manipulation or Bit Magic as it is popularly known as is a technique where we work directly on binary data or bits which results in faster code execution. If the concept seems to be frightening, don't worry. We will bust and understand everything with examples.&lt;/p&gt;

&lt;p&gt;In this article, we'll explore:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. Overview of Decimal and Binary Number System
   a. Conversion of Decimal number system  -&amp;gt; Binary Number System 
      Conversion of Binary number system  -&amp;gt; Decimal Number System
   b. Addition and Subtraction of Binary numbers:
2. Bitwise operators
3. Significance of these operations
    a. General Application
    b. Swapping
    c. Even and Odd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#1-overview-of-decimal-and-binary-number-system"&gt;
  &lt;/a&gt;
  1. Overview of Decimal and Binary Number System
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N8nZeTbC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618148409252/bQ1TZ7mjD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N8nZeTbC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618148409252/bQ1TZ7mjD.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most common convention of writing numbers is the decimal number system. In this system, we write numbers in the power of 10.  For example,&lt;/p&gt;

&lt;p&gt;(375)10 = 3 x 10&lt;sup&gt;2&lt;/sup&gt; + 7 x 10&lt;sup&gt;1&lt;/sup&gt; + 5 x 10&lt;sup&gt;0&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Similarly, computers are habituated to work on Binary numbers, corresponding to base 2.&lt;/p&gt;

&lt;p&gt;(101)2 = 1 x 2&lt;sup&gt;2&lt;/sup&gt; + 0 x 2&lt;sup&gt;1&lt;/sup&gt; + 1 x  2&lt;sup&gt;0&lt;/sup&gt; = 5&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-conversion-of-decimal-number-system-gt-binary-number-system-and-vice-versa"&gt;
  &lt;/a&gt;
  a. Conversion of Decimal number system  -&amp;gt; Binary Number System and vice versa
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;i. Decimal number system  -&amp;gt; Binary Number System&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We convert decimal to binary by division as we are going from base 10 to base 2.&lt;/p&gt;

&lt;p&gt;(10)10 -&amp;gt; (?)2&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R7XnffvB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618391224873/a5Jw_0Pug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R7XnffvB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618391224873/a5Jw_0Pug.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The trick is to keep dividing the number by 2 and write the remainder beside it. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;10/2, remainder = 0&lt;/li&gt;
&lt;li&gt;5/2, remainder = 1&lt;/li&gt;
&lt;li&gt;2/2, remainder = 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You've to write the binary bits in the bottom-up order along with 1 at the front. So, the binary representation of 10 will come as 1010.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ii. Binary Number System -&amp;gt; Decimal number system&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We convert binary to decimal using multiplication as seen above.&lt;/p&gt;

&lt;p&gt;(1010)2 = 1 x 2&lt;sup&gt;3&lt;/sup&gt; + 0 x 2&lt;sup&gt;2&lt;/sup&gt; + 1 x  2&lt;sup&gt;1&lt;/sup&gt; + 2&lt;sup&gt;0&lt;/sup&gt; &lt;br&gt;&lt;br&gt;
 = 8 +  0 + 2 + 0 &lt;br&gt;&lt;br&gt;
 = 10&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#b-addition-and-subtraction-of-binary-numbers"&gt;
  &lt;/a&gt;
  b . Addition and Subtraction of Binary numbers:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_85PVUey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618393547478/_QyMnfZQY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_85PVUey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618393547478/_QyMnfZQY.png" alt="Addition and Subtraction of Binary numbers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;i. Addition&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the truth table for addition of Binary digits.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Number 1&lt;/th&gt;
    &lt;th&gt;Number 2&lt;/th&gt;
    &lt;th&gt;Sum&lt;/th&gt;
    &lt;th&gt;Carry&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
     &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
   &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If we add,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0 + 0, we get the sum as 0 with no carry.&lt;/li&gt;
&lt;li&gt;0 + 1, we get the sum as 1 and no carry.&lt;/li&gt;
&lt;li&gt;1 + 0, we get the sum as 1 and no carry.&lt;/li&gt;
&lt;li&gt;1 + 1, we get the sum as 0, and the carry as 1.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's say we want to perform addition as 5 + 6. The computer converts 5 and 6 from the decimal number system to the binary number system.&lt;/p&gt;

&lt;p&gt;(5)10 = (101)2&lt;br&gt;
(6)10 = (110)2&lt;/p&gt;

&lt;p&gt;Adding the binary representation according to the truth table,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KO__gQ5R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618388283288/JlHSMRFY1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KO__gQ5R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618388283288/JlHSMRFY1.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The highlighted 1 represents the carry bit. Convert 1011 to decimal, we get the result as 11, that is, in fact, 5 + 6. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ii.Subtraction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spoiler alert:&lt;/strong&gt; There's nothing known as subtraction in the computer. The computer uses a method called 2's complement to perform subtraction using addition. So, if we want to perform 6 - 5, the computer treats it as  6 + (-5).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Convert numbers from the decimal number system to the binary number system.&lt;/p&gt;

&lt;p&gt;(6)10 = (110)2&lt;br&gt;
(5)10 = (101)2&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Invert the bits of the number to be subtracted. (Change 0 to 1 and 1 to 0)&lt;/p&gt;

&lt;p&gt;(5)10 = (101)2 = 010&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Add the numbers&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QRJzKo0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618390151602/AfLl4vTGP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QRJzKo0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618390151602/AfLl4vTGP.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If a carry is generated from the most significant bit(MSB)— the leftmost bit, that means the result is positive. Discard the carry it and add 1 to obtain the final answer. &lt;/li&gt;
&lt;li&gt;If no carry is generated, that means the number is negative. In this case, you've to invert the bits of the answer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TuKjQx_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618390268017/rdTqnlLet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TuKjQx_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618390268017/rdTqnlLet.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Convert the answer obtained in binary back to the decimal number system.&lt;/p&gt;

&lt;p&gt;(1)2 = (1)10&lt;/p&gt;

&lt;p&gt;Therefore, we get the answer as 1. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-bitwise-operators"&gt;
  &lt;/a&gt;
  2. Bitwise operators
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JkZ74mIx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618148234602/dAx4VsuJI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JkZ74mIx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618148234602/dAx4VsuJI.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we have Arithmetic operators to work on Decimal numbers, we have Bitwise Operators to work on Binary Numbers. The most commonly used Bitwise operators are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bitwise AND(&amp;amp;)&lt;/li&gt;
&lt;li&gt;Bitwise OR(|)&lt;/li&gt;
&lt;li&gt;Bitwise XOR(^)&lt;/li&gt;
&lt;li&gt;Bitwise NOT(~)&lt;/li&gt;
&lt;li&gt;Right Shift(&amp;gt;&amp;gt;)&lt;/li&gt;
&lt;li&gt;Left Shift(&amp;lt;&amp;lt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Number 1&lt;/th&gt;
    &lt;th&gt;Number 2&lt;/th&gt;
    &lt;th&gt;AND(&amp;amp;)&lt;/th&gt;
    &lt;th&gt;OR(|)&lt;/th&gt;
    &lt;th&gt;XOR(^)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
     &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Consider this as the master table. How to build this table? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.  AND(&amp;amp;):&lt;/strong&gt; If both the bits of the numbers are 1, the output is 1 else 0.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. OR(|):&lt;/strong&gt; If both the bits of the numbers are 0, the output is 0 else 1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. XOR(^):&lt;/strong&gt; If both the bits of the numbers are different, the output is 1 else 0.&lt;/p&gt;

&lt;p&gt;Let's explore the other operators.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. NOT(~)&lt;/strong&gt; works on single bits. It inverts the value of the bits. If the input is 0 it converts it to 1 and vice versa,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Right Shift(&amp;gt;&amp;gt;):&lt;/strong&gt; Shifts the position of bits to one place towards the right. The significance of the right bit is that it divides the number by 2. For example, let's say we have to right shift the number 12 two times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; 12&amp;gt;&amp;gt;2&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; 12 becomes 1100 in Binary &lt;br&gt;&lt;br&gt;
Right shift bits once:  0110 &lt;br&gt;&lt;br&gt;
Right shift bits twice: 0011 &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Hence 12 gets converted to 6 and then 3. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Left shift(&amp;lt;&amp;lt;):&lt;/strong&gt; Shifts the position of bits to one place towards the left. The significance of the left bit is that it multiplies the number by 2. For example, let's say we have to left-shift the number 12 two times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; 12&amp;lt;&amp;lt;2  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; 12 becomes 1100 in Binary &lt;br&gt;&lt;br&gt;
Right shift bits once: 11000 &lt;br&gt;&lt;br&gt;
Right shift bits twice: 110000&lt;/p&gt;

&lt;p&gt;Hence 12 gets converted to 24 and then 48. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-significance-of-these-operations"&gt;
  &lt;/a&gt;
  3. Significance of these operations
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uNeuVeAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618148583420/Ym0c-B-o5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uNeuVeAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618148583420/Ym0c-B-o5.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-general-application"&gt;
  &lt;/a&gt;
  a. General Application
&lt;/h3&gt;

&lt;p&gt;Let's say you wanted to write a code where you are constantly multiplying/dividing the term by 2.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (int i = 1; i &amp;lt;= N;  i = i * 2)
{
   ------------------
   ------------------
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of multiplication, you can directly use the left shift operator in the updation phase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for(int i =1; i&amp;lt; = N; i =(i&amp;lt;&amp;lt;1))
{
   ------------------
   ------------------
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#b-swapping"&gt;
  &lt;/a&gt;
  b. Swapping
&lt;/h3&gt;

&lt;p&gt;You can perform swapping without the need for a third variable. The magic is created by the XOR operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int a = 5, b = 2;
a ^= b;
b ^= a;
a ^= b;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#c-evenodd"&gt;
  &lt;/a&gt;
  c. Even/Odd
&lt;/h3&gt;

&lt;p&gt;What if I told you that we can completely eliminate the use of the modulo(%) operation to find out whether a number is even or odd. We can achieve this using &lt;strong&gt;Bit Masking&lt;/strong&gt;. Before diving into Bit Masking, I would like to perform a small quiz. What is the pattern among these numbers?&lt;/p&gt;

&lt;p&gt;2 = 10 &lt;br&gt;&lt;br&gt;
4 = 100 &lt;br&gt;&lt;br&gt;
6 = 110 &lt;br&gt;&lt;br&gt;
8 = 1000 &lt;br&gt;&lt;br&gt;
10= 1010 &lt;br&gt;&lt;/p&gt;

&lt;p&gt;1 = 1 &lt;br&gt;&lt;br&gt;
3 = 11 &lt;br&gt;&lt;br&gt;
5 = 101 &lt;br&gt;&lt;br&gt;
7 = 111 &lt;br&gt;&lt;br&gt;
9 = 1001 &lt;br&gt;&lt;/p&gt;

&lt;p&gt;If you notice correctly, you'd observe that the last digit of each even number is 0. Similarly for odd numbers, the last digit is 1. Therefore, to distinguish between even and odd numbers, we just need to figure out whether the last digit of a number is 0/1.&lt;br&gt;
The concept is if we use AND any number with 1, we would receive the last digit of the number.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;p&gt;i.  8 &amp;amp; 1&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9c9Q2zLn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618147031022/9p1-uNQuy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9c9Q2zLn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618147031022/9p1-uNQuy.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ii. 7 &amp;amp; 1&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pUQdf3DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618147063443/Lco3vliqn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pUQdf3DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618147063443/Lco3vliqn.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can simply compare the result with 0 and verify if our number is even or odd. This process is called Bit Masking. We use 1 as a mask and perform an operation to get the desired output. &lt;/p&gt;

&lt;p&gt;Code snippet for Even and Odd numbers using Bit Manipulation technique:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int i = 8763;
if((i&amp;amp;1)==0)
System.out.println("Even Number");
else
System.out.println("Odd Number");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it for today, folks. In the next part of this series, we would discuss Bit Masking Techniques and move on to explore some advanced Bit Manipulation Techniques &amp;amp; Algorithms. &lt;/p&gt;

&lt;p&gt;This article was inspired by the  &lt;a href="https://www.youtube.com/watch?v=N89PN_uyelU&amp;amp;list=PLUcsbZa0qzu3yNzzAxgvSgRobdUUJvz7p&amp;amp;t=0s"&gt;DSA-One series&lt;/a&gt;  by  &lt;a href="https://www.linkedin.com/in/anuj-kumar-sharma-294533138/"&gt;Anuj Kumar Sharma. &lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-insights-by-the-insightful-coder-"&gt;
  &lt;/a&gt;
  Bonus Insights by  &lt;a href="https://theinsightfulcoder.com/"&gt;The Insightful Coder&lt;/a&gt; :
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Interested in Building Creative Beginner-Level Python Projects🐍?: Check out the  &lt;a href="https://hashnode.com/series/python-projects-for-beginners-ckk31d9370h0vrus1blfl0a4y"&gt;Python Projects for Beginners Series&lt;/a&gt;😍&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interested in Building Your Own Artificial Intelligence Projects using Python?: Check out the &lt;a href="https://hashnode.com/series/python-ai-series-ckkft33ux016dwjs11xlqbz4v"&gt;Python AI Series&lt;/a&gt;🧠&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I'm dropping useful developer resources, interactive quizzes, interviews tips and more on my  &lt;a href="https://www.instagram.com/theinsightfulcoder/"&gt;Instagram&lt;/a&gt;  page 🖼&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find and Download All My Project Source Codes at My &lt;a href="https://github.com/SaiAshish-Konchada"&gt;Github Repository&lt;/a&gt; 🎁 &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>computerscience</category>
      <category>programming</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>How to speed up csv data load to database using Multiprocessing</title>
      <author>Jewel Muraledharan</author>
      <pubDate>Wed, 14 Apr 2021 10:33:35 +0000</pubDate>
      <link>https://dev.to/jewelkm/how-to-speed-up-data-load-to-table-from-csv-using-multiprocessing-2p6b</link>
      <guid>https://dev.to/jewelkm/how-to-speed-up-data-load-to-table-from-csv-using-multiprocessing-2p6b</guid>
      <description>&lt;p&gt;When it comes to data processing, Pandas is one of the most handy and sophisticated libraries in Python. It has functions which can read and write structured data efficiently from and to a wide variety of data sources (csv, databases, flat files, etc).&lt;/p&gt;

&lt;p&gt;But when the data in the source grows, it can throw a memory error. Pandas has a nice way of dealing with this by reading the data in chunks and returning a TextFileReader object which can be iterated to access data. This data can then be read chunk by chunk and processed.&lt;/p&gt;

&lt;p&gt;Let's take an example of data load from csv to MySQL. In this example we will be loading a csv five with 500,000 rows and 3 columns to a MySQL table&lt;/p&gt;

&lt;p&gt;We will use pandas module to read data from csv and sqlalchemy module in python to insert data to the MySQL.&lt;/p&gt;

&lt;p&gt;Firstly, let's load the data to Pandas DataFrame as chunks&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A5skusiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hd2fcaqa2nttxzt6x00f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5skusiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hd2fcaqa2nttxzt6x00f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Processing data in chunk is still linear which means each data chunk will be processed or loaded one after the other. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-linear-data-upload"&gt;
  &lt;/a&gt;
  1. Linear data upload
&lt;/h3&gt;

&lt;p&gt;Let's look at the linear way to insert data.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNvvXlBu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikep2a359u7r3k6aer1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNvvXlBu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikep2a359u7r3k6aer1i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an sqlalchemy engine using the database uri&lt;/li&gt;
&lt;li&gt;Create an insert query for each row in the csv file&lt;/li&gt;
&lt;li&gt;Use the sqlalchemy engine to load the data to MySQL table.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So how do we speed things up?&lt;/p&gt;

&lt;p&gt;Multiprocessing is one way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-parallel-load-of-data-using-multiprocessing"&gt;
  &lt;/a&gt;
  2. Parallel load of data using multiprocessing
&lt;/h3&gt;

&lt;p&gt;Python's multiprocessing module is one of the easiest way to spin up multiple processes for parallel computing.&lt;/p&gt;

&lt;p&gt;We will be using apply_async from multiprocessing module. &lt;/p&gt;

&lt;p&gt;The apply_async function is a variant of apply() which applies the provided function over data but does not wait for the function run to be completed. In this way the code does not have to wait for a particular chunk of data to be processed before starting to process the next.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--usRJXQyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2s2f8xphihhl07t1yup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--usRJXQyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2s2f8xphihhl07t1yup.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create a pool of workers. The workers will work on each of the data chunk load.&lt;/li&gt;
&lt;li&gt;For each of the data chunks, apply the insert function using the parameters&lt;/li&gt;
&lt;li&gt;The wait method will wait for the insert function to finish till the timeout is reached &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With 4 cores and for a csv file with 50,000 rows and 3 columns, the code using multiprocessing was able to load the data in 45 seconds while the linear code was almost 10x slower&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jewelkm"&gt;
        jewelkm
      &lt;/a&gt; / &lt;a href="https://github.com/jewelkm/large-data-processor"&gt;
        large-data-processor
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Python code for parallel insert of csv data to transactional database table.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
 

</description>
      <category>python</category>
      <category>pandas</category>
      <category>multiprocessing</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Supercharge your API with Compression</title>
      <author>Mike Eason</author>
      <pubDate>Wed, 14 Apr 2021 10:12:09 +0000</pubDate>
      <link>https://dev.to/mikeeason/supercharge-your-api-with-compression-4ikp</link>
      <guid>https://dev.to/mikeeason/supercharge-your-api-with-compression-4ikp</guid>
      <description>&lt;p&gt;Performance is critical to any API, taking the time to reduce API response times to be as low as possible is absolutely worth the effort.&lt;/p&gt;

&lt;p&gt;Take a look at this example API request in &lt;a href="https://solaris.games"&gt;Solaris&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zx19Bphy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jle5wk27kgast893hb3s.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zx19Bphy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jle5wk27kgast893hb3s.PNG" alt="An API Response"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The API response is &lt;code&gt;44.6kB&lt;/code&gt; with a time of &lt;code&gt;584ms&lt;/code&gt;. This isn't &lt;em&gt;terrible&lt;/em&gt; but could be &lt;strong&gt;smaller and faster&lt;/strong&gt; with compression.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#express-compression"&gt;
  &lt;/a&gt;
  Express Compression
&lt;/h3&gt;

&lt;p&gt;If you're familiar with &lt;strong&gt;Node.js&lt;/strong&gt; you have probably used &lt;a href="https://expressjs.com/"&gt;Express.js&lt;/a&gt; at some time or another.&lt;/p&gt;

&lt;p&gt;Express is extensible and has a large number of &lt;strong&gt;middleware&lt;/strong&gt; libraries that can be bolted on. One such library is &lt;a href="https://github.com/expressjs/compression"&gt;compression&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To install &lt;code&gt;compression&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install compression
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then its a case of simply calling the Express &lt;code&gt;use&lt;/code&gt; function to register the middleware like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;compression&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;// Compress all responses&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compression&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;// Byte threshold (0 means compress everything)&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy, right? Now calling the same API endpoint we get this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---hyrZ421--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktfqig27f6zk2pq9jror.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---hyrZ421--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktfqig27f6zk2pq9jror.PNG" alt="The same API response, but smaller and faster"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The response is now &lt;code&gt;8.1kB&lt;/code&gt; and a time of &lt;code&gt;101ms&lt;/code&gt;, that's over &lt;strong&gt;5x faster&lt;/strong&gt; than before!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#compressing-specific-responses"&gt;
  &lt;/a&gt;
  Compressing Specific Responses
&lt;/h4&gt;

&lt;p&gt;With the above code, we'll be compressing &lt;strong&gt;all&lt;/strong&gt; responses, if for some reason you'd like to &lt;strong&gt;not&lt;/strong&gt; compress a response from the API then we can override the &lt;code&gt;filter&lt;/code&gt; function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compression&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x-no-compression&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// don't compress responses if this request header is present&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// fallback to standard compression&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;compression&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any API request with the &lt;code&gt;x-no-compression&lt;/code&gt; header will be ignored.&lt;/p&gt;

&lt;p&gt;And that's it, your API will now serve compressed responses and should now be performing even better than before!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;In my spare time I develop an open source strategy game called **Solaris&lt;/em&gt;&lt;em&gt;, &lt;a href="https://solaris.games"&gt;check it out&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>performance</category>
      <category>compression</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Python vs Java in 2021: Which One You Should Choose?</title>
      <author>Vikrant Bhalodia</author>
      <pubDate>Wed, 14 Apr 2021 09:41:26 +0000</pubDate>
      <link>https://dev.to/weblineindia/python-vs-java-in-2021-which-one-you-should-choose-41a2</link>
      <guid>https://dev.to/weblineindia/python-vs-java-in-2021-which-one-you-should-choose-41a2</guid>
      <description>&lt;p&gt;Python and Java are both stellar technologies with state-of-the-art capabilities. Both play a crucial role in web and mobile application development. No doubt, both technologies are incredible and have efficiency, versatility, and automation capabilities. &lt;/p&gt;

&lt;p&gt;Today, we will compare two remarkable programming languages and assess the performance of both based on several factors. A few comparison parameters that we will be using include syntaxes, popularity, performance ratio, etc. We will also see whether these technologies are good for Data Analysis, Machine Learning, etc. &lt;/p&gt;

&lt;p&gt;So, without further ado, let us know which programming language would be an excellent prospect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#java-and-python-overview"&gt;
  &lt;/a&gt;
  Java and Python Overview
&lt;/h2&gt;

&lt;p&gt;Java is similar to C++ and is also an object-oriented language. It is used to build powerful, responsive, and highly interactive applications. The technology is entirely object-oriented and also supports several open-source libraries, which makes Java application development easy. &lt;/p&gt;

&lt;p&gt;Python is a high-level programming language widely employed to build critical functionalities of the applications. It simplifies complicated tasks by utilizing a few code lines and makes it easy for the &lt;a href="https://www.weblineindia.com/django-development.html"&gt;Django development company&lt;/a&gt;. It also supports GUI (Graphical User Interface).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-features-of-java"&gt;
  &lt;/a&gt;
  Key Features of Java
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;One of the greatest strengths of Java is that the framework comes complimentary for the developers. &lt;/li&gt;
&lt;li&gt;It has an object-oriented approach, which means that the programmers can reuse the codes and develop new programs. &lt;/li&gt;
&lt;li&gt;It has a vast array of open-source development that gives developers increased options to develop. &lt;/li&gt;
&lt;li&gt;It opens up several possibilities for the developers to access any API for their purpose.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#key-features-of-python"&gt;
  &lt;/a&gt;
  Key features of Python
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Python is used by most programmers today. Python offers a vast and incomparable range of testing frameworks. &lt;/li&gt;
&lt;li&gt;Python has extensive libraries that are object-oriented and makes the language more productive. &lt;/li&gt;
&lt;li&gt;It offers a great integration feature for Django development.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#popularity"&gt;
  &lt;/a&gt;
  Popularity
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vmb01Gu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zc0hsksbue5nli8qy7db.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vmb01Gu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zc0hsksbue5nli8qy7db.jpg" alt="https://www.freepik.com/free-vector/young-people-with-thumb-like-symbol_4201940.htm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As far as the programming language's popularity is considered, both Java and Python are prevalent languages. Before JavaScript was introduced, Java ranked as one of the most popular programming languages. The developers of JavaScript made a smart move by choosing a naming convention similar to Java, because of which it gained incredible popularity initially. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;The performance of two programming languages cannot be easily measured. It is not like differentiating two cars in terms of speed. The difference in the version of Java and Python can be affirmed in the benchmarks games, where both the languages are benchmarked based on the speed factor. However, only the performance of a programming language doesn't make the execution of a language faster. The application developed is also responsible for creating a programming language that performs better. The third-party libraries also make the performance of a language better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-websites-built-using-these-frameworks"&gt;
  &lt;/a&gt;
  Top Websites Built Using These Frameworks
&lt;/h2&gt;

&lt;p&gt;The top websites built using the Java framework by Java Development company include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stack Overflow&lt;/li&gt;
&lt;li&gt;Java World&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;YouTube&lt;/li&gt;
&lt;li&gt;Amazon&lt;/li&gt;
&lt;li&gt;Sun Developer Network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Famous websites developed using Python include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spotify&lt;/li&gt;
&lt;li&gt;Netflix&lt;/li&gt;
&lt;li&gt;Dropbox&lt;/li&gt;
&lt;li&gt;Instagram&lt;/li&gt;
&lt;li&gt;Instacart&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#strengths-and-weakness-of-java"&gt;
  &lt;/a&gt;
  Strengths and Weakness of Java
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Strengths&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java embraces object-oriented programming, a coding concept in which the set of functions applied to the code are also defined. &lt;/li&gt;
&lt;li&gt;It is a high-level programming language that uses primary and simple syntax and has a short learning curve. &lt;/li&gt;
&lt;li&gt;The framework is platform-independent, which means you will have to write the code once and then run it anywhere. &lt;/li&gt;
&lt;li&gt;The Java community is unmatched. It has a vast ecosystem of well-tested libraries and frameworks. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Weakness&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Oracle has announced that Java will now be a paid framework, and to obtain the benefits of all updates and bug fixes, users will have to either pay per processor or by the number of users. &lt;/li&gt;
&lt;li&gt;At times the code is verbose, which means too many words are used, making the codes less scannable and readable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#strengths-and-weakness-of-python"&gt;
  &lt;/a&gt;
  Strengths and Weakness of Python
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Strengths&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python is a highly productive language and extremely simple. &lt;/li&gt;
&lt;li&gt;It is an interpreted language which means that the code is itself executed line by line.&lt;/li&gt;
&lt;li&gt;Python is under OSI approved open-source license, which makes the language free to use and distribute. &lt;/li&gt;
&lt;li&gt;It is a portable language, which means you can write the code only once and then run it anywhere. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Weakness&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python is a programming language that uses a large amount of memory because it provides efficiency to the developers. &lt;/li&gt;
&lt;li&gt;When it comes to databases, Python lacks. Its database is underdeveloped compared to the other popular frameworks, and therefore big enterprises do not use Python. &lt;/li&gt;
&lt;li&gt;Python is weak in mobile computing and is generally used for the programming server-side. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#best-suited-programs"&gt;
  &lt;/a&gt;
  Best Suited Programs
&lt;/h3&gt;

&lt;p&gt;Both Python and Java frameworks are suited best for numerous programs. Python is suited for: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Graphic Designing and Image Processing. &lt;/li&gt;
&lt;li&gt;Games.&lt;/li&gt;
&lt;li&gt;Operating Systems. &lt;/li&gt;
&lt;li&gt;Machine Learning Apps. &lt;/li&gt;
&lt;li&gt;Prototyping. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it comes to Java, &lt;a href="https://www.weblineindia.com/java-development.html"&gt;java application development&lt;/a&gt; for several programs are developed that include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mobile Applications. &lt;/li&gt;
&lt;li&gt;Middleware Products. &lt;/li&gt;
&lt;li&gt;Desktop GUI Apps. &lt;/li&gt;
&lt;li&gt;Embedded Systems and Enterprise Solutions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;After considering both the programming languages' performance based on numerous parameters, it is still difficult to say which language is superior to the other. Even if Java is a popular choice, Python is more widely used for its productivity. Moreover, it is also used for several organizational purposes. In the same way, although Java is faster, Python is a better choice for lengthy coding programs. &lt;/p&gt;

&lt;p&gt;The choice of the most suitable framework also depends on the application that a developer is looking to create. You can consider the above parameters and see which language ticks most of your requirements' boxes; you can safely go ahead with it. If you are starting your journey into development, you can choose any one amongst the two, based on your interest.&lt;/p&gt;

</description>
      <category>java</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Laravel Octane</title>
      <author>Marcel Pociot</author>
      <pubDate>Wed, 14 Apr 2021 09:30:19 +0000</pubDate>
      <link>https://dev.to/beyondcode/laravel-octane-3ji5</link>
      <guid>https://dev.to/beyondcode/laravel-octane-3ji5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#laravel-octane-what-how-and-why"&gt;
  &lt;/a&gt;
  Laravel Octane - What, How, and Why
&lt;/h1&gt;

&lt;p&gt;Taylor Otwell already showed a glimpse of Laravel's latest open-source package, Octane, during his Laracon Online talk - but today, the new package is &lt;a href="https://github.com/laravel/octane"&gt;available on GitHub&lt;/a&gt; for everyone to beta test.&lt;/p&gt;

&lt;p&gt;In this blog post, I'm going to explore Laravel Octane and tell you what it is, how you can install and use it, and why you might need it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; Laravel Octane is still a beta software and should not yet be used in production!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-laravel-octane"&gt;
  &lt;/a&gt;
  What is Laravel Octane?
&lt;/h2&gt;

&lt;p&gt;Laravel Octane is an open-source package that will boost your Laravel application performance. Laravel Octane requires PHP 8, so if you're still on 7.x, you need to upgrade your PHP version.&lt;br&gt;
Under the hood, Octane makes use of &lt;a href="https://www.swoole.co.uk/"&gt;Swoole&lt;/a&gt; and &lt;a href="https://roadrunner.dev/"&gt;RoadRunner&lt;/a&gt; - two application servers, that take care of serving and booting up your Laravel application. Why is it faster, you might ask. Let me explain.&lt;/p&gt;

&lt;p&gt;With a traditional PHP application that gets served via a webserver like nginx, every incoming request is going to spawn an PHP-FPM worker. This means that each request starts up one individual PHP process, that will run through all the necessary tasks in order to serve that one request.&lt;/p&gt;

&lt;p&gt;In the case of Laravel, this means that the Framework needs to be booted, all service providers register their services within the container, all providers get booted themselves, the request goes through a list of middleware classes, hits your controller, a view gets rendered, etc. until we eventually get a response from our server.&lt;/p&gt;

&lt;p&gt;With Swoole or RoadRunner in place, we still have a worker for each incoming HTTP request, but they all share the same booted framework. This means that only the first incoming request is going to bootstrap the framework (including all service providers, etc.) while every other request can then make use of a ready-to-go framework. And this is what makes Octane so insanely fast.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started-with-laravel-octane"&gt;
  &lt;/a&gt;
  Getting started with Laravel Octane
&lt;/h2&gt;

&lt;p&gt;As Laravel Octane is a package, you need to install it as a dependency of your specific application. You can do this via composer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require laravel/octane&lt;span class="se"&gt;\&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you installed Octane in your application, make sure to run &lt;code&gt;php artisan octane:install&lt;/code&gt;. This is going to publish the Octane configuration file, as well as add &lt;code&gt;rr&lt;/code&gt; - the RoadRunner binary, to the &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;As I said, Octane is going to publish its configuration file, which looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;

    &lt;span class="cm"&gt;/*
    |--------------------------------------------------------------------------
    | Octane Server
    |--------------------------------------------------------------------------
    |
    | This value determines the default "server" that will be used by Octane
    | when starting, restarting, or stopping your server via the CLI. You
    | are free to change this to the supported server of your choosing.
    |
    */&lt;/span&gt;

    &lt;span class="s1"&gt;'server'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'OCTANE_SERVER'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'roadrunner'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

    &lt;span class="cm"&gt;/*
    |--------------------------------------------------------------------------
    | Force HTTPS
    |--------------------------------------------------------------------------
    |
    | When this configuration value is set to "true", Octane will inform the
    | framework that all absolute links must be generated using the HTTPS
    | protocol. Otherwise your links may be generated using plain HTTP.
    |
    */&lt;/span&gt;

    &lt;span class="s1"&gt;'https'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'OCTANE_HTTPS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

    &lt;span class="cm"&gt;/*
    |--------------------------------------------------------------------------
    | Octane Listeners
    |--------------------------------------------------------------------------
    |
    | All of the event listeners for Octane's events are defined below. These
    | listeners are responsible for resetting your application's state for
    | the next request. You may even add your own listeners to the list.
    |
    */&lt;/span&gt;

    &lt;span class="s1"&gt;'listeners'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nc"&gt;WorkerStarting&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="nc"&gt;EnsureUploadedFilesAreValid&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;

        &lt;span class="nc"&gt;RequestReceived&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="nc"&gt;Octane&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;prepareApplicationForNextOperation&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="nc"&gt;Octane&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;prepareApplicationForNextRequest&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;

        &lt;span class="nc"&gt;RequestHandled&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;

        &lt;span class="nc"&gt;RequestTerminated&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;

        &lt;span class="nc"&gt;TaskReceived&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="nc"&gt;Octane&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;prepareApplicationForNextOperation&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;

        &lt;span class="nc"&gt;TickReceived&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="nc"&gt;Octane&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;prepareApplicationForNextOperation&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;

        &lt;span class="nc"&gt;OperationTerminated&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="nc"&gt;FlushTemporaryContainerInstances&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="c1"&gt;// DisconnectFromDatabases::class,&lt;/span&gt;
            &lt;span class="c1"&gt;// CollectGarbage::class,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;

        &lt;span class="nc"&gt;WorkerErrorOccurred&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="nc"&gt;ReportException&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nc"&gt;StopWorkerIfNecessary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;

        &lt;span class="nc"&gt;WorkerStopping&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="cm"&gt;/*
    |--------------------------------------------------------------------------
    | Warm / Flush Bindings
    |--------------------------------------------------------------------------
    |
    | The bindings listed below will either be pre-warmed when a worker boots
    | or they will be flushed before every new request. Flushing a binding
    | will force the container to resolve that binding again when asked.
    |
    */&lt;/span&gt;

    &lt;span class="s1"&gt;'warm'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="nc"&gt;Octane&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;defaultServicesToWarm&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="s1"&gt;'flush'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="cm"&gt;/*
    |--------------------------------------------------------------------------
    | Garbage Collection Threshold
    |--------------------------------------------------------------------------
    |
    | When executing long-lived PHP scripts such as Octane, memory can build
    | up before being cleared by PHP. You can force Octane to run garbage
    | collection if your application consumes this amount of megabytes.
    |
    */&lt;/span&gt;

    &lt;span class="s1"&gt;'garbage'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="cm"&gt;/*
    |--------------------------------------------------------------------------
    | Maximum Execution Time
    |--------------------------------------------------------------------------
    |
    | (info) 0 means no maximum limit
    |
    */&lt;/span&gt;

    &lt;span class="s1"&gt;'max_execution_time'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="cm"&gt;/*
    |--------------------------------------------------------------------------
    | Octane Cache Table
    |--------------------------------------------------------------------------
    |
    | While using Swoole, you may leverage the Octane cache, which is powered
    | by a Swoole table. You may set the maximum number of rows as well as
    | the number of bytes per row using the configuration options below.
    |
    */&lt;/span&gt;

    &lt;span class="s1"&gt;'cache'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'rows'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'bytes'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="cm"&gt;/*
    |--------------------------------------------------------------------------
    | Octane Swoole Tables
    |--------------------------------------------------------------------------
    |
    | While using Swoole, you may define additional tables as required by the
    | application. These tables can be used to store data that needs to be
    | quickly accessed by other workers on the particular Swoole server.
    |
    */&lt;/span&gt;

    &lt;span class="s1"&gt;'tables'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'example:1000'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'string:1000'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'votes'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'int'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, you need to decide for yourself wether you want to use RoadRunner, or Swoole. You can then configure the application server that you want to use by customizing the &lt;code&gt;server&lt;/code&gt; key in the configuration file. This can either be &lt;code&gt;swoole&lt;/code&gt;, or &lt;code&gt;roadrunner&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#roadrunner"&gt;
  &lt;/a&gt;
  RoadRunner
&lt;/h3&gt;

&lt;p&gt;RoadRunner is an application server that is written in Go, that does not have any other dependencies within PHP itself. Choose RoadRunner, if you do not want to install additional PHP extensions. You can install RoadRunner through composer, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require spiral/roadrunner
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#swoole"&gt;
  &lt;/a&gt;
  Swoole
&lt;/h3&gt;

&lt;p&gt;Swoole comes with a couple of nice benefits, that RoadRunner can not provide. As Swoole is an extension on top of PHP, PHP itself gains some cool new features, such as "ticks" and "coroutines", which I'm going to cover in a bit. These features are not available with RoadRunner, so if you want to make use of them, you should go with Swoole.&lt;/p&gt;

&lt;p&gt;You can install the Swoole extension using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pecl &lt;span class="nb"&gt;install &lt;/span&gt;swoole
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;During the installation, you will be asked if you want to have support for HTTP2, curl, JSON, and open_ssl within Swoole. You can safely stick to the default values here (which are &lt;code&gt;off&lt;/code&gt;) as those settings only affect things like coroutines. You will still be able to use curl, JSON, and everything else.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starting-octane"&gt;
  &lt;/a&gt;
  Starting Octane
&lt;/h3&gt;

&lt;p&gt;Once you have installed RoadRunner or Swoole, and defined it in your &lt;code&gt;octane.php&lt;/code&gt; configuration file, you can start Octane and let it serve your Laravel application. The Octane server can be started with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan octane:start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, Octane will start the server on port 8000, so you may access your application in a browser via &lt;code&gt;http://localhost:8000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So go ahead, visit that route and watch your Laravel application fly!&lt;br&gt;
If you make multiple requests to the app, you can see that the first one is a little bit slower - that's where the framework gets booted, while the other ones are noticeably faster, as they can use the booted framework from memory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;200 GET / .............. 14.23 ms
200 GET / ..............  1.93 ms
200 GET / ..............  2.06 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-code-changes"&gt;
  &lt;/a&gt;
  Making code changes
&lt;/h2&gt;

&lt;p&gt;If you now go and make a code change - for example, add a new &lt;code&gt;/test&lt;/code&gt; route - and try to hit that URL, you will receive a 404!&lt;br&gt;
And that's because the request is still using the framework (and all of its routes/code) that was booted once you started the Octane server. So in order to see that code change, you need to restart your Octane server.&lt;br&gt;
Because this is super cumbersome to do during development, Octane comes with a nice way to automatically watch your codebase for changes and restart the Octane server automatically.&lt;/p&gt;

&lt;p&gt;In order to make this work, make sure to install &lt;a href=""&gt;Chokidar&lt;/a&gt; - a NodeJS based file watching library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev chokidar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then start the Octane server in "watch" mode, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan octane:start &lt;span class="nt"&gt;--watch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the next time you make a change in your codebase, this will be detected, and Octane will restart the workers for the requests and you can immediately see your changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customizing-workers"&gt;
  &lt;/a&gt;
  Customizing Workers
&lt;/h3&gt;

&lt;p&gt;Speaking of Workers - by default, Octane is going to start one worker for each CPU core that you have. But you can also change this, by passing a &lt;code&gt;--workers&lt;/code&gt; option to the &lt;code&gt;octane:start&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan octane:start &lt;span class="nt"&gt;--workers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#swoole-specific-features"&gt;
  &lt;/a&gt;
  Swoole specific features
&lt;/h2&gt;

&lt;p&gt;As I mentioned, Octane comes with a couple of Swoole specific features, so lets take a look at those, as I think they are very interesting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concurrent-tasks"&gt;
  &lt;/a&gt;
  Concurrent Tasks
&lt;/h3&gt;

&lt;p&gt;Octane allows you to perform multiple tasks concurrently. This means that they will be performed at the same time and will be returned as soon as all tasks finished.&lt;/p&gt;

&lt;p&gt;Here's an example taken from the Octane documentation on GitHub:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Laravel\Octane\Facades\Octane&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$servers&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Octane&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;concurrently&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Server&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So in this example, we are getting all users and all servers at the same time. To make this clearer, here's another example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Octane&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;concurrently&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are executing two "tasks" concurrently and PHP will continue evaluating the code as soon as both of the tasks are finished. One task waits for 0.5 seconds, the other one waits for 1 second. As they are being evaluated concurrently, in two individual tasks, PHP will wait exactly 1 second (not 1.5) until both results are available.&lt;br&gt;
This feature is a great way to perform multiple smaller tasks simultaneously.&lt;/p&gt;

&lt;p&gt;Just like the &lt;code&gt;--workers&lt;/code&gt; option, you can also customize the amount of &lt;code&gt;--task-workers&lt;/code&gt; that Octane should make available.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ticks-intervals"&gt;
  &lt;/a&gt;
  Ticks / Intervals
&lt;/h3&gt;

&lt;p&gt;Octane in combination with Swoole, allows you to register &lt;code&gt;ticks&lt;/code&gt; - which are operations that will automatically be executed at a given interval. Similar to the &lt;code&gt;setInterval&lt;/code&gt; method in JavaScript.&lt;br&gt;
Unfortunately, there's no way to stop those ticks at the moment, but you can register them within your application like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Octane&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;tick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'simple-ticker'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;ray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Ticking...'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-octane-cache"&gt;
  &lt;/a&gt;
  The Octane Cache
&lt;/h3&gt;

&lt;p&gt;Another new feature within Octane and Swoole is a new cache driver. This cache driver, according to the official documentation, provides read and write speeds of up to 2 million operations per second. Behind the scenes, Swoole is caching the data in a shared memory using &lt;a href="https://www.swoole.co.uk/docs/modules/swoole-table"&gt;Swoole Tables&lt;/a&gt;, which can be accessed across all workers. When the server restarts, the cached data will be flushed though, as the cache is only persisted in memory.&lt;/p&gt;

&lt;p&gt;To make use of this cache, you can access it through the &lt;code&gt;octane&lt;/code&gt; cache store on the Cache facade, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Cache&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'octane'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'framework'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Laravel'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another cool new addition, that is Swoole and Octane specific is the ability of a "cache interval". This allows you to store information in the Octane cache and refresh the data in a given interval:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;Cache&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'octane'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'random'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#octane-tables"&gt;
  &lt;/a&gt;
  Octane Tables
&lt;/h3&gt;

&lt;p&gt;Built upon the feature of &lt;a href="https://www.swoole.co.uk/docs/modules/swoole-table"&gt;Swoole Tables&lt;/a&gt;, you can create your own tables that you want to access within your Octane applications. These tables have the same performance benefit as a Cache would have, by allowing you to save data in a structured way.&lt;br&gt;
Keep in mind that all data that you store within such a table will be lost when the server restarts though.&lt;/p&gt;

&lt;p&gt;To configure a table, you can create an entry in the &lt;code&gt;tables&lt;/code&gt; section of your &lt;code&gt;octane.php&lt;/code&gt; config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'tables' =&amp;gt; [
    'example:1000' =&amp;gt; [
        'name' =&amp;gt; 'string:1000',
        'votes' =&amp;gt; 'int',
    ],
],
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we are defining a table called &lt;code&gt;example&lt;/code&gt;, which can hold a maximum of 1.000 entries/rows. The structure of this table is a &lt;code&gt;name&lt;/code&gt;, which is a string with a maximum length of 1000, and &lt;code&gt;votes&lt;/code&gt;, which is an integer.&lt;/p&gt;

&lt;p&gt;To write data to this table, we can make use of the &lt;code&gt;Octane::table&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Laravel\Octane\Facades\Octane&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;Octane&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'example'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a-unique-identifier'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Marcel Pociot'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'votes'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to pull out the data, we can use a &lt;code&gt;get&lt;/code&gt; method on the table, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Octane&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'example'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a-unique-identifier'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#caveats-with-octane"&gt;
  &lt;/a&gt;
  Caveats with Octane
&lt;/h2&gt;

&lt;p&gt;There are a couple of things that you need to watch out for, when you want to either make an existing application ready for Octane, or start building a new application from scratch.&lt;/p&gt;

&lt;p&gt;Since Octane holds the framework in memory across all workers, things like all of your applications service providers will only be registered and booted once. While Octane takes care of resetting the state of first-party packages (which includes Inertia), it's not possible for Octane to reset global state that you might have in your own application code.&lt;/p&gt;

&lt;p&gt;The official documentation, which currently can be found on &lt;a href="https://github.com/laravel/octane#dependency-injection--octane"&gt;GitHub&lt;/a&gt; holds some of the most common scenarios that you should watch out for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#listeners"&gt;
  &lt;/a&gt;
  Listeners
&lt;/h3&gt;

&lt;p&gt;One feature of Octane that hasn't been documented yet, is the ability to register custom listeners, whenever something happens in the application server within Octane.&lt;br&gt;
You can hook into the following events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WorkerStarting&lt;/li&gt;
&lt;li&gt;RequestReceived&lt;/li&gt;
&lt;li&gt;RequestHandled&lt;/li&gt;
&lt;li&gt;RequestTerminated&lt;/li&gt;
&lt;li&gt;TaskReceived&lt;/li&gt;
&lt;li&gt;TickReceived&lt;/li&gt;
&lt;li&gt;OperationTerminated&lt;/li&gt;
&lt;li&gt;WorkerErrorOccurred&lt;/li&gt;
&lt;li&gt;WorkerStopping&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To attach listeners to these events, you can add them to your &lt;code&gt;octane.php&lt;/code&gt; config file.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#service-warming-and-flushing"&gt;
  &lt;/a&gt;
  Service Warming and Flushing
&lt;/h3&gt;

&lt;p&gt;When a new Octane worker gets booted, you can specify a list of container bindings/services that you want to "warm up" during the boot process. This means that, upon the booting of the worker, the service container will already make the specified services available, so that following requests can immediately access them.&lt;/p&gt;

&lt;p&gt;Octane already has a list of internal services that it keeps warm during each worker boot process, but you can add your own services to the &lt;code&gt;warm&lt;/code&gt; section of the &lt;code&gt;octane.php&lt;/code&gt; config file.&lt;/p&gt;

&lt;p&gt;Similar to this, you can also define a list of services that you want to flush, before a new request comes in. This can be useful for services that get manipulated over the course of a request, that you want to reset to its original/unloaded state when a fresh request comes in.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#octane-routes"&gt;
  &lt;/a&gt;
  Octane Routes
&lt;/h2&gt;

&lt;p&gt;If Octane does not already grant you enough speed boost, you can even squeeze a little more out of it, by making use of routing built right into Octane.&lt;br&gt;
You can define a custom Octane route through the Octane facade like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Octane&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/fast'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These routes are very fast because they entirely skip Laravels routing system (so these routes do not provide any kind of middleware) - which can be helpful for endpoints that only need to provide data really fast.&lt;/p&gt;

&lt;p&gt;Since the HTTP Kernel in Laravel is not being used for these requests, you need to return a Symfony Response object yourself, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Symfony\Component\HttpFoundation\Response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;Octane&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/faster'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello from Octane.'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All service providers are of course booted and available, so that you can still make use of these services, perform Eloquent queries, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alrightso-why-octane"&gt;
  &lt;/a&gt;
  Alright...so why Octane?
&lt;/h2&gt;

&lt;p&gt;Laravel Octane is definitely going to give your Laravel application a big performance boost - and we all love performance boosts, don't we?&lt;br&gt;
Do we actually need this performance boost? Well, maybe - I think it depends on the application that you are running. &lt;br&gt;
But what's more important to me, is the fact that Laravel is (once again) pushing the current state of PHP. Not only is Octane a package that requires at least PHP 8, but it also pushes exciting new features in the PHP world such as coroutines, ticks, and in general the mindset of serving your own application using an artisan command.&lt;/p&gt;

&lt;p&gt;I'm excited for the future of Octane!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Should I run tests during the docker build?</title>
      <author>Aahnik Daw</author>
      <pubDate>Wed, 14 Apr 2021 09:04:50 +0000</pubDate>
      <link>https://dev.to/aahnik/should-i-run-tests-during-the-docker-build-3c84</link>
      <guid>https://dev.to/aahnik/should-i-run-tests-during-the-docker-build-3c84</guid>
      <description>&lt;p&gt;Please help!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/67088512/should-i-run-tests-during-the-docker-build"&gt;https://stackoverflow.com/questions/67088512/should-i-run-tests-during-the-docker-build&lt;/a&gt;&lt;/p&gt;

</description>
      <category>help</category>
      <category>docker</category>
      <category>python</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Solution: Partition List</title>
      <author>seanpgallivan</author>
      <pubDate>Wed, 14 Apr 2021 07:58:52 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-partition-list-520f</link>
      <guid>https://dev.to/seanpgallivan/solution-partition-list-520f</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/partition-list/discuss/1157797"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-86-medium-partition-list"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/partition-list/"&gt;Leetcode Problem #86 (&lt;em&gt;Medium&lt;/em&gt;): Partition List&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given the &lt;code&gt;head&lt;/code&gt; of a linked list and a value &lt;code&gt;x&lt;/code&gt;, partition it such that all nodes less than &lt;code&gt;x&lt;/code&gt; come before nodes &lt;strong&gt;greater than or equal to&lt;/strong&gt; &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You should &lt;strong&gt;preserve&lt;/strong&gt; the original relative order of the nodes in each of the two partitions.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;head = [1,4,3,2,5,2], x = 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[1,2,2,4,3,5]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual:&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ENXgfOHZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.leetcode.com/uploads/2021/01/04/partition.jpg" alt="Example 1 Visual"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;head = [2,1], x = 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[1,2]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The number of nodes in the list is in the range &lt;code&gt;[0, 200]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-100 &amp;lt;= Node.val &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-200 &amp;lt;= x &amp;lt;= 200&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The easiest thing to do here is to create separate linked lists for the front and back portions of list we want to return. In order to accomplish that, we should first create some dummy heads (&lt;strong&gt;fdum, bdum&lt;/strong&gt;), then create pointers for the current nodes each of the front, back, and main lists (&lt;strong&gt;front, back, curr&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Then we can simply iterate through the main list and stitch together each node to either &lt;strong&gt;front&lt;/strong&gt; or &lt;strong&gt;back&lt;/strong&gt;, depending on the node's value.&lt;/p&gt;

&lt;p&gt;Once we reach the end, we just need to stitch together the two sub-lists, making sure to cap off the end of &lt;strong&gt;back&lt;/strong&gt;, and then &lt;strong&gt;return&lt;/strong&gt; our new list, minus the dummy head.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BmrT4eVc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/X5semXh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmrT4eVc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/X5semXh.png" alt="Visual 1"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;There are only minor differences between the code of all four languages.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;partition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fdum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;bdum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;front&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fdum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bdum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;front&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;front&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;
        &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;front&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bdum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fdum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fdum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bdum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fdum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bdum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;
                &lt;span class="n"&gt;front&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;
                &lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;
            &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;
        &lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bdum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fdum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ListNode&lt;/span&gt; &lt;span class="nf"&gt;partition&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ListNode&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;ListNode&lt;/span&gt; &lt;span class="n"&gt;fdum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ListNode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bdum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ListNode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                 &lt;span class="n"&gt;front&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fdum&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bdum&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;front&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bdum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fdum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fdum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bdum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;front&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fdum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bdum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;front&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bdum&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fdum&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>CAP Theorem: Availability vs consistency</title>
      <author>Vishnu Chilamakuru</author>
      <pubDate>Wed, 14 Apr 2021 07:53:38 +0000</pubDate>
      <link>https://dev.to/vishnuchilamakuru/cap-theorem-availability-vs-consistency-582c</link>
      <guid>https://dev.to/vishnuchilamakuru/cap-theorem-availability-vs-consistency-582c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#availability-vs-consistency"&gt;
  &lt;/a&gt;
  Availability vs consistency
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#cap-theorem"&gt;
  &lt;/a&gt;
  CAP theorem
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BPUiktlW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.imgur.com/bgLMI2u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BPUiktlW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.imgur.com/bgLMI2u.png" alt="CAP Theorem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a distributed computer system, you can only support two of the following guarantees:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Consistency&lt;/strong&gt; - Every read receives the most recent write or an error&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Availability&lt;/strong&gt; - Every request receives a response, without guarantee that it contains the most recent version of the information&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Partition Tolerance&lt;/strong&gt; - The system continues to operate despite arbitrary partitioning due to network failures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Networks aren't reliable, so you'll need to support partition tolerance.  You'll need to make a software tradeoff between consistency and availability.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cp-consistency-and-partition-tolerance"&gt;
  &lt;/a&gt;
  CP - consistency and partition tolerance
&lt;/h4&gt;

&lt;p&gt;Waiting for a response from the partitioned node might result in a timeout error.  CP is a good choice if your business needs require atomic reads and writes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ap-availability-and-partition-tolerance"&gt;
  &lt;/a&gt;
  AP - availability and partition tolerance
&lt;/h4&gt;

&lt;p&gt;Responses return the most recent version of the data available on a node, which might not be the latest.  Writes might take some time to propagate when the partition is resolved.&lt;/p&gt;

&lt;p&gt;AP is a good choice if the business needs allow for &lt;a href="#eventual-consistency"&gt;eventual consistency&lt;/a&gt; or when the system needs to continue working despite external errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consistency-patterns"&gt;
  &lt;/a&gt;
  Consistency patterns
&lt;/h2&gt;

&lt;p&gt;With multiple copies of the same data, we are faced with options on how to synchronize them so clients have a consistent view of the data.  Recall the definition of consistency from the &lt;a href="#cap-theorem"&gt;CAP theorem&lt;/a&gt; - Every read receives the most recent write or an error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#weak-consistency"&gt;
  &lt;/a&gt;
  Weak consistency
&lt;/h3&gt;

&lt;p&gt;After a write, reads may or may not see it.  A best effort approach is taken.&lt;/p&gt;

&lt;p&gt;This approach is seen in systems such as memcached.  Weak consistency works well in real time use cases such as VoIP, video chat, and realtime multiplayer games.  For example, if you are on a phone call and lose reception for a few seconds, when you regain connection you do not hear what was spoken during connection loss.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eventual-consistency"&gt;
  &lt;/a&gt;
  Eventual consistency
&lt;/h3&gt;

&lt;p&gt;After a write, reads will eventually see it (typically within milliseconds).  Data is replicated asynchronously.&lt;/p&gt;

&lt;p&gt;This approach is seen in systems such as DNS and email.  Eventual consistency works well in highly available systems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strong-consistency"&gt;
  &lt;/a&gt;
  Strong consistency
&lt;/h3&gt;

&lt;p&gt;After a write, reads will see it.  Data is replicated synchronously.&lt;/p&gt;

&lt;p&gt;This approach is seen in file systems and RDBMSes.  Strong consistency works well in systems that need transactions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#availability-patterns"&gt;
  &lt;/a&gt;
  Availability patterns
&lt;/h2&gt;

&lt;p&gt;There are two main patterns to support high availability: &lt;strong&gt;fail-over&lt;/strong&gt; and &lt;strong&gt;replication&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#failover"&gt;
  &lt;/a&gt;
  Fail-over
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#activepassive"&gt;
  &lt;/a&gt;
  Active-passive
&lt;/h4&gt;

&lt;p&gt;With active-passive fail-over, heartbeats are sent between the active and the passive server on standby.  If the heartbeat is interrupted, the passive server takes over the active's IP address and resumes service.&lt;/p&gt;

&lt;p&gt;The length of downtime is determined by whether the passive server is already running in 'hot' standby or whether it needs to start up from 'cold' standby.  Only the active server handles traffic.&lt;/p&gt;

&lt;p&gt;Active-passive failover can also be referred to as master-slave failover.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#activeactive"&gt;
  &lt;/a&gt;
  Active-active
&lt;/h4&gt;

&lt;p&gt;In active-active, both servers are managing traffic, spreading the load between them.&lt;/p&gt;

&lt;p&gt;If the servers are public-facing, the DNS would need to know about the public IPs of both servers.  If the servers are internal-facing, application logic would need to know about both servers.&lt;/p&gt;

&lt;p&gt;Active-active failover can also be referred to as master-master failover.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-failover"&gt;
  &lt;/a&gt;
  Disadvantages: failover
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fail-over adds more hardware and additional complexity.&lt;/li&gt;
&lt;li&gt;There is a potential for loss of data if the active system fails before any newly written data can be replicated to the passive.&lt;/li&gt;
&lt;/ul&gt;





&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#if-you-like-what-you-read-and-want-to-see-more-please-support-me-with-coffee-or-a-book-"&gt;
  &lt;/a&gt;
  If you like what you read and want to see more, please support me with  &lt;a href="https://www.buymeacoffee.com/vishnuchi"&gt;coffee or a book&lt;/a&gt;  ;)
&lt;/h3&gt;

</description>
      <category>database</category>
      <category>architecture</category>
      <category>programming</category>
      <category>performance</category>
    </item>
  </channel>
</rss>
