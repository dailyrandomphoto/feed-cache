<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>CSS Grid Cheat Sheet 🔥</title>
      <author>Mariana Simon</author>
      <pubDate>Thu, 15 Jul 2021 16:39:06 +0000</pubDate>
      <link>https://dev.to/simonpaix/css-grid-cheat-sheet-2ll8</link>
      <guid>https://dev.to/simonpaix/css-grid-cheat-sheet-2ll8</guid>
      <description>&lt;p&gt;Hi dev friends!&lt;/p&gt;

&lt;p&gt;I made this CSS Grid Cheat Sheet that fits on one page. I hope this will help you learn the grid layout. Please let me know what you think of it :)  &lt;/p&gt;

&lt;p&gt;If you want to see more resources like this one and coding tips, you can follow me on &lt;a href="https://twitter.com/simonpaix"&gt;Twitter&lt;/a&gt; 🚀 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X30jomsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/simonpaix/images/blob/main/blog/LearnPine_Grid_CheatSheet.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X30jomsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/simonpaix/images/blob/main/blog/LearnPine_Grid_CheatSheet.png%3Fraw%3Dtrue" alt="learnpine_grid_cheat_sheet"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>EPNS Push Notifications Arrive at DeFi on Oasis.app</title>
      <author>Olumide</author>
      <pubDate>Thu, 15 Jul 2021 16:31:14 +0000</pubDate>
      <link>https://dev.to/shittu_olumide_/epns-push-notifications-arrive-at-defi-on-oasis-app-11im</link>
      <guid>https://dev.to/shittu_olumide_/epns-push-notifications-arrive-at-defi-on-oasis-app-11im</guid>
      <description>&lt;p&gt;Dai is considered among the most reliable stablecoins because the widely circulated coin is both pegged to the US dollar and backed by MakerDAO-approved crypto collateral. Dai can be created by opening Vaults (overcollateralized debt positions) through Oasis.app, which aims to be the most trusted decentralized application to interact with the Maker Protocol and to manage vaults. EPNS is pleased to deepen its exploration of push notification use cases, using Dai by launching a pilot program to provide decentralized push notifications for monitoring Maker Vaults on Oasis.app. Maker Vault owners can now enjoy a trading edge by receiving notifications when a price of an asset goes above or below a certain threshold, changing the collateralization ratio, and then being aware when the Vault risks being liquidated .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maximize-defi-opportunities-with-oasisapp-and-maker-vaults-powered-by-push-notifications"&gt;
  &lt;/a&gt;
  Maximize DeFi Opportunities With Oasis.app and Maker Vaults Powered by Push Notifications
&lt;/h3&gt;

&lt;p&gt;With a market cap surpassing $5 billion, the usage of the Dai stablecoin is growing, particularly in DeFi applications where it is being combined in a multitude of ways with DeFi products to reduce price volatility. Oasis.app is the most trusted way to access the Maker Protocol so anyone can borrow and use Dai anywhere through its simple user interface.&lt;br&gt;
Oasis.app makes it easy to borrow Dai by opening a Maker Vault, a deposit account for MakerDAO’s Dai. After connecting a wallet to Oasis, users can open a Vault, deposit collateral and generate Dai against it. Borrowers can choose from more than 30 crypto collateral sources (e.g., ETH, WBTC, USDT), with more added weekly, and all with their own risk parameters and minimum collateralisation ratios. Oasis connects to more than half a dozen wallets making it easy to collateralize Dai and borrow with no fixed repayment schedules.&lt;/p&gt;

&lt;p&gt;Managing DeFi services, however, involves a lot of checking of different sources and messages from multiple platforms yet no central messaging service exists. One essential element is missing, decentralized push notifications. In order to worry less about what might happen, Oasis.app users are highly dependent on a notification service that would help them to manage their Maker Vaults, including:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When the Vault might be at risk of liquidation on the next price update due to a sudden price drop&lt;/li&gt;
&lt;li&gt;When the Vault has reached a certain collateralization ratio that you’d like to take a certain action at, either to buy additional collateral, or repay.&lt;/li&gt;
&lt;li&gt;When risk parameters, such as Stability Fee’s or Debt Ceiling changes are made by Maker Governance that affect a Vault you own.
Though Oasis.app simplifies access to the Maker Protocol, the lack of a decentralized push notification service, until now, means important notifications are distributed to multiple places, such as email or a Twitter or Telegram account. A push notification service sending all notifications to the Oasis.app wallet would allow all platform users to receive and take timely action on important DeFi notifications while still protecting data privacy as Oasis.app users interact with internal and external data sources.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Receiving notifications directly within Oasis.app will allow our customers to live a safer and conscious experience, without always worrying about checking different sources. It has always been one of the most asked-for features and that is why this partnership is crucial to us.- Chris Bradbury, CEO of Oasis.app&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-epns-solution"&gt;
  &lt;/a&gt;
  The EPNS Solution
&lt;/h2&gt;

&lt;p&gt;The EPNS decentralized push notification service sends timely notifications through a single source of communication, the investor’s wallet. All Maker Vault notifications will go directly to the user’s Oasis.app wallet where they can track vault positions and take immediate action. EPNS is the first native, on-chain notification solution to stream all crucial time-sensitive information to a user’s wallet. The partnership benefits to Oasis.app users include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;EPNS will send all data notifications directly to Oasis.app user wallets.&lt;/li&gt;
&lt;li&gt;The EPNS and Oasis.app teams will adapt the highly customizable EPNS protocol to meet the various push notification needs of Dai users in DeFi markets.&lt;/li&gt;
&lt;li&gt;EPNS channels and users can customize their notification settings for different notification requirements.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-epns-will-support-oasisapp"&gt;
  &lt;/a&gt;
  How EPNS Will Support Oasis.app
&lt;/h2&gt;

&lt;p&gt;Under this pilot program, EPNS is building a dedicated channel for Oasis.app (see our lightpaper for definitions of channels, services, and more). Oasis.app users can subscribe to the Oasis.app channel to receive customized notifications to their wallets. Through collaboration with the Oasis.app team, we will gain insight into the push notification needs of Maker Vault and Dai stablecoin users and what they want from the EPNS protocol.&lt;/p&gt;

&lt;p&gt;Decentralized notifications will provide real-time Maker Vault data to Oasis.app Vault owners so all users can act in a timely manner and benefit from real time information on all their open Vaults.Meanwhile, all users can continue to operate within the private, secure ecosystem of Oasis.app across all DeFi services, without having to deal with integration pains across many different protocols.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Maker Vault is a powerful tool leveraging the stablecoin Dai to make borrowing, saving, and trading more efficient. Push notifications to the Oasis.app will ensure users can act in a timely manner and optimize their vault and DeFi positions, commented Harsh Rajat, Founder and Project Lead of Ethereum Push Notification Service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Looking forward, we foresee many new EPNS notification channels being introduced for Oasis.app, in particular, and DeFi stablecoin uses in general. The use of collateral to reduce volatility and other risks is making decentralized finance accessible to more people. Push notifications will be essential to enable future Oasis.app users to take advantage of the best collateralization and liquidation rates. Thus, we view decentralized push notifications as an important service that will accelerate the mass adoption of DeFi. Since Oasis.app is at the forefront of creating a unified stablecoin-powered DeFi hub, we expect our partnership to yield many new useful notification services and features for the decentralized finance market.&lt;/p&gt;

&lt;p&gt;The long-term goal of the pilot program is to develop a notification system for future versions of Oasis.app. DeFi users — who can easily integrate the EPNS protocol into their wallet — will expect push notifications to be an integral service. Going forward, we also plan to work closely with Oasis.app users to create new messaging solutions to meet their evolving push notification needs.&lt;br&gt;
We are pleased to be partnering with Oasis.app and anticipate EPNS push notifications becoming an indispensable tool in stablecoin DeFi markets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-oasisapp"&gt;
  &lt;/a&gt;
  About Oasis.app
&lt;/h2&gt;

&lt;p&gt;Oasis.app is the home for everything you want to accomplish with Dai. A decentralized application that runs on the Ethereum blockchain, Oasis aims to be the most trusted app to access the Maker protocol, get Dai and in general to deploy your capital into DeFi. Dai is a better, smarter digital currency for everyone. It is the world’s first unbiased currency and its value consistently tracks the US Dollar, which means it doesn’t suffer from the volatility associated with many other digital currencies.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Making your console log statements stand out</title>
      <author>Tulsi Prasad</author>
      <pubDate>Thu, 15 Jul 2021 16:20:31 +0000</pubDate>
      <link>https://dev.to/heytulsiprasad/making-your-console-log-statements-stand-out-449n</link>
      <guid>https://dev.to/heytulsiprasad/making-your-console-log-statements-stand-out-449n</guid>
      <description>&lt;p&gt;Yes, the above image is from the console and you can customize the text however you like. To know how keep reading till the end.&lt;/p&gt;

&lt;p&gt;It's been a while since my last post, it's because I got into learning some interesting stuff and undoubtedly writer's block was back. But recently, while working on a large repository that had a lot of stuff logged in the console I wanted a way to clear all the clutter and make my console statements stand out from the rest.&lt;/p&gt;

&lt;p&gt;Here is how I was able to do that and how you could too.&lt;/p&gt;

&lt;p&gt;So these are the possible options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using different console methods&lt;/li&gt;
&lt;li&gt;Using various format specifiers (believe me, this is magic ✨)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#using-different-console-methods"&gt;
  &lt;/a&gt;
  Using different console methods
&lt;/h2&gt;

&lt;p&gt;You might already know some of the basic ones, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;console.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.info&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.warn&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But some of the more cool ones, are:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-consoletable-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.table&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This can be used to log large nested objects or arrays so you don't have to go through expanding each key to view the whole thing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;peoples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Richard Hendricks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Berkely&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4254-024-8162&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Christiansen Frederikke&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Madras&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4987-024-2562&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;California&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3143-344-342&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;peoples&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nx_tcCSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tck0mbsrmu9efvob7nn9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nx_tcCSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tck0mbsrmu9efvob7nn9.png" alt="Logging arrays into console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also log objects as such:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SVTaWSgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjax2iox28dz6bw95t2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SVTaWSgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjax2iox28dz6bw95t2r.png" alt="Logging objects into console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-consolegroup-endraw-and-raw-consolegroupend-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.group&lt;/code&gt; and &lt;code&gt;console.groupEnd&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;You can group a set of console logs having a particular meaning apart from the rest using this method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Me and my boys&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;peoples&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Weather is very beautiful today ☁&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Don't fall for the beautiful weather&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what it'll return:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9IhZd-8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zu88z9mqt2rwli2626se.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9IhZd-8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zu88z9mqt2rwli2626se.png" alt="Demostration of console group"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro Tip:&lt;/strong&gt; Use &lt;code&gt;console.groupCollapsed()&lt;/code&gt; to have the logs closed by default.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-consoletime-endraw-and-raw-consoletimeend-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.time()&lt;/code&gt; and &lt;code&gt;console.timeEnd()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;If at all you're ever interested to know how much time a particular block of code takes to run, you can achieve this using &lt;code&gt;console.time()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Zzzz!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ks3xBZ0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t21ckmdkx3t51bn1s26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ks3xBZ0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t21ckmdkx3t51bn1s26.png" alt="Demonstration of console time"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-consolecountlabel-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.count(label)&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;It logs incrementing counter values starting from 0. You can use &lt;code&gt;label&lt;/code&gt; to distinguish between different counters. To stop one from counting above, you've to use &lt;code&gt;console.countReset(label)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Awesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Awesome: 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Awesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Awesome: 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Awesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Awesome: 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Awesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Awesome: 4&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countReset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Awesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Awesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Awesome: 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-format-specifiers"&gt;
  &lt;/a&gt;
  Using format specifiers
&lt;/h2&gt;

&lt;p&gt;Believe it or not, console logs can be more than just simple messages. You can include an eye-catching message or something more convincing as your favorite dog image.&lt;/p&gt;

&lt;p&gt;All because you can use format specifiers inside them. How?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-of-available-format-specifiers"&gt;
  &lt;/a&gt;
  List of available format specifiers
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;%s ⇒ Formats as string&lt;/li&gt;
&lt;li&gt;%i ⇒ Formats as integer&lt;/li&gt;
&lt;li&gt;%f ⇒ Formats as float&lt;/li&gt;
&lt;li&gt;%O ⇒ Formats as object (yes that's capital O as in Oregano)&lt;/li&gt;
&lt;li&gt;%o ⇒ Formats as DOM element&lt;/li&gt;
&lt;li&gt;%c ⇒ Formats as CSS ✨&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#formats-as-string-integer-float"&gt;
  &lt;/a&gt;
  Formats as string, integer, float
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%s, told me that we're going to mall today with %s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Alan, told me that we're going to mall today with Mike&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;We had %i mangoes today&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// We had 56 mangoes today&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Did you know, Tesla Model S can reach 0 to 60 mph in %f seconds?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mf"&gt;2.3&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Did you know, Tesla Model S can reach 0 to 60 mph in 2.3 seconds?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#formats-as-object"&gt;
  &lt;/a&gt;
  Formats as Object
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YdqRiOVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/529hqaizkr2632k82cy2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YdqRiOVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/529hqaizkr2632k82cy2.png" alt="Demonstration of using %O format specifier in console logs for objects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#formats-as-dom-element"&gt;
  &lt;/a&gt;
  Formats as DOM Element
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YytyJop3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bisb43uebsjsdivfdx2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YytyJop3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bisb43uebsjsdivfdx2.png" alt="Demonstration of using %o format specifier in console logs for DOM elements"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#formats-as-css"&gt;
  &lt;/a&gt;
  Formats as CSS
&lt;/h3&gt;

&lt;p&gt;Adding your CSS to the second argument of console log by separating each of them with &lt;code&gt;;&lt;/code&gt; does the trick.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cThis is actually very interesting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: yellow; font-size: 35px; background-color: red;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oj4DJadn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57xn436h7iu2q774v9j8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oj4DJadn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57xn436h7iu2q774v9j8.png" alt="Demonstration of using styles in console log"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also add multiple styles in the same log by using multiple %c specifiers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cThis is actually %cvery interesting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: blue; font-size: 55px; background-color: yellow;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-size: 55px; background-color: blue; color: yellow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oBeWvful--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2ek1vlonsr015xizlwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oBeWvful--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2ek1vlonsr015xizlwa.png" alt="Demonstration of using multiple style format specifer in single log"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If that looks a bit messy and you have a lot of styles to give you can put the styles in a separate array and use them wisely.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;blackBackground&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-size: 50px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-color: black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; ;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;whiteBackground&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-size: 50px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-color: white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; ;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cAwesome stuff is %ccoming your way&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;blackBackground&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;whiteBackground&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aLhexEE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmbamval6j5486j885gh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aLhexEE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmbamval6j5486j885gh.png" alt="Demonstration of using multi styles with join helper in console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last but not the least, a picture says a thousand words.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;backgroundImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-image: url(https://source.unsplash.com/random/1200x800)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-size: cover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: hotpink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;padding: 100px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-weight: bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-size: 25px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; ;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cPicture says a thousand words&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;backgroundImage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m2WPxIEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3meg1y1mfhpi1c7k1yi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m2WPxIEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3meg1y1mfhpi1c7k1yi.png" alt="Demonstration of console log with text on image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can do all sorts of manipulation and get more creative with the power of CSS, it's up to you.&lt;/p&gt;

&lt;p&gt;If you're still wondering how the above banner was made, well here's that code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;backgroundImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-image: url(https://i.pinimg.com/originals/5b/43/02/5b4302c2f6413454c782aeec866143cf.gif)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-size: cover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;padding: 100px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-weight: bolder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-size: 40px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-webkit-text-stroke-width: 1px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-webkit-text-stroke-color: yellow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-transform: uppercase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-align: center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;letter-spacing: 1px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; ;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cMay the force be with you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;backgroundImage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KL7vDHdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/51XzT21.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KL7vDHdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/51XzT21.gif" alt="https://i.imgur.com/51XzT21.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it, super easy! 😃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;For me, all that mattered was for the logs to stand out and be more catchy on pursuit of which I found out a ton of more cool stuff we can do, hope this gives you more clarity on the gem of a function, that console is.&lt;/p&gt;

&lt;p&gt;Catch more updates on &lt;a href="https://twitter.com/heytulsiprasad"&gt;@heytulsiprasad&lt;/a&gt; 👋&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Using roadmap.sh for structured self-learning</title>
      <author>Karin</author>
      <pubDate>Thu, 15 Jul 2021 16:13:46 +0000</pubDate>
      <link>https://dev.to/khenhey/using-roadmap-sh-for-structured-self-learning-29pd</link>
      <guid>https://dev.to/khenhey/using-roadmap-sh-for-structured-self-learning-29pd</guid>
      <description>&lt;p&gt;Cover image by  &lt;a href="https://unsplash.com/@jerrykavan?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jaromír Kavan&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/roadmap?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tech industry evolves quickly and as a beginner this can make you feel like you are always behind. One of the things I really had to learn is that the basics are always the right priority to dive into. It does not matter what career goal you have, be it frontend, backend or anything in between or beyond. Understanding HTML, CSS and one of the many amazing programming language out there will be a good start to your career.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-language-to-choose"&gt;
  &lt;/a&gt;
  Which language to choose?
&lt;/h2&gt;

&lt;p&gt;That depends on your own personal context. If you already landed a job and are expected to learn a specific language for it: choose that one. If you feel excited for another: go for the other one. When self-learning the key thing is motivation. Work with what makes you excited. Once you learn one language, the others can easily follow. Don’t feel rushed or pressured into something that does not ‘spark joy’.&lt;/p&gt;

&lt;p&gt;I started my journey through the RailsGirls community. So it felt right for me to follow some Ruby courses because I already knew people who could help me a little and it was the only language I had already seen. When I got hired as a frontend developer I picked up learning JavaScript. It was fun to see how some stuff was the same, and where the two languages differed. Again: once you know one language, others can easily follow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-dont-know-what-you-do-not-know"&gt;
  &lt;/a&gt;
  You don’t know what you do not know
&lt;/h2&gt;

&lt;p&gt;One of the reasons it is so hard when you are a beginner in tech is because you probably don’t know the gaps in your knowledge. Having a mentor, or knowing people who have more experience to help point into the right direction can be of huge help here. Luckily I was surrounded by an amazing group of people to point me into the right direction. Still, I was craving some more structure to help me set priorities when it came to learning the essentials.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#roadmapsh"&gt;
  &lt;/a&gt;
  Roadmap.sh
&lt;/h2&gt;

&lt;p&gt;Through some luck I found &lt;a href="https://twitter.com/kamranahmedse"&gt;Kamran Ahmed’s&lt;/a&gt; roadmap.sh. I checked out the frontend roadmap and was amazed at the way it helped me gain insight into things I did not know I could dive into. This is how I implemented it into my own learning:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I created a markdown file and wrote down the list of things I wanted to learn using the roadmap.&lt;/li&gt;
&lt;li&gt;I went through the list and marked the ones that motivated me to learn, and the ones I knew could help me build the projects I was working on. I gave those extra priority.&lt;/li&gt;
&lt;li&gt;I went through the list again and for each topic I started searching the web for good resources that I could study to learn that subject matter. I did not study them immediately. I was just collecting and linking to those resources in the file. (Note: nowadays roadmap.sh has &lt;a href="https://roadmap.sh/guides"&gt;some nice resources&lt;/a&gt; themselves for some subjects, make sure to check them out!).&lt;/li&gt;
&lt;li&gt;Every quarter I chose some subjects and studied the resources.&lt;/li&gt;
&lt;li&gt;When a subject was done, I had the satisfaction of checking the checkbox in front of it ✨&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#projects-will-kickstart-your-career"&gt;
  &lt;/a&gt;
  Projects will kickstart your career
&lt;/h2&gt;

&lt;p&gt;Last but not least: I noticed that through work and building personal projects, I was already able to check off some of the boxes on my list. Working on actual projects actually helps you learn so much quicker than doing courses, reading articles, books or watching videos. If you haven’t tried building something yourself yet: go for it! Find something that you think would be fun to build. Maybe try using a fun API that is available on the web. Like &lt;a href="https://api.nasa.gov/"&gt;NASA&lt;/a&gt;, &lt;a href="https://developer.spotify.com/documentation/web-api/"&gt;Spotify&lt;/a&gt; or the &lt;a href="https://swapi.dev/"&gt;Star Wars API&lt;/a&gt;. It might feel daunting to start, but if you split up the project in small tasks it will become much easier.&lt;/p&gt;

&lt;p&gt;Good luck for all of you out there starting on your journeys. Don’t forget that the only person you should compare yourself with, is yourself. And every new thing you learn is one more thing you did not know before. Be nice to yourself and others, and build fun stuff.&lt;/p&gt;

&lt;p&gt;Originally posted on &lt;a href="https://khendrikse.github.io/post/2021-07-15-using-roadmapsh-for-structured-self-learning"&gt;my own website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>learning</category>
    </item>
    <item>
      <title>Microservices Authentication Strategies: Theory to Practice</title>
      <author>Tom Zach</author>
      <pubDate>Thu, 15 Jul 2021 16:12:11 +0000</pubDate>
      <link>https://dev.to/aspecto/microservices-authentication-strategies-theory-to-practice-86i</link>
      <guid>https://dev.to/aspecto/microservices-authentication-strategies-theory-to-practice-86i</guid>
      <description>&lt;p&gt;In this article, we will walk through common ways of implementing authentication microservices. &lt;/p&gt;

&lt;p&gt;We will have 2 parts: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;1.The theoretical part&lt;/em&gt; talking about OpenID Connect, OAuth 2.0, JWT, etc.&lt;/p&gt;

&lt;p&gt;Here I try to save you time wandering through the web and giving you all the basics you need to understand in order to start coding.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2.The practical part, where we will implement two Node.js microservices&lt;/em&gt;, one responsible for user authentication via google login, another responsible for greeting the user that has a token created by the previous service. Plus, we add a react JS app to interact with those services.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-theory"&gt;
  &lt;/a&gt;
  The Theory
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-is-authentication"&gt;
  &lt;/a&gt;
  What is authentication?
&lt;/h2&gt;

&lt;p&gt;Authentication is the answer users give us when we ask them “Who are you?”. For us to believe users, they need to go through a process providing some proof.&lt;/p&gt;

&lt;p&gt;For example – by providing a username &amp;amp; password or by using a social login provider.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-authorization"&gt;
  &lt;/a&gt;
  What is authorization?
&lt;/h2&gt;

&lt;p&gt;Authorization is usually relevant when we already know who the user is, thus the user is authenticated (unless we allow anonymous access, but we won’t get into that use case here).&lt;/p&gt;

&lt;p&gt;Our users want to perform certain actions in our system, and the process of checking if they are allowed to do it or not is called authorization.&lt;/p&gt;

&lt;p&gt;(Note: The reason we’re talking about this authorization in an authentication article is that these terms are often confused, and we need to understand it to understand concepts like OAuth 2.0 &amp;amp; OpenID Connect)&lt;/p&gt;

&lt;p&gt;A good real-world analogy for both of the above would be while checking in a hotel room. Authentication is your passport, and authorization is if I’m allowed to enter a certain room (because I booked it).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#oauth-20"&gt;
  &lt;/a&gt;
  OAuth 2.0
&lt;/h2&gt;

&lt;p&gt;OAuth 2.0 is an authorization protocol. To understand it best, let’s remember the days when it did not exist. In the image below you can see a Facebook screen asking for our Gmail password to search for our contacts on Facebook and add them as friends.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8lSdDC7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwgwoqg0vuju4yahf646.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8lSdDC7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwgwoqg0vuju4yahf646.png" alt="Facebook from the days before OAuth"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Facebook from the days before OAuth, source: &lt;a href="https://oauth.net/videos/"&gt;https://oauth.net/videos/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Think of what this means: Facebook developers would have access to your Gmail password, and essentially all your Gmail data including emails.&lt;/p&gt;

&lt;p&gt;OAuth enables an app like Gmail to grant access solely to specific resources from that app, in this case, your contacts. It does so by creating an access token that can talk to an API and retrieve this data. &lt;/p&gt;

&lt;p&gt;OAuth provides us with 2 tokens: a refresh toke and an access token.&lt;/p&gt;

&lt;p&gt;The access token is short-lived and enables you to access the restricted API.&lt;/p&gt;

&lt;p&gt;The refresh token’s role is to enable us to obtain new access tokens, without requiring the user to log in each time our access token expires, which results in a better user experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#openid-connect-oidc"&gt;
  &lt;/a&gt;
  OpenID Connect (OIDC)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://openid.net/connect/"&gt;OpenID&lt;/a&gt; is an authentication protocol built on top of OAuth 2.0 and its main addition is the ID token. The ID token is intended for use with client-side applications, whereas the access token provided by OAuth 2.0 is meant to be used with the resource server (the API).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ljpsmRlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4em48u24tw3zkkm5eqj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ljpsmRlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4em48u24tw3zkkm5eqj3.png" alt="OAuth token audiences"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;OAuth token audiences, source: &lt;a href="https://oauth.net/videos/"&gt;https://oauth.net/videos/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jwt"&gt;
  &lt;/a&gt;
  JWT
&lt;/h2&gt;

&lt;p&gt;JWT – &lt;a href="https://jwt.io/"&gt;Json Web Token&lt;/a&gt; is a standard method for representing claims securely between two parties. The information in the token is digitally signed to avoid tampering. &lt;/p&gt;

&lt;p&gt;While OAuth doesn’t enforce token type, a lot of implementations use JWT tokens to store the refresh &amp;amp; access tokens. OpenID Connect on the other hand – defines that the token must be in the&lt;br&gt;
JWT format.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#nodejs-microservices-authentication-strategies"&gt;
  &lt;/a&gt;
  NodeJS Microservices Authentication Strategies
&lt;/h2&gt;

&lt;p&gt;Now that we have a basic understanding of the relevant terms (and before we dive into practice) we can start exploring possibilities to implement authentication in our microservices:&lt;/p&gt;

&lt;p&gt;1.&lt;em&gt;The obvious way&lt;/em&gt;: use a database to store user data, write your logic for creating users, registration, store passwords, etc. You can then create a form in your client-side where the user logs in, and once logged in you can store user information wherever you see fit (cookies, app state, etc).&lt;/p&gt;

&lt;p&gt;2.&lt;em&gt;OpenID Connect&lt;/em&gt;: you can use services like Google &amp;amp; Facebook that would enable your users to log in using their corresponding accounts. Then, you create a corresponding user in your database. Here you don’t need to implement any user creation UI or store passwords.&lt;/p&gt;

&lt;p&gt;When your user logs in you can store the JWT token in a cookie, and your microservice could know who the user is according to that token. It could also allow or forbid certain actions based on that, but that’s out of the scope of this post.&lt;/p&gt;

&lt;p&gt;You could of course combine this with option one, having some of the users created via identity providers like Google/Facebook and others in your own system.&lt;/p&gt;

&lt;p&gt;3.&lt;em&gt;Use an identity as a service tool like &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt; / &lt;a href="https://www.okta.com/"&gt;Okta&lt;/a&gt;&lt;/em&gt;, which essentially helps with both use cases above and can save you time implementing everything on your own. I won’t dive into this one, but you can check their websites for more info.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#for-the-practical-part-of-this-guide-i-have-selected-option-2-because-i-feel-it-gives-the-most-benefit-in-understanding-authentication-in-nodejs-and-you-will-most-likely-use-it-anyway-whether-directly-or-under-the-hood"&gt;
  &lt;/a&gt;
  &lt;em&gt;For the practical part of this guide I have selected option 2, because I feel it gives the most benefit in understanding authentication in Node.js and you will most likely use it anyway, whether directly or under the hood.&lt;/em&gt;
&lt;/h4&gt;
&lt;h1&gt;
  &lt;a href="#the-practice"&gt;
  &lt;/a&gt;
  The Practice
&lt;/h1&gt;

&lt;p&gt;Let’s begin implementing our service with OpenID connect enabled.&lt;/p&gt;

&lt;p&gt;Here’s what we’re going to create:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;account-service – a rest API that handles user creation. We will be using passport with passport-google-oauth strategy, which is based on OpenID Connect.&lt;/li&gt;
&lt;li&gt;greeting-service – a simple rest api that greets the user.&lt;/li&gt;
&lt;li&gt;A React app that lets the user login with google by consuming account-service and greets the user consuming the greeting-service.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#step-1-setting-up-google-project-for-login"&gt;
  &lt;/a&gt;
  Step 1 – Setting up Google project for login
&lt;/h2&gt;

&lt;p&gt;1.Go to &lt;a href="https://console.cloud.google.com/"&gt;https://console.cloud.google.com/&lt;/a&gt; and register if you haven’t done so yet&lt;/p&gt;

&lt;p&gt;2.Create a new project&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7qKntzDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th0gbwnfpxa9h1mlr69n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7qKntzDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th0gbwnfpxa9h1mlr69n.png" alt="Google OAuth project creation"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Google OAuth project creation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;3.Select the newly created project, and click on Create Credentials&lt;/p&gt;

&lt;p&gt;4.Select OAuth Client ID&lt;/p&gt;

&lt;p&gt;5.Select Configure Consent Screen&lt;/p&gt;

&lt;p&gt;6.Select Internal &amp;amp; Hit Create&lt;/p&gt;

&lt;p&gt;7.Fill in the name and emails (you can leave the rest blank for now, we will get to it later)&lt;/p&gt;

&lt;p&gt;8.In the scopes screen, click add scopes, and then select &lt;em&gt;userinfo.email&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Xv_6SQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tee2xf1usjxb1jh5p2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Xv_6SQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tee2xf1usjxb1jh5p2i.png" alt="Updating selected Google scopes&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Updating selected Google scopes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;9.Hit Continue. Now we have our consent screen. Let’s go back to credentials &amp;amp; hit create credentials and choose OAuth Client ID&lt;/p&gt;

&lt;p&gt;10.Choose your name, and for authorized redirect URI – add “&lt;a href="http://localhost:5000/auth/google/callback%E2%80%9D"&gt;http://localhost:5000/auth/google/callback”&lt;/a&gt; and hit create&lt;/p&gt;

&lt;p&gt;11.You should now receive a pop-up with client id &amp;amp; client secret. Keep them, we will be using them soon&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-creating-accountservice"&gt;
  &lt;/a&gt;
  Step 2 – Creating account-service
&lt;/h2&gt;

&lt;p&gt;Note: throughout this tutorial, for the sake of simplicity we’re using the default code generated with express-generator. So no good-looking typescript-like things to see here.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-create-the-project-with-expressgenerator-amp-perform-the-installs-needed"&gt;
  &lt;/a&gt;
  1. Create the project with express-generator &amp;amp; perform the installs needed
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx express-generator --no-view account-service
cd account-service
npm install
npm install --save jsonwebtoken passport passport-google-oauth cors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-express-generator-created-some-default-routes"&gt;
  &lt;/a&gt;
  2. Express generator created some default routes.
&lt;/h3&gt;

&lt;p&gt;We won’t be using the users’ one, but use the index.js. So I’m deleting references to it. The initial project looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZrvOR2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qps2kk7spwqkyy76cjn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZrvOR2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qps2kk7spwqkyy76cjn.png" alt="Express generator"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-in-binwww-lets-change-the-port-from-3000-to-5000"&gt;
  &lt;/a&gt;
  3. In bin/www let’s change the port from 3000 to 5000
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var port = normalizePort(process.env.PORT || '5000');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#4-add-passport"&gt;
  &lt;/a&gt;
  4. Add passport
&lt;/h3&gt;

&lt;p&gt;Passport is authentication middleware for Nodejs. It’s very simple to use and supports all the options we need so I chose to use it. Passport uses strategies to handle certain types of login. passport-google-login is a strategy for logging in with Google and is based on OpenID Connect.&lt;/p&gt;

&lt;p&gt;In our app.js file – let’s add the following code so that it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const cors = require('cors');
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth').OAuth2Strategy;

const indexRouter = require('./routes/index');

const app = express();
// This is here for our client side to be able to talk to our server side. you may want to be less permissive in production and define specific domains.
app.use(cors());

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));


app.use(passport.initialize());
app.use(passport.session());

app.use('/', indexRouter);

passport.serializeUser(function(user, cb) {
 cb(null, user);
});

passport.deserializeUser(function(obj, cb) {
 cb(null, obj);
});

passport.use(new GoogleStrategy({
   clientID: 'your-google-client-id',
   clientSecret: 'your-google-client-secret',
   callbackURL: "http://localhost:5000/auth/google/callback"
 },
 function(accessToken, refreshToken, profile, done) {
   // here you can create a user in the database if you want to
   return done(null, profile);
 }
));

module.exports = app;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice we have a few interesting things here. &lt;/p&gt;

&lt;p&gt;One – we added cors for the client-side (localhost:3000) to be able to make requests from our server-side. Having security in mind – you probably want to only allow specific domains in production.&lt;/p&gt;

&lt;p&gt;Serialize &amp;amp; deserialize user – these are functions responsible for serializing &amp;amp; deserializing the user to and from the session.&lt;/p&gt;

&lt;p&gt;GoogleStrategy – this is how we tell Passport we would be using google authentication.&lt;/p&gt;

&lt;p&gt;Remember the client id &amp;amp; secret you saved earlier? Now is a good time to insert them. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-adding-authentication-routes"&gt;
  &lt;/a&gt;
  5. Adding authentication routes
&lt;/h3&gt;

&lt;p&gt;Now let’s go to the routes/index.js file and add the relevant routes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const router = express.Router();
const passport = require('passport');
const jwt = require('jsonwebtoken');

router.get('/', function(req, res, next) {
 res.render('index', { title: 'Express' });
});

const TOKEN_SECRET = 'SECRET';

router.get('/auth/google',
 passport.authenticate('google', { scope : ['profile', 'email'] }));

router.get('/auth/google/callback',
 passport.authenticate('google', { failureRedirect: '/error' }),
 function(req, res) {
   const token = jwt.sign({ id: req.user.sub, name: req.user.name }, TOKEN_SECRET, {
     expiresIn: 60 * 60,
   });
   res.cookie('auth', token, { httpOnly: true });
   res.redirect('http://localhost:3000/');
});

module.exports = router;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TOKEN_SECRET – we will be using this to sign our JWT token.&lt;/p&gt;

&lt;p&gt;/auth/google – the actual google login route. &lt;/p&gt;

&lt;p&gt;Users are redirected to Google. Once they are done, they are redirected back to our server at /auth/google/callback. There we can create our JWT token. &lt;/p&gt;

&lt;p&gt;Once created, we add it on the request as an &lt;code&gt;httpOnly&lt;/code&gt; cookie, so that it is not accessible to javascript code (which is good in terms of security). You’ll soon see how this works on the client end.&lt;/p&gt;

&lt;p&gt;When ready, we redirect back to the client-side.&lt;/p&gt;

&lt;p&gt;Side note: we store the name inside the JWT for demonstration purposes, but you probably don’t need it, and may not be a best practice in terms of security.&lt;/p&gt;

&lt;p&gt;Now that we’re done with our account service, let’s go on to the client-side.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-create-a-clientside-react-application"&gt;
  &lt;/a&gt;
  Step 3: Create a client-side react application
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app auth-strategies-client
cd auth-strategies-client/
yarn add axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have a default react app. Let’s modify the app js file to contain a link to google authentication.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import logo from './logo.svg';
import './App.css';

function App() {
 return (
   &amp;lt;div className="App"&amp;gt;
     &amp;lt;header className="App-header"&amp;gt;
       &amp;lt;img src={logo} className="App-logo" alt="logo" /&amp;gt;
       &amp;lt;a href="http://localhost:5000/auth/google"&amp;gt;Sign in with Google&amp;lt;/a&amp;gt;
     &amp;lt;/header&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And after running it with yarn start, it looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kc6MZZug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhjaor4jixc446k51rgq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc6MZZug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhjaor4jixc446k51rgq.png" alt="React sign in with Google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on “sign in with Google”. After doing so you should be redirected to Google for authentication.&lt;/p&gt;

&lt;p&gt;(Make sure you run npm start on accounts-service for it to run in port 5000).&lt;/p&gt;

&lt;p&gt;Let’s take a look at what happened after our call to the accounts-service/auth/google/callback:&lt;/p&gt;

&lt;p&gt;1.accounts-service made a POST request to google, which returned an access token &amp;amp; id token.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N9nPEJfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z74ro7qbw6x881nvp35q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N9nPEJfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z74ro7qbw6x881nvp35q.png" alt="Aspecto live flow viewer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JY6rjRzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4b1l1ycl8keqn02vgfgb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JY6rjRzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4b1l1ycl8keqn02vgfgb.png" alt="Zoom in to the response"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Zoom in to the response&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ElMix8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h123jfct98rq8ueyaj4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ElMix8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h123jfct98rq8ueyaj4.png" alt="Zoom in to the services"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Zoom in to the services&lt;/em&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#ps-these-images-are-generated-using-aspectos-live-flow-viewer-if-youd-like-to-visualize-your-services-the-way-i-did-you-should-try-aspecto-for-free-it-takes-2-minutes-to-start-sending-traffic"&gt;
  &lt;/a&gt;
  [P.S. These images are generated using Aspecto’s &lt;a href="https://docs.aspecto.io/v1/live-flows-overview?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=authentication-strategies-theory-to-practice"&gt;live flow viewer&lt;/a&gt;. If you’d like to visualize your services the way I did, you should &lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=authentication-strategies-theory-to-practice"&gt;try Aspecto&lt;/a&gt; (for free). It takes 2 minutes to start sending traffic].
&lt;/h5&gt;

&lt;p&gt;2.It used that token to make another GET request to google to get the user’s personal info.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ymMr8bkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7fy4ady989h9sxq8wjh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ymMr8bkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7fy4ady989h9sxq8wjh.png" alt="make another GET request to google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ozwAtoTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0t5nkvioyzp33mmx699s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ozwAtoTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0t5nkvioyzp33mmx699s.png" alt="make another GET request to google, Zoom in to the response"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Zoom in to the response&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;3.Our microservice has redirected us back to the client-side, with set-cookie in the response for our auth cookie creation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IW0ZHPqu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nodyjzjwv8ev2dk9df0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IW0ZHPqu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nodyjzjwv8ev2dk9df0b.png" alt="Our microservice has redirected us back to the client-side"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore – after that, you will be redirected back to the exact same screen, with one difference: If you open your browser’s DevTools, you should see an auth cookie that is http only:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lx5yqoON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ge75cjepwo16f9sosrce.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lx5yqoON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ge75cjepwo16f9sosrce.png" alt="Browser’s DevTools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we’re ready to make use of this token. That leads us to our greeting-service. Keep the client-side handy as we will modify it soon.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-4-setting-up-the-greetingsservice"&gt;
  &lt;/a&gt;
  Step 4 – Setting up the greetings-service
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#1-lets-create-our-service"&gt;
  &lt;/a&gt;
  1. Let’s create our service
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx express-generator --no-view greetings-service
cd greetings-service
npm install
npm install --save passport passport-jwt cors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-remove-userjs-file-and-routes-in-appjs-this-is-our-fresh-start"&gt;
  &lt;/a&gt;
  2. Remove user.js file and routes in app.js, this is our fresh start:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');

const indexRouter = require('./routes/index');

const app = express();

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);

module.exports = app;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#3-modify-port-to-5001-in-binwww"&gt;
  &lt;/a&gt;
  3. Modify port to 5001 in bin/www
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var port = normalizePort(process.env.PORT || '5001');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#4-set-up-passport-to-read-our-jwt-token-by-modifying-appjs"&gt;
  &lt;/a&gt;
  4. Set up passport to read our JWT token by modifying app.js:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const cors = require('cors');

const indexRouter = require('./routes/index');

const app = express();
app.use(cors({ credentials: true, origin: 'http://localhost:3000' }));


app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

const passport = require('passport');
const JwtStrategy = require('passport-jwt').Strategy,
 ExtractJwt = require('passport-jwt').ExtractJwt;

app.use(passport.initialize());
app.use(passport.session());

app.use('/', indexRouter);

const cookieExtractor = function(req) {
 let token = null;
 if (req &amp;amp;&amp;amp; req.cookies)
 {
   token = req.cookies['auth'];
 }
 return token;
};

const TOKEN_SECRET = 'SECRET';

const opts = {
 jwtFromRequest: ExtractJwt.fromExtractors([cookieExtractor]),
 secretOrKey: TOKEN_SECRET,
};

passport.use(
 'jwt',
 new JwtStrategy(opts, (jwt_payload, done) =&amp;gt; {
   try {
     console.log('jwt_payload', jwt_payload);
     done(null, jwt_payload);
   } catch (err) {
     done(err);
   }
 }),
);

module.exports = app;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we need to pay attention to a few interesting things.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cookieExtractor&lt;/code&gt; is responsible for reading the token from the &lt;code&gt;httpOnly&lt;/code&gt; cookie we created earlier and will be passed along with the request (more on that later).&lt;/p&gt;

&lt;p&gt;Notice we must use the same TOKEN_SECRET we used to create the token in order to read it or we will get an invalid signature error when reading.&lt;/p&gt;

&lt;p&gt;The extractor is then passed to the &lt;code&gt;JwtStrategy&lt;/code&gt;, which is responsible for providing us with the &lt;code&gt;jwt_payload&lt;/code&gt;. We could be fetching more info about the user from the database if we were to add a database, but for the sake of simplicity, I decided not to.&lt;/p&gt;

&lt;p&gt;Now we’ll add our greeting route in index.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const router = express.Router();
const passport = require('passport');

router.get('/', function(req, res, next) {
 res.render('index', { title: 'Express' });
});

router.get('/greetme', (req, res, next) =&amp;gt; {
 passport.authenticate('jwt', { session: false }, (err, user, info) =&amp;gt; {
   if (err) {
     console.log('error is', err);
     res.status(500).send('An error has occurred, we cannot greet you at the moment.');
   }
   else {
     res.send({ success: true, fullName: `${user.name.givenName} ${user.name.familyName}` })
   }
 })(req, res, next);
});


module.exports = router;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What happens here is that Passport extracts the info from the JWT for us, and all we do is return it to the client.&lt;/p&gt;

&lt;p&gt;Start the greetings-service in port 5001:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5-modify-the-client-side-to-send-the-httponly-cookie"&gt;
  &lt;/a&gt;
  Step 5 – Modify the client side to send the httpOnly cookie
&lt;/h2&gt;

&lt;p&gt;Since we want the client JWT token to not be accessible to any malicious javascript code, we have stored it in an httpOnly cookie. &lt;/p&gt;

&lt;p&gt;(Side note: in real life, you may want to also make it secure so that it’s only accessible via HTTPS).&lt;/p&gt;

&lt;p&gt;So, we want to perform our greeting request to the greetings-service. For that, we need to send the contents of the cookie to the server. Let’s do that then.&lt;/p&gt;

&lt;p&gt;Back in our client-side react application, we modify App.js by adding a button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from 'react';
import axios from "axios";
import logo from './logo.svg';
import './App.css';

function App() {
 const [name, setName] = useState('');
 return (
   &amp;lt;div className="App"&amp;gt;
     &amp;lt;header className="App-header"&amp;gt;
       &amp;lt;img src={logo} className="App-logo" alt="logo" /&amp;gt;
       &amp;lt;a href="http://localhost:5000/auth/google"&amp;gt;Sign in with Google&amp;lt;/a&amp;gt;
       &amp;lt;br /&amp;gt;
       &amp;lt;button onClick={async () =&amp;gt; {
         const result = await axios.get('http://localhost:5001/greetme', {
           withCredentials: true
         });
         setName(result.data.fullName);
       }}&amp;gt;Greet me please&amp;lt;/button&amp;gt;
       {name &amp;amp;&amp;amp; &amp;lt;span&amp;gt;{`Hi, ${name}`}&amp;lt;/span&amp;gt;}
     &amp;lt;/header&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now once we get a response with the current user’s full name, we would see “Hi, full name”.&lt;/p&gt;

&lt;p&gt;Notice we added a basic axios with &lt;code&gt;withCredentials&lt;/code&gt;: true – that is what makes the cookies pass alongside our request, for the server to extract. &lt;/p&gt;

&lt;p&gt;And this emphasizes what happened here behind the scenes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_4T5EL6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3fssa7zab5oh37598c7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_4T5EL6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3fssa7zab5oh37598c7.png" alt="Aspecto live flow viewer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A simple GET request that returns a JSON with the user’s full name as it came from google and stored in the JWT token.&lt;/p&gt;

&lt;p&gt;Here is what we get after clicking the button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uCdcHEOC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s4s27idexpzgr5w47sj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCdcHEOC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s4s27idexpzgr5w47sj.png" alt="React Tom Zach"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s it! &lt;/p&gt;

&lt;p&gt;We have successfully created the account service for registration &amp;amp; JWT creation, and the greetings service that knows how to read the JWT token and provide data about the user.&lt;/p&gt;

&lt;p&gt;I hope this helped you get a better understanding of authentication in general, and specifically while implementing it in nodejs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/magnificoder"&gt;Tom Zach&lt;/a&gt; is a Software Engineer at Aspecto. Feel free to follow him on &lt;a href="https://twitter.com/magnificoder"&gt;Twitter&lt;/a&gt; for more great articles like this one: &lt;a href="https://www.aspecto.io/blog/lerna-hello-world-how-to-create-a-monorepo-for-multiple-node-packages/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=authentication-strategies-theory-to-practice"&gt;Lerna Hello World: How to Create a Monorepo for Multiple Node Packages&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>microservices</category>
      <category>architecture</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Learning Python-Basic course: Day 16, Fractal lists and other questions</title>
      <author>Aatmaj</author>
      <pubDate>Thu, 15 Jul 2021 16:12:09 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-16-fractal-lists-and-other-questions-1ca6</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-16-fractal-lists-and-other-questions-1ca6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-today-let-us-look-at-a-few-miscellaneous-questions-related-to-multidimensional-list-which-use-tryexcept"&gt;
  &lt;/a&gt;
  🤟WELCOME 👍 Today let us look at a few miscellaneous questions related to multidimensional list which use try-except😃
&lt;/h2&gt;




&lt;p&gt;In case you haven't visited &lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-15-more-about-try-except-1nmj"&gt;yesterday's&lt;/a&gt; blog, please do so. We have covered some really good questions based upon try-except&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;Alphabetical order of letters.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter a character "&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
   &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#The sorted() method sorts the list and returns the sorted list
# This is an inbuilt function to sort the list. You can also use insertion sort.
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a character a
Please enter a character d
Please enter a character b
Please enter a character h
['a', 'b', 'd', 'h']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note- The inbuilt sorted() method is so nice, that it will directly sort the values in alphabetical order even if we do not convert them into integers! Try removing the chr() and ord() functions and running the code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Till now we hadn't handled errors for the input. However in this example, we handle errors for input values, example we can prevent errors f the user inputs more than one character.&lt;br&gt;
Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a character 123
Error!
Please enter a character abc
Error!
Please enter a character -2
Error!
Please enter a character 1a
Error!
[]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;2) &lt;strong&gt;Fractal lists.&lt;/strong&gt;&lt;br&gt;
We will now try to generate a fractal list. Fractal list is a multi- multidimensional list looks something like this-&lt;br&gt;
&lt;code&gt;[1, 2, [1, 2], [1, 2, [1, 2]], [1, 2, [1, 2], [1, 2, [1, 2]]]]&lt;/code&gt;&lt;br&gt;
Got the pattern? Basically we must append the list into itself. So now let us try doing so...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[1, 2, [...], [...], [...]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, that didn't work. This is because the python syntax doesn't allow us to append to a list like this. We must use a temp variable to store the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[1, 2, [...], [...], [...]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Didn't work either! This is because when we assign &lt;code&gt;temp=a&lt;/code&gt; and append temp,, then we are doing the same thing as before! The solution is using the copy() method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[1, 2, [1, 2], [1, 2, [1, 2]], [1, 2, [1, 2], [1, 2, [1, 2]]]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#exercise"&gt;
  &lt;/a&gt;
  Exercise
&lt;/h3&gt;

&lt;p&gt;1)- Write a program to find the length of the list in the fractal list. &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/6c0c0c9ba4c276a373fa199b57b680bf70403398/Basic/Day%2016/Exercise%20solutions/Exercise%201.py"&gt;Answer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Write a program to reverse the lists in a list. Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;In: [[1,2,3],4,[5,6],[7,[8,9],10],[11,12,13,14],15]
Out: [[3, 2, 1], 4, [6, 5], [10, [8, 9], 7], [14, 13, 12, 11], 15]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hint- use try except pass for non list values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/a24ed3f5c3f6b47defc0c41f07c252026262b4ae/Basic/Day%2016/Exercise%20solutions/Exercise%202.py"&gt;Answer&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;✌️So friends that's all for now. 😊 Hope you all are having fun.😎 Please let me know in the comment section below 👇. And don't forget to like the post if you did. 😍 I am open to any suggestions or doubts. 🤠 Just post in the comments below or gmail me. 😉&lt;br&gt;
Thank you all👍&lt;br&gt;
Star the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning-Python repo&lt;/a&gt; made for this course!😃&lt;/p&gt;

&lt;p&gt;Learning Python (16 Part Series)&lt;br&gt;
🤫psst... follow me on dev.to and GitHub for updates...&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How I created this mini Virtual DOM!!?</title>
      <author>Abhishek Raj</author>
      <pubDate>Thu, 15 Jul 2021 15:51:31 +0000</pubDate>
      <link>https://dev.to/abhishekraj272/how-i-created-this-mini-virtual-dom-13lp</link>
      <guid>https://dev.to/abhishekraj272/how-i-created-this-mini-virtual-dom-13lp</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bTaZLAag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.morioh.com/200626/b35254e4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bTaZLAag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.morioh.com/200626/b35254e4.jpg" alt="Virtual DOM"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://morioh.com"&gt;Img Credits&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Few weeks back, I had a task to create an online code editor for HTML, CSS, JS and show the output on the same screen.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-i-needed-virtual-dom"&gt;
  &lt;/a&gt;
  Why I needed Virtual DOM?
&lt;/h3&gt;

&lt;p&gt;I stored different codes in different variables and for showing the output on same screen, I had to create a virtual DOM and merge all the codes (HTML + CSS + JS) together and inject it into an iframe.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The above code takes HTML, CSS and Javascript as string and then combines them together in HTML. It returns the merged code as a string then it is injected into an iframe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;You can see the working of the above code in this app.&lt;br&gt;
&lt;a href="https://abhishekraj272.github.io/Bro-Code-Web-IDE/"&gt;Web Code Editor&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#img-credits"&gt;
  &lt;/a&gt;
  Img Credits
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://crello.com"&gt;Crello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://morioh.com"&gt;Morioh&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Roadmap to become Web Developer in 2021</title>
      <author>Alok Raj</author>
      <pubDate>Thu, 15 Jul 2021 15:50:20 +0000</pubDate>
      <link>https://dev.to/alok722/roadmap-to-become-web-developer-in-2021-24mp</link>
      <guid>https://dev.to/alok722/roadmap-to-become-web-developer-in-2021-24mp</guid>
      <description>&lt;p&gt;If you are a total beginner to web development and thinking to dive deep into web development then you are at the right place. I am damn sure at the end of this article you will be having a clear picture of &lt;em&gt;**Where *&lt;/em&gt;&lt;em&gt;to Start, *&lt;/em&gt;&lt;em&gt;What *&lt;/em&gt;&lt;em&gt;to study, and *&lt;/em&gt;&lt;em&gt;How *&lt;/em&gt;*to study.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;⚠&lt;/strong&gt; If you already have some exposure to web development then I will recommend you to visit &lt;a href="https://roadmap.sh/"&gt;roadmap.sh&lt;/a&gt;. It contains a detailed analysis of stacks to become a web developer. Also, you can read about my &lt;a href="https://alok722.medium.com/story-of-transition-to-the-senior-se-role-2c6ea1101e4a"&gt;***Story of Transition to the Senior SE role&lt;/a&gt;***&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before diving into where and how let’s understand &lt;strong&gt;WHAT?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is Frontend? What is Backend? What is Full-stack? How these are co-related? Find answers to all your questions &lt;a href="https://www.youtube.com/watch?v=pkdgVYehiTE"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope now, you understand **What **is web development. Let’s understand from where we can get started with these.&lt;/p&gt;

&lt;p&gt;Concisely to become a full-stack &lt;strong&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/strong&gt; developer, You need to accomplish these in the sequence. I will discuss these in detail as we go along in this article.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;step 1: learn HTML
step 2: learn CSS
step 3: learn CSS Frameworks (**e.g.: Bootstrap, Tailwind etc.**)
step 4: learn JavaScript
step 5: learn nodejs / expressjs **(or, Hapi, KoaJs, fastify, NestJs etc.)**
step 6: learn sql / nosql **(mongodb, PostgreSQL etc.)**
step 7: learn react / vue / angular
step 8: go back to step 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🏆 congratulations, you are now a full-stack developer.&lt;/p&gt;

&lt;p&gt;Now, let me start to discuss one at a time, what and from where you need to learn to get started in these tech domains. Some may argue, why not React/Vue/Angular first and then Node/Express. My take on this: You are free to do so but since all these front-end frameworks/libraries are dependent on package manager so why not learn Node first.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-gt-css-gt-css-framework-eg-bootstrap-tailwind"&gt;
  &lt;/a&gt;
  HTML -&amp;gt; CSS -&amp;gt; CSS FRAMEWORK (e.g.: Bootstrap, Tailwind)
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;: Hypertext Markup Language is the standard mark-up language for documents designed to be displayed in a web browser.&lt;/p&gt;

&lt;p&gt;Must know topics: What is HTML? Anatomy of HTML Tag, HTML Document Structure, &lt;a href="https://html-css-js.com/html/tags/"&gt;Essential HTML Tags&lt;/a&gt;, HTML form.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;: Cascading Style Sheets is a style sheet language that explains the presentation of a document written in a mark-up language like HTML.&lt;/p&gt;

&lt;p&gt;Must-know topics: What is CSS? Anatomy of CSS, CSS Selectors (Element, Class and ID), Combining selectors, Pseudo selectors, CSS Specificity (Conflict Resolution), Box Model and Layout, CSS Grid, CSS Flexbox, Relative vs Absolute element positioning, Box Model, Media Queries (Responsive design using CSS).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS FRAMEWORK&lt;/strong&gt;: It is a CSS framework to ease the design process. These are free and open-source CSS frameworks directed at responsive, mobile-first front-end web development. It contains CSS- and JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components. Eg.: &lt;a href="https://getbootstrap.com/"&gt;https://getbootstrap.com/&lt;/a&gt;, &lt;a href="https://tailwindcss.com/"&gt;https://tailwindcss.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JAVASCRIPT
&lt;/h2&gt;

&lt;p&gt;It is often abbreviated as JS, is a programming language that conforms to the ECMAScript specification. It is high-level, often just in time compiled, and multi-paradigm. It has curly-bracket syntax, dynamic typing, prototype-based object orientation, and first-class functions.&lt;/p&gt;

&lt;p&gt;In JavaScript, there is a lot to learn, so instead of mentioning topics, Now, I will recommend you the courses, which you can follow and get comfortable with. You can visit the &lt;a href="https://javascript.info/"&gt;**javascript.info&lt;/a&gt; **website for detailed and well documentation of JavaScript.&lt;/p&gt;

&lt;p&gt;Courses you can follow for getting started with HTML, CSS &amp;amp; JS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.coursera.org/learn/html-css-javascript-for-web-developers"&gt;https://www.coursera.org/learn/html-css-javascript-for-web-developers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is one of the brilliant courses available to get started with web development. Here, you will get to learn HTML, CSS, Bootstrap, JavaScript, and AJAX. You can apply for &lt;strong&gt;financial aid&lt;/strong&gt; or you can simply audit the course.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/the-web-developer-bootcamp/"&gt;https://www.udemy.com/course/the-web-developer-bootcamp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over here, I will suggest you complete until SECTION 20 (To DO Lists Project).&lt;/p&gt;

&lt;p&gt;Once you are done with the above-stated course, then now is a good time to dive deep and know all about &lt;strong&gt;JavaScript &amp;amp; **its architecture&lt;/strong&gt;.**&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/modern-javascript/"&gt;https://www.udemy.com/course/modern-javascript/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The perfect and complete course, which helps you to understand every nuke and corner of JS. This course is a perfect combo of project-based learning as well as a deeper dive into the why and how of JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;you can refer to this video and playlist for getting started with JS. &lt;strong&gt;[&lt;em&gt;FREE&lt;/em&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PL_c9BZzLwBRLVh9OdCBYFEql6esA6aRsi"&gt;https://www.youtube.com/playlist?list=PL_c9BZzLwBRLVh9OdCBYFEql6esA6aRsi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=qoSksQ4s_hg&amp;amp;list=PL4cUxeGkcC9i9Ae2D9Ee1RvylH38dKuET&amp;amp;ab_channel=TheNetNinja"&gt;https://www.youtube.com/watch?v=qoSksQ4s_hg&amp;amp;list=PL4cUxeGkcC9i9Ae2D9Ee1RvylH38dKuET&amp;amp;ab_channel=TheNetNinja&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript ES6, ES7, ES8 - &lt;a href="https://www.youtube.com/watch?v=nZ1DMMsyVyI&amp;amp;ab_channel=freeCodeCamp.org"&gt;https://www.youtube.com/watch?v=nZ1DMMsyVyI&amp;amp;ab_channel=freeCodeCamp.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;also, there is one ongoing course from Akshay Saini which discussed architecture and behind the scene of JavaScript. [&lt;a href="https://www.youtube.com/watch?v=pN6jk0uUrD8&amp;amp;list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&amp;amp;ab_channel=AkshaySaini"&gt;**Namaste Javascript&lt;/a&gt;**]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;**Optional&lt;/em&gt;&lt;em&gt;: (Now is the good time to revise whatever you have learned.) I will recommend you to visit&lt;a href="https://www.freecodecamp.org/learn"&gt; freecodecamp&lt;/a&gt; and complete the projects of **Responsive web design certification **to get the certificate; if you feel stuck, you can definitely go through the tutorial provided there.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you are done with these above, now is a good time to dive into the framework/library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#node-gt-express-gt-mongodb"&gt;
  &lt;/a&gt;
  &lt;a href="https://nodejs.org/en/"&gt;NODE&lt;/a&gt; -&amp;gt;&lt;a href="https://expressjs.com/"&gt; EXPRESS&lt;/a&gt; -&amp;gt;&lt;a href="https://www.mongodb.com/"&gt; MONGO-DB&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For Backend, I will recommend a single course. Also, you can study each topic in detail by following a separate tutorial for each.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/nodejs-express-mongodb-bootcamp/"&gt;https://www.udemy.com/course/nodejs-express-mongodb-bootcamp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This course is a top-rated course on Udemy. This course has beautifully covered all the essentials of the Backend covering NodeJS, Express JS, Mongo, and Mongoose along with Unit Testing.&lt;/p&gt;

&lt;p&gt;you can refer to these videos and playlists for getting started with Node.JS &lt;strong&gt;[&lt;em&gt;FREE&lt;/em&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLillGF-RfqbYRpji8t4SxUkMxfowG4Kqp"&gt;https://www.youtube.com/playlist?list=PLillGF-RfqbYRpji8t4SxUkMxfowG4Kqp&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend-libraryframework-eg-react-vue-angular"&gt;
  &lt;/a&gt;
  FRONTEND LIBRARY/FRAMEWORK (e.g.: React, Vue, Angular):
&lt;/h3&gt;

&lt;p&gt;I will provide the links of course which I found amusing. I, being a MEAN stack developer, have experienced Angular &amp;amp; React courses myself and for Vue, I have taken opinions from my friends working with Vue.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Which frontend framework/lib to choose?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Seeing the current market scenario, React is the first choice but at the same time, Vue JS is rising slowly and is expected to surpass React totally. Earlier Angular was at the top, not anymore. However, it does not matter which framework you know, once you are comfortable with any library or framework then you can easily pick others too. For more analysis on what to choose, you can search and find many helpful articles.&lt;/em&gt; &lt;em&gt;The major difference between the different stacks can be found &lt;a href="https://www.youtube.com/watch?v=KMX1mFEmM3E"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;em&gt;And if you just want to know individually what they are, that you can see &lt;a href="https://www.youtube.com/watch?v=5XlYQRGgYrY"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#angular"&gt;
  &lt;/a&gt;
  &lt;a href="https://angular.io/"&gt;**ANGULAR&lt;/a&gt;**
&lt;/h3&gt;

&lt;p&gt;Angular — The Complete Guide (2020 Edition) - &lt;a href="https://www.udemy.com/course/the-complete-guide-to-angular-2/"&gt;https://www.udemy.com/course/the-complete-guide-to-angular-2/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is one of the most comprehensive courses on angular. It is actually a bit too many details sometimes but better be safe than sorry.&lt;/p&gt;

&lt;p&gt;Or,&lt;/p&gt;

&lt;p&gt;you can follow &lt;a href="https://www.youtube.com/watch?v=0eWrpsCLMJQ&amp;amp;list=PLC3y8-rFHvwhBRAgFinJR8KHIrCdTkZcZ&amp;amp;ab_channel=Codevolution"&gt;this&lt;/a&gt; to quickly get started with Angular. &lt;strong&gt;[&lt;em&gt;FREE&lt;/em&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=0eWrpsCLMJQ&amp;amp;list=PLC3y8-rFHvwhBRAgFinJR8KHIrCdTkZcZ&amp;amp;ab_channel=Codevolution"&gt;**Angular Tutorial for Beginners&lt;/a&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vue-js"&gt;
  &lt;/a&gt;
  &lt;a href="https://vuejs.org/"&gt;**Vue JS&lt;/a&gt;**
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/vuejs-2-the-complete-guide/"&gt;**The Complete Guide (incl. Vue Router &amp;amp; Vuex)&lt;/a&gt;:**&lt;/p&gt;

&lt;p&gt;Being one of the highest-rated courses on Udemy taught by Maximilian Schwarzmüller, I can undoubtedly say, &lt;strong&gt;Go&lt;/strong&gt; for it. He is one of the BEST instructors present in the tech industry.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;you can refer to these videos and playlists for getting started with VueJs. &lt;strong&gt;[&lt;em&gt;FREE&lt;/em&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=5LYrN_cAJoA&amp;amp;list=PL4cUxeGkcC9gQcYgjhBoeQH7wiAyZNrYa&amp;amp;ab_channel=TheNetNinja"&gt;**VueJs 2&lt;/a&gt; + &lt;a href="https://www.youtube.com/watch?v=BGAu__J4xoc&amp;amp;list=PL4cUxeGkcC9i371QO_Rtkl26MwtiJ30P2&amp;amp;ab_channel=TheNetNinja"&gt;Vuex&lt;/a&gt;**&lt;/p&gt;

&lt;p&gt;or,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=e-E0UB-YDRk&amp;amp;ab_channel=Bitfumes"&gt;**VueJs 3&lt;/a&gt; + &lt;a href="https://www.youtube.com/watch?v=BGAu__J4xoc&amp;amp;list=PL4cUxeGkcC9i371QO_Rtkl26MwtiJ30P2&amp;amp;ab_channel=TheNetNinja"&gt;Vuex&lt;/a&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-js"&gt;
  &lt;/a&gt;
  &lt;a href="https://reactjs.org/"&gt;**React JS&lt;/a&gt;**
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/react-redux/"&gt;**Modern React with Redux&lt;/a&gt;**&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;you can refer to these videos and playlists for getting started with ReactJs. &lt;strong&gt;[&lt;em&gt;FREE&lt;/em&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=QFaFIcGhPoM&amp;amp;list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&amp;amp;ab_channel=Codevolution"&gt;**React&lt;/a&gt; + &lt;a href="https://www.youtube.com/watch?v=9boMnm5X9ak&amp;amp;list=PLC3y8-rFHvwheJHvseC3I0HuYI2f46oAK&amp;amp;ab_channel=Codevolution"&gt;Redux&lt;/a&gt;**&lt;/p&gt;

&lt;p&gt;or,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=OxIDLw0M-m0&amp;amp;list=PL4cUxeGkcC9ij8CfkAY2RAGb-tmkNwQHG&amp;amp;ab_channel=TheNetNinja"&gt;**React with Redux&lt;/a&gt;**&lt;/p&gt;

&lt;p&gt;Whatever front-end library/framework you choose and complete the course then start building projects on top of that.&lt;/p&gt;

&lt;p&gt;IDE Suggestion:&lt;a href="https://code.visualstudio.com/"&gt; https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you wish to explore more and find some more relative tutorials. You can follow this &lt;a href="https://hackr.io/"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Congratulations&lt;/em&gt;, now you are ready to dive and become a full-stack JavaScript developer.&lt;/p&gt;

&lt;p&gt;Want to know about my journey. Read that here:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#story-of-transition-to-the-senior-se-role"&gt;
  &lt;/a&gt;
  &lt;a href="https://alok722.medium.com/story-of-transition-to-the-senior-se-role-2c6ea1101e4a"&gt;Story of Transition to the Senior SE role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;You can find me on &lt;a href="https://www.linkedin.com/in/alok722/"&gt;LinkedIn&lt;/a&gt; !!!&lt;/p&gt;

&lt;p&gt;Feedback appreciated !!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>roadmap</category>
      <category>webdev</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Adding Google Auth to Kubernetes Clusters with Red Hat OpenShift and IBM AppID</title>
      <author>Dave Nugent 🌉</author>
      <pubDate>Thu, 15 Jul 2021 15:49:24 +0000</pubDate>
      <link>https://dev.to/drnugent/adding-google-auth-to-kubernetes-clusters-with-red-hat-openshift-and-ibm-appid-1e55</link>
      <guid>https://dev.to/drnugent/adding-google-auth-to-kubernetes-clusters-with-red-hat-openshift-and-ibm-appid-1e55</guid>
      <description>&lt;p&gt;This document collects some of the links that you'll need in our lab. This is an interactive lab, so we will assume you have some knowledge of Kubernetes.&lt;/p&gt;

&lt;p&gt;🎓 What will you learn?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How do I build an application using Java and Open Liberty?&lt;/li&gt;
&lt;li&gt;What is Red Hat OpenShift and how does it compare to Kubernetes?&lt;/li&gt;
&lt;li&gt;How do I deploy a Red Hat OpenShift/Kubernetes cluster?&lt;/li&gt;
&lt;li&gt;We'll conclude with an interactive lab where you'll be able to add IAM to your own Red Hat OpenShift cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This lab was presented live on Crowdcast. Here is a link to the recording: &lt;a href="https://www.crowdcast.io/e/hybrid-cloud"&gt;https://www.crowdcast.io/e/hybrid-cloud&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#ibmcloud"&gt;Create your IBM Cloud Account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#openshift"&gt;Grab your Kubernetes/Red Hat OpenShift Cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#appid"&gt;Create an AppID Instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-your-ibm-cloud-account"&gt;
  &lt;/a&gt;
  Create your IBM Cloud Account&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;First, you'll need an IBM Cloud account so that we can assign your free Red Hat OpenShift cluster to you.&lt;/p&gt;

&lt;p&gt;Register here: &lt;a href="https://ibm.biz/Bdfvch"&gt;https://ibm.biz/Bdfvch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you've registered, you'll need to activate your account by clicking a link in your email.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grab-your-kubernetesred-hat-openshift-cluster"&gt;
  &lt;/a&gt;
  Grab your Kubernetes/Red Hat OpenShift Cluster&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Visit &lt;a href="https://idlab.mybluemix.net"&gt;https://idlab.mybluemix.net&lt;/a&gt; and sign up using the email address you used to sign up for your IBM Cloud account. The &lt;em&gt;key&lt;/em&gt; is &lt;em&gt;oslab&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you've submitted this form, you'll be &lt;em&gt;invited to join&lt;/em&gt; our advocacy account. You have to &lt;strong&gt;accept the invite&lt;/strong&gt; by clicking on the &lt;strong&gt;notifications&lt;/strong&gt; icon in your IBM Cloud control panel (it's the bell in the upper right.)&lt;/p&gt;

&lt;p&gt;Once you've accepted the invite, you'll be able to see the Red Hat OpenShift cluster we've assigned to you at &lt;a href="https://cloud.ibm.com/resources"&gt;https://cloud.ibm.com/resources&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-appid-instance"&gt;
  &lt;/a&gt;
  Create an AppID Instance&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Navigate to: &lt;a href="https://cloud.ibm.com/catalog/services/app-id"&gt;https://cloud.ibm.com/catalog/services/app-id&lt;/a&gt; and follow the instructions in the lab&lt;/p&gt;

&lt;p&gt;Here is Jenna's GitHub containing the application source code: &lt;a href="https://github.com/jritten/secure-openshift-w-appid"&gt;https://github.com/jritten/secure-openshift-w-appid&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jritten"&gt;Jenna's Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/drnugent"&gt;David's Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ibm.biz/os-appid-slides"&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.crowdcast.io/e/hybrid-cloud"&gt;Live recording of this lab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>googlecloud</category>
      <category>kubernetes</category>
      <category>security</category>
      <category>serverless</category>
    </item>
    <item>
      <title>11 Git Commands I Use Every Day</title>
      <author>Domagoj Vidovic</author>
      <pubDate>Thu, 15 Jul 2021 15:48:36 +0000</pubDate>
      <link>https://dev.to/domagojvidovic/11-git-commands-i-use-every-day-43eo</link>
      <guid>https://dev.to/domagojvidovic/11-git-commands-i-use-every-day-43eo</guid>
      <description>&lt;p&gt;When I started my career, I was always afraid of losing my code changes. Sometimes, I would copy the code to text files just to be sure that I won't miss something.&lt;/p&gt;

&lt;p&gt;That's not a great practice. If you know how to use git properly, you won't have these doubts.&lt;/p&gt;

&lt;p&gt;Git has everything you need to make you safe. And much more.&lt;/p&gt;

&lt;p&gt;Let's dive in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-checking-out-a-new%C2%A0branch"&gt;
  &lt;/a&gt;
  1. Checking out a new branch
&lt;/h3&gt;

&lt;p&gt;Obviously, I must use a new branch for every task I start:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -b &amp;lt;new_branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command creates a new branch and automatically sets it as active.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-selecting-files-for%C2%A0commit"&gt;
  &lt;/a&gt;
  2. Selecting files for commit
&lt;/h3&gt;

&lt;p&gt;This is one of the rare cases where I prefer GUI. In VS Code (or any other better IDE/text editor), you can easily see the updated files and select the ones you want to include in the commit.&lt;/p&gt;

&lt;p&gt;But in case you want to do it with the CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will stage all changed files.&lt;/p&gt;

&lt;p&gt;If you want to select a single file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add &amp;lt;path/to/file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-making-a%C2%A0commit"&gt;
  &lt;/a&gt;
  3. Making a commit
&lt;/h3&gt;

&lt;p&gt;After you stage some files, you need to commit them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "Some changes"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you have some pre-commit rules turned on which doesn't allow you to make a commit (like linting), you can override them by passing the --no-verify flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "Some changes" --no-verify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-revert-all%C2%A0changes"&gt;
  &lt;/a&gt;
  4. Revert all changes
&lt;/h3&gt;

&lt;p&gt;Sometimes, I experiment with the code. A bit later, I realize that it's not the right path and I need to undo all of my changes.&lt;/p&gt;

&lt;p&gt;One simple command for that is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset --hard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-see-the-latest%C2%A0commits"&gt;
  &lt;/a&gt;
  5. See the latest commits
&lt;/h3&gt;

&lt;p&gt;I can easily see what's going on on my branch by typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I can see the commit hashes, messages, authors, and dates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-pulling-the-changes-from-the-remote%C2%A0branch"&gt;
  &lt;/a&gt;
  6. Pulling the changes from the remote branch
&lt;/h3&gt;

&lt;p&gt;When I checkout an already existing branch (usually main or development), I need to fetch and merge the latest changes.&lt;/p&gt;

&lt;p&gt;There is a shorthand for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sometimes, if you're in one of your newly created branches, you'll also need to specify the origin branch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull origin/&amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-undoing-a-local-unpushed%C2%A0commit"&gt;
  &lt;/a&gt;
  7. Undoing a local, unpushed commit
&lt;/h3&gt;

&lt;p&gt;I made a commit. Damn! Something's wrong here. I need to make one more change.&lt;/p&gt;

&lt;p&gt;No worries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset --soft HEAD~1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will revert your last commit and keep the changes you made.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HEAD~1&lt;/code&gt; means that your head is pointing on one commit earlier than your current - exactly what you want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-undoing-a-pushed%C2%A0commit"&gt;
  &lt;/a&gt;
  8. Undoing a pushed commit
&lt;/h3&gt;

&lt;p&gt;I made some changes and pushed them to remote. Then, I realized it's not what I want.&lt;/p&gt;

&lt;p&gt;For this, I use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git revert &amp;lt;commit_hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be aware that this will be visible in your commit history.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-stashing-my%C2%A0changes"&gt;
  &lt;/a&gt;
  9. Stashing my changes
&lt;/h3&gt;

&lt;p&gt;I'm in the middle of the feature, and my teammate pings me for an urgent code review.&lt;/p&gt;

&lt;p&gt;I obviously don't want to trash my changes, neither I want to commit them. I don't want to create a bunch of meaningless commits.&lt;/p&gt;

&lt;p&gt;I only want to check his branch and return to my work.&lt;/p&gt;

&lt;p&gt;To do so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// stash your changes
git stash
// check out and review your teammate's branch
git checkout &amp;lt;your_teammates_branch&amp;gt;
... code reviewing
// check out your branch in progress
git checkout &amp;lt;your_branch&amp;gt;
// return the stashed changes
git stash pop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;pop&lt;/code&gt; seems familiar here? Yep, this works like a stack.&lt;/p&gt;

&lt;p&gt;Meaning, if you do git stash twice in a row without git stash pop in between, they will stack onto each other.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-reseting-your-branch-to-remote%C2%A0version"&gt;
  &lt;/a&gt;
  10. Reseting your branch to remote version
&lt;/h3&gt;

&lt;p&gt;I messed something up. Some broken commits, some broken npm installs.&lt;/p&gt;

&lt;p&gt;Whatever I do, my branch is not working well anymore.&lt;/p&gt;

&lt;p&gt;The remote version is working fine. Let's make it the same!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git fetch origin
git reset --hard origin/&amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#11-picking-commits-from-other%C2%A0branches"&gt;
  &lt;/a&gt;
  11. Picking commits from other branches
&lt;/h3&gt;

&lt;p&gt;Sometimes, I want to apply the commits from the other branches. For this, I use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git cherry-pick &amp;lt;commit_hash&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If I want to pick a range:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git cherry-pick &amp;lt;oldest_commit_hash&amp;gt;^..&amp;lt;newest_commit_hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Let's be honest, I don't use all of these commands literally every day - but I use them really often.&lt;/p&gt;

&lt;p&gt;I prefer the CLI because we'll never be able to cover all the options with a GUI.&lt;/p&gt;

&lt;p&gt;Plus, you'll find most of the tutorials only using the CLI. If you're not familiar with it, you'll have a hard time understanding them.&lt;/p&gt;

&lt;p&gt;I covered the basics here, but whatever you need to do, just Google it.&lt;/p&gt;

&lt;p&gt;I'm certain that you'll find an answer easily.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>programming</category>
      <category>codequality</category>
    </item>
    <item>
      <title>⚡10 JavaScript Projects Every Beginner Must Try </title>
      <author>The Nerdy Dev</author>
      <pubDate>Thu, 15 Jul 2021 15:46:14 +0000</pubDate>
      <link>https://dev.to/thenerdydev/10-javascript-projects-every-beginner-must-try-p19</link>
      <guid>https://dev.to/thenerdydev/10-javascript-projects-every-beginner-must-try-p19</guid>
      <description>&lt;p&gt;Hey everyone 👋🏻,&lt;/p&gt;

&lt;p&gt;In this article, let us see &lt;strong&gt;10 JavaScript Projects Every Beginner Must Try&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;JavaScript is the language that powers the web and a language that you must know if you want to become a web developer. It is also one of the most popular programming languages in the community. In this article, let us see 10 Projects that you can build to get hired and get a place in the industry. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-modals"&gt;
  &lt;/a&gt;
  1. Modals
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXpZYhAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g97t4dqrm3azf1n91sqm.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXpZYhAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g97t4dqrm3azf1n91sqm.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creating a Modal using Classes in JavaScript. A fun and interesting project to practice DOM, Event Handling and Classes. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Document Object Model&lt;/li&gt;
&lt;li&gt;Event Handling &lt;/li&gt;
&lt;li&gt;Classes and Object Oriented Programming &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#2-tabs"&gt;
  &lt;/a&gt;
  2. Tabs
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KW0nJ3T6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9o8xagz51py9c8mk0wmu.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KW0nJ3T6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9o8xagz51py9c8mk0wmu.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Implementing a Tabs System in JavaScript.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Document Object Model&lt;/li&gt;
&lt;li&gt;Event Handling &lt;/li&gt;
&lt;li&gt;Classes and Object Oriented Programming &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#3-range-slider"&gt;
  &lt;/a&gt;
  3. Range Slider
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k0_iiOrk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qajrm7qy7x0tyujzk3ph.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k0_iiOrk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qajrm7qy7x0tyujzk3ph.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Implementing a Range Slider in JavaScript especially an RGB slider to change values for the R, G and B components and to reflect the changes in the background.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Document Object Model&lt;/li&gt;
&lt;li&gt;Event Handling &lt;/li&gt;
&lt;li&gt;Classes and Object Oriented Programming &lt;/li&gt;
&lt;li&gt;Higher Order Methods like forEach &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#4-slideshow"&gt;
  &lt;/a&gt;
  4. Slideshow
&lt;/h2&gt;

&lt;p&gt;Implementing a Slideshow in JavaScript to change slides in the horizontal way.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FUwgioSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avnuapqnvcgsm88l3ijl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUwgioSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avnuapqnvcgsm88l3ijl.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Document Object Model&lt;/li&gt;
&lt;li&gt;Event Handling &lt;/li&gt;
&lt;li&gt;Classes and Object Oriented Programming&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#5-salary-calculator"&gt;
  &lt;/a&gt;
  5. Salary Calculator
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-Nlr04B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byh8qo0czis6j80vq4x6.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-Nlr04B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byh8qo0czis6j80vq4x6.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Input a Salary for the user and generate the value for different components/allowances like house rental allowance etc. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Document Object Model&lt;/li&gt;
&lt;li&gt;MVC pattern &lt;/li&gt;
&lt;li&gt;Event Handling &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#6-scroll-indicator"&gt;
  &lt;/a&gt;
  6. Scroll Indicator
&lt;/h2&gt;

&lt;p&gt;A basic app to demonstrate the amount of scroll that the user makes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N7q8YopX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10p0eyuzikoufe2cr0dz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N7q8YopX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10p0eyuzikoufe2cr0dz.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Document Object Model&lt;/li&gt;
&lt;li&gt;Event Handling&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#7-intersection-observer"&gt;
  &lt;/a&gt;
  7. Intersection Observer
&lt;/h2&gt;

&lt;p&gt;Implementing Infinite Scroll Feature using Intersection Observer API. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fGuMAjZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldu8kc0w2d44qi2wpxo5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fGuMAjZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldu8kc0w2d44qi2wpxo5.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Document Object Model&lt;/li&gt;
&lt;li&gt;Event Handling&lt;/li&gt;
&lt;li&gt;Intersection Observer API &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#8-playing-with-text"&gt;
  &lt;/a&gt;
  8. Playing with Text
&lt;/h2&gt;

&lt;p&gt;Playing with Text like reversing a text, changing font size, changing the font style into bold, italic, underline etc. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Dd3HLUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epvdedkta3peshmvpgyj.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Dd3HLUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epvdedkta3peshmvpgyj.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Document Object Model&lt;/li&gt;
&lt;li&gt;Event Handling&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#9-custom-search-filter"&gt;
  &lt;/a&gt;
  9. Custom Search Filter
&lt;/h2&gt;

&lt;p&gt;A small application that demonstrates adding items to a list, removing items from a list and filtering an item based on some search term. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yL67juHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfv5wwcu4obrnj8y4fin.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yL67juHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfv5wwcu4obrnj8y4fin.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Document Object Model&lt;/li&gt;
&lt;li&gt;Event Handling&lt;/li&gt;
&lt;li&gt;Higher Order Methods like forEach &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#10-sticky-navbar"&gt;
  &lt;/a&gt;
  10. Sticky Navbar
&lt;/h2&gt;

&lt;p&gt;A simply sticky navbar. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_4QtwuV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldrm0mzgjmkb6joqpjn2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_4QtwuV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldrm0mzgjmkb6joqpjn2.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Document Object Model&lt;/li&gt;
&lt;li&gt;Event Handling&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;/p&gt;

&lt;p&gt;Here is the video link if you want to create all these projects from scratch : &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KTGfHmyje5A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Jun 10 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;👉🏻 Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;/p&gt;

</description>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Deploy Your First Kubernetes Cluster </title>
      <author>Nočnica Fee</author>
      <pubDate>Thu, 15 Jul 2021 15:40:09 +0000</pubDate>
      <link>https://dev.to/run-x/how-to-deploy-your-first-kubernetes-cluster-2gno</link>
      <guid>https://dev.to/run-x/how-to-deploy-your-first-kubernetes-cluster-2gno</guid>
      <description>&lt;p&gt;&lt;em&gt;originally published on &lt;a href="https://towardsaws.com/run-x-opta-full-operational-kubernetes-cluster-in-minutes-7ca8fc156fbe"&gt;Towards AWS&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today every company is heading towards container and container management tools like Kubernetes. Thanks to cloud providers like AWS, we can launch Kubernetes Cluster in a few minutes, instead of installing everything by ourselves.&lt;/p&gt;

&lt;p&gt;Unfortunately, having a K8s cluster up and running is only half the struggle and we still need to worry about things like DNS, service discovery, or managing permissions and privileges within our cluster. &lt;/p&gt;

&lt;p&gt;This is all fine if we have a bunch of DevOps Engineers or Cloud Engineers available, but decent IT professionals are hard to come by and most companies simply don’t have the luxury of idle employees sitting around and waiting for new work. &lt;br&gt;
For this reason, I was pretty curious as I stumbled about Opta. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-opta"&gt;
  &lt;/a&gt;
  What is Opta?
&lt;/h3&gt;

&lt;p&gt;Opta is a deployment tool developed by &lt;a href="https://www.opta.dev/"&gt;RUN [X]&lt;/a&gt; and promises to create a fully operational K8S Cluster and launch your microservices without any DevOps headaches. To provide an agnostic approach to the different cloud providers it uses Terraform to deploy new resources to your infrastructure. To make use of the different services that the cloud providers offer it comes with its own modules to directly connect your microservices with external databases, caches, or object stores. &lt;/p&gt;

&lt;p&gt;To take care of all internal communication Opta uses a &lt;strong&gt;&lt;a href="https://linkerd.io/"&gt;Linkerd&lt;/a&gt;&lt;/strong&gt; service mesh, which provides mTLS, load balancing, retries, and a lot more security features. By default, all microservices are launched in a private subnet created by Opta, which makes them inaccessible from the internet. If you want to enable a service to be accessable directly from the internet, you can specify an URL that will automatically be created in your DNS settings and routed to the container. Additionally, every service gets an internal-only domain name that is resolveable and can be used by other services for direct communication. &lt;/p&gt;

&lt;p&gt;Without any need of advanced configuration or deep knowledge in Kubernets, you are able to create and run a fully operational K8S cluster, ready to host your microservices. This is especial useful if you don’t have the man power or knowledge to create and manage everything on your own and want to rather concentrate on deploying new services instead of going through all the trouble of configuring the cluster itself.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deploy-your-first-k8s-cluster"&gt;
  &lt;/a&gt;
  Deploy your first K8S Cluster
&lt;/h3&gt;

&lt;p&gt;To get started you have to download and install Optas own CLI. The CLI is used to apply and deploy your resources, get access to stored secrets and connect your Kubernetes CLI directly with the deployed cluster. &lt;/p&gt;

&lt;p&gt;After installing the CLI, Opta works with an Infrastructure-as-Code approach, where you create all infrastructure and services within a yml file, similiar to Terraform itself. The configurations files are separated in “environment” and “service” files. In your “environment” configuration files, you define your AWS, GCP, or Azure account and your Kubernetes cluster. You can create different providers in one file and specifiy which provider to use when you run the &lt;em&gt;apply&lt;/em&gt; CLI command. A tipical environment configuration file can look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;devstage&lt;/span&gt;
&lt;span class="na"&gt;org_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;xcloud&lt;/span&gt;
&lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;aws&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;eu-central-1&lt;/span&gt;
    &lt;span class="na"&gt;account_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
&lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;base&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;k8s-cluster&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;k8s-base&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dns&lt;/span&gt;
    &lt;span class="na"&gt;domain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
    &lt;span class="na"&gt;delegated&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;                                                                     
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Under &lt;em&gt;modules&lt;/em&gt; you can choose predefined modules which creates the default settings for your cluster and even create specific resourcen your cloud provider offers. A more detailed explanation of the modules can be found directly on their &lt;a href="https://docs.opta.dev/modules-reference/"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With those few lines of code Opta creates the Kubernetes Cluster, including a VPC, setting up subnets, taking care of DNS and service discovery, and all the security aspects and monitoring. Without anything to worry about you have a fully operational K8s Cluster in roughly 20min.&lt;/p&gt;

&lt;p&gt;Deploying microservices is equally easy, even if you decide to connect them directly to an Postgres or MySQL database, a redis cache or an object store. For this, you simply have to create a service configuration file in which you define the docker container or Helm chart you want to deploy. Describe all environment variables you need, use Opta modules for any external resources and specify a port and URL to open up your service to the world. \&lt;br&gt;
A sample service configuration file could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sourcegraph&lt;/span&gt;
&lt;span class="na"&gt;environments&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;devstage&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;../opta.yml"&lt;/span&gt;
&lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sourcegraph&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;k8s-service&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sourcegraph/server:3.28.0&lt;/span&gt;
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7080&lt;/span&gt;
    &lt;span class="na"&gt;resource_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;
      &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;512&lt;/span&gt; 
    &lt;span class="na"&gt;public_uri&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sourcegraph.{parent.domain}"&lt;/span&gt;      
    &lt;span class="na"&gt;env_vars&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;PGSSLMODE"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;require"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;PGPORT"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;5432"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;CODEINTEL_PGSSLMODE"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;require"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;CODEINTEL_PGPORT"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;5432"&lt;/span&gt;
    &lt;span class="na"&gt;links&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;dbfrontend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;db_user&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PGUSER&lt;/span&gt;
          &lt;span class="na"&gt;db_host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PGHOST&lt;/span&gt;
          &lt;span class="na"&gt;db_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PGDATABASE&lt;/span&gt;
          &lt;span class="na"&gt;db_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PGPASSWORD&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;dbcodeintel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;db_user&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CODEINTEL_PGUSER&lt;/span&gt;
          &lt;span class="na"&gt;db_host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CODEINTEL_PGHOST&lt;/span&gt;
          &lt;span class="na"&gt;db_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CODEINTEL_PGDATABASE&lt;/span&gt;
          &lt;span class="na"&gt;db_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CODEINTEL_PGPASSWORD&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dbfrontend&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
    &lt;span class="na"&gt;instance_class&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;db.r5.large&lt;/span&gt;
    &lt;span class="na"&gt;engine_version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12.4&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dbcodeintel&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
    &lt;span class="na"&gt;instance_class&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;db.r5.large&lt;/span&gt;
    &lt;span class="na"&gt;engine_version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Opta takes care of passing all connection information for the database directly to the service. Additionally, it takes care of all internal routing and attaches the right permissions to the service. &lt;/p&gt;

&lt;p&gt;All the credentials will be stored in secrets and can be viewed via Optas CLI. If you want to directly communicate with your Cluster or services, the CLI can automatically configure the Kubernetes CLI with the need information. After a few seconds you are ready to list your pods, services or deployments by simply using the right kubectl commands.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#help-and-support"&gt;
  &lt;/a&gt;
  Help and Support
&lt;/h3&gt;

&lt;p&gt;Currently, you can find all documentation and information on the RUN [X] &lt;a href="https://docs.opta.dev/"&gt;website&lt;/a&gt;. There you’ll find a guide for your first installation and deployment, all information about the different modules and integrations like Datadog.&lt;/p&gt;

&lt;p&gt;If you need further help or support you can join their &lt;a href="https://opta-group.slack.com/"&gt;Slack Channel&lt;/a&gt; where you always find someone from RUN [X] who is eager to help you out. &lt;/p&gt;

&lt;p&gt;If you want a look directly into the code or checkout other example on how to deploy your microservice with Opta you can check out their &lt;a href="https://github.com/run-x/opta"&gt;Github Repository&lt;/a&gt; to get more information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Kubernetes is great for managing your various microservices and container but is pretty complex and difficult. Many of us have neither the time, man power or knowledge to take care of all the settings and configurations which are necessary to let the cluster run smoothly. &lt;/p&gt;

&lt;p&gt;Opta is a great tool to assist you in configuring and launching your own cluster, taking care of all the underlying configuration and resources. It lets you concentrate on launching new services and increase your productivity without to sacrifise security or mantainability.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>opta</category>
      <category>opensource</category>
      <category>microservices</category>
    </item>
  </channel>
</rss>
