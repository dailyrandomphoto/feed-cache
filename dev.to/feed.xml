<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>"Let me wait-for-it and call you back", said wait-for-it.js</title>
      <author>Muhammad Tayyab Sheikh</author>
      <pubDate>Fri, 07 May 2021 00:26:09 +0000</pubDate>
      <link>https://dev.to/cstayyab/let-me-wait-for-it-and-call-you-back-said-wait-for-it-js-50h1</link>
      <guid>https://dev.to/cstayyab/let-me-wait-for-it-and-call-you-back-said-wait-for-it-js-50h1</guid>
      <description>&lt;p&gt;Ever encountered as situation where you had to wait for some HTML element in a webpage before you can execute a function?&lt;br&gt;
Wait no more, because &lt;code&gt;wait-for-it.js&lt;/code&gt; is at your service.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-does-it-offer"&gt;
  &lt;/a&gt;
  What does it offer?
&lt;/h2&gt;

&lt;p&gt;It offers you a much simpler way to execute a function (callback) when your specified (selector) element gets added to the page.&lt;/p&gt;

&lt;p&gt;## How does it work?&lt;br&gt;
It uses nothing else but your very own JavaScript to accomplish the task i.e. JavaScript's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"&gt;&lt;code&gt;MutationObserver&lt;/code&gt; API&lt;/a&gt;. You can have a detailed look at its code here:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/cstayyab"&gt;
        cstayyab
      &lt;/a&gt; / &lt;a href="https://github.com/cstayyab/wait-for-it.js"&gt;
        wait-for-it.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A JavaScript Library that allows you to execute function when a certain element gets added to the document
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-do-i-use-it"&gt;
  &lt;/a&gt;
  How do I use it?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Include it in your webpage using jsDelivr CDN&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/gh/cstayyab/wait-for-it.js@0.1.0/wait-for-it.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Register a &lt;code&gt;selector&lt;/code&gt; to listen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;waitForElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#food&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your Food is Here!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Voilà!!&lt;/p&gt;




&lt;br&gt;&lt;br&gt;
&lt;em&gt;Feel free to star and fork it on &lt;a href="https://github.com/cstayyab/wait-for-it.js"&gt;GitHub&lt;/a&gt;&lt;/em&gt;

</description>
      <category>javascript</category>
      <category>showdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Top 10 mistakes to avoid when using React</title>
      <author>Erin Schaffer</author>
      <pubDate>Fri, 07 May 2021 00:11:24 +0000</pubDate>
      <link>https://dev.to/educative/top-10-mistakes-to-avoid-when-using-react-27hn</link>
      <guid>https://dev.to/educative/top-10-mistakes-to-avoid-when-using-react-27hn</guid>
      <description>&lt;p&gt;React has quickly become the most popular front-end framework in the tech world, used by big tech companies such as Facebook, Netflix, Airbnb, and many more. React developers are in high demand, and the demand continues to grow. &lt;/p&gt;

&lt;p&gt;Today, we’ll explore the top 10 mistakes React developers make -- and how to fix them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’ll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#components"&gt;Not creating enough components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#state"&gt;Modifying the state directly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#number"&gt;Passing a number as a string when passing props&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#key"&gt;Not using key on a listing component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setstate"&gt;Forgetting that setState is asynchronous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#redux"&gt;Using Redux too much&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#godcomponents"&gt;Creating and using God components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#folder"&gt;Not following the ReactJS folder structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#props"&gt;Sending props as strings (instead of numbers)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#capital"&gt;Forgetting to start a component name with a capital letter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nextsteps"&gt;What to learn next&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-not-creating-enough-components"&gt;
  &lt;/a&gt;
  1. Not creating enough components
&lt;/h2&gt;

&lt;p&gt;A common mistake that React developers make is that they don’t create enough components. With React, you’re able to create large components that execute many tasks, but it’s &lt;strong&gt;better to keep components small&lt;/strong&gt;, with one component corresponding to one function. Not only does it &lt;strong&gt;save you time, but it also helps you with debugging&lt;/strong&gt; since you know which components are associated with any errors that may arise. &lt;/p&gt;

&lt;p&gt;Let’s take a look at an example of the &lt;code&gt;TodoList&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./components/TodoList.js

import React from 'react';

import { useTodoList } from '../hooks/useTodoList';
import { useQuery } from '../hooks/useQuery';
import TodoItem from './TodoItem';
import NewTodo from './NewTodo';

const TodoList = () =&amp;gt; {
  const { getQuery, setQuery } = useQuery();
  const todos = useTodoList();
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;ul&amp;gt;
        {todos.map(({ id, title, completed }) =&amp;gt; (
          &amp;lt;TodoItem key={id} id={id} title={title} completed={completed} /&amp;gt;
        ))}
        &amp;lt;NewTodo /&amp;gt;
      &amp;lt;/ul&amp;gt;
      &amp;lt;div&amp;gt;
        Highlight Query for incomplete items:
        &amp;lt;input value={getQuery()} onChange={e =&amp;gt; setQuery(e.target.value)} /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default TodoList;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-modifying-the-state-directly"&gt;
  &lt;/a&gt;
  2. Modifying the state directly
&lt;/h2&gt;

&lt;p&gt;In React, &lt;strong&gt;state should be immutable&lt;/strong&gt;. If you modify the state directly, it’ll cause performance issues that are difficult to fix.&lt;/p&gt;

&lt;p&gt;Let’s look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const modifyPetsList = (element, id) =&amp;gt; {
  petsList[id].checked = element.target.checked;
  setPetsList(petsList);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You want to update the checked key of an object in an array based on the state of a checkbox, but you have a problem. React can’t observe and trigger re-rendering because the object is being changed with the same reference. &lt;/p&gt;

&lt;p&gt;To fix this, you can either use the &lt;code&gt;setState()&lt;/code&gt; method or the &lt;code&gt;useState()&lt;/code&gt; hook. Either of these methods will ensure that your changes are acknowledged by React and your DOM is correctly re-rendered.&lt;/p&gt;

&lt;p&gt;Let’s rewrite the previous example and use the &lt;code&gt;useState()&lt;/code&gt; method. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You could also use &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;spread syntax&lt;/code&gt; to avoid mutating other state values.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const modifyPetsList = (element, id) =&amp;gt; {
  const { checked } = element.target;
  setpetsList((pets) =&amp;gt; {
    return pets.map((pet, index) =&amp;gt; {
      if (id === index) {
        pet = { ...pet, checked };
      }
      return pet;
    });
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-passing-a-number-as-a-string-when-passing-props"&gt;
  &lt;/a&gt;
  3. Passing a number as a string when passing props
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Passing a number as a string when passing props can lead to issues&lt;/strong&gt; in a React program. &lt;/p&gt;

&lt;p&gt;Let’s start with an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Arrival extends React.Component {
  render() {
    return (
      &amp;lt;h1&amp;gt;
        Hi! You arrived {this.props.position === 1 ? "first!" : "last!"} .
      &amp;lt;/h1&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, the component expects the position as a prop and declares that the position should be a number. Since you’re making a strict comparison, anything that’s not a number or not exactly equal to 1 would trigger the second expression and print “last!”. &lt;/p&gt;

&lt;p&gt;To fix this, you should insert curly brackets around the input like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const element = &amp;lt;Arrival position={1} /&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-not-using-raw-key-endraw-on-a-listing-component"&gt;
  &lt;/a&gt;
  4. Not using &lt;code&gt;key&lt;/code&gt; on a listing component
&lt;/h2&gt;

&lt;p&gt;Let’s say you need to render a list of items and your code looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const lists = ['cat', 'dog', 'fish’];

render() {
  return (
    &amp;lt;ul&amp;gt;
      {lists.map(listNo =&amp;gt;
        &amp;lt;li&amp;gt;{listNo}&amp;lt;/li&amp;gt;)}
    &amp;lt;/ul&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you’re working with a smaller app, this could work. But when working with large lists, you’ll run into rendering problems when wanting to modify or delete an item from the list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React tracks all of the list elements on the Document Object Model (DOM)&lt;/strong&gt;. React wouldn’t know what has changed in your list without this record. &lt;/p&gt;

&lt;p&gt;To fix this, &lt;strong&gt;you need to add keys to all of your list elements&lt;/strong&gt;. Keys give each element a unique identity, which helps React determine which items have been added, removed, modified, etc. &lt;/p&gt;

&lt;p&gt;Here’s how to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  {lists.map(listNo =&amp;gt;
    &amp;lt;li key={listNo}&amp;gt;{listNo}&amp;lt;/li&amp;gt;)}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-forgetting-that-setstate-is-asynchronous"&gt;
  &lt;/a&gt;
  5. Forgetting that setState is asynchronous
&lt;/h2&gt;

&lt;p&gt;It’s easy to forget that &lt;strong&gt;the state in React is asynchronous&lt;/strong&gt;. It’s something that even the most seasoned React developers forget. &lt;/p&gt;

&lt;p&gt;Being asynchronous means that &lt;strong&gt;any modifications you make don’t take effect immediately&lt;/strong&gt; (and may take effect on the next render). &lt;strong&gt;React automatically batches update calls&lt;/strong&gt; to improve performance. If you access a state value right after setting it, you might not get the most accurate result.&lt;/p&gt;

&lt;p&gt;Let’s look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;handlePetsUpdate = (petCount) =&amp;gt; {
  this.setState({ petCount });
  this.props.callback(this.state.petCount); // Old value
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can fix this by giving an optional second parameter to &lt;code&gt;setState()&lt;/code&gt;, which will act as a callback function. The callback function will be called right after you update the state with your change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;handlePetsUpdate = (petCount) =&amp;gt; {
  this.setState({ petCount }, () =&amp;gt; {
    this.props.callback(this.state.petCount); // Updated value
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The same thing is true for &lt;code&gt;useState()&lt;/code&gt;, except they don’t have a similar callback argument to &lt;code&gt;setState()&lt;/code&gt;. Instead, you would use the &lt;code&gt;useEffect()&lt;/code&gt; hook to get the same result.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-using-redux-too-much"&gt;
  &lt;/a&gt;
  6. Using Redux too much
&lt;/h2&gt;

&lt;p&gt;With bigger React apps, many developers use Redux to manage global state. &lt;strong&gt;While Redux is useful, you don’t need to use it to manage every state in your apps&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;If you have an app that doesn’t have any parallel-level components that need to exchange information, you have no need to add an extra library to your project. It’s recommended to use a local state method or &lt;code&gt;useState&lt;/code&gt; over Redux when you use a form component and want to check the state of a check button every time it’s accessed.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-creating-and-using-god-components"&gt;
  &lt;/a&gt;
  7. Creating and using God components
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;God components are monolithic and not reusable&lt;/strong&gt;. They’re referred to as an “anti-pattern” in React. You shouldn’t build an entire page with all of your UI elements crammed into one component. &lt;br&gt;
You should instead take the time to outline the different interconnected parts of your app and make them into their own components. When you separate components this way, all parts of your app are easier to maintain and restructure when needed.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#8-not-following-the-reactjs-folder-structure"&gt;
  &lt;/a&gt;
  8. Not following the ReactJS folder structure
&lt;/h2&gt;

&lt;p&gt;The projects you create aren’t just made for current development. They most likely will need to be maintained or manipulated in the future. &lt;strong&gt;Folder structure is very important when considering future possibilities for a project&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Let’s take a look at a standard folder structure followed by the ReactJS community:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ILFf5Zit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/091wqkv30hxzg5sj7aek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ILFf5Zit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/091wqkv30hxzg5sj7aek.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When navigating into any existing projects, it’s useful to have separate places for containers, assets, and components. It’s also useful to follow naming conventions to help with readability and organization. This helps you easily identify the purpose of any code written in your projects.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#9-sending-props-as-strings-instead-of-numbers"&gt;
  &lt;/a&gt;
  9. Sending props as strings (instead of numbers)
&lt;/h2&gt;

&lt;p&gt;React developers with experience writing a lot of HTML find it natural to write something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;MyComponent value=”4” /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This value prop will actually be sent to MyComponent as a string. If you do need it as a number, you can fix this issue by using something like the &lt;code&gt;parseInt()&lt;/code&gt; function or inserting curly brackets instead of quotation marks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;MyComponent value={4} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-forgetting-to-start-a-component-name-with-a-capital-letter"&gt;
  &lt;/a&gt;
  10. Forgetting to start a component name with a capital letter
&lt;/h2&gt;

&lt;p&gt;Forgetting to start component names with capital letters is a small mistake that’s very easy to make. &lt;strong&gt;In JSX, a component that begins with a lowercase letter compiles down to an HTML element&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Let’s say you wrote something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class demoComponentName extends React.Component {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will cause an error that tells you that if you meant to render a React component, you need to start its name with an uppercase letter. &lt;/p&gt;

&lt;p&gt;This mistake has an easy fix, which is starting component names with capital letters like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class DemoComponentName extends React.Component {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-learn-next"&gt;
  &lt;/a&gt;
  What to learn next
&lt;/h2&gt;

&lt;p&gt;Now that we’ve explored the top ten mistakes React developers make, it’s time to start working with React and applying the skills you learned here today. React developers are in high demand, so adding React to your skillset is a wise career investment.&lt;/p&gt;

&lt;p&gt;Some recommended concepts to work with next are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Libraries in React&lt;/li&gt;
&lt;li&gt;Initializing Firebase in React&lt;/li&gt;
&lt;li&gt;App development with Global State in React&lt;/li&gt;
&lt;li&gt;Etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get hands-on experience with these concepts and more, check out Educative’s learning path, &lt;a href="https://www.educative.io/path/react-front-end-developer"&gt;&lt;strong&gt;React for Front-End Developers&lt;/strong&gt;&lt;/a&gt;. This learning path is perfect for you if you already have experience working with JavaScript and are ready to add React to your skillset. You’ll cover everything from the fundamentals of React to making use of design patterns when creating apps in React, all with in-browser coding exercises.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-reading-about-react"&gt;
  &lt;/a&gt;
  Continue reading about React
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/what-is-react-tutorial"&gt;What is React? A tutorial on how to get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/best-practices-react-developer"&gt;Five best practices for React developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/react-instagram-tutorial"&gt;React Tutorial: How to build the Instagram UI with React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>programming</category>
      <category>javascript</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>That boot camp might be lying to you</title>
      <author>sheriffderek</author>
      <pubDate>Thu, 06 May 2021 22:22:42 +0000</pubDate>
      <link>https://dev.to/perpetual_edu/that-boot-camp-might-be-lying-to-you-46ke</link>
      <guid>https://dev.to/perpetual_edu/that-boot-camp-might-be-lying-to-you-46ke</guid>
      <description>&lt;h2&gt;
  &lt;a href="#have-you-noticed-that-all-of-the-boot-camps-get-the-best-boot-camp-award-in-some-shape-or-form"&gt;
  &lt;/a&gt;
  Have you noticed that ALL of the boot camps get the "Best Boot Camp" award - in some shape or form?
&lt;/h2&gt;

&lt;p&gt;Had you noticed that they almost all get 5/5 scores? Can they really ALL be &lt;em&gt;the best&lt;/em&gt;. Well, if you didn't notice &lt;em&gt;that&lt;/em&gt; - then you definitely didn't notice all of the really sneaky stuff.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/luxIa3Qs2lA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Before you fall into the high-pressure sales trap, take a second look. Just because they are lying to &lt;em&gt;you&lt;/em&gt; doesn't mean you have to lie to yourself.&lt;/p&gt;




&lt;p&gt;Also - if anyone needs some fake awards, &lt;em&gt;we have Photoshop&lt;/em&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Advanced YAML Syntax Cheatsheet</title>
      <author>Ryan Thelin</author>
      <pubDate>Thu, 06 May 2021 22:21:58 +0000</pubDate>
      <link>https://dev.to/educative/advanced-yaml-syntax-cheatsheet-59ij</link>
      <guid>https://dev.to/educative/advanced-yaml-syntax-cheatsheet-59ij</guid>
      <description>&lt;p&gt;YAML (YAML Ain’t Markup Language) is a data serialization language used to create key-value pair configuration files and app APIs. It's a superset of JSON and is formatted using line breaks and whitespace to improve readability. &lt;/p&gt;

&lt;p&gt;While not a daily use technology, it's an important foundation for many modern technologies like &lt;a href="https://www.educative.io/blog/ansible-for-beginners"&gt;Ansible&lt;/a&gt; and is, therefore, a prerequisite for higher-paying developer roles. &lt;/p&gt;

&lt;p&gt;Today, we'll help you perfect your YAML knowledge so you can impress your next interviewer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s what we’ll cover today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#validator"&gt;Validator and Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#anchors"&gt;Anchors and Alias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#schemas"&gt;Schemas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#escape-seq"&gt;Escape Sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#separators"&gt;Separators and Directives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next"&gt;Wrapping up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h4&gt;&lt;b&gt; Become a certified YAML professional &lt;/b&gt;&lt;/h4&gt;
 

&lt;p&gt;Stand out from other applicants with a YAML certification that you can earn in less than an hour.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/courses/introduction-to-yaml"&gt;Introduction to YAML&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yaml-validator-and-parser"&gt;
  &lt;/a&gt;
  YAML Validator and Parser
&lt;/h2&gt;

&lt;p&gt;While YAML is more readable than XML, it's easy to miss mistakes in formattings like the number of spaces across a multi-line section or forgetting &lt;a href="https://www.educative.io/blog/yaml-tutorial"&gt;newline markers&lt;/a&gt;. These can cause sweeping errors for the YAML parser, which interprets YAML into more machine-readable actions.&lt;/p&gt;

&lt;p&gt;Parsing errors are hard to find by hand, so many developers choose to use a web validator or linter. These tools review your YAML document and highlight any potential errors to ensure you have valid YAML before putting it into use.&lt;/p&gt;

&lt;p&gt;The most popular validator is YAMLLint, a free &lt;a href="https://www.educative.io/blog/contribue-open-source-python-project"&gt;open-source&lt;/a&gt; tool available in your browser or on &lt;a href="https://www.educative.io/blog/git-github-tutorial-beginners"&gt;Github&lt;/a&gt;. YAMLLint is considered the most convenient linter because it provides error highlighting, autoformatting for copy/pasted YAML, and auto-correct options.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yaml-anchors-and-alias"&gt;
  &lt;/a&gt;
  YAML Anchors and Alias
&lt;/h2&gt;

&lt;p&gt;Anchors and Aliases are YAML constructions that allow you to reduce repeat syntax and extend existing data nodes. You can place Anchors (&lt;code&gt;&amp;amp;&lt;/code&gt;) on an entity to mark a multi-line section.  You can then use an Alias (&lt;code&gt;*&lt;/code&gt;) call that anchor later in the document to reference that section. Anchors and Aliases are very helpful for larger projects as they cut visual clutter caused by extra lines.&lt;/p&gt;

&lt;p&gt;The Alias essentially acts as a "see above'' command, which makes the program pause standard traversal, return to the anchor point, then resume standard traversal after the Anchored portion is finished. If you're familiar with Object-Oriented Programming designs, you'll feel right at home with Anchors.&lt;/p&gt;

&lt;p&gt;Below, the &lt;code&gt;build-test&lt;/code&gt; Anchor begins on &lt;strong&gt;line 3&lt;/strong&gt; and is called by Aliases on &lt;strong&gt;lines 13 and 15&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;definitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;build-test&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and test&lt;/span&gt;
        &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;mvn package&lt;/span&gt;
        &lt;span class="na"&gt;artifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;target/**&lt;/span&gt;

&lt;span class="na"&gt;pipelines&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;develop&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*build-test&lt;/span&gt;
    &lt;span class="na"&gt;master&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*build-test&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#overrides-and-extensions"&gt;
  &lt;/a&gt;
  Overrides and Extensions
&lt;/h3&gt;

&lt;p&gt;You can also tweak the Anchor when called by entering &lt;code&gt;&amp;lt;&amp;lt;:&lt;/code&gt; before the Alias. Below this, you can write any desired changes. Mappings are overridden if the new mapping has the same name or is added afterward if different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;definitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;build-test&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and test&lt;/span&gt;
        &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;mvn package&lt;/span&gt;
        &lt;span class="na"&gt;artifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;target/**&lt;/span&gt;


&lt;span class="na"&gt;pipelines&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;develop&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*build-test&lt;/span&gt;
    &lt;span class="na"&gt;master&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
          &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*build-test&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Testing on Master&lt;/span&gt; &lt;span class="c1"&gt;#override&lt;/span&gt;
          &lt;span class="na"&gt;ongoing&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;#extension&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yaml-schemas"&gt;
  &lt;/a&gt;
  YAML Schemas
&lt;/h2&gt;

&lt;p&gt;Schemas are rulesets in YAML 1.2 that tell the loader/parser what each part of your YAML file converts to in actual commands. They're essentially a collection of if/then statements to process human-readable YAML tags into. For example, the YAML Core schema states that both &lt;code&gt;!!str my string&lt;/code&gt; and &lt;code&gt;my string&lt;/code&gt; are equivalent and should be parsed to the same action.&lt;/p&gt;

&lt;p&gt;There is a default schema for general-purpose YAML, and many special-use schemas that are each suited for certain niche scenarios. You can even create your own custom schemas or download other user's schemas on the JSON Schema Store.&lt;/p&gt;

&lt;p&gt;Custom schemas are helpful when configuration files include custom objects or if you want to create language-specific object serialization&lt;br&gt;
s.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="c1"&gt;# Ruby Psych&lt;/span&gt;
&lt;span class="na"&gt;dice&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!ruby/Object:Dice&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;6&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="c1"&gt;# perl YAML::XS, YAML.pm, YAML::Syck (Dump and Load)&lt;/span&gt;
&lt;span class="na"&gt;dice&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!!perl/array:Dice&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;6&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="c1"&gt;# perl YAML.pm, YAML::Syck (Load)&lt;/span&gt;
&lt;span class="na"&gt;dice&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!perl/array:Dice&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;6&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="c1"&gt;# Pyyaml&lt;/span&gt;
&lt;span class="na"&gt;dice&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!!python/object/new:__main__.Dice&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!!python/tuple&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;6&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are three default schemas for YAML are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Failsafe Schema&lt;/strong&gt;: A minimalist schema that only supports String (&lt;code&gt;!!str&lt;/code&gt;), Map (&lt;code&gt;!!map&lt;/code&gt;), and Sequence (&lt;code&gt;!!seq&lt;/code&gt;) tags. Failsafe is guaranteed to work with any YAML document due to its simplicity, but it does not support any complex tags.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JSON schema&lt;/strong&gt;: A foundational schema designed to reliably parse equivalent YAML and JSON files to the same end result. This is the most commonly used schema and is the starting point for most schemas. It supports all failsafe tags, as well as Boolean (&lt;code&gt;!!bool&lt;/code&gt;), null (&lt;code&gt;!!null&lt;/code&gt;), Integer (&lt;code&gt;!!int&lt;/code&gt;), and Float (&lt;code&gt;!!float&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Core Schema&lt;/strong&gt;: The default YAML schema that widens the matching criteria on the YAML side. It is essentially a less opinionated version of the JSON schema. For example, JSON accepts Booleans that achieve the criteria "Match: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt;". By comparison, here is Core's Boolean criteria: "&lt;code&gt;true&lt;/code&gt; | &lt;code&gt;True&lt;/code&gt; | &lt;code&gt;TRUE&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; | &lt;code&gt;False&lt;/code&gt; | &lt;code&gt;FALSE&lt;/code&gt;". &lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;
  &lt;a href="#keep-the-learning-going" class="anchor"&gt;
  &lt;/a&gt;
  Keep the learning going.
&lt;/h4&gt;

&lt;p&gt;Brush up on your expert YAML skills and earn a certificate at the same time. Educative's text-based courses are easy to skim and feature live coding environments, meaning you can better your skills in half the time. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/courses/introduction-to-yaml"&gt;Introduction to YAML&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yaml-escape-sequences"&gt;
  &lt;/a&gt;
  YAML Escape Sequences
&lt;/h2&gt;

&lt;p&gt;YAML's readable syntax is only possible because it uses indents and whitespace over inline syntactic markers like square brackets or curly braces. However, this can get difficult when using special characters with quotation mark scalars.&lt;/p&gt;

&lt;p&gt;YAML offers Escape Sequences to allow you to indicate if the character should be interpreted as a special character or as part of the scalar. For example, you could escape a single space using &lt;code&gt;&amp;amp;#x20;&lt;/code&gt; to create a string with a value of &lt;code&gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Escape Sequences come in 3 types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Entity Escapes&lt;/strong&gt;, which allow you to use otherwise syntactically important characters by space (&lt;code&gt;&amp;amp;#x20;&lt;/code&gt;), colon (&lt;code&gt;&amp;amp;#58;&lt;/code&gt;), ampersand (&lt;code&gt;&amp;amp;amp;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Unicode Escapes&lt;/strong&gt;, which let you add a space (&lt;code&gt;\u0020&lt;/code&gt;), single quote (&lt;code&gt;\u0027&lt;/code&gt;), or double quote (&lt;code&gt;\u0022&lt;/code&gt;) by calling their unique key directly from the Unicode key-value pairs list.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quoted Escapes&lt;/strong&gt;, which let you display quoted sentences using additional quotes. For example, double quotes can be shown within single quotes (‘ "quote" ’) or nested within another set of double quotes ("abc "quote" cba") and with nested single quotes (‘ ‘quote’ ’).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; A full list of YAML Escape Sequences can be found in the official YAML Specification.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yaml-separators-and-directives"&gt;
  &lt;/a&gt;
  YAML Separators and Directives
&lt;/h2&gt;

&lt;p&gt;You may have noticed that all YAML documents begin with &lt;code&gt;---&lt;/code&gt;. This notifies the parser that this data is a separate chunk but was sent as part of the same request for efficiency.&lt;/p&gt;

&lt;p&gt;Another more advanced separator is &lt;code&gt;...&lt;/code&gt;, which marks the end of a document. The end-of-document separator must be followed either by a beginning-of-document separator (&lt;code&gt;---&lt;/code&gt;) or a set of directives. Directives are defined settings marked by &lt;code&gt;%&lt;/code&gt; that comes before a document and are followed by &lt;code&gt;---&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This means &lt;code&gt;...&lt;/code&gt; and &lt;code&gt;---&lt;/code&gt; are needed to mark the boundaries of the directive space. The two current directives are &lt;code&gt;%YAML&lt;/code&gt;, which lets you set the YAML version for the coming document, and &lt;code&gt;%TAGS&lt;/code&gt;, which lets you create custom shorthands for tags you'll use in the document.&lt;/p&gt;

&lt;p&gt;Directives are only useful in niche circumstances, like using an old YAML document that's too large to update. Usually, you will not need directives or a document separator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;doc 1&lt;/span&gt; 
&lt;span class="nn"&gt;...&lt;/span&gt; 

&lt;span class="nt"&gt;%TAG&lt;/span&gt; &lt;span class="kt"&gt;!foo!&lt;/span&gt; &lt;span class="kt"&gt;!&lt;/span&gt;&lt;span class="err"&gt;foo-types/&lt;/span&gt; 

&lt;span class="s"&gt;--------&lt;/span&gt; 

&lt;span class="s"&gt;doc &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yaml-timestamp"&gt;
  &lt;/a&gt;
  YAML Timestamp
&lt;/h2&gt;

&lt;p&gt;Timestamp is a helpful data type that lets you store times as a unit rather than as a collection of different numbers. It's marked by the &lt;code&gt;!!timestamp&lt;/code&gt; data tag and can hold various levels of specificity such as simple &lt;code&gt;yyyy/mm/dd&lt;/code&gt; or down to a fraction of a second &lt;code&gt;2001-12-15T2:59:43.10&lt;/code&gt;. &lt;br&gt;
You can also separate date and time using spaces to make the timestamp more readable, like &lt;code&gt;2001-12-15 2:59:43.10&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All timestamps are recorded as Coordinated Universal Time (UTC) unless another timezone is specified at the end of the timestamps. You define the timezone by including how many hours it is ahead or behind UTC. &lt;/p&gt;

&lt;p&gt;For example, I could set a timestamp as Pacific Standard Time (PST) with a &lt;code&gt;-8&lt;/code&gt; at the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2001-12-15 2:59:43.10 -8`. 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is similar to DateTime used in popular programming languages like JavaScript or Python, except with how it handles timezone. DateTime records the time listed in the timezone of the host server by default. &lt;/p&gt;

&lt;p&gt;This can lead to problems if working with networks from outside their native timezone. The computer needs to convert to UTC then to the destination timezone every time the date is called, slowing down processes.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Good job tackling this advanced YAML syntax. While YAML might seem like a niche skill, it's a prerequisite for many jobs across the market. However, most coding interviews will not include YAML. The best way to demonstrate your YAML knowledge is to use it in a portfolio project or be able to show past experience with the technology.&lt;/p&gt;

&lt;p&gt;To help you wow recruiters with your YAML skills, Educative has created &lt;a href="https://www.educative.io/courses/introduction-to-yaml"&gt;&lt;strong&gt;Introduction to YAML&lt;/strong&gt;&lt;/a&gt;. This course covers beginner to expert level syntax and techniques in a condensed, hands-on format. By the end of the course, you'll be able to use YAML with confidence and will have your own YAML certification to put on your resume.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#continue-reading-about-yaml-and-foundational-skills"&gt;
  &lt;/a&gt;
  Continue reading about YAML and foundational skills
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/yaml-tutorial"&gt;YAML Tutorial: get started with YAML in 5 minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/data-structures-algorithms"&gt;Top Data Structures and Algorithms every developer must know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/big-o-notation-cheat-sheet"&gt;Big-O Notation Cheat Sheet: quick answers to Big-O questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>yaml</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Avoid. Magic. Numbers</title>
      <author>Ahmad khattab</author>
      <pubDate>Thu, 06 May 2021 22:18:21 +0000</pubDate>
      <link>https://dev.to/rockwell/avoid-magic-numbers-57l5</link>
      <guid>https://dev.to/rockwell/avoid-magic-numbers-57l5</guid>
      <description>&lt;p&gt;Magic numbers, you see them everyday and probably have used a fair amount of them once in a while. What are magic numbers, and magic booleans?.&lt;/p&gt;

&lt;p&gt;Well, I'll try to define both of them at once, a magic number (or boolean)is an argument to a function, you don't know how it works, or what it will do and how it will affect the function, you just know that it's there, and you don't play with it in fear something breaking. &lt;/p&gt;

&lt;p&gt;So, what would you usually do to discover what a magic number/boolean will do?. Well, you might go visit the docs of the tool that you're using, or read the source code trying to figure out what this black magic does and why it exists in your codebase.&lt;/p&gt;

&lt;p&gt;Let's illustrate this with an example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyCode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attemptSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What does this do?. Well, obviously this is an event listener, as it receives &lt;code&gt;e&lt;/code&gt; as an argument, it listens for a specific key-code &lt;code&gt;13&lt;/code&gt; and when matched it calls &lt;code&gt;attemptSendMessage&lt;/code&gt;. We're not concerned with the &lt;code&gt;attemptSendMessage&lt;/code&gt; method. But, let's examine the number. What does the number refer to? which is the key that this accepts?.&lt;/p&gt;

&lt;p&gt;A few possible solutions that might come to mind, you mind find yourself doing this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
  &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// logs the key that was pressed&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyCode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attemptSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, you might google and find a question on stackoverflow. These, all are possible solutions that will eventually solve this issue of your understanding of this magic number. However, a better way to write this is storing the magic number inside a variable that explains what this number is really is.&lt;/p&gt;

&lt;p&gt;If you tried any of the solutions above you'll find out that the number 13 is the key-code of &lt;code&gt;enter&lt;/code&gt; key on the keyboard.&lt;/p&gt;

&lt;p&gt;Now, with this knowledge let's store the number inside a variable and see what changes, shall we?.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keycodeOfEnter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyCode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;keycodeOfEnter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attemptSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can you spot the difference?, Well we stored the number inside a constant and used the constant instead of the number. Now, any developer(or yourself) when they look at this code, they will now instantly what this magic number is, it saves you a couple of minutes of googling and searching.&lt;/p&gt;

&lt;p&gt;You should also be aware that &lt;code&gt;keyCode&lt;/code&gt; has been deprecated and replaced with &lt;code&gt;code&lt;/code&gt;. Then you can replace it with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attemptSendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Always, try to store magic numbers inside variables. Magic numbers can be vague and evil, because you have no idea what they are for and what they represent.&lt;/p&gt;

&lt;p&gt;In a future post, I'll be illustrating the case for magic booleans. Until then, have a great day. And, thank you for reading this.&lt;/p&gt;

&lt;p&gt;Related Links &lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode"&gt;Keyboard Events&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Build a Pomodoro timer using JavaScript</title>
      <author>Fahad Hassan</author>
      <pubDate>Thu, 06 May 2021 22:01:58 +0000</pubDate>
      <link>https://dev.to/fahadhassan1213/build-a-pomodoro-timer-using-javascript-3d13</link>
      <guid>https://dev.to/fahadhassan1213/build-a-pomodoro-timer-using-javascript-3d13</guid>
      <description>&lt;p&gt;Let's understand how can we create a Pomodoro timer by using JavaScript&lt;/p&gt;

&lt;p&gt;To get complete code visit: &lt;a href="https://github.com/fahadhassan1213/Pomodoro-Timer"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-pomodoro-timer"&gt;
  &lt;/a&gt;
  What is a Pomodoro Timer?
&lt;/h3&gt;

&lt;p&gt;Pomodoro Timer is a technique that uses a timer to break down work into intervals. Traditionally 25 minutes in length separated by short breaks. The image below is an example of a Pomodoro timer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's get started!&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#task-1"&gt;
  &lt;/a&gt;
  Task# 1
&lt;/h4&gt;

&lt;p&gt;We need to decrease the time of the timer starting from 25 minutes to 0&lt;br&gt;
As we know, in a Pomodoro timer every work session will be of 25 minutes and after every 25 minutes there will be a break session, let suppose break time is 5 minutes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;workDuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="nx"&gt;breakDuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our first task is to decrease the time by one second seconds = seconds - 1 on every clock second.&lt;/p&gt;

&lt;p&gt;We also need to keep in mind that when the seconds become :00 we need to reinitialized seconds = 60 and with this, we also need to decrement the minutes by 1 workDuration = workDuration - 1;&lt;/p&gt;

&lt;p&gt;let's arrange the code by writing a function &lt;code&gt;RemainingTime()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;workMinutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;workDuration&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;           &lt;span class="c1"&gt;//25 = 24:59&lt;/span&gt;
&lt;span class="nx"&gt;breakMinutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;breakDuration&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;        &lt;span class="c1"&gt;//5 = 4:59 &lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;RemainingTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;workMinutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;workMinutes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are done with Task# 1. But there is a problem!&lt;/p&gt;

&lt;p&gt;The RemainingTime() function will execute only once when we call it, so to fix this problem we need to call this function on every clock second.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#task-2"&gt;
  &lt;/a&gt;
  Task 2
&lt;/h4&gt;

&lt;p&gt;To call a function multiple times there is a built-in method in JavaScript named as &lt;em&gt;setInterval&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setInterval()&lt;/code&gt; method is used to execute a specified function multiple times at set time intervals specified in milliseconds (1000ms = 1second). We have to pass to arguments to this method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setInterval(your_fucntion_name , specified_time)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we want to call our function on every clock second so our arguments to the set interval method will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setInterval(RemainingTime,1000)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the code will look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;RemainingTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;workMinutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;workMinutes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RemainingTime&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it make sense , Our function will be called on every clock second&lt;br&gt;
If you noticed we are not dealing with the break time in the above function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if the workMinutes become -ve by continuously decrement in workMinutes?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When the work duration will be over (workMinutes become -ve) we need to start the break session (breakDuration = 5)&lt;/p&gt;

&lt;p&gt;For this purpose we have to add some conditions in our code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;RemainingTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;workMinutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;workMinutes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workMinutes&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
             &lt;span class="nx"&gt;workMinutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;breakMinutes&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RemainingTime&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code when the workMinutes become -ve(or less than 0) then breakMinutes will be assigned to workMinutes&lt;br&gt;
This condition causes the code to start a session of break(5 minutes session) when the workMinutes become over&lt;/p&gt;

&lt;p&gt;Let understand this by an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- let we have workMinutes = 4:59 and we have breakMinutes = 1:59
- Now start decreasing the workMinutes
  (4:59,4:58,4:57,4:56 ..... 0:05,0:04,0:03,0:02,0:01,0:00,-1:59)
  in the above line when the workMinutes become -ve(-1:59)
- We will assign breakMinute to workMinutes then workMinutes 
  become workMinutes = 1:59
- Now when we do this workMinutes will never goes to -ve value. 
- However when it will become -ve It will start a break session 
  of specified time (e.g: 1:59) and will start decreasing the 
  break time which is (1:59,1:59,1:57 ..... 0:00)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Now if you noticed, what will we do when the break session will over?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;if we do not deal with this, the timer will again go to -ve time and will start decreasing that time.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#task-3"&gt;
  &lt;/a&gt;
  Task 3
&lt;/h4&gt;

&lt;p&gt;The solution to the above problem is, we have to again start the work session when the break session become 0:00 or turned to the -ve timer.&lt;/p&gt;

&lt;p&gt;To do this we have to add another condition that will help us regarding this.&lt;/p&gt;

&lt;p&gt;Before doing this, I want you to consider that we are also dealing with the break session after every work session. So we need a break session after every work session.&lt;/p&gt;

&lt;p&gt;We just have to follow the following sequence for a continuous timer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;After every work session, there will be a break session&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;After the break session, there will be always a work session&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need to count the break session so that by using breakCount we can be able to check the turn of the break session&lt;/p&gt;

&lt;p&gt;To follow this sequence in our code we need to just put some conditions and these conditions will check whether there is time for work session time or break session time.&lt;/p&gt;

&lt;p&gt;let have a look at the code to understand the scenario.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;breakCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;RemainingTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;workMinutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;workMinutes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;workMinutes&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;breakCount&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
               &lt;span class="nx"&gt;workMinutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;breakMinutes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
               &lt;span class="nx"&gt;breakCount&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="nx"&gt;workMinutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;workDuration&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
               &lt;span class="nx"&gt;breakCount&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RemainingTime&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Hurry! our Pomodoro timer is ready&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the end when we want to stop our timer. For this, we just have to stop the setInterval() method so that it stops the function calling.&lt;/p&gt;

&lt;p&gt;To do this we just have to use the built-in method of JavaScript named as &lt;code&gt;clearInterval()&lt;/code&gt; method which is used to clear or stop the set Intervals in JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You have to add an event listener on your stop button. When the stop button is clicked, you need to call the method &lt;code&gt;clearInterval(timer)&lt;/code&gt; which will stop the timer completely.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thanks for reading this article!&lt;br&gt;
want to ask something? hit a comment below!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Track User's Location On Your Website</title>
      <author>Bibek</author>
      <pubDate>Thu, 06 May 2021 21:59:31 +0000</pubDate>
      <link>https://dev.to/bibekkakati/track-user-s-location-on-your-website-58e0</link>
      <guid>https://dev.to/bibekkakati/track-user-s-location-on-your-website-58e0</guid>
      <description>&lt;p&gt;Hello everyone 👋&lt;/p&gt;

&lt;p&gt;In this article, we will see how can we get access to the user's location on our website.&lt;/p&gt;

&lt;p&gt;Tracking the user's location is not always necessary, but if you are building something like a location sharing application, a map-related application or to offer customized results based on the user's location then you need access to the user's location. By application, I mean web-based applications.&lt;/p&gt;

&lt;p&gt;So how can we get access to the user's location? &lt;/p&gt;

&lt;p&gt;Modern browsers provide almost everything we need in our application to enhance the user's experience. And here comes the &lt;code&gt;Geolocation API&lt;/code&gt; which is a Web API provided by the browsers to get access to the user's location with their consent.&lt;/p&gt;

&lt;p&gt;Live link to try it out at the end of the article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-geolocation-api"&gt;
  &lt;/a&gt;
  What is Geolocation API?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Geolocation API&lt;/code&gt; is a Web API that gives Web content access to the location of the device.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Permission required to use the &lt;code&gt;Geolocation API&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation 📍
&lt;/h3&gt;

&lt;p&gt;Let's understand the implementation of the API.&lt;/p&gt;

&lt;p&gt;We can access the API from the browser's &lt;code&gt;window.navigator&lt;/code&gt; object.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#check-for-raw-geolocation-api-endraw-support"&gt;
  &lt;/a&gt;
  Check For &lt;code&gt;Geolocation API&lt;/code&gt; Support
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geolocation&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// It supports&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#geolocation-interface"&gt;
  &lt;/a&gt;
  Geolocation Interface 🗺️
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;geolocation&lt;/code&gt; is the main method that we need to access to get, track, cancel tracking the location. It has three properties (methods):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getCurrentPosition&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;watchPosition&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clearWatch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#current-location"&gt;
  &lt;/a&gt;
  Current Location 📌
&lt;/h3&gt;

&lt;p&gt;To get the current location of the device, we will use the &lt;code&gt;getCurrentPosition&lt;/code&gt; method. This method will pass the current &lt;code&gt;position&lt;/code&gt; to the &lt;code&gt;positionCallback&lt;/code&gt; and in case of &lt;code&gt;error&lt;/code&gt;, it will pass the &lt;code&gt;error&lt;/code&gt; object to the &lt;code&gt;errorCallback&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geolocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCurrentPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;positionCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;errorCallback&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#position-callback"&gt;
  &lt;/a&gt;
  Position Callback
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;positionCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Assigning coords object for easier access.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Position of the longitude .&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Position of the latitude.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Accuracy of latitude &amp;amp; longitude in meters.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accuracy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accuracy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Altitude in meters, relative to sea level.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;altitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;altitude&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Accuracy of the altitude in meters. Value can be null.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;altitudeAccuracy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;altitudeAccuracy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Direction towards which the device is facing. This value specified&lt;/span&gt;
  &lt;span class="c1"&gt;// in degrees clockwise from North. Value can be null.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// The velocity of the device in m/s. Value can be null.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// The time at which the location was retrieved.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the values are of the &lt;code&gt;double&lt;/code&gt; type.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#error-callback"&gt;
  &lt;/a&gt;
  Error Callback
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;errorCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PERMISSION_DENIED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User denied the request for Geolocation.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;POSITION_UNAVAILABLE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Location information is unavailable.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TIMEOUT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The request to get user location timed out.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UNKNOWN_ERROR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;An unknown error occurred.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think this function is very self-explanatory. It is just comparing the error code with the error type and we can handle it in any way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-location"&gt;
  &lt;/a&gt;
  Live Location 🌎
&lt;/h3&gt;

&lt;p&gt;To track the live location of the device we can call the &lt;code&gt;watchPosition&lt;/code&gt; method. This method takes the same arguments as &lt;code&gt;getCurrentPosition&lt;/code&gt;. The method will pass the updated current &lt;code&gt;position&lt;/code&gt; to the &lt;code&gt;positionCallback&lt;/code&gt; as the device change its location and in case of &lt;code&gt;error&lt;/code&gt;, it will pass the &lt;code&gt;error&lt;/code&gt; object to the &lt;code&gt;errorCallback&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geolocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;watchPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="nx"&gt;positionCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;errorCallback&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;watchPosition&lt;/code&gt; method returns an &lt;code&gt;id&lt;/code&gt; which we can use to stop tracking.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#stop-tracking"&gt;
  &lt;/a&gt;
  Stop Tracking  🛑
&lt;/h3&gt;

&lt;p&gt;To stop tracking the live location we can call the &lt;code&gt;clearWatch&lt;/code&gt; method. The method expects &lt;code&gt;id&lt;/code&gt; as an argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geolocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearWatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example✨
&lt;/h3&gt;

&lt;p&gt;Check out the &lt;a href="https://github.com/bibekkakati/blogs-projects/tree/main/web/geolocation-api"&gt;GitHub repo&lt;/a&gt; for sample code.&lt;/p&gt;

&lt;p&gt;Try it out &lt;a href="https://bibekkakati.github.io/blogs-projects/web/geolocation-api/index.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;Mobile devices will give more accuracy.&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Enjoyed? Give it a thumbs-up 👍&lt;/p&gt;

&lt;p&gt;Thank you for reading | Feel free to &lt;a href="https://bibekkakati.me"&gt;connect&lt;/a&gt; 👋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9buHlCpT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-red.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>node</category>
      <category>react</category>
    </item>
    <item>
      <title>Melhorando a performance dos seus testes em PHP/Laravel</title>
      <author>Pedro Paulo Silva</author>
      <pubDate>Thu, 06 May 2021 21:49:29 +0000</pubDate>
      <link>https://dev.to/pedropms/melhorando-a-performance-dos-seus-testes-em-php-laravel-3kip</link>
      <guid>https://dev.to/pedropms/melhorando-a-performance-dos-seus-testes-em-php-laravel-3kip</guid>
      <description>&lt;h1&gt;
  &lt;a href="#o-problema"&gt;
  &lt;/a&gt;
  O problema
&lt;/h1&gt;

&lt;p&gt;Você já se encontrou na situação em que tinha que fazer um &lt;em&gt;deploy&lt;/em&gt; ou subir sua atualização urgente e teve que ficar esperando os testes terminarem para finalizar &lt;em&gt;pipeline&lt;/em&gt;? Nessa hora qualquer minuto é uma eternidade. &lt;/p&gt;

&lt;p&gt;Eu estava enfrentando esse problema, meus testes demoravam cerca de 6 minutos para rodar e esse tempo seguia aumentando a cada nova &lt;em&gt;feature&lt;/em&gt; entregue.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-solu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  A solução
&lt;/h1&gt;

&lt;p&gt;Para resolver isso encontrei o pacote &lt;a href="https://github.com/paratestphp/paratest"&gt;Paratest&lt;/a&gt;, basicamente, esse pacote adiciona suporte a testes paralelos ao PHPUnit, fazendo com que seus testes rodem simultaneamente.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#instala%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Instalação
&lt;/h4&gt;

&lt;p&gt;Primeiro começamos instalando o pacote:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require &lt;span class="nt"&gt;--dev&lt;/span&gt; brianium/paratest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Após isso, sua aplicação já tem suporte aos testes em paralelo. 🥳&lt;/p&gt;

&lt;p&gt;Para começar a usar vamos rodar o comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vendor/bin/paratest &lt;span class="nt"&gt;-p4&lt;/span&gt; &lt;span class="nt"&gt;--runner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;WrapperRunner
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#op%C3%A7%C3%B5es-usadas"&gt;
  &lt;/a&gt;
  Opções usadas:
&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;-p4&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A opção &lt;code&gt;-p&lt;/code&gt; é referente ao número de processos simultâneos que irão rodar os testes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;--runner=WrapperRunner&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Por padrão, o PHPUnit inicia um novo processo para cada arquivo de testes que irá rodar, utilizando o &lt;code&gt;--runner=WrapperRunner&lt;/code&gt; cada processo &lt;code&gt;-p&lt;/code&gt; irá iniciar apenas uma vez e manter tudo o que é preciso para rodar todos os arquivos de testes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para saber todas as opções disponíveis e ter mais detalhes sobre as usadas aqui, acesse a &lt;a href="https://github.com/paratestphp/paratest"&gt;documentação&lt;/a&gt; do pacote.&lt;/p&gt;


&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#resultados"&gt;
  &lt;/a&gt;
  Resultados
&lt;/h4&gt;

&lt;p&gt;Para efeitos de comparação vamos rodar modo sequencial, apenas com o PHPUnit e no modo paralelo, com o Paratest. Serão 646 testes com 75442 asserções, a maioria desses testes sendo de integração, com acesso ao banco de dados e outras dependências.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#testes-sequenciais"&gt;
  &lt;/a&gt;
  Testes Sequenciais:
&lt;/h5&gt;

&lt;p&gt;O tempo levado pelo PHPUnit para rodar todos esses testes foi de aproximadamente 5 minutos e 39 segundos. Agora, lembre-se da situação em que você está esperando a pipeline terminar para finalmente fazer um &lt;em&gt;deploy&lt;/em&gt;, esses quase 6 minutos se tornam uma eternidade.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SAqge80c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x82hzvc6klhqb8ectg9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SAqge80c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x82hzvc6klhqb8ectg9f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#testes-paralelos"&gt;
  &lt;/a&gt;
  Testes Paralelos:
&lt;/h5&gt;

&lt;p&gt;Já o tempo levado pelo Paratest foi de aproximadamente 1 minuto e 11 segundos. Um tempo muito melhor para você que está ansioso esperando.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rbs7riYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qoq01jkggezu5shb0ulh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rbs7riYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qoq01jkggezu5shb0ulh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nem-tudo-s%C3%A3o-flores"&gt;
  &lt;/a&gt;
  Nem tudo são flores 😓
&lt;/h1&gt;

&lt;p&gt;Quando estamos trabalhando com paralelismo um grande problema é controlar o acesso de cada processo aos recursos e dados do sistema, e nesse caso não é diferente. Em testes que devem acessar o banco de dados, modificar e consultar registros pode ocorrer de dois testes acessarem o mesmo dado simultaneamente causando possíveis &lt;em&gt;deadlocks&lt;/em&gt; no banco de dados e assim, também, um desses testes acabará falhando.&lt;/p&gt;

&lt;p&gt;Uma possível solução para esses casos é o isolamento de cada teste no acesso ao banco de dados. É possível fazer isso rodando os testes dentro de uma &lt;em&gt;transaction&lt;/em&gt; assim fazendo com que todos os registros modificados e/ou consultados estejam isolados e tudo que foi feito pelo teste é desconsiderado após seu término.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;O Laravel disponibiliza a &lt;em&gt;Trait&lt;/em&gt; &lt;strong&gt;DatabaseTransactions&lt;/strong&gt;, com ela no seu &lt;strong&gt;TestCase&lt;/strong&gt; (classe na qual seus testes irão extender), seus testes irão por padrão rodar dentro de uma &lt;em&gt;transaction&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Caso use SQLServer, outra possível solução é habilitar a opção &lt;strong&gt;READ_COMMITTED_SNAPSHOT&lt;/strong&gt;, ela ajuda com esses casos de dados sendo acessados e modificados simultanemente. Para mais detalhes acesse: &lt;a href="https://www.mssqltips.com/sqlservertip/6368/sql-server-readcommittedsnapshot-database-option-and-read-commited-transaction-isolation-level/"&gt;https://www.mssqltips.com/sqlservertip/6368/sql-server-readcommittedsnapshot-database-option-and-read-commited-transaction-isolation-level/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Observação: no meu caso as duas opções foram usadas.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h1&gt;

&lt;p&gt;Com a necessidade de cobrir sua aplicação com testes aumentando a cada dia, rapidamente você começa a se sentir incomodado com a demora na finalização dos testes. Para ajudar nesse ponto, a opção de rodar seus testes em paralelo é muito bem vinda, ela está aí para aumentar a performance e produtividade do seu time nos &lt;em&gt;deploys&lt;/em&gt; e no dia a dia.&lt;/p&gt;

&lt;p&gt;Se você ainda não usou, deveria dar uma chance e ver o tempo que você está perdendo &lt;em&gt;(literalmente rs)&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#fontes"&gt;
  &lt;/a&gt;
  Fontes
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Paratest: &lt;a href="https://github.com/paratestphp/paratest"&gt;https://github.com/paratestphp/paratest&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Laravel Doc: &lt;a href="https://laravel.com/docs/8.x/testing#running-tests-in-parallel"&gt;https://laravel.com/docs/8.x/testing#running-tests-in-parallel&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>testing</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title> Let's write a tiny JSON parser in Kotlin! Part 2: The Parser</title>
      <author>Will BL</author>
      <pubDate>Thu, 06 May 2021 21:01:19 +0000</pubDate>
      <link>https://dev.to/williambl/let-s-write-a-tiny-json-parser-in-kotlin-part-2-the-parser-b8g</link>
      <guid>https://dev.to/williambl/let-s-write-a-tiny-json-parser-in-kotlin-part-2-the-parser-b8g</guid>
      <description>&lt;p&gt;So now we have an understanding of JSON and the components that make it up, but we have to create something that will read it - this will be our parser.&lt;/p&gt;

&lt;p&gt;Our parser will step through our JSON file character by character to read it, so it'll need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;remember our JSON&lt;/li&gt;
&lt;li&gt;remember where in the JSON it's currently looking&lt;/li&gt;
&lt;li&gt;know if it's at the end&lt;/li&gt;
&lt;li&gt;read the current character&lt;/li&gt;
&lt;li&gt;step to the next character&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let's do it!&lt;br&gt;
First, we'll create a class which will take in our JSON as a &lt;code&gt;CharSequence&lt;/code&gt; (we could use a &lt;code&gt;String&lt;/code&gt;, too - the functionality is the same, but this lets you do something weird like throw a &lt;code&gt;StringBuilder&lt;/code&gt; in there), and will remember where it's currently reading:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CharSequence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's give it the ability to read and step through the input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CharSequence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;step&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Char&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;++]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Char&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;peek()&lt;/code&gt; will read the current character, &lt;code&gt;skip()&lt;/code&gt;, will move the cursor forwards by one, and &lt;code&gt;step()&lt;/code&gt; and read and then move on.&lt;/p&gt;

&lt;p&gt;However, trying to read past the end will throw an exception, so let's add a method to check if we're at the end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;hasNext&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is everything we'll need for moving along our JSON text. Next, let's add some functions to actually read it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;StringBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;step&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CharSequence&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;StringBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;patternCursor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;patternCursor&lt;/span&gt;&lt;span class="p"&gt;++])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two functions are vital to how the parser will do its job:&lt;/p&gt;

&lt;p&gt;They read the JSON one character at a time, and store what they've read in a buffer, until the character they read reaches a certain condition. For the first function, that condition is given via a predicate, and in the second, the condition is that the buffer's contents match a given string. Once the condition is met, the buffer's contents are returned.&lt;/p&gt;

&lt;p&gt;These five methods, simple as they seem, are extremely powerful, and all we need as a foundation for our parser!&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>json</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How To Unit Test Like a Pro</title>
      <author>Abdulcelil Cercenazi</author>
      <pubDate>Thu, 06 May 2021 20:54:15 +0000</pubDate>
      <link>https://dev.to/jarjanazy/how-to-unit-test-like-a-pro-59kj</link>
      <guid>https://dev.to/jarjanazy/how-to-unit-test-like-a-pro-59kj</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-unit-testing"&gt;
  &lt;/a&gt;
  What Is Unit Testing❓ 📦
&lt;/h1&gt;

&lt;p&gt;Testing a '&lt;strong&gt;unit&lt;/strong&gt;' in the system separately from other units.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-what-does-a-unit-mean"&gt;
  &lt;/a&gt;
  But What Does a Unit Mean❓
&lt;/h2&gt;

&lt;p&gt;There are a lot of different opinios regarding the answer to this question.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some people say a unit is a function, some say it's a class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🟢 However, the definition I find most logical is the one describing a unit as a 'behavior' of the system.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It's a scenario that has meaning in the business logic.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For example, create a new Shipment using the client's inputs, and save them to the database.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;not really save, but fake it (mock it) we will see it a bit later
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#but-why-does-the-behavior-description-seems-the-most-logical"&gt;
  &lt;/a&gt;
  But Why Does The Behavior Description Seems The Most Logical❓
&lt;/h2&gt;

&lt;p&gt;Tests would be closer to real-life✔️&lt;/p&gt;

&lt;p&gt;You wouldn’t write useless tests. (for example, a useless null pointer check) ✔️&lt;/p&gt;

&lt;p&gt;We can refactor our code without breaking tests since we test the outputs of a unit and not its inner workings ✔️&lt;/p&gt;

&lt;p&gt;However, there are some things that we might not want to test in a unit 🔴&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like what?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most commonly, dependencies on the outer world.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Database connection (get me the record with this Id)&lt;/li&gt;
&lt;li&gt;API calls (call Twitter's API and get all my tweets)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those dependencies we need to &lt;strong&gt;mock&lt;/strong&gt;.&lt;br&gt;
Mocking is defining how a dependency should act in certain conditions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;oh dear database connection, please return this object if your x method got called with the y parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#lets-look-at-an-example"&gt;
  &lt;/a&gt;
  Let's look at an example ⚙️
&lt;/h2&gt;

&lt;p&gt;We have a Shipment class 📦&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RequiredArgsConstructor&lt;/span&gt;  
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Shipment&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shipment Repository for database operations 🗃&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ShipmentRepository&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Shipment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;findShipment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="c1"&gt;// mock method  &lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Shipment&lt;/span&gt; &lt;span class="n"&gt;shipment&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="c1"&gt;// mock method  &lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A validation service 🔍&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;VerificationService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;shipmentIsntValid&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;  
                &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;  
                &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Shipment service 🥋&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RequiredArgsConstructor&lt;/span&gt;  
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ShipmentService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;VerificationService&lt;/span&gt; &lt;span class="n"&gt;verificationService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;ShipmentRepository&lt;/span&gt; &lt;span class="n"&gt;shipmentRepository&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;createAndSaveShipment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verificationService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shipmentIsntValid&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Shipment isn't valid"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shipmentExistInDB&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Shipment Not Found"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
        &lt;span class="n"&gt;createNewShipment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Shipment Is Created"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;createNewShipment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="nc"&gt;Shipment&lt;/span&gt; &lt;span class="n"&gt;shipment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Shipment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
        &lt;span class="n"&gt;shipmentRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shipment&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;shipmentExistInDB&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;shipmentRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findShipment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;productCode&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;isPresent&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the unit testing, we will use Junit5 and Mockito.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-look-at-a-bad-example-of-unit-tests"&gt;
  &lt;/a&gt;
  Let's look at a bad example of Unit Tests ❌
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@ExtendWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MockitoExtension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UniTestTests&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="nd"&gt;@Mock&lt;/span&gt;  
  &lt;span class="nc"&gt;ShipmentRepository&lt;/span&gt; &lt;span class="n"&gt;shipmentRepo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
    &lt;span class="nd"&gt;@Test&lt;/span&gt;  
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;givenData_DetectValidity&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;  
        &lt;span class="nc"&gt;VerificationService&lt;/span&gt; &lt;span class="n"&gt;verificationService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;VerificationService&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
        &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;verificationService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shipmentIsntValid&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jhon"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"3HFF"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
        &lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
    &lt;span class="nd"&gt;@Test&lt;/span&gt;  
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;givenData_DetectShipmentExistsInDB&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;  
        &lt;span class="nc"&gt;ShipmentService&lt;/span&gt; &lt;span class="n"&gt;shipmentService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ShipmentService&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;VerificationService&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;shipmentRepo&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
        &lt;span class="nc"&gt;Shipment&lt;/span&gt; &lt;span class="n"&gt;shipment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Shipment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ahmed"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"3HKK"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
        &lt;span class="n"&gt;doReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shipment&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shipmentRepo&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;findShipment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ahmed"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"3HKK"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  

        &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shipmentService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shipmentExistInDB&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ahmed"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"3HKK"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
        &lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Why are those bad unit tests? ⚠️&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ShipmentService and VerificationService are two closely related methods that work together to produce a single behavior (adding a new Shipment).&lt;/li&gt;
&lt;li&gt;However, we are testing them in isolation, both in separate tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#now-lets-look-at-a-good-unit-testing-example"&gt;
  &lt;/a&gt;
  Now, Let's look at a good unit testing example ✅
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@ExtendWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MockitoExtension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UniTestTests&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="nd"&gt;@Mock&lt;/span&gt;  
  &lt;span class="nc"&gt;ShipmentRepository&lt;/span&gt; &lt;span class="n"&gt;shipmentRepo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  
    &lt;span class="nd"&gt;@Test&lt;/span&gt;  
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;givenShipmentData_CreateNewShipment&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;  
        &lt;span class="nc"&gt;VerificationService&lt;/span&gt; &lt;span class="n"&gt;verificationService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;VerificationService&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
        &lt;span class="nc"&gt;ShipmentService&lt;/span&gt; &lt;span class="n"&gt;shipmentService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ShipmentService&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verificationService&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shipmentRepo&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  

        &lt;span class="n"&gt;doReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shipmentRepo&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;findShipment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jalil"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"3HXX"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
        &lt;span class="n"&gt;doNothing&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shipmentRepo&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;  

        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shipmentService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createAndSaveShipment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jalil"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"3HXX"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
        &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Shipment Is Created"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#to-sum-it-in-few-words-%F0%9F%96%8B"&gt;
  &lt;/a&gt;
  To Sum it in Few Words 🖋
&lt;/h2&gt;

&lt;p&gt;A unit test is meant to validate how feature behavior in the system.&lt;br&gt;
 It could be a bunch of classes and functions interacting together to produce this behavior.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code-on-github"&gt;
  &lt;/a&gt;
  Source Code on 🔗&lt;a href="https://github.com/Jarjanazy/java-tutorial/tree/main/src/main/java/unitTestTutorial"&gt;GitHub&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>java</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Destructure Optional Params in Typescript</title>
      <author>Matt Gregg</author>
      <pubDate>Thu, 06 May 2021 20:52:08 +0000</pubDate>
      <link>https://dev.to/itwasmattgregg/destructure-optional-params-in-typescript-3d95</link>
      <guid>https://dev.to/itwasmattgregg/destructure-optional-params-in-typescript-3d95</guid>
      <description>&lt;p&gt;Sometimes you have a function with an optional Object argument that you want to destructure in the function. Like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;SomeObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;option1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;SomeObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;stuff&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However you'll get an error because &lt;code&gt;param&lt;/code&gt; could be undefined and TS doesn't like you trying to destructure something that's undefined. There are a couple ways around this...&lt;/p&gt;

&lt;p&gt;Define a fallback in the initializer and don't use the ? optional identifier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SomeObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;stuff&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use nullish coalescence:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;SomeObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;stuff&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or just call the propery on the parameter directly with optional chaining:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;SomeObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;anotherFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All of these work and will handle &lt;code&gt;param&lt;/code&gt; being undefined.&lt;/p&gt;

</description>
      <category>dev</category>
      <category>frontend</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Sobre renuncia voluntaria (thread)</title>
      <author>Jorge Epuñan</author>
      <pubDate>Thu, 06 May 2021 20:22:08 +0000</pubDate>
      <link>https://dev.to/devschile/sobre-renuncia-voluntaria-thread-17m7</link>
      <guid>https://dev.to/devschile/sobre-renuncia-voluntaria-thread-17m7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#pegas"&gt;
  &lt;/a&gt;
  #pegas
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Le nacho, livercake, and 8 others&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Es real eso de que la carta de renuncia hay que mandarla con 30 días de anticipación?, hay alguna forma de saltarse eso?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
No, que no es real? O lo de que no se puede saltar?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Igual ya la estoy redactando, la mando mañana mismo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;livercake&lt;/strong&gt;&lt;br&gt;
eso es sólo una ‘formalidad’&lt;br&gt;
si lo haces con menos de 30 días, la empresa podría reservarse el pago de algunas liquidaciones o beneficios de ese mes&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;livercake&lt;/strong&gt;&lt;br&gt;
o demandarte por via civil si te mandaste algun condoro al irte de la pega (cosa q podrian hacer igual, con 30 dias)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;livercake&lt;/strong&gt;&lt;br&gt;
lo unico obligatorio es que tiene que ser por escrito y tienes que ir a la notaria&lt;br&gt;
el resto pico pal que lee&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rola_&lt;/strong&gt;&lt;br&gt;
oye nacho la carta la puedes hacer online en la inspeccion del trabajo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rola_&lt;/strong&gt;&lt;br&gt;
despues eso lo imprimes y se lo pasas a tu empleador&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;livercake&lt;/strong&gt;&lt;br&gt;
😮 cacha ya ni tenis que ir a la notaria&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
La duraaaa?&lt;br&gt;
No sabía&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rola_&lt;/strong&gt;&lt;br&gt;
asi es&lt;br&gt;
no es necesario&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Felipe SandoMan&lt;/strong&gt;&lt;br&gt;
No la imprimas sacala de la pagina y mandala por correo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rola_&lt;/strong&gt;&lt;br&gt;
llevabas como 3 hras redactando xd?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
La hago altiro entonces, gracias @livercake @rola_&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Más o menos jajaja&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;livercake&lt;/strong&gt;&lt;br&gt;
Estimado empleador…&lt;br&gt;
no, no,&lt;br&gt;
Querido empleador…&lt;br&gt;
no no asi tampoco&lt;br&gt;
A quien corresponda…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rola_&lt;/strong&gt;&lt;br&gt;
jajajajaja&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;livercake&lt;/strong&gt;&lt;br&gt;
:xd:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manu&lt;/strong&gt;&lt;br&gt;
En teoria te la pueden rechazar&lt;br&gt;
nunca lo hacen&lt;br&gt;
pero la idea es ser profesional&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Y en el caso de que si?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manu&lt;/strong&gt;&lt;br&gt;
y renunciar con un tiempo decente xd para dejar en claro las cosas supongo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Igual la empresa está urgida&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asilva&lt;/strong&gt;&lt;br&gt;
vas a la inspeccion del trabajo y le dices que quieres renunciar, te pregunta los datos basicos, el motivo y listo, 5 minutos ya estas ajuera&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;livercake&lt;/strong&gt;&lt;br&gt;
uta eso si igual&lt;br&gt;
como dice manu, como es una formalidad,&lt;br&gt;
si no lo haces estás siendo poco formal 🤵‍♂️&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Mmm...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;livercake&lt;/strong&gt;&lt;br&gt;
aka te van a pelar :shrug-mario:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
debes notificar con 30 dias de anticipacion, pero para efectos practicos nunca me han pedido quedarme 30 dias&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
siemrpe es negociable, lo que mas me hje quedado son 2 semanas en :yapo: :lol2:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asilva&lt;/strong&gt;&lt;br&gt;
ir a la notaria es solo para no hacer fila en la inspeccion... puedes elegir hacer fila en la inspeccion, o hacer fila en la notaria&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
Siempre puedes mandarte un Fight club e irte con lucas en tu bolsillo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rola_&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://midt.dirtrab.cl/"&gt;https://midt.dirtrab.cl/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asilva&lt;/strong&gt;&lt;br&gt;
la wea de 30 dias es para irte en buena onda, pero los puedes mandar a la chucha el mismo dia si quieres&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
creo que la carta con clave unica puedes hacerla por internet&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Fuuu tengo que ir a sacarlaaa&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.dt.gob.cl/portal/1626/w3-article-116645.html"&gt;https://www.dt.gob.cl/portal/1626/w3-article-116645.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jerodude&lt;/strong&gt;&lt;br&gt;
Yo siempre lo hago con 3 semanas de anticipacion&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jerodude&lt;/strong&gt;&lt;br&gt;
Si estoy ultra chato son 2&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
te pueden pedir los 30 dias o si no estan de acuerdo, despedirte por abandono de labores y solo pagarte las vacaciones pendientes &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Si ahí me salió lo de los 30 días&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Jajaj&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jerodude&lt;/strong&gt;&lt;br&gt;
Tambien la hice por MiDT, no necesitas redactar nada si usas esa&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
pero nunca me ha pasado, pq al final es lo mismo renunciar a que te echen por causal tuya&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asilva&lt;/strong&gt;&lt;br&gt;
en una pega les di una carta de renuncia a 30 dias, y el jefe se puso weon, a la mañana siguiente llegue con una nueva carta de renuncia efectiva desde el mismo dia. Como se le desfiguro la cara fue hermoso ❤️&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rola_&lt;/strong&gt;&lt;br&gt;
ajajajaj&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Sería mi primera vez "real" que renuncio&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rola_&lt;/strong&gt;&lt;br&gt;
que belicoooo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
Le hubieras hecho una carta de renuncia con 30 días atras, y le cobrabas por el desarrollo que hiciste durante ese tiempo :mind-blown:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
La otra no cuenta, porque me fui de trato nomás&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
Oye y te vas con pega nacho?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Wen tip, tenerla hecha desde el inicio pa llegar y tirarla&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
No&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
O es quit rage?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Es que he estado tirando CVS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
pero igual, puedes anunciar tu renuncia en una reunion primero y despues entregar la carta&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Y me han dicho varios que si, pero no puedo por no soltar las responsabilidades (me piden disponibilidad de una semana a la otra más o menos)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
no es necesario tanta formalidad&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asilva&lt;/strong&gt;&lt;br&gt;
Le nacho renuncia porque no hay endulzante para el cafe, se lo robaron todo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Jajajaja&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
Renuncio porque la hija del Sfeir no me dio la pasá&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
No, me voy porque ya no estoy haciendo casi nada... Solo soporte y me pudrió todo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asilva&lt;/strong&gt;&lt;br&gt;
ah, entonces pa que te vas a quedar 1 mes?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
te estay dando muchas vueltas&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Es que eso&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Jajaja&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asilva&lt;/strong&gt;&lt;br&gt;
habla y diles que te quieres ir&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jerodude&lt;/strong&gt;&lt;br&gt;
Yo le digo a los bosses en reu que me voy y mando la carta a rrhh&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
habla con tu jefe, dile que te queris ir&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
No hay rrhh aca&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
Dile que vas a comprar cigarros y no vuelves, como lo hizo mi papa &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rola_&lt;/strong&gt;&lt;br&gt;
siii dileee&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
que les dai 2 semanas, y que no podis mas&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Les voy a pedir una reu mañana&lt;br&gt;
Y les digo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asilva&lt;/strong&gt;&lt;br&gt;
dile: hola, me quiero ir, te complica si me voy en 2 semanas?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
si no les gusta, que te pueden  echar por abandono de funciones pq ya tienes otra pega&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asilva&lt;/strong&gt;&lt;br&gt;
a lo mejor estan puro esperando que renuncies y no te quieren ver 30 dias mas 😛&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
O sea... No sé, igual me llevo relativamente bien con ellos&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Si no es por malas ondas ni nada&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
ningun gefe con 2 dedos de frente va a querer tener a alguien con un pie afuera trabajando, sabiendo que quiere puro irse&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
Pero siempre es un buen momento para empezar a llevarse mal&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Pero como que ya me saturó la wea de no ser útil&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rola_&lt;/strong&gt;&lt;br&gt;
le nacho y no es mejor buscar algo primero&lt;br&gt;
y ese tiemo muerto dentro de tu pegaq&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Si he estado buscando&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jerodude&lt;/strong&gt;&lt;br&gt;
Ojo que igual es redflag que en tus nuevas pegas no te esperen al menos 3 semanas&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Y me han dicho que si&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rola_&lt;/strong&gt;&lt;br&gt;
postular a lo desquiciaooo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Pero no me he podido ir a las dos semanas como quieren porque tengo carga po&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asilva&lt;/strong&gt;&lt;br&gt;
igual avisa de la renuncia antes de llegar con la carta, por ultimo para que lleguen a un acuerdo de cuantos dias te vas a quedar. (pero igual busca pega antes para que llegues tu con la propuesta)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Pero ahora que me dijeron, demás si se puede&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rola_&lt;/strong&gt;&lt;br&gt;
osea igual podi renuncia sin pega solo si tienes ahorros&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Ya, mañana mismo doy aviso, y les cuento como me fue jajaja&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rola_&lt;/strong&gt;&lt;br&gt;
sino fuiste weno&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
Y acuerdate de hacerles un rm -rf en los servidores&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Me quedan como 300k&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asilva&lt;/strong&gt;&lt;br&gt;
si eso, no soltar las contraseñas hasta que paguen el finiquito&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
y no te robes bases de datos de clientes&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Tendría que entregar solo un **.PEM&lt;br&gt;
Y el resto, mis llaves de acceso de consola&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asilva&lt;/strong&gt;&lt;br&gt;
eso no se hace guiño guiño&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
ah eso, no firmar la wea de finiquito hasta que te paguen o que tengan el cheque ahi al firmar&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le nacho&lt;/strong&gt;&lt;br&gt;
Buena acotación&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
El otro dia un abogado laboral me dijo que cuando habia problemas uno podia firmar el finiquito escribiendo "Acepto con reparos" y eso facilitaba que los demandaras a la inspeccion del trabajo &lt;br&gt;
(Por si necesitas el finiquito para postular a otra pega)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
mejor no firmar nomas, si aceptas aunque sea con reparos, la inspeccion del trabajo no puede hacer nada&lt;br&gt;
por eso a los abogados laborales les gusta esa wea&lt;br&gt;
de hacer anotaciones en el finiquito&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manu&lt;/strong&gt;&lt;br&gt;
Yo hare la mia la otra semana&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manu&lt;/strong&gt;&lt;br&gt;
Con fecha fin de mes&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
a los abogados culiaos les encanta lo de hacer anotaciones en todo tipo de contratos&lt;br&gt;
pq para hacerlas efectivas son demandas civiles mas larga que la ctm, y ellos se forran&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
Pero puedes postular a otra pega sin tener finiquito en la anterior?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
si&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manu&lt;/strong&gt;&lt;br&gt;
Si puedes&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
lo que en teoria no puedes es tener otro contrato&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manu&lt;/strong&gt;&lt;br&gt;
Pero si esa pega infrinje alguna clausula de tu otro contrato ojo ahi&lt;br&gt;
Si te pillan&lt;br&gt;
Jajaja&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
si es que en tu primer contrato tenias clausula de exclusividad&lt;br&gt;
de hecho con esa clausula no puedes hacer freelance tampoco&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;asilva&lt;/strong&gt;&lt;br&gt;
es como el chiste del bonbo fica para demandar a la tarjeta master plop, el abogado queria demanda civil para recuperar las 5 lukas&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manu&lt;/strong&gt;&lt;br&gt;
Aham&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/marcos"&gt;@marcos&lt;/a&gt;
 debería tener un progrmaa en la TV para resolver dudas...&lt;br&gt;
Alo Marcos?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Manu&lt;/strong&gt;&lt;br&gt;
Jajajajaj&lt;br&gt;
Es que marcos es :patrones: y ya sabe todo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
me he cambiado mucho de pega&lt;br&gt;
tal vez muchas weas no son legales, pero se hacen en la practica&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
Yo llevo 14 años a honorarios en esta pega, me dijeron que cuando me vaya me puedo forrar. Es cierto?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
forrar en que&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
jajaja&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://defensadespidos.cl/honorarios/"&gt;https://defensadespidos.cl/honorarios/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Abogados Laborales - Servicio Gratuito&lt;/em&gt;&lt;br&gt;
Trabajador a Honorarios ¿Te Despidieron? :: DefensaDespidos.cl&lt;br&gt;
Demandamos los Derechos e Indemnizaciones de los Trabajadores a Honorarios de Servicios públicos,Municipalidades y del Estado. Servicio Gratuito ☎️ +56412190132&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
ah pero del estado, pq ahi te hacen un contrato de prestacion de servicio&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;joaco&lt;/strong&gt;&lt;br&gt;
mi contrato tiene cláusula de exclusividad y de 30 días de aviso (aunque creo que eso último es por ley)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
una vez me ofrecieron una pega asi, deje el proceso cuando me dijeron que era a honorarios&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;joaco&lt;/strong&gt;&lt;br&gt;
encuentro ridículo que sean 30 días. 2 semanas es mucho más prudente&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;joaco&lt;/strong&gt;&lt;br&gt;
casi todas las pegas del estado son boleteando ahora&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;marcos&lt;/strong&gt;&lt;br&gt;
si, pq pa ser contratado tiene que aprobar la contraloria, poco menos que hasta el papa&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
Es un cacho, hay que hacer un concurso publico y que te aprueben hasta los gremios de la institucion (for real)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
Ademas que no te pagan lo que deben, a mi me ofrecieron contrato pero por 1.500.000 de acuerdo a la escala de sueldos&lt;br&gt;
No me podian ofrecer mas&lt;br&gt;
Por eso preferí seguir a honorarios&lt;br&gt;
Tienes que hacer "carrera funcionaria" para ir ganando mas lucas&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;joaco&lt;/strong&gt;&lt;br&gt;
y cuánto era boleteando cuando te ofrecieron 1.5 por contrato?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
En ese tiempo, 2m&lt;br&gt;
Eran solo 500 lucas mas, pero claro, por ley no podian llegar al monto&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;joaco&lt;/strong&gt;&lt;br&gt;
no era tanta la diferencia en sueldos brutos. Creo que el bruto de 1.5 es cerca de 1.9&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
Ese era el bruto&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;joaco&lt;/strong&gt;&lt;br&gt;
ah chuta&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trag&lt;/strong&gt;&lt;br&gt;
No se como estará la escala de sueldos actualmente, tengo entendido que esta -mejor-, pero solo por el reajuste&lt;br&gt;
Bueno que tambien depende de la reparticion del gobierno, no todos los ministerios usan la misma escala&lt;/p&gt;

&lt;p&gt;-- fin --&lt;/p&gt;

</description>
      <category>leyes</category>
      <category>laboral</category>
      <category>chile</category>
      <category>renuncia</category>
    </item>
  </channel>
</rss>
