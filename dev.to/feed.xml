<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Create Pop Up Login Form Using HTML and CSS</title>
      <author>Sonali Roy</author>
      <pubDate>Wed, 12 May 2021 15:34:39 +0000</pubDate>
      <link>https://dev.to/sonali_roy/how-to-create-pop-up-login-form-using-html-and-css-1bji</link>
      <guid>https://dev.to/sonali_roy/how-to-create-pop-up-login-form-using-html-and-css-1bji</guid>
      <description>&lt;p&gt;Hello friends, today I am going to show you how to create a pop-up login form using only HTML and CSS code. &lt;/p&gt;

&lt;p&gt;I created this login page in the form of a neomorphic design. Like the normal login form, it has everything here i.e. a place to input the email ID and password for login. There is also a login button below.&lt;/p&gt;

&lt;p&gt;In this program, at first, on the webpage, there is a white button with "Sign In" text. And when you click on that button then the &lt;a href="https://www.foolishdeveloper.com/2021/05/how-to-create-pop-up-login-form-using.html"&gt;Popup or Modal Login Form&lt;/a&gt; will be displayed.&lt;/p&gt;

&lt;p&gt;You can copy the codes from the given boxes or &lt;a href="https://www.foolishdeveloper.com/2021/05/how-to-create-pop-up-login-form-using.html"&gt;download the code files&lt;/a&gt; from the given link.&lt;/p&gt;

&lt;p&gt;HTML Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"popup"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"popup-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close-btn"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"togglePopup()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     ×&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Sign in&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input-field"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Email"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"validate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input-field"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"validate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"second-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign in&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Don't have an account? &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/signup.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign Up&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;


   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"togglePopup()"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"first-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign In&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt; &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;raleway&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.popup&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-150%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;38px&lt;/span&gt; &lt;span class="m"&gt;38px&lt;/span&gt; &lt;span class="m"&gt;56px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="m"&gt;-25px&lt;/span&gt; &lt;span class="m"&gt;-25px&lt;/span&gt; &lt;span class="m"&gt;38px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.popup&lt;/span&gt; &lt;span class="nc"&gt;.close-btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#292929&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.popup.active&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;300ms&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.input-field&lt;/span&gt; &lt;span class="nc"&gt;.validate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#bfc0c0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#232323&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#292929&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.first-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;18px&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="m"&gt;-15px&lt;/span&gt; &lt;span class="m"&gt;-15px&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;box-shadow&lt;/span&gt; &lt;span class="m"&gt;.35s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.first-button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;145deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#222222&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#292929&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.second-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#202020&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="m"&gt;-8px&lt;/span&gt; &lt;span class="m"&gt;-8px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#2c2c2c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;box-shadow&lt;/span&gt; &lt;span class="m"&gt;.35s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.second-button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;145deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#222222&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#292929&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#bfc0c0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;togglePopup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;popup-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Industries that Need a High Performing Low Latency Distributed Database</title>
      <author>Margo McCabe</author>
      <pubDate>Wed, 12 May 2021 15:33:07 +0000</pubDate>
      <link>https://dev.to/margo_hdb/industries-that-need-a-high-performing-low-latency-distributed-database-5cn4</link>
      <guid>https://dev.to/margo_hdb/industries-that-need-a-high-performing-low-latency-distributed-database-5cn4</guid>
      <description>&lt;p&gt;There are certain industries that greatly benefit from high-performing, low-latency, geo-distributed technologies, while other organizations might be more focused on vertically scaling architectures. This is dependent on numerous factors including the data pipeline, network, data structure, type of product or solution, short and long term goals, etc. While there are currently many databases and tools that provide vertical scaling capabilities, there are not many that focus on horizontal scaling -- but there’s still a need for both. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#latency"&gt;
  &lt;/a&gt;
  Latency
&lt;/h4&gt;

&lt;p&gt;Before jumping into specific industries that benefit from high-performing, low-latency, geo-distributed databases (it’s a mouthful, I know), let’s define a few terms here. High-performing is pretty self explanatory so I’ll skip over that one. For the next term I’ll refer to my colleague Jacob Cohen’s blog on &lt;a href="https://dev.to/harperdb/reducing-data-latency-with-geographically-distributed-databases-41oa"&gt;Geo-Distributed Databases&lt;/a&gt;. Latency generally measures the duration between an action and a response. In user facing applications, that can be narrowed down to the delay between when a user makes a request and when the application responds to a request. So, technologies that enable low-latency usually improve performance and response times, leading to improved user experience and cost savings. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#geo-distributed"&gt;
  &lt;/a&gt;
  Geo Distributed
&lt;/h4&gt;

&lt;p&gt;What about geo-distribution? I’ll reference my other colleague Kaylan Stock’s blog on &lt;a href="https://dev.to/harperdb/geo-distributed-data-lakes-explained-by-a-non-developer-m68"&gt;Geo Distributed Data Lakes&lt;/a&gt;. Geo-distributed is often used in reference to data storage, websites, applications, containers, etc. In this case, it means a database technology deployed across more than one geographical location without performance delays. Geo-distributed functionality has several benefits. With increased redundancy, you don’t need to worry about one data center, cloud instance, or on-premise site going down. With a backup in place, a fail in one location is no longer a disaster situation for your team (this is often considered to be part of high availability architecture). Global performance is improved because queries are distributed across many different servers in parallel, and users are able to hit a database that is physically closer to them, ultimately reducing latency. User experience is also improved when data storage is distributed because of the rapid query response times.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#scaling"&gt;
  &lt;/a&gt;
  Scaling
&lt;/h4&gt;

&lt;p&gt;When scaling, there are two ways to add computing resources to your infrastructure, and most large organizations utilize a combination of the two approaches to best meet their needs. &lt;a href="https://www.section.io/blog/scaling-horizontally-vs-vertically/"&gt;The main difference is&lt;/a&gt;, “horizontal scaling means scaling by adding more machines to your pool of resources (also described as “scaling out”), whereas vertical scaling refers to scaling by adding more power (e.g. CPU, RAM) to an existing machine.” As mentioned above, horizontal scaling provides redundancy, instead of having only one system in vertical scaling where a single point of failure can cause massive disruption. If your organization prefers to have the flexibility to choose the optimal configuration setup at any time that will yield the highest cost and performance benefits, scaling out might be a better option than scaling up. While the paradigm is shifting more towards horizontal scaling, there can still be benefits to vertical scaling as well. Perhaps it’s best to find a technology solution that can enable both vertical and horizontal scaling when needed in order to minimize the number of systems in the tech stack. &lt;/p&gt;

&lt;p&gt;Let’s look at a few industry based examples here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#retail-amp-ticketing"&gt;
  &lt;/a&gt;
  Retail &amp;amp; Ticketing
&lt;/h3&gt;

&lt;p&gt;Industries such as retail and ticketing constantly battle with bots that buy up their product as soon as it’s released to be resold at marked up rates. We all know that feeling of waiting in a virtual line for concert tickets, only to have them sold out within minutes (if not seconds)! Due to these bots / bad actor systems, these products and events become less accessible to the general consumer, and revenue is distributed to previously uninvolved companies and sources. Databases and data management solutions are often centralized in a single cloud in a single region, which drives high latency and increased compute needs to power APIs. These technologies cannot respond or process data fast enough to catch or block the bad actors, and the data needs to be globally replicated. By shifting API’s and data storage to the edge, latency can be greatly reduced. If we bring data persistence and functionality closer to the source with a super fast distributed database system, we can recognize and block those bots / bad actors in real time with global replication. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#industry-amp-military"&gt;
  &lt;/a&gt;
  Industry &amp;amp; Military
&lt;/h3&gt;

&lt;p&gt;In military and other industrial or machine-heavy organizations, there are massive amounts of data being generated by sensors out in the field and on the edge. These sensors could be capturing data on anything - machinery performance, rotation, vibration, temperature, output, weather, etc. These industries benefit from a distributed low latency database that can sync data from the edge to data center servers, as well as back to the edge for analytics and alerting, in real time. If we bring edge persistence and functionality closer to those edge nodes, we can eliminate gaps and bottlenecks between IoT data collection and the cloud. A peer-to-peer distributed architecture will enable the capture and flow of data across the data pipeline to enable rapid decisioning and downtime prevention. In these scenarios, it’s important for both machine operators in the field and controls engineers back at headquarters to know what’s happening at all times, and decisioning that’s even a second too late can be detrimental.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gaming-amp-media"&gt;
  &lt;/a&gt;
  Gaming &amp;amp; Media
&lt;/h3&gt;

&lt;p&gt;Gaming and media industries greatly benefit from high performance and low latency, with clear implications for both the organization and the end-user. Referring to my &lt;a href="https://dev.to/harperdb/enhance-your-hybrid-cloud-strategy-with-a-new-edge-36c4"&gt;Hybrid Cloud blog&lt;/a&gt;, latency challenges occur because large cloud providers are not highly distributed. Additionally, it is challenging to actually deliver data at the edge and allow users to interact with it. Currently there are caching solutions that bring data reads to the edge, but they are not write optimized and global replication is slow. By utilizing a database that distributes to the edge with the ability to read &lt;em&gt;and write&lt;/em&gt; efficiently, you can improve response times and performance for the end user. This is because instead of having a limited choice of regions offered by giant cloud providers, edge data centers are much closer to their end consumer. (We all know how frustrating it can be when your game freezes with 30 seconds left on the clock when you’re playing multiplayer games with your pals across the country!) This solution also enables cost savings because organizations can avoid cloud lock-in and additional costs related to data ingress and egress, and far less API servers are required to handle the workload. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transportation"&gt;
  &lt;/a&gt;
  Transportation
&lt;/h3&gt;

&lt;p&gt;Planes, trains, and automobiles! You can imagine that vehicles of any type require extremely low-latency so that they can predict and avoid any kind of collisions or misdirection. Peer-to-peer technologies and 5G will enable innovation like vehicle to vehicle architecture. By distributing APIs and data storage to the edge, and shifting application logic to the edge, you can remove bottlenecks and reduce infrastructure and cost. Bringing functionality on or near the vehicles will reduce latency, reduce the number of servers needed to handle the necessary workload, and improve performance. &lt;/p&gt;

&lt;p&gt;You can find more real-world examples in Jake’s blog on &lt;a href="https://dev.to/harperdb/reducing-data-latency-with-geographically-distributed-databases-41oa"&gt;Geo-Distributed Databases&lt;/a&gt;, where he talks about Home Internet of Things (IoT), gaming, and even warehouse robotics! Many applications rely on low-latency, and sometimes so severely that issues with high latency can cause customer loss and/or massive expenses or failures. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#whats-the-solution"&gt;
  &lt;/a&gt;
  What’s the solution?
&lt;/h4&gt;

&lt;p&gt;While there are technologies out there tackling these challenges in different ways, there are not many high-performing, low-latency, geo-distributed databases. Many edge data solutions are not write optimized and global replication is slow. Whereas &lt;a href="https://harperdb.io/?utm_source=devtomargo"&gt;HarperDB&lt;/a&gt; is read and write optimized, handling upwards of 20K writes per second per node, with 110ms global replication. HarperDB’s clustering methodology relies on  eventual consistency to be much more efficient than more traditional options, and you can’t lock out our database globally. Here’s a few additional benefits of addressing latency challenges with HarperDB: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A single node of HarperDB can handle over &lt;strong&gt;100K requests per second&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;HarperDB can globally &lt;strong&gt;replicate data at the speed of the Internet&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Runs anywhere&lt;/strong&gt; presenting a single interface across a multi-cloud solution&lt;/li&gt;
&lt;li&gt;Enables &lt;strong&gt;horizontal scalability&lt;/strong&gt; with peer-to-peer architecture and leverages parallel processing for &lt;strong&gt;vertical scalability&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Easily &lt;strong&gt;distribute API’s to the edge&lt;/strong&gt; to reduce latency and cost&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hybrid cloud capability&lt;/strong&gt;; run on public cloud, edge data centers, on-premise, or in the field
&lt;/li&gt;
&lt;li&gt;Provides &lt;strong&gt;low-latency edge data replication&lt;/strong&gt; for “CDN of database”
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Real time data sync&lt;/strong&gt; between nodes &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Flexible and configurable&lt;/strong&gt; data sync&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With centralized databases, organizations have to buy more and more API servers to reduce latency and handle the increasing workload, creating massive bottlenecks. By distributing out and moving closer to the edge, and utilizing a Hybrid Edge/Cloud strategy, you can greatly decrease the number of servers needed and reduce latency, while benefiting from cost savings and improved customer experience. With HarperDB, you can simply spin up more nodes to scale horizontally, putting HarperDB in various regions closer to your end users, all while accessing data in real time. &lt;/p&gt;

&lt;p&gt;Whichever route your organization takes, it’s always better to proactively implement solutions like this upfront instead of having to react later on and deal with disaster recovery. Now that we’ve provided a brief overview, would your industry or organization benefit from high-performing, low-latency, geo-distributed technologies? &lt;/p&gt;

</description>
      <category>productivity</category>
      <category>database</category>
      <category>distributedsystems</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Detect Internet Connection Status In Browser</title>
      <author>Bibek</author>
      <pubDate>Wed, 12 May 2021 15:18:12 +0000</pubDate>
      <link>https://dev.to/bibekkakati/detect-internet-connection-status-in-browser-2ab6</link>
      <guid>https://dev.to/bibekkakati/detect-internet-connection-status-in-browser-2ab6</guid>
      <description>&lt;p&gt;Hello everyone 👋&lt;/p&gt;

&lt;p&gt;In this article, we are going to learn how can we detect the internet connection state on our website.&lt;/p&gt;

&lt;p&gt;This can be very useful to improve user experience by showing snack messages or pop-ups when the browser is not able to connect to the internet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;We can get the current state of the connection by using &lt;code&gt;window.navigator.onLine&lt;/code&gt;, which will return a &lt;code&gt;boolean&lt;/code&gt; value.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;true&lt;/code&gt; if connected.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;false&lt;/code&gt; if not connected.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;online&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onLine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;online&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Is connected to internet&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Not connected to internet&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If the browser doesn't support &lt;code&gt;window.navigator.onLine&lt;/code&gt; the above example will always come out as &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#connection-state-changes-listener"&gt;
  &lt;/a&gt;
  Connection State Changes Listener
&lt;/h4&gt;

&lt;p&gt;We can also detect the connection state by listening for network state change events i.e, &lt;code&gt;online&lt;/code&gt; and &lt;code&gt;offline&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;offline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Network disconnected&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Network connected&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's very easy to implement but there are some side cases where it might give a false-positive result.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The computer is connected to a mobile hotspot, but mobile internet is not working then also you can get an &lt;code&gt;online&lt;/code&gt; status.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The computer is running a virtualization software that has virtual ethernet adapters that are always "connected".&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://blog.bibekkakati.me/detect-internet-connection-status-in-browser"&gt;blog.bibekkakati.me&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Thank you for reading 🙏&lt;/p&gt;

&lt;p&gt;If you enjoyed this article or found it helpful, give it a thumbs-up 👍&lt;/p&gt;

&lt;p&gt;Feel free to connect 👋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/kakatibibek"&gt;Twitter&lt;/a&gt; | &lt;a href="https://instagram.com/bibekkakati"&gt;Instagram&lt;/a&gt; | &lt;a href="https://linkedin.com/in/bibekkakati"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like my work and want to support it, you can do it here. I will really appreciate it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pOmeWpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbibekkakati%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3Dffffff"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>ux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Double comparison in Java</title>
      <author>Pavel Polívka</author>
      <pubDate>Wed, 12 May 2021 15:01:20 +0000</pubDate>
      <link>https://dev.to/pavel_polivka/double-comparison-in-java-1b7</link>
      <guid>https://dev.to/pavel_polivka/double-comparison-in-java-1b7</guid>
      <description>&lt;p&gt;Recently I was solving an interesting bug that came down to comparing two &lt;code&gt;Double&lt;/code&gt; variables with &lt;code&gt;equals&lt;/code&gt; method. It looks innocent, what can be wrong with something like &lt;code&gt;firstDouble.equals(secondDouble)&lt;/code&gt;? &lt;br&gt;
The problem here is with how doubles are stored. To fit them into 64bytes (usually) they are rounded. &lt;/p&gt;

&lt;p&gt;See the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Double&lt;/span&gt; &lt;span class="n"&gt;firstDouble&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;firstDouble&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;Double&lt;/span&gt; &lt;span class="n"&gt;secondDouble&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstDouble&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 4.200000000000001&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secondDouble&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 4.2&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstDouble&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secondDouble&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This inaccuracy is caused by rounding errors.&lt;br&gt;
We need to use a different approach to compare those doubles. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#threshold-method"&gt;
  &lt;/a&gt;
  Threshold method
&lt;/h2&gt;

&lt;p&gt;If we do not have access to any libraries and want to solve this with Java only we can use something called the threshold method. &lt;br&gt;
Simply, we will subtract those doubles, make absolute value, and compare if the result is smaller than some very small number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.000001d&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstDouble&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;secondDouble&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That small number is called epsilon and the smaller it is the better the accuracy of the result. For most cases, 5 decimals should be enough. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apache-commons-math"&gt;
  &lt;/a&gt;
  Apache Commons Math
&lt;/h2&gt;

&lt;p&gt;There is no utility method for this in JDK. Luckily for us, Apache Commons Math library has us covered. With it we can compare those doubles like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.000001d&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Precision&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstDouble&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secondDouble&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The epsilon has the same meaning as in the example above. &lt;/p&gt;

&lt;p&gt;There are similar methods in Guava and other libraries. &lt;/p&gt;




&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/pavel_polivka"&gt;Twitter&lt;/a&gt; to get more tips like this. &lt;/p&gt;

</description>
      <category>java</category>
    </item>
    <item>
      <title>Diving into Husky and Lint-staged</title>
      <author>Laurie</author>
      <pubDate>Wed, 12 May 2021 14:47:52 +0000</pubDate>
      <link>https://dev.to/laurieontech/diving-into-husky-and-lint-staged-2hni</link>
      <guid>https://dev.to/laurieontech/diving-into-husky-and-lint-staged-2hni</guid>
      <description>&lt;p&gt;Last week I talked about &lt;a href="https://laurieontech.com/posts/eslint/"&gt;ESLint&lt;/a&gt; and its usefulness for keeping projects consistent amongst multiple contributors. If you haven't read that post I recommend doing so before diving into this one.&lt;/p&gt;

&lt;p&gt;Today, we're going to focus on running ESLint automatically to ensure that the main branch of your project always follows your specific ruleset.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lintstaged"&gt;
  &lt;/a&gt;
  Lint-staged
&lt;/h2&gt;

&lt;p&gt;The first tool to talk about is &lt;a href="https://www.npmjs.com/package/lint-staged"&gt;lint-staged&lt;/a&gt;. Lint-staged is configured in your package.json file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lint-staged"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"*.js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint --fix"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As seen in the above example, you can use a glob pattern to tell lint-staged which files to run against. Additionally, you can give lint-staged a command to execute against those files. In many cases, you'll want more than one command, which lint-staged supports. In this case, you'll run ESLint and &lt;a href="https://prettier.io/"&gt;prettier&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lint-staged"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"*.js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"eslint"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So how does lint-staged work? It's specifically designed to work on "staged" files, thus the name. This means files you've changed or created but haven't yet committed to your project. Working on staged files limits the number of files you need to lint at any given time and makes the workflow faster. The commands you configure will run "pre-commit". As you're attempting to commit files to your project you'll see ESLint run in your terminal. Once it's done you may have successfully committed or find yourself with linting errors you need to fix before you're able to commit the code.&lt;/p&gt;

&lt;p&gt;However, what you may not realize, is that lint-staged is not the only tool working under the hood. Lint-staged is designed to work with another tool called &lt;a href="https://www.npmjs.com/package/husky"&gt;husky&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#husky"&gt;
  &lt;/a&gt;
  Husky
&lt;/h2&gt;

&lt;p&gt;You may have come across husky before without noticing. For many years it was configured via a few lines of code in your package.json file. Something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"hooks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"pre-commit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lint-staged"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, the latest version of husky, v6, has changed this approach. Now, husky uses distinct bash files with filenames that match the workflow step they correspond to, e.g. "pre-commit". Luckily you don't have to set this up yourself and husky has a nice CLI command to do it for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx husky-init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class="nb"&gt;install
&lt;/span&gt;npx husky add .husky/pre-commit &lt;span class="s2"&gt;"npm test"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line of the command is a one-time initialization script that ensures all your coworkers will have husky installed on their machine before they try to commit files.&lt;/p&gt;

&lt;p&gt;The second line creates the &lt;code&gt;pre-commit&lt;/code&gt; file inside the &lt;code&gt;.husky&lt;/code&gt; directory. If you look at the file you'll notice it's running a &lt;code&gt;husky.sh&lt;/code&gt; script prior to whatever commands you initialized it with. This can technically be removed, but I'd recommend keeping it. The script allows for a few things, including the use of a &lt;code&gt;--no-verify&lt;/code&gt; flag that bypasses the checks.&lt;/p&gt;

&lt;p&gt;Once you've initialized the directory and associated file you can add whatever commands you want to it. In my case, I replaced &lt;code&gt;npm test&lt;/code&gt; with &lt;code&gt;npm lint-staged&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prepush"&gt;
  &lt;/a&gt;
  Pre-push
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;pre-commit&lt;/code&gt; workflow is more or less the husky happy path. But what if your project doesn't want to lint on commit and would prefer to lint when a developer attempts to push their changes to a branch?&lt;/p&gt;

&lt;p&gt;While it's tempting to create a &lt;code&gt;.husky/pre-push&lt;/code&gt; file and run lint-staged, it won't work. The &lt;code&gt;pre-push&lt;/code&gt; husky workflow is correct, but running lint-staged at that point will turn up 0 matching files. This makes sense, though it certainly messed me up for a bit, because committed files are no longer staged. Instead, you have a couple of options.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run ESLint against all the files: &lt;code&gt;eslint '*.js'&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Diff against &lt;code&gt;main&lt;/code&gt;: &lt;code&gt;eslint --no-error-on-unmatched-pattern $(git diff main... --name-only --- '*.js')&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that this is one example of a diff command and there are numerous considerations depending on your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps-and-ci"&gt;
  &lt;/a&gt;
  Next steps and CI
&lt;/h2&gt;

&lt;p&gt;Running ESLint, or prettier, or even tests as part of your git workflow is important because it helps you fail fast. However, it's not a replacement for CI checks. Typically, you'll want to run these commands in both environments to ensure nothing slips through.&lt;/p&gt;

&lt;p&gt;But altogether these tools help ensure a cleaner, more consistent production codebase. Long term, that's a big win for any project.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Microblogging with Serverless Redis</title>
      <author>K</author>
      <pubDate>Wed, 12 May 2021 14:41:08 +0000</pubDate>
      <link>https://dev.to/fllstck/microblogging-with-serverless-redis-2nl3</link>
      <guid>https://dev.to/fllstck/microblogging-with-serverless-redis-2nl3</guid>
      <description>&lt;p&gt;I'm still in search of a datastore for my microblogging SaaS product. I read the DynamoDB book and had the impression that the database isn't quite optimal.&lt;/p&gt;

&lt;p&gt;Last week I found out about &lt;a href="https://upstash.com/"&gt;Upstash&lt;/a&gt;, a managed database service with a Redis compatible API. It also comes with on-demand pricing, so I thought, let's take a look!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-upstash"&gt;
  &lt;/a&gt;
  What is Upstash?
&lt;/h2&gt;

&lt;p&gt;It's a managed database service that is API compatible with Redis, &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-databases-loved4"&gt;the key-value store you all seem to love&lt;/a&gt;. And it comes with a serverless pricing model, starting with a free tier for small databases.&lt;/p&gt;

&lt;p&gt;It can be deployed into the cloud, and region, of your choice, so the latency of most requests is usually way below hundred milliseconds. &lt;/p&gt;

&lt;p&gt;Upstash, like DynamoDB, is a NoSQL database, but Upstash goes more in the direction of simplicity, which requires you to put more of the data modeling into your application code.&lt;/p&gt;

&lt;p&gt;Oh and, it comes with a GraphQL API because that's a thing now, right? When they get on-par with Redis features like pub/sub, this will map very nicely to GraphQL subscriptions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microblogging-with-redis"&gt;
  &lt;/a&gt;
  Microblogging with Redis
&lt;/h2&gt;

&lt;p&gt;I plan to build a company-internal microblogging service. I got the idea when I was scrolling through Twitter one morning, thinking, "I get all news from my industry by scrolling on my phone. Wouldn't it be cool if people could get their work-related news in a similar way?"&lt;/p&gt;

&lt;p&gt;Anyway, I mostly a frontend developer. I did a few APIs back in the days with PHP and Node.js, but this wasn't my core competency. The backend work usually didn't require me to choose database technology. The "real" backend developer already did, and I just had to use it—file system storage, MySQL, MongoDB, RethinkDB, PostgreSQL, and whatnot. &lt;/p&gt;

&lt;p&gt;Finding a good database for my use case has proven to be quite a chore, but a welcome one, because I read many interesting things about databases in the last weeks.&lt;/p&gt;

&lt;p&gt;After I found out about Upstash, I looked into their offering and Redis, and until now, I like what I see.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt; seems to be very simple; for example, it doesn't allow for nested data structures. On the other hand, it has very low latency, and many commands are O(1) in complexity, making building on top of this intriguing.&lt;/p&gt;

&lt;p&gt;One of my goals for this project was to keep it as serverless as possible, so Upstash's on-demand pricing and free tier come in rather handy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-modeling-with-redis"&gt;
  &lt;/a&gt;
  Data modeling with Redis
&lt;/h2&gt;

&lt;p&gt;Upstash doesn't support all of Redis's features yet, so I would have to get by with the basics. But I think this isn't an issue since simplicity seems to be the spirit of Redis anyways.&lt;/p&gt;

&lt;p&gt;My system will let people write small blogposts, like Twitter. These usually belong to a company, a user, and one or more teams. They will also have hashtags, because why not?&lt;/p&gt;

&lt;p&gt;The requirement that every post belongs to a company can be solved with one database per company; this follows &lt;a href="https://www.opsguru.io/post/data-stores-in-multi-tenant-solutions"&gt;the siloed multi-tenancy model&lt;/a&gt;, which leads to decent isolation.&lt;/p&gt;

&lt;p&gt;The requirement that every post belongs to one user is simple too, in the production environment, I would simply use a hash to store a post and add a field for the user ID to it.&lt;/p&gt;

&lt;p&gt;But what about things like teams and hashtags?  After all, every post has multiple hashtags and teams, and every team and hashtag can have multiple posts. Many-to-many relationships are usually the prime domain of relational databases, but can they be done with Upstash?&lt;/p&gt;

&lt;p&gt;It turns out they can! &lt;/p&gt;

&lt;p&gt;I tried this out with hashtags. A string that contains text, which, in turn, is sprinkled with hashtags, is my data model for the posts.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;post:id  -&amp;gt;  3
posts    -&amp;gt;  [post:1, post:2, post:3]
post:1   -&amp;gt;  "A blog post with a #cool hashtag."
post:2   -&amp;gt;  "Another post with a #cool hashtag!" 
post:3   -&amp;gt;  "And the third post, with #another hashtag."
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;post:id&lt;/code&gt; item is just an integer that gets incremented when a new post is created, so the next post can use it to generate its ID. Seemingly this is how it's done in Redis, but I will investigate further. For this experiment, this should suffice.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;posts&lt;/code&gt; item holds &lt;a href="https://redis.io/topics/data-types"&gt;a set&lt;/a&gt; with all the posts created. Sets, sorted sets, and lists can hold up to four billion entries, so I think they should be future proof for quite some time. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;4,000,000,000 posts / 10,000 users / 10 years / 52 weeks
is roughly 750 posts/week
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;For the hashtags, I'm using a set too. A sorted set or a list is probably the better solution in the real system since the posts need to be sorted by their creation date.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hashtag:cool     -&amp;gt;  [post:1, post:2]
hashtag:another  -&amp;gt;  [post:3] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#connecting-to-upstash"&gt;
  &lt;/a&gt;
  Connecting to Upstash
&lt;/h2&gt;

&lt;p&gt;Let's try this out with some example code!&lt;/p&gt;

&lt;p&gt;I created &lt;a href="https://github.com/fllstck/upstash-cdk-microblog-api"&gt;a project on GitHub&lt;/a&gt;. I used the CDK to create an API Gateway backed by a Lambda function that connects to Upstash.&lt;/p&gt;

&lt;p&gt;In  &lt;code&gt;lib/upstash-microblogging-stack.ts&lt;/code&gt; you will find the environment variables used by the Lambda function for the Upstash connection.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;REDIS_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;DATABASE_ENDPOINT&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;REDIS_PORT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;DATABASE_PORT&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;REDIS_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;DATABASE_PASSWORD&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You find the values for &lt;code&gt;&amp;lt;DATABASE_ENDPOINT&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;DATABASE_PORT&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;DATABASE_PASSWORD&amp;gt;&lt;/code&gt; in the Upstash console after you created a database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qSmaTzTi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd82kr49h1hh5w3wioo9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qSmaTzTi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd82kr49h1hh5w3wioo9.png" alt="Upstash database credentials"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The actual database connection happens inside the Lambda function code, which is located at &lt;code&gt;lib/backend/index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I created the connection outside of the function body, so it's only created on a cold start. All subsequent requests handled by that Lambda function are handled with the same connection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ioredis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REDIS_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REDIS_PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REDIS_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#crud-with-upstash"&gt;
  &lt;/a&gt;
  CRUD with Upstash
&lt;/h2&gt;

&lt;p&gt;Okay, no update for this experiment; let's keep things simple. Just create, read and delete. Also, no read for one post; only read for all posts or filtered by hashtag.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create"&gt;
  &lt;/a&gt;
  Create
&lt;/h3&gt;

&lt;p&gt;Let's start with the creation of a post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;incr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`post:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sadd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;extractHashtags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sadd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`hashtag:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, I get the next &lt;code&gt;id&lt;/code&gt; for the &lt;code&gt;postKey&lt;/code&gt; from the &lt;code&gt;post:id&lt;/code&gt; item; then, I create a &lt;code&gt;transaction&lt;/code&gt; for the post creation.&lt;/p&gt;

&lt;p&gt;I don't have enough Redis knowledge to know if this one of these commands could fail if another client did something in-between, so I used the transaction. Otherwise, &lt;a href="https://redis.io/topics/pipelining"&gt;a pipeline&lt;/a&gt; would probably enough, which wouldn't lock the whole database until all commands are done.&lt;/p&gt;

&lt;p&gt;Anyhow, I create a new post, add its key to the &lt;code&gt;posts&lt;/code&gt; set that keeps track of all posts and add it to the sets of every hashtag in that post.&lt;/p&gt;

&lt;p&gt;I use a utility function to extract the hashtags from the string and remove the hash character.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extractHashtags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/#&lt;/span&gt;&lt;span class="se"&gt;\w&lt;/span&gt;&lt;span class="sr"&gt;*/gm&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Redis and, in turn, Upstash are pretty chill about adding and creating sets, so if you add something to a non-existing set, it will be created.&lt;/p&gt;

&lt;p&gt;When I call &lt;code&gt;exec&lt;/code&gt; on the &lt;code&gt;transaction&lt;/code&gt; the whole batch of commands will be sent to Upstash, locking the database until every command was executed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#read"&gt;
  &lt;/a&gt;
  Read
&lt;/h3&gt;

&lt;p&gt;The next step is to read the posts we created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;listPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hashtag&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`hashtag:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smembers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postKeys&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postKeys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;listPosts&lt;/code&gt; function would get the content of the &lt;code&gt;hashtag&lt;/code&gt; query parameter if it were supplied in the request.&lt;/p&gt;

&lt;p&gt;Then it either fetches the post keys from the corresponding hashtag item or the &lt;code&gt;posts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some small transformation to create a JSON object for the API client, and we can respond!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#delete"&gt;
  &lt;/a&gt;
  Delete
&lt;/h3&gt;

&lt;p&gt;To delete a post, we have to update all the sets we created too!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;removePost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redisClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;extractHashtags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`hashtag:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hashtag&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;del&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, I use a transaction and add all the commands. Remove the &lt;code&gt;postKey&lt;/code&gt; from the &lt;code&gt;posts&lt;/code&gt; set, remove it from the hashtag sets, and then delete the post item itself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Upstash is a fresh take on managed Redis deployments. With the free tier and on-demand pricing, it's pretty cheap to start with.&lt;/p&gt;

&lt;p&gt;Since it's just a key-value store, it requires you to do more data modeling in your own code, and for this,  I should read more about Redis in general before considering it for my product. I will probably end up wrapping the whole thing in a data layer that keeps track of all the relationships. But since the latency is so very low, it should make sense to use Upstash as a primitive for building a data model.&lt;/p&gt;

&lt;p&gt;Some Redis features are still missing, and if you need a full-text search (which I'd love to have for my product) or geospatial queries, you have to wait, but overall it seems like a solid offering.&lt;/p&gt;

&lt;p&gt;It would also be cool to integrate with infrastructure as code tools like the CDK or Pulumi, but I think this isn't a big problem because they already offer an API to manage the databases.&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>database</category>
      <category>redis</category>
    </item>
    <item>
      <title>Using the delete Keyword to Remove Object Properties</title>
      <author>Randy Rivera</author>
      <pubDate>Wed, 12 May 2021 14:29:53 +0000</pubDate>
      <link>https://dev.to/rthefounding/using-the-delete-keyword-to-remove-object-properties-1d41</link>
      <guid>https://dev.to/rthefounding/using-the-delete-keyword-to-remove-object-properties-1d41</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Now you know what objects are and their basic features and advantages. In short, they are key-value stores which provide a flexible, intuitive way to structure data, and, they provide very fast lookup time.&lt;/li&gt;
&lt;li&gt;In earlier posts, we have both added to and modified an object's key-value pairs. &lt;/li&gt;
&lt;li&gt;Here we will see how we can remove a key-value pair from an object. Let's revisit our &lt;code&gt;foods&lt;/code&gt; object example one last time. If we wanted to remove the &lt;code&gt;oranges&lt;/code&gt;, &lt;code&gt;plums&lt;/code&gt;, and &lt;code&gt;strawberries&lt;/code&gt; keys, we can remove it by using the delete keyword like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let foods = {
  apples: 25,
  oranges: 32,
  plums: 28,
  bananas: 13,
  grapes: 35,
  strawberries: 27
};

delete foods.oranges;
delete foods.plums;
delete foods.strawberries;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(foods); // console will display 
{ apples: 25, bananas: 13, grapes: 35 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Gradient Custom Scroll Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Wed, 12 May 2021 14:26:49 +0000</pubDate>
      <link>https://dev.to/nikhil27b/gradient-custom-scroll-using-html-css-437m</link>
      <guid>https://dev.to/nikhil27b/gradient-custom-scroll-using-html-css-437m</guid>
      <description>&lt;p&gt;Hello, &lt;/p&gt;

&lt;p&gt;Today I created an Amazing Gradient Custom Scroll Using HTML &amp;amp; CSS. I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/KKWVmZr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My Favorite C# Features - Part 4: Project Structure</title>
      <author>Jeffrey T. Fritz</author>
      <pubDate>Wed, 12 May 2021 14:25:36 +0000</pubDate>
      <link>https://dev.to/dotnet/my-favorite-c-features-part-4-project-structure-454p</link>
      <guid>https://dev.to/dotnet/my-favorite-c-features-part-4-project-structure-454p</guid>
      <description>&lt;p&gt;I've discussed several of my favorite features of the C# programming language in the previous few posts, but a question that I have heard on my Twitch stream and on Twitter is: "how should we best structure our projects to take advantage of these awesome features?"&lt;/p&gt;

&lt;p&gt;Oh the architecture questions.  There are many ways to structure your projects and solutions, and that volume of choices is part of what makes C# and .NET in general so amazing:  we get to be artists for a bit and design our source code structure in a way to makes us happy.&lt;/p&gt;

&lt;p&gt;In this post, I'll share some of the ways that I like to structure my projects and solutions as they evolve.  This is NOT a 'best practices' or required set of techniques for anyone to build an application system.  This is the way that I build systems that makes me happy, and maybe you'll find some of these techniques valuable in your systems as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c-file-structure"&gt;
  &lt;/a&gt;
  C# File Structure
&lt;/h2&gt;

&lt;p&gt;The C# language documentation has some great recommendations for &lt;a href="https://docs.microsoft.com/dotnet/csharp/programming-guide/inside-a-program/coding-conventions"&gt;standard conventions&lt;/a&gt; around naming, layout, and commenting.  However, they don't answer the question: "how should I structure the content of my C# code file?"&lt;/p&gt;

&lt;p&gt;There is a &lt;a href="https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1201.md"&gt;rule that StyleCop uses that will encourage you to order the contents of your C# files&lt;/a&gt; (*.cs) as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Extern Alias Directives&lt;/li&gt;
&lt;li&gt;Using Directives&lt;/li&gt;
&lt;li&gt;Namespaces&lt;/li&gt;
&lt;li&gt;Delegates&lt;/li&gt;
&lt;li&gt;Enums&lt;/li&gt;
&lt;li&gt;Interfaces&lt;/li&gt;
&lt;li&gt;Structs&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Within a class, struct, or interface the elements should be position in this order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fields&lt;/li&gt;
&lt;li&gt;Constructors&lt;/li&gt;
&lt;li&gt;Finalizers (Destructors)&lt;/li&gt;
&lt;li&gt;Delegates&lt;/li&gt;
&lt;li&gt;Events&lt;/li&gt;
&lt;li&gt;Enums&lt;/li&gt;
&lt;li&gt;Interfaces&lt;/li&gt;
&lt;li&gt;Properties&lt;/li&gt;
&lt;li&gt;Indexers&lt;/li&gt;
&lt;li&gt;Methods&lt;/li&gt;
&lt;li&gt;Structs&lt;/li&gt;
&lt;li&gt;Nested Classes or Records&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can add the &lt;a href="https://www.nuget.org/packages/StyleCop.Analyzers"&gt;StyleCop Analyzers&lt;/a&gt; to your projects by simply adding a reference to the NuGet package "StyleCop.Analyzers".  On every build after installing these analyzers, you will get a report of the recommended changes to your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h2&gt;

&lt;p&gt;As I start building a new system, the projects that comprise that system are typically all managed within the same solution file.  In rare cases, multiple solution files can be used to manage various logical segments of the system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-naming"&gt;
  &lt;/a&gt;
  Project Naming
&lt;/h3&gt;

&lt;p&gt;As a web developer first, I like to typically start a new system by creating my initial application and name it the same as my Solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- FritzsCoolApplication.sln
  - FritzsCoolApplication
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've learned over the many applications that I've created that this application is going to grow, shift, and change.  I've started postfixing my initial web application names with &lt;code&gt;.Web&lt;/code&gt; as they represent the web application that will be delivered.&lt;/p&gt;

&lt;p&gt;Additional projects that are added to the solution typically have the same base-name and have a suffix to indicate their purpose.  It's common to see projects in my solutions with names like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FritzsCoolApplication.Web
FritzsCoolApplication.Api
FritzsCoolApplication.BackOffice
FritzsCoolApplication.Common
FritzsCoolApplication.Core
FritzsCoolApplication.Client
FritzsCoolApplication.Communication
FritzsCoolApplication.Proxy
FritzsCoolApplication.Migrate
FritzsCoolApplication.Test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#folder-structure"&gt;
  &lt;/a&gt;
  Folder Structure
&lt;/h3&gt;

&lt;p&gt;Folders in some projects are defined with conventions for use in making applications like ASP.NET MVC work without adding configuration.  This convention over configuration means the same folders are defined in these projects that we're going to find regardless of the direction of the project.  Consider the conventional folders for an MVC project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kdH0jH2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40cbx2i2enrgpir1ea30.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kdH0jH2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/40cbx2i2enrgpir1ea30.PNG" alt="ASP.NET Core - MVC Project Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Controllers&lt;/code&gt;, &lt;code&gt;Models&lt;/code&gt;, and &lt;code&gt;Views&lt;/code&gt; folders are where the heart of the MVC application operates.  In all ASP.NET Core applications, the &lt;code&gt;wwwroot&lt;/code&gt; folder is where static files are kept that are served without server interpretation.  The default &lt;code&gt;css&lt;/code&gt;, &lt;code&gt;js&lt;/code&gt;, and &lt;code&gt;lib&lt;/code&gt; folders are a good standard for organizing CSS and JavaScript files.  Add an &lt;code&gt;img&lt;/code&gt; folder and a &lt;code&gt;fonts&lt;/code&gt; folder as needed for images and fonts and you have a great configuration for your web project.&lt;/p&gt;

&lt;p&gt;In a Razor Pages project, we see the replacement of the &lt;code&gt;Controllers&lt;/code&gt;, &lt;code&gt;Models&lt;/code&gt;, and &lt;code&gt;Views&lt;/code&gt; folders with a single &lt;code&gt;Pages&lt;/code&gt; folder.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#next-folders-to-introduce"&gt;
  &lt;/a&gt;
  Next Folders to introduce
&lt;/h3&gt;

&lt;p&gt;Data interactions in the project typically start with a &lt;code&gt;Data&lt;/code&gt; folder and a potential &lt;code&gt;Migrations&lt;/code&gt; folder that is &lt;a href="https://docs.microsoft.com/ef/core/managing-schemas/migrations/?tabs=dotnet-core-cli"&gt;maintained by Entity Framework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If I'm creating a hosted service, that is something that will be running as a background process inside my application, I will create a &lt;code&gt;Services&lt;/code&gt; folder in the project to contain these application specific processes.&lt;/p&gt;

&lt;p&gt;ViewModels are another concern, as we begin to constrain the contents presented and interacting with our web application.  These contents could be stored in a &lt;code&gt;ViewModels&lt;/code&gt; folder with appropriate conventions defined for working with user data.  This is also a great convention to use for interacting with our Web APIs that we may define in a project, especially if we want to introduce a front-end API framework like gRPC or OpenAPI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-unit-testing"&gt;
  &lt;/a&gt;
  Introducing Unit Testing
&lt;/h3&gt;

&lt;p&gt;When significant business logic enters my application, I start to introduce unit tests.  By business logic, I am referring to more than the simple create, read, update, and delete operations with a database.  This logic is the programming model that you are introducing to calculate and provide those features that define your application.&lt;/p&gt;

&lt;p&gt;I prefer starting a second project next to my initial web application with a &lt;code&gt;Test&lt;/code&gt; suffix like &lt;code&gt;FritzsCoolApplication.Test&lt;/code&gt;.  I'll even go a step further and configure solution folders to place the test project in a location at the bottom of the Solution Explorer in Visual Studio, making it easier for me to find the test project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FDis-9yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywwyxmhudbewsx7atzxj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDis-9yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywwyxmhudbewsx7atzxj.PNG" alt="Solution Folders with Unit Test project introduced"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#evolving-from-folders-to-projects"&gt;
  &lt;/a&gt;
  Evolving From Folders to Projects
&lt;/h3&gt;

&lt;p&gt;As the complexity of our application grows, we want to introduce interfaces and abstractions to provide for re-use.  This is when I begin to introduce new projects that can be shared so that each project is a smaller and more manageable unit.&lt;/p&gt;

&lt;p&gt;The first project I typically introduce is a Class Library built with .NET Standard 2.0 named &lt;code&gt;.Core&lt;/code&gt; or &lt;code&gt;.Common&lt;/code&gt; and contains a collection of shared Enums, Constants, and Interfaces that I might be using across projects.  This project typically does not contain any executable code, but rather contains the definitions of cross-cutting features in use throughout the application system.&lt;/p&gt;

&lt;p&gt;Why make this project .NET Standard 2.0?  These features that I am defining are simple and I want maximum compatibility across all future projects.  &lt;a href="https://docs.microsoft.com/dotnet/standard/net-standard"&gt;.NET Standard 2.0 provides all of the flexibility&lt;/a&gt; that I need if I want to target Windows, Azure, Xamarin, .NET Core and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XocILKyt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmvkw5z08w0zn7lrxvdo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XocILKyt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmvkw5z08w0zn7lrxvdo.PNG" alt="Adding the Common project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the number of resources in each folder of my initial web project grow and additional executables or services need to be hosted, I begin to separate each of those folders into their own projects that new executable or service projects can share.&lt;/p&gt;

&lt;p&gt;As new services for business domains are defined and added, I introduce a third segment to my project naming scheme that defines that domain.  The below image shows how I would introduce a pair of services that manage the Accounting and Inventory domains for my solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4h4n1Y_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16b8wfv77xbviz0vwdwc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4h4n1Y_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16b8wfv77xbviz0vwdwc.PNG" alt="Adding Domain Specific Services"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary-for-now"&gt;
  &lt;/a&gt;
  Summary... for now
&lt;/h2&gt;

&lt;p&gt;The flexibility with which you can grow your application from a simple website or desktop application into an entire enterprise scale service is only limited by your imagination.  A few rules of thumb and guideposts along the way as you grow your application will help prevent project-sprawl with hundreds of little projects that don't add significant re-use or value to your solution, but instead create maintenance headaches.&lt;/p&gt;

&lt;p&gt;Don't be afraid to refactor mercilessly.  Content that starts to be re-used should move into shared projects and libraries that domains can re-use and end-user applications or websites can consume easily.  Your unit-tests are your friend and can help guarantee that your projects continue functioning at a high-level.&lt;/p&gt;

&lt;p&gt;How do you grow your applications?  What suggestions do you have for a maturing project that needs to grow out of a single folder or a single project?&lt;/p&gt;

&lt;p&gt;Did you know, I host a weekly live stream on the &lt;a href="https://twitch.tv/visualstudio"&gt;Visual Studio Twitch channel&lt;/a&gt; teaching the basics of C#? Tune in on Mondays at 9a ET / 1300 UTC for two hours of learning in a beginner-friendly Q+A format with demos and sample code you can download.&lt;/p&gt;

&lt;p&gt;Looking to get started learning C#? Checkout our &lt;a href="https://docs.microsoft.com/users/dotnet/collections/yz26f8y64n7k07?WT.mc_id=friends-0000-jefritz"&gt;free on-demand courses on Microsoft Learn&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>programming</category>
    </item>
    <item>
      <title>Lerna Hello World: How to Create a Monorepo for Multiple Node Packages</title>
      <author>Tom Zach</author>
      <pubDate>Wed, 12 May 2021 14:05:26 +0000</pubDate>
      <link>https://dev.to/aspecto/lerna-hello-world-how-to-create-a-monorepo-for-multiple-node-packages-3188</link>
      <guid>https://dev.to/aspecto/lerna-hello-world-how-to-create-a-monorepo-for-multiple-node-packages-3188</guid>
      <description>&lt;p&gt;In this post, I will walk you through how to use Lerna to manage, and publish, two packages under the same monorepo. Publishing will be done to my private GitHub repository under the GitHub packages registry.&lt;/p&gt;

&lt;p&gt;I decided to keep it as simple as possible, Lerna-only. No yarn workspaces to be found here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro-amp-motivation-for-using-lerna"&gt;
  &lt;/a&gt;
  Intro &amp;amp; Motivation For Using Lerna
&lt;/h2&gt;

&lt;p&gt;Using a monolith, you have a single code base.&lt;/p&gt;

&lt;p&gt;It is usually quite easy to share code between the different parts of the monolith, just import from the relevant file.&lt;/p&gt;

&lt;p&gt;When it comes to microservices, however, by definition – you would have more than one microservice.&lt;/p&gt;

&lt;p&gt;Most likely, you would have shared logic between the microservices, whether it is for everyday authentication purposes, data access, etc.&lt;/p&gt;

&lt;p&gt;Then, one might (rightfully) suggest – let’s use a package. Where do you store that package? Yet another repo. &lt;/p&gt;

&lt;p&gt;So far so good, but what happens when you have 35 shared packages between 18 different microservices? &lt;/p&gt;

&lt;p&gt;You’d agree that it can be quite a hassle to manage all of these repos.&lt;/p&gt;

&lt;p&gt;That is the part where &lt;a href="https://lerna.js.org/"&gt;Lerna&lt;/a&gt; comes in.&lt;/p&gt;

&lt;p&gt;A tool that enables us to manage (and publish) as many npm packages as we want in a single repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-github-repository-creation"&gt;
  &lt;/a&gt;
  1. Github Repository Creation
&lt;/h2&gt;

&lt;p&gt;Create a new private github repository (I called mine learna but call it as you see fit).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-install-lerna-amp-setup-the-project-locally"&gt;
  &lt;/a&gt;
  2. Install Lerna &amp;amp; Setup the Project Locally
&lt;/h2&gt;

&lt;p&gt;In order to set up Lerna in our project, we first need to install it globally, create a git repository locally and run lerna init:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --global lerna
git init learna &amp;amp;&amp;amp; cd learna
lerna init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; there are two modes for initializing the Lerna repo independent and fixed. We’re going to use the default one for simplicity reasons. Essentially what it means is all version numbers are tied together and managed in top-level lerna.json. &lt;/p&gt;

&lt;p&gt;Read more about it here: &lt;a href="https://github.com/lerna/lerna#how-it-works"&gt;https://github.com/lerna/lerna#how-it-works&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let’s link this to our GitHub repository (replace names accordingly):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin git@github.com:aspectom/learna.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-create-lerna-managed-packages"&gt;
  &lt;/a&gt;
  3. Create Lerna managed packages
&lt;/h2&gt;

&lt;p&gt;Create two packages, hello-world and aloha-world (with the default options):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lerna create hello-world
lerna create aloha-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;lerna create&lt;/code&gt; is Lerna’s way to help us create packages managed by a Lerna initialized repo.&lt;/p&gt;

&lt;p&gt;Inside both of the packages, modify the corresponding js files to have them greet as we want them to:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;aloha-world.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'use strict';

module.exports = alohaWorld;

function alohaWorld() {
 console.log('Aloha World');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;hello-world.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'use strict';

module.exports = helloWorld;

function helloWorld() {
 console.log('Hello World');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have to make a modification in our package.json to contain the GitHub username of our account / organization:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
 "name": "@aspectom/aloha-world",
 "version": "0.0.0",
 "description": "&amp;gt; TODO: description",
 "author": "Tom Z &amp;lt;tom@aspecto.io&amp;gt;",
 "homepage": "",
 "license": "ISC",
 "main": "lib/aloha-world.js",
 "directories": {
   "lib": "lib",
   "test": "__tests__"
 },
 "files": [
   "lib"
 ],
 "repository": {
   "type": "git",
   "url": "git@github.com:aspectom/learna.git"
 },
 "scripts": {
   "test": "echo \"Error: run tests from root\" &amp;amp;&amp;amp; exit 1"
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this for both aloha-world and hello-world, and make sure to replace my GitHub username with your own.&lt;/p&gt;

&lt;p&gt;PS: While we’re making managing multiple repos easier, here’s how you can make running multiple microservices locally feels like a walk in the park. It’s a simple, easy-to-use hack we, at &lt;a href="https://www.aspecto.io/"&gt;Aspecto&lt;/a&gt;, came up with to make this process less messy – It’s called the &lt;a href="https://www.aspecto.io/blog/easy-way-to-route-traffic-between-microservices-during-development/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=lerna-hello-world-how-to-create-a-monorepo-for-multiple-node-packages"&gt;local router&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.aspecto.io/blog/easy-way-to-route-traffic-between-microservices-during-development/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=lerna-hello-world-how-to-create-a-monorepo-for-multiple-node-packages"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3zDETPs3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3ubszuzm7isd8fbn0bg.png" alt="How to Route Traffic Between Microservices During Development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point you should have a directory structure that looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0S2JdLEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5rwkn400yeckkg7zp2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0S2JdLEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5rwkn400yeckkg7zp2q.png" alt="directory structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the root of the repository, add an empty LICENSE.md.&lt;/p&gt;

&lt;p&gt;This will be necessary later to avoid this error when publishing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lerna WARN ENOLICENSE Packages aloha-world and hello-world are missing a license.
lerna WARN ENOLICENSE One way to fix this is to add a LICENSE.md file to the root of this repository.
lerna WARN ENOLICENSE See https://choosealicense.com for additional guidance.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s make our initial commit to GitHub.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .  
git commit -m 'Initial commit'
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-generating-a-github-personal-access-token"&gt;
  &lt;/a&gt;
  4. Generating a GitHub Personal Access Token
&lt;/h2&gt;

&lt;p&gt;First, create a GitHub personal access token to publish and read packages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://github.com/settings/profile"&gt;https://github.com/settings/profile&lt;/a&gt;, &lt;/li&gt;
&lt;li&gt;Click on developer settings&lt;/li&gt;
&lt;li&gt;Click on personal access token&lt;/li&gt;
&lt;li&gt;Select write &amp;amp; read packages, which should also mark the repo automatically&lt;/li&gt;
&lt;li&gt;Add a note so that you remember what it’s about and click on generate the token.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zbD2RoHc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tp52zh2s79dkci58ntg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zbD2RoHc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tp52zh2s79dkci58ntg.png" alt="Generating a GitHub Personal Access Token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, go to your .npmrc file and add the following lines (can be local .npmrc in each repo or global ~/.npmrc, but beware – better to not commit this file):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//npm.pkg.github.com/:_authToken=TOKEN
@aspectom:registry=https://npm.pkg.github.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do not forget&lt;/em&gt;&lt;/strong&gt; to replace TOKEN with the token you have just created, and aspectom with your own GitHub account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-publishing-the-packages-to-gpr"&gt;
  &lt;/a&gt;
  5. Publishing The Packages to GPR
&lt;/h2&gt;

&lt;p&gt;Now let’s publish these packages to the GitHub package registry so that we can use them in a different project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lerna publish --registry=https://npm.pkg.github.com/ 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you had the following error, you probably omitted the registry part from lerna publish:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;? Are you sure you want to publish these packages? Yes
lerna info execute Skipping releases
lerna info git Pushing tags...
Enter passphrase for key '/Users/tom/.ssh/aspecto_id_rsa': 
lerna info publish Publishing packages to npm...
lerna info Verifying npm credentials
lerna http fetch GET 401 https://registry.npmjs.org/-/npm/v1/user 1370ms
401 Unauthorized - GET https://registry.npmjs.org/-/npm/v1/user
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since it tries to go to npm registry instead of GitHub packages.&lt;/p&gt;

&lt;p&gt;And if you had this error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lerna info publish Publishing packages to npm...
lerna notice Skipping all user and access validation due to third-party registry
lerna notice Make sure you're authenticated properly ¯\_(ツ)_/¯
lerna http fetch PUT 404 https://npm.pkg.github.com/hello-world 694ms
lerna ERR! E404 404 Not Found - PUT https://npm.pkg.github.com/hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You probably forgot to use @YOUR_GITHUB/package-name in one of your package.json files under the “packages” folder.&lt;/p&gt;

&lt;p&gt;In my case – it was the hello-world package.&lt;/p&gt;

&lt;p&gt;After resolving issues (if any) you should receive a success message, and looking at the repository you can see you have 2 packages:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_1aV1K2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bar114sjqaseyjkz72xb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_1aV1K2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bar114sjqaseyjkz72xb.png" alt="Two packages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any time you want to publish, you have to make a change and commit it otherwise lerna will say that there’s no change.&lt;/p&gt;

&lt;p&gt;You can make the change or force Lerna to publish by adding &lt;code&gt;--force-publish&lt;/code&gt; to the &lt;code&gt;lerna publish&lt;/code&gt; command, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lerna publish --registry=https://npm.pkg.github.com/ --force-publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-using-the-packages-in-a-different-project"&gt;
  &lt;/a&gt;
  6. Using The Packages in a Different Project
&lt;/h2&gt;

&lt;p&gt;First, create a project to consume the aloha-world and hello-world packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir use-lerna-repo
cd use-lerna-repo/
yarn init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming you’ve used global .npmrc, no further steps needed to consume the packages with yarn or npm install.&lt;/p&gt;

&lt;p&gt;If you used local npmrc in your lerna repo, copy it to the use-lerna-repo root folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @aspectom/aloha-world
yarn add @aspectom/hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create an index.js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const helloWorld = require('@aspectom/hello-world');
const alohaWorld = require('@aspectom/aloha-world');

helloWorld();
alohaWorld();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Package.json for this project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
 "name": "use-lerna-repo",
 "version": "1.0.0",
 "main": "index.js",
 "license": "MIT",
 "scripts": {
   "start": "node index.js"
 },
 "dependencies": {
   "@aspectom/aloha-world": "^0.0.4",
   "@aspectom/hello-world": "^0.0.4"
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, run node index.js and you should get the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ node index.js
Hello World
Aloha World
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And voila! We have just finished creating, publishing, and consuming our lerna-managed packages in the one monorepo.&lt;/p&gt;

&lt;p&gt;Good luck, we at Aspecto wish you years of happy packaging and a lot of &lt;a href="https://github.com/aspecto-io"&gt;downloads&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>node</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How I navigate tmux in 2021</title>
      <author>Waylon Walker</author>
      <pubDate>Wed, 12 May 2021 13:54:07 +0000</pubDate>
      <link>https://dev.to/waylonwalker/how-i-navigate-tmux-in-2021-2ina</link>
      <guid>https://dev.to/waylonwalker/how-i-navigate-tmux-in-2021-2ina</guid>
      <description>&lt;p&gt;In 2021 I changed the way I navigate between tmux sessions big time.  Now I can create, kill, switch with ease, and generally keep work separated into logical groups.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🔗 Check out the post on &lt;a href="https://waylonwalker.com/tmux-nav-2021/"&gt;https://waylonwalker.com/tmux-nav-2021/&lt;/a&gt; to speed up or slow down the recordings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#chris-toomeys-tmux-course"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/christoomey"&gt;Chris Toomey's&lt;/a&gt; Tmux Course
&lt;/h2&gt;

&lt;p&gt;I took Chris's &lt;a href="https://thoughtbot.com/upcase/tmux"&gt;tmux course&lt;/a&gt; in December 2020 and it was fantastic.  Even as a seasoned tmux user, I learned quite a bit.  Before the course, I was proficient in navigating within each of my tmux sessions but rarely started more than one session.  A few months later, I have adopted a lot of what I learned from Chris and made it my own.&lt;/p&gt;

&lt;p&gt;I am now keeping projects to their own session and can move between them fluidly with just a few keystrokes.  For high-traffic projects, I have them bound to a single keystroke for instant switching.  This change has been a game-changer from the mess of windows I used to have and the nightmare it was to find work I was doing and end up duplicating project work in two separate windows.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;📝 &lt;strong&gt;NOTE:&lt;/strong&gt; Some of my config comes straight from the course, and some of it has been extended to my liking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's take a quick look at how I am navigating through tmux on a day-to-day basis.&lt;/p&gt;


    
    
    Sorry, your browser doesn't support embedded videos.


&lt;blockquote&gt;
&lt;p&gt;👆 Overview of how I navigate tmux&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#tmux-ls"&gt;
  &lt;/a&gt;
  tmux ls
&lt;/h2&gt;

&lt;p&gt;Throughout this article, I have several recordings showing how I use manage sessions with my keybindings.  I will often run a &lt;code&gt;tmux ls&lt;/code&gt; command to highlight running sessions at various points to help guide the viewer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ta"&gt;
  &lt;/a&gt;
  ta
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;my attach/session switch script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At the heart of my tmux navigation is a highly customized version of Chris's tat script that I renamed &lt;code&gt;ta&lt;/code&gt;.  Many folks add this to their bashrc &lt;code&gt;alias ta=tmux attach&lt;/code&gt;.  Simply calling ta will do the same thing as shown below.  If you're in a tmux session, it does nothing, and if you're not in one, it will attach you to the first one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;get the full &lt;a href="https://github.com/WaylonWalker/devtainer/blob/main/bin/ta"&gt;script&lt;/a&gt; from GitHub.&lt;/p&gt;
&lt;/blockquote&gt;


    
    
    Sorry, your browser doesn't support embedded videos.


&lt;blockquote&gt;
&lt;p&gt;👆 attaching to a session by default&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt; I add the &lt;code&gt;ta&lt;/code&gt; command to keep myself in a tmux session at all times.  Whenever I open my terminal, I am automatically dropped into a tmux session, but if I am opening a split while in tmux it's smart enough to know not to nest tmux sessions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ta
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another article can dive into my &lt;code&gt;ta&lt;/code&gt; command. This one is more about the methodology, workflow, and keybindings to get me there.  It's available in my &lt;a href="https://github.com/WaylonWalker/devtainer/blob/main/bin/ta"&gt;devtainer repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-theres-more"&gt;
  &lt;/a&gt;
  but there's more
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;gettin fuzzy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Give it a directory, and a &lt;code&gt;fzy&lt;/code&gt; dropdown will let you choose a subdirectory to start your session in, and name the session after that directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ta ~/git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;🔥 Bonus, use direnv to automatically set settings, echo your git status, activate your environment or whatever else you need.&lt;/p&gt;
&lt;/blockquote&gt;


    
    
    Sorry, your browser doesn't support embedded videos.


&lt;blockquote&gt;
&lt;p&gt;👆 give it a directory, it will ask for input to which project and start a new named session in that directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that starting from outside currently does not start in a split layout like it does when starting from within tmux.  I am still playing with this, but generally, I want my terminal session to be plain when I first start my terminal. I usually am starting work after the first default session.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🤔 I still use both fzy and fzf. It probably doesn't make sense to use both, but I am currently giving fzy a try.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#prefixw"&gt;
  &lt;/a&gt;
  prefix+w
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;tmux choose-tree&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By default, tmux comes with a &lt;code&gt;tmux choose-tree&lt;/code&gt; command bound to &lt;code&gt;prefix+w&lt;/code&gt;, which opens in full screen.  The upper section of the screen will show every window opened.  While selected, you can show the splits in each window by hitting l, or fold it with h. You can search for a session name by hitting /.&lt;/p&gt;


    
    
    Sorry, your browser doesn't support embedded videos.




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# ~/.tmux.conf&lt;/span&gt;

&lt;span class="c"&gt;# expanded to show all splits&lt;/span&gt;
&lt;span class="nb"&gt;bind &lt;/span&gt;s choose-tree
&lt;span class="c"&gt;# simpler window to show only sessions&lt;/span&gt;
&lt;span class="nb"&gt;bind &lt;/span&gt;S choose-session
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#keybindings-in-choosetreechoosesession"&gt;
  &lt;/a&gt;
  Keybindings in choose-tree/choose-session
&lt;/h3&gt;

&lt;p&gt;The default keybindings of the tmux &lt;code&gt;choose-tree&lt;/code&gt; and &lt;code&gt;choose-session&lt;/code&gt; that I use are listed below.  J/K are very intuitive, but I just learned about h,l,/.  When I do use one of these, the / (search) can be super helpful to find sessions/windows faster.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;action&lt;/th&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;fold&lt;/td&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unfold&lt;/td&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;up&lt;/td&gt;
&lt;td&gt;k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;down&lt;/td&gt;
&lt;td&gt;j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#prefixcw-prefixcg"&gt;
  &lt;/a&gt;
  prefix+c-w prefix+c-g
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;open a project&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have set up to make it easy to open my non-work projects &lt;em&gt;(in my ~/git directory)&lt;/em&gt; and my work projects &lt;em&gt;(in my ~/work directory)&lt;/em&gt;.  I bound &lt;code&gt;prefix+c-g&lt;/code&gt; and &lt;code&gt;prefix+c-w&lt;/code&gt; to open a new session in their respective directories.  I like mapping common prefix commands with control to keep my pinky mashed on that control key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# ~/.tmux.conf&lt;/span&gt;

&lt;span class="nb"&gt;bind &lt;/span&gt;C-w new-window &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"work-session-picker"&lt;/span&gt; &lt;span class="s2"&gt;"ta ~/work"&lt;/span&gt;
&lt;span class="nb"&gt;bind &lt;/span&gt;C-g new-window &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"git-session-picker"&lt;/span&gt; &lt;span class="s2"&gt;"ta ~/git"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




    
    
    Sorry, your browser doesn't support embedded videos.


&lt;h2&gt;
  &lt;a href="#prefixcj"&gt;
  &lt;/a&gt;
  prefix+c-j
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;jump to session&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that I have &lt;code&gt;ta&lt;/code&gt; rocking with a good create or attach setup, I am rarely toggling through a list of running sessions, but I am doing it with &lt;code&gt;prefix+c-j&lt;/code&gt; when I do it. Keeping my finger on control and pressing &lt;code&gt;&amp;lt;space&amp;gt;+j&lt;/code&gt;.  This keybinding uses fzf to fuzzy match to an existing session and attach.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind &lt;/span&gt;C-j new-window &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"session-switcher"&lt;/span&gt; &lt;span class="s2"&gt;"tmux list-sessions | sed -E 's/:.*&lt;/span&gt;&lt;span class="nv"&gt;$/&lt;/span&gt;&lt;span class="s2"&gt;/' | grep -v &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;^&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;tmux display-message &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s1"&gt;'#S'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\$\"&lt;/span&gt;&lt;span class="s2"&gt; | fzf --reverse | xargs tmux switch-client -t"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




    
    
    Sorry, your browser doesn't support embedded videos.


&lt;h2&gt;
  &lt;a href="#mn-mp"&gt;
  &lt;/a&gt;
  M-N M-P
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;next/prev&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next and Previous sessions.  This is super handy when working with under 3 sessions to be able to cycle through sessions holding &lt;code&gt;shift+alt&lt;/code&gt; and pressing &lt;code&gt;n&lt;/code&gt; or &lt;code&gt;p&lt;/code&gt;.&lt;/p&gt;


    
    
    Sorry, your browser doesn't support embedded videos.


&lt;h2&gt;
  &lt;a href="#tkill"&gt;
  &lt;/a&gt;
  tkill
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;time to clean up&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It's easy to get a long crufty list of sessions running throughout the day.  Typically this is not too bad on system resources compared to running vscode in every working project, but it does make it more challenging to manage and wade through the sessions list.  I use a handy shell alias that's been in my zshrc for quite some time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;tkill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"for s in &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;(tmux list-sessions | awk '{print &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;1}' | rg ':' -r '' | fzy); do tmux kill-session -t &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;s; done;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I don't have this one set up with a nice hotkey, but it works for my fingers.  I often pop open a lower split(&lt;code&gt;M-s&lt;/code&gt;), run &lt;code&gt;tkill&lt;/code&gt;, and close (&lt;code&gt;M-x&lt;/code&gt;).&lt;/p&gt;


    
    
    Sorry, your browser doesn't support embedded videos.


&lt;h2&gt;
  &lt;a href="#last-session"&gt;
  &lt;/a&gt;
  Last Session
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;back&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While &lt;code&gt;M-n&lt;/code&gt; and &lt;code&gt;M-p&lt;/code&gt; work well with a small, focused number of sessions, I often end up with too many sessions open, and it's not efficient to remember a double &lt;code&gt;M-N&lt;/code&gt; followed by a triple &lt;code&gt;M-P&lt;/code&gt; to get back and forth.  Most often, I want to get between two sessions quickly, no matter what the order is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-B switch-client &lt;span class="nt"&gt;-l&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-b switch-client &lt;span class="nt"&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




    
    
    Sorry, your browser doesn't support embedded videos.


&lt;blockquote&gt;
&lt;p&gt;Once I get two sessions back to back, I can switch between them with insane speed and precision.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#more-precision"&gt;
  &lt;/a&gt;
  More Precision
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;one keystroke&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The final layer of precision is for my most current project. I need to get to these with a single keystroke.  These are bound to a set of keybindings that were readily available, just above the home row.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;bind &lt;/span&gt;C-t new-session &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; todo &lt;span class="s2"&gt;"cd ~/work/todo &amp;amp;&amp;amp; nvim -O backlog.md doing.md done.md"&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-i new-session &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; ww3 &lt;span class="s2"&gt;"cd ~/git/ww3/ &amp;amp;&amp;amp; nvim"&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-o new-session &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; images_waylonwalker_com &lt;span class="s2"&gt;"cd ~/git/images.waylonwalker.com/ &amp;amp;&amp;amp; nvim"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




    
    
    Sorry, your browser doesn't support embedded videos.


&lt;blockquote&gt;
&lt;p&gt;These few directories are always at my fingertips, encouraging me to keep better notes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And yes, I did steal this last one from &lt;a href="https://twitter.com/ThePrimeagen"&gt;Harpoon-man&lt;/a&gt; By The Way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hub-and-spoke"&gt;
  &lt;/a&gt;
  Hub and Spoke
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;M-i M-b&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have really been digging this hub and spoke workflow where I am rocking away on a project hit &lt;code&gt;M-I&lt;/code&gt;, take some notes then hit &lt;code&gt;M-b&lt;/code&gt; to get back to where I was.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--darLnE-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.waylonwalker.com/tmux-nav-hub-spoke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--darLnE-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.waylonwalker.com/tmux-nav-hub-spoke.png" alt="hub and spoke"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Model of my current workflow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#example-workflow"&gt;
  &lt;/a&gt;
  Example workflow
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;open tmux session with ta&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;prefix+c-g&lt;/code&gt; start work in a project using a fuzzy matcher&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M-t&lt;/code&gt; over to my todo list&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M-b&lt;/code&gt; back to my project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M-i&lt;/code&gt; to my blog to look up notes/make notes&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M-b&lt;/code&gt; back to my project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;prefix+c-g&lt;/code&gt; start work in another project using a fuzzy matcher&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M-t&lt;/code&gt; over to my todo list&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M-b&lt;/code&gt; back to my project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;prefix+c-j&lt;/code&gt; fuzzy back to the first project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M-b&lt;/code&gt; back to the second project&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Please let me know your thoughts.  &lt;a href="https://twitter.com/_WaylonWalker"&gt;@waylonwalker&lt;/a&gt;, this one took me a bit longer to put together with all of the animated gif's, but I think it helps visually show how I navigate tmux every day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#please-give-it-a-share-if-you-liked-it"&gt;
  &lt;/a&gt;
  Please give it a share if you liked it
&lt;/h3&gt;

&lt;p&gt;If you liked it, give it a share and tag me on &lt;a href="https://twitter.com/_WaylonWalker"&gt;twitter&lt;/a&gt;.  I don't often ask but this article took a bit more to put together than my normal post.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#check-out-these-related-posts"&gt;
  &lt;/a&gt;
  Check Out These Related Posts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/symlink-gallery/"&gt;https://waylonwalker.com/symlink-gallery/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/neovim-live-substitution/"&gt;https://waylonwalker.com/neovim-live-substitution/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/find-replace/"&gt;https://waylonwalker.com/find-replace/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bash</category>
      <category>linux</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to Get Into Ethereum | Crypto | Web3 as a Developer</title>
      <author>Nader Dabit</author>
      <pubDate>Wed, 12 May 2021 13:51:24 +0000</pubDate>
      <link>https://dev.to/dabit3/how-to-get-into-ethereum-crypto-web3-as-a-developer-9l6</link>
      <guid>https://dev.to/dabit3/how-to-get-into-ethereum-crypto-web3-as-a-developer-9l6</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/@lennonzf"&gt;Lennon Cheng&lt;/a&gt; on &lt;a href="https://unsplash.com/photos/yAeUPmbyS-0"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--476G-r8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/560158113056047105/IZwbGJAW_normal.png" alt="nnnnicholas.eth⛱ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        nnnnicholas.eth⛱
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @nnnnicholas
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      tell you a secret: everyone is hiring for solidity, react, product design, and community mgmt rn.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      01:26 AM - 11 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1391927737221357575" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1391927737221357575" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1391927737221357575" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I have been talking about &lt;a href="https://twitter.com/dabit3/status/1379157277660299264"&gt;my move&lt;/a&gt; into the &lt;a href="https://ethereum.org/en/developers/docs/web2-vs-web3/"&gt;Web3&lt;/a&gt; / Ethereum / crypto space since making the switch from a traditional web, mobile, and cloud background.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--oao5odtU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1384599492440334340/yYCUVR8k_normal.jpg" alt="Nader Ξ Dabit profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nader Ξ Dabit
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dabit3"&gt;@dabit3&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      So many traditional web, mobile, cloud etc.. developers have reached out to me about transitioning into the crypto / Web3 space.&lt;br&gt;&lt;br&gt;A lot of people have been on the fence, so let me say this.&lt;br&gt;&lt;br&gt;Your skills are transferrable.&lt;br&gt;It's still early.&lt;br&gt;It will be volatile.&lt;br&gt;It's a lot of fun.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      23:20 PM - 08 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1391171104757125122" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1391171104757125122" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1391171104757125122" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Since making the move, the number of people that have reached out to me who are also thinking about doing the same has been pretty shocking. It's really great to see so many other people interested and if I'm being honest – it feels validating to know that so many others are also on the fence and so deeply interested in the space as well.&lt;/p&gt;

&lt;p&gt;As for me, well I was nervous about making the career switch. Moving into a completely new area of specialization, with a technology I was still getting ramped up on, and a community I was not yet involved with, was a big leap compared to a very comfortable role with a FAANG company that paid really well (and a team that I really loved).&lt;/p&gt;

&lt;p&gt;After over a month I can say that I not only have zero regrets with the change, I'm the happiest I've been in a long time and am excited and energized with the things I have the opportunity to work on everyday.&lt;/p&gt;

&lt;p&gt;I decided to write this post to give a blueprint for anyone looking to get into blockchain, crypto, Ethereum, and Web3 from a traditional development background. I can point people to this blog post the next time I get asked how to get into the space.&lt;/p&gt;

&lt;p&gt;This post will be a living &lt;a href="https://maggieappleton.com/garden-history"&gt;digital garden&lt;/a&gt; that will evolve with feedback from others, recommendations, and my own personal growth, exploration, and evolution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this-post-will-be-broken-up-into-a-few-main-parts"&gt;
  &lt;/a&gt;
  This post will be broken up into a few main parts.
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#technologies-and-resources"&gt;Technologies and resources to learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tradeoffs-and-considerations"&gt;Tradeoffs and considerations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#people-to-follow"&gt;People to follow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#companies-hiring-and-doing-interesting-stuff"&gt;Companies hiring and doing interesting stuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#general-tips-and-landing-a-job"&gt;General tips and landing a job&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#technologies-and-resources"&gt;
  &lt;/a&gt;
  Technologies and resources
&lt;/h2&gt;

&lt;p&gt;The things I'm most interested in are usually a function of where I predict technology will be in the somewhat near future and where I see the current momentum being, so that's what I will focus on here (and is what I am doing personally).&lt;/p&gt;

&lt;p&gt;To me, the most exciting parts of this space are decentralization, &lt;a href="https://blog.coinbase.com/a-beginners-guide-to-decentralized-finance-defi-574c68ff43c4"&gt;DeFi&lt;/a&gt;, &lt;a href="https://docs.ethhub.io/ethereum-basics/governance/"&gt;governance&lt;/a&gt; / &lt;a href="https://www.investopedia.com/tech/what-dao/"&gt;DAOs&lt;/a&gt;, and &lt;a href="https://www.youtube.com/watch?v=j2rXJLW_93o"&gt;decentralized web infrastructure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because of this, I'm focusing on both Ethereum development as well as Solidity because with the Solidity programming language you can program smart contracts for Ethereum as well as for many other &lt;a href="https://chainid.network/"&gt;EVM compatible blockchains&lt;/a&gt;. As of this writing, Ethereum also has the powerful and important combination of momentum, developer mindshare, and existing production &lt;a href="https://everest.link/"&gt;dapps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ethereum is also currently moving to a new consensus mechanism, &lt;a href="https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/"&gt;proof of stake&lt;/a&gt;, which addresses the environmental concerns I used to have about how cryptocurrency works at a core level.&lt;/p&gt;

&lt;p&gt;Once you learn how everything works fundamentally, I encourage you to then check out other blockchains and projects outside of Ethereum and EVM to give you a better understanding of the industry as a whole, and to see if there are other projects that attract you or that you may believe are better approaches to achieving the goal that is Web3. Consider looking into &lt;a href="https://solana.com/"&gt;Solana&lt;/a&gt;, &lt;a href="https://polkadot.network/"&gt;Polkadot&lt;/a&gt;, &lt;a href="https://near.org/"&gt;Near&lt;/a&gt;, or &lt;a href="https://hedera.com/"&gt;Hedera&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get started learning blockchain development with Ethereum and Solidity, I suggest you do the folllowing:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-read-the-ethereum-docs"&gt;
  &lt;/a&gt;
  1. Read the Ethereum docs
&lt;/h3&gt;

&lt;p&gt;Scan through the &lt;a href="https://ethereum.org/en/developers/docs/"&gt;Ethereum docs&lt;/a&gt; and be sure to check out the section &lt;a href="https://ethereum.org/en/developers/docs/intro-to-ethereum/"&gt;Intro to Ethereum&lt;/a&gt; as well as anything else that catches your eye.&lt;/p&gt;

&lt;p&gt;Also be sure to check out the &lt;a href="https://ethereum.org/en/dapps/"&gt;dapp showcase&lt;/a&gt; to get a good understanding of the successful apps being built and used in the current ecosystem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-read-the-solidity-documentation"&gt;
  &lt;/a&gt;
  2. Read the Solidity documentation
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://docs.soliditylang.org/en/v0.8.4/"&gt;Solidity docs&lt;/a&gt; are a really good place to get started, especially &lt;a href="https://docs.soliditylang.org/en/v0.8.4/solidity-by-example.html"&gt;solidity by example&lt;/a&gt; which gives you a few examples of popular smart contracts like voting, an auction, remote purchase, and micropayments.&lt;/p&gt;

&lt;p&gt;You can copy and paste these contracts in the &lt;a href="https://remix.ethereum.org/"&gt;Remix IDE&lt;/a&gt; to start executing and modifying them to see how they work.&lt;/p&gt;

&lt;p&gt;I also did a video walkthrough of the voting contract &lt;a href="https://www.youtube.com/watch?v=GB3hiiNNDjk"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-get-comfortable-with-the-remix-ide"&gt;
  &lt;/a&gt;
  3. Get comfortable with the Remix IDE
&lt;/h3&gt;

&lt;p&gt;It's really easy to play around with and start building smart contracts without having to set up any type of development environment by using the &lt;a href="https://remix.ethereum.org/"&gt;Remix IDE&lt;/a&gt;, part of the &lt;a href="https://remix-project.org/"&gt;Remix Project&lt;/a&gt; which is funded by the &lt;a href="https://ethereum.foundation/"&gt;Ethereum Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This Remix IDE allows you to create, edit, and execute smart contracts directly from your browser. It offers a perfect environment for learning how solidity works and is great for building out various types of smart contracts and playing around with them as you are learning both solidity as well as how to interact with Ethereum&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-try-building-out-a-full-stack-dapp"&gt;
  &lt;/a&gt;
  4. Try building out a full stack dapp
&lt;/h3&gt;

&lt;p&gt;In addition to Solidity, the other parts of the the development stack include a local Ethereum environment like &lt;a href="https://hardhat.org/"&gt;Hardhat&lt;/a&gt; or &lt;a href="https://www.trufflesuite.com/"&gt;Truffle&lt;/a&gt;, a wallet like &lt;a href="https://metamask.io/"&gt;Metamask&lt;/a&gt; as well as a client-side library that allows you to interact with the blockchain, like either &lt;a href="https://docs.ethers.io/"&gt;Ethers.js&lt;/a&gt; or &lt;a href="https://web3js.readthedocs.io/"&gt;Web3.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To understand how all of this all fits together, it's useful to build out a full stack dapp on this stack from scratch, setting up the front end project as well as the local development environment and deploying, running, and interacting with a smart contract on the blockchain.&lt;/p&gt;

&lt;p&gt;Two introductory courses to get you going with this are:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-ethereum-programming-tutorial-defi-solidity-truffle-web3js"&gt;
  &lt;/a&gt;
  1. Ethereum Programming Tutorial - DeFi, Solidity, Truffle, Web3.js
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xWFba_9QYmc"&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#2-the-complete-guide-to-full-stack-ethereum-development"&gt;
  &lt;/a&gt;
  2. The Complete Guide to Full Stack Ethereum Development
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/dabit3/the-complete-guide-to-full-stack-ethereum-development-3j13"&gt;Blog post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=a0osIaAOFSE"&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-consider-reading-these-books"&gt;
  &lt;/a&gt;
  5. Consider reading these books
&lt;/h3&gt;

&lt;p&gt;The space itself moves very quickly, so technical books often get out of date just as quickly. The fundamentals of what Web3 is though have not changed much at all, and there are a few really great books that helped me not only grasp the current state of everything, they also helped open my eyes to the future possibilities and opportunities that lie within it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#token-economy-how-the-web3-reinvents-the-internet"&gt;
  &lt;/a&gt;
  Token Economy - How the Web3 reinvents the internet
&lt;/h4&gt;

&lt;p&gt;If you only read one of these books, this is the one I'd say is the most important. It is a masterful deep dive into all of the shortcomings of the web as we know it, what Web3 aims to be, how it will affect various parts of our lives as we know it, and what needs to happen for this vision to be realized.&lt;/p&gt;

&lt;p&gt;You can view the book &lt;a href="https://shermin.net/token-economy-book/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-infinite-machine-how-an-army-of-cryptohackers-is-building-the-next-internet-with-ethereum"&gt;
  &lt;/a&gt;
  The Infinite Machine - How an Army of Crypto-hackers Is Building the Next Internet with Ethereum
&lt;/h4&gt;

&lt;p&gt;This is the amazing story of how Ethereum came to be, walking you through the history of it all. It is a very thorough and entertaining account of the origin story of Ethereum, I highly recommend checking it out.&lt;/p&gt;

&lt;p&gt;You can view the book &lt;a href="https://www.harpercollins.com/products/the-infinite-machine-camila-russo?variant=32123333836834"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#new-village-power-back-to-people"&gt;
  &lt;/a&gt;
  New Village - Power Back to People
&lt;/h4&gt;

&lt;p&gt;This is a really cool story of how blockchain technologies and decentralization will affect the future of the world.&lt;/p&gt;

&lt;p&gt;You can view the book &lt;a href="https://www.amazon.com/New-Village-Power-Back-People-Blockchain/dp/1718045743"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-defi"&gt;
  &lt;/a&gt;
  How to DeFi
&lt;/h4&gt;

&lt;p&gt;As you can probably tell by the title, this book focuses on how you can start using DeFi today and gives you a good understanding about how it can be used today as well as some applications of it that we will see at some time in the future.&lt;/p&gt;

&lt;p&gt;You can view the book &lt;a href="https://landing.coingecko.com/how-to-defi/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-spatial-web"&gt;
  &lt;/a&gt;
  The Spatial Web
&lt;/h4&gt;

&lt;p&gt;The Spatial Web is a book that explores the future of the web and all of the implications of not only Web3 and decentralization, but how everything will come together to enable things that we may have not yet considered, and does a good job weighing the positive and negatives as well as ways that we may be able to address any negative outcomes of what is to come.&lt;/p&gt;

&lt;p&gt;You can view the book &lt;a href="https://www.goodreads.com/book/show/52816204-the-spatial-web"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A couple of solidity books:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.oreilly.com/library/view/hands-on-smart-contract/9781492045250/"&gt;Hands-On Smart Contract Development with Solidity and Ethereum&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.oreilly.com/library/view/mastering-ethereum/9781491971932/"&gt;Mastering Ethereum&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#6-podcasts"&gt;
  &lt;/a&gt;
  6. Podcasts
&lt;/h3&gt;

&lt;p&gt;Here are some good podcasts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://outlierventures.io/podcasts/"&gt;Founders
of Web 3&lt;/a&gt; - The people that creating and building the next phase of the internet.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://podcast.banklesshq.com/"&gt;Bankless&lt;/a&gt; - The Ultimate Guide to Crypto Finance&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://podcast.ethhub.io/"&gt;Into the Ether&lt;/a&gt; - Podcast about Ethereum&lt;/li&gt;
&lt;li&gt;&lt;a href="https://player.fm/series/crypto-101"&gt;Crypto 101&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://player.fm/series/epicenter-learn-about-crypto-blockchain-ethereum-bitcoin-and-distributed-technologies-41400"&gt;Epicenter&lt;/a&gt; - Learn about Crypto, Blockchain, Ethereum, Bitcoin and Distributed Technologies&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#7-youtube-channels"&gt;
  &lt;/a&gt;
  7. YouTube channels
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCNOfzGXD_C9YMYmnefmPH0g"&gt;Ethereum Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCZM8XQjNOyG2ElPpEUtNasA"&gt;Eat the Blocks&lt;/a&gt; - Short videos on blockchain development&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/Finematics/videos"&gt;Finematics&lt;/a&gt; - Sharing interesting DeFi videos&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCY0xL8V6NzzFcwzHCgB8orQ"&gt;Dapp University&lt;/a&gt; - Videos in the Ethereum space&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/BlockGeeks/featured"&gt;BlockGeeks&lt;/a&gt; - General Blockchain Training&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCvCp6vKY5jDr87htKH6hgDA"&gt;The Daily Gwei&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC_HI2i2peo1A-STdG22GFsA"&gt;Austin Griffith&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've also begun doing videos and tutorials on Ethereum and Solidity, so consider checking out &lt;a href="https://www.youtube.com/channel/UC7mca3O0DmdSG2Cr80sOD7g"&gt;my YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tradeoffs-and-considerations"&gt;
  &lt;/a&gt;
  Tradeoffs and considerations
&lt;/h2&gt;

&lt;p&gt;There are always considerations to think about when making a career transition, but especially when considering this space.&lt;/p&gt;

&lt;p&gt;There are a lot of positives, but there are also unknowns as well as negatives. Let's talk about some of them.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#nascent"&gt;
  &lt;/a&gt;
  Nascent
&lt;/h3&gt;

&lt;p&gt;While there are many existing dapps and companies already flourishing, this space is very much still coming into existence in many ways.&lt;/p&gt;

&lt;p&gt;There are a lot of problems that still have yet to be solved, and there are no clear answers for many questions you'll have. The problems being solved are often complex, sometimes combining one or aspects of distributed systems, game theory, cryptography, economics, social and political science, identity, psychology, and more.&lt;/p&gt;

&lt;p&gt;Because of this, there are still things that cannot yet be built with the existing solutions that are available.&lt;/p&gt;

&lt;p&gt;I personally think this is one of the more exciting things about all of it it, but it's not for everyone.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#volatile"&gt;
  &lt;/a&gt;
  Volatile
&lt;/h3&gt;

&lt;p&gt;Many of the projects are built around various types of tokens. The value of many of these tokens rises and falls dramatically, and you often see that people gain and lose excitement in the entire space based on these swings.&lt;/p&gt;

&lt;p&gt;If you are not fundamentally bought into the ideas behind decentralization itself, you may find these ups and downs mentally taxing.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#speculation"&gt;
  &lt;/a&gt;
  Speculation
&lt;/h3&gt;

&lt;p&gt;Because a lot of people only buy into certain tokens in a speculative way, it attracts some people who are in it only for the money.&lt;/p&gt;

&lt;p&gt;You see things like scammers trying to get over on people and steal their money, endless talk about price swings from people who are speculating, and outright scam projects that often discredit the industry as a whole.&lt;/p&gt;

&lt;p&gt;This is an annoying part of it and I don't really see it going away anytime soon.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#this-thread"&gt;
  &lt;/a&gt;
  This thread
&lt;/h3&gt;

&lt;p&gt;I would also check out this thread, though I have not experienced all of these things, he is definitely shining a light on some of the things I have seen. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hpF8p-Wd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1366510299541475328/ACoil_MX_normal.jpg" alt="Jon Syu profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jon Syu
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jonsyu
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I'm seeing a lot of people FOMO quit their jobs to join "crypto", probably out of some over-romanticized view of what goes on in these projects. Let me illuminate you about what actually happens:&lt;br&gt;&lt;br&gt;👇
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:38 PM - 04 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1389635626698297344" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1389635626698297344" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1389635626698297344" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#people-to-follow-on-twitter"&gt;
  &lt;/a&gt;
  People to follow on Twitter
&lt;/h2&gt;

&lt;p&gt;Here are a few people who you may consider following on Twitter:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/VitalikButerin"&gt;Vitalik&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/ashleighschap"&gt;Ashleigh Schapp&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/CryptoHayes"&gt;Arthur Hayes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/StaniKulechov"&gt;Stani Kulechov&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/gkimbwala"&gt;Gloria Kimbwala&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/niran"&gt;Niran Babalola&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/ricburton"&gt;Ric Burton&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/dennisonbertram"&gt;Dennison Bertram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/manasilvora"&gt;Mana Silvora&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/austingriffith"&gt;Austin Griffith&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/smpalladino"&gt;Santiago Palladino&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/zmanian"&gt;Zaki Manian&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/sassal0x"&gt;Anthony Sassano&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also found &lt;a href="https://twitter.com/i/lists/869994563691319296/members"&gt;this comprehensive list&lt;/a&gt; created by someone on Twitter.&lt;/p&gt;

&lt;p&gt;A few people on my team at &lt;a href="https://twitter.com/edgeandnode"&gt;Edge &amp;amp; Node&lt;/a&gt;:&lt;br&gt;
&lt;a href="https://twitter.com/yanivgraph"&gt;Yaniv Tal&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/theklineventure"&gt;Tegan Kline&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/evabeylin"&gt;Eva Beylin&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/azacharyf"&gt;Adam Fuller&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/RezBrandon"&gt;Brandon Ramirez&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#companies-doing-interesting-stuff-and-hiring"&gt;
  &lt;/a&gt;
  Companies doing interesting stuff (and hiring)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://compound.finance/about#jobs"&gt;Compound&lt;/a&gt;&lt;br&gt;
&lt;a href="https://jobs.lever.co/Uniswap"&gt;Uniswap&lt;/a&gt;&lt;br&gt;
&lt;a href="https://chainlinklabs.com/careers"&gt;Chainlink&lt;/a&gt;&lt;br&gt;
&lt;a href="https://jobs.lever.co/SkynetLabs"&gt;Skynet Labs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aave.com/careers/"&gt;Aave&lt;/a&gt;&lt;br&gt;
&lt;a href="https://matic.network/careers/"&gt;Matic&lt;/a&gt;&lt;br&gt;
&lt;a href="https://livepeer.org/jobs"&gt;Livepeer&lt;/a&gt;&lt;br&gt;
&lt;a href="https://consensys.net/open-roles/"&gt;Consensys&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/the-ethereum-name-service/ens-is-hiring-come-build-a-new-decentralized-internet-with-us-24398dea3ac"&gt;ENS&lt;/a&gt;&lt;br&gt;
&lt;a href="https://openzeppelin.com/jobs/"&gt;OpenZeppelin&lt;/a&gt;&lt;br&gt;
&lt;a href="https://foundation.app/careers"&gt;Foundation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cryptocurrencyjobs.co/startups/zora/"&gt;Zora&lt;/a&gt;&lt;br&gt;
&lt;a href="https://synthetix.com/careers"&gt;Synthetix&lt;/a&gt;&lt;br&gt;
&lt;a href="https://jobs.dcg.co/companies"&gt;Digital Currency Group&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also find a pretty decent list of job opportunities in cryptocurrency &lt;a href="https://cryptocurrencyjobs.co/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, my team at &lt;a href="https://edgeandnode.com/jobs"&gt;Edge &amp;amp; Node is hiring&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#general-tips-and-landing-a-job"&gt;
  &lt;/a&gt;
  General tips and landing a job
&lt;/h2&gt;

&lt;p&gt;There are many areas within the space that you can focus on and provide a positive impact on a team. I'd look into the different areas like governance, DeFi, NFTs, and decentralized web protocols to see what interests you the most and then focus on it.&lt;/p&gt;

&lt;p&gt;There are a lot of opportunities and a lot of ways to stand out and get noticed. If you find an interesting project and would like to get involved, jump right into their community and ecosystem and start learning, then see where you may be able to help out. Join their Discord or look at their GitHub issues to find ways that you can contribute.&lt;/p&gt;

&lt;p&gt;This will give you an opportunity to meet people involved in the project and will open up discussions for potentially landing a role with them. In fact, it is very common for people within the teams to take notice of active community participants, they will then often reach out and try to recruit you without you even applying.&lt;/p&gt;

&lt;p&gt;The pay is usually &lt;a href="https://cryptocurrencyjobs.co/salaries/solidity-developer/"&gt;good&lt;/a&gt;. Depending on where you are coming from, it could be more or less, but it's probably not going to be at the high levels of what you see at FAANG companies. There is probably more potential upside. Most companies offer a combination of base pay + equity in the form of their digital token, so if you stick around and can help make the project successful and the value of the token goes up, you can often make more than what you would in many other areas.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--pQ8nDFk5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1374352366997270534/zOq3IEvu_normal.jpg" alt="Ashleigh Schap 🦄🌽 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ashleigh Schap 🦄🌽
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @ashleighschap
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Idk who needs to hear this but: quit your job and come work in crypto.&lt;br&gt;&lt;br&gt;I took a massive pay cut to join this industry. My first job at Maker paid about a third of what I was making before that. It was the easiest &amp;amp; best decision I’ve ever made. I have never once regretted it.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:54 PM - 08 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1368968462761132036" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1368968462761132036" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1368968462761132036" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>webdev</category>
      <category>programming</category>
      <category>blockchain</category>
      <category>cryptocurrency</category>
    </item>
  </channel>
</rss>
