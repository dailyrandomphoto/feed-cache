<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Build a REST API with Node, Express and MongoDB</title>
      <author>Kumar Shubham</author>
      <pubDate>Wed, 06 Jan 2021 10:14:36 +0000</pubDate>
      <link>https://dev.to/shubham1710/build-a-rest-api-with-node-express-and-mongodb-4o82</link>
      <guid>https://dev.to/shubham1710/build-a-rest-api-with-node-express-and-mongodb-4o82</guid>
      <description>&lt;p&gt;APIs are a very common thing nowadays. They are used literally everywhere on the website. APIs serve as the connection between the database which stores all the data and the frontend with which the user interacts with to get access to the data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API&lt;/strong&gt; mean Application Programming Interface which is a set of clearly defined methods of communication between the frontend and the database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REST&lt;/strong&gt; which stands for Representational State Transfer is an architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other.&lt;/p&gt;

&lt;p&gt;REST APIs mostly use JSON as the preferred choice for transferring data as they are easy to understand and is readable.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will be using Node, Express and MongoDB to create a REST API which would support the four operations — GET, POST, PUT and DELETE.&lt;/p&gt;

&lt;p&gt;So, let’s first discuss these four operations and try to understand what they actually mean in the context of API development.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;GET&lt;/strong&gt; — GET means to read the data. The function of this operation is to retrieve the data from the database and present it to the user.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;POST&lt;/strong&gt; — POST, as the name suggests, is used to post/add new data to the database. It allows users to add new data to the database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PUT&lt;/strong&gt; — PUT means to update the data already present in the database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DELETE&lt;/strong&gt; — It is used to delete any existing data from the database.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, our REST API will perform all these four operations. We will use the Express package to make our work easier. We will use MongoDB as the NoSQL database to store all our data. MongoDB stores data in JSON format.&lt;/p&gt;

&lt;p&gt;So, we will do it step by step. First, we would build the API endpoints and then we would connect to the database to perform actual operations. We would use Postman software for API testing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-the-project" class="anchor"&gt;
  &lt;/a&gt;
  Setting up the Project
&lt;/h3&gt;

&lt;p&gt;First of all, we need to download Node on our system. Then we can start creating our project.&lt;/p&gt;

&lt;p&gt;So, first of all, we need to create a folder in our system where we would love to build our project. I kept the name of the folder as rest-api.&lt;/p&gt;

&lt;p&gt;Then we need to move into the rest-api folder we created just now. Now to start a new project, we would run the following command within the folder:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It will ask us various questions regarding the project like name, description and other things. We would like to keep everything in the default mode except the name and description which we can add as per our convenience.&lt;/p&gt;

&lt;p&gt;After completion, we will see a package.json file in the folder. It contains all the data we just gave to create this file. You can see the entry point is index.js file.&lt;/p&gt;

&lt;p&gt;After creating the package.json file, we need to download Express on our machine. To install Express, we can:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express --save
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will download and save express in our system and also will add express as a dependency in our package.json file.&lt;/p&gt;

&lt;p&gt;We will also like to download a development dependency named nodemon which will allow us to develop faster. It will help us to avoid restarting the server each time we make a change and will automatically refresh which would save us a lot of time.&lt;/p&gt;

&lt;p&gt;So, to install nodemon we would do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev nodemon
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Notice that we have used save-dev to install and add it in package.json file as a dev dependency as we using it speed up our development process.&lt;/p&gt;

&lt;p&gt;Now, we need to download MongoDB in our system and then create the cluster and connect it with your local computer.&lt;/p&gt;

&lt;p&gt;Next, we need to download mongoose to interact with the MongoDB database from our express application.&lt;/p&gt;

&lt;p&gt;To install mongoose, do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install mongoose --save
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, we are ready to start building our REST API. Before starting, I would like to show my package.json file so that you can verify everything is going perfect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "rest-api",
  "version": "1.0.0",
  "description": "Test Rest API",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1"
  },
  "author": "Shubham",
  "license": "ISC",
  "dependencies": {
    "express": "^4.17.1",
    "mongoose": "^5.11.9"
  },
  "devDependencies": {
    "nodemon": "^2.0.6"
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, let’s start building our REST API. First of all, we need to create a file named index.js as we can see it is the entry point to our application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-index-file" class="anchor"&gt;
  &lt;/a&gt;
  The index file
&lt;/h3&gt;

&lt;p&gt;We would start with the index.js file. We would start with requiring express into our system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will then set up our express app by writing the following line of code:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = express();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, then we would set up a GET function to test it out using the browser. We pass a message as the response when we have a GET request to localhost:4000/api.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get('/api', (req, res) =&amp;gt; res.send('Its working!'));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will then set up our application to start listening to the requests. We will use 4000 as the port number. We have used the OR operator there so that if there is any port number defined via environment variables, it could use that otherwise it will use 4000. You can choose the port number as per your choice. We will console.log a message to check if it is working properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.listen(process.env.port || 4000, function(){
   console.log('now listening for requests');
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, when we would start the server now using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nodemon index
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When we go to localhost:4000/api we would see the message as ‘It’s working!’. Also, in console, we would get the message we set for the console.&lt;/p&gt;

&lt;p&gt;So, here we are, with the express server set up properly and we sent our first GET request successfully.&lt;/p&gt;

&lt;p&gt;Now, we would like to have all our four operations in a separate file called api.js under routes folder as we do not want to push everything into index.js file.&lt;/p&gt;

&lt;p&gt;So, we would remove the app.get part in this index.js file. We would like to add the mongoose as a requirement in our file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require('mongoose');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, below the set up of our express app, we would like to connect to MongoDB. We would do so with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mongoose.connect('mongodb://localhost/ourdata');
mongoose.Promise = global.Promise;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, ourdata is the name of the model we will be creating in MongoDb later on in this tutorial.&lt;/p&gt;

&lt;p&gt;We also update the promises of the mongoose as the global promise since mongoose.promise is depreciated now.&lt;/p&gt;

&lt;p&gt;Next, we would add a few more middlewares in the file. We would first add support to serve static files. Though we won't be serving static files in this tutorial but having it is nice since we would need to add a frontend anyway later on to use the APIs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use(express.static('public'));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We would then add Express parser to parse the data sent or received from the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use(express.json());
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We then set up the app to use the new api.js file we would create to hold our all four operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use('/api',require('./routes/api'));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We have added ‘/api’ in the starting to avoid adding it to all four of the operations.&lt;/p&gt;

&lt;p&gt;Finally, we add a middleware to handle the errors that occurred during the operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use(function(err,req,res,next){
   res.status(422).send({error: err.message});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here is the finalized code for the index.js file:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const mongoose = require('mongoose');

// set up our express app
const app = express();

// connect to mongodb
mongoose.connect('mongodb://localhost/ourdata');
mongoose.Promise = global.Promise;

app.use(express.static('public'));

app.use(express.json());
// initialize routes
app.use('/api',require('./routes/api'));

// error handling middleware
app.use(function(err,req,res,next){
    //console.log(err);
    res.status(422).send({error: err.message});
});

// listen for requests
app.listen(process.env.port || 4000, function(){
    console.log('Ready to Go!');
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-layout-of-the-four-crud-operations" class="anchor"&gt;
  &lt;/a&gt;
  The layout of the four CRUD operations
&lt;/h3&gt;

&lt;p&gt;Next up, we create a folder named router and create a new file named api.js inside the folder. This would hold all the four CRUD operations we want to do with the REST API we are building.&lt;/p&gt;

&lt;p&gt;We first start by requiring express in our file. Then we would create a router using the express router.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const router = express.Router();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, let’s start building the four operations one by one. Now, we would not be saving anything to the database since we have not created one yet, but we would be testing them more simply.&lt;br&gt;
So, we would start with the GET operator. We will write the code for the GET request in this way:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.get('/students',function(req,res){
    res.send({type: 'GET'});
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we are giving the endpoint and a function which gives a response which tells the type of the request sent.&lt;/p&gt;

&lt;p&gt;Next up is POST request. It will be in a similar way though we would like to return the data which we received from the request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/students', function(req, res){
    res.send({
        type: 'POST',
        name: req.body.name,
        roll: req.body.roll
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next up is PUT and DELETE request. For now, we would simply return the type of request for both the operations. It accepts the endpoint with an id which denotes the unique id which MongoDB provides when we save data to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.put('/students/:id', function(req, res){
    res.send({type: 'PUT'});
});

router.delete('/students/:id', function(req, res){
    res.send({type: 'DELETE'});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we would export the module to be used within the index.js file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = router;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To test out these operations, we would use a software called Postman. It is amazing and helps to test out APIs really fast.&lt;br&gt;
Download the Postman desktop agent or install its Chrome extension to start using Postman. A Postman new Workspace looks like the following:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oK4N3Xdv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2oho1k9stnd0y3crn8t1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oK4N3Xdv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2oho1k9stnd0y3crn8t1.png" alt="Postman Workspace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we can choose the type of operation and the target URL for sending requests. For POST requests, we need to send some JSON data while sending request which we can be done by adding the JSON in the Body section.&lt;/p&gt;

&lt;p&gt;You need to select Raw data type and then chose JSON as the format such as shown below:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9dANELWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zzb5gunatxfmem9a2lxd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9dANELWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zzb5gunatxfmem9a2lxd.png" alt="Adding Body in Post request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, we can test all these operations via Postman very easily. We also need to provide the data while PUT request as we are updating the data. We only pass the data we need to update.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#building-the-database-schema-and-model" class="anchor"&gt;
  &lt;/a&gt;
  Building the Database Schema and Model
&lt;/h3&gt;

&lt;p&gt;Next, we would create a folder named models and then create a student.js file within that folder.&lt;/p&gt;

&lt;p&gt;We would require mongoose in that folder and would build a Schema and then a model based on that Schema. A Schema tells the model how the data is to be structured.&lt;/p&gt;

&lt;p&gt;We are building a model which would contain data of students — name, their roll number and whether they are present or not.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Name — This is of String data type and is not a required field in the Schema.&lt;/li&gt;
&lt;li&gt;Roll — This is also of String data type and is a required field. It cannot be left empty.&lt;/li&gt;
&lt;li&gt;Present — This is a Boolean field which defaults to true.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We then create the model named Student with the help of the StudentSchema that we created. We then export the model to use it in the API file.&lt;/p&gt;

&lt;p&gt;So, let’s have a look at the student.js file:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require('mongoose');
const Schema = mongoose.Schema;

// create student schema &amp;amp; model
const StudentSchema = new Schema({
    name: {
        type: String,
    },
    roll: {
        type: String,
        required: [true, 'Roll field is required']
    },
    present: {
        type: Boolean,
        deafult: true
    }
});

const Student = mongoose.model('student',StudentSchema);
module.exports = Student;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#finalizing-the-apijs-file" class="anchor"&gt;
  &lt;/a&gt;
  Finalizing the api.js file
&lt;/h3&gt;

&lt;p&gt;Now, we would make all four API endpoints usable by saving and retrieving data from the database model we created.&lt;/p&gt;

&lt;p&gt;So, we need to require that database model in the API file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Student = require('../models/student');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We then start with the GET request. We would get all the students in our database and would send them all as a response. You can add any sort of filtering for the students but we are leaving the find function empty to access every student from the database. We then use .catch(next) function to help catch any errors and pass it to the next middleware — error handling middleware in our case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.get('/students',function(req,res,next){
    Student.find({}).then(function(students){
        res.send(students);
    }).catch(next);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we go for the POST request. We create a new student in the database and then return the created student as a response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/students',function(req,res,next){
    Student.create(req.body).then(function(student){
        res.send(student);
    }).catch(next);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we have the PUT request. We would use the findOneAndUpdate function to find the corresponding entry in the database using the id we passed in the URL endpoint. We then find the same student with the help of its Id and return the updated student as a response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.put('/students/:id',function(req,res,next){
    Student.findOneAndUpdate({_id: req.params.id},req.body).then(function(student){
        Student.findOne({_id: req.params.id}).then(function(student){
            res.send(student);
        });
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lastly, we have the DELETE request. We use the function findOneAndDelete to find the corresponding student in the database via the id provided and delete that student from the database. It also returns the deleted student as a response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.delete('/students/:id',function(req,res,next){
    Student.findOneAndDelete({_id: req.params.id}).then(function(student){
        res.send(student);
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can test all these using the Postman software very easily. Everything should work fine on testing and we have done everything nicely and cleanly.&lt;/p&gt;

&lt;p&gt;Here is the final code for the api.js file:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const router = express.Router();
const Student = require('../models/student');

// get a list of students from the database
router.get('/students',function(req,res,next){
    Student.find({}).then(function(students){
        res.send(students);
    }).catch(next);
});

// add a new student to database
router.post('/students',function(req,res,next){
    Student.create(req.body).then(function(student){
        res.send(student);
    }).catch(next);
});

// update a student in the database
router.put('/students/:id',function(req,res,next){
    Student.findOneAndUpdate({_id: req.params.id},req.body).then(function(student){
        Student.findOne({_id: req.params.id}).then(function(student){
            res.send(student);
        });
    });
});

// delete a student in the database
router.delete('/students/:id',function(req,res,next){
    Student.findOneAndDelete({_id: req.params.id}).then(function(student){
        res.send(student);
    });
});

module.exports = router;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, finally, we have created our REST API which performs all the four CRUD operations. So, as you see, it was very easy building a REST API with the help of Node, Express and MongoDB.&lt;/p&gt;

</description>
      <category>node</category>
      <category>mongodb</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Scraping Wikipedia for data using Puppeteer and Node</title>
      <author>Tyler Reicks</author>
      <pubDate>Wed, 06 Jan 2021 04:41:23 +0000</pubDate>
      <link>https://dev.to/tyry327/scraping-wikipedia-for-data-using-puppeteer-and-node-1f0l</link>
      <guid>https://dev.to/tyry327/scraping-wikipedia-for-data-using-puppeteer-and-node-1f0l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;In this article, we'll go through scraping a Wikipedia table with COVID-19 data using Puppeteer and Node. The original article that I used for this project is located &lt;a href="https://analyticsindiamag.com/puppeteer-web-scraping/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have never scraped a website before. I've always seen it as a hacky thing to do. But, after going through this little project, I can see the value of something like this. Data is hard to find and if you can scrape a website for it, in my opinion, by all means, do it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Setting up this project was extremely easy. All you have to do is install Puppeteer with the command &lt;code&gt;npm install puppeteer&lt;/code&gt;. There was one confusing issue I had during setup, however. The puppeteer package was not unzipped correctly when I initially installed it. I found this out while running the initial example in the article. If you get an error that states &lt;code&gt;Failed to launch browser process&lt;/code&gt; or something similar follow these steps: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Unzip &lt;code&gt;chrome-win&lt;/code&gt; from &lt;code&gt;node_modules/puppeteer/.local-chromium/&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Then add that folder to the &lt;code&gt;win64&lt;/code&gt; folder in that same &lt;code&gt;.local-chromium&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Make sure the &lt;code&gt;chrome.exe&lt;/code&gt; is in this path &lt;code&gt;node_modules/puppeteer/.local-chromium/win64-818858/chrome-win/chrome.exe&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;This is for windows specifically. Mac might be similar, but not sure.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the &lt;a href="https://github.com/puppeteer/puppeteer/issues/5662#issuecomment-625788716"&gt;link&lt;/a&gt; that lead me to the answer. It might be a good idea to do this no matter what to make sure everything is functioning properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code" class="anchor"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;p&gt;I had to make a couple of small changes to the existing code. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#first-example" class="anchor"&gt;
  &lt;/a&gt;
  First example
&lt;/h4&gt;

&lt;p&gt;The first example didn't work for me. To fix the problem I assigned the async function to a variable then invoked that variable after the function. I'm not sure this is the best way to handle the issue but hey, it works. Here is the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer');

const takeScreenShot = async () =&amp;gt; {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.goto('https://www.stem-effect.com/');
    await page.screenshot({path: 'output.png'});

    await browser.close();
};

takeScreenShot();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#wikipedia-scraper" class="anchor"&gt;
  &lt;/a&gt;
  Wikipedia scraper
&lt;/h4&gt;

&lt;p&gt;I also had an issue with the Wikipedia scraper code. For some reason, I was getting null values for the country names. This screwed up all of my data in the JSON file I was creating. &lt;/p&gt;

&lt;p&gt;Also, the scraper was 'scraping' every table on the Wikipedia page. I didn't want that. I only wanted the first table with the total number of cases and deaths caused by COVID-19. Here is the modified code I used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer');
const fs = require('fs')

const scrape = async () =&amp;gt;{
    const browser = await puppeteer.launch({headless : false}); //browser initiate
    const page = await browser.newPage();  // opening a new blank page
    await page.goto('https://en.wikipedia.org/wiki/2019%E2%80%9320_coronavirus_pandemic_by_country_and_territory', {waitUntil : 'domcontentloaded'}) // navigate to url and wait until page loads completely

    // Selected table by aria-label instead of div id
    const recordList = await page.$$eval('[aria-label="COVID-19 pandemic by country and territory table"] table#thetable tbody tr',(trows)=&amp;gt;{
        let rowList = []    
        trows.forEach(row =&amp;gt; {
                let record = {'country' : '','cases' :'', 'death' : '', 'recovered':''}
                record.country = row.querySelector('a').innerText; // (tr &amp;lt; th &amp;lt; a) anchor tag text contains country name
                const tdList = Array.from(row.querySelectorAll('td'), column =&amp;gt; column.innerText); // getting textvalue of each column of a row and adding them to a list.
                record.cases = tdList[0];        
                record.death = tdList[1];       
                record.recovered = tdList[2];   
                if(tdList.length &amp;gt;= 3){         
                    rowList.push(record)
                }
            });
        return rowList;
    })
    console.log(recordList)
    // Commented out screen shot here
    // await page.screenshot({ path: 'screenshots/wikipedia.png' }); //screenshot 
    browser.close();

    // Store output
    fs.writeFile('covid-19.json',JSON.stringify(recordList, null, 2),(err)=&amp;gt;{
        if(err){console.log(err)}
        else{console.log('Saved Successfully!')}
    })
};
scrape();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I wrote comments on the subtle changes I made, but I'll also explain them here. &lt;/p&gt;

&lt;p&gt;First, instead of identifying the table I wanted to use by the &lt;code&gt;div#covid19-container&lt;/code&gt;, I pinpointed the table with the aria-label. This was a little more precise. Originally, the reason the code was scraping over all of the tables on the page was because the IDs were the same (I know, not a good practice. That's what classes are for, right?). Identifying the table via aria-label helped ensure that I only scraped the exact table I wanted, at least in this scenario.&lt;/p&gt;

&lt;p&gt;Second, I commented out the screenshot command. It broke the code for some reason and I didn't see the need for it if we were just trying to create a JSON object from table data.&lt;/p&gt;

&lt;p&gt;Lastly, after I obtained the data from the correct table I wanted to actually use it in a chart. I created an HTML file and displayed the data using Google charts. You can see the full project on my &lt;a href="https://github.com/tyry327/scraper"&gt;Github&lt;/a&gt; if you are curious. Fair warning, I got down and dirty (very hacky) putting this part together, but at the end of the day, I just wanted an easier way to consume the data that I had just mined for. There could be a whole separate article on the amount of refactoring that can be done on my HTML page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This project was really fun. Thank you to the author, Mohit Maithani, for putting it together. It opened my eyes to the world of web scraping and a whole new realm of possibilities! At a high level, web scraping enables you to grab data from anywhere you want. &lt;/p&gt;

&lt;p&gt;Like one of my favorite Youtubers, Ben Sullins likes to say, "When you free the data, your mind will follow". &lt;/p&gt;

&lt;p&gt;Love y'all. Happy coding!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>node</category>
      <category>puppeteer</category>
    </item>
    <item>
      <title>How to manage background processes in Linux</title>
      <author>Javed Shaikh</author>
      <pubDate>Wed, 06 Jan 2021 03:36:51 +0000</pubDate>
      <link>https://dev.to/shaikh/how-to-manage-background-processes-in-linux-1d2m</link>
      <guid>https://dev.to/shaikh/how-to-manage-background-processes-in-linux-1d2m</guid>
      <description>&lt;p&gt;If you are new to Linux operating system and you start a command or process using terminal/session, you must have noticed that you need to wait till a process or command get finished before starting another command. This is because when you run a command using session or terminal, the process starts in the foreground by default. What should you do to run another command without opening a new terminal?&lt;br&gt;
In this post I am going to show how you can manage background and foreground process in Linux. &lt;/p&gt;

&lt;p&gt;But before that lets understand what is foreground process and what is background process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Foreground process&lt;/strong&gt; is the process or job that is currently running on the terminal. So there will be only one foreground process per terminal.You need to wait till the current foreground process finishes before starting a new foreground process.&lt;br&gt;
**Example: **Any command or process you start in the current session&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Background process&lt;/strong&gt; is the process or job running on the background and doesn't require interaction from the user. There can be more than one background process obviously.&lt;br&gt;
&lt;strong&gt;Example:&lt;/strong&gt; most common example is your web server.&lt;/p&gt;

&lt;p&gt;For this example I am going to start command VMSTAT 1&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;vmstat 5
procs &lt;span class="nt"&gt;-----------memory----------&lt;/span&gt; &lt;span class="nt"&gt;---swap--&lt;/span&gt; &lt;span class="nt"&gt;-----io----&lt;/span&gt; &lt;span class="nt"&gt;-system--&lt;/span&gt; &lt;span class="nt"&gt;------cpu-----&lt;/span&gt;
 r  b   swpd   free   buff  cache   si   so    bi    bo   &lt;span class="k"&gt;in   &lt;/span&gt;cs us sy &lt;span class="nb"&gt;id &lt;/span&gt;wa st
 0  0      0 3045156 167484 2449380    0    0    80    56  469 1138 19  5 76  0  0
 1  0      0 3044644 167492 2450152    0    0     0    92  299  604  2  1 98  0  0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;vmstat&lt;/strong&gt; is command that displays real time memory usage and cpu utillization. If you want to know more about it visit my previous post  &lt;a href="https://shaikhu.com/how-to-monitor-cpu-utilization-in-linux-ckgcp9gex07g8pas1ees0hz7t"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In the above command &lt;br&gt;
Things to note here is that above command will print CPU stats every five second on the terminal until you interrupt it. If you want to terminate it just press &lt;strong&gt;CTL + C&lt;/strong&gt; or if you want to pause or stop, press &lt;strong&gt;CTL + Z&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bg-move-a-job-to-background" class="anchor"&gt;
  &lt;/a&gt;
  bg: Move a job to background
&lt;/h3&gt;

&lt;p&gt;If you want to move a job that is already started to background so that you can access the terminal press &lt;strong&gt;CTL + Z ** and then **bg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;lets start a job in the foreground using below command. Here we are writing CPU stats on a text file. As you can see , we cannot start a new command as this is running on the foreground.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lets do &lt;strong&gt;CTL + Z&lt;/strong&gt; to pause this job and then do &lt;strong&gt;bg&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt
^Z
&lt;span class="o"&gt;[&lt;/span&gt;1]+  Stopped                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt
shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;bg&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]+ vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now the job running in the background and we got the terminal&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-start-command-and-run-it-in-the-background" class="anchor"&gt;
  &lt;/a&gt;
  How to start command and run it in the background
&lt;/h3&gt;

&lt;p&gt;To start a command and run it in the background use &lt;strong&gt;&amp;amp;&lt;/strong&gt; as shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;command&lt;/span&gt; &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sleep &lt;/span&gt;400 &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;2] 11122
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#jobs-command-to-check-the-job-status" class="anchor"&gt;
  &lt;/a&gt;
  jobs : command to check the job status
&lt;/h3&gt;

&lt;p&gt;This command displays all the jobs running in the current terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]-  Running                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;2]+  Running                 &lt;span class="nb"&gt;sleep &lt;/span&gt;400 &amp;amp;
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here number withing bracket is [n] is job id or job number and &lt;strong&gt;+&lt;/strong&gt; indicates most recent command or job whereas &lt;strong&gt;-&lt;/strong&gt; indicates previous job. If you want to see the process id use &lt;strong&gt;-l&lt;/strong&gt; option&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]- 10216 Running                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;2]+ 11122 Running                 &lt;span class="nb"&gt;sleep &lt;/span&gt;400 &amp;amp;
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The number 10216 and 11122 are process id&lt;/p&gt;

&lt;p&gt;Different options for &lt;strong&gt;jobs&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#l-lists-process-ids-in-addition-to-the-normal-information" class="anchor"&gt;
  &lt;/a&gt;
  -l :    lists process IDs in addition to the normal information
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#n-lists-only-processes-that-have-changed-status-since-the-last" class="anchor"&gt;
  &lt;/a&gt;
  -n :    lists only processes that have changed status since the last
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#notification" class="anchor"&gt;
  &lt;/a&gt;
  notification
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#p-lists-process-ids-only" class="anchor"&gt;
  &lt;/a&gt;
  -p :    lists process IDs only
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#r-restrict-output-to-running-jobs" class="anchor"&gt;
  &lt;/a&gt;
  -r :    restrict output to running jobs
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#s-restrict-output-to-stopped-jobs" class="anchor"&gt;
  &lt;/a&gt;
  -s :    restrict output to stopped jobs
&lt;/h5&gt;

&lt;h3&gt;
  &lt;a href="#kill-n-to-kill-a-job-with-job-id-n" class="anchor"&gt;
  &lt;/a&gt;
  kill %n: to kill a job with job id n
&lt;/h3&gt;

&lt;p&gt;Kill command is used to kill a job. Note that &lt;strong&gt;%&lt;/strong&gt; will be used to indicate job id or job number&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;haikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]-  Running                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;2]+  Running                 &lt;span class="nb"&gt;sleep &lt;/span&gt;400 &amp;amp;
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;kill&lt;/span&gt; %2
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]+  Running                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see now we have only one job running in the background and notice the &lt;strong&gt;+&lt;/strong&gt; sign which indicates the job id 1 becomes the most recent job 🙂&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fg-command-to-move-a-job-to-foreground" class="anchor"&gt;
  &lt;/a&gt;
  fg : command to move a job to foreground
&lt;/h3&gt;

&lt;p&gt;Use **fg **command to move a job to foreground. By default it will bring most recent background job to foreground&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]   Running                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;2]-  Running                 &lt;span class="nb"&gt;sleep &lt;/span&gt;400 &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;3]+  Running                 &lt;span class="nb"&gt;sleep &lt;/span&gt;500 &amp;amp;
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;fg
sleep &lt;/span&gt;500
&lt;span class="o"&gt;[&lt;/span&gt;2]   Done                    &lt;span class="nb"&gt;sleep &lt;/span&gt;400
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have more than one jobs running in the background then use &lt;strong&gt;%n&lt;/strong&gt; to move a specific job to the foreground&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;fg&lt;/span&gt; %2
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ps-command-to-see-all-the-processes" class="anchor"&gt;
  &lt;/a&gt;
  ps command to see all the processes
&lt;/h3&gt;

&lt;p&gt;Use &lt;strong&gt;ps&lt;/strong&gt; command to see active processes.&lt;br&gt;
Use below options&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#ps-ax-to-see-all-the-process-currently-active-in-the-system-use-my-previous-post-to-check-the-commands-for-real-time-process-it-will-be-a-very-long-list-so-use-lessmore-parameters" class="anchor"&gt;
  &lt;/a&gt;
  ps ax : to see all the process currently active in the system (Use my previous post to check the commands for real time process). It will be a very long list, so use less/more parameters
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#ps-t-list-all-processes-running-on-current-terminal" class="anchor"&gt;
  &lt;/a&gt;
  ps T: list all processes running on current terminal
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;ps T
    PID TTY      STAT   TIME COMMAND
   5786 pts/0    Ss     0:00 bash
  10216 pts/0    S      0:00 vmstat 5
  12983 pts/0    R+     0:00 ps T
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So in this post we learned different commands to manage background and foreground process. We learned&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-bg-and-fg-to-move-a-job-to-the-background-and-foreground-respectively" class="anchor"&gt;
  &lt;/a&gt;
  - &lt;strong&gt;bg&lt;/strong&gt; and &lt;strong&gt;fg&lt;/strong&gt; to move a job to the background and foreground ##### respectively.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#-jobs-command-to-list-all-the-jobs-active-in-the-current-terminal" class="anchor"&gt;
  &lt;/a&gt;
  - &lt;strong&gt;jobs&lt;/strong&gt; command to list all the jobs active in the current terminal.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#-kill-command-to-kill-a-job" class="anchor"&gt;
  &lt;/a&gt;
  - &lt;strong&gt;kill&lt;/strong&gt; command to kill a job
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#-ps-command-to-see-list-of-all-the-active-and-running-processes" class="anchor"&gt;
  &lt;/a&gt;
  - &lt;strong&gt;ps&lt;/strong&gt; command to see list of all the active and running processes
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#we-also-learned-how-to-start-a-job-in-the-background-using-amp-if-you-want-to-know-real-time-memory-and-cpu-usage-and-control-all-the-processes-running-on-your-system-please-check-my-last-post-httpsshaikhucomhowtomonitorcpuutilizationinlinuxckgcp9gex07g8pas1ees0hz7t" class="anchor"&gt;
  &lt;/a&gt;
  We also learned how to start a job in the background using &lt;strong&gt;&amp;amp;&lt;/strong&gt;. If you want to know real time memory and cpu usage and control all the processes running on your system please check my last post  &lt;a href="https://shaikhu.com/how-to-monitor-cpu-utilization-in-linux-ckgcp9gex07g8pas1ees0hz7t"&gt;https://shaikhu.com/how-to-monitor-cpu-utilization-in-linux-ckgcp9gex07g8pas1ees0hz7t&lt;/a&gt;
&lt;/h5&gt;

</description>
      <category>linux</category>
      <category>ubuntu</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Why Axios Is Awesome (and how to get started with it)</title>
      <author>Nathan Sheets</author>
      <pubDate>Wed, 06 Jan 2021 03:32:07 +0000</pubDate>
      <link>https://dev.to/programmingnate/why-axios-is-awesome-and-how-to-get-started-with-it-2ncj</link>
      <guid>https://dev.to/programmingnate/why-axios-is-awesome-and-how-to-get-started-with-it-2ncj</guid>
      <description>&lt;p&gt;Making HTTP requests can easily get bloated and unnecessarily complex. Sure, you can use jQuery's ajax methods or even jquery.get, but that has its limitations and doesn't fit well with a code base that's heavily based on promises.&lt;/p&gt;

&lt;p&gt;Enter: Axios. Axios is a promise-based HTTP handler that makes your life a thousand times easier. It's very simple to use. For example, an ajax request through jQuery could take up a dozen lines or more, and the more lines of code that aren't abstracted away from you, the more room for error and bugs.&lt;/p&gt;

&lt;p&gt;An axios request can take two primary forms for most uses. The simplest one, for example, a GET request, looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const axios = require('axios');
axios.get('YourURLorEndpointHere');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's a simple get request. The fun part is that that statement on the second line actually returns a promise, so you could handle the response extremely easily. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const axios = require('axios');
axios.get('YourURLorEndpointHere')
  .then(response =&amp;gt; {
    //do something
  })
  .catch(err =&amp;gt; {
    //do something else 
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And you're done. That's it. That's the whole get request, handled and caught.&lt;/p&gt;

&lt;p&gt;Let's say you wanted to make a post request instead, and you wanted to add some options in there. You can also use Axios as a function and give it an object with what ever parameters you want. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;axios({
  method: 'post',
  url: 'yourURLorEndpointHere',
  data: {
    //Your info to send here
  }
})
.then(response =&amp;gt; {
  //do something with the response
})
.catch(err =&amp;gt; {
  //handle any errors
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it. That's what you'd use in 90% of any situations you'll run across, at least for simpler websites. Axios can help you make simpler, easier, and cleaner HTTP requests. &lt;/p&gt;

&lt;p&gt;Bonus: If you don't already use it, Express is a great tool for receiving all those super clean requests you just made!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>7 Tips for Clean Code in JavaScript You Should Know</title>
      <author>Kai</author>
      <pubDate>Tue, 05 Jan 2021 22:00:51 +0000</pubDate>
      <link>https://dev.to/kais_blog/7-tips-for-clean-code-in-javascript-you-should-know-2533</link>
      <guid>https://dev.to/kais_blog/7-tips-for-clean-code-in-javascript-you-should-know-2533</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was originally published at &lt;a href="https://kais.blog/p/7-tips-for-clean-code-in-javascript-you-should-know"&gt;kais.blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's move your learning forward together!&lt;/strong&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=kais_blog"&gt;Follow me on Twitter&lt;/a&gt; for your daily dose of developer tips. Thanks for reading my content!&lt;/p&gt;




&lt;p&gt;As a developer, you'll spend much more time reading code than writing it. That's why it's important to write code that's quick to grasp and easy to maintain. In this post, I want to introduce you to 7 tips that will help you create a clean and robust codebase.&lt;/p&gt;

&lt;p&gt;Please note that these are opinionated guidelines. Some of you may not agree with me. In general, these tips will not be universal. Also, this list is not exhaustive at all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-use-meaningful-names" class="anchor"&gt;
  &lt;/a&gt;
  1. Use meaningful names
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things.&lt;br&gt;
-- Phil Karlton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah, naming things is hard. However, meaningless names will trigger chaos in the long run. Whenever you have to choose a name - be it for a variable, a class, a function or anything else - please use meaningful names. The name should tell you the purpose and context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;❌ Bad&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;su&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;U&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// What the §*{$ is this?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;✔️ Good&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;signup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Ah, now I understand!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-replace-magic-numbers-with-constants" class="anchor"&gt;
  &lt;/a&gt;
  2. Replace magic numbers with constants
&lt;/h2&gt;

&lt;p&gt;What is a magic number? A magic number is a hard coded numeric value. It's an anti-pattern and obscures the developer's intent. Thus, it should be replaced with a constant that describes its purpose. See, you can instantly apply your knowledge from the first tip.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;❌ Bad&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...um, why again do we use `52` here?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;✔️ Good&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DECK_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;DECK_SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// It's about a deck of playing cards.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, you may ask why &lt;code&gt;i = 0&lt;/code&gt; is okay. Well, I'd count this as acceptable use. The intent here is clear - using &lt;code&gt;i&lt;/code&gt; and initializing it with &lt;code&gt;0&lt;/code&gt; is widely known among developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-do-not-use-boolean-flags-to-determine-behavior" class="anchor"&gt;
  &lt;/a&gt;
  3. Do not use boolean flags to determine behavior
&lt;/h2&gt;

&lt;p&gt;Often, you encounter a function that has two very similar behaviors. To switch between those, you might be tempted to simply add a boolean flag. However, this makes your code less readable and harder to understand. Try to split the function into two functions without the flag instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;❌ Bad&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// One eternity later…&lt;/span&gt;

&lt;span class="nx"&gt;loadSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;…&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Wait, what is `true` here? Sync? Async? &lt;/span&gt;
&lt;span class="c1"&gt;// Something else? I'm so forgetful.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;✔️ Good&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadSchemaSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// One eternity later…&lt;/span&gt;

&lt;span class="nx"&gt;loadSchemaSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;…&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Ah, it's the synchronous variant.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-reduce-nesting-in-your-code" class="anchor"&gt;
  &lt;/a&gt;
  4. Reduce nesting in your code
&lt;/h2&gt;

&lt;p&gt;Nesting makes code harder to read and especially harder to understand. With some simple tricks you can reduce nesting to a minimum.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;❌ Bad&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;can&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CREATE_POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Wow, this is deep.&lt;/span&gt;
      &lt;span class="c1"&gt;// Handle request here.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// User is not authorized.&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// User is not authenticated.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;✔️ Good&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// User is not authenticated.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;can&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CREATE_POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// User is not authorized.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// We can safely assume the user&lt;/span&gt;
  &lt;span class="c1"&gt;// is authenticated and authorized.&lt;/span&gt;
  &lt;span class="c1"&gt;// Handle request here.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-make-use-of-newer-language-features" class="anchor"&gt;
  &lt;/a&gt;
  5. Make use of newer language features
&lt;/h2&gt;

&lt;p&gt;JavaScript is constantly changing. This brings you awesome new features that can improve your codebase. You can use destructuring, classes, the async-await syntax, the numeric separator and much more. My favorites are probably the spread-Operator (&lt;code&gt;...&lt;/code&gt;), the optional-chaining operator (&lt;code&gt;?.&lt;/code&gt;) and nullish-coalescing (&lt;code&gt;??&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;❌ Bad&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Assigning a default value should be easier...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Did I mess up? It's nine zeroes, right?&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oneBillion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Deep properties and nesting...urghs&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invoices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;✔️ Good&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Let's use nullish-coalescing (`??`).&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// The numeric separator makes it easy to tell.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oneBillion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;_000_000_000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Here, we can use optional-chaining.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;invoices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-make-your-code-easy-to-refactor" class="anchor"&gt;
  &lt;/a&gt;
  6. Make your code easy to refactor
&lt;/h2&gt;

&lt;p&gt;Refactoring is the restructuring of your code without changing the observable behavior. To make this easy, you should consider writing automated tests. Therefore, you can use testing frameworks like &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;. If you are using automated tests you can verify that your code is behaving like you'd expect.&lt;/p&gt;

&lt;p&gt;Then, you are ready for refactoring. You can change your code however you want. As long as your tests are passing, everything is fine. This should enable you to be confident about your codebase. No more fear that you are accidentally breaking something.&lt;/p&gt;

&lt;p&gt;Unfortunately, setting up a testing framework like Jest is beyond the scope of this article. If you want, I can create a post about testing (and refactoring) your JavaScript code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-use-eslint" class="anchor"&gt;
  &lt;/a&gt;
  7. Use ESLint
&lt;/h2&gt;

&lt;p&gt;This is the final tip of this post. Use this awesome tool called &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt;. It's free and easy to use and surely will improve your codebase. It detects and fixes common problems. Also, you can install useful presets and plugins to detect even more and reformat your code according to a style guide.&lt;/p&gt;

&lt;p&gt;I use ESLint with plugins for &lt;a href="https://github.com/standard/eslint-config-standard"&gt;standard&lt;/a&gt; and &lt;a href="https://github.com/prettier/eslint-config-prettier"&gt;prettier&lt;/a&gt;. Besides, if I'm working with Vue, I'll add &lt;a href="https://github.com/vuejs/eslint-plugin-vue"&gt;eslint-plugin-vue&lt;/a&gt;. Unfortunately, explaining the installation and configuration of ESLint is also beyond the scope of this article. Tell me, if you'd like to hear more about this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-consider-using-typescript" class="anchor"&gt;
  &lt;/a&gt;
  Bonus: Consider using TypeScript
&lt;/h2&gt;

&lt;p&gt;If you've read any of my posts in the past, you might know that I'm using TypeScript, a superset of JavaScript. It's basically JavaScript on steroids and helps you writing more robust and maintainable code. If you are still undecided, take a look at these &lt;a href="https://dev.to/kais_blog/6-reasons-why-you-should-learn-typescript-in-2021-31mi"&gt;6 Reasons Why You Should Learn TypeScript in 2021 &lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There's so much more you can do to create a clean and maintainable codebase. With my post, you should have a overview about small things you can do to improve your code. In the future, I'll publish more content to make you a better programmer.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Let's move your learning forward together!&lt;/strong&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=kais_blog"&gt;Follow me on Twitter&lt;/a&gt; for your daily dose of developer tips. Thanks for reading my content!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was originally published at &lt;a href="https://kais.blog/p/7-tips-for-clean-code-in-javascript-you-should-know"&gt;kais.blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>70+ JavaScript library, frameworks, tools, and plugins</title>
      <author>chinedu | ddevguys</author>
      <pubDate>Tue, 05 Jan 2021 21:19:38 +0000</pubDate>
      <link>https://dev.to/chinedu/70-javascript-library-frameworks-tools-and-plugins-18g1</link>
      <guid>https://dev.to/chinedu/70-javascript-library-frameworks-tools-and-plugins-18g1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#" class="anchor"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2N7-gdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609880051327/-CWQEXQF5.png" alt="stacks post HEADING (1).png"&gt;
&lt;/h2&gt;

&lt;p&gt;Hey and welcome to today's article 😊. &lt;/p&gt;

&lt;p&gt;I decided to put together some JavaScript library, frameworks, tools and plugins.&lt;/p&gt;

&lt;p&gt;Some which I use in my projects. &lt;/p&gt;

&lt;p&gt;If you find them intriguing share it and save it for later.&lt;/p&gt;

&lt;p&gt;Let's go…💃🕺💃🕺💃&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d1ZIRB4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609880068955/HvfpzAePJ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d1ZIRB4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609880068955/HvfpzAePJ.gif" alt="giphy (1).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LIBRARY AND FRAMEWORK'S&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NodeJs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Node.js is an open-source, cross-platform, back-end, JavaScript runtime environment that executes JavaScript code outside a web browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ReactJs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React is an open-source, front end, JavaScript library for building user interfaces or UI components. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VueJs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Vue.js is an open-source model–view–ViewModel front end JavaScript framework for building user interfaces and single-page applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NextJs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next.js is an open-source React front-end development web framework that enables functionality such as server-side rendering and generating static websites for React-based web applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Angular is a TypeScript-based open-source web application framework&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Svelte&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Svelte is a free and open-source front end JavaScript framework&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Redux is an open-source JavaScript library for managing application state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meteor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Meteor, or MeteorJS, is a free and open-source isomorphic JavaScript web framework written using Node.js.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backbone.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Backbone.js is a JavaScript library with a RESTful JSON interface and is based on the model–view–controller application design paradigm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ember.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ember.js is an open-source JavaScript web framework, utilizing a component-service pattern.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;VISUALIZATION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Three.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Three.js is a cross-browser JavaScript library and application programming interface used to create and display animated 3D computer graphics in a web browser using WebGL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;D3.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;D3.js is a JavaScript library for producing dynamic, interactive data visualizations in web browsers. It makes use of Scalable Vector Graphics, HTML5, and Cascading Style Sheets standards.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Victory.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A JavaScript 2D vector maths library for Node.js and the browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chart.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Simple, clean, and engaging HTML5 based JavaScript charts. Chart.js is an easy way to include animated, interactive graphs on your website for free.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React-vis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React-vis is a React visualization library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trading Vuejs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TradingVue.js is a hackable charting lib for traders. You can draw literally ANYTHING on top of candlestick charts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flexmonster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A pivot table component for web reporting, claims to be the most powerful JavaScript tool for visualizing your business data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ApexCharts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ApexCharts is a modern charting library that helps developers to create beautiful and interactive visualizations for web pages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Echarts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A Declarative Framework for Rapid Construction of Web-based Visualization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Charts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Google Charts is an interactive Web service that creates graphical charts from user-supplied information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;amCharts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A go-to library for data visualization. When you don't have time to learn new technologies. When you need a simple yet powerful and flexible drop-in data visualization solution. Includes all basic and advanced chart types, as well as is extendable by additional plugins like Maps and TimeLine.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;ANIMATION LIBRARY&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anime.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Anime.js is a lightweight JavaScript animation library with a simple, yet powerful API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aos&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Animate On Scroll library using CSS3.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Velocity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Velocity is a cross-platform JavaScript library designed to simplify the client-side scripting of website animation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mo.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mo.js is a javascript motion graphics library that is fast, retina-ready, modular and open source.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Popmotion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The animator's JavaScript toolbox. Powerful Support for keyframes, spring, and inertia animations on numbers, colors, and complex strings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ScrollReveal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JavaScript library to animate elements as they scroll into view.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GreenSockJS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GSAP is an industry-standard JavaScript animation library from GreenSock that lets you craft high-performance animations that work in every major browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skrollr&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;skrollr is a parallax scrolling library used to transform, scale, skew, and rotate any element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AniJS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AniJS, Declarative handling library for CSS animations. very beginner-friendly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Typed.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Typed.js is a library that types.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lottie&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Easily add high-quality animation to any native app. Lottie is an iOS, Android, and React Native library that renders After Effects animations in real-time, allowing apps to use animations as easily as they use static images.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;VIDEO LIBRARY&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Video JS is a free and open-source HTML5 video player built with JavaScript and CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Plyr&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Plyr is a simple, lightweight, accessible, and customizable HTML5, YouTube, and Vimeo media player that supports modern browsers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jplayer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jPlayer is a free and open-source JavaScript library developed as a jQuery plugin that facilitates the embedding of web-based media, notably HTML5 audio and video in addition to Adobe Flash-based media.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fit vid.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A lightweight, easy-to-use jQuery plugin for fluid width video embeds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;indigo-player&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Highly extensible, modern, JavaScript video player. Handles MPEG-Dash / HLS / MPEG-4 and is built on top of the HTML5 video element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flowplayer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flowplayer is an online video platform for broadcasters, publishers, and media houses. It gives you top ranking ad fill rates and the best-of-breed live streaming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Popcorn Js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Popcorn.js is an open-source JavaScript library for HTML5 media developers, freely available under the MIT License.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Xgplayer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a web video player library. It has designed a separate, detachable UI component based on the principle that everything is componentized. More importantly, it is not only flexible in the UI layer, but also bold in its functionality: it gets rid of video loading, buffering, and format support for video dependence.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;AUDIO&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Howler.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Howler.js is a JavaScript library that works with Web Audio API by default and falls back to HTML5 Audio when not supported.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tone.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tone.js packs in features for different virtual instruments, sequencers, effects, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wavesurfer.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;wavesurfer.js is an HTML 5 audio player and waveform visualizer, made with JavaScript and Web Audio.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pizzicato.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pizzicato.js is another well-rounded library that provides a feature-packed set of tools to create everything from compositions made up of sample groups to precisely synthesized sounds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sound Manager 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sound Manager 2 is a JavaScript Sound API supporting MP3, MPEG4 and HTML5 audio. Makes it easy to play audio using JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amplitudejs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AmplitudeJS lets you build a fully customizable web audio player Stop being limited by the web browser's audio player design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vexflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Vexflow is a JavaScript library for rendering standard music notation and guitar tablature.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sound js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SoundJS abstracts HTML5 sound implementation, making adding consistent cross-browser sound to your games or rich experiences much easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ejecta&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ejecta is like a Browser without the Browser. It's specially crafted for Games and Animations. It has no DIVs, no Tables, no Forms - only Canvas and Audio elements. This focus makes it fast.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;GAMES&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MelonJS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MelonJS is yet another 2D focused game engine. By including the library into your code, you gain access to all kinds of features required for any game worth its money, such as physics support, collisions, sprites, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pixi.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Superfast HTML 5 2D rendering engine that uses webGL with canvas fallback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phaser&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Phaser is a 2D game framework used for making HTML5 games for desktop and mobile. It is free software and developed by Photon Storm. Phaser uses both a Canvas and WebGL renderer internally and can automatically swap between them based on browser support.s&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Babylon.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Babylon.js is a real time 3D engine using a JavaScript library for displaying 3D graphics in a web browser via HTML5. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Matter.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Matter.js is a 2D physics engine for the web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Egret core&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Egret is a brand new open mobile game and application engine which allows you to quickly build mobile games and apps on Android,iOS and Windows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Melon.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MelonJS is a lightweight yet powerful HTML5 framework designed from the ground up to provide a true plugin-free 'write-once, run-everywhere' gaming platform. melonJS is an open-source project and supported by a community of enthusiasts. See our Gallery for a few examples of games powered by melonJS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crafty&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Crafty is a JavaScript game library that can help you create games in a structured way.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;FORMS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quill&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Module for simple form and input field bindings. Automatically creates hidden input fields for a form and adds submit handling and submit by key. You may also specify your own custom input fields. It creates fields for text, html and delta.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cleave.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cleave.js has a simple purpose: to help you format input text content automatically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery Validation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This jQuery plugin makes simple clientside form validation easy, whilst still offering plenty of customization options. It makes a good choice if you're building something new from scratch, but also when you're trying to integrate something into an existing application with lots of existing markup. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selectize.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Selectize is the hybrid of a textbox and  box. It's jQuery-based and it's useful for tagging, contact lists, country selectors, and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parsley.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Parsley, the ultimate JavaScript form validation library&lt;br&gt;
Validating forms for with this tool for frontend have never been so powerful and easy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fine Uploader&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FineUploader is also simple to use. In the simplest case, you only need to include one JavaScript file. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pickadate.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The mobile-friendly, responsive, and lightweight jQuery date &amp;amp; time input picker.&lt;/p&gt;




&lt;p&gt;Thanks for reading! &lt;/p&gt;

&lt;p&gt;My hope is that after finishing this article you would have tools for creating awesome features with JavaScript in the browser. &lt;/p&gt;

&lt;p&gt;Reach out on  &lt;a href="https://twitter.com/chineduvictor7?s=09"&gt;Twitter&lt;/a&gt;  with some of your personal favorite libraries/frameworks and tools to use. Love you❤️❤️❤️🤓🤓🤓&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>vue</category>
      <category>angular</category>
    </item>
    <item>
      <title>React setState()</title>
      <author>Alexa Gamil</author>
      <pubDate>Tue, 05 Jan 2021 20:28:48 +0000</pubDate>
      <link>https://dev.to/gamil91/react-setstate-59l0</link>
      <guid>https://dev.to/gamil91/react-setstate-59l0</guid>
      <description>&lt;p&gt;As our cohort started learning about React, one of the first concepts we learned is the use of state and props. Without any prior knowledge, it was definitely mind boggling in the beginning. Of course it started sinking in after multiple lab practices. Hopefully you’ll find this blog helpful in making better sense of it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#state-vs-props" class="anchor"&gt;
  &lt;/a&gt;
  State vs Props
&lt;/h2&gt;

&lt;p&gt;Before we move forward, I wanted to differentiate State and Props because honestly it was the first thing I had trouble understanding. &lt;/p&gt;

&lt;p&gt;State is data maintained inside a specific component while Props is data passed in from a parent component. &lt;/p&gt;

&lt;p&gt;The main difference is which component owns that data. Props are read only and can only be updated by the child component IF a callback function is also passed down as props. The callback function will then trigger the upstream update of the parent’s component state. &lt;/p&gt;

&lt;p&gt;Now let’s talk about the function that will update the component’s state.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;setState()&lt;/code&gt; is asynchronous&lt;/li&gt;
&lt;li&gt;pass a function instead of an object if you are doing some kind of calculations based on the actual current state&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;setState()&lt;/code&gt; can accept a callback function&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#setstate" class="anchor"&gt;
  &lt;/a&gt;
  setState()
&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;setState()&lt;/code&gt; is basically making an appointment to update the component’s state. I say appointment, because &lt;code&gt;setState()&lt;/code&gt; is asynchronous. It means calling &lt;code&gt;setState()&lt;/code&gt; will not update EXACTLY after you call it. Look at the example code below :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// this.state.count logs 0 in the first click&lt;/span&gt;
        &lt;span class="c1"&gt;// this.state.count logs 1 after the second click&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You might expect that after clicking the button, &lt;code&gt;handleClick&lt;/code&gt; will update the state and then &lt;code&gt;console.log&lt;/code&gt; “3”, but in fact you will get “0.” Also clicking the button the second time will &lt;code&gt;console.log&lt;/code&gt; “1” Why is this happening? Is it ignoring the other 2 &lt;code&gt;setState()&lt;/code&gt; calls? It is not. &lt;/p&gt;

&lt;p&gt;React intentionally waits and batches &lt;code&gt;setState()&lt;/code&gt; calls for better performance. The main reason behind this is because when a component’s state is altered, the component re-renders in response. This is important, let’s say a click of a button calls a &lt;code&gt;setState()&lt;/code&gt; to a child component AND a &lt;code&gt;setState()&lt;/code&gt; to it’s parent component, you don’t want the child to re-render twice. As your app becomes more complex, it can be very expensive and in turn might cause your browser to become unresponsive. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prevstate" class="anchor"&gt;
  &lt;/a&gt;
  prevState()
&lt;/h4&gt;

&lt;p&gt;Keeping in mind of its asynchronous nature, this makes &lt;code&gt;this.state&lt;/code&gt; unreliable. Going back to our previous example, each &lt;code&gt;setState()&lt;/code&gt; call looks at this.state before it even gets updated. if you are updating state with values that depend on the current state pass a &lt;code&gt;function()&lt;/code&gt; in &lt;code&gt;setState()&lt;/code&gt; instead of an object.&lt;/p&gt;

&lt;p&gt;Tweaking our code from above, look at the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}})&lt;/span&gt;


        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}})&lt;/span&gt;


        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}})&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// this.state.count logs 0 in the first click&lt;/span&gt;
        &lt;span class="c1"&gt;// this.state.count logs 3 after the second click&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Clicking the button the first time will still &lt;code&gt;console.log&lt;/code&gt; “0” but clicking it again the second time and the component re-renders, it will log “3.” You can also use this if you’re updating an existing array or object in state by using the spread operator like so :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;obj3&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;}]}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;sidenote:&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The function above takes the the most updated &lt;code&gt;this.state.arr&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Uses the &lt;code&gt;...&lt;/code&gt; spread operator to make a copy of that arr&lt;/li&gt;
&lt;li&gt;Adds a new object&lt;/li&gt;
&lt;li&gt;Updates state using &lt;code&gt;setState()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The benefit of using a function instead of an object gives us access to the most updated state and will queue the setState() calls so that they run in order. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#callback" class="anchor"&gt;
  &lt;/a&gt;
  Callback()
&lt;/h4&gt;

&lt;p&gt;Now you’re wondering, we’re still getting “0” after our first click.&lt;/p&gt;

&lt;p&gt;Last but not least, how do you access the updated state after &lt;code&gt;setState()&lt;/code&gt; actually does what it’s supposed to do? &lt;code&gt;setState()&lt;/code&gt; can take a callback function. &lt;/p&gt;

&lt;p&gt;Last tweak at the function below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c1"&gt;// this.state.count logs 3&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;//this.state.count logs 0&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The second console.log is outside the scope therefore running before &lt;code&gt;setState()&lt;/code&gt; finishes setting the state, which is why it logs 0. &lt;/p&gt;

&lt;p&gt;Basically the callback function runs AFTER &lt;code&gt;setState()&lt;/code&gt; happens, therefore in this scope giving you access to the most updated state.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt; I hope this somewhat made things clearer. Thank you so much for reading and please reach out to me if you any comments or suggestions.&lt;/p&gt; 

</description>
      <category>react</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Unit, Integration and E2E tests</title>
      <author>Alberto Yanes</author>
      <pubDate>Tue, 05 Jan 2021 19:51:36 +0000</pubDate>
      <link>https://dev.to/betoyanes/unit-integration-and-e2e-tests-37b9</link>
      <guid>https://dev.to/betoyanes/unit-integration-and-e2e-tests-37b9</guid>
      <description>&lt;p&gt;Many of us have surely heard some of these terms in our &lt;strong&gt;life cycle as programmers&lt;/strong&gt;. Our daily life consists of writing code, new functionalities, and requirements, launching to production, and waiting for good news that no problem happened with the new code. There are many ways to achieve that &lt;strong&gt;peace of mind&lt;/strong&gt; that everything will work well, or at least, that what is not related to the new functionality will not be damaged, one of the most effective is to &lt;strong&gt;perform tests on our lines, files, and components&lt;/strong&gt; that are important to the product.&lt;/p&gt;

&lt;p&gt;Regardless of the testing method, pattern, or architecture you choose, the idea of ​​doing it is to &lt;strong&gt;be sure that the code delivery is correct&lt;/strong&gt;, sleep peacefully and have a certain degree of confidence that the PR that you merged 5 minutes ago will not generate possible bugs, or simply be sure of having analyzed all possible spaces/fronts where an error could be generated.&lt;/p&gt;

&lt;p&gt;For example, let's look at the following feature request:&lt;/p&gt;

&lt;p&gt;Our friend Carl, the Product Manager 👷, asks us to make a button that generates a certain action. It sounds easy, right? But what if you forgot to take the correct action or tomorrow a coworker accidentally changes the aesthetics and now instead of a button it looks like a giant unintelligible box? (Believe me, some of you will have gone through something similar for sure 😜)&lt;/p&gt;

&lt;p&gt;This is what I mean by &lt;strong&gt;being sure of your code for the small, medium, and possibly long term&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For each test method, the examples will have as a reference this little module of SumCalculator made in React.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SumCalculator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fooValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;barValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fooValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;barValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Calculator Sum Module&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fooInput"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Foo&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fooInput"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"barInput"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Bar&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"barInput"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#unit-testing" class="anchor"&gt;
  &lt;/a&gt;
  Unit Testing
&lt;/h2&gt;

&lt;p&gt;One of the most classic techniques of our era is unit testing, the concept is quite simple and straightforward, &lt;strong&gt;the idea is to isolate the code as much as possible to be able to perform a unit test in a simple, fast, and efficient way&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What can unit tests be applied to? in theory, any piece of code could apply it, some class, function, line of code, component, you name it! But remember: &lt;strong&gt;the smaller the chunk of code, the better&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This form of testing is one of the most essential tools for any developer, generally, in whatever development life cycle we are in, we should consider unit testing. It brings us great advantages such as making sure to fragment our code as much as possible to facilitate the use of the technique, if it becomes complicated, we know that we will have to give some small adjustments to the code to be able to isolate it as much as possible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;render all elements&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Calculator&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// check if all the elements are rendered&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/calculator sum module/i&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/foo/i&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/bar/i&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/submit/i&lt;/span&gt; &lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#integration-testing" class="anchor"&gt;
  &lt;/a&gt;
  Integration Testing
&lt;/h2&gt;

&lt;p&gt;One of my favorites and extremely important. This technique is &lt;strong&gt;responsible for joining and combining parts of our application that are part of a flow and making sure that the interaction of the parts of our component is correct&lt;/strong&gt;, allowing us to perform at the time of developing the tests if the interactions with the different pieces are correct. &lt;/p&gt;

&lt;p&gt;It is one of the perfect unit testings complements since this method allows us to test the entire flows of the application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should render alert&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Calculator&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// fill out the form&lt;/span&gt;
  &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/foo/i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/bar/i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// submit the form&lt;/span&gt;
  &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/submit/i&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#end-to-end-testing" class="anchor"&gt;
  &lt;/a&gt;
  End to end testing
&lt;/h2&gt;

&lt;p&gt;Finally, the idea is to &lt;strong&gt;test and imitate behaviors that a user would have using our application, interacting with all the possible functionalities from the beginning to the end&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By adding this testing layer to our application, we will make sure to cover possible human interactions that our application may have, preventing bugs due to it. &lt;/p&gt;

&lt;p&gt;Be very careful to confuse end to end with integration. Something that I have seen is that we usually mix these two concepts, although the idea is to test application flows, we can easily differentiate one and the other in that, end to end they run in the browser, unlike integration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Here I'm using Cypress for e2e testing very friendly for JS developers&lt;/span&gt;
&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;render all elements&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/calculator sum module/i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/foo/i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/bar/i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/submit/i&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should render alert&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;window:alert&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fill out the form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/foo/i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/bar/i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit the form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/submit/i&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alert should be called with 10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;window:alert&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Mocha assertions&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, this image is very useful to get an idea of ​​what are the considerations to have when we use each type of test:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QFxP8OCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z6a2p431fvcjz8vz1ypl.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QFxP8OCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z6a2p431fvcjz8vz1ypl.jpeg" alt="unit-integration-tests"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The more you &lt;strong&gt;scale&lt;/strong&gt;, the more &lt;strong&gt;expensive the maintenance and development&lt;/strong&gt; of the tests will be, also, it will be slower since it requires greater requirements to be able to build them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Regardless of the type of test we choose, or we want to combine them, the important thing is to have confidence and certainty that what we have done is safe and that it meets the requirements of said functionality.&lt;/p&gt;

&lt;p&gt;Implementing any type of test provides us with great benefits to our project, it not only generates trust, but it also serves as a code documentation base, helps us identify possible bugs as we generate the code, and many other benefits.&lt;/p&gt;

&lt;p&gt;What has been the type of test that has impacted you the most at work? Do you apply any methodology? How does your work team agree to contemplate this practice in the flow of the application? Leave us a comment!&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://www.linkedin.com/in/alberto-yanes-4056a3133/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/betoxd40"&gt;Twitter&lt;/a&gt;  to up-to-date with my publications 🚀.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>discuss</category>
      <category>javascript</category>
      <category>devlive</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 05 Jan 2021 19:33:42 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-pa0</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-pa0</guid>
      <description>&lt;p&gt;Every Tuesday, we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week. ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2021-resolution-accessibility-full-stop" class="anchor"&gt;
  &lt;/a&gt;
  2021 Resolution: Accessibility. Full Stop.
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/jaketracey"&gt;@jaketracey&lt;/a&gt;
 shares a super helpful roundup of the top resources, development tools, continuous integration, and screen readers you’ll want to take a look at to improve the accessibility of your sites in 2021.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jaketracey" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L_1o_KhJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--UcoDP9eT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/71606/9b0ef0c3-eebd-43e1-aa54-56417155daac.jpg" alt="jaketracey image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jaketracey/the-best-web-accessibility-tools-for-developers-in-2021-8c8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The best web accessibility tools for developers in 2021&lt;/h2&gt;
      &lt;h3&gt;Jake Tracey ・ Jan  3 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#forecast-wordcloudy" class="anchor"&gt;
  &lt;/a&gt;
  Forecast: Word-cloudy
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/alvaromontoro"&gt;@alvaromontoro&lt;/a&gt;
 shared an awesome tutorial for building a word cloud for your blog. As Alvaro said, word clouds are  “a nice way to visualize the overall content of a site or article.”&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alvaromontoro" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ekLisLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--aTV3h--8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/161327/2ff05281-db58-4dcb-946a-4b679e4a266b.jpeg" alt="alvaromontoro image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alvaromontoro/create-a-tag-cloud-with-html-and-css-1e90" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Create a tag cloud with HTML and CSS&lt;/h2&gt;
      &lt;h3&gt;Alvaro Montoro ・ Dec 31 '20 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#philosophies-on-focus" class="anchor"&gt;
  &lt;/a&gt;
  Philosophies on focus
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/carmenhchung"&gt;@carmenhchung&lt;/a&gt;
 learned a few learnings from reading "Deep Work" by Cal Newport. What are you looking to get done in 2021?&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/carmenhchung" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXj7F-mv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ND5yifps--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/235324/df7e2ba6-3c32-47a7-a688-60a1a5c4eebb.jpg" alt="carmenhchung image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/carmenhchung/how-to-improve-your-focus-in-2021-1cce" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to improve your focus in 2021&lt;/h2&gt;
      &lt;h3&gt;Carmen Chung ・ Dec 29 '20 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#developer&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#engineer&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#enter-the-penguin" class="anchor"&gt;
  &lt;/a&gt;
  Enter the penguin
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/lucasmc64"&gt;@lucasmc64&lt;/a&gt;
 explains why Linux is “only a 7-headed monster if you want it to be.”&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lucasmc64" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R_q-Do8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jBnt1qqt--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/459871/496aa294-1c74-43fc-9daf-65e4c7b3f7da.jpeg" alt="lucasmc64 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lucasmc64/linux-the-right-choice-39fj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Linux, the right choice?&lt;/h2&gt;
      &lt;h3&gt;Lucas Marçal Coutinho ・ Jan  3 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ubuntu&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#you-dont-have-to-be-dale-carnegie-to-get-the-attention-of-recruiters" class="anchor"&gt;
  &lt;/a&gt;
  You don’t have to be Dale Carnegie to  get the attention of recruiters
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/shaundai"&gt;@shaundai&lt;/a&gt;
 explains why making use of video was the game-changing prospecting tactic that they attribute their career-switching success to&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/shaundai" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_MjF7Wjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--aJeUw1q7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/255076/b7ce6a16-65c4-4633-9651-b3c378227ccc.png" alt="shaundai image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/shaundai/one-thing-that-made-my-job-application-stand-out-3dik" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;One Thing That Made My Job Application Stand Out&lt;/h2&gt;
      &lt;h3&gt;Shaundai Person ・ Dec 31 '20 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#using-mongoose-and-saved-user-data-to-enable-password-resets" class="anchor"&gt;
  &lt;/a&gt;
  Using Mongoose and saved user data to enable password resets.
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/kelvinvmwinuka"&gt;@kelvinvmwinuka&lt;/a&gt;
 demonstrates how to handle password resets in ExpressJS.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kelvinvmwinuka" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EXpG55Oa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--dcPWoHzk--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/312192/add19cf3-c0c5-4d74-a44a-acb2ea8eaadc.jpeg" alt="kelvinvmwinuka image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kelvinvmwinuka/how-to-handle-password-reset-in-expressjs-ipb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Handle Password Reset in ExpressJS&lt;/h2&gt;
      &lt;h3&gt;Kelvin Mwinuka ・ Jan  1 ・ 13 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#expressjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#its-ok-to-ask-yourself-a-hmmm" class="anchor"&gt;
  &lt;/a&gt;
  “It’s ok to ask yourself a hmmm…”
&lt;/h3&gt;

&lt;p&gt;Yep — Especially when it comes to JavaScript. &lt;a class="comment-mentioned-user" href="https://dev.to/snigo"&gt;@snigo&lt;/a&gt;
 shared a few common JS “tips” that should make you go “hmmm” instead of “sign me up!”&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/snigo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EPWBbfN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--evQKE-Cc--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/383168/a9f6737f-4330-4e0b-8d79-1ed0a10b8781.jpeg" alt="snigo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/snigo/5-javascript-tips-that-might-bite-you-back-2gie" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 JavaScript "tips" that might bite you back.&lt;/h2&gt;
      &lt;h3&gt;Igor Snitkin ・ Jan  1 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Power of ls command</title>
      <author>Fazal ur Rehman</author>
      <pubDate>Tue, 05 Jan 2021 19:08:50 +0000</pubDate>
      <link>https://dev.to/iamfazal/power-of-ls-command-2hja</link>
      <guid>https://dev.to/iamfazal/power-of-ls-command-2hja</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-a-command" class="anchor"&gt;
  &lt;/a&gt;
  what is a command?
&lt;/h1&gt;

&lt;p&gt;The simplest answer is that a command is a software program that, when executed on the CLI, performs any action.&lt;br&gt;
some commands take additional input to run correctly, This input is known as &lt;code&gt;&lt;em&gt;options&lt;/em&gt;&lt;/code&gt; and &lt;code&gt;&lt;em&gt;arguments&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; command [options] [arguments] &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Options are used to modify the behavior of command.&lt;/li&gt;
  &lt;li&gt;Arguments are used to provide additional information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today we'll discuss the fundamentals of &lt;code&gt;ls&lt;/code&gt; command and try to cover some basic parameters. we use this command daily basic and frequently even though we never aware of all the available options.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls&lt;/code&gt;: By itself, the ls command lists files and directories contained in the current working directory.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---n3m_cbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o7jrnrfeqtoaz6cyk73v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---n3m_cbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o7jrnrfeqtoaz6cyk73v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#arguments" class="anchor"&gt;
  &lt;/a&gt;
  Arguments
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;ls&lt;/code&gt; command takes the argument as a name of the directory, it lists the contents of the directory, In the following example, the &lt;em&gt;/etc/dpkg&lt;/em&gt; directory is used as an argument.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bf6duUQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zxdil8m6ttsx62tpc7b4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bf6duUQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zxdil8m6ttsx62tpc7b4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The &lt;code&gt;ls&lt;/code&gt; command also accepts multiple arguments. To list the contents of both the &lt;em&gt;/etc/ppp&lt;/em&gt; and &lt;em&gt;/etc/ssh&lt;/em&gt; directories&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sm4uMdA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t39j6m49vqfe2ub74vfy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sm4uMdA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t39j6m49vqfe2ub74vfy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#options" class="anchor"&gt;
  &lt;/a&gt;
  Options
&lt;/h4&gt;

&lt;p&gt;options used with commands to expend or modify the way a command behaves.&lt;br&gt;
&lt;code&gt;&lt;strong&gt;-a&lt;/strong&gt; :&lt;/code&gt; The &lt;code&gt;ls&lt;/code&gt; command omits hidden files by default. A hidden file is any file(or directory) that begins with a dot &lt;code&gt;.&lt;/code&gt; character. with the used of &lt;code&gt;-a&lt;/code&gt; option we can display all filed including hidden files.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xoYr6Fgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ssfo3d1gjx58rolhxuoh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xoYr6Fgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ssfo3d1gjx58rolhxuoh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;-l&lt;/strong&gt; :&lt;/code&gt; With this option we get results in a long listing, providing additional information about the files that are listed, such as the permission, size, creation date, and other information. &lt;em&gt;(I will try to cover permission in the next post. this is a very important and fundamental part of Linux file system)&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VTaGIkDz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2e5owdjutygpzkb0a9dc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VTaGIkDz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2e5owdjutygpzkb0a9dc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;-h&lt;/strong&gt; :&lt;/code&gt; If the &lt;code&gt;-h&lt;/code&gt; option added with &lt;code&gt;-l&lt;/code&gt; the file sizes will be displayed in human readable order (or you can write full word form; &lt;em&gt;--human-readable&lt;/em&gt;)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rdtgrzeE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dfmgixc2op3rvf445ttu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rdtgrzeE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dfmgixc2op3rvf445ttu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;note: The order of the combined options isn't important. The output of all of these examples would be the same:&lt;/em&gt; &lt;br&gt;
&lt;code&gt;ls -l -h&lt;br&gt;
ls -hl&lt;br&gt;
ls -lh &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;-r&lt;/strong&gt; :&lt;/code&gt; By default ls print the results in ascending alphabetical order, with the help of &lt;code&gt;-r&lt;/code&gt; option we print the result in reverse order.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P8d9xWVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i3rzm7ebsirs25oxf2bc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P8d9xWVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i3rzm7ebsirs25oxf2bc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;-s&lt;/strong&gt; :&lt;/code&gt; To see the file (or directory) size. very use full with flag &lt;code&gt;-h&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--07ItK37y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4cbilidtuaq7kg9yyp4t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--07ItK37y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4cbilidtuaq7kg9yyp4t.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;-S&lt;/strong&gt; :&lt;/code&gt; To sort files by size. it is most useful when used with the &lt;code&gt;-l&lt;/code&gt; option so the file sizes are visible and &lt;code&gt;-h&lt;/code&gt; option to display human-readable file sizes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--928fTL_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7j6trgd653gmra57rg92.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--928fTL_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7j6trgd653gmra57rg92.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;-R&lt;/strong&gt; :&lt;/code&gt; With the help of this flag we can display all of the files in a directory as well as all of the files in all subdirectories under that directory. This is called a &lt;em&gt;recursive listing&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OPWUuD75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cqc2b5b7udi0ztaupmv7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPWUuD75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cqc2b5b7udi0ztaupmv7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;-t&lt;/strong&gt;&lt;/code&gt; Sorted by modified time or created time&lt;br&gt;
&lt;code&gt;&lt;strong&gt;-m&lt;/strong&gt;&lt;/code&gt; List all the files and directories separated with comma&lt;/p&gt;

&lt;p&gt;I hope this article will help you to learn a few options of &lt;code&gt;ls&lt;/code&gt; commands in Linux. Please refer to the manual pages by using the &lt;code&gt; man ls &lt;/code&gt; command to explore in-depth&lt;/p&gt;

&lt;p&gt;Thanks! happy coding :))&lt;/p&gt;

</description>
      <category>linux</category>
      <category>ls</category>
      <category>ubuntu</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How I Became a Senior Software Engineer</title>
      <author>Sun-Li Beatteay</author>
      <pubDate>Tue, 05 Jan 2021 18:47:43 +0000</pubDate>
      <link>https://dev.to/sunnyb/how-i-became-a-senior-software-engineer-4hl2</link>
      <guid>https://dev.to/sunnyb/how-i-became-a-senior-software-engineer-4hl2</guid>
      <description>&lt;p&gt;Ever since I started learning to code, I have dreamed of becoming a senior engineer. Some may think this a bit odd. Shouldn’t my main goal be to get a job first and worry about a promotion later?&lt;/p&gt;

&lt;p&gt;Generally, yes. But, as someone who has changed careers four times in as many years, I didn’t want to simply change my career. I wanted to &lt;em&gt;thrive&lt;/em&gt; in it. And there was no better example of thriving in the tech field than being a senior engineer.&lt;/p&gt;

&lt;p&gt;Senior engineers are the masters of their craft. They are rockstar developers who churn their code at breakneck speeds. They are the pinnacle. Right?&lt;/p&gt;

&lt;p&gt;Well, after years of working and learning, I happy to proclaim that I’ve made it. I am now among those with the coveted &lt;em&gt;senior&lt;/em&gt; title. But you know what the craziest thing is? I’m none of the things I described above.&lt;/p&gt;

&lt;p&gt;Rockstar code-smith producing code at 10X speed? Not quite. I’m your average 1x engineer who has Stack Overflow bookmarked. How does someone like me end up a senior?&lt;/p&gt;

&lt;p&gt;That’s what this article is going to focus on.&lt;/p&gt;

&lt;p&gt;Over the years, I’ve come to realize how propped-up my image of a &lt;em&gt;senior&lt;/em&gt; was. Many articles define the characteristics of a senior developer. Fewer discuss how to become one. I want to address that gap.&lt;/p&gt;

&lt;p&gt;This post will show the steps I took to arrive at this point in my career and dispel some myths that I’ve seen newer engineers, including myself, fall prey to. Keep in mind, this was just my path and is in no way prescriptive, although I do hope it provides some insight.&lt;/p&gt;

&lt;p&gt;So, how did I become a senior software engineer?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-asked" class="anchor"&gt;
  &lt;/a&gt;
  I Asked
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fjq_DEnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/14720/0%2AZGeHCJBGkRNGXmhC" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fjq_DEnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/14720/0%2AZGeHCJBGkRNGXmhC" alt="Photo by [Scott Graham](https://unsplash.com/@sctgrhm?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)"&gt;&lt;/a&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@sctgrhm?utm_source=medium&amp;amp;utm_medium=referral"&gt;Scott Graham&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Seriously, I just asked.&lt;/p&gt;

&lt;p&gt;After my one-year anniversary at the company, I approached my manager. I recapped my accomplishments and expressed my interest in getting to the next level in my career.&lt;/p&gt;

&lt;p&gt;I followed up with a simple question: “How can we make that happen?”&lt;/p&gt;

&lt;p&gt;After that meeting, my manager and I came up with a development plan and within that year, I earned my promotion.&lt;/p&gt;

&lt;p&gt;A trap I see many new developers fall into is believing that our industry is a meritocracy. They believe that they will get what they deserve if they work hard enough. Once they’ve proven their worth, their employer will reward them with a raise or promotion.&lt;/p&gt;

&lt;p&gt;While the tech industry may be more of a meritocracy than other industries, there are countless undervalued developers. I know several myself.&lt;/p&gt;

&lt;p&gt;There are many reasons why engineers may be underpaid and under-leveled. I don’t pretend to understand anyone else’s situation. However, the reason I became a senior is that I pushed for it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GFzY8EnN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/18000/0%2Amx-mNZmjqp_5zbPe" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GFzY8EnN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/18000/0%2Amx-mNZmjqp_5zbPe" alt="Photo by [Tim Mossholder](https://unsplash.com/@timmossholder?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)"&gt;&lt;/a&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@timmossholder?utm_source=medium&amp;amp;utm_medium=referral"&gt;Tim Mossholder&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-how-do-you-know-when-to-ask" class="anchor"&gt;
  &lt;/a&gt;
  But how do you know when to ask?
&lt;/h3&gt;

&lt;p&gt;This is a great question and is also highly subjective. The problem I have with defining “senior engineer” is that each company has its own definition. Taking a blog post to your manager and saying, “according to this, I should be a senior engineer” isn’t going to work.&lt;/p&gt;

&lt;p&gt;The criteria for becoming a senior engineer at a ten-person startup will be different from a FAANG company.&lt;/p&gt;

&lt;p&gt;Luckily, many companies provide detailed criteria for the senior role. This was the case for me. Whenever I made an achievement of note — shipping a new feature, refactoring old code, or handling an incident — I kept a record of it. After a while, my accomplishments began to look like those of a senior engineer. That’s when I knew to ask.&lt;/p&gt;

&lt;p&gt;If your company doesn’t have a clear benchmark, I would suggest talking to your coworkers. Ask other senior engineers what they’re working on, review their code contributions, and/or ask them, “how did you become a senior engineer?” I’m sure you’ll find at least one person willing to talk your ear off about their accomplishments. I’m doing it right now.&lt;/p&gt;

&lt;p&gt;Speaking up for myself and pushing for my own goals was crucial. But, it would’ve been for naught if I didn’t have the proof to back up my value. Which brings me to my second point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-utilized-my-noncoding-strengths" class="anchor"&gt;
  &lt;/a&gt;
  I Utilized My (Non-Coding) Strengths
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--npcy_xnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5214/0%2AyxoLFc60RIvMR9f3" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--npcy_xnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5214/0%2AyxoLFc60RIvMR9f3" alt="Photo by [Clark Tibbs](https://unsplash.com/@clarktibbs?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)"&gt;&lt;/a&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@clarktibbs?utm_source=medium&amp;amp;utm_medium=referral"&gt;Clark Tibbs&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another misconception I see about senior engineers is that they are all masterful programmers. I’ll be the first to admit that I’m a pretty average coder. I know a thing or two about a thing or two, but I won’t be winning any awards any time soon.&lt;/p&gt;

&lt;p&gt;But being a senior isn’t about being a code-smith. As Patrick McKenzine wrote in &lt;a href="https://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/"&gt;Don't Call Yourself A Programmer, And Other Career Advice&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Engineers are hired to create business value, not to program things.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s all about providing value to the business. As an engineer, a lot of the value you bring will be a direct result of the code you write, but there are other ways, too. Each of us has different strengths other than coding. Utilizing those other skills can help you stand out.&lt;/p&gt;

&lt;p&gt;For me, it came in the form of writing, speaking, and teaching.&lt;/p&gt;

&lt;p&gt;During my first year at the company, I had difficulty understanding how the system worked. Hundreds of moving parts, combined with halfway-refactored services, made for an opaque structure. While our code base wasn’t old by any means, it had its fair share of tech debt with which we were still grappling.&lt;/p&gt;

&lt;p&gt;Many of my coworkers felt this same struggle, though not all. There was a mental fissure in the engineering organization. Several engineers dated back to the company’s founding and knew it’s historical baggage. However, there were even more engineers that didn’t. The knowledge gap was a divide that was widening with every new hire.&lt;/p&gt;

&lt;p&gt;So, unable to piece things together myself, I began talking with my tenured coworkers. I asked them how the technology worked and how it had evolved. What trade-offs were made, and what role did each team play in the system? Some of these conversations lasted for hours.&lt;/p&gt;

&lt;p&gt;Through these discussions, my mental model formed and solidified. I had obtained the coveted knowledge that so many of my coworkers sought. The trouble was that it was all trapped in my head, which didn’t benefit anyone except me.&lt;/p&gt;

&lt;p&gt;That’s when I realized what value I could provide! I was in a unique position to fill the knowledge gap. By putting pen to paper, I recorded the company’s technical history. From it’s founding to the present day, covering the technical decisions, trade-offs made, and tech debt accumulated.&lt;/p&gt;

&lt;p&gt;While I’ve never won an award for my coding, my writing is a different story.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JNN8t8Xj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/7594/0%2ANQClM7Kz1-aCgoYq" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JNN8t8Xj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/7594/0%2ANQClM7Kz1-aCgoYq" alt="Photo by [Pereanu Sebastian](https://unsplash.com/@sebastian123?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)"&gt;&lt;/a&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@sebastian123?utm_source=medium&amp;amp;utm_medium=referral"&gt;Pereanu Sebastian&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I interviewed senior and staff engineers past and present, and one of the founders. What started as an internal document blossomed into a &lt;a href="https://www.digitalocean.com/blog/from-15-000-database-connections-to-under-100-digitaloceans-tale-of-tech-debt"&gt;public article&lt;/a&gt; and a tech talk. It has aided in onboarding newer engineers, as well as &lt;a href="https://www.reddit.com/r/programming/comments/elv5dd/from_15000_database_connections_to_under_100/?utm_source=share&amp;amp;utm_medium=web2x"&gt;giving back to the developer community&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I received accolades from many of those who viewed it, including the VP of Engineering, the Head of Product, and CTO. For a mid-level engineer, that level of attention was foreign but exhilarating. It also played a key factor in my future promotion.&lt;/p&gt;

&lt;p&gt;This is not to say that everyone has to write a blog post, that’s just what I did. There are always ways to stand out and add value. If you’re a coding savant, then let your code speak. But if you’re a mortal like the rest of us, then play to your other strengths.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-became-essential-to-my-team" class="anchor"&gt;
  &lt;/a&gt;
  I Became Essential to My Team
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i7PUe-Em--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/12000/0%2AJ-SXuypppW3wJL9r" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i7PUe-Em--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/12000/0%2AJ-SXuypppW3wJL9r" alt="Photo by [Marvin Meyer](https://unsplash.com/@marvelous?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)"&gt;&lt;/a&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@marvelous?utm_source=medium&amp;amp;utm_medium=referral"&gt;Marvin Meyer&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I had always thought of senior engineers as code machines. They were the ones finishing the most tickets, shipping the most features, and writing the most code. Imagine my disappointment when I realized that, along with being an average coder, I’m also a remarkably average producer.&lt;/p&gt;

&lt;p&gt;However, I’ve come to learn an important lesson. While speed is nice, consistency is just as important. And what I lack in speed, I make up for in consistency. The tickets to which I commit myself, I finish. I don’t shy away from giving estimates. And if I get blocked, I update my manager and stakeholders and let them know how long I’ll be delayed.&lt;/p&gt;

&lt;p&gt;In other words, I’m a reliable team member. I’m honest about what I can accomplish, and even more important, with what I can’t. I do my best to support my team and make their lives easier. This extends to emergencies as well.&lt;/p&gt;

&lt;p&gt;Last year, my tech lead messaged me out of the blue to let me know that our metering service wasn’t working properly. A bug was merged into production that was preventing usage from being recorded. When I asked when the bug had been introduced, my heart sank when my lead responded with “over a week ago.”&lt;/p&gt;

&lt;p&gt;This was a major problem. The system that we relied on for accurate billing had been down for over a week. No one knew why and how we hadn’t detected it earlier. To make things worse, the engineer who had built the service, and knew all its ins and outs, had left the company.&lt;/p&gt;

&lt;p&gt;We needed to get the service back up and running as soon as possible. Not only that, but we also needed to backfill multiple weeks worth of usage data. With my tech lead in emergency meetings and the only senior engineer on my team unavailable, the task fell to me.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D8jF-xh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/7040/0%2A7zcJ_89TXNUYuL5b" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D8jF-xh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/7040/0%2A7zcJ_89TXNUYuL5b" alt="Photo by [Tonik](https://unsplash.com/@thetonik_co?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)"&gt;&lt;/a&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@thetonik_co?utm_source=medium&amp;amp;utm_medium=referral"&gt;Tonik&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Even though I didn’t cause the bug nor did I write the impacted service, I took ownership of the situation. I identified the bug, made the patch, and, crafted a solution for fetching the missing data. I also kept in constant communication with stakeholders, letting them know of updates, and assisting in the postmortem. When my team was in trouble, I stepped up.&lt;/p&gt;

&lt;p&gt;But, I didn’t stop there. The experience had been so stressful that I vowed it wouldn’t happen again. I improved the tests, health checks, and added more substantial alerting. If something were to go wrong again, we would know about it immediately.&lt;/p&gt;

&lt;p&gt;These added measures are what caught the attention of my director. He told me that mistakes happen — even mistakes that result in lost revenue. Ensuring those mistakes never happen again improves the team as a whole. And sure enough, my team has not had an issue with that service since.&lt;/p&gt;

&lt;p&gt;Becoming a senior engineer, for me, was realizing that reliability is essential. The more dependable I am, the more my manager and the team will trust me. The added authority and responsibility that comes with a senior title can only be earned through trust. And trust can only be built over time through consistency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJuMg2my--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5610/0%2Apr8GkG8e4On8ejVX" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJuMg2my--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5610/0%2Apr8GkG8e4On8ejVX" alt="A meaningless sign — Photo by [Micaela Parente](https://unsplash.com/@mparente?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)"&gt;&lt;/a&gt;&lt;em&gt;A meaningless sign — Photo by &lt;a href="https://unsplash.com/@mparente?utm_source=medium&amp;amp;utm_medium=referral"&gt;Micaela Parente&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A parting thought: Titles are meaningless.&lt;/p&gt;

&lt;p&gt;However, they do signify growth and progress, which is what many of us seek in our careers. The money doesn’t hurt either.&lt;/p&gt;

&lt;p&gt;Don’t seek the senior role just for the sake of a new title. Trust me, it won’t change anything. You might have some extra responsibilities and a slight uptick in recruiter emails, but you’ll be the same engineer you were before.&lt;/p&gt;

&lt;p&gt;Growth and self-improvement should be your real goal. If you focus on mastery, the titles and accolades will come along the way. But don’t forget to trust your worth and advocate for yourself — don’t wait for someone else to do it for you.&lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>firstyearincode</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Every developer is self taught</title>
      <author>Sarah 🦄</author>
      <pubDate>Tue, 05 Jan 2021 18:42:42 +0000</pubDate>
      <link>https://dev.to/sarahob/every-developer-is-self-taught-1oal</link>
      <guid>https://dev.to/sarahob/every-developer-is-self-taught-1oal</guid>
      <description>&lt;p&gt;I know this might be a "hot take" (or whatever the kids call it) but hear me out. I see a lot in the tech community about college vs. self-taught. This got me thinking. Reflecting on my own path it's not as straight forward as one or the other.&lt;/p&gt;

&lt;p&gt;I have a degree in Business Information Systems. My degree gave me a broad range of skills and exposure to different areas of IT. In my final year I was able to focus on programming and took all the programming related modules. When I graduated I took a graduate Java Software Engineer role. That was in 2012.&lt;/p&gt;

&lt;p&gt;Today I'm a JavaScript engineer. I build interactive web apps, and love CSS and web animations. How did I get to this point? I taught myself*.&lt;/p&gt;

&lt;p&gt;I knew very little about the web even after my four year degree. I took one web development module in first year and after four years it was pretty outdated. At this role I became fascinated with the web. A colleague who shared my interest inspired me to try it out for myself. Once I got started I realised this was it for me. This was the path I wanted to follow.  By day, I wrote Java code but I spent my spare time learning everything I could about web development. I created small projects, read books and watched videos.&lt;/p&gt;

&lt;p&gt;After about 7 months I decided to take a leap. I applied for a Web engineer role in another company. The role asked for someone proficient in JavaScript. I remember feeling nervous before the interview. I didn't &lt;em&gt;know&lt;/em&gt; JavaScript did I? I was never taught it so I couldn't &lt;em&gt;know&lt;/em&gt; it. I went for it anyway. To my delight (and surprise) I passed the assessment and got the job.&lt;/p&gt;

&lt;p&gt;Once I was in the door I faced a new challenge. A UI framework called ExtJS, which at the time to me was a complete unknown. Up to this point I had only been playing with vanilla Javascript and a little jQuery. I felt out of my depth but also very excited. I read the documentation page by page. I made practice projects, I experimented with the app and tried to use concepts I had learned. A couple months into the role a new Senior Web developer joined the team. He was a talented engineer and very proficient in JavaScript. I reached out and he became my mentor. We paired a lot and he helped me understand different concepts and all the JavaScript quirks. From there my confidence started to grow, as well as my skills.&lt;/p&gt;

&lt;p&gt;Every year since then I've had to learn something new, D3.js, Angular.js, Angular 2, React and so on. And not only different libraries but also different concepts. MVC, MVVM, Components. Tech is always changing. The web is always changing. We have to keep learning to keep up with it. At times it can be overwhelming. It's also (&lt;em&gt;at least for me&lt;/em&gt;) what keeps it interesting and one of the things I love about the web.&lt;/p&gt;

&lt;p&gt;So at this point being self taught or having a degree doesn't matter. Yes having a degree helps you get in the door. It's not right but that's the way it is at most places. But things are changing. Companies are realising it's not about the paper it's about the practice. It's about the commitment you put into it.&lt;/p&gt;

&lt;p&gt;Choosing college or not is a very personal decision. College offers a lot more than just the paper at the end. It's an experience and it's not for everyone. The main thing is to keep learning and keep building, get yourself a mentor, and put yourself out there. Because in the end we are all self taught developers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I taught myself but could not have done it without the help of many others. Mentors and other colleagues and especially the amazing content available online.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>beginners</category>
      <category>career</category>
      <category>discuss</category>
    </item>
  </channel>
</rss>
