<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learning Python Like a Pro in 2022: Getting Started</title>
      <author>Emma Donery</author>
      <pubDate>Fri, 07 Jan 2022 11:13:34 +0000</pubDate>
      <link>https://dev.to/emma_donery/learning-python-like-a-pro-in-2022-getting-started-28d</link>
      <guid>https://dev.to/emma_donery/learning-python-like-a-pro-in-2022-getting-started-28d</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3qOx53XU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4l3daufx71ybir2e6xa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3qOx53XU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4l3daufx71ybir2e6xa.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python has become one of the most famous programming language in the world. In this article, you will get a hands on introduction in python programming language. Whether you're new to programming or an experienced developer, this article can help you get started with Python easily. So lets jump right in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-python"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is python&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Python is a simple, general purpose, high level, and object-oriented programming language founded by Guido Van Rossum.&lt;/p&gt;

&lt;p&gt;Python is also an interpreted programming language, this means that as a developer you write Python (.py) files in a text editor and then put those files into the python interpreter to be executed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-python"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features of python&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Easy to use and Learn&lt;/li&gt;
&lt;li&gt;Expressive Language&lt;/li&gt;
&lt;li&gt;Interpreted Language&lt;/li&gt;
&lt;li&gt;Object-Oriented Language&lt;/li&gt;
&lt;li&gt;Open Source Language&lt;/li&gt;
&lt;li&gt;Extensible&lt;/li&gt;
&lt;li&gt;Learn Standard Library&lt;/li&gt;
&lt;li&gt;GUI Programming Support&lt;/li&gt;
&lt;li&gt;Integrated&lt;/li&gt;
&lt;li&gt;Embeddable&lt;/li&gt;
&lt;li&gt;Dynamic Memory Allocation&lt;/li&gt;
&lt;li&gt;Wide Range of Libraries and Frameworks&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Installation&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Many PCs and Macs will have python already installed. To check whether python is installed on your system, enter the following command on your terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If not installed: Then you can download it for free from the following &lt;a href="https://www.python.org/"&gt;website&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-versions-python-2-vs-python-3"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Python versions: Python 2 vs. Python 3&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The two versions Python 2 and Python 3 are very much different from each other. I will not dive deep into the differences between the two. However, for the sake of this article, we will be using python 3 which is the most recent version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applications-of-python"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Applications of Python&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Data Science&lt;/li&gt;
&lt;li&gt;Date Mining&lt;/li&gt;
&lt;li&gt;Desktop Applications&lt;/li&gt;
&lt;li&gt;Console-based Applications&lt;/li&gt;
&lt;li&gt;Mobile Applications&lt;/li&gt;
&lt;li&gt;Software Development&lt;/li&gt;
&lt;li&gt;Artificial Intelligence&lt;/li&gt;
&lt;li&gt;Web Applications&lt;/li&gt;
&lt;li&gt;Enterprise Applications&lt;/li&gt;
&lt;li&gt;3D CAD Applications&lt;/li&gt;
&lt;li&gt;Machine Learning&lt;/li&gt;
&lt;li&gt;Computer Vision or Image Processing Applications.&lt;/li&gt;
&lt;li&gt;Speech Recognitions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt;There are many IDEs to run our python project.However in these series of articles, i will be using visual stusio code to write and run our projects. There are great tools out there to run python programs, you can test them out. You can use any other editor or IDE that you prefer.&lt;/p&gt;

&lt;p&gt;To install Visual studio code, visit their &lt;a href="https://code.visualstudio.com/"&gt;website&lt;/a&gt; and follow the guidelines&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This article was basically giving a brief intro on what is python, its features and application. I am making a series on "Learning Python Like a Pro in 2022" and on my next article i will be tackling on the basics of Python.&lt;/p&gt;

&lt;p&gt;In the mean time feel free to connect with me on &lt;a href="https://twitter.com/Emma_Donery"&gt;twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/emma-donery-0831a7188/"&gt;linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you om the next article! Happy reading😊&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>6 Top Cloud Cost Optimization Issues to Solve in 2022</title>
      <author>CAST AI</author>
      <pubDate>Fri, 07 Jan 2022 10:55:47 +0000</pubDate>
      <link>https://dev.to/castai/6-top-cloud-cost-optimization-issues-to-solve-in-2022-31h</link>
      <guid>https://dev.to/castai/6-top-cloud-cost-optimization-issues-to-solve-in-2022-31h</guid>
      <description>&lt;p&gt;New Year is when people tend to make resolutions for the 365 days to come, like eating more veg, exercising more often, or cutting down on cloud costs.&lt;/p&gt;

&lt;p&gt;The latter makes the list as the top initiative for companies for the fifth year in a row. &lt;strong&gt;According to the 2021 State of the Cloud Report, over 60% of organizations planned to optimize their cloud costs. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So what goes wrong, and why do so many engineering teams struggle with cloud optimization? &lt;/p&gt;

&lt;p&gt;Read on to discover the most common issues that make us waste cloud resources, time, and money, and find out proven solutions to them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this guide, you will find:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-is-cloud-cost-optimization-so-challenging"&gt;Why is cloud cost optimization so challenging?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#the-6-top-cloud-cost-optimization-problems-to-fix-in-2022"&gt;The 6 top cloud cost optimization problems to fix in 2022&lt;/a&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href="#still-getting-lured-by-reservations-and-savings-plans"&gt;Still getting lured by savings plans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#falling-into-the-trap-of-overprovisioning"&gt;Falling into the trap of overprovisioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-haunted-by-orphaned-cloud-resources"&gt;Getting haunted by orphaned cloud resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#managing-drops-and-spikes-in-demand-inefficiently"&gt;Not managing drops and spikes in demand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#not-tapping-into-the-opportunity-of-spot-instances"&gt;Not tapping into the opportunity of spot instances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#delaying-the-adoption-of-automated-cloud-optimization"&gt;Delaying the adoption of automated cloud optimization&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="why-is-cloud-cost-optimization-so-challenging"&gt;Why is cloud cost optimization so challenging?&lt;/h2&gt;

&lt;p&gt;The pay-per-use model of the public cloud has brought more freedom to engineering teams, but this freedom comes at a price. Surprisingly hefty at times, as cloud bill stories from companies like &lt;a href="https://www.theinformation.com/articles/how-pinterest-learned-to-control-cloud-costs"&gt;Pinterest&lt;/a&gt; demonstrate. &lt;/p&gt;

&lt;p&gt;Research proves that most organizations struggle to handle their growing cloud expenses. A typical public cloud spend exceeded budget by an average of 24%.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;There are many reasons why it’s still taking place. These often boil down to low cost visibility, &lt;a href="https://cast.ai/blog/ultimate-cloud-pricing-comparison-aws-vs-azure-vs-google-cloud-in-2021/"&gt;complex cloud pricing&lt;/a&gt;, and issues with estimating future demand. All these issues may be clouding how much you’re spending and will need to spend (pun intended). &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Cloud providers aren’t exactly helping to reduce costs either. Merely deciphering a cloud bill can be daunting. It can be so intimidating that some teams choose to leave their cloud bill to surprise them at the end of the month. &lt;/p&gt;

&lt;p&gt;If you don’t want to leave your cloud expenses to fate, read on! &lt;/p&gt;

&lt;h2 id="the-6-top-cloud-cost-optimization-problems-to-fix-in-2022"&gt;The 6 top cloud cost optimization problems to fix in 2022&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6U4LvbCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2022/01/CMKT-1-1200x628-Twitter.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6U4LvbCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2022/01/CMKT-1-1200x628-Twitter.png" alt="cloud cost optimization issues" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="still-getting-lured-by-reservations-and-savings-plans"&gt;#1: Still getting lured by reservations and savings plans&lt;/h3&gt;

&lt;p&gt;The first thing that comes to mind when thinking of saving on the cloud is to pay less for the services your team uses. Companies choose savings plans or reservations because they come with substantial discounts compared to the on-demand pricing model.&lt;/p&gt;

&lt;p&gt;It sounds great to pay upfront for a seemingly predictable cloud spend. &lt;/p&gt;

&lt;p&gt;But if you look closely, you'll see that rather than solving the problem, you’re getting a discount on the issue and committing to it for another few years.&lt;/p&gt;

&lt;h4 id="so-where-s-the-catch"&gt;So where’s the catch? &lt;/h4&gt;

&lt;p&gt;Do you remember how Pinterest had committed to $170 million worth of AWS services in advance but then had to splash out an additional $20 million for extra resources?&lt;/p&gt;

&lt;p&gt;Their story helps to illustrate the fact that &lt;strong&gt;knowing how much capacity you’ll need&lt;/strong&gt; in one to three years from now is a tall order.&lt;/p&gt;

&lt;p&gt;By committing to one provider for so long, you lose flexibility, get locked in, and may have to pay a hefty price for changing requirements. &lt;/p&gt;

&lt;h4 id="how-to-deal-with-savings-plans"&gt;How to deal with savings plans? &lt;/h4&gt;

&lt;p&gt;Well, the best solution is to &lt;a href="https://cast.ai/blog/do-aws-reserved-instances-and-savings-plans-really-reduce-costs/"&gt;avoid savings plans&lt;/a&gt; altogether! &lt;/p&gt;

&lt;p&gt;Don’t purchase resources in advance, but consider approaches that solve the cloud spend like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rightsizing&lt;/li&gt;
&lt;li&gt;Autoscaling&lt;/li&gt;
&lt;li&gt;Bin packing&lt;/li&gt;
&lt;li&gt;Resource scheduling. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="falling-into-the-trap-of-overprovisioning"&gt;#2: Falling into the trap of overprovisioning&lt;/h3&gt;

&lt;p&gt;Overprovisioning takes place when your team chooses resources larger than what you actually need to run your workloads. There is a mindset of safety behind this, as no one wants disruptions in the operation of their apps. &lt;/p&gt;

&lt;p&gt;In some business setups, &lt;strong&gt;teams are used to getting more resources than their workloads need ‘just in case’&lt;/strong&gt;. Although performance-wise this approach can make perfect sense to engineers, it takes its toll on cloud waste and costs. &lt;/p&gt;

&lt;h4 id="what-s-wrong-with-overprovisioning"&gt;What’s wrong with overprovisioning? &lt;/h4&gt;

&lt;p&gt;The simplest answer is that it leads to cloud waste and unnecessary expenses that can spiral out of control.&lt;/p&gt;

&lt;p&gt;Making overprovisioning a habit in your team is a bad idea in the long run. If you get used to selecting an instance bigger than what your workload needs just to stay on the safe side, think how this plays out as your company and apps grow. You’ll be in for a bill that will cost you an arm and a leg. &lt;/p&gt;

&lt;p&gt;Wouldn't it be better to spend this money on something that matters? For instance, on tackling the climate crisis–a problem to which, by the way, overprovisioning is adding to. &lt;/p&gt;

&lt;h4 id="how-to-deal-with-overprovisioning"&gt;How to deal with overprovisioning?&lt;/h4&gt;

&lt;p&gt;The usual approach was to invest in custom monitoring and cost management solutions. Their rightsizing recommendations can help reduce your reliance on overprovisioned resources, but you still need to implement them manually. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Another solution is automation. Automated rightsizing can choose the most appropriate instance types and sizes that meet your application’s requirements while keeping costs down. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Whenever a cluster needs extra nodes, the AI-driven instance selection algorithm picks the resources that achieve maximum performance. &lt;/p&gt;

&lt;p id="wisepops-analyzer-instances"&gt;And the best thing is that your team doesn't have to lift a finger as it all happens automatically. &lt;/p&gt;

&lt;p&gt;Since overprovisioning is interwoven in the culture of many organizations, it’s essential to build cost optimization routines to balance performance, reliability, and cost. Automation can be a significant step forward on the road to a wider organizational change. &lt;/p&gt;

&lt;h3 id="getting-haunted-by-orphaned-cloud-resources"&gt;#3: Getting haunted by orphaned cloud resources&lt;/h3&gt;

&lt;p&gt;It’s easy to spin up an instance for a project and then forget to shut it down. &lt;/p&gt;

&lt;p&gt;As a result, many teams struggle with orphaned instances that have no ownership but still continue to generate costs. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Remember &lt;a href="https://www.teampay.co/insights/manage-cloud-costs/"&gt;Adobe&lt;/a&gt;’s mistake, which racked up $80,000 a day in unplanned Azure charges? That’s the type of issue you certainly want to avoid. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This problem is particularly acute in large organizations with numerous initiatives taking place simultaneously, with no centralized resource visibility.  &lt;/p&gt;

&lt;p&gt;Initiatives managed outside of and without the knowledge of the IT department (shadow IT) can account for 40% of all IT spending at a company. In addition, research shows that &lt;a href="https://track.g2.com/resources/shadow-it-statistics"&gt;shadow cloud usages&lt;/a&gt; can be 10x the size of known cloud usage. &lt;/p&gt;

&lt;h4 id="what-s-wrong-with-orphaned-cloud-resources"&gt;What’s wrong with orphaned cloud resources?&lt;/h4&gt;

&lt;p&gt;Orphaned cloud resources stand for money down the drain with &lt;a href="https://thenewstack.io/can-reducing-cloud-waste-help-save-the-planet/"&gt;complex sustainability implications&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In short, data centers gobble up a lot of electricity and hardware, &lt;strong&gt;contributing significantly to the carbon footprint of the ICT industry&lt;/strong&gt;. The amount of energy they require doubles every four years, and every new region opening from providers like AWS or Azure contributes to this issue. &lt;/p&gt;

&lt;p&gt;That’s why reducing cloud waste is key to halting unnecessary spending and related carbon footprint. &lt;/p&gt;

&lt;h4 id="how-to-deal-with-this-challenge"&gt;How to deal with this challenge?&lt;/h4&gt;

&lt;p&gt;Ensuring that you only run the resources you truly need may be challenging, especially in large organizations. &lt;/p&gt;

&lt;p&gt;But how do you identify and retire unused instances? That’s where automation comes to the rescue again. &lt;/p&gt;

&lt;p&gt;Automated cloud optimization solutions can &lt;strong&gt;constantly scan your usage for inefficiencies &lt;/strong&gt;and compact resources whenever possible. They can also shut down unused instances and processes to reduce your cloud costs. &lt;/p&gt;

&lt;h3 id="managing-drops-and-spikes-in-demand-inefficiently"&gt;#4: Managing drops and spikes in demand inefficiently&lt;/h3&gt;

&lt;p&gt;Engineers building e-commerce infrastructure are well aware of how fast things can change. For example, a single influencer mention can mean millions in new sales or a website that goes down from the surge in traffic.&lt;/p&gt;

&lt;p&gt;Most other applications also experience changes in usage over time, but striking a balance between expenses and performance remains an ongoing struggle. &lt;/p&gt;

&lt;h4 id="what-s-wrong-with-this"&gt;What’s wrong with this?&lt;/h4&gt;

&lt;p&gt;Traffic spikes can generate a massive and unforeseen cloud bill if you leave your tab open or cause your app to crash if you put strict limits over its resources. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When demand is low, you run the risk of overpaying. And when demand is high, the service you offer to customers may be poor.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, there are cloud cost management solutions monitoring your usage, alerting you in real-time if it exceeds set levels or if there are any anomalies. Such tools can provide you with useful recommendations on adjusting your cloud resources to your current demand.  &lt;/p&gt;

&lt;p&gt;However, scaling your cloud capacity manually is difficult and time-consuming. &lt;/p&gt;

&lt;p&gt;Apart from keeping track of everything that happens in the system, you usually need to take care of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Gracefully handling traffic spikes and drops&lt;/strong&gt; – and scaling resources up and down for each virtual machine across all services you use; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ensuring that changes applied to one workload&lt;/strong&gt; don’t cause any problems in other workloads; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Configuring and managing resource groups&lt;/strong&gt; on your own to guarantee that they contain resources suitable for your workloads.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="how-to-fix-this-issue"&gt;How to fix this issue?&lt;/h4&gt;

&lt;p&gt;That’s another area where cloud automation can come into play and help you save big on time and money. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://cast.ai/blog/guide-to-kubernetes-autoscaling-for-cloud-cost-optimization/"&gt;Autoscaling &lt;/a&gt;can automatically handle all the tasks listed above and keep cloud costs at bay. If you use the container orchestrator Kubernetes, you can benefit from three built-in mechanisms for that.  &lt;/p&gt;

&lt;ul&gt;&lt;li&gt;
&lt;strong&gt;Horizontal Pod Autoscaler&lt;/strong&gt; (HPA) adds or removes pod replicas to match your app’s changing usage. It monitors your application to understand if the number of their replicas should change and calculates if removing or adding them would bring the current value closer to the target.&lt;/li&gt;&lt;/ul&gt;





&lt;ul&gt;&lt;li&gt;
&lt;strong&gt;Vertical Pod Autoscaler&lt;/strong&gt; (VPA) increases and reduces CPU and memory resource requests to better align your allocated cluster resources with actual usage. &lt;/li&gt;&lt;/ul&gt;





&lt;ul&gt;&lt;li&gt;
&lt;strong&gt;Cluster Autoscaler&lt;/strong&gt; alters the number of nodes in a cluster on supported platforms. If it identifies a node with pods that can be rescheduled to other nodes in the cluster, it evicts them and removes the spare node.&lt;/li&gt;&lt;/ul&gt;





&lt;p&gt;In solutions like CAST AI, you only need to define your horizontal and vertical autoscaling policies, and the autonomous optimization tool will handle the rest for you.&lt;/p&gt;





&lt;h3 id="not-tapping-into-the-opportunity-of-spot-instances"&gt;#5: Not tapping into the opportunity of spot instances&lt;/h3&gt;





&lt;p&gt;Cloud service providers sell their unused capacity at massively reduced prices, especially if you compare the cost with their regular on-demand offer. &lt;/p&gt;





&lt;p&gt;In AWS, spot instances are available at up to a 90% discount. &lt;/p&gt;





&lt;h4 id="what-s-tricky-about-spot-instances"&gt;What’s tricky about spot instances?&lt;/h4&gt;





&lt;p&gt;Since you bid on spare computing resources, you never know how long these capacities will stay available. There are spot instances that come with a predefined duration; for example, AWS offers a type that gives you an uninterrupted time guarantee of up to 6 hours.  &lt;/p&gt;





&lt;p&gt;But other than that, providers can reclaim the spot instance you’re using, &lt;strong&gt;giving you as short of notice as 30 seconds to 2 minutes&lt;/strong&gt;. &lt;/p&gt;





&lt;p&gt;That’s not enough time for a human to react. Creating a new VM also takes more time than that, so you’re looking at a risk of potential downtime. &lt;/p&gt;





&lt;p&gt;That’s why if you decide to use spot instances, you need to accept the fact that interruptions are bound to occur. They clearly aren’t the right choice for workloads that are critical or can’t tolerate them.&lt;/p&gt;





&lt;h4 id="how-to-deal-with-this-challenge"&gt;How to deal with this challenge?&lt;/h4&gt;





&lt;p&gt;Despite risks, spot instances work great for services that are stateless and can be scaled out, i.e. have more than one replica. Luckily, most services are stateless in modern architectures, as Kubernetes was designed for this type of setup.&lt;/p&gt;





&lt;p&gt;&lt;strong&gt;Here’s what the &lt;/strong&gt;&lt;a href="https://cast.ai/blog/how-to-reduce-cloud-costs-by-90-spot-instances-and-how-to-use-them/"&gt;&lt;strong&gt;process of working with spot instances&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; can look like: &lt;/strong&gt;&lt;/p&gt;





&lt;ol&gt;
&lt;li&gt;You need to qualify your workloads and how well it handles interruptions. &lt;/li&gt;
&lt;li&gt;Then you should examine the instances your vendor has on offer and pick the ones that will work best for your needs. A rule of thumb is to choose less popular instances and check their interruption frequency.&lt;/li&gt;
&lt;li&gt;Now it's time to set the maximum bid strategically to avoid potential interruption if the price goes up. &lt;/li&gt;
&lt;li&gt;You may also want to consider managing spot instances in groups and request multiple types to increase your chances of getting them filled. &lt;/li&gt;
&lt;/ol&gt;





&lt;p&gt;You can complete these steps manually, but to make it all work, prepare for a large number of configuration, setup, and maintenance tasks. &lt;/p&gt;





&lt;blockquote&gt;&lt;p&gt;That’s where automation comes in handy again. Apart from the process described above, automated solutions can help immediately when spot instances you need are temporarily unavailable. &lt;/p&gt;&lt;/blockquote&gt;





&lt;p id="wisepops-spot-instance-analysis"&gt;Solutions like &lt;a href="https://docs.cast.ai/guides/autoscaling-policies/#spot-fallback"&gt;Spot fallback&lt;/a&gt; guarantee capacity by temporarily moving impacted workloads onto on-demand nodes and automatically returning them to spot instances when these become accessible. CAST AI’s feature currently supports EKS, Kops, and GKE clusters.&lt;/p&gt;





&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5IH2fgwS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cast.ai/wp-content/uploads/2021/12/Spot-Fallback-GIF.gif" alt="spot instances" width="600" height="314"&gt;





&lt;h3 id="delaying-the-adoption-of-automated-cloud-optimization"&gt;#6: Delaying the adoption of automated cloud optimization&lt;/h3&gt;





&lt;p&gt;I’ve already referred to &lt;a href="https://cast.ai/blog/cloud-automation-in-2021-the-new-normal-in-the-tech-industry/"&gt;automated cloud optimization&lt;/a&gt; throughout this text, and this is for a reason. &lt;/p&gt;





&lt;p&gt;If you've embraced cloud-native technologies, you're running Kubernetes, maybe even using modern DevOps approaches – automating this part of your infrastructure is definitely a great idea. &lt;/p&gt;





&lt;p&gt;Listed as one of &lt;a href="https://www.accenture.com/nl-en/blogs/insights/cloud-trends"&gt;Deloitte’s top trends&lt;/a&gt; for 2021 and beyond, &lt;strong&gt;cloud automation brings tangible results for IT teams&lt;/strong&gt;, especially in large enterprise environments. &lt;/p&gt;





&lt;p&gt;First of all, it reduces the manual efforts you need to put into configuring virtual machines, creating clusters, or choosing the right resources, and more. This change saves time and frees your engineers to focus on more important tasks, innovating, and using your cloud infrastructure to the fullest.&lt;/p&gt;





&lt;p&gt;What is more, &lt;strong&gt;automation tools allow for more frequent updates&lt;/strong&gt;, which are key to the idea of continuous deployment. It also reduces the odds of human-made errors, lowers infrastructure costs, improves the security and resilience of your systems, and enhances backup processes. &lt;/p&gt;





&lt;p&gt;Finally, automation lets you gain the visibility of resources in use across the company that would otherwise be difficult to control.&lt;/p&gt;





&lt;p&gt;In a nutshell, cloud automation is already becoming &lt;a href="https://cast.ai/blog/cloud-automation-in-2021-the-new-normal-in-the-tech-industry/"&gt;the new normal&lt;/a&gt; in the tech industry.   &lt;/p&gt;





&lt;h4 id="what-s-wrong-with-delaying-cloud-automation"&gt;What’s wrong with delaying cloud automation?&lt;/h4&gt;





&lt;p&gt;So if cloud automation brings that many indisputable advantages and seems unavoidable, why aren’t all enterprises jumping at it? &lt;/p&gt;





&lt;p&gt;Automation can pose numerous challenges, from the resistance to new solutions to fears that they may cost too much to implement and the need to update existing processes. &lt;/p&gt;





&lt;p&gt;As in most digital transformation projects, the key to success lies in people and encouraging change on a human level. And when it comes to the workplace, &lt;a href="https://www.mckinsey.com/featured-insights/artificial-intelligence/five-fifty-fear-fear-not"&gt;McKinsey’s research&lt;/a&gt; proves that fears about being &lt;a href="https://cast.ai/blog/is-automated-cloud-optimization-going-to-replace-your-devops-job/"&gt;replaced by technology&lt;/a&gt; are rife among workers.&lt;/p&gt;





&lt;p&gt;However, the advantages automation presents far outweigh the risks. This was evident, for example, in the &lt;a href="https://puppet.com/resources/report/2021-state-of-devops-report"&gt;2021 State of DevOps Report&lt;/a&gt;, where 97% of the surveyed companies agreed that automation improved the quality of their work.&lt;/p&gt;





&lt;p&gt;&lt;strong&gt;Delaying cloud automation in 2022 equals missing out on benefits like:&lt;/strong&gt;&lt;/p&gt;





&lt;ul&gt;
&lt;li&gt;Choosing the most efficient instance types and sizes for your apps;&lt;/li&gt;
&lt;li&gt;Autoscaling cloud resources to handle spikes and drops in demand;&lt;/li&gt;
&lt;li&gt;Eliminating resources that aren’t being used to cut costs;&lt;/li&gt;
&lt;li&gt;Optimizing spot instances by managing potential interruptions;&lt;/li&gt;
&lt;li&gt;Reducing unnecessary expenses in other areas, such as storage, backups, security, configuration changes, and more – all of that in real-time, and at a fraction of the cost you'd have to spend on manual implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="how-to-fix-this-challenge"&gt;How to fix this challenge?&lt;/h4&gt;

&lt;p&gt;The problem of overcoming human resistance to change and new solutions is as old as the hills. &lt;/p&gt;

&lt;p&gt;Reminding your team that automated cloud optimization will liberate them from the burden of repetitive tasks may not suffice. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Showing and experiencing is always better than telling. So why not try out &lt;a href="https://login.cast.ai/login?state=hKFo2SB5NkVBZjBNTlFNU3k0SW9iVms0alhxazhYVklzUmI1V6FupWxvZ2luo3RpZNkgTExUZVJFOE5JRVpTdDlpWEYxMkpqeFdaZXM3X1Q4RV-jY2lk2SBDM3dKT2FCdmRJR0ljU3BkSGhMZWlONnNJVkExaURoSw&amp;amp;client=C3wJOaBvdIGIcSpdHhLeiN6sIVA1iDhK&amp;amp;protocol=oauth2&amp;amp;redirect_uri=https%3A%2F%2Fconsole.cast.ai%2Fapi%2Fauth&amp;amp;response_type=code&amp;amp;scope=openid%20profile%20email&amp;amp;screen_hint=SIGNUP"&gt;CAST AI&lt;/a&gt; for free to discover which areas of your team’s cloud setup it could automate and how much you could save?&lt;/strong&gt;&lt;/p&gt;

&lt;p id="wisepops-automation-savings"&gt;May this New Year bring you love, happiness, and lower cloud bills! I hope you’ll embrace the benefits of automated cloud optimization in 2022. &lt;/p&gt;

</description>
      <category>cloud</category>
      <category>kubernetes</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building a CRUD API with Node.js and MongoDB</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Fri, 07 Jan 2022 10:31:50 +0000</pubDate>
      <link>https://dev.to/avneesh0612/building-a-crud-api-with-nodejs-and-mongodb-5oi</link>
      <guid>https://dev.to/avneesh0612/building-a-crud-api-with-nodejs-and-mongodb-5oi</guid>
      <description>&lt;p&gt;Howdy everyone, in this article we are going to build a CRUD (Create, Read, Update, Delete) API with  &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt;. This API will be able to add, get, edit and delete todos!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-our-node-app"&gt;
  &lt;/a&gt;
  Setting up our node app
&lt;/h2&gt;

&lt;p&gt;Create a new folder and give it a name-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir crud-API
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate into the project-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd crud-API
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initialize node-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Installing the packages needed-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; npm install mongoose express dotenv cors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Installing nodemon as dev dependency-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -D nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-our-server"&gt;
  &lt;/a&gt;
  Creating our server
&lt;/h2&gt;

&lt;p&gt;Create a new file &lt;code&gt;index.js&lt;/code&gt; and add the following-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");

const PORT = 8000;

const app = express();

app.listen(PORT, async () =&amp;gt; {
  console.log(`server up on port ${PORT}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside package.json and inside of &lt;code&gt;scripts&lt;/code&gt; add this new script-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"start": "nodemon index.js"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you now run &lt;code&gt;npm run start&lt;/code&gt; it will show &lt;strong&gt;server up on port 8000&lt;/strong&gt; in the console&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vUTr1xU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641473134275/mzJa8km_l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUTr1xU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641473134275/mzJa8km_l.png" alt="image.png" width="774" height="374"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-router-and-routes"&gt;
  &lt;/a&gt;
  Creating the router and routes
&lt;/h2&gt;

&lt;p&gt;Create a new file &lt;code&gt;router.js&lt;/code&gt; and add the following-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const router = require("express").Router();

router.get("/", (req, res) =&amp;gt; {
  res.send("Let's build a CRUD API!");
});

module.exports = router;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new get create route on the home page. So let's use the router in our app now. Go back to &lt;code&gt;index.js&lt;/code&gt; and add a middleware like this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use(router);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to import router-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const router = require("./router");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you now go to  &lt;a href="http://localhost:8000/"&gt;http://localhost:8000/&lt;/a&gt; we can see "Let's build a CRUD API!" 🥳&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NlNV8fVB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641481274514/hRJsLjpPi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NlNV8fVB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641481274514/hRJsLjpPi.png" alt="image.png" width="880" height="164"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-mongodb"&gt;
  &lt;/a&gt;
  Setting up MongoDB
&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt; and sign up/login. After you sign in click on create a new project and give your project a name!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZLULwNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641481563753/QrhtaOhMY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZLULwNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641481563753/QrhtaOhMY.png" alt="image.png" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also add a member if you want but I am not going to do that right now.&lt;/p&gt;

&lt;p&gt;After the project has been created, click on &lt;em&gt;Build a database&lt;/em&gt;. You will be able to see 3 plans to choose from. We are good to go with the free one for now. It will prompt you to select a location for your database, I would recommend you to go with the closes one :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RoVx_YIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641481727736/lNwDldKp-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RoVx_YIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641481727736/lNwDldKp-.png" alt="image.png" width="880" height="715"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a new user with a username and password, you are going to need this to connect MongoDB to your node.js app so don't forget it so fast :P. Now, select database in the sidebar. It will probably show you that the cluster is being created so wait for some time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3AJ1OQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641481882117/HGe6n3j1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3AJ1OQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641481882117/HGe6n3j1a.png" alt="image.png" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the database is created click on &lt;strong&gt;Connect&lt;/strong&gt;. You can allow access from everywhere for now. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YcSP_mMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641481984705/7NRmEugH-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YcSP_mMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641481984705/7NRmEugH-.png" alt="image.png" width="880" height="675"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, click on choose a connection method then connect your application. Copy the URL that you get as we are going to need it now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qy2wK9-j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641482056780/HJxQtKqHQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qy2wK9-j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641482056780/HJxQtKqHQ.png" alt="image.png" width="880" height="735"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's head back to our code now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-mongodb-to-nodejs"&gt;
  &lt;/a&gt;
  Connecting MongoDB to Node.js
&lt;/h2&gt;

&lt;p&gt;Inside of our app create a new file &lt;code&gt;.env&lt;/code&gt; and create a new variable &lt;code&gt;MONGODB_URL&lt;/code&gt; like this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGODB_URL=mongodb+srv://avneesh0612:password&amp;gt;@cluster0.wz3aq.mongodb.net/myFirstDatabase?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to replace the URL with the one you got from MongoDB and also change the password to your actual password.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;index.js&lt;/code&gt; and add in the following for connecting our app to MongoDB-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mongoose
  .connect(process.env.MONGODB_URL, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() =&amp;gt; {
    console.log("Connected to MongoDB");
  })
  .catch((err) =&amp;gt; {
    console.log(err);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import mongoose-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require("mongoose");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You also need to restart the server as we have changed the env variables. So, cut the server and restart the dev server with &lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is going to give us an error as we haven't configured our env variables yet, so you need to add just these two lines-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dotenv = require("dotenv");

dotenv.config();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It finally shows us that our app is connected to MongoDB!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wvKKmNq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641482554808/XVseGRbMW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wvKKmNq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641482554808/XVseGRbMW.png" alt="image.png" width="392" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-model-for-our-todo"&gt;
  &lt;/a&gt;
  Creating the Model for our Todo
&lt;/h2&gt;

&lt;p&gt;We are going to create a new folder &lt;code&gt;Model&lt;/code&gt; to keep things organized. So, create a new folder &lt;code&gt;Model&lt;/code&gt; and a file &lt;code&gt;Todo.js&lt;/code&gt; inside of it. Our model is going to have only 4 things- &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;completed&lt;/code&gt;, and &lt;code&gt;createdAt&lt;/code&gt;. So add the following in &lt;code&gt;Todo.js&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require("mongoose");

const TodoSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
  },
  description: {
    type: String,
  },
  completed: {
    type: Boolean,
    default: false,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
});

module.exports = mongoose.model("Todo", TodoSchema);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to have more/less data then feel free to edit this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-crud-functionality"&gt;
  &lt;/a&gt;
  Creating CRUD functionality
&lt;/h2&gt;

&lt;p&gt;Create a new folder &lt;code&gt;controllers&lt;/code&gt; and &lt;code&gt;Todo.js&lt;/code&gt; inside of it. I am going to create a dummy function for now-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getTodos = (req, res) =&amp;gt; {
  res.send("I am the get todos route");
};

module.exports = {
  getTodos,
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, go to &lt;code&gt;router.js&lt;/code&gt; and create a new get route like this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.get("/todos", getTodos);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You also need to import &lt;code&gt;getTodos&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { getTodos } = require("./controllers/Todo");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you now go to  &lt;a href="http://localhost:8000/todos"&gt;http://localhost:8000/todos&lt;/a&gt; then it will show you "I am the get todos route"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmNqEjeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641483166717/V3avffkKx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmNqEjeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641483166717/V3avffkKx.png" alt="image.png" width="880" height="123"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, let's build the create functionality then we will do the read functionality!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-create-functionality"&gt;
  &lt;/a&gt;
  Building Create functionality
&lt;/h3&gt;

&lt;p&gt;Create a new POST todos route in &lt;code&gt;router.js&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post("/todos", createTodo);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import createTodo from the controller-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { getTodos, createTodo } = require("./controllers/Todo");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create a new function in &lt;code&gt;controllers/Todo.js&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const createTodo = (req, res) =&amp;gt; {
  const todo = new Todo({
    title: req.body.title,
    description: req.body.description,
    completed: req.body.completed,
  });

  todo.save((err, todo) =&amp;gt; {
    if (err) {
      res.send(err);
    }
    res.json(todo);
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is going to take the &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;completed&lt;/code&gt; from the body and create a new Todo from the model that we created. Also, it will save it to to the database with the &lt;code&gt;.save&lt;/code&gt; function. We also need to import &lt;code&gt;Todo&lt;/code&gt; like this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Todo = require("../model/Todo");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to export createTodo-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  getTodos,
  createTodo,
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am going to use  &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; for testing the API. You can use any client :). So open postman and create a new post request to  &lt;a href="http://localhost:8000/todos"&gt;http://localhost:8000/todos&lt;/a&gt; with this in the body-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "title": "Title 1",
    "description": "Description 1",
    "completed": false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEgfFb8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641537330553/BScnjJoIT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEgfFb8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641537330553/BScnjJoIT.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's hit send 🥁, and we get an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5mfIsOfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641537369607/4CGUbdzCe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5mfIsOfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641537369607/4CGUbdzCe.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We get this error because we haven't used some middleware. So inside of &lt;code&gt;index.js&lt;/code&gt; just above &lt;code&gt;app.use(router)&lt;/code&gt; and below mongoose.connect add the following middlewares-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use(cors());

app.use(express.json());
app.use(express.urlencoded({ extended: false }));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to import cors-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const cors = require("cors");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we re-run the request on Postman, it works!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H2XNTjr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641537549997/iTXN_7pGn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H2XNTjr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641537549997/iTXN_7pGn.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-read-functionality"&gt;
  &lt;/a&gt;
  Building Read functionality
&lt;/h3&gt;

&lt;p&gt;We are going to need to change the &lt;code&gt;getTodos&lt;/code&gt; function that we created. So, replace the function with this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getTodos = (req, res) =&amp;gt; {
  Todo.find((err, todos) =&amp;gt; {
    if (err) {
      res.send(err);
    }
    res.json(todos);
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is going to show all the todos in the collection of "Todos", now if we make a GET request to  &lt;a href="http://localhost:8000/todos"&gt;http://localhost:8000/todos&lt;/a&gt; then it will show us all the todos! Currently, we have only one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wK59Ighi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641538593222/J52-Pqe-S.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wK59Ighi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641538593222/J52-Pqe-S.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also test this by adding another todo and it will then show us both the todos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S_NCFJR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641538653691/LMuxHDP8z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S_NCFJR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641538653691/LMuxHDP8z.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#edit-functionality"&gt;
  &lt;/a&gt;
  Edit functionality
&lt;/h3&gt;

&lt;p&gt;Create a new PUT route in &lt;code&gt;router.js&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.put("/todos/:todoID", updateTodo);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import it from &lt;code&gt;controllers/Todo.js&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { getTodos, createTodo, updateTodo } = require("./controllers/Todo");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside &lt;code&gt;controllers/Todo.js&lt;/code&gt; let's build our &lt;code&gt;updateTodo&lt;/code&gt; function-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const updateTodo = (req, res) =&amp;gt; {
  Todo.findOneAndUpdate(
    { _id: req.params.todoID },
    {
      $set: {
        title: req.body.title,
        description: req.body.description,
        completed: req.body.completed,
      },
    },
    { new: true },
    (err, Todo) =&amp;gt; {
      if (err) {
        res.send(err);
      } else res.json(Todo);
    }
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take a new &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;completed&lt;/code&gt; from the request body and update it according to the id in the URL. So, in postman create a new PUT request to  &lt;a href="http://localhost:8000/todos/todo_id"&gt;http://localhost:8000/todos/todo_id&lt;/a&gt;. You also need to provide data in the body-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "title": "Title 3",
    "description": "Description 3",
    "completed": false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works! 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKWfRUuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641539951484/KDMf5aZSv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKWfRUuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641539951484/KDMf5aZSv.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you make a new GET request, you will see the updated todos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aWtIWUf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641540003110/QPfvHNrPF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aWtIWUf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641540003110/QPfvHNrPF.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#delete-functionality"&gt;
  &lt;/a&gt;
  Delete functionality
&lt;/h3&gt;

&lt;p&gt;Create another route in &lt;code&gt;router.js&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.delete("/todos/:todoID", deleteTodo);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You also need to import as always-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const {
  getTodos,
  createTodo,
  updateTodo,
  deleteTodo,
} = require("./controllers/Todo");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, create a new function in &lt;code&gt;Todo.js&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const deleteTodo = (req, res) =&amp;gt; {
  Todo.deleteOne({ _id: req.params.todoID })
    .then(() =&amp;gt; res.json({ message: "Todo Deleted" }))
    .catch((err) =&amp;gt; res.send(err));
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take the todoID from the URL and delete it. Export the function-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  getTodos,
  createTodo,
  updateTodo,
  deleteTodo,
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's put it to the test now. It works now!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EZvlrgU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641540501970/J51YyZxZ2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EZvlrgU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641540501970/J51YyZxZ2l.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We now have a fully working CRUD API! Let's deploy it to Heroku now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-to-heroku"&gt;
  &lt;/a&gt;
  Deploying to Heroku
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-github-repo"&gt;
  &lt;/a&gt;
  Creating a GitHub repo
&lt;/h3&gt;

&lt;p&gt;Initialize git-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new file &lt;code&gt;.gitignore&lt;/code&gt; and add the node modules in it-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commit the code-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .

git commit -m "your commit message"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go on GitHub and create a  &lt;a href="https://github.com/new"&gt;New Repo&lt;/a&gt;. You can give it any name you like!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rftvz6Ci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641540984748/ODEVW_8Oh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rftvz6Ci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641540984748/ODEVW_8Oh.png" alt="image.png" width="880" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the commands in "push an existing repository from the command line" and paste it into your terminal.&lt;/p&gt;

&lt;p&gt;If you now refresh the page, you will be able to see your code!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7tEwzrb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641541147661/83n1nZ7ZS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7tEwzrb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641541147661/83n1nZ7ZS.png" alt="image.png" width="880" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, go to &lt;a href="https://heroku.com/"&gt;heroku&lt;/a&gt;, sign in/sign up. Then, create a new app&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXewu4v8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641541300730/YDdXF33GtL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXewu4v8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641541300730/YDdXF33GtL.png" alt="image.png" width="880" height="1013"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give your app a name and hit "Create app"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iPZirq-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641541408361/svlAnPnpX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iPZirq-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641541408361/svlAnPnpX.png" alt="image.png" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect GitHub and select your repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SjE_NwNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641541552495/D52ZnJBfg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SjE_NwNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641541552495/D52ZnJBfg.png" alt="image.png" width="880" height="302"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can enable automatic deploys and also click on deploy branch.&lt;/p&gt;

&lt;p&gt;We also need to add the env variables, so go to the settings tab, scroll down to Config Vars and paste in the variable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P4zMMRNe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641541717089/Ffo01DZdp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4zMMRNe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641541717089/Ffo01DZdp.png" alt="image.png" width="880" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You are going to see an error in your app, so head back to the code! Inside package.json change the start script to-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The script should look like this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"start": "node index.js"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to change the port, so inside &lt;code&gt;index.js&lt;/code&gt; change port to this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const PORT = process.env.PORT || 8000;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can push the code again!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .

git commit -m "fix: deploy errors"

git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you enabled automatic deploys then it will deploy automatically, else manually deploy the branch. Now our API successfully works! This is the API if you want to try it out: &lt;a href="https://crud-api-demo.herokuapp.com/"&gt;https://crud-api-demo.herokuapp.com/&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hope you were able to build an amazing CRUD API for your next project. Feel free to drop your questions below 😉. See ya in the next one ✌️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/avneesh0612/crud-api"&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://crud-api-demo.herokuapp.com/todos"&gt;API we built&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://links.avneesh.tech/"&gt;Connect with me&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>mongodb</category>
      <category>api</category>
      <category>crud</category>
    </item>
    <item>
      <title>Doko - 🐳 docker you know but with console user interface.</title>
      <author>abdfn</author>
      <pubDate>Fri, 07 Jan 2022 10:29:58 +0000</pubDate>
      <link>https://dev.to/abdfnx/doko-docker-you-know-but-with-console-user-interface-fma</link>
      <guid>https://dev.to/abdfnx/doko-docker-you-know-but-with-console-user-interface-fma</guid>
      <description>&lt;h2&gt;
  &lt;a href="#doko"&gt;
  &lt;/a&gt;
  Doko
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/abdfnx"&gt;
        abdfnx
      &lt;/a&gt; / &lt;a href="https://github.com/abdfnx/doko"&gt;
        doko
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🐳 docker you know but with console user interface.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;🐳 docker you know but with console user interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXE5oXl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/64256993/148515590-dccda7c1-73ea-45c6-80b6-901633861fde.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXE5oXl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/64256993/148515590-dccda7c1-73ea-45c6-80b6-901633861fde.gif" alt="preview" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;this app is inspired from &lt;a href="https://github.com/jesseduffield/lazydocker"&gt;lazydocker&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#using-script"&gt;
  &lt;/a&gt;
  Using script
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Shell
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -sL https://git.io/doko | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;PowerShell
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iwr -useb https://git.io/doko-win | iex
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#or-with-resto"&gt;
  &lt;/a&gt;
  or with &lt;a href="https://github.com/abdfnx/resto"&gt;&lt;strong&gt;resto&lt;/strong&gt;&lt;/a&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# shell&lt;/span&gt;
resto &lt;span class="nb"&gt;install &lt;/span&gt;https://git.io/doko

&lt;span class="c"&gt;# powershell&lt;/span&gt;
resto &lt;span class="nb"&gt;install &lt;/span&gt;https://git.io/doko-win
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;then restart your powershell&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#go-package-manager"&gt;
  &lt;/a&gt;
  Go package manager
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go &lt;span class="nb"&gt;install &lt;/span&gt;github.com/abdfnx/doko@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#via-docker"&gt;
  &lt;/a&gt;
  Via Docker
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-itv&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock dokocli/doko
docker run &lt;span class="nt"&gt;-itv&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock dokocli/doko &amp;lt;FLAGS&amp;gt;
docker run &lt;span class="nt"&gt;-itv&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock dokocli/doko &amp;lt;CMD&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;full container:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-itv&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock dokocli/doko-full
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Open Doko UI
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;doko
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;With specific endpoint
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;doko --endpoint &amp;lt;DOCKER_ENDPOINT&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Use another docker engine version
doko --engine "1.40"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Log file path
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;doko --log-file /home/doko/my-log.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#flags"&gt;
  &lt;/a&gt;
  Flags
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    --ca string          The path to the TLS CA (ca.pem)
-c, --cert string        The path to the TLS certificate (cert.pem)
-e, --endpoint string    The docker endpoint to use (default "unix:///var/run/docker.sock")
-g, --engine string      The docker engine version (default "1.41")
    --help               Help for doko
-k, --key string         The path to the TLS key (key.pem)
-l, --log-file string    The path to the log file
-o, --log-level string   The log level (default "info")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#keybindings-shortcuts"&gt;
  &lt;/a&gt;
  Keybindings (Shortcuts)
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;mission&lt;/th&gt;
&lt;th&gt;key(s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;all&lt;/td&gt;
&lt;td&gt;quit&lt;/td&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all&lt;/td&gt;
&lt;td&gt;change panel&lt;/td&gt;
&lt;td&gt;
Tab or Shift + Tab
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list panels&lt;/td&gt;
&lt;td&gt;next entry&lt;/td&gt;
&lt;td&gt;
j or ↓
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list panels&lt;/td&gt;
&lt;td&gt;next page&lt;/td&gt;
&lt;td&gt;
Ctrl or f
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list panels&lt;/td&gt;
&lt;td&gt;previous entry&lt;/td&gt;
&lt;td&gt;
k or ↑
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list panels&lt;/td&gt;
&lt;td&gt;previous page&lt;/td&gt;
&lt;td&gt;
Ctrl or b
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list panels&lt;/td&gt;
&lt;td&gt;scroll to top&lt;/td&gt;
&lt;td&gt;g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list panels&lt;/td&gt;
&lt;td&gt;scroll to bottom&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image list&lt;/td&gt;
&lt;td&gt;pull image&lt;/td&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image list&lt;/td&gt;
&lt;td&gt;import image&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image list&lt;/td&gt;
&lt;td&gt;save image&lt;/td&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image list&lt;/td&gt;
&lt;td&gt;load image&lt;/td&gt;
&lt;td&gt;
Ctrl + l
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image list&lt;/td&gt;
&lt;td&gt;find images&lt;/td&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image list&lt;/td&gt;
&lt;td&gt;delete image&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image list&lt;/td&gt;
&lt;td&gt;filter image&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image list&lt;/td&gt;
&lt;td&gt;create container&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image list&lt;/td&gt;
&lt;td&gt;inspect image&lt;/td&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image list&lt;/td&gt;
&lt;td&gt;refresh image list&lt;/td&gt;
&lt;td&gt;
Ctrl + r
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container list&lt;/td&gt;
&lt;td&gt;export container&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container list&lt;/td&gt;
&lt;td&gt;commit container&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container list&lt;/td&gt;
&lt;td&gt;filter image&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container list&lt;/td&gt;
&lt;td&gt;exec container cmd&lt;/td&gt;
&lt;td&gt;
Ctrl + e
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container list&lt;/td&gt;
&lt;td&gt;start container&lt;/td&gt;
&lt;td&gt;t&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container list&lt;/td&gt;
&lt;td&gt;stop container&lt;/td&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container list&lt;/td&gt;
&lt;td&gt;kill container&lt;/td&gt;
&lt;td&gt;
Ctrl + k
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container list&lt;/td&gt;
&lt;td&gt;delete container&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container list&lt;/td&gt;
&lt;td&gt;inspect container&lt;/td&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container list&lt;/td&gt;
&lt;td&gt;rename container&lt;/td&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container list&lt;/td&gt;
&lt;td&gt;refresh container list&lt;/td&gt;
&lt;td&gt;
Ctrl + r
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container logs&lt;/td&gt;
&lt;td&gt;show container logs&lt;/td&gt;
&lt;td&gt;
Ctrl + l
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;volume list&lt;/td&gt;
&lt;td&gt;create volume&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;volume list&lt;/td&gt;
&lt;td&gt;delete volume&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;volume list&lt;/td&gt;
&lt;td&gt;filter volume&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;volume list&lt;/td&gt;
&lt;td&gt;inspect volume&lt;/td&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;volume list&lt;/td&gt;
&lt;td&gt;refresh volume list&lt;/td&gt;
&lt;td&gt;
Ctrl + r
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;network list&lt;/td&gt;
&lt;td&gt;delete network&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;network list&lt;/td&gt;
&lt;td&gt;inspect network&lt;/td&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;network list&lt;/td&gt;
&lt;td&gt;filter network&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pull image&lt;/td&gt;
&lt;td&gt;pull image&lt;/td&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pull image&lt;/td&gt;
&lt;td&gt;close panel&lt;/td&gt;
&lt;td&gt;Esc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;create container&lt;/td&gt;
&lt;td&gt;next input box&lt;/td&gt;
&lt;td&gt;Tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;create container&lt;/td&gt;
&lt;td&gt;previous input box&lt;/td&gt;
&lt;td&gt;
Shift + Tab
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;detail&lt;/td&gt;
&lt;td&gt;cursor dwon&lt;/td&gt;
&lt;td&gt;j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;detail&lt;/td&gt;
&lt;td&gt;cursor up&lt;/td&gt;
&lt;td&gt;k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;detail&lt;/td&gt;
&lt;td&gt;next page&lt;/td&gt;
&lt;td&gt;
Ctrl or f
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;detail&lt;/td&gt;
&lt;td&gt;previous page&lt;/td&gt;
&lt;td&gt;
Ctrl or b
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search images&lt;/td&gt;
&lt;td&gt;search image&lt;/td&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search images&lt;/td&gt;
&lt;td&gt;close panel&lt;/td&gt;
&lt;td&gt;Esc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search result&lt;/td&gt;
&lt;td&gt;next image&lt;/td&gt;
&lt;td&gt;j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search result&lt;/td&gt;
&lt;td&gt;previous image&lt;/td&gt;
&lt;td&gt;k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search result&lt;/td&gt;
&lt;td&gt;pull image&lt;/td&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;search result&lt;/td&gt;
&lt;td&gt;close panel&lt;/td&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;create volume&lt;/td&gt;
&lt;td&gt;close panel&lt;/td&gt;
&lt;td&gt;Esc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;create volume&lt;/td&gt;
&lt;td&gt;next input box&lt;/td&gt;
&lt;td&gt;Tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;create volume&lt;/td&gt;
&lt;td&gt;previous input box&lt;/td&gt;
&lt;td&gt;
Shift + Tab
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>docker</category>
      <category>bash</category>
      <category>go</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Avoid memoizing your handlers in React (and prevent infinite re-renders)</title>
      <author>Carles Ballester</author>
      <pubDate>Fri, 07 Jan 2022 10:13:13 +0000</pubDate>
      <link>https://dev.to/carlesba/avoid-memoizing-your-handlers-in-react-and-prevent-infinite-re-renders-2meh</link>
      <guid>https://dev.to/carlesba/avoid-memoizing-your-handlers-in-react-and-prevent-infinite-re-renders-2meh</guid>
      <description>&lt;p&gt;Since react introduced hooks, &lt;code&gt;useEffect&lt;/code&gt; has become a challenge for many. This hook offers an elegant way to declare side effects in our code, but it comes with a price: we need to define its inner dependencies and this can be an issue sometimes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;Say we have a component that calls a handler when its internal state changes. This is usually a smell that shows that we placed the state in the wrong component (it should be in the parent) but we can still face this situation when we deal with external libraries or an old codebase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Child&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I recently faced this problem when using &lt;code&gt;react-table&lt;/code&gt;. I needed a component that could encapsulate React Table’s API in order to replace other tables with my new component, but React Table holds all the table’s state in a custom hook. If we want to provide a handler for the selected rows in the table, the best way to do this is with a &lt;code&gt;useEffect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s check this example for our case study, and create a handler function to track when the selected rows change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// our new Table component with react-table&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;onChangeSelection&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;onChangeSelection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onChangeSelection&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// a component that needs the selection&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSelection&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
  &lt;span class="c1"&gt;// this will cause an infinite loop:&lt;/span&gt;
  &lt;span class="c1"&gt;// a re-render in Page creates a new handleSelection&lt;/span&gt;
  &lt;span class="c1"&gt;// a new handleSelection triggers Table's useEffect&lt;/span&gt;
  &lt;span class="c1"&gt;// Page will re-render if the new value is a new object instance&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSelection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setSelection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;OtherComponent&lt;/span&gt; &lt;span class="na"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt; &lt;span class="na"&gt;onChangeSelection&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSelection&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Table&lt;/code&gt; component provides a handler to keep track of changes in the selected state, while &lt;code&gt;Page&lt;/code&gt; uses that handler to keep the state updated. A &lt;code&gt;useEffect&lt;/code&gt; will tell when the &lt;code&gt;Table&lt;/code&gt; ’s state changes and call the handler. But to do this properly, the dependencies array has to include the state that we’re subscribing to and the handler. &lt;/p&gt;

&lt;p&gt;Adding the handler in this array, forces the parent component to memoize this function. Otherwise, every new render in the parent component will create a new handler. Since it’s a new function, the effect will be triggered again with the previous state.&lt;/p&gt;

&lt;p&gt;This is a problem because the handler is going to be called not only whenever the row selection changes, but also when the handler changes. This means that the handler is not only reporting when the Selection changed but also when the handler change. Notice that, if the handler function is updating a state in the parent component, it could create an infinite loop (infinite re-renders).&lt;/p&gt;

&lt;p&gt;If you have worked with react-table you probably have dealt with many infinite re-renders situations. Now let’s see how we can fix this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-solution"&gt;
  &lt;/a&gt;
  A solution
&lt;/h2&gt;

&lt;p&gt;The simplest solution to this issue is to wrap the handler function in a &lt;code&gt;useCallback&lt;/code&gt;. This way we keep the same handler between renders. Since the handler remains the same, the effect won’t be triggered and the handler will only be called when the selection state changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;onChangeSelection&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;onChangeSelection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onChangeSelection&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSelection&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
  &lt;span class="c1"&gt;// useCallback keeps the same instance of handleSelection between renders&lt;/span&gt;
  &lt;span class="c1"&gt;// useEffect will only be triggered when the selection changes&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSelection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setSelection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;OtherComponent&lt;/span&gt; &lt;span class="na"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt; &lt;span class="na"&gt;onChangeSelection&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSelection&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#is-this-good-enough"&gt;
  &lt;/a&gt;
  Is this good enough?
&lt;/h2&gt;

&lt;p&gt;That worked. We solved the issue without much effort. However, unless you dug into the &lt;code&gt;Table&lt;/code&gt;'s implementation or documentation, it’s quite likely that you would create an infinite loop before finding out that you need a &lt;code&gt;useCallback&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There’s no way to tell other developers that this handler needs to be memoized.&lt;/strong&gt; At the same time, memoizing every single handler in our codebase just in case feels redundant and doesn’t solve the issue at its origin, in the Table component. In my opinion, the need for callback &lt;strong&gt;memoization is one of the downsides of today’s react idiomatic code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In an ideal scenario, we would &lt;strong&gt;be able to use an inline function as a handler&lt;/strong&gt;, without having to guess whether we should memoize it. The handler should also be included in the dependency array of the effect. But, is that even possible?&lt;/p&gt;

&lt;p&gt;Luckily for us, there’s a way to avoid forcing other developers to memoize their handlers when they use our components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-an-event-emitter"&gt;
  &lt;/a&gt;
  Using an Event Emitter
&lt;/h2&gt;

&lt;p&gt;In programming, event emitters (or event bus) are used to decouple interfaces. An Event bus basically keeps track of the listeners for a certain event. When that event is emitted in the bus, the bus will notify all the listeners with the event’s payload.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// basic usage of EventEmitter&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;emitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;emitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;there&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// log: hello there&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can already see how appropriate this is for our case. Now let’s dig into the React specifics. The trick here is to use the bus as an intermediary between handlers and state changes. The handlers will be subscribed for events to the bus. Then, when the state changes, an effect will dispatch events into the bus. Since the emitter function remains the same, the effect that subscribes to the state changes won’t be affected when a new handler is provided.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// keep same emitter instance between renders&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// create a dispatch function that doesn't change between renders&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((...&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;emitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aRandomEventName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;span class="c1"&gt;// subscribe our emitter to state changes&lt;/span&gt;
&lt;span class="c1"&gt;// notice dispatch remain the same between renders&lt;/span&gt;
&lt;span class="c1"&gt;// only state will trigger the effect&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;// subscribe the handler to the events&lt;/span&gt;
&lt;span class="c1"&gt;// this effect decouples our handler from the state change&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;emitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aRandomEventName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// don't forget to unsubscribe the handler&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;emitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aRandomEventName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This logic can now be defined in a nice hook for easier use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;emitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;currentEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;event&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;currentEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;event&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((...&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;emitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;event&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;emitter&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, let’s use the new hook in our table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;onChangeSelection&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onChangeSelection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// dispatch won't change when onChangeSelection changes&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSelection&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;OtherComponent&lt;/span&gt; &lt;span class="na"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* we can use inline functions for handlers with ease now */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Table&lt;/span&gt; &lt;span class="na"&gt;onChangeSelection&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setSelection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can safely use inline functions for our handlers without worrying about infinite re-renders. &lt;/p&gt;

&lt;p&gt;I hope you find this as useful as I did. You can find the full code snippet in this &lt;a href="https://bit.ly/3sZrVFv"&gt;gist&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Thanks to &lt;a href="https://bit.ly/3GbC9GI"&gt;@saisan&lt;/a&gt; for helping me with the writing of this post.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>dx</category>
    </item>
    <item>
      <title>How to ask online as a beginner programmer?</title>
      <author>Muhammad Ali (Nerdjfpb)</author>
      <pubDate>Fri, 07 Jan 2022 09:55:38 +0000</pubDate>
      <link>https://dev.to/nerdjfpb/how-to-ask-online-as-a-beginner-programmer-49ab</link>
      <guid>https://dev.to/nerdjfpb/how-to-ask-online-as-a-beginner-programmer-49ab</guid>
      <description>&lt;p&gt;Learning something new is always harder, where to start! But most probably, if you are reading this, you’ve already started doing something extraordinary. Today, I will cover how to ask on the internet when you are just beginning as a programmer. Many newbies don’t know properly how to ask, and they get no reply from people. I help people using my Instagram, so I know how many weird things newbies usually ask. Still, it’s my personal opinion, so feel free to add more stuff down!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#googling"&gt;
  &lt;/a&gt;
  Googling
&lt;/h2&gt;

&lt;p&gt;Googling is a must-needed skill for a newbie. You don’t know how to search and get ideas most of the time. I am not a super expert in this field, but I can do enough. But let me tell you the secret. First, try to search for the problem you have. Most of the time, you’ll find nothing (because you are just putting the whole error message in google, which google doesn’t understand correctly). So try to break it down. Get some part of error the put the language name after it. This way, you’ll get somewhere, not keep checking. Before asking anyone, you should do this. Without googling and spending at least 10mins on google, never ask anyone anything. It doesn’t matter what it is; keep searching for 10mins, and please check the second page of google too!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s---N7z2SDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1450793111035072512/ibXiQv3H_normal.jpg" alt="Nerdjfpb: Muhammad Ali profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nerdjfpb: Muhammad Ali
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nerdjfpb"&gt;@nerdjfpb&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      How do I use google as a programmer?&lt;br&gt;&lt;br&gt;A thread 👇
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:25 PM - 02 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1477632101335781378" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1477632101335781378" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1477632101335781378" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  YouTube
&lt;/h2&gt;

&lt;p&gt;There are so many content creators nowadays, so if you search your issue on YouTube, there is a massive chance that you’ll find it. If you don’t understand English well, just search for it in your language. So many local people are making content nowadays. Nobody can’t teach you everything, so don’t just hook into one single person; use multiple creators to get ideas in your head. Watch numerous explanations on each topic. Suppose you do not understand recursion properly – search recursion in your language, then recursion if it’s a concept. Try to find an animation for it.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s---N7z2SDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1450793111035072512/ibXiQv3H_normal.jpg" alt="Nerdjfpb: Muhammad Ali profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nerdjfpb: Muhammad Ali
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nerdjfpb"&gt;@nerdjfpb&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      How do I use YouTube for learning a new &lt;a href="https://twitter.com/hashtag/programming"&gt;#programming&lt;/a&gt; language?&lt;br&gt;&lt;br&gt;A thread 🔽&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/CodeNewbie"&gt;#CodeNewbie&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Golang"&gt;#Golang&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/ReactJS"&gt;#ReactJS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/learning"&gt;#learning&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:09 PM - 04 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1478443504745410566" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1478443504745410566" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1478443504745410566" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#asking-questions"&gt;
  &lt;/a&gt;
  Asking questions
&lt;/h2&gt;

&lt;p&gt;Finally, if you don’t find what you are looking for on google/youtube. Time to ask people, so where can we find people to ask? Tough one, right? The good thing is that there are so many helping people in the world that you’ll find help without making tough choices. For programming questions, you should go to StackOverflow (which doesn’t guarantee that people will answer) so go to some instant messaging apps like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;discord&lt;/li&gt;
&lt;li&gt;slack&lt;/li&gt;
&lt;li&gt;whatsApp&lt;/li&gt;
&lt;li&gt;telegram
You’ll find so many groups of programming and ask there! Okay, but general groups don’t give you a guarantee that you’ll find some solutions. So usually go to a specific group for asking a particular question. Suppose you are looking for a “react” answer. First, join a few react communities; how to find it? One of the quick ways is going to respond and check the community. You’ll mostly find something in there! Reactiflux is an excellent choice.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fU5RxLeK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2evs0ybjyigaqxeje1qe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fU5RxLeK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2evs0ybjyigaqxeje1qe.png" alt="community for react" width="880" height="576"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same thing you can do for vue and find some excellent links for vue! Most of the products nowadays have a community! If you find nothing, maybe check their repo in GitHub (which can help to ask something in there; or try to ask them on Twitter by tagging them in your post)&lt;/p&gt;

&lt;p&gt;So now the main question is how to ask? Normally if it’s a general question, you can find it on google, so you don’t have to go for someone to ask. So you have a specific case to ask, right? If it’s a code-related issue, you need to share your code with the particular question. How to do it?&lt;/p&gt;

&lt;p&gt;If it’s a small question, go to carbon and paste your code and share the screenshot. If it’s a more significant part of code, maybe this idea doesn’t work well, then make a public Github repo and share the repo (but it’ll be better if you can specifically tell people where to start looking). If possible, make a diagram to show how things are moving in your app. If it’s a CSS issue, then it’s tough for people to help with that without running, so maybe try to host it somewhere so that people can click and go to the link. With the link, anyone can inspect that help with CSS issues from their browser.&lt;/p&gt;


&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CYRK_-gFdM-/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;


&lt;p&gt;Be smart with what you are asking; if you can’t ask correctly, people will ignore you because they don’t have time to work with your ugly screenshot! They have their own life! So be specific on the point with the helpful stuff; maybe you’ll solve your property before asking anyone in this process. When coding for a reasonable amount of time, we forget the logic we build, or sometimes we focus less on the whole picture! So once we try to explain it to someone else, our brain finds the solution in explaining time. It has happened to me many times; I’m not sure if the brain works in this way. Either way, it’s worth trying!&lt;/p&gt;


&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CYWAah-FmoB/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-to-keep-up-to-date-with-the-tech-industry"&gt;
  &lt;/a&gt;
  How to keep up to date with the tech industry?
&lt;/h2&gt;

&lt;p&gt;This is one of the great questions of any newbie. So try to follow people on Twitter. Instagram has many people who share programming content; you can follow there too! Facebook has some, but I use Instagram &amp;amp; Twitter for programming content. Reddit can be a good choice too!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s---N7z2SDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1450793111035072512/ibXiQv3H_normal.jpg" alt="Nerdjfpb: Muhammad Ali profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nerdjfpb: Muhammad Ali
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nerdjfpb"&gt;@nerdjfpb&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The industry is moving so fast. So how do I keep up with the tech industry? Let's explore this 👇
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:47 PM - 06 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1479072052166356993" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1479072052166356993" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1479072052166356993" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I hope this blog will help at least a little in your journey! Remember, it’s a marathon; you can’t win in one hour, one day, or one month. You need to keep learning and building skills!&lt;/p&gt;

&lt;p&gt;This post is originally published on &lt;a href="https://blog.nerdjfpb.com/how-to-ask-online-as-a-beginner-programmer/"&gt;NERDJFPB BLOG&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve community where we help each other to learn programming; if you are interest. Feel free to join – &lt;a href="https://discord.com/invite/CaUPRUnckR"&gt;https://discord.com/invite/CaUPRUnckR&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to launch a Minimum viable product (MVP) in 2022</title>
      <author>Andrew Baisden</author>
      <pubDate>Fri, 07 Jan 2022 09:53:24 +0000</pubDate>
      <link>https://dev.to/andrewbaisden/how-to-launch-a-minimum-viable-product-mvp-in-2022-5hig</link>
      <guid>https://dev.to/andrewbaisden/how-to-launch-a-minimum-viable-product-mvp-in-2022-5hig</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-minimum-viable-product"&gt;
  &lt;/a&gt;
  What is a Minimum viable product
&lt;/h2&gt;

&lt;p&gt;When you are working on a project the first iteration or the very first version is known as a Minimum viable product or MVP when abbreviated. This can apply to almost any type of project for example websites, mobile applications, desktops applications, and even games among other things.&lt;/p&gt;

&lt;p&gt;A minimum viable product is essentially an early build which has a decent amount of features and functionality to make it usable for first time customers. These customers then provide feedback which gets passed onto the developers who then incorporate these changes and improvements into future releases. Minimum viable products can go through many stages during their lifecycle from alpha, beta and final builds.&lt;/p&gt;

&lt;p&gt;Every experienced developer, company, freelancer and entrepreneur has created or launched some type of product during their career. This could be a simple pet project or a fully commercial product that has paying customers. Regardless how they reached that point they had to go through a process to get there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--269_J_Cp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/d74fh3kw/image/upload/v1641261302/project-mvp_atmgeh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--269_J_Cp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/d74fh3kw/image/upload/v1641261302/project-mvp_atmgeh.gif" alt="https://res.cloudinary.com/d74fh3kw/image/upload/v1641261302/project-mvp_atmgeh.gif" width="480" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#team-structure"&gt;
  &lt;/a&gt;
  Team structure
&lt;/h2&gt;

&lt;p&gt;Under normal conditions a whole team would be working on the product. You could have designers, copywriters, developers and quality assurance/quality control testers. Before any work has started the team would either be working with a client to figure out how they can best work together. Or in another scenario they are launching a product to solve some sort of problem or to fill a gap in the market. &lt;/p&gt;

&lt;p&gt;Like a greenfield project which needs to be created from scratch. It is not uncommon for freelancers to work on the whole product lifecycle going through all of these processes. There are countless different ways an organisation might choose for their team structure and how they work together. I will give you a breakdown of one such process.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xdpuq6JM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/d74fh3kw/image/upload/v1641261190/project-team_wl5f5s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xdpuq6JM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/d74fh3kw/image/upload/v1641261190/project-team_wl5f5s.gif" alt="https://res.cloudinary.com/d74fh3kw/image/upload/v1641261190/project-team_wl5f5s.gif" width="400" height="260"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#designers"&gt;
  &lt;/a&gt;
  Designers
&lt;/h3&gt;

&lt;p&gt;Designers are responsible for creating the initial design. Prior to this they would have gone through a user flow journey which is basically the pathways that a user would use to navigate through the application or website. The path is broken down into various steps that a user would follow to travel throughout the product.&lt;/p&gt;

&lt;p&gt;During the design phase designers are also responsible for creating the first working prototype. The prototype is normally created inside of a design file and it adds interactivity to the design. No coding is required at this stage and the design is still static however it is the last stage before the handoff is given to the development team to build it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hgAAfa_k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/d74fh3kw/image/upload/v1641259589/project-designer_ibtn2c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hgAAfa_k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/d74fh3kw/image/upload/v1641259589/project-designer_ibtn2c.gif" alt="https://res.cloudinary.com/d74fh3kw/image/upload/v1641259589/project-designer_ibtn2c.gif" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copyrighters"&gt;
  &lt;/a&gt;
  Copyrighters
&lt;/h3&gt;

&lt;p&gt;The job of a copywriter is to come up with content for the product. Their role is essentially to create engaging text and writing which will help to describe the product and sell it to the customers. They are responsible for doing the marketing and advertising throughput all of the various channels that a company uses both online and offline. Across social media and even outdoor banners and adverts both digital and print.&lt;/p&gt;

&lt;p&gt;When it comes to the actual digital product a copywriters role would be to do the proofreading and making sure that the written content is accurate, correct and of good quality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bk2NwrnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/d74fh3kw/image/upload/v1641259734/project-copywriter_iey3pq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bk2NwrnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/d74fh3kw/image/upload/v1641259734/project-copywriter_iey3pq.gif" alt="https://res.cloudinary.com/d74fh3kw/image/upload/v1641259734/project-copywriter_iey3pq.gif" width="480" height="379"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developers"&gt;
  &lt;/a&gt;
  Developers
&lt;/h3&gt;

&lt;p&gt;Developers are an essential part of the product lifecycle as they are the ones who bring the designs to life. Depending on the project developers could be working across the full technical stack. Developing the back-end, front-end, web version, desktop version and even a mobile one too. If it is a game then there would also be a special process for the development and getting it working on various platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9qTrv2ck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/d74fh3kw/image/upload/v1641259873/project-developer_nco99x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9qTrv2ck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/d74fh3kw/image/upload/v1641259873/project-developer_nco99x.gif" alt="https://res.cloudinary.com/d74fh3kw/image/upload/v1641259873/project-developer_nco99x.gif" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quality-assurancequality-control-testers"&gt;
  &lt;/a&gt;
  Quality Assurance/Quality Control Testers
&lt;/h3&gt;

&lt;p&gt;Testers are people who go through the whole product to make sure that it is ready to be launched as a MVP. They will check for bugs, errors, accessibility issues and a lot more. Their job is to give the product a complete test so that it is in a condition whereby it can pass all of the tests giving it a final seal of approval.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0lEwasAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/d74fh3kw/image/upload/v1641259996/project-testing_ri9jq3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0lEwasAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/d74fh3kw/image/upload/v1641259996/project-testing_ri9jq3.gif" alt="https://res.cloudinary.com/d74fh3kw/image/upload/v1641259996/project-testing_ri9jq3.gif" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-on-the-product"&gt;
  &lt;/a&gt;
  Working on the product
&lt;/h2&gt;

&lt;p&gt;During this phase it is highly likely that there would be a marketing and advertising campaign going on so that people know about the company or product prior to its launch. And in a lot of cases there might be a small group of early adopters, alpha and beta testers who might be using the product before its launch to the wider public.&lt;/p&gt;

&lt;p&gt;This allows the company to see how the product could potentially work when it is ready for launch. Mitigating any server, bugs or breaking errors that can be flagged and fixed beforehand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cewPOuqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/d74fh3kw/image/upload/v1641261545/project-marketing_uxhblc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cewPOuqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/d74fh3kw/image/upload/v1641261545/project-marketing_uxhblc.gif" alt="https://res.cloudinary.com/d74fh3kw/image/upload/v1641261545/project-marketing_uxhblc.gif" width="400" height="226"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-the-product"&gt;
  &lt;/a&gt;
  Building the product
&lt;/h3&gt;

&lt;p&gt;There are infinite ways this can be done and there is no right or wrong answer because every team is different. Any technical stack can be used so this can be adapted to work for anyone. Here is one example of how a team might go about building a product.&lt;/p&gt;

&lt;p&gt;Step 1: User flow/journey&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical Stack&lt;/strong&gt;: Miro/FigJam/Mural&lt;br&gt;
&lt;strong&gt;Description&lt;/strong&gt;: The interaction process a user takes when using the product.&lt;/p&gt;

&lt;p&gt;Step 2: Low fidelity wireframe&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical Stack&lt;/strong&gt;: Figma/Adobe XD&lt;br&gt;
&lt;strong&gt;Description&lt;/strong&gt;: Low fidelity wireframes are the initial blueprints used before creating the website and app screens. They usually have placeholder "lorem ipsum" text.&lt;/p&gt;

&lt;p&gt;Step 3: High fidelity wireframe and design system&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical Stack&lt;/strong&gt;: Figma/Adobe XD&lt;br&gt;
&lt;strong&gt;Description&lt;/strong&gt;: High fidelity wireframes are used to show the look and feel for the product in a more final stage in the design process. They tend to have real content instead of placeholder. In this stage the designer would also create the design system which could include the brand colors, typefaces, and design specifications.&lt;/p&gt;

&lt;p&gt;Step 4: Prototype&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical Stack&lt;/strong&gt;: Figma/Adobe XD&lt;br&gt;
&lt;strong&gt;Description&lt;/strong&gt;: The prototype is a working example of the final application that has been created by the design team. It has working interactions and can be used to show how screens navigate, transitions, click events and much more.&lt;/p&gt;

&lt;p&gt;Step 5: Development back-end&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical Stack&lt;/strong&gt;: Python, Django, PostgreSQL, AWS&lt;br&gt;
&lt;strong&gt;Description&lt;/strong&gt;: This is where a back-end developer would work on the API, databases, servers and anything related to the architecture.&lt;/p&gt;

&lt;p&gt;Step 6: Development front-end&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical Stack&lt;/strong&gt;: HTML, CSS, JavaScript, React, Storybook&lt;br&gt;
&lt;strong&gt;Description&lt;/strong&gt;: Working on the back-end or front-end first comes down to personal preferences. Personally I prefer to have a back-end up and running first so that there is live data. In this stage a front-end developer would work on the UI/UX and get the application to connect to the back-end or any test data. Storybook is like a bridge between the designer and the developer. The design systems and components can be a mirror match between them both.&lt;/p&gt;

&lt;p&gt;Step 7: Deployment&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical Stack&lt;/strong&gt;: AWS&lt;br&gt;
&lt;strong&gt;Description&lt;/strong&gt;: When all stages have been cleared it is time for the MVP to have its official launch. The back-end and front-end should already be online or in a test stage area. So the final step would be to launch the final build and complete the first iteration for the project.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>How to install Tailwind CSS with React and Flowbite</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Fri, 07 Jan 2022 09:51:46 +0000</pubDate>
      <link>https://dev.to/themesberg/how-to-install-tailwind-css-with-react-and-flowbite-3e84</link>
      <guid>https://dev.to/themesberg/how-to-install-tailwind-css-with-react-and-flowbite-3e84</guid>
      <description>&lt;p&gt;React is one of the most popular front-end libraries in the world used by websites such as Facebook, Instagram, Yahoo Mail, Dropbox, and more. &lt;/p&gt;

&lt;p&gt;Coupled with Tailwind CSS and the components from Flowbite you will be able to develop applications faster than ever.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-tailwind-css-with-react"&gt;
  &lt;/a&gt;
  Install Tailwind CSS with React
&lt;/h2&gt;

&lt;p&gt;Follow the next steps to &lt;a href="https://flowbite.com/docs/getting-started/react/"&gt;install Tailwind CSS and Flowbite with Create React App&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the following command in your terminal to create a React application, if you don't already have one:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app my-project
&lt;span class="nb"&gt;cd &lt;/span&gt;my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Install Tailwind CSS by running the following two commands:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; tailwindcss postcss autoprefixer
npx tailwindcss init &lt;span class="nt"&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Configure the template paths inside the &lt;code&gt;tailwind.config.js&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/**/*.{js,jsx,ts,tsx}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Set up the Tailwind directives inside the &lt;code&gt;./src/index.css&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Install Flowbite by running the following command in your terminal:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @themesberg/flowbite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Require Flowbite as a plugin inside your &lt;code&gt;tailwind.config.js&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@themesberg/flowbite/plugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Import the Flowbite JavaScript file inside your main &lt;code&gt;index.js&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;import &lt;span class="s1"&gt;'@themesberg/flowbite'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can start the server by running &lt;code&gt;npm run start&lt;/code&gt; or build the project using &lt;code&gt;npm run build&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-components-in-react"&gt;
  &lt;/a&gt;
  Flowbite components in React
&lt;/h2&gt;

&lt;p&gt;Most of the components from Flowbite will work seamlessly as long as you have Tailwind CSS included in your project. The interactive elements such as dropdowns, tooltips, and modals will work based on the data attributes that you can code directly in your view files.&lt;/p&gt;

&lt;p&gt;You can start using the components from Flowbite inside your React project by only changing the &lt;code&gt;class&lt;/code&gt; attributes to &lt;code&gt;className&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Here's an example of a modal component that you can add inside your &lt;code&gt;App.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default-modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="nx"&gt;modal&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default-modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;hidden&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden overflow-y-auto overflow-x-hidden fixed right-0 left-0 top-4 z-50 justify-center items-center h-modal md:h-full md:inset-0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;relative px-4 w-full max-w-2xl h-full md:h-auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;relative bg-white rounded-lg shadow dark:bg-gray-700&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex justify-between items-start p-5 rounded-t border-b dark:border-gray-600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-xl font-semibold text-gray-900 lg:text-2xl dark:text-white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;Terms&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Service&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default-modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w-5 h-5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currentColor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 20 20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://www.w3.org/2000/svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;evenodd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;clip&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;evenodd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/path&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p-6 space-y-6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-base leading-relaxed text-gray-500 dark:text-gray-400&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;With&lt;/span&gt; &lt;span class="nx"&gt;less&lt;/span&gt; &lt;span class="nx"&gt;than&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;go&lt;/span&gt; &lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;European&lt;/span&gt; &lt;span class="nx"&gt;Union&lt;/span&gt; &lt;span class="nx"&gt;enacts&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt; &lt;span class="nx"&gt;privacy&lt;/span&gt; &lt;span class="nx"&gt;laws&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;its&lt;/span&gt; &lt;span class="nx"&gt;citizens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;companies&lt;/span&gt; &lt;span class="nx"&gt;around&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;updating&lt;/span&gt; &lt;span class="nx"&gt;their&lt;/span&gt; &lt;span class="nx"&gt;terms&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="nx"&gt;agreements&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;comply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-base leading-relaxed text-gray-500 dark:text-gray-400&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;European&lt;/span&gt; &lt;span class="nx"&gt;Union&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;General&lt;/span&gt; &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="nx"&gt;Protection&lt;/span&gt; &lt;span class="nx"&gt;Regulation&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;D&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.)&lt;/span&gt; &lt;span class="nx"&gt;goes&lt;/span&gt; &lt;span class="nx"&gt;into&lt;/span&gt; &lt;span class="nx"&gt;effect&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;May&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;meant&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;ensure&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;common&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="nx"&gt;rights&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;European&lt;/span&gt; &lt;span class="nx"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;It&lt;/span&gt; &lt;span class="nx"&gt;requires&lt;/span&gt; &lt;span class="nx"&gt;organizations&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;notify&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;soon&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;possible&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;risk&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="nx"&gt;breaches&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;could&lt;/span&gt; &lt;span class="nx"&gt;personally&lt;/span&gt; &lt;span class="nx"&gt;affect&lt;/span&gt; &lt;span class="nx"&gt;them&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex items-center p-6 space-x-2 rounded-b border-t border-gray-200 dark:border-gray-600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default-modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default-modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:ring-gray-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Decline&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are currently working on a standalone React project where you will be able to include these interactive elements directly as React components and programatically work with them instead of using just the data attributes.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tailwindcss</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Integrating Rich Text Editor with Django</title>
      <author>Onkar Apte</author>
      <pubDate>Fri, 07 Jan 2022 09:37:09 +0000</pubDate>
      <link>https://dev.to/ieeecsvitc/integrating-rich-text-editor-with-django-k19</link>
      <guid>https://dev.to/ieeecsvitc/integrating-rich-text-editor-with-django-k19</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3RenoXe6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyjz1moc45v3cimjsq71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3RenoXe6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyjz1moc45v3cimjsq71.png" alt="Image description" width="710" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;reating blogs or article-based tutorials is one of the main aims of every web developer after successful deployment of a website. While it is not easy to create a text editor from scratch using JavaScript, it is certainly possible to make use of well-developed open source text editors. So, in this blog we will be integrating "ck editor" with Django.&lt;/p&gt;

&lt;p&gt;Before we move on, I am assuming that all of the following pre-requisites are satisfied:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A thorough understanding of model forms in Django&lt;/li&gt;
&lt;li&gt;Form rendering in template&lt;/li&gt;
&lt;li&gt;Data models&lt;/li&gt;
&lt;li&gt;Python and Django already installed in system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alright! So, with the basics covered, let us quickly learn how to integrate "ck editor" with Django. For the sake of simplicity, I have presented the steps with lucrative code examples.&lt;br&gt;
&lt;strong&gt;Step 1&lt;/strong&gt;&lt;br&gt;
In order to use the features of "ck editor", we first must need to install it. The installation is simple: Just execute the below command in the terminal of your Operating System.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install django-ckeditor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a span of 2-3 minutes, the "ck-editor" would be installed. If it does not, don't worry! Try once again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;br&gt;
It's time to create a new Django project or to open an existing Django project. Once, you are inside the project look for the &lt;strong&gt;setting.py&lt;/strong&gt; file inside the project folder. Inside the file, again, look for a list named "INSTALLED_APPS". Just like adding a new app in the list, add "ckeditor" to the list.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2gHRXegX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujoj6ora1qfd1m7mekv8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2gHRXegX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujoj6ora1qfd1m7mekv8.png" alt="Image description" width="559" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;br&gt;
Now navigate to the &lt;strong&gt;views.py&lt;/strong&gt; file inside the app folder where you wish to include "ck-editor". Inside the &lt;strong&gt;views.py&lt;/strong&gt; file, create a model form linked to one of the models in the &lt;strong&gt;models.py&lt;/strong&gt; file. For instance, I have created a model form named "ArticleForm".&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3m7TYMv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxczs5i8ezaqczm1mgz6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3m7TYMv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxczs5i8ezaqczm1mgz6.png" alt="Image description" width="880" height="384"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;br&gt;
In the same &lt;strong&gt;views.py&lt;/strong&gt; file, inside one of the views where you wish to display the "ck editor", use the model form which you created in the previous step and pass the form to the template through a variable using the render method.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d0rfqLM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nse9u4j3l3mjjb0fouu3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d0rfqLM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nse9u4j3l3mjjb0fouu3.png" alt="Image description" width="809" height="250"&gt;&lt;/a&gt;&lt;br&gt;
Using the &lt;code&gt;form()&lt;/code&gt; method, I have created a new &lt;code&gt;ArticleForm&lt;/code&gt; and then assigned it to a variable simply named "form". At last, I have passed the form to the template &lt;strong&gt;create.html&lt;/strong&gt; as &lt;code&gt;myForm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;&lt;br&gt;
Now, we have to decide which field of the form has to be given the "ck editor" features. To do this, open the &lt;strong&gt;models.py&lt;/strong&gt; file inside the app folder in which you wish to add the "ck editor" features. Locate the model and hence, the required field. To this field, assign the &lt;code&gt;RichTextField()&lt;/code&gt; attribute. Make sure to import &lt;code&gt;RichTextField()&lt;/code&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from ckeditor.fields import RichTextField
class Article(models.Model):
    title = models.CharField(max_length=300)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="creator")
    datePosted = models.CharField(max_length=20, default="")
    timePosted = models.CharField(max_length=20, default="")
    category = models.CharField(max_length=300)
    content = RichTextField(null=True, blank=True, 
    config_name="special", external_plugin_resources=[(
    'youtube', '/static/shareledge/ckeditor-plugins/youtube/youtube/', 'plugin.js',
    )])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In my case, I have used the field &lt;code&gt;content&lt;/code&gt;. At this point of time, the use of &lt;code&gt;RichTextField(null=True, blank=True)&lt;/code&gt; would suffice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;&lt;br&gt;
This is the final step. Head over to the template where the form has to be rendered. We know that any form can be rendered in the template using&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zd4cCvJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ziqphf59kgojt7ef50q0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zd4cCvJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ziqphf59kgojt7ef50q0.png" alt="Image description" width="158" height="49"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since, in my case the form is passed as &lt;code&gt;myForm&lt;/code&gt;, I will just render it using&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;{{ myForm }}&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
. In order to add "ck editor" to the template, I will just have to add&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;{{ myForm.media }}&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 to the code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lgtX5IBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bet2ka8tc8d0cxx4ze2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lgtX5IBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bet2ka8tc8d0cxx4ze2q.png" alt="Image description" width="315" height="152"&gt;&lt;/a&gt;&lt;br&gt;
Of course, I will have to customize each field of the form according to my styling preferences. Part of this is shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rnUqSQAk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkfi4nq159w2emprjyho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rnUqSQAk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkfi4nq159w2emprjyho.png" alt="Image description" width="880" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it! We are done. If we open the webpage, we would be able to see the field rendered as "ck editor".&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FfDwjh4Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kd0igstf57a644qu4y0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FfDwjh4Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kd0igstf57a644qu4y0.png" alt="Image description" width="880" height="549"&gt;&lt;/a&gt;&lt;br&gt;
This field now inherits tons of features such as Bold, Italic, Line spacing, Image insertion, Font colour and much more.&lt;/p&gt;

&lt;p&gt;Additionally, if we look at the admin interface the same field will use the "ck editor" features there itself too.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mOE94J-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ia7hodjyvwjko5fncap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mOE94J-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ia7hodjyvwjko5fncap.png" alt="Image description" width="880" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, that's it about this blog. I hope you find the information in this blog useful. Feel free to comment below anything related to the content.  &lt;/p&gt;

</description>
      <category>django</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Quick Tips - Laravel</title>
      <author>Morcos Gad</author>
      <pubDate>Fri, 07 Jan 2022 09:24:58 +0000</pubDate>
      <link>https://dev.to/morcosgad/quick-tips-laravel-3n1e</link>
      <guid>https://dev.to/morcosgad/quick-tips-laravel-3n1e</guid>
      <description>&lt;p&gt;Let's get started quickly and find some tips so I can share their fun with you.&lt;/p&gt;

&lt;p&gt;You may assign multiple middleware to the route by passing an array of middleware names to the middleware method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/profile'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'auth'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'first'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'second'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Version Laravel 8 uses more requests help you with your project&lt;br&gt;
&lt;a href="https://laravel.com/docs/8.x/requests"&gt;https://laravel.com/docs/8.x/requests&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin/*'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;routeIs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'admin.*'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;url&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$urlWithQueryString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fullUrl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fullUrlWithQuery&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'phone'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nv"&gt;$method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;isMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When assigning middleware, you may also pass the fully qualified class name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Http\Middleware\EnsureTokenIsValid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/profile'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;EnsureTokenIsValid&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When assigning middleware to a group of routes, you may occasionally need to prevent the middleware from being applied to an individual route within the group. You may accomplish this using the &lt;code&gt;withoutMiddleware&lt;/code&gt; method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Http\Middleware\EnsureTokenIsValid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nc"&gt;EnsureTokenIsValid&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/profile'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;withoutMiddleware&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nc"&gt;EnsureTokenIsValid&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The findOrFail method also accepts a list of ids&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Retrives the user...&lt;/span&gt;
&lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;findOrFail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Throws a 404 because the user doesn't exist...&lt;/span&gt;
&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;findOrFail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Retrives all 3 users...&lt;/span&gt;
&lt;span class="nv"&gt;$users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;findOrFail&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// Throws because it is unable to find *all* of the users&lt;/span&gt;
&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;findOrFail&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use value() method to get single column's value from the first result of a query&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Instead of&lt;/span&gt;
&lt;span class="nc"&gt;Integration&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// You can use&lt;/span&gt;
&lt;span class="nc"&gt;Integration&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'active'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// or this to throw an exception if no records found&lt;/span&gt;
&lt;span class="nc"&gt;Integration&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;valueOrFail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'active'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Laravel 8.69 released with "Str::mask()" method which masks a portion of string with a repeated character&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$userEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// username@domain.com&lt;/span&gt;

&lt;span class="nv"&gt;$maskedEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// user***************&lt;/span&gt;

&lt;span class="c1"&gt;// If needed, you provide a negative number as the third argument to the mask method&lt;/span&gt;
&lt;span class="c1"&gt;// which will instruct the method to begin masking at the given distance from the end of the string&lt;/span&gt;

&lt;span class="nv"&gt;$maskedEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Str&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// use******domain.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can send e-mails to a custom log file&lt;br&gt;
You can set your environment variables like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="no"&gt;MAIL_MAILER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;
&lt;span class="no"&gt;MAIL_LOG_CHANNEL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And also configure your log channel&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="s1"&gt;'mail'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'driver'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'single'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'path'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;storage_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'logs/mails.log'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s1"&gt;'level'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'LOG_LEVEL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'debug'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you enjoyed the code&lt;br&gt;
Source :- &lt;a href="https://www.youtube.com/watch?v=bnXauabSFYI"&gt;https://www.youtube.com/watch?v=bnXauabSFYI&lt;/a&gt;&lt;br&gt;
Source :- &lt;a href="https://www.youtube.com/watch?v=YzBGmdnGtbY&amp;amp;t=83s"&gt;https://www.youtube.com/watch?v=YzBGmdnGtbY&amp;amp;t=83s&lt;/a&gt;&lt;br&gt;
Source :- &lt;a href="https://github.com/LaravelDaily/laravel-tips"&gt;https://github.com/LaravelDaily/laravel-tips&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Run Spark locally with Docker</title>
      <author>Barbara</author>
      <pubDate>Fri, 07 Jan 2022 09:22:47 +0000</pubDate>
      <link>https://dev.to/barbara/run-spark-locally-with-docker-4com</link>
      <guid>https://dev.to/barbara/run-spark-locally-with-docker-4com</guid>
      <description>&lt;p&gt;When we work with Spark we usually want to first prototype to see if everything works as expected, before we start up big machines. &lt;br&gt;
I spent an afternoon googling and starting and stopping the docker container to finally configure some lines of code.&lt;br&gt;
So I want to share my basic local setup here, so maybe it will help someone to save some time.&lt;/p&gt;

&lt;p&gt;When looking for a docker image with spark and jupyter we find the &lt;a href="https://hub.docker.com/r/jupyter/pyspark-notebook"&gt;pyspark-notebook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my case I need to access AWS, so I need some additional libaries for the docker image.&lt;br&gt;
To add them, I created a new &lt;code&gt;Dockerfile&lt;/code&gt; based on the pyspark-notebook.&lt;br&gt;
The additional libraries needed are &lt;code&gt;boto3&lt;/code&gt; for AWS and &lt;code&gt;python-dotenv&lt;/code&gt; to access environment variables.&lt;br&gt;
I decided to install boto3 with apt-get as this will be installed on the operating system level. Make sure to add &lt;code&gt;-y&lt;/code&gt; if the operating system is asking something during the install process, we will answer with &lt;code&gt;yes&lt;/code&gt;. &lt;br&gt;
The dotenv is added via a requirements.txt so it will installed via pip, the python package manager.&lt;/p&gt;

&lt;p&gt;Normally for the notebooks you need to have a token, but when we develop locally, we want to access the jupyter-notebook quickly and stay on the same site, without having to lookout for the new token everytime we change something.&lt;br&gt;
So we need an custom configuration for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "NotebookApp": {
        "allow_root": true,
        "token": ""
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the Dockerfile we copy everything we need into to &lt;code&gt;/home/jovyan/&lt;/code&gt; directory. After some more googling I found out that this user &lt;em&gt;jovyan&lt;/em&gt; stands for &lt;em&gt;jupyter like environment&lt;/em&gt;. Just in case you where also wondering.&lt;/p&gt;

&lt;p&gt;The final Dockerfile looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM jupyter/pyspark-notebook
USER root

# add needed packages
RUN apt-get update &amp;amp;&amp;amp; apt-get install python3-boto3 -y

# Install Python requirements
COPY requirements.txt /home/jovyan/
RUN pip install -r /home/jovyan/requirements.txt

COPY jupyter_lab_config.json /home/jovyan/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;docker-compose.yaml&lt;/code&gt; we&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;need to map the ports, &lt;/li&gt;
&lt;li&gt;map the volumes to save the notebook locally, otherwise everything would be lost, once we shut down the container and point to the env file. &lt;/li&gt;
&lt;li&gt;tell Docker where the &lt;code&gt;.env&lt;/code&gt; file is located&lt;/li&gt;
&lt;li&gt;tell Docker to build the Dockerfile in the same folder, instead of using an image.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The final &lt;code&gt;docker-compose.yaml&lt;/code&gt; looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: "3.7"

services:
  # jupyterlab with pyspark
  pyspark:
    #image: jupyter/pyspark-notebook
    build: .
    env_file: 
      - .env
    environment:
      JUPYTER_ENABLE_LAB: "yes"
    ports:
      - "8888:8888"
    volumes:
      - ./data:/home/jovyan/work

# docker run --rm -p 10000:8888 -e JUPYTER_ENABLE_LAB=yes -v "$PWD":/home/jovyan/work jupyter/pyspark-notebook
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To start the container use &lt;code&gt;docker-compose up&lt;/code&gt;, if you changed something in the config use &lt;code&gt;docker-compose up --force-recreate --build&lt;/code&gt; to make sure the changes are build.&lt;/p&gt;

&lt;p&gt;Have fun.&lt;/p&gt;

&lt;p&gt;You can find the code also &lt;a href="https://github.com/BarbaraJoebstl/data-engineering-nd/tree/master/data-lakes/project-data-lakes/compose"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>spark</category>
      <category>jupyter</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My Web3 Journey: Day 100 of #100daysofWeb3</title>
      <author>Eda</author>
      <pubDate>Fri, 07 Jan 2022 08:46:39 +0000</pubDate>
      <link>https://dev.to/edatweets_/my-web3-journey-day-100-of-100daysofweb3-2pfi</link>
      <guid>https://dev.to/edatweets_/my-web3-journey-day-100-of-100daysofweb3-2pfi</guid>
      <description>&lt;p&gt;It's day 100. Oh dear, where do I even start? &lt;/p&gt;

&lt;p&gt;Honestly, I would have never imagined I'd be getting into the web3/crypto space at the beginning of 2021 (or at any point in my career). But here we are, &lt;strong&gt;100 days into the web3 challenge that completely got me hooked.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Now, this is my story. I'm by no means an advisor of any sort, and I failed terribly on the way. Nevertheless, I want to share my journey, focusing on what I learned and takeaways.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#more-down-the-rabbit-hole-web3"&gt;
  &lt;/a&gt;
  More down the rabbit hole web3
&lt;/h1&gt;

&lt;p&gt;If you follow me on Twitter or read my articles, you already know that I am pretty much overly attached to web3 at this point.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-it-all-started"&gt;
  &lt;/a&gt;
  Where it all started
&lt;/h2&gt;

&lt;p&gt;How I got to web3 is not magical, it's not the promises or community. These are why I'm still here, but I got in as an investor (sounds way cooler than just saying money😀). Then I learned about the technology and community. I was fascinated. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-challenge-100daysofcode-100daysofweb3"&gt;
  &lt;/a&gt;
  The challenge: #100daysofCode / #100daysofweb3
&lt;/h2&gt;

&lt;p&gt;I started the challenge to &lt;strong&gt;learn and code every day using web3 technologies.&lt;/strong&gt; I had already been learning about web3 for some time, and being a developer, I wanted to understand the technology stack and build myself. &lt;/p&gt;

&lt;p&gt;If you haven't read the first half of my journey, I'd highly recommend you to jump to this &lt;a href="https://eda.hashnode.dev/my-web3-journey-day-50-of-100daysofweb3"&gt;post&lt;/a&gt;. It covers how I got into the web3 world in detail and what I did throughout the first 50 days of the challenge. &lt;/p&gt;

&lt;p&gt;Important to mention, it wasn't purely a coding journey for me. I became very interested in technical writing (still surprised that I have such a passion for writing) and started to create content about web3. You can find my posts &lt;a href="https://eda.hashnode.dev/"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Worth mentioning is that I did not code or write 100 days straight. I gave breaks, and I'd highly recommend taking breaks on the way because it gets very overwhelming pretty fast.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-im-still-excited-about-web3"&gt;
  &lt;/a&gt;
  Why I'm &lt;em&gt;still&lt;/em&gt; excited about web3
&lt;/h2&gt;

&lt;p&gt;After the first 50 days, I continued to learn about the web3 landscape. I was learning new technologies every day. This part is the most interesting because &lt;strong&gt;these technologies made me realize how siloed I'd become.&lt;/strong&gt; The challenges and focuses were a lot different than what I was used to being in the web2 world.&lt;/p&gt;

&lt;p&gt;This is one of the main reasons I am thrilled to be in the web3 space; &lt;strong&gt;I'm always learning and pushing myself.&lt;/strong&gt; Of course, there are complex problems in the web2 world, but no denying that web2 has invisible boundaries on what you can do and the level of experiments, especially in large cooperations. &lt;/p&gt;

&lt;p&gt;On a related note, I wrote a blog post about why I'm excited about web3 in detail; you can check it out &lt;a href="https://eda.hashnode.dev/why-im-excited-about-web30"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building"&gt;
  &lt;/a&gt;
  Building
&lt;/h2&gt;

&lt;p&gt;In the first 50 days, I created basic smart contracts and learned solidity. The second half looks a lot different. &lt;strong&gt;I learned more about the technology stack and tried out protocols to extend my app's functionality&lt;/strong&gt;; now, my contracts had more going on. I used technologies such as &lt;a href="https://chain.link/"&gt;Chainlink&lt;/a&gt;, &lt;a href="https://thegraph.com/en/"&gt;The Graph&lt;/a&gt;, &lt;a href="https://www.arweave.org/"&gt;Arweave&lt;/a&gt;,  &lt;a href="https://ceramic.network/"&gt;Ceramic Networks&lt;/a&gt; and many more. &lt;/p&gt;

&lt;p&gt;Here's a &lt;a href="https://edgeandnode.com/blog/defining-the-web3-stack"&gt;post&lt;/a&gt; by Nader covering the web3 tech stack; it's the most comprehensive guide I've come across on this topic. I've bookmarked this post and frequently go back it to because 100 days is not enough. &lt;/p&gt;

&lt;p&gt;I've added the resources I used below; there are lots!   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-community"&gt;
  &lt;/a&gt;
  The community
&lt;/h2&gt;

&lt;p&gt;Another part that I wasn't expecting was the &lt;strong&gt;community aspect.&lt;/strong&gt; I wasn't part of the web3 or tech Twitter community before starting or, to be honest, any internet community — and didn't plan to be. Now I can't iterate how important the communities, web3 Twitter and Developer DAO, have become. &lt;/p&gt;

&lt;p&gt;It can be overwhelming in the web3 world because there are &lt;strong&gt;so many new things to learn&lt;/strong&gt;, the crypto space has a very &lt;strong&gt;negative narrative&lt;/strong&gt; in the outside world, and it's in the &lt;strong&gt;experimental stages&lt;/strong&gt; with no clear guidelines or regulations. &lt;/p&gt;

&lt;p&gt;These don't seem like that big of a challenge when you're part of the community. In my case, I was doubting myself and couldn't make bold decisions but seeing so many people around me being excited and creating cool projects made me want to continue my journey. Can testify that social proof is a very powerful influence. &lt;/p&gt;

&lt;p&gt;I've come to realize that the web3 community is very small at the moment. Many people tell me that I'm also early (which I now agree with); &lt;strong&gt;getting in early on is really beneficial because you can connect with people you take as an example.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;To highlight the effect of internet communities, I want to take a moment to mention &lt;a href="https://www.constitutiondao.com/"&gt;Constitution DAO&lt;/a&gt;. I never thought I'd ever want to buy the US constitution. But somehow, I contributed to doing so and followed the auction with such huge excitement. Basically, a DAO (decentralized autonomous organization) was formed to buy the US Constitution at &lt;a href="https://www.sothebys.com/en/digital-catalogues/the-constitution-of-the-united-states"&gt;Sotheby's&lt;/a&gt;. The DAO raised over 40 Million Dollars in less than a week! The DAO didn't end buying the constitution, but nevertheless it showed me that &lt;strong&gt;DAO's are a thing&lt;/strong&gt; and can bring together many people to coordinate and work together for a common goal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-downside"&gt;
  &lt;/a&gt;
  The downside
&lt;/h2&gt;

&lt;p&gt;Now I don't appreciate hyped articles and don't want this one to be like that. No space is perfect, and &lt;strong&gt;web3 has its flaws.&lt;/strong&gt; I mentioned the downside of the space in both my &lt;a href="https://eda.hashnode.dev/why-im-excited-about-web30"&gt;previous article&lt;/a&gt; and the &lt;a href="https://eda.hashnode.dev/my-web3-journey-day-50-of-100daysofweb3"&gt;50 days article&lt;/a&gt;; you can find detailed overviews in those posts. With that, let me also add a short recap here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;No regulations:&lt;/strong&gt; the space is experimental and at its infancy stages. There's no regulations and/or guidelines to protect users or creators.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Too much going on:&lt;/strong&gt; it can be hard even to start because there are too many new technologies to learn. From 100 days ago, it seems that there is way more beginner content; I have listed them below.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Monetary Incentives:&lt;/strong&gt; people have financial incentives. Make sure to understand the motivations of the people and the platforms. Is it for the money or the tech?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The Language:&lt;/strong&gt; there are too many abbreviations and new terms. Even "web3" itself was a term I learned after getting into the web3/crypto world. Disclaimer: no one calls web2, web2 in that world. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Web3 has many sceptics. I definitely think new ideas should be challenged. However, I'm not a big fan aggressive nature of comments in the space.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-mistakes-amp-takeaways"&gt;
  &lt;/a&gt;
  My mistakes &amp;amp; takeaways
&lt;/h2&gt;

&lt;p&gt;I am learning, teaching and having fun. Again this is my story, and here are some takeaways from my #100daysofCode/#100daysofweb3 challenge:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Create and build&lt;/strong&gt;: create content, build apps, write, read, basically do anything you're interested in. Everyone is new here, don't wait until you learn about everything because no one can know everything! It took me &lt;strong&gt;a lot&lt;/strong&gt; of time to become a &lt;strong&gt;"doer"&lt;/strong&gt;, but it has been one of the decisions. It will also bring you many opportunities. I didn't apply for a single job and got more offers than I would ever imagine. No one reached out from my LinkedIn profile; they didn't even know my last name or background. But, I was creating exciting content. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Your content engine is key&lt;/strong&gt;: it's all about the content you consume. The podcast, the tutorials, articles all make up what you learn and produce. Make sure to find the content that you enjoy the most and can get the most out of. There were days where I was on Twitter, just browsing for way too long to find some interesting content. Now I have a clear content engine, which guides me to build my next app or create my next post. It's not a tweet that I may come across on Twitter after realizing I spent hours reading about a random argument on Twitter. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Take breaks&lt;/strong&gt;: I was overwhelmed. I was in front of my pc for a few days, just staring and not having any motivation. It's not sustainable to cancel all your activities and lock yourself in your room. That's what I was doing. Now I have realized that those events and conversations inspire me and give me ideas and new perspectives. You can go out for a run, meet your friends or read a sci-fi book; doing things outside of web3 will not put you behind. In the country, it'll make you relax and motivate you. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Prioritize&lt;/strong&gt;: The web3 space moves quickly. Every day there is something new. You don't need to keep up with every news or know every technology in detail. There were days where I tried to keep up with everything going on and other days where I felt that I knew nothing looking at the pile of technologies I hadn't even heard of. One of the essential things is prioritizing and focusing on a single area. Once I started to do that, I became more confident that I was making progress and knew what to do. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't forget to document your progress&lt;/strong&gt;: I wasn't as structured as I wanted to be, the projects were more organized but my learnings were all over the place (notion, word, notes etc.). I'd suggest taking a structured approach because I found myself spending a lot of time finding and reviewing my notes.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#would-i-recommend-starting-the-challenge"&gt;
  &lt;/a&gt;
  Would I recommend starting the challenge?
&lt;/h2&gt;

&lt;p&gt;It wasn't an easy challenge, but the answer is a definite &lt;strong&gt;YES!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modify the challenge to suit your style best.&lt;/strong&gt; For example, I gave breaks, and I didn't post on Twitter every day. If you like to share every day, that's perfectly fine, but it put extra pressure on me. Additionally, my challenge was not only to build and ship products but it was in between building projects, creating content and learning about web3. &lt;/p&gt;

&lt;p&gt;It also doesn't matter what level you are on with coding or web3; this is for personal development. It's really about what you achieve over a specific time, not how you compare to others. &lt;/p&gt;

&lt;p&gt;I learned a lot and feel very proud of the outcome; with that, there's so much more to learn!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#how-to-start-in-the-web3-world"&gt;
  &lt;/a&gt;
  How to start in the web3 world?
&lt;/h1&gt;

&lt;p&gt;Most of my recommendations from day50 have not changed; I did expand on the content.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Start by doing&lt;/strong&gt;&lt;br&gt;
I cannot iterate how important it is to understand what you can do in the web3 world before getting in. Do anything related to crypto but &lt;strong&gt;DO it&lt;/strong&gt;. Don't just listen to a podcast or read a blog post. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setup your own wallet, exchange some tokens, stake some assets, get an ens name etc. &lt;/li&gt;
&lt;li&gt;Check out  &lt;a href="https://rabbithole.gg/"&gt;RabbitHole&lt;/a&gt;, an educational platform focusing on teaching how to use web3 applications. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Read, research, repeat&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Look into the blockchains and protocols websites to get more information. &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.useweb3.xyz/"&gt;UseWeb3&lt;/a&gt; by &lt;a href="https://twitter.com/wslyvh"&gt;Wesley&lt;/a&gt;. A curated overview of the web3 world. I highly recommend bookmarking this. It has most of the resources I have included here and many more.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.web3.university/"&gt;Web3 university&lt;/a&gt;: a library of Web3 educational resources &lt;/li&gt;
&lt;li&gt;Podcasts: &lt;a href="https://www.youtube.com/c/Bankless"&gt;Bankless&lt;/a&gt;, &lt;a href="https://www.youtube.com/c/TheDefiant"&gt;The Defiant&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCECH_RfQJOShGkYIVEXAX7w"&gt;RabbitHole&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCBH5VZE_Y4F3CMcPIzPEB5A"&gt;Real Vision&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt; Newsletter: &lt;a href="https://www.notboring.co/"&gt;Not Boring Capital Newsletter&lt;/a&gt;- It's not only about web3, but most of the pieces are. &lt;/li&gt;
&lt;li&gt;Here is a great &lt;a href="https://gabygoldberg.notion.site/f7050e62461143d49345e7b46eb5576b?v=c02511c4230c44ce9a1a03c9757da524"&gt;web3 reading list&lt;/a&gt; by &lt;a href="https://twitter.com/gaby_goldberg"&gt;Gaby&lt;/a&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Building&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://buildspace.so/"&gt;Buildspace&lt;/a&gt;: Learn about web3 by creating projects, they continue to expand and add new projects! They now have Solana and Avalanche projects. &lt;/li&gt;
&lt;li&gt; &lt;a href="https://twitter.com/dabit3"&gt;Nader Dabit&lt;/a&gt;: make sure to follow &lt;a href="https://www.youtube.com/naderdabit"&gt;Nader's youtube&lt;/a&gt;. He has live streams deep-diving into the technology and the code with many people.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/scaffold-eth/scaffold-eth#-scaffold-eth"&gt;Scaffold-Eth&lt;/a&gt;: It's a tool by &lt;a href="https://twitter.com/austingriffith"&gt;Austin Griffith&lt;/a&gt; to build decentralized applications. There are some quests  &lt;a href="https://speedrunethereum.com/"&gt;here&lt;/a&gt; that you can follow along. &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.useweb3.xyz/tutorials"&gt;UseWeb3 Tutorials&lt;/a&gt;: a curated list of many tutorials and guides&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.web3.university/"&gt;Web3 university&lt;/a&gt;: a library of Web3 educational resources &lt;/li&gt;
&lt;li&gt; Web3 Twitter; &lt;a href="https://twitter.com/edatweets_/status/1478669191733522432"&gt;here&lt;/a&gt; are some of my favorite builders and communities in the space. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Get Involved&lt;/strong&gt; &lt;br&gt;
There are so many different areas you can get involved in. Join a DAO, be active on Twitter, reach out to people. It's not just smart contract experts or developers that can get involved, but there are different areas from marketing, writing, designing etc. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Find and learn about DAO's on  &lt;a href="https://daocentral.com/"&gt;DAO Central&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Come and join &lt;a href="https://twitter.com/developer_dao"&gt;Developer DAO&lt;/a&gt;. We're a community of web3 enthusiasts learning and building in the space. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you love what you do and having fun, there are many employment opportunities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check out &lt;a href="https://blog.kacieahmed.com/jobs-in-web3-how-i-landed-a-job-in-4-months"&gt;this article&lt;/a&gt; by &lt;a href="https://twitter.com/Haezurath"&gt;Kacie&lt;/a&gt;; it's a great overview of what opportunities and how to prepare&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.useweb3.xyz/jobs"&gt;UseWeb3 Job Board&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Follow the projects and people on Twitter, create a project and reach out to the teams! In the web3 world, Twitter is the new Linkedin. Here's a &lt;a href="https://twitter.com/developer_dao/status/1478781316699148292"&gt;thread&lt;/a&gt; to see who is hiring right now! &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;So what's next for me? Well, I'm not going anywhere! You'll be hearing more of my adventures in web3 👩‍💻&lt;/p&gt;

&lt;p&gt;Thank you for reading! If you have any questions or comments, drop them below or reach out to me from  &lt;a href="https://twitter.com/edatweets_"&gt;Twitter!&lt;/a&gt; &lt;/p&gt;

</description>
      <category>web3</category>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>blockchain</category>
    </item>
  </channel>
</rss>
