<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Stats for all stories
‚ùå10 LIES that COMPANIES tell about CYBERSECURITY</title>
      <author>Dotnetsafer</author>
      <pubDate>Tue, 31 Aug 2021 08:59:49 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/stats-for-all-stories-10-lies-that-companies-tell-about-cybersecurity-nd1</link>
      <guid>https://dev.to/dotnetsafer/stats-for-all-stories-10-lies-that-companies-tell-about-cybersecurity-nd1</guid>
      <description>&lt;p&gt;How many times have we heard:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúOur employees know about cibersecurity‚Äù üòé&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or better yet‚Ä¶&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúWe are a small company, they will not hack us‚Äù ü§ì&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tell me &lt;strong&gt;HOW MANY TIMES??&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The other question I ask myself is:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-many-companies-go-bankrupt-after-a-cyber-attack-wasnt-it-that-they-had-everything-under-control"&gt;
  &lt;/a&gt;
  Why do many companies go bankrupt after a cyber attack? Wasn‚Äôt it that they had ‚Äúeverything under control‚Äù? ü§î
&lt;/h2&gt;

&lt;p&gt;These are one of the few &lt;strong&gt;lies&lt;/strong&gt; that companies tell about cybersecurity. These lies are great for self-delusion and great for cybercriminals.&lt;/p&gt;

&lt;p&gt;Cyber attacks are nothing new and with the arrival of the pandemic they have increased a lot. The reason for this is simple: &lt;strong&gt;Businesses have gone the digitization path with outdated security measures.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another reason is that although it has been more than a year and a half since the beginning of the pandemic, many employees prefer to continue telecommuting while the company continues to invest the same &lt;strong&gt;OR LESS&lt;/strong&gt; in its cybersecurity plan despite being an easier target for an attacker.&lt;/p&gt;

&lt;p&gt;The severity is so great that according to data from Sophos, one of the world‚Äôs leading cybersecurity companies and collected by the startup NUUBB, specialized in cloud services for companies, shows the &lt;strong&gt;top 10 reasons why companies do not invest in cybersecurity.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#we-are-a-small-company-i-dont-think-we-are-the-target-of-a-hacker"&gt;
  &lt;/a&gt;
  We are a small company, I don‚Äôt think we are the target of a Hackerü§ì
&lt;/h2&gt;

&lt;p&gt;This is the &lt;strong&gt;first lie&lt;/strong&gt; that companies tell to deceive themselves. Most of the organizations that have been victims of cyberattacks are precisely because they believe that they are not ‚Äúattractive‚Äù to an attacker. The reality is that &lt;strong&gt;ANY&lt;/strong&gt; company (both large and small) with which it has a minimum of digital presence, is already a &lt;strong&gt;good target&lt;/strong&gt; for a cybercriminal.&lt;/p&gt;

&lt;p&gt;Another reason is that most small business &lt;strong&gt;cyberattacks are not carried out by professional hackers&lt;/strong&gt;, but by ‚Äúopportunists‚Äù looking for easy prey, such as small companies that have a low cybersecurity investment believing that &lt;strong&gt;they are not attractive to a cybercriminal.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#we-dont-need-advanced-security-technologies-installed-everywhere"&gt;
  &lt;/a&gt;
  We don‚Äôt need advanced security technologies installed everywhere ü§ì
&lt;/h2&gt;

&lt;p&gt;Many IT teams still believe that security software is more than enough to stop attacks and they don‚Äôt need security for their servers. The reality is that the list of attack techniques that try to avoid detection by IT security teams is growing. Some of the clearest examples are &lt;strong&gt;social engineering, memory injected malware, compressed malicious code&lt;/strong&gt; or &lt;strong&gt;‚Äúfileless‚Äù malware attacks.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another bad habit is to leave the servers unprotected. The reality of this is that &lt;strong&gt;servers are the main target&lt;/strong&gt; of cyber attackers, since it would simply be enough for them to steal access credentials with social engineering. And this doesn‚Äôt just apply to Windows, in fact, cybercriminals often install backdoors on Linux machines to use as safe havens and maintain access to a target‚Äôs network.&lt;/p&gt;

&lt;p&gt;For all these reasons, &lt;strong&gt;cloud experts&lt;/strong&gt; continue to insist that, even having security policies, an antivirus, a firewall and a 24/7 operations center ‚Ä¶ the probability that a cyber attacker will find a way to hack the system, &lt;strong&gt;is high.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#we-have-very-good-security-policies"&gt;
  &lt;/a&gt;
  We have very good security policiesü§ì
&lt;/h2&gt;

&lt;p&gt;Clearly a company &lt;strong&gt;must have&lt;/strong&gt; security and user policies. But they must be reviewed and updated every time changes are made or new devices connected to the network are added. The best way to verify these policies, experts say, is to test them using control sessions, pentesting tests, and tests of disaster recovery plans.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#servers-can-be-protected-by-changing-the-service-ports-and-with-double-authentication"&gt;
  &lt;/a&gt;
  Servers can be protected by changing the service ports and with double authentication ü§ì
&lt;/h2&gt;

&lt;p&gt;Yes, we know that the &lt;strong&gt;RDP&lt;/strong&gt; default port is &lt;strong&gt;3389&lt;/strong&gt;, that the &lt;strong&gt;SSH&lt;/strong&gt; port is &lt;strong&gt;22&lt;/strong&gt; and that the &lt;strong&gt;SMB&lt;/strong&gt; port is &lt;strong&gt;445&lt;/strong&gt;. At first glance, changing that default port seems like a VERY good way to prevent attackers from finding open ports, But reality is not like that.&lt;/p&gt;

&lt;p&gt;Computer or network scans will identify any open services, regardless of port. Let‚Äôs see an example üëá&lt;/p&gt;

&lt;p&gt;We are going to use the &lt;strong&gt;nmap&lt;/strong&gt; tool to scan a computer on our network to see what it returns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nmap &lt;span class="nt"&gt;-sS&lt;/span&gt; 192.168.1.200
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wo3wnvxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/690/1%2A72Kff823KOWJemxgtxuEEg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wo3wnvxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/690/1%2A72Kff823KOWJemxgtxuEEg.jpeg" alt="nmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see that in 40 seconds, &lt;strong&gt;nmap&lt;/strong&gt; has scanned the entire range of ports, returning only the open ones.&lt;/p&gt;

&lt;p&gt;This change the default ports, it is only a waste of time since the level of protection it offers is null.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#we-block-ips-from-russia-china-and-north-korea-that-seem-dangerous"&gt;
  &lt;/a&gt;
  We block IPs from Russia, China and North Korea that seem dangerous ü§ì
&lt;/h2&gt;

&lt;p&gt;Have you heard of &lt;strong&gt;Proxy&lt;/strong&gt; or &lt;strong&gt;VPN?&lt;/strong&gt; Their main function is to avoid the direct connection of the user with the server, that is, they allow to &lt;strong&gt;hide the user‚Äôs IP&lt;/strong&gt; so that the server to which they are connecting cannot know it.&lt;/p&gt;

&lt;p&gt;This would allow an attacker from Russia (for example) to connect to a VPN by obtaining an IP address from another country, so blocking would no longer do any good.&lt;/p&gt;

&lt;p&gt;Besides, &lt;strong&gt;blocking IPs from some countries is unlikely to cause any harm&lt;/strong&gt;, but it could give a false sense of security. Cybercriminals can be found anywhere in the world, with access points that include the US, the Netherlands, and the rest of Europe.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#we-have-updated-backups-in-case-of-ransomware"&gt;
  &lt;/a&gt;
  We have updated backups in case of Ransomware ü§ì
&lt;/h2&gt;

&lt;p&gt;It is clear that backups are very important for the company and above all update them on a daily basis. The problem comes when in most companies, those backup copies are connected to the network. With that they are vulnerable to any Ransomware that can erase or encrypt them. In this case, from &lt;strong&gt;Dotnetsafer&lt;/strong&gt; we always recommend following the &lt;strong&gt;3:2:1 SYSTEM&lt;/strong&gt; üëá&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt; copies of everything&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using &lt;strong&gt;2&lt;/strong&gt; different systems&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Of which &lt;strong&gt;1&lt;/strong&gt; is always disconnected from the network&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#our-workers-know-about-security"&gt;
  &lt;/a&gt;
  Our workers know about securityü§ì
&lt;/h2&gt;

&lt;p&gt;According to the State of Ransomware 2021, &lt;strong&gt;22% of organizations&lt;/strong&gt; believe they will be affected by ransomware in the next 12 months because it is difficult to prevent end users from compromising security.&lt;/p&gt;

&lt;p&gt;The easiest techniques are &lt;strong&gt;phishing emails and social engineering&lt;/strong&gt;. Many times these messages are handwritten and addressed to the right person.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Will a worker really know how to detect that message among the thousands that can reach him per month? ü§î&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#we-have-recovery-systems-in-case-of-ransomware"&gt;
  &lt;/a&gt;
  We have recovery systems in case of Ransomware ü§ì
&lt;/h2&gt;

&lt;p&gt;Attackers today &lt;strong&gt;make far fewer mistakes&lt;/strong&gt; and the encryption process has improved, so relying on experts to find a loophole that can undo the damage is extremely rare. Automatic backups such as Windows Volume Shadow Copies are also removed by most modern ransomware and &lt;strong&gt;overwrite the original data stored on the disk&lt;/strong&gt;, making recovery impossible beyond ransom payment.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#we-can-pay-the-ransom-of-a-ransomware"&gt;
  &lt;/a&gt;
  We can pay the ransom of a Ransomware ü§ì
&lt;/h2&gt;

&lt;p&gt;Other data emerging from the 2021 ransomware state, a ransom-paying organization recovers on average around 65% of its data. A meager 8% recovered all their data and 29% recovered less than half. Therefore, paying the ransom, even when it seems like the easiest option and is covered by the cyber insurance policy, is not an easy solution to recover. Similarly, restoring data is only part of the recovery process. In most cases, ransomware &lt;strong&gt;completely disables&lt;/strong&gt; computers, and software and systems must be rebuilt from scratch before data can be restored.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#if-we-survive-a-ransomware-we-will-be-fine"&gt;
  &lt;/a&gt;
  If we survive a Ransomware we will be fine ü§ì
&lt;/h2&gt;

&lt;p&gt;Ransomware is just the point where criminals want the company to know that they are there and what they have done. Adversaries have likely been on a network for days, before &lt;strong&gt;launching ransomware, exploring, disabling or deleting backups, finding machines&lt;/strong&gt; with high-value data or applications to target for encryption, &lt;strong&gt;deleting information&lt;/strong&gt;, and &lt;strong&gt;installing payloads&lt;/strong&gt;. additional tools such as rear doors. Maintaining a presence on the victim‚Äôs networks allows attackers to launch a second attack if they choose.&lt;/p&gt;




&lt;p&gt;In the words of &lt;strong&gt;Nicolas Blasyk&lt;/strong&gt;, CEO of &lt;strong&gt;NUUBB&lt;/strong&gt;, ‚Äúit is very important to be clear that we live with cybercriminals, becoming more present and stronger after the pandemic, taking advantage of those security gaps that SMEs have suffered due to the forced acceleration of digitization. At NuuBB We believe it is essential to raise the awareness of employees about the types of attacks they may suffer, since some of them we can avoid ourselves, such as phishing, malicious emails that most of the time we do not realize, we click on the link and we fall into the trap. One of the best solutions to prevent these attacks that we always recommend is the outsourced Backup service with data recovery ‚Äú.&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>security</category>
      <category>dotnet</category>
      <category>ransomware</category>
    </item>
    <item>
      <title>How to Filter an Array with JavaScript ‚òï</title>
      <author>Ga√´l Thomas</author>
      <pubDate>Tue, 31 Aug 2021 08:53:04 +0000</pubDate>
      <link>https://dev.to/gaelgthomas/how-to-filter-an-array-with-javascript-31kg</link>
      <guid>https://dev.to/gaelgthomas/how-to-filter-an-array-with-javascript-31kg</guid>
      <description>&lt;p&gt;A practical tutorial on how to filter arrays in JavaScript using the Array Filter method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filter-an-array-using-the-array-filter-method"&gt;
  &lt;/a&gt;
  Filter an array using the Array Filter Method
&lt;/h2&gt;

&lt;p&gt;In JavaScript, all arrays have a filter method that you can use in your programs. This built-in method creates a new array based on your instructions.&lt;br&gt;
You will give these instructions as a parameter of the filter method. Each time the filter method iterates on the array, it will call your function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yellowArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yellowArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output: ['yellow', 'yellow']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-your-own-function-to-filter-an-array"&gt;
  &lt;/a&gt;
  Create your own function to filter an array
&lt;/h3&gt;

&lt;p&gt;If you want to understand better how the filter method works, you can create your own function.&lt;br&gt;
Let's take the example above, but we will replace the second line with our function call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayToFilter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elementToFilter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arrayToFilter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;elementToFilter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yellowArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yellowArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output: ['yellow', 'yellow']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, if you want only to compare strings or numbers, you can re-create this function pretty fast!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filter-an-array-of-objects-using-the-array-filter-method"&gt;
  &lt;/a&gt;
  Filter an array of objects using the Array Filter Method
&lt;/h2&gt;

&lt;p&gt;If you want to filter an array of objects, you can still use the built-in method. The only difference will be in the comparison. You will need to select the object property value to compare.&lt;/p&gt;

&lt;p&gt;In the example below, we now have books. Each book is an object and has a color property. As in the previous parts, we want to create a new array for yellow books.&lt;/p&gt;

&lt;p&gt;Let's see how we can do that!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You don't know JS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Eloquent JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript: The Definitive Guide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yellowBooksArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yellowBooksArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output: [&lt;/span&gt;
&lt;span class="c1"&gt;//  { name: "You don't know JS", color: 'yellow' },&lt;/span&gt;
&lt;span class="c1"&gt;//  { name: 'Eloquent JavaScript', color: 'yellow' },&lt;/span&gt;
&lt;span class="c1"&gt;//]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Thanks for reading until here!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I hope you learned from it! üéâ&lt;/p&gt;

&lt;p&gt;I'm starting to tweet more consistently! If you want to get more tips and resources about web programming -&amp;gt; &lt;a href="https://twitter.com/gaelgthomas"&gt;Find me on my Twitter üê¶&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 17, Tkinter ‚Äî a fast and easy way to create GUI applications.</title>
      <author>Aatmaj</author>
      <pubDate>Tue, 31 Aug 2021 08:51:57 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-17-tkinter-a-fast-and-easy-way-to-create-gui-applications-1if</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-17-tkinter-a-fast-and-easy-way-to-create-gui-applications-1if</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-begin-with-gui-in-python"&gt;
  &lt;/a&gt;
  Today we will begin with GUI in Python!
&lt;/h2&gt;




&lt;p&gt;Python has a inbuilt package for GUI handling known as 'Tkinter'. This GUI toolkit is available on most Unix platforms, including macOS, as well as on Windows systems.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note- Tkinter provides a powerful object-oriented interface to the Tk-GUI toolkit. GUI requires a lot of OOP stuff. OOP python is still not covered in this course, and would be subsequently covered after GUI is completed. So till that time, don't worry if OOP things are not 100% clear. While learning GUI it is important to understand how to design things rather than how they are implemented by python. Learning OOP concepts will throw light upon how they are implemented and things will start getting clearer and clearer.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#but-what-is-tkinter"&gt;
  &lt;/a&gt;
  But what is Tkinter?
&lt;/h3&gt;

&lt;p&gt;The Tkinter package is actually an interface to the GUI toolkit, called as Tk-GUI. However, Tkinter is not the only GUI Programming toolkit for Python. It is one of the most common and easy to learn interface. It is the only framework that‚Äôs built into the Python standard library. Other notable interfaces are &lt;a href="https://wxpython.org/"&gt;wxPython&lt;/a&gt; and JPython (&lt;a href="https://www.jython.org/"&gt;Jython&lt;/a&gt;. wxPython is an open-source Python interface for wxWindows, while JPython is a Python port for Java. JPython boasts of giving Python scripts a seamless access to Java class libraries on the local machine. Other alternatives include-  &lt;a href="https://en.wikipedia.org/wiki/PyQt"&gt;PyQt&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/PySide"&gt;PySide&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Pygame"&gt;Pygame&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Pyglet"&gt;Pyglet&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/PyGTK"&gt;PyGTK&lt;/a&gt;. You can check them out at the wiki links provided.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The name Tkinter comes from Tk interface. Tkinter was written by Fredrik Lundh. It is free software released under a &lt;a href="https://en.wikipedia.org/wiki/Python_license"&gt;Python license&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Advantages of Tkinter&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tkinter is lightweight and a bit easier to use than others.&lt;/li&gt;
&lt;li&gt;Tkinter is cross-platform, so the same code works on all systems ( Windows, macOS, and Linux)&lt;/li&gt;
&lt;li&gt;Moreover, Tkinter elements are built using native operating system elements, So they easy camouflage to the system &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantage of Tkinter&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tkinter is outdated... No Expired might be the right word. The UI looks old, or rather ancient. If you want to build a good looking shiny application, then Tkinter is not for you!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is why Tkinter is ideal for just studying and exploring GUI in Python.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checking-if-tkinter-is-properly-installed-or-not"&gt;
  &lt;/a&gt;
  Checking if Tkinter is properly installed or not.
&lt;/h4&gt;

&lt;p&gt;Let's see how to check if Tkinter is properly installed on the system, and which version is installed.&lt;br&gt;
We can do that by typing the command &lt;code&gt;python -m tkinter&lt;/code&gt; in the command line. This opens a small box with two buttons as shown below. Inside the box, the version of the Tcl/Tk is shown.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P7bARoE8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck11zv8wg3sw46bsx90c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P7bARoE8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck11zv8wg3sw46bsx90c.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kwDd5B4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kr167dc5gwoa6cvcevx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kwDd5B4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kr167dc5gwoa6cvcevx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Didn't work for you? Well it didn't work for me either.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\Users\aatma&amp;gt;python -m tkinter
Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings &amp;gt; Manage App Execution Aliases.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my device, the &lt;code&gt;py&lt;/code&gt; keyword opens python, so typing in &lt;code&gt;py -m tkinter&lt;/code&gt; worked for me.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Common mistake-- We need to type this in the command prompt, and not the python command line!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This won't work-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\Users\aatma&amp;gt;py
Python 3.9.5 (tags/v3.9.5:0a7dcbd, May  3 2021, 17:27:52) [MSC v.1928 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&amp;gt;&amp;gt;&amp;gt; python -m tkinter
  File "&amp;lt;stdin&amp;gt;", line 1
    python -m tkinter
              ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we click on the click me button, The click me is surrounded with square brackets as shown.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5wTMZbRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbgmqgksth2riywg8k0o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5wTMZbRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbgmqgksth2riywg8k0o.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 Each time we click it, an additional pair of paranthesis encloses the text on the button-clickme&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fo4uXXJq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chy3zziimshi2x3p8e9c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fo4uXXJq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chy3zziimshi2x3p8e9c.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bLUzYoCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdtwz2xsetocmma0yn4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bLUzYoCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdtwz2xsetocmma0yn4j.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Clicking the 'quit' button closes the box.&lt;/p&gt;




&lt;p&gt;That's all for this part. Excited? Before you even realize, we will be making applications much more powerful and exciting than this one. So stay tuned for the next parts of the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning Python&lt;/a&gt; Course.&lt;/p&gt;

&lt;p&gt;üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•&lt;br&gt;
Follow me on GitHub for updates.......&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>How Sendoso is using Kafka for Event-Driven Architecture</title>
      <author>Amna Malik</author>
      <pubDate>Tue, 31 Aug 2021 08:14:50 +0000</pubDate>
      <link>https://dev.to/sendoso/how-sendoso-is-using-kafka-for-event-driven-architecture-3l4b</link>
      <guid>https://dev.to/sendoso/how-sendoso-is-using-kafka-for-event-driven-architecture-3l4b</guid>
      <description>&lt;p&gt;&lt;strong&gt;Event-Driven Architecture using Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sendoso started as a single repository and a monolith application, just like any web application. A single repository and application have benefits. Any developer can clone the repo, build, deploy, and dive into any aspect of the application without having to navigate another repository. After all these years, however, our repository has grown significantly. Build and deploy steps take a good part of the hour. The cognitive load has increased too. No developer has the capacity or time to learn the details of every scenario, nor should they be expected to do so. Daily builds and deployments to production require sign-offs from multiple teams. A single bug or unexplained behavior anywhere in the application can derail the release process, and impact every team‚Äôs progress.&lt;/p&gt;

&lt;p&gt;The key, of course, is splitting the monolith into manageable subdomains.  The goal is to have subdomains with bounded context that‚Äôs easily be understood by its domain expert. The same process can be repeated recursively as a subdomain gets increases in scope over time.&lt;/p&gt;

&lt;p&gt;There‚Äôs a flip side to this. While engineers and test engineers benefit from service-oriented architecture, SOA means operational overhead, infrastructure, and observability costs. Without tooling and automation, SRE/Ops team will bear the brunt of deploying, monitoring, and maintaining multiple applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Microservices and Sendoso&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Microservices are a set of services that act together to make a whole application operate. Microservices are self-reliant and need to coordinate as well, this makes development and deployment quick. So, if a developer needs to update a specific service, they will only update that service, and the rest of the services will remain the same. It makes the process faster.&lt;br&gt;
For creating microservices, we have decided to start with the low-hanging fruit. Any new functionality which is not tightly dependent on the existing application is being moved to its service. Using a shared database in a microservice architecture is an anti-pattern. Service interfaces/APIs should be used for information exchange between different services and the core. One note of caution - introducing too many APIs will also imply coupling or incorrectly defined service boundaries. That means that code is separated but data isn‚Äôt decoupled.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oPq2YqR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b96wasakjfn5id36nn12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oPq2YqR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b96wasakjfn5id36nn12.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hello World Service and Cost Reduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To make new service creation easy, we are templatizing services &lt;em&gt;a ‚Äúhello world‚Äù&lt;/em&gt; service that can be cloned, built, and deployed to an environment. The service template comes with monitoring and alerting built-in. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Confide on Kafka for Data Processing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Message-passing in a distributed system is key for scale. We decided to use Kafka as a message bus. Kafka is a distributed platform based on the publish and subscribe (pub-sub) model. This model contains two main entities, producer and consumer. As the names indicate, Producer produces the message and consumer consumes the message. Producer publishes messages to the data stream. Consumer, which is subscribed to the data stream, processes the messages. There is a data stream between producer and consumer. The data stream acts as a broker between the producer and consumer for data exchange. The exchange of data or messages between the producer and consumer happens through the broker as there is no connection between the producer and consumer.&lt;/p&gt;

&lt;p&gt;Kafka has a solid Java Virtual Machine (JVM) based stream processing framework. It enables a computer to run Java programs as well as programs written in other languages that are also compiled to Java bytecode, which would have been an obvious first choice for a greenfield project.&lt;/p&gt;

&lt;p&gt;A number of Sendoso applications are ruby-based. We decided to use Karafka gem for consumers and waterdrop/ruby-kafka gems for producers. This works well, with just one pod, we were able to move 1GB between producer and consumer in roughly a minute, using t3.small AWS MSK brokers. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source of Truth&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Event sourcing is an effective architectural pattern to record changes to the application state. Event sequence is important - we need changes as they were originally applied. incoming events are first persisted into Kafka and then processed by services independently. Kafka, hence, becomes our source of truth (SOT), a data source that gives a complete picture of the data object as a whole. This, however,  meant dramatic changes in our core application. Our source of truth is still the core database, but we generate events in Kafka when data gets persisted.  To ensure transactional behavior, we employed &lt;a href="https://microservices.io/patterns/data/transactional-outbox.html"&gt;Transactional Outbox pattern&lt;/a&gt;. Essentially, we &lt;strong&gt;a)&lt;/strong&gt; created a new events table in the database, &lt;strong&gt;b)&lt;/strong&gt; wrote event data in the same transaction when we update our SOT table. Kafka Connect is subsequently used to read this table and insert records in relevant Kafka topics. This ensures that we never have an inconsistent situation where data was inserted in the database but the event is not added to Kafka topic or vice versa. We evaluated a few connectors for sourcing data from Mysql (&lt;a href="https://github.com/confluentinc/kafka-connect-jdbc/blob/master/src/main/java/io/confluent/connect/jdbc/JdbcSourceConnector.java"&gt;JdbcSourceConnector&lt;/a&gt;, and Debezium). Our scenario was supported out of the box in JdbcSourceConnector, making it possible to have one event table in Mysql where different rows could be routed to a relevant topic based on the topic field.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TransactionalOutbox Table Schema:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Topic&lt;/th&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Payload&lt;/th&gt;
&lt;th&gt;Timestamp&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The connector picks a row and creates the event (Key, Payload) in the respective Kafka Topic. The timestamp field helps JdbcSourceConnector to track its progress.&lt;br&gt;
The connector is configured as follows in Kafka Connect, which is deployed in Kubernetes: &lt;br&gt;
Notice how key, topic, payload, and timestamp fields are used. &lt;br&gt;
&lt;a href="https://docs.confluent.io/kafka-connect-jdbc/current/source-connector/source_config_options.html"&gt;https://docs.confluent.io/kafka-connect-jdbc/current/source-connector/source_config_options.html&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At Least Once and In Order Guarantees&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kafka Connect provides robust defaults out of the box. E.g. to ensure delivery of every event, it sets &lt;code&gt;acks=all&lt;/code&gt; so that the producer doesn't move forward until the data is committed to at least ISR (in-sync-replicas). Kafka-connect does it by default, but we needed to do it wherever we are directly producing to Kafka topics: &lt;br&gt;
&lt;a href="https://docs.confluent.io/platform/current/installation/configuration/producer-configs.html#producerconfigs_acks"&gt;https://docs.confluent.io/platform/current/installation/configuration/producer-configs.html#producerconfigs_acks&lt;/a&gt; &lt;br&gt;
It is a good idea to set in-sync-replicas to at least 2 or preferably 3; so that Kafka will not lose data in the face of a broker crash. &lt;br&gt;
There are few other configurations which are important to ensure in-order guarantee. E.g., setting &lt;code&gt;max.in.flight.requests.per.connection=1&lt;/code&gt; and following timeout values to a reasonably high value. &lt;code&gt;request.timeout.ms&lt;/code&gt;, &lt;code&gt;max.block.ms&lt;/code&gt;, &lt;code&gt;delivery.timeout.ms&lt;/code&gt;.&lt;br&gt;
In terms of multiple partitions in the topic, the object key should be used for partitioning. This ensures that all updates to the object land on the same partition and are consumed by the same consumer, hence applied in the original order.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nbc-nKjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm51fbt21lgcpicxulo8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nbc-nKjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm51fbt21lgcpicxulo8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retry and Dead Letter Queues&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We also used Retry and dead letter queues as explained &lt;a href="https://eng.uber.com/reliable-reprocessing/"&gt;here&lt;/a&gt;. This ensures progress if some poison or invalid event has entered the stream. However, in this case, the messages may be processed out of order, so (asynchronous) retry queues will not be suitable for scenarios where in-order delivery is important.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kafka Observability and Operations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/obsidiandynamics/kafdrop"&gt;Kafdrop&lt;/a&gt;&lt;/em&gt; is a web UI for viewing Kafka topics and browsing consumer groups. The tool displays information such as brokers, topics, partitions, consumers. It also has topic creation and deletion functionality. Besides that, it allows us to observe consumer lag, and messages from any partition and offset. &lt;br&gt;
While this is not a replacement for monitoring and observability, it has been beneficial to visualize what is happening on the Kafka brokers. We have configured separate Kafdrop pods for each MSK cluster.&lt;br&gt;
For monitoring and alerting Kafka metrics, we are relying on &lt;a href="https://github.com/newrelic/nri-prometheus"&gt;newrelic-prometheus integration&lt;/a&gt;, to forward MSK metrics to New Relic. This has also been deployed as a Kubernetes pod.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next In Line&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is an important step in the right direction. It also brings many new challenges. One common issue with breaking into microservices is that the contributors lose sight of the overall context. The drawbacks can be mitigated by correctly drawing the responsibility/service boundaries and adjusting the ownership as the domain evolves. Another popular option is to use orchestration services i.e. a service that talks to many other microservices. The latter microservices may not need the full picture, but the orchestration service provides the cognitive context. Similarly, as we add more services, we plan on investing in load balancing, security, circuit-breakers, and request throttling between services. A service mesh will be an important consideration at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acknowledgments&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kafka is complemented by many open-source tools and technologies. For this project, we benefited from Kafka, kafdrop, Karafka, Kafka-connect, and Kafka MySQL connector, to name a few. Shout out to Maciej Mensfeld for his responses to our queries related to throughput issues in Karafka. &lt;/p&gt;

</description>
      <category>kafka</category>
      <category>microservices</category>
      <category>eventdriven</category>
      <category>technology</category>
    </item>
    <item>
      <title>I can't solve problems, what should I do?</title>
      <author>Adarsh Navneet Sinha</author>
      <pubDate>Tue, 31 Aug 2021 07:56:59 +0000</pubDate>
      <link>https://dev.to/geeky01adarsh/i-can-t-solve-problems-what-should-i-do-3ei7</link>
      <guid>https://dev.to/geeky01adarsh/i-can-t-solve-problems-what-should-i-do-3ei7</guid>
      <description>&lt;p&gt;Can you all relate to the above image either while solving tough problems on LeetCode, GeeksforGeeks, some other websites, or working with projects?&lt;br&gt;
Yes, we all are the same and it's the most common doubt among beginners or say codenewbie. I can relate to it and believe me or not it's becomes so demotivating to continue with same. When I was a beginner, thoughts often came to my mind that this programming sort of thing is not made for me, and thought of giving up. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dczgQyEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elyp9yf80z8w3syoeccg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dczgQyEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elyp9yf80z8w3syoeccg.jpg" alt="Frustrated and demotivated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After reading so many articles over the internet, I learned the correct way of learning and improving my productivity. Did I give up?&lt;br&gt;
No, remember the most important rule of being a programmer:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TN1oi3wd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75odud4k4y1ta6at0dx0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TN1oi3wd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75odud4k4y1ta6at0dx0.jpg" alt="Never Give Up"&gt;&lt;/a&gt;&lt;br&gt;
Curious to know what to do in such conditions? Stay in the loop and I will help you with that.&lt;br&gt;
These tips will be useful regardless of whether you are doing development or problem-solving.&lt;br&gt;
But there is a famous rule in programming that says ‚Äúnever copy-paste code that you don‚Äôt understand‚Äù.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8--vbEnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfufaqa238qzub9wxyen.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8--vbEnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfufaqa238qzub9wxyen.jpg" alt="Confused"&gt;&lt;/a&gt;&lt;br&gt;
Confused? I am saying to break into someone's code but never copy them.&lt;br&gt;
Well, you have there are few steps that you have to follow. &lt;br&gt;
First try to understand the logic from it and try to code by yourself, if you can't then follow the below steps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Type the complete code by looking through it. (yes, yes, I know I just said not to do copy paste and now this, patience, patience).&lt;/li&gt;
&lt;li&gt;Make sure that your program or application is functioning as expected, i.e. confirm that block of code really did solve your problem.&lt;/li&gt;
&lt;li&gt;Delete the copy and pasted block of code line by line.&lt;/li&gt;
&lt;li&gt;Each time you delete a line, check to see what‚Äôs been broken. Does the app still run? What are the error codes? What has deleting that line of code done to your program?&lt;/li&gt;
&lt;li&gt; Even if you think you know what a line of code does, delete it any way. The most important task as a programmer is to always test your assumptions against the outcome. The most enjoyable feeling as a programmer is for the real world to validate your assumptions. You know how nice it is when your boyfriend/girlfriend/husband/wife says those magical three words.

&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6I6HRZXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56l7fme9hql9vcwzjk91.png" alt="AC"&gt;
&lt;em&gt;0 Errors&lt;/em&gt; or &lt;em&gt;All Testcases Passed&lt;/em&gt; or &lt;em&gt;AC&lt;/em&gt; or &lt;em&gt;I was right&lt;/em&gt;.
It‚Äôs like that, but better.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By breaking the solution code, line-by-line, you‚Äôll learn and understand what each line does and why it‚Äôs been written. This is a far better way to use code from other people than just pasting it in and hoping for the best. Once you understand why each of those lines was necessary, the next time you encounter a similar problem, you‚Äôll be able to tease out the problem and solve it yourself.&lt;/p&gt;

&lt;p&gt;You might now probably ask, ok I will follow these tips but how will I know if I have improved or not? What's my progress. &lt;/p&gt;

&lt;p&gt;Well for that what you need is to bookmark the question or note down where your code was failing. Once you have took help from any source, come back after some time let's say 2-3 weeks and try to code now by yourself. Still can't? Continue this loop until you can solve without looking to solution.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n5X2jqeL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j5jz3p1ydw8je4vfnij.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n5X2jqeL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j5jz3p1ydw8je4vfnij.jpg" alt="Confident"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feeling confident and motivated now? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes, All the very best for your journey. &lt;br&gt;
No? Feel free to reach out to me at my social handles &lt;a href="https://linktr.ee/geeky01adarsh"&gt;@geeky01adarsh&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let me know your thoughts in the comment box below. &lt;br&gt;
Keep Coding!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>motivation</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Ansible Playbook that will configure Docker &amp; dynamically update the inventory with newly created Docker Container IP</title>
      <author>Suraj Warbhe</author>
      <pubDate>Tue, 31 Aug 2021 07:51:56 +0000</pubDate>
      <link>https://dev.to/surajwarbhe/ansible-playbook-that-will-configure-docker-dynamically-update-the-inventory-with-newly-created-docker-container-ip-41fn</link>
      <guid>https://dev.to/surajwarbhe/ansible-playbook-that-will-configure-docker-dynamically-update-the-inventory-with-newly-created-docker-container-ip-41fn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#steps-for-rhel-8"&gt;
  &lt;/a&gt;
  STEPS: (For RHEL 8)
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Enable SSH in the Container using Dockerfile&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build and Push this image to the Docker Hub&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ansible Play that will launch and configure the Docker Container and webserver inside it&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#step-1-enable-ssh-in-the-container-using-dockerfile"&gt;
  &lt;/a&gt;
  STEP 1: Enable SSH in the Container using Dockerfile
&lt;/h2&gt;

&lt;p&gt;Dockerfile has two types of keyword that helps to configure Image.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build Time: Executes at build time and in the build phase all run time commands are skipped. 
examples are &lt;code&gt;FROM&lt;/code&gt;, &lt;code&gt;RUN&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;Run Time: Run time commands are &lt;code&gt;ENTRYPOINT&lt;/code&gt;, &lt;code&gt;CMD&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#dockerfile"&gt;
  &lt;/a&gt;
  DockerFile
&lt;/h3&gt;

&lt;p&gt;It is compulsory to give the docker/image file name as &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To use Base OS from container Image: Dockerfile Keyword: &lt;code&gt;FROM&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM centos:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;To run OS Specific command: Dockerfile keyword: &lt;code&gt;RUN&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;RUN yum install openssh-server -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Installing OpenSSH-server
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;RUN yum install openssh-server -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Configure SSH Server for password authentication
By Default password authentication is disabled we need to add the below string in the SSHd service configuration file to enable password authentication.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;RUN echo "PasswordAuthentication yes" &amp;gt;&amp;gt; /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Generating Keys
For each of the key types (RSA, DSA, ECDSA, and ED25519) for which host keys do not exist, generate the host keys with the default key file path, an empty passphrase, default bits for the key type, and default comment.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;RUN ssh-keygen -A
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Changing the Password of the root user
&lt;code&gt;chpasswd&lt;/code&gt; command is used to change the password although &lt;code&gt;passwd&lt;/code&gt; command can also do the same. But it changes the password of one user at a time so for multiple users, &lt;code&gt;chpasswd&lt;/code&gt; is used.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# RUN echo "user_name:password" | chpasswd
RUN echo "root:centos" | chpasswd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Default password for this image will be &lt;code&gt;centos&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;To start service at runtime
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CMD ["/usr/sbin/sshd", "-D"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#final-image"&gt;
  &lt;/a&gt;
  Final Image:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM centos:latest
RUN yum install openssh-server -y
RUN yum install openssh-server -y
RUN echo "PasswordAuthentication yes" &amp;gt;&amp;gt; /etc/ssh/sshd_config
RUN ssh-keygen -A
RUN echo "root:centos" | chpasswd
CMD ["/usr/sbin/sshd", "-D"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2-build-and-push-docker-image-to-the-docker-hub"&gt;
  &lt;/a&gt;
  STEP 2 : Build and push Docker Image to the Docker Hub
&lt;/h2&gt;

&lt;p&gt;Use below command this build your created image&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t dockerhub_id/imagename:image_version fileLocation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-push-the-image-to-the-docker-registry"&gt;
  &lt;/a&gt;
  To push the image to the Docker registry.
&lt;/h4&gt;

&lt;p&gt;First, we need to give a username and password of the Docker Hub &lt;br&gt;
For this run the below command-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run below command to push your created Image&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker push dockerhub_id/imagename:image_version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can use my Docker Image to perform further task.&lt;br&gt;
To Pull my Docker image, use below command-&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker pull surajwarbhe/ssh_centos:v1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-ansible-configuration-and-playbooks"&gt;
  &lt;/a&gt;
  STEP 3 : Ansible Configuration and Playbooks
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#1-create-an-inventory-file"&gt;
  &lt;/a&gt;
  1. Create an Inventory file
&lt;/h4&gt;

&lt;p&gt;üî∂ Create an inventory file with the extension &lt;code&gt;(.txt)&lt;/code&gt; and leave it blank.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vim ip.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-create-ansible-configuration-file"&gt;
  &lt;/a&gt;
  2. Create Ansible Configuration file
&lt;/h4&gt;

&lt;p&gt;üî∂ Create a file with the extension &lt;code&gt;(.cfg)&lt;/code&gt; in the directory &lt;code&gt;/etc/ansible/&lt;/code&gt;, here I have a configuration file with named &lt;code&gt;ansible.cfg&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vim  /etc/ansible/ansible.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üî∂ Write below statements in the configuration file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[defaults]
inventory=/root/ip.txt
host_key_checking=false
deprecation_warnings=false
command_warnings=false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-create-and-run-ansible-playbook-to-setup-docker"&gt;
  &lt;/a&gt;
  3. Create and Run Ansible Playbook (To setup Docker)
&lt;/h4&gt;

&lt;p&gt;üî∂ Create an Ansible playbook with an extension &lt;code&gt;(.yml)&lt;/code&gt; or &lt;code&gt;(.yaml)&lt;/code&gt;, here I have created a playbook with named &lt;code&gt;dockertask.yaml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- hosts: localhost
  vars_prompt:
      - name: container_name
        prompt: "Docker Container Name: "
        private: no

  vars:
          - image_name: surajwarbhe/ssh_centos:v1

  tasks:
      - name: Creating Repo for yum
        yum_repository:
            name: docker
            file: docker
            description: Docker Yum Repo
            baseurl: https://download.docker.com/linux/centos/7/x86_64/stable/
            gpgcheck: no

      - name: Installing Python3...
        command: "yum -y install python3"
      - name: Installing Docker Software...
        command: "yum install -y  docker-ce --nobest"

      - name: Starting Docker services...
        service:
            name: "docker"
            state: started
            enabled: yes

      - name: Installing Docker Library...
        command: "pip3 install docker-py"

      - name: pull an image
        docker_image:
            name: "{{ image_name }}"
            source: pull

      - name: "Launching {{ container_name }} Container"
        docker_container:
            name: "{{ container_name }}"
            image: "{{ image_name }}"
            state: started
            interactive: yes
            detach: yes
            tty: yes

      - name: "Container Info"
        docker_container_info:
            name: "{{ container_name }}"
        register: dinfo

      - name: "Printing IP of Docker container..."
        debug:
              msg: "{{ dinfo.container.NetworkSettings.IPAddress}}"

      - name: updating ansible inventory  with new docker info.......
        blockinfile:
            path: "/root/ip.txt"
            block: |
                    [docker]
                    {{ dinfo['container']['NetworkSettings']['IPAddress'] }} ansible_user=root ansible_ssh_pass=centos  ansible_connection=ssh

  handlers:
  - name: docker
    yum:
        name: docker-ce
        state: present
        allow_downgrade: yes
        skip_broken: yes

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üî∂ To run the playbook use the below command-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ansible-playbook &amp;lt;filename&amp;gt;

ansible-playbook dockertask.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initially, it will ask us container name.&lt;br&gt;
I have provided container name as &lt;code&gt;Arth14&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9-GpcUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wln2l5z1cnmjmofe684w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9-GpcUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wln2l5z1cnmjmofe684w.png" alt="root@localhost_~_ansible_tasks 31-08-2021 09_48_59 AM"&gt;&lt;/a&gt;&lt;br&gt;
Yesss, Our playbook run successfully !&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And we got a &lt;code&gt;IP address&lt;/code&gt; of newly created Docker Container as &lt;code&gt;172.17.0.3&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;üî∂ Let‚Äôs Check ip.txt file&lt;br&gt;
Earlier, we had leave ip.txt as empty but now it is updated dynamically with newly created &lt;code&gt;IP address&lt;/code&gt; Docker container.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rR4G9FIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mc25d11xbpg675v496e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rR4G9FIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mc25d11xbpg675v496e.png" alt="root@localhost_~_ansible_tasks 31-08-2021 09_56_10 AM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-4-check-connectivity-with-docker-container"&gt;
  &lt;/a&gt;
  STEP 4 : Check connectivity with Docker Container
&lt;/h4&gt;

&lt;p&gt;We have to check ansible connectivity with newly created Docker Container so that we can perform &lt;code&gt;SSH&lt;/code&gt; and perform further operations on that. &lt;br&gt;
Use below command to check connectivity-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ansible all -m ping
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VaS2DU5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnkqiwvj27vv9dtjqp2z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VaS2DU5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnkqiwvj27vv9dtjqp2z.png" alt="root@localhost_~_ansible_tasks 31-08-2021 09_55_55 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you get &lt;code&gt;Success&lt;/code&gt; message in a green color and &lt;code&gt;Ping Pong&lt;/code&gt; at the end, it means everything is OKAY!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#step-5-configuration-of-apache-webserver-copying-the-testing-page-and-starting-the-apache-web-service"&gt;
  &lt;/a&gt;
  STEP 5 : Configuration of Apache Webserver, Copying the testing Page, and Starting the Apache web service
&lt;/h4&gt;

&lt;p&gt;üî∂ Create an Ansible playbook with an extension &lt;code&gt;(.yml)&lt;/code&gt; or &lt;code&gt;(.yaml)&lt;/code&gt;, here I have created a playbook with named &lt;code&gt;webserver.yaml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- hosts: docker
  tasks:
    - name: "Installing Httpd service"
      package:
          name: "httpd"
          state: present

    - name: "Creating html file"
      copy:
          content : "&amp;lt;b&amp;gt;&amp;lt;center&amp;gt;HEY! TASK 14.2 Done successfully &amp;lt;/center&amp;gt;&amp;lt;/b&amp;gt;"
          dest: "/var/www/html/index.html"

    - name: "Starting Httpd Service"
      command: "/usr/sbin/httpd"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üî∂ To run the playbook use the below command-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ansible-playbook &amp;lt;filename&amp;gt;

ansible-playbook webserver.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ytcK-TyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0se46wapnpxzo6lxr7oy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ytcK-TyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0se46wapnpxzo6lxr7oy.png" alt="root@localhost_~_ansible_tasks 31-08-2021 09_56_45 AM"&gt;&lt;/a&gt;&lt;br&gt;
Yesss, Our playbook run successfully !&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-6-testing"&gt;
  &lt;/a&gt;
  STEP 6 : Testing
&lt;/h4&gt;

&lt;p&gt;Use below command to test your configuration OR you can directly type your Docker container's IP address over Browser-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# curl &amp;lt;ip_address_of_Docker_container&amp;gt;

curl 172.17.0.3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ujFBPvP0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9u2hlg7qhrrd9os4z1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ujFBPvP0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9u2hlg7qhrrd9os4z1a.png" alt="root@localhost_~_ansible_tasks 31-08-2021 10_15_50 AM"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OY7_r_OW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eejaohv6pr6c6gcdq7wc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OY7_r_OW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eejaohv6pr6c6gcdq7wc.png" alt="567 (2)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;YAY! The Web-Server is configured successfully inside Container.&lt;/strong&gt; üí•üí•&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#github-link-httpsgithubcomsurajwarbheansiblewebserinsidedockercontainer"&gt;
  &lt;/a&gt;
  GitHub Link: &lt;a href="https://github.com/surajwarbhe/Ansible-Webser-inside-Docker-Container"&gt;https://github.com/surajwarbhe/Ansible-Webser-inside-Docker-Container&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KuN2YuwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p.kindpng.com/picc/s/646-6464705_thanks-for-reading-png-transparent-png.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KuN2YuwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://p.kindpng.com/picc/s/646-6464705_thanks-for-reading-png-transparent-png.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ansible</category>
      <category>docker</category>
      <category>github</category>
      <category>html</category>
    </item>
    <item>
      <title>AWS API Gateway</title>
      <author>Ajit Singh</author>
      <pubDate>Tue, 31 Aug 2021 07:49:36 +0000</pubDate>
      <link>https://dev.to/this-is-learning/aws-api-gateway-323g</link>
      <guid>https://dev.to/this-is-learning/aws-api-gateway-323g</guid>
      <description>&lt;p&gt;AWS API gateway is a fully managed service for developers to fully manage, publish, create, and secure API's. Using API gateway you can create both restful and WebSocket API's. API Gateway has no minimum fees or startup costs. You pay for the API calls you receive and the amount of data transferred out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Easy monitoring - Adding other monitoring services to api&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Security Controls - Authorize access to your APIs with AWS Identity and Access Management (IAM) and Amazon Cognito. If you use OAuth tokens, API Gateway offers native OIDC and OAuth2 support.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Throttling - API throttling is automatically added so our back ends don't receive unnecessary loads&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;API development- Run multiple versions of the same API using API gateway.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Serverless API - We can also use this to build a server less API by building a proxy from the gateway to lambda.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
    <item>
      <title>Understanding React as a system - Part 1</title>
      <author>Stef</author>
      <pubDate>Tue, 31 Aug 2021 07:49:13 +0000</pubDate>
      <link>https://dev.to/stefee/understanding-react-as-a-system-part-1-2knn</link>
      <guid>https://dev.to/stefee/understanding-react-as-a-system-part-1-2knn</guid>
      <description>&lt;p&gt;I want to write about React to try and help people to understand what it is, how it works, why it is good, and what it is good for.&lt;/p&gt;

&lt;p&gt;This is perhaps a rather lofty ambition. A lot of people have written about React already, so why do I feel the need to write this now?&lt;/p&gt;

&lt;p&gt;What I've found is that most of the writing about React is aimed at front-end developers who are experienced in developing websites and other kinds of user interface code. I think maybe this is because the adoption of React in many teams has hinged on convincing the front-end developers in the team that it's something that they should be using.&lt;/p&gt;

&lt;p&gt;React is very popular now in teams of various sizes, which is great, or at least I think so. What this means though is that developers from various different schools of thought are now developing products with React, many of whom might not have chosen to use it otherwise.&lt;/p&gt;

&lt;p&gt;My aim in writing this now is to try and help you to make the most of React even if, like me, you don't necessarily see yourself as a front-end developer.&lt;/p&gt;

&lt;p&gt;I am also hoping that in the process of writing this I might be able to clarify my own mental model of React. So if you are experienced with React then hopefully this will still be interesting to read and you will learn as much from reading it as I have learned from writing it.&lt;/p&gt;

&lt;p&gt;This is the first post of a two part series. In this introductory post I want to lay down a baseline understanding of React and what it does for us. The second part will go into more detail about how a React application works at runtime so we can try to build a mental model of React as a system.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#building-user-interfaces"&gt;
  &lt;/a&gt;
  ‚ÄúBuilding user interfaces‚Äù
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://reactjs.org/"&gt;official React website&lt;/a&gt; says this: ‚ÄúReact is a JavaScript library for &lt;strong&gt;building user interfaces&lt;/strong&gt;‚Äù.&lt;/p&gt;

&lt;p&gt;I think this is a good sentence. üëç&lt;/p&gt;

&lt;p&gt;Let's just talk about user interfaces for a moment.&lt;/p&gt;

&lt;p&gt;User interfaces are how human beings interact with our computer code.&lt;/p&gt;

&lt;p&gt;We have some choices when we are creating an interface for humans to use: we can try to create an interface that is intuitive and easy to use straight away, but this will require us to account for a lot of potential outcomes because we did not tell the user what we expect them to do ahead of time.&lt;/p&gt;

&lt;p&gt;Alternatively, we can create a very streamlined interface that works in a very specific way, but this will require the user to learn exactly how to use it before they can achieve anything.&lt;/p&gt;

&lt;p&gt;These are both valid choices and it depends who we have in mind as our user.&lt;/p&gt;

&lt;p&gt;Humans can be quite messy and unpredictable, so if we do decide to make an intuitive user interface then it's often necessary for us to grapple with a large amount of complexity; an intuitive user interface will need to be able to react appropriately &lt;em&gt;on the fly&lt;/em&gt; to our users doing things we did not expect or want them to do.&lt;/p&gt;

&lt;p&gt;And perhaps, as we learn more about our users, we will need to find new ways in which to accomodate them and so the complexity of interface will increase over time.&lt;/p&gt;

&lt;p&gt;In short, user interfaces are often &lt;strong&gt;necessarily complex&lt;/strong&gt;. Our goal then is not to make them simple, but to find ways to manage that complexity.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react-helps-us-to-manage-complexity"&gt;
  &lt;/a&gt;
  React helps us to manage complexity
&lt;/h2&gt;

&lt;p&gt;When we're writing code, it is generally hard to manage large amounts of complexity.&lt;/p&gt;

&lt;p&gt;We may not be able to avoid complexity when we're building a user interface, but we can try to break it down and make it more manageable.&lt;/p&gt;

&lt;p&gt;I think one of the core aims of React is to allow developers to build a complex user interface system without needing to think about it all at once.&lt;/p&gt;

&lt;p&gt;I like this article called &lt;a href="https://jam1.re/blog/why-rusts-unsafe-works"&gt;Why Rust's Unsafe Works&lt;/a&gt; by &lt;a href="https://twitter.com/jam1garner"&gt;@jam1garner&lt;/a&gt; and it talks about the idea of &lt;strong&gt;locality&lt;/strong&gt; and &lt;strong&gt;encapsulation&lt;/strong&gt;. The article is unrelated to what we're talking about, but it says this about the &lt;em&gt;Rust&lt;/em&gt; programming language which I think is relevant:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the greatest features of Rust is its increased design focus on locality, which is to say, it's easier to reason about a function without looking outside the function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Rust language is designed in such a way that functions are able to maintain locality; you can normally understand what a function does, and confidently make changes to it, without needing to read other parts of the code as well. You can also know with certainty whether or not a change you make to a function might break other parts of the code based purely on its return type and the type of its parameters.&lt;/p&gt;

&lt;p&gt;React does something similar for us, by allowing us to write our user interface code in such a way that the component parts can maintain locality - i.e. we should be able to make changes to one specific part of our code in the confidence that it will either not affect other parts at all, or that we can fully understand how it might affect other parts of our user interface.&lt;/p&gt;

&lt;p&gt;React allows us to define a &lt;strong&gt;React component&lt;/strong&gt; as a single JavaScript function or class. A component encapsulates all of the appearance and behaviour that makes up some part of a user interface.&lt;/p&gt;

&lt;p&gt;And in doing so, React make it easy to reason about the behaviour of some part of a user interface by looking only within the scope of a single JavaScript function.&lt;/p&gt;

&lt;p&gt;Here's an example of a React function component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyUserInterface&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleButtonClick&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Howdy ma'am&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleButtonClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Hello dear
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code defines a component which I've decided to call MyUserInterface.&lt;/p&gt;

&lt;p&gt;The component will render an HTML &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; tag which contains the text "Hello dear".&lt;/p&gt;

&lt;p&gt;When the user clicks on the button, an alert will be shown in their browser window which says "Howdy ma'am".&lt;/p&gt;




&lt;p&gt;Sidenote: You might have noticed in the above code example that the syntax &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; is not valid JavaScript syntax.&lt;/p&gt;

&lt;p&gt;React uses a JavaScript language extension called JSX which compiles to vanilla JavaScript. Anywhere you see some JSX code like &lt;code&gt;&amp;lt;a href="/"&amp;gt;Home&amp;lt;/a&amp;gt;&lt;/code&gt; this can be transformed into normal JavaScript code like &lt;code&gt;React.createElement('a', {href: '/'}, 'Home')&lt;/code&gt; by a compiler such as &lt;a href="https://babeljs.io/"&gt;babel&lt;/a&gt;, &lt;a href="https://esbuild.github.io/"&gt;esbuild&lt;/a&gt; or &lt;a href="https://swc.rs/"&gt;swc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since JSX compiles to normal JavaScript, we can use our React components, for example, to make up part of a web page. Here's a code example that shows how to do this in a single &lt;code&gt;.html&lt;/code&gt; file which you can download and open in your favourite web browser: &lt;a href="https://raw.githubusercontent.com/stefee/reactjs.org/main/static/html/single-file-example.html"&gt;https://raw.githubusercontent.com/stefee/reactjs.org/main/static/html/single-file-example.html&lt;/a&gt; (this code is taken from the &lt;a href="https://reactjs.org/docs/getting-started.html#online-playgrounds"&gt;official React website&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;You can also use React &lt;a href="https://reactjs.org/docs/react-without-jsx.html"&gt;without JSX&lt;/a&gt; if you like!&lt;/p&gt;




&lt;p&gt;Here's a second example which has two components - but the rendered output will be the same as in the previous example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AlertButton&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleButtonClick&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alertText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleButtonClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyUserInterface&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AlertButton&lt;/span&gt; &lt;span class="na"&gt;alertText&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Howdy ma'am"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Hello dear
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AlertButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I have defined a new component and called it AlertButton.&lt;/p&gt;

&lt;p&gt;This component looks similar to the previous example, but the text values are passed in as parameters. The parameters passed into a React component are called properties, or &lt;strong&gt;props&lt;/strong&gt; for short.&lt;/p&gt;

&lt;p&gt;Now our MyUserInterface component will render the AlertButton component and pass the text values as props.&lt;/p&gt;

&lt;p&gt;The end result is identical to the previous example.&lt;/p&gt;

&lt;p&gt;However, by changing the text values to be passed in as parameters, we have created an abstraction which will allow us to re-use this part of our user interface.&lt;/p&gt;

&lt;p&gt;Here's an example where we render two different instances of AlertButton in our user interface:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AlertButton&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleButtonClick&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alertText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleButtonClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyUserInterface&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AlertButton&lt;/span&gt; &lt;span class="na"&gt;alertText&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Howdy ma'am"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                Hello dear
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AlertButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AlertButton&lt;/span&gt; &lt;span class="na"&gt;alertText&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Okeydokey"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                Goodbye
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AlertButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this interface, the "Hello dear" button works the same as before, but now if the user clicks the "Goodbye" button instead, they will see a different alert which says "Okeydokey".&lt;/p&gt;

&lt;p&gt;This example demonstrates how we were able to abstract some user interface behaviour into a component, and re-use the component to achieve distinct outcomes.&lt;/p&gt;

&lt;p&gt;This is good stuff! üëå&lt;/p&gt;




&lt;p&gt;Sidenote: I should explain the &lt;strong&gt;children&lt;/strong&gt; prop which we used in AlertButton before continuing.&lt;/p&gt;

&lt;p&gt;The children prop is a special prop which takes on the value of whatever appears between the open and close tags in our JSX code (&lt;code&gt;&amp;lt;AlertButton&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/AlertButton&amp;gt;&lt;/code&gt;) and it is used to describe a &lt;strong&gt;component hierarchy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Put simply, this means that whenever a component is rendered, its children will also be rendered as well as its children's children and so on, and so forth.&lt;/p&gt;

&lt;p&gt;The component hierarchy is what makes React components &lt;strong&gt;composable&lt;/strong&gt;; components can be assembled in different combinations to satisfy different needs.&lt;/p&gt;




&lt;p&gt;We've got one more key concept to cover which is &lt;strong&gt;state&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So far what we have seen is that a React component is able to describe how some part of a user interface should appear to the user.&lt;/p&gt;

&lt;p&gt;As well as describing how some part of our user interface is rendered, a React components is also able to manage the state of that part of the interface, that is to say it can describe how it will &lt;strong&gt;change&lt;/strong&gt; over time in response to events that may happen outside of its control.&lt;/p&gt;

&lt;p&gt;Here's an example of a component that manages some state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyCounterButton&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleButtonClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleButtonClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            counter is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code example I've defined a new component which renders a button.&lt;/p&gt;

&lt;p&gt;At first this button will say "counter is 0".&lt;/p&gt;

&lt;p&gt;When the user clicks on the button, an event is triggered and the text will change to say "counter is 1". If the user clicks again it will say "counter is 2" and so on, and so forth.&lt;/p&gt;

&lt;p&gt;What this example demonstrates is that a React component is able to persist some state in memory (in this case, the value of &lt;code&gt;counter&lt;/code&gt;) between renders; when our component is rendered, React must store the value of &lt;code&gt;counter&lt;/code&gt; somewhere so that it can be modified by our event handler and the value will be remembered for subsequent renders.&lt;/p&gt;

&lt;p&gt;If you've not used React before then you might have a lot of questions at this point. This seems a bit magical, doesn't it?&lt;/p&gt;

&lt;p&gt;I want to try and explain this fully, so we're going to talk a lot more in detail about exactly how state works in part 2 of this series.&lt;/p&gt;

&lt;p&gt;First though, let's imagine we were to create a similar user interface to our previous example using just JavaScript.&lt;/p&gt;

&lt;p&gt;Without React, we have to describe imperatively (step-by-step) how the elements are to be constructed and related to one another when our code gets executed - e.g. first we create a button and then we attach an event handler to the button and so on, and so forth.&lt;/p&gt;

&lt;p&gt;In contrast to this, React components are &lt;strong&gt;declarative&lt;/strong&gt;; we do not need to describe &lt;em&gt;how&lt;/em&gt; to construct our user interface, we only need to describe &lt;em&gt;what&lt;/em&gt; should be shown to the user.&lt;/p&gt;

&lt;p&gt;When we define a React component, we do not need to write the code that constructs the user interface elements explicitly - we are merely painting a picture for the renderer about how our user interface component should be.&lt;/p&gt;

&lt;p&gt;Since the elements that make up our user interface do not come into existence until we render the component hierarchy, we can also know for sure that, unless it is passed explicitly via props, it is impossible for one component to access an element which is created by another component and modify it's behaviour in some way - this is how React components enable us to fully encapsulate the behaviour of some part of our user interface and isolate it from the rest.&lt;/p&gt;

&lt;p&gt;This is also what enables us to maintain locality in our user interface code.&lt;/p&gt;

&lt;p&gt;When we look at the code in the MyCounterButton example, I can say with confidence that this component will &lt;em&gt;always&lt;/em&gt; render a button which says "counter", clicking the button will &lt;em&gt;always&lt;/em&gt; increment the number shown on the button, and there will &lt;em&gt;never&lt;/em&gt; be any other hidden behaviours attached to the button by other components that we need to be concerned about when editing this code.&lt;/p&gt;

&lt;p&gt;We can make all of these assertions simply because the function does not have parameters, and so we know that running the function will always produce the same result, and the result will be defined only by the code inside the scope of the function.&lt;/p&gt;

&lt;p&gt;In general, we can say that the appearance and behaviour of some user interface element rendered by a React component will &lt;em&gt;only&lt;/em&gt; change if the props received from its parent change, or as a result of some state defined internally, and that the way in which some part of our user interface changes over time can only be decided by its associated React component, and not any other parts of the system.&lt;/p&gt;

&lt;p&gt;This is how React enables us to break down a complex problem and reduce coupling between the component parts of our interface.&lt;/p&gt;

&lt;p&gt;It ultimately means that we can continue to introduce more complexity into our user interface over time, and as long as we are able to understand how each individual component works in isolation, we can have confidence in the system as a whole.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#end-of-part-1"&gt;
  &lt;/a&gt;
  End of part 1
&lt;/h2&gt;

&lt;p&gt;I think we've touched on all of the things I want to cover in this introduction.&lt;/p&gt;

&lt;p&gt;This was originally going to be a post about how &lt;code&gt;React.useRef&lt;/code&gt; works - which I haven't even mentioned once. I still think it's a good idea to talk about this as a way of building a robust mental model of React as a runtime system, so that will be the primary focus of part 2.&lt;/p&gt;




&lt;p&gt;Thanks for taking the time to read this! &amp;lt;3&lt;/p&gt;

&lt;p&gt;Please let me know what you think of it. You can contact me by email at &lt;a href="mailto:stef@srilq.email"&gt;stef@srilq.email&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, thank you Sam Greenhalgh for reading my first draft. What a nice man.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Is React Functional Programming?&lt;/em&gt; - Eric Normand &lt;a href="https://lispcast.com/is-react-functional-programming/"&gt;https://lispcast.com/is-react-functional-programming/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Why Rust's Unsafe Works&lt;/em&gt; - jam1garner &lt;a href="https://jam1.re/blog/why-rusts-unsafe-works"&gt;https://jam1.re/blog/why-rusts-unsafe-works&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>How to protect GitHub projects from non-reviewed code and force code review culture</title>
      <author>Mario Loncarek</author>
      <pubDate>Tue, 31 Aug 2021 07:39:24 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/how-to-protect-github-projects-from-non-reviewed-code-and-force-code-review-culture-3ip7</link>
      <guid>https://dev.to/bornfightcompany/how-to-protect-github-projects-from-non-reviewed-code-and-force-code-review-culture-3ip7</guid>
      <description>&lt;p&gt;In this blog post I will show you a way of protecting GitHub repositories from random pushes of non-reviewed code or pushes to the &lt;code&gt;master&lt;/code&gt;/&lt;code&gt;main&lt;/code&gt; branch. I‚Äôm a strong believer in deploying features via pull requests with code review. I will not get into the question if the branch and pull request workflow is good or bad, I have my opinion which is that pull requests and code reviews are a must for a team that wants to learn, so if you don't agree this article is not for you because it forces all team members to use it.&lt;/p&gt;

&lt;p&gt;Code review is a practice that depends on the culture. A culture with no ego, with a great wish for continuous learning, sharing and teamwork. Besides learning code, code reviews will improve your communication soft skills as you will need to be clear and professional without being harsh which will also show you if you are a good mentor or not.&lt;/p&gt;

&lt;p&gt;This article will focus on 3 steps to achieve pull request with code review practice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Workflow in theory &lt;/li&gt;
&lt;li&gt;Setting up your project&lt;/li&gt;
&lt;li&gt;Creating pull request template&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#workflow-in-theory"&gt;
  &lt;/a&gt;
  Workflow in theory
&lt;/h3&gt;

&lt;p&gt;1.On GitHub create a new branch from &lt;code&gt;master&lt;/code&gt; and use standard naming convention for branches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feature/name-of-the-feature&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fix/name-of-the-fix&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Try to do this for every &lt;code&gt;feature&lt;/code&gt;/&lt;code&gt;fix&lt;/code&gt; to avoid creating very large pull requests which will be very time consuming for reviewers.&lt;/p&gt;

&lt;p&gt;2.After you finish working, commit and push your code to your &lt;code&gt;feature&lt;/code&gt;/&lt;code&gt;fix&lt;/code&gt; branch and create pull request to merge this branch to &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;3.Assign someone for code review. The goal here is to learn from each other and to make sure all standards are met and code style is respected, and of course to make sure code does not have any bugs. &lt;/p&gt;

&lt;p&gt;4.If there are any questions/suggestions/fixes/changes requested from the person which is conducting code review, that person will request changes on GitHub with clear comments and the process starts again. All comments need to be resolved before the reviewer can accept the pull request, either changes or only answering the questions.&lt;/p&gt;

&lt;p&gt;5.After successful code review, the branch will be merged into the &lt;code&gt;master&lt;/code&gt; branch and the &lt;code&gt;feature&lt;/code&gt;/&lt;code&gt;fix&lt;/code&gt; branch will be automatically deleted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-your-project"&gt;
  &lt;/a&gt;
  Setting up your project
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-create-raw-codeowners-endraw-file"&gt;
  &lt;/a&gt;
  1. Create &lt;code&gt;CODEOWNERS&lt;/code&gt; file
&lt;/h4&gt;

&lt;p&gt;Code owners file defines individuals or teams that are responsible for code in a repository. Code owners are automatically requested for review when someone opens a pull request that modifies code that they own. To use a &lt;code&gt;CODEOWNERS&lt;/code&gt; file, create a new file called &lt;code&gt;CODEOWNERS&lt;/code&gt; in the &lt;code&gt;root&lt;/code&gt;, &lt;code&gt;docs/&lt;/code&gt;, or &lt;code&gt;.github/&lt;/code&gt; directory of the repository, in the branch where you'd like to add the code owners. I‚Äôm a simple guy so I always put everything in the &lt;code&gt;root&lt;/code&gt;. You can assign different code owners for different branches. In practice, no one could approve pull requests without code owners approval. This will protect developers from trying to merge pull requests that no one approved.&lt;/p&gt;

&lt;p&gt;Example &lt;code&gt;CODEOWNERS&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* @marioloncarek
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-manage-user-roles"&gt;
  &lt;/a&gt;
  2. Manage user roles
&lt;/h4&gt;

&lt;p&gt;On GitHub repository go to the &lt;code&gt;Settings&lt;/code&gt; tab and then choose &lt;code&gt;Manage access&lt;/code&gt; from the left menu. Here you can define which users can access your repository and what are their roles. Always have at least one administrator, and all other developers can have write permissions. In practice, administrators could override everything from this article and use their privileges to make changes on master branch or force merge without review. This could be helpful for hotfixes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i8sGMOOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swdnah795f1ije4m0ybd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i8sGMOOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swdnah795f1ije4m0ybd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-configure-branch-protection-settings"&gt;
  &lt;/a&gt;
  3. Configure branch protection settings
&lt;/h4&gt;

&lt;p&gt;On GitHub repository go to the &lt;code&gt;Settings&lt;/code&gt; tab and then choose &lt;code&gt;Branches&lt;/code&gt; from the left menu. Under &lt;code&gt;Branch protection rules&lt;/code&gt; click &lt;code&gt;Add rule&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IBGY5LS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8oaw6a95dh7c8c7z3rou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IBGY5LS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8oaw6a95dh7c8c7z3rou.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will open branch protection configuration. Under &lt;code&gt;Branch name pattern&lt;/code&gt; write your main branch name (probably &lt;code&gt;master&lt;/code&gt;) or any other branch you wish to protect. Configure all options according to this image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Or0ntcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v8u1bjmg093g7o5hyvi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Or0ntcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v8u1bjmg093g7o5hyvi.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This configuration will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;require pull request reviews before merging &lt;/li&gt;
&lt;li&gt;require review from code owners&lt;/li&gt;
&lt;li&gt;restrict who can dismiss pull request reviews&lt;/li&gt;
&lt;li&gt;require status checks to pass before merging&lt;/li&gt;
&lt;li&gt;require branches to be up to date before merging&lt;/li&gt;
&lt;li&gt;require conversation resolution before merging&lt;/li&gt;
&lt;li&gt;restrict who can push to matching branches&lt;/li&gt;
&lt;li&gt;disallow force pushes for all users with push access&lt;/li&gt;
&lt;li&gt;disallow users with push access to delete matching branches&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#creating-raw-pullrequesttemplatemd-endraw-file"&gt;
  &lt;/a&gt;
  Creating &lt;code&gt;pull_request_template.md&lt;/code&gt; file
&lt;/h3&gt;

&lt;p&gt;When you add a pull request template to your repository, project contributors will automatically see the template's contents in the pull request body.&lt;/p&gt;

&lt;p&gt;To make your pull request template visible in the repository's root directory, name the pull request template &lt;code&gt;pull_request_template.md&lt;/code&gt; and put it in the &lt;code&gt;root&lt;/code&gt; of the repository.&lt;/p&gt;

&lt;p&gt;Now when a contributor creates a new pull request they will see the template which will make pull request more standardised and contributors can be reminded about stuff that is important for the project (like standards, code style, build flows etc etc) with checklists.&lt;/p&gt;

&lt;p&gt;Example &lt;code&gt;pull_request_template.md&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## Description

Please include a summary of the change or which issue is fixed.

## Type of change

- [ ] New feature (non-breaking change which adds functionality)
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Area of change

- [ ] Frontend
- [ ] Backend

## General checklist:

- [ ] My code follows the style guidelines of this project
- [ ] I ran `npm run format`/`yarn format` before commit
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation where needed
- [ ] My changes generate no new warnings
- [ ] I have checked my code and corrected any misspellings
- [ ] I have updated `master` and merged to my branch before submitting pull request
- [ ] My pull request generate no conflicts with `master` branch
- [ ] I requested code review from other team members

## Frontend checklist:

- [ ] I followed guidelines for `HTML`/`LIQUID`, `SCSS`, `JAVASCRIPT` from readme
- [ ] My `Javascript` generate no new console errors  
- [ ] I tested my code cross browsers
- [ ] My slice is pixel perfect for both desktop and mobile according to design
- [ ] I conducted basic QA to assure all features are working
- [ ] I tested responsive for mobile and tablet resolutions

## Backend checklist:

- [ ] I tested admin by manually adding content from zero
- [ ] I followed guidelines for naming admin fields
- [ ] I created easy to use admin experience which is self-explanatory
- [ ] I added description to admin fields in hard-to-understand areas
- [ ] I followed guidelines for naming `php`/`liquid` variables
- [ ] I conducted basic QA to assure all features are working
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;These 3 setup steps will create strong protection of repositories against pushes of non-reviewed code or direct pushes to the master/main branch. It will force the team to apply the rules and maintain the code review culture.&lt;/p&gt;

&lt;p&gt;It‚Äôs not always easy to enforce people to follow the rules, but with suggestions given throughout the post, you can automate them quickly, to make sure that everyone follows them.&lt;/p&gt;

&lt;p&gt;What do you think about rules mentioned above? Do you have other advices to improve your team‚Äôs workflow?&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>github</category>
      <category>codereview</category>
      <category>productivity</category>
    </item>
    <item>
      <title>üöÄ JavaScript Project Series That Makes You Pro.</title>
      <author>Chetan AtrawalkarüëâCA.</author>
      <pubDate>Tue, 31 Aug 2021 07:11:36 +0000</pubDate>
      <link>https://dev.to/chetan_atrawalkar/javascript-project-series-that-makes-you-pro-33ma</link>
      <guid>https://dev.to/chetan_atrawalkar/javascript-project-series-that-makes-you-pro-33ma</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-coders"&gt;
  &lt;/a&gt;
  Hello Coders!üëã
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; is one of the leading names when it comes to front-end web development. Moreover, it is one of the best programming languages to learn and earn in 2021. There are several ways of learning JS, ranging from books to tutorials and one amazing way to learn javascript is building a projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So I'm start the series of javascript projects for learning javascript with enjoyable projects. Hope you like this mini project series.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BU1gGja8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3n3hkhxyzu83w59zm3f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BU1gGja8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3n3hkhxyzu83w59zm3f.gif" alt="wow"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started....üöÄ
&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-color-theme-switcher-using-javascript"&gt;
  &lt;/a&gt;
  1.üé® Color Theme Switcher Using JavaScript.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In this, we're going to see how you can change the theme of your website to any color you want using JavaScript. This can be considered as a mini-project if you're learning JavaScript. It teaches you DOM concepts and how to change styling of CSS through JavaScript. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#heres-a-preview-"&gt;
  &lt;/a&gt;
  Here's a preview :-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYhzZk1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f1c2bqzklgjyk8l3paf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYhzZk1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f1c2bqzklgjyk8l3paf.gif" alt="preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step - 1:&lt;/strong&gt; First Create project files - Index.html, Style.css and Script.js.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step - 2:&lt;/strong&gt; Then Copy the below HTML code and paste it into your code editor.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  Index.html
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;CodePen - Color Change Buttons&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"menu"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"menu__item menu__item--yellow "&lt;/span&gt; &lt;span class="na"&gt;data-background=&lt;/span&gt;&lt;span class="s"&gt;"e4a924"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"menu__item menu__item--red"&lt;/span&gt; &lt;span class="na"&gt;data-background=&lt;/span&gt;&lt;span class="s"&gt;"c92142"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"menu__item menu__item--green"&lt;/span&gt; &lt;span class="na"&gt;data-background=&lt;/span&gt;&lt;span class="s"&gt;"37b983"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"menu__item menu__item--purple"&lt;/span&gt; &lt;span class="na"&gt;data-background=&lt;/span&gt;&lt;span class="s"&gt;"9f32b8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script  &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here we have used tag to choose various colors for the theme. We have used an attribute "data-background" to specify the default background of the anchor tags.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step - 3:&lt;/strong&gt; After creating html file next is the use CSS code for styling.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#stylecss"&gt;
  &lt;/a&gt;
  Style.css
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.3vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f6f7fc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;background-color&lt;/span&gt; &lt;span class="m"&gt;0.55s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;will-change&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.menu__item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;will-change&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="n"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;background&lt;/span&gt; &lt;span class="m"&gt;0.55s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;vertical-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.menu__item&lt;/span&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fabe2b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.menu__item&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f43768&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.menu__item&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#45e1a3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.menu__item&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#c152da&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.menu__item--animate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.menu__item--active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;17rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation-name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.menu__item--active.menu__item--yellow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fabe2b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.menu__item--active.menu__item--red&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f43768&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.menu__item--active.menu__item--green&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#45e1a3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.menu__item--active.menu__item--purple&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#c152da&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step - 4:&lt;/strong&gt; Below is the JavaScript code which is the most important part in this Theme changer. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;We declared a const &lt;strong&gt;'menuItems'&lt;/strong&gt; which will get the tag attributes of our tags.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then in that const we store all the mouse event listener and at the same time calling the &lt;strong&gt;`buttonClick()&lt;/strong&gt;` method which assigns the specified color to the background.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scriptjs"&gt;
  &lt;/a&gt;
  Script.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;menuItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.menu__item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;menuItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;menuItems&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buttonClick&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;buttonClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;menu__item--active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-background&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it. You're done.&lt;/p&gt;

&lt;p&gt;That‚Äôs all! Let me know by comment below if you have successfully implemented this project. &lt;/p&gt;

&lt;p&gt;üõë And If you need more content like this follow &lt;strong&gt;@codev_land&lt;/strong&gt; on instagram.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-claim-and-just-code-it"&gt;
  &lt;/a&gt;
  Keep Claim And Just Code It üòé
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Multi-colored text in CSS</title>
      <author>Chris Bongers</author>
      <pubDate>Tue, 31 Aug 2021 07:10:13 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/multi-colored-text-in-css-1mi8</link>
      <guid>https://dev.to/dailydevtips1/multi-colored-text-in-css-1mi8</guid>
      <description>&lt;p&gt;In this article, we will be creating a super cool effect where we can have multi-colored text in CSS.&lt;/p&gt;

&lt;p&gt;I saw this effect a while ago on Twitter done by &lt;a href="https://twitter.com/argyleink/status/1409590647187656706"&gt;Adam Argyle&lt;/a&gt; and was blown away by how easy this can be achieved in CSS.&lt;/p&gt;

&lt;p&gt;Below is a demo of what we'll be creating today!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/ExXYzbg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-multicolored-gradient-text"&gt;
  &lt;/a&gt;
  CSS Multi-colored gradient text
&lt;/h2&gt;

&lt;p&gt;To create this effect, let's first start with our HTML structure. This is super easy as we only need one element!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;multi colored text in css&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then it's off to our CSS file to magic some magic ü™Ñ.&lt;/p&gt;

&lt;p&gt;Let's start by defining our five colors and our starting angle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color-1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#442288&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--color-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#6ca2ea&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--color-3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#b5d33d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--color-4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fed23f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--color-5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eb7d5b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--angle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are using the root to define variables as this is valid syntax in basic CSS. No need for SCSS here.&lt;/p&gt;

&lt;p&gt;Then let's add some styling to our body. This is used to center our text and make our background black. The effect works better on black but will also work on different colors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's start on styling our &lt;code&gt;h1&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;I'm breaking these up into a couple of steps to give more of an idea of what's happening.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-basic-heading-styling"&gt;
  &lt;/a&gt;
  1. Basic heading styling
&lt;/h3&gt;

&lt;p&gt;For our basic styling, we want a relatively big heading.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Roboto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;'Helvetica Neue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6.5vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give us the following output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7aqE5Fxl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629698862225/mJelzv5WB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7aqE5Fxl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629698862225/mJelzv5WB.png" alt="Heading stying"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-each-word-on-its-own-line"&gt;
  &lt;/a&gt;
  2. Each word on its own line
&lt;/h3&gt;

&lt;p&gt;As you can see above, it's just one big line. To get each word on its own line, we can use the following CSS hack.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;word-spacing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="nt"&gt;vw&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Making each word space on a single line&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fvZBOsED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629698977760/jKn1N700v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fvZBOsED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629698977760/jKn1N700v.png" alt="CSS Every word on its own line"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-css-text-gradient-background"&gt;
  &lt;/a&gt;
  3. CSS Text Gradient background
&lt;/h3&gt;

&lt;p&gt;Now we can move to add the gradient effect. We'll start by splitting the gradient into 5 steps, resulting in each word being one color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--angle&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--color-1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;19&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;19&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--color-2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--color-2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;39&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;39&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;40&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--color-3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;40&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--color-3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;59&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;59&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--color-4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--color-4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;79&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;79&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--color-5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;background-clip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;text&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;-webkit-background-clip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;text&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can see we define the colors we have in our &lt;code&gt;:root&lt;/code&gt; element definition. As well as the basic angle of 0.&lt;br&gt;
We add a transparent border between each color for our animation later on.&lt;br&gt;
As well as set the clipping mode to text.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kkcAjMY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629699790231/t2_xUUlq-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kkcAjMY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629699790231/t2_xUUlq-.png" alt="CSS Multi-coloured gradient effect"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#animating-a-linear-background-gradient-in-css"&gt;
  &lt;/a&gt;
  Animating a linear background gradient in CSS
&lt;/h2&gt;

&lt;p&gt;To animate the gradient is quite tricky.&lt;br&gt;
The main hack we are applying is by defining the &lt;code&gt;--angle&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Then we can go ahead and add an animation to our &lt;code&gt;h1&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;rotate&lt;/span&gt; &lt;span class="nt"&gt;linear&lt;/span&gt; &lt;span class="nt"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This animation looks as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--angle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, this doesn't do much yet, because the browser doesn't know &lt;code&gt;360deg&lt;/code&gt; is a value.&lt;br&gt;
We can fix this by defining a &lt;code&gt;@property&lt;/code&gt; for the &lt;code&gt;--angle&lt;/code&gt; variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="n"&gt;--angle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;syntax&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;lt;angle&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;initial-value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;inherits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: This idea was taken from this cool &lt;a href="https://css-tricks.com/animating-a-css-gradient-border/"&gt;CSS-Tricks article&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And there we go! A super cool CSS text animation effect. I hope you enjoyed this article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
    </item>
    <item>
      <title>What is 'this' ? üò≥</title>
      <author>Mayank Kumar</author>
      <pubDate>Tue, 31 Aug 2021 07:09:16 +0000</pubDate>
      <link>https://dev.to/mayank0508/what-is-this-4p6n</link>
      <guid>https://dev.to/mayank0508/what-is-this-4p6n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#this"&gt;
  &lt;/a&gt;
  This üò≠
&lt;/h2&gt;

&lt;p&gt;The this keyword can lead to some headaches in JavaScript - this blog hopefully acts as a remedy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2LMuD7rX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/h36vh423PiV9K/giphy.gif%3Fcid%3Decf05e4737goqavfe8abhgzhc5pbdgd86g3hx0to7j6kgboj%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2LMuD7rX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/h36vh423PiV9K/giphy.gif%3Fcid%3Decf05e4737goqavfe8abhgzhc5pbdgd86g3hx0to7j6kgboj%26rid%3Dgiphy.gif%26ct%3Dg" alt="hi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;this refers to different things, depending on where it's used and how (if used in a function) a function is called !&lt;/p&gt;

&lt;p&gt;Generally, this refers to the "thing" which called a function. That can be the global context, an object or some bound data/ object (e.g. when the browser binds this to the button that triggered a click event).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-this-in-global-context-ie-outside-of-any-function"&gt;
  &lt;/a&gt;
  1) this in Global Context (i.e. outside of any function)
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;// logs global object (window in browser) - ALWAYS (also in strict mode)! üôå&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-this-in-a-function-nonarrow-called-in-the-global-context"&gt;
  &lt;/a&gt;
  2) this in a Function (non-Arrow) - Called in the global context
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;// logs global object (window in browser) in non-strict mode, undefined in strict mode üôå&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-this-in-an-arrowfunction-called-in-the-global-context"&gt;
  &lt;/a&gt;
  3) this in an Arrow-Function - Called in the global context
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;// logs global object (window in browser) - ALWAYS (also in strict mode)! üôå&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-this-in-a-method-nonarrow-called-on-an-object"&gt;
  &lt;/a&gt;
  4) this in a Method (non-Arrow) - Called on an object
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mayank&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// or use method shorthand: greet() { ... }&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;// logs 'Max', "this" refers to the person object üôå&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-this-in-a-method-arrow-function-called-on-an-object"&gt;
  &lt;/a&gt;
  5) this in a Method (Arrow Function) - Called on an object
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Max&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;// logs nothing (or some global name on window object), "this" refers to global (window) object, even in strict mode üôå&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If in doubt, a console.log(this); can always help you find out what this is referring to at the moment!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8vvuYXfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og3yo6blha2karbyqj7e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8vvuYXfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og3yo6blha2karbyqj7e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HAPPY CODING üë®‚Äçüíª&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
